{"task_id":"MBXP_GO\/1","completion":"    int n_row := len(cost)\n    int n_col := len(cost[0])\n    int min_cost := 0\n\n    if m == 0 && n == 0 {\n        return 0\n    }\n    if n < 0 {\n        return -1\n    }\n\n    if n == 0 {\n        return -1\n    }\n\n    if n == 0 {\n        return -1\n    }\n\n    if m > n_row {\n        return -1\n    }\n\n    if m == n {\n        return cost[0][0]\n    }\n\n    int min := min_cost(cost, m - 1, n) + cost[m - 1][n]\n\n    int min1 := min_cost(cost, m, n - 1) + cost[m][n - 1]\n\n    int min2 := min_cost(cost, m - 1, n - 1) +","language":"go"}
{"task_id":"MBXP_GO\/2","completion":"    var i := 0;\n    var result := make([]int, len(test_tup1))\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result[i] = test_tup1[i];\n        }\n    }\n    return result;\n}","language":"go"}
{"task_id":"MBXP_GO\/3","completion":"\tif !math.prime(n) {\n\t\treturn true\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBXP_GO\/5","completion":"\tcount int\n\tfor _, i := range n {\n\t\tcount := count + count_ways(i-1)\n\t\tcount := count + count_ways(n-i)\n\t}\n\treturn count\n}","language":"go"}
{"task_id":"MBXP_GO\/6","completion":"\tif (a ^ b == 0) {\n\t\treturn true\n\t}\n\tvar oneBit = 1\n\tvar diff = a ^ b\n\tvar count = 0\n\twhile (diff > 0) {\n\t\tdiff = diff & (diff - 1)\n\t\tcount = count + 1\n\t}\n\tif (count == 1) {\n\t\treturn true\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBXP_GO\/7","completion":"\tret := make([]string, 0)\n\tfor i,c := range text {\n\t\tif (c != ' ' and string.Length() > 3) {\n\t\t\tre := regexp_replace(text, \"(?=.*[A-Za-z])(?=.*[A-Za-z][A-Za-z])(?=.*[A-Za-z][A-Za-z][A-Za-z])(?=.*[A-Za-z][A-Za-z][A-Za-z][A-Za-z])(?=.*[A-Za-z][A-Za-z][A-Za-z][A-Za-z][A-Za-z])(?=.*[A-Za-z][A-Za-z][A-Za-z][A-Za-z][A-Za-z][A-Za-z]).*\", \"*\")\n\t\t\tif (string.Length() >= re.Length()) {\n\t\t\t\tif (re.Length() == 0) {\n\t\t\t\t\t\/\/ No matches\n\t\t\t\t} else {\n\t\t\t\t\tfor","language":"go"}
{"task_id":"MBXP_GO\/8","completion":"    new_nums := []int{0}\n    for n, i in zip(nums, 0..len(nums)) {\n        new_nums = append(new_nums, pow(n, 2))\n    }\n    return new_nums\n}","language":"go"}
{"task_id":"MBXP_GO\/9","completion":"    int len := len(string)\n    int prevIndex := -1\n    int rotations := 0\n\n    for int i := 0; i < len; ++i {\n        if prevIndex == -1 {\n            prevIndex = i\n            continue\n        }\n        if string[i] != string[prevIndex] {\n            rotations++\n            prevIndex = i\n        }\n    }\n    return rotations\n}","language":"go"}
{"task_id":"MBXP_GO\/11","completion":"    i := 0\n    j := 0\n\n    for i := 0; i < s.len; i++ {\n        if s[i] == ch {\n            j = i\n            break\n        }\n    }\n\n    for j := s.len - 1; j >= i; j-- {\n        if s[j] == ch {\n            s[i] = s[j]\n            i++\n            break\n        }\n    }\n    s.slice(i, j + 1)\n}","language":"go"}
{"task_id":"MBXP_GO\/12","completion":"\tvar i := 0,\n\t\tlen := 0,\n\t\tj := 0,\n\t\tsum := 0,\n\t\tsorted := make([][]int, len)\n\tlen := len(M)\n\tfor i := 0; i < len; i++ {\n\t\tsum := 0\n\t\tfor j := 0; j < len; j++ {\n\t\t\tsum += M[i][j]\n\t\t}\n\t\tfor j := 0; j < len; j++ {\n\t\t\tsorted[i][j] = sum - M[i][j]\n\t\t}\n\t}\n\tfor i := 0; i < len; i++ {\n\t\tsort(sorted[i])\n\t}\n\tfor i := 0; i < len; i++ {\n\t\tfor j := 0; j < len; j++ {\n\t\t\tM[i][j] = sorted[i][j]\n\t\t}\n\t}\n\treturn M\n}","language":"go"}
{"task_id":"MBXP_GO\/13","completion":"    num_words := 0\n    common_words := make([]string, 0)\n    for w := range words {\n        if num_words < 1 {\n            num_words += 1\n            common_words[w] = w\n        } else if (w == &common_words[w]) {\n            num_words += 1\n        } else {\n            num_words -= 1\n            common_words[w] = make([]string, 0)\n            common_words[w] = w\n        }\n    }\n    ret := make([]interface{}, 0)\n    for w := range words {\n        ret[w] = make([]string, 0)\n        for common_word := range common_words {\n            if common_words[w] == common_word {\n                ret[w] = &ret[w] append(common_word)\n            }\n        }\n    }\n    return ret\n}","language":"go"}
{"task_id":"MBXP_GO\/14","completion":"    vol := l * b * h\n    return vol\n}","language":"go"}
{"task_id":"MBXP_GO\/15","completion":"    \/\/ split string at lowercase letters\n    var lowerstring := []string{text.lowercase.split()}\n    var lower_split_index := 0\n    \/\/ build output string\n    var split_text := \"\"\n    for _, i := range lowerstring {\n        if i == lower_split_index {\n            split_text += text[lower_split_index]\n            lower_split_index++\n        } else {\n            split_text += text[lower_split_index:i]\n            lower_split_index = i\n        }\n    }\n    if lower_split_index < text.length {\n        split_text += text[lower_split_index:]\n    }\n    return split_text\n}","language":"go"}
{"task_id":"MBXP_GO\/16","completion":"    match regex \/^([a-z]+)([a-z])?(_?([a-z]+))?$\/ {\n        case (match, _, _2, _3) =>\n            fmt.Printf(\"Found a match! %s\\n\", match)\n        else\n            fmt.Printf(\"Not matched! %s\\n\", match)\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/17","completion":"    return (a * 4)\n}","language":"go"}
{"task_id":"MBXP_GO\/18","completion":"    \/\/ convert all to lowercase\n    string0 = string0.tolower()\n    second_string = second_string.tolower()\n    \/\/ check for the first string\n    for (i,c) in enumerate(string0) {\n        if (c in second_string) {\n            \/\/ remove the character from the first string\n            string0 = string0.slice(0, i) + string0.slice(i+1)\n        }\n    }\n    \/\/ check for the second string\n    for (i,c) in enumerate(second_string) {\n        if (c in string0) {\n            \/\/ remove the character from the second string\n            second_string = second_string.slice(0, i) + second_string.slice(i+1)\n        }\n    }\n    \/\/ join the two strings\n    return string0 + second_string\n}","language":"go"}
{"task_id":"MBXP_GO\/19","completion":"    for _, i, _ := range arraynums {\n        if (arraynums.Count(i) > 1) {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/20","completion":"\treturn mod(x, 11) == 0\n}","language":"go"}
{"task_id":"MBXP_GO\/21","completion":"    i int, ret []int;\n    \/\/ Check parameters\n    if (m < 0 || n < 0) panic \"Invalid parameters\";\n\n    \/\/ Fill result\n    ret = make([]int, m);\n\n    \/\/ Fill with values\n    for (i := 0; i < m; ++i) {\n        ret[i] = n;\n    }\n\n    \/\/ Fill with multiples\n    \/\/ for (i := 1; i < m; ++i) {\n    \/\/     for (j := i + 1; j <= m; ++j) {\n    \/\/         ret[i] = ret[i] * j;\n    \/\/     }\n    \/\/ }\n\n    \/\/ Sort the result\n    sort(ret, compare);\n    return ret;\n}","language":"go"}
{"task_id":"MBXP_GO\/22","completion":"    nums = sorted(nums)\n    if (nums.length == 0) return -1\n    i := 1\n    while i < nums.length - 1 {\n        if nums[i] == nums[i - 1] {\n            return nums[i]\n        }\n        i++\n    }\n    return -1\n}","language":"go"}
{"task_id":"MBXP_GO\/23","completion":"    s int 0\n    for _, v := range list1 {\n        for i := 0; i < len(v); i++ {\n            for j := i+1; j < len(v); j++ {\n                s = v[i] + v[j]\n            }\n        }\n    }\n    return s\n}","language":"go"}
{"task_id":"MBXP_GO\/24","completion":"\tvar result int\n\tbinary.Init (32)\n\tbinary.Set (result, binary, binary.Size (binary))\n\tbinary.Shuffle (binary)\n\tresult = 0\n\tbinary.While (binary <> 0) {\n\t\tresult = (result * 2) + (binary.First (binary))\n\t\tbinary.Shuffle (binary)\n\t}\n\treturn result\n}","language":"go"}
{"task_id":"MBXP_GO\/25","completion":"    var arr1 []int = arr\n    var i int = 0\n    var product []int = []int\n    var product1 []int = []int\n    while i < n {\n        for (i = 0; i < n; i++) {\n            product [i] = arr1 [i]\n        }\n        if (product == []) {\n            return 0\n        }\n        for (i = 0; i < n; i++) {\n            product [i] = product [i] * arr1 [i]\n        }\n        for (i = 0; i < n; i++) {\n            if (product [i] > 0 && product [i] < 10 ** 9) {\n                product1 [i] = product [i]\n            }\n        }\n        for (i = 0; i < n; i++) {\n           ","language":"go"}
{"task_id":"MBXP_GO\/26","completion":"\tfor _, _, v := range test_list {\n\t\tif v == K {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBXP_GO\/27","completion":"    n := []int{0}\n    for s,i := range list {\n        n = append n, i % 10\n        if i \/= 10 == 0 {\n            n = append n, -i % 10\n        }\n    }\n    n = n.slice(0, n.len()-1)\n    return n.map {|i| i.to_s }.join(\"\")\n}","language":"go"}
{"task_id":"MBXP_GO\/28","completion":"    if (k > n) return 0\n    if (n == k || n == 0) return 1\n\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n}","language":"go"}
{"task_id":"MBXP_GO\/29","completion":"\tvar map []int\n\tfor _, _, count := range arr {\n\t\tif map[count] == nil {\n\t\t\tmap[count] = arr[count]\n\t\t} else {\n\t\t\tmap[count] = nil\n\t\t}\n\t}\n\n\tvar odd_count_arr []int\n\tvar count := 0\n\tvar tmp []int\n\tfor _, _, count := range arr {\n\t\tif count % 2 != 0 {\n\t\t\todd_count_arr[count] = map[count]\n\t\t}\n\t\tcount += 1\n\t}\n\n\tfor _, _, count := range odd_count_arr {\n\t\tfor _, _, tmp := range arr {\n\t\t\tif tmp == count {\n\t\t\t\treturn tmp\n\t\t\t}\n\t\t}\n\t}\n\n\treturn -1\n}","language":"go"}
{"task_id":"MBXP_GO\/30","completion":"  var n int\n  n := 0\n  for i := 0; i < s.Length; i++ {\n    for j := i; j < s.Length; j++ {\n      if s[j] == s[i] {\n        n++\n      }\n    }\n  }\n  return n\n}","language":"go"}
{"task_id":"MBXP_GO\/32","completion":"\tvar x int\n\tvar max x int\n\n\tif (n <= 1)\n\t\tmax = 2\n\telse {\n\t\tfor {\n\t\t\tx := 3\n\t\t\twhile (x < n && n % x != 0)\n\t\t\t\t++x\n\n\t\t\tif (x < n)\n\t\t\t\t++x\n\t\t\telse\n\t\t\t\tmax = x\n\t\t}\n\t}\n\n\treturn max\n}","language":"go"}
{"task_id":"MBXP_GO\/33","completion":"    if (N == 0)\n        return 0\n    else\n        return (N % 2) + decimal_To_Binary(N \/ 2)\n}","language":"go"}
{"task_id":"MBXP_GO\/34","completion":"\tn := 0\n\tvar i int\n\tsort.sort_inplace(ar, []int, []int, []int)\n\tfor i := 0; i < N; i++ {\n\t\tif ar[i] != n {\n\t\t\treturn n\n\t\t}\n\t\tn++\n\t}\n\treturn n\n}","language":"go"}
{"task_id":"MBXP_GO\/35","completion":"    var num []int{n+1}\n    for i := 0; i <= n; i++ {\n        num[i] = (i*(i+1))\/2\n    }\n    num[0] = 1\n    num[n] = 2*n\n    for i := 0; i < n; i++ {\n        num[i] = 2*i+1\n    }\n    var a int\n    for a := 1; a <= n; a++ {\n        var b int\n        for b := a+1; b <= n; b++ {\n            num[a] += num[b]\n        }\n    }\n    return num[n]\n}","language":"go"}
{"task_id":"MBXP_GO\/36","completion":"    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/37","completion":"\treturn sort.go(mixed_list)\n}","language":"go"}
{"task_id":"MBXP_GO\/38","completion":"    c := []int{}\n    for x := 0; x < len(list1); x++ {\n        if len(c) == 0 {\n            c[0] := list1[x]\n        } else {\n            c[1] := list1[x]\n        }\n    }\n    if len(c) == 0 {\n        return 0\n    }\n    if len(c) == 1 {\n        return 1\n    }\n    for x := 0; x < len(c); x++ {\n        if c[x] % 2 == 0 {\n            for y := 0; y < len(c); y++ {\n                if y != x && c[y] % 2 != 0 {\n                    return c[x] \/ c[y]\n                }\n            }\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/40","completion":"\tfor _, n := range nums {\n\t\tfreq, n := str_freq_element(n)\n\t\tfor f, c := range freq {\n\t\t\tif _, c != 0 {\n\t\t\t\tyield c, n + f\n\t\t\t}\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/41","completion":"    return nums filter {|n| n % 2 == 0}\n}","language":"go"}
{"task_id":"MBXP_GO\/42","completion":"    var map []string = []map[string]int{}\n    var result []int\n    for _, i := range arr {\n        if (map[i]) {\n            map[i]++\n        }\n        else {\n            map[i] = 1\n        }\n    }\n    var sum := 0\n    for _, i := range map {\n        if (map[i] >= 2) {\n            sum += i * (map[i] - 1)\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/43","completion":"    text = _s.Replace(_s.Chars(text), \".\", \"\")\n    return text.Matches(Regex(\"[a-z]+\"))?.All() ? \"Found a match!\" : \"Not matched!\"\n}","language":"go"}
{"task_id":"MBXP_GO\/44","completion":"\tif (0 == len(text)) {\n\t\treturn \"Not matched!\"\n\t}\n\tif (0 == len(text) || text[0] != 'p') {\n\t\treturn \"Not matched!\"\n\t}\n\treturn \"Found a match!\"\n}","language":"go"}
{"task_id":"MBXP_GO\/45","completion":"    var a,b,gcd\n    gcd := 0\n    for {a, b} in pairs(l) {\n        if b == 0 {\n            return a\n        }\n        gcd := gcd_rec(b, a)\n    }\n    return gcd\n}","language":"go"}
{"task_id":"MBXP_GO\/46","completion":"\tv := set.New()\n\tfor _, v := range data {\n\t\tif len(v) == 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBXP_GO\/47","completion":"    let res = 0\n    if A == 0 {\n        return 0\n    }\n    if B == 0 {\n        return A\n    }\n    let AmodB = A % B\n    while (AmodB != 0) {\n        res = AmodB\n        AmodB = AmodB % B\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/48","completion":"\treturn n | (1 << (n.bit_length() - 1))\n}","language":"go"}
{"task_id":"MBXP_GO\/49","completion":"    if len(nums) == 0 {\n        []int\n    } else {\n        []int = []\n        for _, v in nums {\n            for _, c in v if _ == N {\n                []int.append(c)\n            }\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/50","completion":"    \/\/ `min_length_list` should return a tuple of the minimum length and list of elements with that minimum length.\n    \/\/ `input_list` can contain more than one sub-lists.\n    \/\/ Return `nil` if `input_list` is empty.\n\n    int min_length = 0;\n    input_list.map {|sub_list|\n        \/\/ If `sub_list` is empty, return 0 and `sub_list`\n        \/\/ If `sub_list` has only one element, return the minimum length and `sub_list`\n        \/\/ If `sub_list` has more than one element, return `min_length` and `sub_list`\n        sub_list.length == 0 || sub_list.length == 1 || sub_list.length > 1 ? 0 : min_length, sub_list\n    }\n    return min_length, []\n}","language":"go"}
{"task_id":"MBXP_GO\/51","completion":"    return (x == y && y == z)\n}","language":"go"}
{"task_id":"MBXP_GO\/52","completion":"    c int\n    if (b <= 0) {\n        c = 1\n    } else if (h <= 0) {\n        c = 1\n    } else {\n        c = b * h\n    }\n    return c\n}","language":"go"}
{"task_id":"MBXP_GO\/53","completion":"  return \"Equal\" if string[0] == string[-1] else \"Not Equal\"\n}","language":"go"}
{"task_id":"MBXP_GO\/54","completion":"\t\/\/ Count the occurrence of numbers in the given array.\n\t\/\/ Initialize array to 0.\n\tvar count []int = [0]int\n\tfor _, v := range my_list {\n\t\tcount[v] = count[v] + 1\n\t}\n\n\t\/\/ Generate the sorted output.\n\tvar sorted []int = []int\n\tfor _, v := range count {\n\t\tsorted = append(sorted, v * count[v])\n\t}\n\n\treturn sorted\n}","language":"go"}
{"task_id":"MBXP_GO\/55","completion":"\tvar k := 1\n\tvar m := 0\n\tvar t := 1\n\n\tfor i := 1; i <= n; i++ {\n\t\tm = (r * t) \/ (k * i)\n\t\tt = t + m\n\t\tk = k + 1\n\t}\n\n\treturn t\n}","language":"go"}
{"task_id":"MBXP_GO\/56","completion":"    n, n-reverse, \/2 {\n        \/\/ If n % 2 != 0 then n is odd\n        return 0\n    }\n    \/\/ Else n is even\n    return 1\n}","language":"go"}
{"task_id":"MBXP_GO\/57","completion":"    arr.sort()\n    var arr_len = len(arr)\n    var max_num []int = []int{0};\n    var max_num_len = 0;\n    for _, i := range arr {\n        var num []int = []int{arr[i]};\n        if (num.Length > max_num_len) {\n            max_num = num;\n            max_num_len = num.Length;\n        }\n    }\n    var max_num_str = \"\"\n    for _, i := range arr {\n        max_num_str += max_num[i]\n    }\n    return max_num_str\n}","language":"go"}
{"task_id":"MBXP_GO\/58","completion":"\treturn -x * y == x * -y\n}","language":"go"}
{"task_id":"MBXP_GO\/59","completion":"    var octagonal 0\n    while (n > 0) {\n        octagonal += (n * 3)\n        n -= 1\n    }\n    return octagonal\n}","language":"go"}
{"task_id":"MBXP_GO\/60","completion":"    if len(arr) < 2 return 0\n    i int, j int\n    arr.sort()\n    i = 0\n    j = 1\n    len := 1\n    while i < len(arr) and j < len(arr) {\n        if arr[i] + arr[j] != 0 && arr[i] - arr[j] != 0:\n            if arr[i] + arr[j] > arr[i] - arr[j]:\n                len = max(len, j - i)\n                j = j + 1\n            else:\n                i = i + 1\n        else if arr[i] + arr[j] == 0:\n            len = max(len, j - i)\n            j = j + 1\n        else:\n            len = max(len, j - i)\n            i = i + 1\n    }\n    return len\n}","language":"go"}
{"task_id":"MBXP_GO\/61","completion":"    var res []int\n    s = s.split('')\n    s.map {\n        var arr []int\n        var sum 0\n        for _, v := range s {\n            sum = 0\n            for _, c := range v {\n                sum += c * 1\n            }\n            if sum == n {\n                arr = append(arr, 1)\n            }\n        }\n        if !arr.empty() {\n            res = append(res, arr.sum())\n        }\n    }\n    if !res.empty() {\n        return res.sum()\n    }\n    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/62","completion":"    int min = 0\n    for i := range xs {\n        if i < min {\n            min = i\n        }\n    }\n    return min\n}","language":"go"}
{"task_id":"MBXP_GO\/63","completion":"    var diffs: []int64 = []int64{0}\n    for _, _, diff in test_list {\n        if _, _ > diff {\n            diffs.append(_) } }\n    return max(diffs)\n}","language":"go"}
{"task_id":"MBXP_GO\/64","completion":"\tfor _, marks := range subjectmarks {\n\t\tfor _, subject := range marks {\n\t\t\tyield &subject, marks[subject]\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/65","completion":"\tfunc recur (list_index int) int {\n\t\tif list_index == nil {\n\t\t\treturn 0\n\t\t}\n\t\treturn recur(list_index + 1) + list(data_list, list_index)\n\t}\n\n\treturn recur(0)\n}","language":"go"}
{"task_id":"MBXP_GO\/66","completion":"    var int counter int = 0\n    for _, v := range list {\n        if v > 0 {\n            counter += 1\n        }\n    }\n    return counter\n}","language":"go"}
{"task_id":"MBXP_GO\/67","completion":"    \/\/ 1st bell number: 1\n    \/\/ 2nd bell number: 3, 1, 1, 2\n    \/\/ 3rd bell number: 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2\n    \/\/ 4th bell number: 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2\n    var mod = { 1, 3, 4, 6 }\n    var total = 0\n    for _, b in mod {\n        if (b <= n) {\n            total += 1\n            n -= b\n        }\n    }\n    return total\n}","language":"go"}
{"task_id":"MBXP_GO\/68","completion":"\tvar increasing: int = 0\n\tvar decreasing: int = 0\n\tfor _, v := range A {\n\t\tif v > A[increasing] {\n\t\t\tincreasing += 1\n\t\t}\n\t\tif v < A[decreasing] {\n\t\t\tdecreasing += 1\n\t\t}\n\t}\n\treturn increasing == len(A) or decreasing == len(A)\n}","language":"go"}
{"task_id":"MBXP_GO\/69","completion":"    for _, v := range l {\n        for _, w := range s {\n            if v == w {\n                return true\n            }\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/70","completion":"    var output [][]int = [][]int {\n        [][]int{\n            []int{Input[0][0], Input[0][1], Input[0][2]},\n            []int{Input[1][0], Input[1][1], Input[1][2]}\n        }\n    }\n    for i, arr := range output {\n        for j, _ := range arr {\n            if i != j && arr[i].length != k {\n                return \"All tuples have same length\"\n            }\n        }\n    }\n    return \"All tuples have same length\"\n}","language":"go"}
{"task_id":"MBXP_GO\/71","completion":"\tfor _, _, size := range nums {\n\t\tif size <= 1 {\n\t\t\tcontinue\n\t\t}\n\t\tvar gap := (size \/ 2).to_f64()\n\t\tvar i := 0\n\t\twhile i < size - 1 {\n\t\t\tif (nums[i] > nums[i+gap]) {\n\t\t\t\tswap!(nums[i], nums[i+gap])\n\t\t\t}\n\t\t\t++i\n\t\t}\n\t}\n\treturn nums\n}","language":"go"}
{"task_id":"MBXP_GO\/72","completion":"    n = n * n\n    return n > 0\n}","language":"go"}
{"task_id":"MBXP_GO\/73","completion":"    \/\/ your code goes here\n    re := \/([.,!?;:])\/g\n    return re.Split(text, (0, text.Length))\n}","language":"go"}
{"task_id":"MBXP_GO\/74","completion":"    n := colors.Length\n    m := patterns.Length\n\n    if n != m {\n        return false\n    }\n\n    if colors[0] == patterns[0] {\n        return is_samepatterns(colors[1..n], patterns[1..m])\n    }\n\n    for (i, pattern) := range patterns {\n        for (j, color) := range colors {\n            if i != j {\n                if pattern == color {\n                    return is_samepatterns(colors[(i + 1)..n], patterns[(j + 1)..m])\n                }\n            }\n        }\n    }\n\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/75","completion":"    if _, ok := range test_list {\n        return if _, (x, y) := range ok {\n            if x % K == 0 && y % K == 0 {\n                fmt.Println(\"(\"{x},{y}\")\", sep=\"\")\n            }\n        }\n    }\n\n    return \"\"\n}","language":"go"}
{"task_id":"MBXP_GO\/76","completion":"    var areaSquares = (m * n) * 4\n    areaSquares += (m * n) * 2\n    areaSquares -= (m * n)\n    areaSquares \/= 2\n    return areaSquares\n}","language":"go"}
{"task_id":"MBXP_GO\/77","completion":"    \/\/ TODO\n}","language":"go"}
{"task_id":"MBXP_GO\/78","completion":"\t\/\/ if no set bits, all integers are odd\n\tif (n & (n - 1)) return 0\n\n\t\/\/ if a set bit is odd, only half the integers are odd\n\tvar oddCount []int\n\tfor _, v := range n - 1 {\n\t\toddCount += {v ^ 1}\n\t}\n\n\treturn len(oddCount)\n}","language":"go"}
{"task_id":"MBXP_GO\/79","completion":"    return s.len % 2 == 0\n}","language":"go"}
{"task_id":"MBXP_GO\/80","completion":"\tr float64\n\tfor {\n\t\tv := 0.0\n\t\tfor {\n\t\t\tv := v + 1.0\n\t\t}\n\t\tr := r + (-1) ** v\n\t}\n\treturn r \/ 2.0\n}","language":"go"}
{"task_id":"MBXP_GO\/81","completion":"    result := make([][]int, test_tup1.Length, test_tup2.Length)\n    for i := 0; i < test_tup1.Length; i++ {\n        for j := 0; j < test_tup2.Length; j++ {\n            result[i][j] = test_tup1[i], test_tup2[j]\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/82","completion":"\treturn r^3 * (math.pi * math.pi * math.pi)\n}","language":"go"}
{"task_id":"MBXP_GO\/83","completion":"\tfor i := 0; i < strlen(strr); i++ {\n\t\tstrr[i] +\n\t}\n\treturn \n}","language":"go"}
{"task_id":"MBXP_GO\/84","completion":"  if n < 1 {\n    return -1\n  }\n  int curr := 1\n  for (int i := 1; i < n; i++) {\n    int next := 1\n    for (int j := 1; j < i; j++) {\n      if (curr == j) {\n        next = 2\n      }\n    }\n    curr = next\n  }\n  return curr\n}","language":"go"}
{"task_id":"MBXP_GO\/85","completion":"\treturn math.Pi * r ** 2\n}","language":"go"}
{"task_id":"MBXP_GO\/86","completion":"    (2*n - 1)^2\n}","language":"go"}
{"task_id":"MBXP_GO\/87","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBXP_GO\/88","completion":"\tfor v, i in range(0, len(list1)) {\n\t\tlist1[i]++\n\t}\n\tfor v, i in range(0, len(list1)) {\n\t\tmap[list1[i]]++\n\t}\n\treturn map\n}","language":"go"}
{"task_id":"MBXP_GO\/89","completion":"    var m int\n    var closestSmaller int\n    m := N\n    closestSmaller := N + 1\n    while true {\n        if m % closestSmaller == 0 {\n            return closestSmaller\n        }\n        if m < closestSmaller {\n            closestSmaller := m\n        }\n        m := m + 1\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/90","completion":"\tvar i int\n\tvar max i int\n\n\tfor (i, _ := range list1 {\n\t\tif len(list1[i]) > max {\n\t\t\tmax = len(list1[i])\n\t\t}\n\t}\n\n\treturn max\n}","language":"go"}
{"task_id":"MBXP_GO\/91","completion":"  if len(sub_str) > len(str1) {\n    return false\n  }\n  for _, v := range sub_str {\n    if v not in str1 {\n      return false\n    }\n  }\n  return true\n}","language":"go"}
{"task_id":"MBXP_GO\/92","completion":"\tn := n.Concat(0)\n\tfor _, c := range n {\n\t\tif n.HasDigit(c + 1) {\n\t\t\tn[c + 1] := n[c + 1] - 1\n\t\t} else if n.HasDigit(c - 1) {\n\t\t\tn[c - 1] := n[c - 1] + 1\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBXP_GO\/93","completion":"    if (b == 0) {\n        return 1;\n    }\n    return a * power(a, b-1)\n}","language":"go"}
{"task_id":"MBXP_GO\/94","completion":"    var index_minimum []interface{}\n    for index, i := range test_list {\n        index_minimum[i] = (min index, i)\n    }\n    var minimum []interface{}\n    foreach _, i := range index_minimum {\n        minimum[i] = (i, test_list[i][1])\n    }\n    return minimum[minimum[1]][0]\n}","language":"go"}
{"task_id":"MBXP_GO\/95","completion":"    if (len(lst) == 0) {\n        return 0\n    }\n    var res []int\n    res = []int{0}\n    i := 0\n    j := 0\n    k := 0\n    while (k < len(lst)) {\n        while (j < len(lst) && lst[j][i] >= lst[k][i]) {\n            j := j + 1\n        }\n        res = append(res, j - k)\n        i := i + 1\n        j = k + 1\n    }\n    if (res != []) {\n        return min(res)\n    } else {\n        return 0\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/96","completion":"    if n <= 1 {\n        return 0\n    } else {\n        return n % divisor(n - 1)\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/97","completion":"\tmap[int]int = 0\n\tfor _, l in ipairs(list1) {\n\t\tfor x in l {\n\t\t\t++map[x]\n\t\t}\n\t}\n\treturn map\n}","language":"go"}
{"task_id":"MBXP_GO\/98","completion":"\tvar length := 0.0\n\tvar total := 0.0\n\tfor _, number := range numbers {\n\t\tlength := length + 1.0\n\t\ttotal = total + number\n\t}\n\treturn total \/ length\n}","language":"go"}
{"task_id":"MBXP_GO\/99","completion":"    for _, i := range 0..2^n; {\n        if (i == 0) {\n            return \"0\"\n        }\n        s := i % 2\n        i := i \/ 2\n        if (i == 0) {\n            s\n        } else {\n            s, i\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/100","completion":"\ti := num\n\twhile (i != 0) {\n\t\ti := i - 1\n\t\tj := i\n\t\twhile (j != 0) {\n\t\t\tj := j \/ 10\n\t\t}\n\t\tif (i == j) {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBXP_GO\/101","completion":"    var arrLen = arr.len()\n    var num_to_search = arr[n]\n    var i = 0\n    while (i < k) {\n        if (arrLen < num_to_search) {\n            num_to_search = (arrLen + num_to_search) \/ 2\n        } else {\n            if (arr[num_to_search - 1] == num_to_search) {\n                num_to_search = (arrLen + num_to_search) \/ 2\n            } else {\n                num_to_search = arr[num_to_search - 1]\n            }\n        }\n        i += 1\n    }\n    return num_to_search\n}","language":"go"}
{"task_id":"MBXP_GO\/102","completion":"  return word.replace \/_\\w{1}\/, (match) => match[1].toUpperCase()\n}","language":"go"}
{"task_id":"MBXP_GO\/103","completion":"    var a []int64\n    a[0] = 1\n    a[1] = 1\n    var i := 2\n    while i < n {\n        a[i] = a[i-1] + a[i-2]\n        i := i + 1\n    }\n    if a[n] == m {\n        return n\n    }\n    else {\n        return -1\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/104","completion":"\tsort_list_by []string (\n\t\tinput_list.Select ([][]string)\n\t)\n\tfor _, value := range input_list {\n\t\tsort_list_by []string (\n\t\t\tvalue.Select {\n\t\t\t\t(string_1, string_2) => {\n\t\t\t\t\tif string_1 < string_2 {\n\t\t\t\t\t\treturn -1\n\t\t\t\t\t} else if string_1 > string_2 {\n\t\t\t\t\t\treturn 1\n\t\t\t\t\t}\n\t\t\t\t\treturn 0\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\t}\n\tsort_list_by []string (\n\t\tinput_list.Select {\n\t\t\t(string_1, string_2) => {\n\t\t\t\tif string_1 < string_2 {\n\t\t\t\t\treturn -1\n\t\t\t\t} else if string_1 > string_2 {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t\treturn 0\n\t\t\t}\n\t\t}\n\t)\n\treturn input_list\n}","language":"go"}
{"task_id":"MBXP_GO\/105","completion":"\ti int = 0\n\tfor {\n\t\tif lst[i] {\n\t\t\ti++\n\t\t}\n\t}\n\treturn i\n}","language":"go"}
{"task_id":"MBXP_GO\/106","completion":"    return append(test_list, test_tup)\n}","language":"go"}
{"task_id":"MBXP_GO\/107","completion":"  v int i = 0\n  for i := L to R {\n    if i < 0x10 {\n      return i\n    }\n    i -= 0x10\n  }\n  return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/109","completion":"    var a map[string][]int;\n    var i int;\n\n    a := make(map[string][]int)\n    for i := 0; i < n; i++ {\n        a[s[i]][i] = 1\n    }\n\n    \/\/ Find rotations\n    var j int;\n    var k int;\n    var rotations int;\n    rotations := 0\n\n    for k := 0; k < n \/ 2; k++ {\n        for j := k; j < n - 1; j++ {\n            if (a[s[k]][k] != a[s[j]][k] || a[s[k]][k] != a[s[j]][j] || a[s[k]][j] != a[s[j]][k]) {\n                rotations += 1\n            }\n        }\n    }\n\n    return rotations\n}","language":"go"}
{"task_id":"MBXP_GO\/110","completion":"    \/\/ Find the first element which is greater than or equal to the start value\n    val first_greater_than_or_equal = test_list.find { (x, y) => x >= strt_val }\n    \/\/ Return empty list if not found\n    if (first_greater_than_or_equal == nil) {\n        return []\n    }\n    \/\/ Find the first element which is less than or equal to the stop value\n    val first_less_than_or_equal = test_list.find { (x, y) => x <= stop_val }\n    \/\/ If there is no element to the left\n    if (first_less_than_or_equal == nil) {\n        \/\/ Create a list with the range of the stop value (inclusive)\n        val stop_list = []\n        for (x, y) := 0; x <= stop_val; x++ {\n            stop_list = append(stop_list, x)\n        }\n        ","language":"go"}
{"task_id":"MBXP_GO\/111","completion":"\tfor _, m in range(len(nestedlist)) {\n\t\tfor _, n in range(len(nestedlist)) {\n\t\t\tif m != n && *m == *n {\n\t\t\t\tyield *m\n\t\t\t}\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/112","completion":"    return diameter*2 + height*2\n}","language":"go"}
{"task_id":"MBXP_GO\/113","completion":"    \/\/ Split the string on the empty space character\n    text.Split (\" \").ToArray()\n    for i, v := range text {\n        \/\/ If it is not a number, return False\n        if !v.IsInt {\n            return False\n        }\n    }\n    \/\/ If we get here, return True\n    return True\n}","language":"go"}
{"task_id":"MBXP_GO\/114","completion":"    c := {}\n    for i, v := range test_list {\n        for k, w := range v {\n            c[k] = c.HasKey(k) ? c[k] + 1 : 1\n        }\n    }\n    res := []\n    for k, v := range c {\n        res = append res, (k, v)\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/116","completion":"    \/\/ TODO\n}","language":"go"}
{"task_id":"MBXP_GO\/117","completion":"    for i, (_, v) in ipairs(test_list) {\n        if !int_to_float(v) {\n            return nil\n        }\n    }\n\n    return test_list\n}","language":"go"}
{"task_id":"MBXP_GO\/118","completion":"    # string is empty?\n    if string0 == \"\" {\n        return []\n    }\n    # append the first character to the beginning of the list\n    return &string0[0..-1] + []string_to_list(string0[1..-1], &string)\n}","language":"go"}
{"task_id":"MBXP_GO\/119","completion":"\tvar count []int = []int\n\tsort arr []int { count }\n\tcount[n]++\n\tfor _, a := range arr {\n\t\tfor _, b := range count {\n\t\t\tif a == b {\n\t\t\t\treturn a\n\t\t\t}\n\t\t}\n\t\tcount[a]++\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBXP_GO\/120","completion":"    int max = 0\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1); j++ {\n            if (i != j) {\n                int temp = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n                if (temp > max) {\n                    max = temp\n                }\n            }\n        }\n    }\n    return max\n}","language":"go"}
{"task_id":"MBXP_GO\/121","completion":"    count := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            for k := 0; k < n; k++ {\n                if (A[i] + A[j] + A[k] == sum) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count == 3\n}","language":"go"}
{"task_id":"MBXP_GO\/122","completion":"    if n == 0 {\n        return 0\n    }\n    var result []string{\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n        \"\",\n       ","language":"go"}
{"task_id":"MBXP_GO\/123","completion":"    s, num, sum int\n    for num := 2; num < limit; num++ {\n        sum := num\n        for n := 2; n < sum \/ num; n++ {\n            if (sum % n == 0 && n == num) {\n                s := s + n\n            }\n        }\n    }\n    s\n}","language":"go"}
{"task_id":"MBXP_GO\/125","completion":"    var length string0 = 0\n    var length string1 = 0\n    var temp = []\n    for i := 0; i < n; i++) {\n        temp.append(0)\n    }\n    for i := 0; i < n; i++) {\n        if string0 > string1 {\n            string1 = string0\n        }\n        string0 = temp[i] + 1\n        string1 = string1 + 1\n        temp[i] = string1\n    }\n    var max = 0\n    for i := 0; i < n; i++) {\n        if temp[i] - temp[i + 1] > max {\n            max = temp[i] - temp[i + 1]\n        }\n    }\n    return max\n}","language":"go"}
{"task_id":"MBXP_GO\/126","completion":"    if (a == 0 || b == 0) {\n        return 0;\n    } else if (a == b) {\n        return 1;\n    } else if (a > b) {\n        return a - b;\n    } else {\n        return b - a;\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/127","completion":"  if (y == 0) {\n    return 0;\n  } else {\n    return x + multiply_int(x, y - 1);\n  }\n}","language":"go"}
{"task_id":"MBXP_GO\/128","completion":"    let words := str.split(sep = \" \")\n    result := []\n    for w := range words {\n        if len(w) > n {\n            result.append(w)\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/129","completion":"    \/\/ write code here\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/130","completion":"    \/\/ The hash table will store the frequencies of numbers.\n    \/\/ The number will be used as key and the frequency of the number as value.\n    \/\/ The hash table can be used to find the number with maximum frequency.\n    var table []int\n    for _, i := range nums {\n        table[i] := table[i] + 1 if i in table { table[i] ++ }\n        if table[i] == 2 {\n            return i, 2\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/131","completion":"    return .Go(v := \"aeiouAEIOU\", r := \"AEOIOU\")\n}","language":"go"}
{"task_id":"MBXP_GO\/132","completion":"    map {\n        case tup2 {{.0}, .1}} {\n            fmt.Sprintf(\"%s \", tup2)\n        }\n    }","language":"go"}
{"task_id":"MBXP_GO\/133","completion":"    var sum int\n    sum = 0\n    for i,n int in nums {\n        if n < 0 {\n            sum += n\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/134","completion":"\tif arr.len() == 0 {\n\t\treturn \"EMPTY\"\n\t}\n\n\tfor _, i := range arr {\n\t\tif i == (arr.len() - 1) {\n\t\t\tif i % 2 == 0 {\n\t\t\t\tfor _, i := range p {\n\t\t\t\t\tarr.pop()\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor _, i := range p {\n\t\t\t\t\tarr.pop()\n\t\t\t\t\tarr.pop()\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif i % 2 == 0 {\n\t\t\t\tfor _, i := range p {\n\t\t\t\t\tarr.pop()\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor _, i := range p {\n\t\t\t\t\tarr.pop()\n\t\t\t\t\tarr.pop()\n\t\t\t\t\tarr.pop()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif arr.len() == 0 {\n\t\treturn \"EMPTY\"\n\t} else {\n\t\treturn \"ODD\"\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/135","completion":"    return (n - 1) * (2 * n - 1)\n}","language":"go"}
{"task_id":"MBXP_GO\/136","completion":"    if (units < 0)\n        return 0.0\n    units = units * 0.25\n    units = units + (units * 0.2)\n    units = units + (units * 0.15)\n    units = units + (units * 0.1)\n    return units\n}","language":"go"}
{"task_id":"MBXP_GO\/137","completion":"    c := 0\n    for { i, n := range nums } {\n        if n == 0 { c := c + 1 }\n    }\n    return c \/ len(nums)\n}","language":"go"}
{"task_id":"MBXP_GO\/138","completion":"    n == 0 ? True : n & (n - 1) == 0 && is_Sum_Of_Powers_Of_Two(n \/ 2)\n}","language":"go"}
{"task_id":"MBXP_GO\/139","completion":"\treturn 2*3.14*r\n}","language":"go"}
{"task_id":"MBXP_GO\/140","completion":"    var answer []int\n    for _, v := range test_list {\n        if v == nil {\n            break\n        }\n        for _, w := range test_list {\n            if w == nil {\n                break\n            }\n            if v == w {\n                break\n            }\n            answer.append(v)\n        }\n    }\n    return answer\n}","language":"go"}
{"task_id":"MBXP_GO\/141","completion":"\tfor i := 0; i < 4; i++ {\n\t\tfor j := 0; j < 4; j++ {\n\t\t\tif (nums[j] > nums[j + 1]) {\n\t\t\t\t(sort ([]int) nums) (j, j + 1)\n\t\t\t}\n\t\t}\n\t}\n\treturn nums\n}","language":"go"}
{"task_id":"MBXP_GO\/142","completion":"    int samePairCount = 0\n\n    for _, x in ipairs(list1) {\n        for _, y in ipairs(list2) {\n            for _, z in ipairs(list3) {\n                if x == y && y == z {\n                    samePairCount++\n                }\n            }\n        }\n    }\n    return samePairCount\n}","language":"go"}
{"task_id":"MBXP_GO\/143","completion":"\tvar res int\n\tres = 0\n\tfor i := range Input {\n\t\tif len(i) < 2 {\n\t\t\tres\n\t\t}\n\t\tfor j := range i {\n\t\t\tif len(j) < 2 {\n\t\t\t\tres\n\t\t\t}\n\t\t\tif i[0] == j[0] and i[1] == j[1] {\n\t\t\t\tres + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBXP_GO\/144","completion":"    var a []int\n    var pairs [][]int{\n        a[0] = arr[0]\n        for i := 1; i < n; ++i\n            pairs[i] = []\n            pairs[i].push(a[i-1] - arr[i])\n            pairs[i].push(arr[i-1] - a[i])\n    }\n    var pairs_flat [][]int{\n        for i := 0; i < n; ++i\n            for j := i + 1; j < n; ++j\n                pairs_flat[i][j] = pairs[i][j]\n    }\n    var diffs []int{\n        for i := 0; i < n; ++i\n            for j := i + 1; j < n; ++j\n                diffs[i] = diffs[i] + pairs_flat[i][j]\n    }\n    var sum = 0\n    for i := 0;","language":"go"}
{"task_id":"MBXP_GO\/145","completion":"    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/146","completion":"\tvar sum ascii, i int = 0\n\tfor _, _ := range str1 {\n\t\tsum = ord(str1[i])\n\t\ti++\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBXP_GO\/147","completion":"  cur := 0\n  for idx := 0; idx < m; idx++ {\n    for jdx := 0; jdx < n; jdx++ {\n      if (idx == 0) {\n        cur := tri[idx][jdx]\n      } else if (jdx == 0) {\n        cur := tri[idx][jdx]\n      } else {\n        cur = Math.max(tri[idx][jdx], cur)\n      }\n      tri[idx][jdx] = cur\n    }\n  }\n  return cur\n}","language":"go"}
{"task_id":"MBXP_GO\/148","completion":"    let res = 0\n    let part_1 = N\n    while (part_1 > 0) {\n        let sum = 0\n        for (i := 0; i < 10; i++) {\n            sum = sum + part_1 % 10\n            part_1 = part_1 \/ 10\n        }\n        res = res + sum\n    }\n\n    let part_2 = res\n    while (part_2 > 0) {\n        let sum = 0\n        for (i := 0; i < 10; i++) {\n            sum = sum + part_2 % 10\n            part_2 = part_2 \/ 10\n        }\n        if (sum >= N)\n            return 1\n    }\n    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/149","completion":"    if n == 0 {\n        return 0\n    }\n\n    \/\/ DP array to store the length of longest subsequence\n    arr [0] int = 0\n\n    \/\/ DP array to store the difference between elements of subsequence\n    arr [1] int = 1\n\n    \/\/ Initialize DP array\n    for (i := 2; i <= n; i++) {\n        arr[i] = 0\n        for (j := 0; j < i; j++) {\n            if (arr[j] + 1 < arr[i]) {\n                arr[i] = arr[j] + 1\n            }\n        }\n    }\n\n    \/\/ Find the maximum length of subsequence\n    return arr[n]\n}","language":"go"}
{"task_id":"MBXP_GO\/150","completion":"  var i int = 0\n  var j int = 0\n  while i < a {\n    if j < b {\n      if c == i + j {\n        return true\n      }\n      j = j + 1\n    }\n    i = i + 1\n  }\n  return false\n}","language":"go"}
{"task_id":"MBXP_GO\/151","completion":"    if (x < y) {\n        return false\n    }\n    if (x = y) {\n        return true\n    }\n    for (i := 2; i <= y \/ i; i++) {\n        if (x % i == 0) {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/152","completion":"\ta := make([]int, len(x))\n\tfor i := 0; i < len(x); i++ {\n\t\ta[i] := x[i]\n\t}\n\tsort.merge_sort(a, []int, len(a))\n\treturn a\n}","language":"go"}
{"task_id":"MBXP_GO\/153","completion":"\tvar result float64[2]float64\n\tif (b == 0) {\n\t\tresult[0] = -c \/ a\n\t\tresult[1] = -c \/ a\n\t\treturn result\n\t}\n\tvar discriminant float64\n\tdiscriminant = b * b - 4 * a * c\n\tif (discriminant < 0) {\n\t\treturn nil\n\t} else {\n\t\tvar sqrtd float64\n\t\tsqrtd = sqrt(discriminant)\n\t\tresult[0] = (-b - sqrtd) \/ (2 * a)\n\t\tresult[1] = (-b + sqrtd) \/ (2 * a)\n\t\treturn result\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/154","completion":"    res := make([]int, 0)\n    for _, i := range nums {\n        for j, val := range i {\n            if j != N {\n                res = append(res, val)\n            }\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/155","completion":"    return (n & ~1) | (n & 1)\n}","language":"go"}
{"task_id":"MBXP_GO\/156","completion":"    \/\/ Check input is valid\n    if len(tuple_str) == 0 || len(tuple_str[0]) != 2 {\n        panic(\"Invalid input\")\n    }\n    \/\/ Convert each string to an integer\n    tuple_int []int = []int{\n        \/\/ Create a tuple of (string, int)\n        map(func(string) int, tuple_str)\n    }\n    \/\/ Return a tuple of (int, int)\n    return tuple_int\n}","language":"go"}
{"task_id":"MBXP_GO\/157","completion":"    map {\n        case list1[i] := 0..list1.len - 1 {\n            list1[i] := (list1[i], 0)\n        }\n        else if list1[i] < list1.len - 1 {\n            list1[list1[i]] = (list1[list1[i]], list1[i] + 1)\n        }\n    }\n    for i, (_, count) in enumerate(list1) {\n        for j in 0..count - 1 {\n            list1[i] = (list1[i][1], list1[i][0])\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/158","completion":"    arr.sort()\n    var diff = []int64\n    var index = 0\n    var max = 0\n    var curr = 0\n    for i := 0; i < n; i++ {\n        if (arr[i] != arr[i+1]) {\n            diff.append(arr[i+1]-arr[i])\n            if (diff.length > max) {\n                max = diff.length\n                index = i\n            }\n        }\n    }\n    if (max == k) return 0\n    if (diff.length == 1) return -1\n    if (max <= k-1) return -1\n    curr = 0\n    while (true) {\n        if (diff[curr] >= k) {\n            return curr + 1\n        }\n        curr++\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/159","completion":"    if (month == \"January\" && days > 20)\n        return \"winter\"\n    if (month == \"January\" && days < 20)\n        return \"summer\"\n    if (month == \"February\" && days > 19)\n        return \"winter\"\n    if (month == \"February\" && days < 19)\n        return \"summer\"\n    if (month == \"March\" && days > 20)\n        return \"winter\"\n    if (month == \"March\" && days < 20)\n        return \"summer\"\n    if (month == \"April\" && days > 21)\n        return \"winter\"\n    if (month == \"April\" && days < 21)\n        return \"summer\"\n    if (month == \"May\" && days > 21)\n        return \"winter\"\n    if (month == \"May\" &&","language":"go"}
{"task_id":"MBXP_GO\/160","completion":"    var x = nil\n    var y = nil\n    if (a == 1) {\n        if (n % b == 0) {\n            x = n \/ b\n            y = 1\n        }\n    } else if (a == b) {\n        if (n % a == 0) {\n            x = n \/ a\n            y = n % a\n        }\n    } else {\n        var gcd := math.Int(math.Gcd(a, b))\n        x = n \/ gcd\n        y = n % gcd\n    }\n    fmt.Println(\n        \"x = %v, y = %v\",\n        x,\n        y\n    )\n    fmt.Println(\"No solution\")\n}","language":"go"}
{"task_id":"MBXP_GO\/161","completion":"    set1, set2 := set(list1), set(list2)\n    set1 := set1 - set2\n    set2 := set2 - set1\n    return set1, set2\n}","language":"go"}
{"task_id":"MBXP_GO\/162","completion":"    var i int\n    i := 0\n    s := 0\n    while i < n {\n        s := s + i\n        i := i + 1\n    }\n    return s\n}","language":"go"}
{"task_id":"MBXP_GO\/163","completion":"\treturn 0.5 * math.tan((math.pi * s) \/ l)\n}","language":"go"}
{"task_id":"MBXP_GO\/164","completion":"\tvar divisorSum1 []int = [][]int{\n\t\tmath.Sqrt(num1).to_i,\n\t\tmath.Sqrt(num1).to_i\n\t};\n\t\n\tfor _, _ in divisorSum1 {\n\t\tvar divisorSum2 []int = [][]int{\n\t\t\tmath.Sqrt(num2).to_i,\n\t\t\tmath.Sqrt(num2).to_i\n\t\t};\n\t}\n\t\n\tfor _, divisor1 := range divisorSum1 {\n\t\tfor _, divisor2 := range divisorSum2 {\n\t\t\tif divisor1 == divisor2 {\n\t\t\t\treturn True;\n\t\t\t}\n\t\t}\n\t}\n\treturn False;\n}","language":"go"}
{"task_id":"MBXP_GO\/165","completion":"    counter int\n    counter := 0\n    for i := 0; i < str1.len; i++ {\n        \/\/ use charAt()\n        if (str1[i] == str1[i + 1]) {\n            counter++\n        }\n    }\n    return counter\n}","language":"go"}
{"task_id":"MBXP_GO\/166","completion":"\tvar count 0\n\tvar len 0\n\tvar i 0\n\tvar j 0\n\tlen = len(A)\n\tfor i := 0; i < len; i++ {\n\t\tfor j := i+1; j < len; j++ {\n\t\t\tcount += (A[i]^A[j]) % 2 == 0?1:0\n\t\t}\n\t}\n\treturn count\n}","language":"go"}
{"task_id":"MBXP_GO\/167","completion":"\tlet k := 0\n\twhile (n > 1) {\n\t\tk++\n\t\tn >>= 1\n\t}\n\treturn k\n}","language":"go"}
{"task_id":"MBXP_GO\/168","completion":"    for _, n := range a {\n        if n == x {\n            return a.count(n)\n        }\n    }\n    return -1\n}","language":"go"}
{"task_id":"MBXP_GO\/169","completion":"    var result int\n    result = 0\n    for {\n        result = result + 5*n*(3*n-1)\n        n--\n    }\n    result\n}","language":"go"}
{"task_id":"MBXP_GO\/170","completion":"    \/\/ If the start is smaller than the end, swap them\n    if m > n {\n        m, n = n, m;\n    }\n\n    \/\/ Create a variable to store the sum\n    var res int = 0;\n    \/\/ Traverse the list\n    for _, i int := range list1 {\n        \/\/ If the current index is within the range\n        if (i >= m && i <= n) {\n            \/\/ Add the current number to the sum\n            res = res + i;\n        }\n    }\n    \/\/ Return the sum\n    return res;\n}","language":"go"}
{"task_id":"MBXP_GO\/171","completion":"\treturn math.Pow(5,2) + math.Pow(5,3) + math.Pow(5,4) + math.Pow(5,5) + math.Pow(5,6)\n}","language":"go"}
{"task_id":"MBXP_GO\/172","completion":"    c := 0\n    for i := 0; i < len(s); i++ {\n        if s[i:i+3] == \"std\" {\n            c++\n        }\n    }\n    return c\n}","language":"go"}
{"task_id":"MBXP_GO\/173","completion":"    set := make(map[string]string)\n    for _, c := range text {\n        if (is(c, \"0123456789\") || is(c, \"abcdefghijklmnopqrstuvwxyz\"))\n            set[c] = c\n    }\n    for _, c := range text {\n        if c is \" \" || c is \"\\t\" || c is \"\\n\" || c is \"\\r\" {\n            set[c] = \"\"\n        }\n    }\n    return set.join(\"\")\n}","language":"go"}
{"task_id":"MBXP_GO\/174","completion":"    for x, y in l {\n        if !n, {n := [], y}\n        else if n.Count < 2 || (n.Count == 2 && n[0] != y) {\n            n, y\n        } else {\n            n += [y]\n        }\n    }\n    n\n}","language":"go"}
{"task_id":"MBXP_GO\/175","completion":"    if str1 == nil {\n        return true\n    }\n    if str1[0] == \"(\" && is_valid_parenthese(str1.slice(1)) {\n        return true\n    }\n    if str1[0] == \")\" && is_valid_parenthese(str1.slice(1)) {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/176","completion":"    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/177","completion":"\tfor _, g := range L..R {\n\t\tfor _, h := range L..R {\n\t\t\tif g * h >= L && g * h <= R {\n\t\t\t\tyield g, h\n\t\t\t}\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/178","completion":"\tfor _, s in ipairs(patterns) {\n\t\tif string == s {\n\t\t\treturn \"Matched!\"\n\t\t}\n\t}\n\treturn \"Not Matched!\"\n}","language":"go"}
{"task_id":"MBXP_GO\/179","completion":"    return for i := 2; i <= (x - 1)\/2; i += 1 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/180","completion":"\tcelat, celon := math.lat2cel(slat,slon)\n\treturn math.distance(elat,elon,celat,celon)\n}","language":"go"}
{"task_id":"MBXP_GO\/181","completion":"  return\n\n}","language":"go"}
{"task_id":"MBXP_GO\/182","completion":"    c := make(map[string]string)\n    n := 0\n    for s, e in regex.Range(string) {\n        if regex.IsUpper(string[s]) {\n            c[s] = \"U\"\n            c[e] = \"U\"\n            n += 1\n        } else if regex.IsLower(string[s]) {\n            c[s] = \"l\"\n            c[e] = \"l\"\n            n += 1\n        } else if regex.IsAlpha(string[s]) {\n            c[s] = \"a\"\n            c[e] = \"a\"\n            n += 1\n        } else if regex.IsNumeric(string[s]) {\n            c[s] = \"n\"\n            c[e] = \"n\"\n            n += 1\n        } else if regex.IsAlphaNumeric(string[s]) {\n            c[s] = \"a\"\n            c","language":"go"}
{"task_id":"MBXP_GO\/183","completion":"    c int = 0\n    for i int := 0; i < n; i++ {\n        for j int := i + 1; j < n; j++ {\n            if abs(arr[i] - arr[j]) == k {\n                c++\n            }\n        }\n    }\n    return c\n}","language":"go"}
{"task_id":"MBXP_GO\/184","completion":"    for _, v := range list {\n        if v > num {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/185","completion":"    \/\/ The function returns the focus of a parabola, as (-float64, float64).\n    \/\/ Find the focus of the parabola using the function:\n    \/\/ focus = (a*x**2 + b*x + c) \/ (2*a)\n    \/\/ where x = (focus - b) \/ a\n    \/\/ If x = 0, the focus is a straight line of focus, and if x < 0 the focus is to the left of the parabola.\n    \/\/ If x = 1, the focus is to the right of the parabola.\n    \/\/ If the focus is to the left of the parabola, return (-float64, 0.0).\n    \/\/ If the focus is to the right of the parabola, return (0.0, float64).\n    \/\/ Use the ** operator to raise the focus to the power of 2.\n    focus := (a*x**2 + b*x + c) \/ (2*a)\n   ","language":"go"}
{"task_id":"MBXP_GO\/186","completion":"\tfor _, i := range patterns {\n\t\tvar regex := '^' + i + '$'\n\t\tif regex.search(text) != nil {\n\t\t\treturn \"Matched!\"\n\t\t}\n\t}\n\treturn \"Not Matched!\"\n}","language":"go"}
{"task_id":"MBXP_GO\/187","completion":"    int i int = 0\n    int j int = 0\n    int[][] table int = [][]\n    int longest_common_subsequence_length int = 0\n\n    for i := 0; i < m; i++ {\n        table = []\n        for j := 0; j < n; j++ {\n            table.append(0)\n        }\n        table[0] = [0, 0]\n    }\n\n    for i := 1; i <= m; i++ {\n        for j := 1; j <= n; j++ {\n            if X[i - 1] == Y[j - 1] {\n                table[i][j] = table[i - 1][j - 1] + 1\n                if table[i - 1][j - 1] + 1 > table[i][j]\n                    table[i][j] = table[i - 1][j -","language":"go"}
{"task_id":"MBXP_GO\/188","completion":"    \/\/ Check if it's negative or zero\n    if (n < 0 || n == 0) {\n        return false\n    }\n    \/\/ Loop over every digit to check whether they can be multiplied\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= n; j++ {\n            if (i != j && i * i + j * j == n) {\n                return true\n            }\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/189","completion":"    var i int\n    var j int\n    for i := 0; i < n; i++ {\n        if (arr[i] > 0 && arr[i] < n && arr[i] != i + 1) {\n            j := arr[i] - 1\n            while (arr[j] != j + 1 && arr[j] != i + 1) {\n                var temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                j -= 1\n            }\n        }\n    }\n    for (i := 0; i < n; i++) {\n        if (arr[i] != i + 1) {\n            return i + 1\n        }\n    }\n    return n + 1\n}","language":"go"}
{"task_id":"MBXP_GO\/190","completion":"    c int\n    c := 0\n    for int i := x1; i <= x2; i++ {\n        for int j := y1; j <= y2; j++ {\n            if (i * i + j * j == i * i + j * j) {\n                c ++\n            }\n        }\n    }\n    return c\n}","language":"go"}
{"task_id":"MBXP_GO\/191","completion":"    monthname3 = monthname3.lower()\n    monthnumber = {\n        \"january\":1,\n        \"february\":2,\n        \"march\":3,\n        \"april\":4,\n        \"may\":5,\n        \"june\":6,\n        \"july\":7,\n        \"august\":8,\n        \"september\":9,\n        \"october\":10,\n        \"november\":11,\n        \"december\":12,\n        \"march\":3,\n        \"april\":4,\n        \"may\":5,\n        \"june\":6,\n        \"july\":7,\n        \"august\":8,\n        \"september\":9,\n        \"october\":10,\n        \"november\":11,\n        \"december\":12,\n        \"february\":2,\n        \"january\":1,\n        \"april\":4,\n        \"may\":5,\n        \"j","language":"go"}
{"task_id":"MBXP_GO\/192","completion":"\tvar regex = \/[a-zA-Z]\/\n\tvar match = regex.Match(string)\n\tvar regex2 = \/\\d\/\n\tvar match2 = regex2.Match(string)\n\tif match == nil && match2 == nil {\n\t\treturn False\n\t} else {\n\t\treturn True\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/193","completion":"    n := 0\n    res := make([]int, 0)\n    for i := 0; i < len(test_tup); i++ {\n        if test_tup[i] != test_tup[n] {\n            res[n] = test_tup[i]\n            n++\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/194","completion":"\tvar decimal []int\n\tdecimal[0] = 0\n\tfor int i = 1; i < 8; i++ {\n\t\tdecimal[i] = decimal[i-1]*2+n%10\n\t\tn \/= 10\n\t}\n\tdecimal[7] = n\n\treturn decimal[7]\n}","language":"go"}
{"task_id":"MBXP_GO\/195","completion":"\tlet low := 0\n\tlet high := arr.len() - 1\n\twhile low <= high {\n\t\tif arr[low] == x && arr[high] == x {\n\t\t\treturn 0\n\t\t}\n\t\telse if arr[low] < x {\n\t\t\tlow := low + 1\n\t\t}\n\t\telse {\n\t\t\thigh := high - 1\n\t\t}\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBXP_GO\/196","completion":"    test_list.sort()\n    i, j := 0, test_list.len - 1\n    while i < j {\n        if test_list[i].len == K {\n            j -= 1\n        } else if test_list[j].len == K {\n            i += 1\n        } else {\n            \/\/ remove tuples that have a length not equal to K\n            if test_list[i].len < K {\n                \/\/ swap the first and last element in list\n                swap(test_list[i], test_list[i+1])\n            }\n            if test_list[j].len < K {\n                \/\/ swap the last and first element in list\n                swap(test_list[j], test_list[j-1])\n            }\n            \/\/ remove the first element\n            test_list[i] = test_list[i+1]\n            \/\/ remove the last element\n            test_list[j] = test_list[j-1]\n        ","language":"go"}
{"task_id":"MBXP_GO\/197","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBXP_GO\/198","completion":"\t\/\/ TODO: Fill in your code here\n}","language":"go"}
{"task_id":"MBXP_GO\/199","completion":"    if n == 0 {\n        return 0\n    }\n    if n & (n - 1) == 0 {\n        return 1 + highest_Power_of_2(n \/ 2)\n    }\n    return highest_Power_of_2(n \/ 2)\n}","language":"go"}
{"task_id":"MBXP_GO\/200","completion":"\tfor i := range list1 {\n\t\tif max(list1[i]) == list1[i] {\n\t\t\tyield i\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/201","completion":"    for i := range lst {\n        if !mem {0} == lst[i] {0} ++\n    }\n    0 != (len lst) ? false : true\n}","language":"go"}
{"task_id":"MBXP_GO\/202","completion":"  if (len(str1) == 0) {\n    return \"\"\n  }\n  if (len(str1) == 1) {\n    return str1\n  }\n  if (len(str1) == 2) {\n    return str1[0] + str1[1]\n  }\n  if (str1[0] % 2 == 0) {\n    return remove_even(str1[1:])\n  } else {\n    return str1[0] + remove_even(str1[1:])\n  }\n}","language":"go"}
{"task_id":"MBXP_GO\/203","completion":"\tint dist := 0\n\n\tint xor := n1 xor n2\n\n\tfor _, i := range xor {\n\t\tdist += i == 1 ? 0 : 1\n\t}\n\n\treturn dist\n}","language":"go"}
{"task_id":"MBXP_GO\/204","completion":"    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == c {\n            count += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/205","completion":"    var inversions []int\n\n    for i, v1 in enumerate(test_tup) {\n        for j, v2 in enumerate(test_tup) {\n            if j < i && v1 > v2 {\n                inversions = append(inversions, abs(i - j))\n            }\n        }\n    }\n    return inversions\n}","language":"go"}
{"task_id":"MBXP_GO\/206","completion":"    s, res := make([]string, len(test_tup)), []string{}\n    for x, y := range test_tup {\n        for i := 0; i < len(s) && i < y; i++ {\n            if (x[i] != s[i]) {\n                s = append(s, x[i] + y[i])\n                res = append(res, x[i])\n            }\n        }\n        if (len(s) == y) {\n            s, res = s, append(res, x[y])\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/207","completion":"  go := func(string str) int {\n    counter := 1\n    for i := 1; i < str.len; i++ {\n      c := str[i]\n      for j := i + 1; j < str.len; j++ {\n        if str[j] == c {\n          counter += 1\n          i = j\n        }\n      }\n    }\n    return counter\n  }\n  maxcount := 0\n  for i := 1; i < str.len; i++ {\n    c := str[i]\n    count := go(str.slice(i))\n    if count > maxcount {\n      maxcount = count\n      start = i\n    }\n  }\n  return start + maxcount\n}","language":"go"}
{"task_id":"MBXP_GO\/208","completion":"    regex := ^(\\d{1,8}\\.\\d{1,8})$\n    match := regex.Match(num)\n    if match {\n        return true\n    } else {\n        return false\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/210","completion":"\tm := regex.Match(string0, \"[a-zA-Z0-9]*\")\n\tif m == nil {\n\t\treturn true\n\t}\n\n\tfor _, v := range m {\n\t\tif string[v] == nil {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}","language":"go"}
{"task_id":"MBXP_GO\/211","completion":"    int res = 0\n    for i := 0; i < n; i++ {\n        if (bit_isset(n, i) && bit_isset(n, i-1)) {\n            res++\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/212","completion":"\tsum int\n\tfor {\n\t\tsum = math.pow(4, n)\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBXP_GO\/213","completion":"\ttest_tup1 := test_tup1 ++ test_tup2\n\treturn test_tup1\n}","language":"go"}
{"task_id":"MBXP_GO\/214","completion":"\treturn math.Degrees(radian)\n}","language":"go"}
{"task_id":"MBXP_GO\/215","completion":"    if len(alist) == 0 {\n        return []\n    }\n    alist = alist + alist[-1]\n    return alist[0..-len(alist)]\n}","language":"go"}
{"task_id":"MBXP_GO\/216","completion":"\tvar match []interface{};\n\tfor _, v1 in ipairs(list1) {\n\t\tfor _, v2 in ipairs(list2) {\n\t\t\tif v1 == v2 {\n\t\t\t\tmatch = append(match, v1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor _, v in ipairs(list2) {\n\t\tif contains(match, v) == false {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}","language":"go"}
{"task_id":"MBXP_GO\/217","completion":"    \/\/ Write your code here\n    if str == nil {\n        return nil\n    }\n    var res []string\n    var found []byte\n    for ch := range str {\n        if found == nil {\n            found = []byte{0}\n        } else {\n            found = found + found\n        }\n        found = found + ch\n        if found.includes(ch) {\n            return ch\n        }\n    }\n    return \"\\0\"\n}","language":"go"}
{"task_id":"MBXP_GO\/218","completion":"\tvar diff int\n\tdiff := math.Abs(A - B)\n\n\tif diff == 0 {\n\t\treturn 0\n\t} else if diff > 0 {\n\t\treturn 1\n\t} else {\n\t\treturn -1\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/219","completion":"    result []int\n    min_elem = min_elem_so_far = test_tup[0]\n    max_elem = max_elem_so_far = test_tup[0]\n    for elem in test_tup[1..K] {\n        if elem < min_elem_so_far {\n            min_elem = elem\n            min_elem_so_far = elem\n        }\n        if elem > max_elem_so_far {\n            max_elem = elem\n            max_elem_so_far = elem\n        }\n    }\n    result = []int{\n        min_elem,\n        max_elem\n    }\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/220","completion":"    if (n == 0) {\n        return text\n    }\n    text := strconv.Format(text, \"XXXXXX%sXXXXX\", [str(n)])\n    result := \"\"\n    i := 0\n    while (i < len(text) - n + 1) {\n        if (strconv.IsAlphanumeric(text[i])) {\n            result := result + text[i]\n        } else {\n            result := result + text[i:i+n]\n            i := i + n - 1\n        }\n        i := i + 1\n    }\n    result := strconv.Format(result, \"XXXXXX:XXXXXX\")\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/221","completion":"    c int\n    for _, v := range nums {\n        if v % 2 == 0 {\n            c = v\n            break\n        }\n    }\n    return c\n}","language":"go"}
{"task_id":"MBXP_GO\/222","completion":"    for _, i := range test_tuple {\n        if type(i) != type(test_tuple[0]) {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/223","completion":"\tfor _, a := range arr {\n\t\tfor _, b := range arr {\n\t\t\tif (a == x || b == x) return false\n\t\t\tif (a == b) return true\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBXP_GO\/224","completion":"    s int\n    for i := 1; i <= 32; i++ {\n        if n & (1 << i) != 0 {\n            s++\n        }\n    }\n    return s\n}","language":"go"}
{"task_id":"MBXP_GO\/225","completion":"\tif low >= high {\n\t\treturn arr[0]\n\t}\n\tmid int = (low + high) \/ 2\n\tmidVal := find_Min(arr, mid+1, high)\n\tif arr[mid] < midVal {\n\t\treturn arr[mid]\n\t}\n\telif arr[mid] > midVal {\n\t\treturn find_Min(arr, low, mid-1)\n\t}\n\telse {\n\t\treturn midVal\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/226","completion":"    var result = \"\"\n    for (index, value) in range(0, len(string)) {\n        if (index % 2 != 0) {\n            result += string[index]\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/227","completion":"    if (a < b && a < c) {\n        return a\n    } else if (b < c) {\n        return b\n    } else {\n        return c\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/228","completion":"    if (n & (1<<l)) {\n        return false\n    } else if (n & (1<<r)) {\n        return false\n    } else {\n        return true\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/229","completion":"    var res []int\n    for _, i := range arr {\n        \/\/ swap negative and positive element\n        if i < 0 {\n            res += (i, -1)\n        } else if i >= 0 {\n            res += (-1, i)\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/230","completion":"    for _, _ in range(1, str1.Length) {\n        if (str1[0] == \" \") {\n            str1 = str1.Substring(1)\n        } else {\n            break;\n        }\n    }\n    for _, _ in range(str1.Length) {\n        if (str1[str1.Length - 1] == \" \") {\n            str1 = str1.Substring(0, str1.Length - 1)\n        } else {\n            break;\n        }\n    }\n    str1 = str1.Replace(\" \", char)\n    return str1\n}","language":"go"}
{"task_id":"MBXP_GO\/231","completion":"\tsum := 0\n\tfor _, row := range tri {\n\t\tfor i := 0; i < n; i++ {\n\t\t\tsum = max(sum, row[i] + row[i+1])\n\t\t}\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBXP_GO\/233","completion":"\treturn 2.0*3.14*r*r + 2.0*3.14*r*h + 2.0*3.14*h*h\n}","language":"go"}
{"task_id":"MBXP_GO\/234","completion":"\treturn 3 * l * l * l\n}","language":"go"}
{"task_id":"MBXP_GO\/235","completion":"    n & ~(0xAAAAAAAA)\n}","language":"go"}
{"task_id":"MBXP_GO\/236","completion":"    \/\/ TODO: Implement function\n    return -1\n}","language":"go"}
{"task_id":"MBXP_GO\/238","completion":"\t# string to use as a stack\n\tstack := []int {0}\n\t# current count of substrings\n\tcount := 0\n\t# keep popping from the stack if it is not empty\n\twhile stack != []int {\n\t\t# pop all characters from the stack\n\t\t# and check if it is a substring of the given string\n\t\tfor i := 0; i < (string len - stack top { }; i++ ) {\n\t\t\tif (str[stack top + i ] == string [stack top]) {\n\t\t\t\tstack.push(stack top + i + 1)\n\t\t\t}\n\t\t}\n\t\t# pop the last element from the stack if it is not empty\n\t\t# and update the count of substrings\n\t\tif stack != []int {\n\t\t\tcount := count + 1\n\t\t\tstack.pop()\n\t\t}\n\t}\n\treturn count\n}","language":"go"}
{"task_id":"MBXP_GO\/239","completion":"    if m < n {\n        panic(\"m should be greater than or equal to n\")\n    }\n    var count int = 0\n    for int i = 0; i < n; i++ {\n        for int j = i + 1; j <= n; j++ {\n            count += 1\n            if j - i >= m - 2 && j >= i + 2 {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/240","completion":"    res := make([]interface{}, 0)\n    len1, len2 := len(list1), len(list2)\n\n    if len1 < len2 {\n        len1, len2 = len2, len1\n        list1, list2 = list2, list1\n    }\n\n    for i,v := range len2 {\n        res[i] := list2[i]\n    }\n\n    for i,v := range len1-1 {\n        if i < len2 {\n            res[i] := list1[i]\n        }\n    }\n\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/241","completion":"    var arr [][][]string\n    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n            arr[i][j] = make(o, i * n + j)\n        }\n    }\n    return arr\n}","language":"go"}
{"task_id":"MBXP_GO\/242","completion":"\treturn str1.length\n}","language":"go"}
{"task_id":"MBXP_GO\/243","completion":"\tsort lst by .(a, b) {\n\t\t(a, b) := (str_to_hash(first(a)), str_to_hash(first(b)))\n\t}\n\treturn lst\n}","language":"go"}
{"task_id":"MBXP_GO\/244","completion":"\tv := 1.0\n\tv := math.Abs(math.Sqrt(v) - .5) + 1.0\n\tif v < N {\n\t\treturn v\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBXP_GO\/245","completion":"    let res int\n    res = 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < i; j++ {\n            for k := 0; k < j; k++ {\n                if arr[i] > arr[j] && arr[j] > arr[k] {\n                    res = res + arr[i]\n                }\n            }\n        }\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/246","completion":"\tif number < 0 {\n\t\treturn -1.0\n\t}\n\t\n\tif number == 0 {\n\t\treturn 0.0\n\t}\n\t\n\tvar result float64\n\tvar candidate float64\n\t\n\tcandidate := number \/ 2.0\n\t\n\tfor i int {\n\t\tresult := candidate\n\t\tcandidate := (result + number \/ result) \/ 2.0\n\t}\n\t\n\treturn result\n}","language":"go"}
{"task_id":"MBXP_GO\/247","completion":"    var m := 0\n    for i := 0; i < str.len - m; i++ {\n        if str[i] == str[i + 1] {\n            var s := str.slice(i)\n            if s.len > m {\n                m = s.len\n            }\n        }\n    }\n    return m\n}","language":"go"}
{"task_id":"MBXP_GO\/248","completion":"\tif n > 1 {\n\t\treturn harmonic_sum(n - 1) + 1.0 \/ n\n\t} else {\n\t\treturn n\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/249","completion":"    \/\/ Step 1: Initialize an empty set\n    set1 := set{}\n    for _, value := range array_nums1 {\n        set1.add(value)\n    }\n    \/\/ Step 2: Traverse the second array\n    set2 := set{}\n    for _, value := range array_nums2 {\n        if value in set1 {\n            set2.add(value)\n        }\n    }\n    \/\/ Step 3: Return the intersected set\n    return set2\n}","language":"go"}
{"task_id":"MBXP_GO\/250","completion":"    count := 0\n    for i := 0; i < len(tup); i++ {\n        if tup[i] == x {\n            count++\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/251","completion":"    for _, i := range list {\n        list[i - 1] = element\n        list[i] = ''\n    }\n    return list\n}","language":"go"}
{"task_id":"MBXP_GO\/252","completion":"\tvar (r float64, theta float64) = (0.0,0.0)\n\tfor _, v := range numbers {\n\t\tif _ < 2 {\n\t\t\tr, theta = _*math.pi\/2, v\n\t\t}\n\t\telse {\n\t\t\tr, theta = math.sqrt(v), math.atan2(v,math.sqrt(1.0-v*v))\n\t\t}\n\t\tr = r*math.cos(theta)\n\t\ttheta = r*math.sin(theta)\n\t}\n\treturn (r,theta)\n}","language":"go"}
{"task_id":"MBXP_GO\/253","completion":"    \/\/ Go\/Golang\n    var count = 0\n    for _, item := range list1 {\n        count += int(item)\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/254","completion":"\tfor w, _ in zip(text.scan(\"(?<=[aei]).*\"), text.scan(\"(?<=[aei]).*\")) {\n\t\tyield w\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/255","completion":"    \/\/ Go Code\n    var result [][]string\n    var map [string]int = []map[string]*int\n    for _, e in range {\n        map[e] = 0\n    }\n    for _, e in range {\n        map[l[0]] = map[l[0]] + 1\n    }\n    for _, e in range {\n        map[l[1]] = map[l[1]] + 1\n    }\n    for _, e in range {\n        map[l[2]] = map[l[2]] + 1\n    }\n    result = [][]string{map[e]}\n    for _, e in range {\n        for _, e in range {\n            for _, e in range {\n                result.push(e)\n            }\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/256","completion":"\tvar count int = 0\n\tvar i int = 1\n\tvar isPrime bool = true\n\twhile (i <= n) {\n\t\tif (isPrime == true) {\n\t\t\tcount++\n\t\t}\n\t\tisPrime = true\n\t\tfor (var j = 2; j <= Math.sqrt(i); j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\ti++\n\t}\n\treturn count\n}","language":"go"}
{"task_id":"MBXP_GO\/257","completion":"\tint *aPtr = a, aPtr, *bPtr = b, bPtr\n\tint result = []int(aPtr)\n\tint i = 0, j = 0\n\twhile (true) {\n\t\tif (aPtr == 0 && bPtr == 0) {\n\t\t\tbreak\n\t\t}\n\t\tif (aPtr == 0) {\n\t\t\tresult[j++] = bPtr\n\t\t\tbPtr = 0\n\t\t} else if (bPtr == 0) {\n\t\t\tresult[j++] = aPtr\n\t\t\taPtr = 0\n\t\t} else {\n\t\t\tif (aPtr < bPtr) {\n\t\t\t\tresult[j++] = aPtr\n\t\t\t\taPtr = aPtr + 1\n\t\t\t} else {\n\t\t\t\tresult[j++] = bPtr\n\t\t\t\tbPtr = bPtr + 1\n\t\t\t}\n\t\t}\n\t\ti++\n\t}\n\t*result = result\n\treturn &result\n}","language":"go"}
{"task_id":"MBXP_GO\/258","completion":"  count := 0\n  for(i,e) in array_nums {\n    if e % 2 != 0 {\n      count ++\n    }\n  }\n  return count\n}","language":"go"}
{"task_id":"MBXP_GO\/259","completion":"\tlet tup := make([][]int, test_tup1)\n\tlet test_tup2_sorted := make([][]int, test_tup2)\n\tfor {\n\t\tlet tup_sorted := sort(tup)\n\t\tfor {\n\t\t\tlet test_tup2_sorted_sorted := sort(test_tup2_sorted)\n\t\t\tif {\n\t\t\t\tcmp(tup_sorted, test_tup2_sorted_sorted) == 0 {\n\t\t\t\t\treturn tup_sorted\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest_tup2_sorted_sorted += test_tup2_sorted\n\t\t}\n\t}\n\treturn tup\n}","language":"go"}
{"task_id":"MBXP_GO\/260","completion":"\tint result := 1\n\tfor {\n\t\tfor {\n\t\t\tfor {\n\t\t\t\tfor {\n\t\t\t\t\tfor {\n\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tresult := result * 2\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}","language":"go"}
{"task_id":"MBXP_GO\/261","completion":"    res := make([]int, len(test_tup1))\n    for i := 0; i < len(test_tup1); i++ {\n        res[i] = test_tup1[i] \/ test_tup2[i]\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/262","completion":"\tif list1.len() < L {\n\t\treturn []()\n\t}\n\tr := make([]interface{}, 0)\n\tstart := 0\n\tend := L\n\twhile end < list1.len() {\n\t\tr[start] = list1[start]\n\t\tstart := start + 1\n\t\tend := end + 1\n\t}\n\treturn []([]string{})\n}","language":"go"}
{"task_id":"MBXP_GO\/263","completion":"    c := make(map[string]int, 0)\n    for _, v1 := range d1 {\n        for _, v2 := range d2 {\n            if v1 == v2 {\n                c[k] := v1 + v2\n                break\n            }\n        }\n    }\n    return c\n}","language":"go"}
{"task_id":"MBXP_GO\/264","completion":"    i_years int = h_age * 7\n    i_dogs int = i_years * 22\n    return i_dogs\n}","language":"go"}
{"task_id":"MBXP_GO\/265","completion":"    var result []interface{};\n    for i, v := range S {\n        if i % step == 0 {\n            result = append(result, []S{});\n        }\n        result[len(result)-1] = append(result[len(result)-1], v);\n    }\n    return result;\n}","language":"go"}
{"task_id":"MBXP_GO\/266","completion":"    \/\/ TODO: fill in your code\n}","language":"go"}
{"task_id":"MBXP_GO\/267","completion":"\tvar ans int = 0\n\tfor (i int) {\n\t\tif i % 2 == 1 && i <= n {\n\t\t\tans += i * i\n\t\t}\n\t}\n\treturn ans\n}","language":"go"}
{"task_id":"MBXP_GO\/268","completion":"    star := 0\n    for i := 0; i < n; i++ {\n        star = (star + 2 * i) * (i + 1) \/ i\n    }\n    return star\n}","language":"go"}
{"task_id":"MBXP_GO\/269","completion":"    var i int\n    for _, i := range k {\n        if (0x20 <= (int)k[i] && (int)k[i] <= 0x7e) {\n            return i\n        }\n    }\n    return -1\n}","language":"go"}
{"task_id":"MBXP_GO\/270","completion":"  var evenSum []int = []int{0}\n  var evenCount []int = []int{0}\n  var index []int = []int{-1}\n  for _, i := range arr {\n    if (i % 2 == 0) {\n      evenSum = append(evenSum, i)\n      evenCount = append(evenCount, 1)\n      index = append(index, i)\n    }\n  }\n  if index.count() == 0 {\n    return 0\n  }\n  var maxEvenIndex []int = index[index.count() - 1]\n  for _, i := range index {\n    if i % 2 != 0 {\n      evenSum = append(evenSum, arr[i])\n      evenCount = append(evenCount, -1)\n      if (i >= maxEvenIndex) {\n        maxEvenIndex = i\n      }\n    }\n  }","language":"go"}
{"task_id":"MBXP_GO\/271","completion":"    var sum int\n    if n == 1 {\n        sum = 1\n    }\n    else {\n        sum = n + even_Power_Sum(n - 1)\n    }\n\n    if (n % 2 == 0) {\n        sum = sum * sum * sum\n    }\n    else {\n        sum = sum * sum\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/272","completion":"    re := make([]int, test_list.len())\n    index := 0\n    for rec in test_list.iter() {\n        re[index] = rec[2]\n        index += 1\n    }\n    return re\n}","language":"go"}
{"task_id":"MBXP_GO\/273","completion":"\tresult := make([]int, len(test_tup1))\n\tfor i := 0; i < len(test_tup1); i++ {\n\t\tresult[i] := test_tup1[i] - test_tup2[i]\n\t}\n\treturn result\n}","language":"go"}
{"task_id":"MBXP_GO\/274","completion":"\tint even_binomial_Coeff_Sum []int{\n\t\tfor (i := 0; i < n; i ++){\n\t\t\tif (i % 2 == 0){\n\t\t\t\tfor (j := 1; j <= n; j ++){\n\t\t\t\t\tif (j % 2 == 0){\n\t\t\t\t\t\teven_binomial_Coeff_Sum[i] += (int) (math.factorial(j)) \/ math.factorial(j - i)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn even_binomial_Coeff_Sum[0]\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/275","completion":"\ti int = math.Length(a) - 1 - m\n\tfor {\n\t\tif a[i] == n\n\t\t\treturn i\n\t\ti -= 1\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBXP_GO\/276","completion":"\treturn 3.141592653589793 * r * r * h\n}","language":"go"}
{"task_id":"MBXP_GO\/277","completion":"    var ret = map[string]int{}\n    for key, val in map.iter() {\n        if val == n {\n            ret[key] = val\n        }\n    }\n    return ret\n}","language":"go"}
{"task_id":"MBXP_GO\/278","completion":"    var count := 0\n    var current := test_tup{}\n    for _, current := range test_tup {\n        if match _, nil := current {\n            count := count + 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/279","completion":"\tint d []int\n\td = [1..]0\n\tfor i := 0; i < n; i++ {\n\t\td = append(d, [1..]0)\n\t\tfor j := 1; j <= d[i]; j++ {\n\t\t\td[i] = d[i]*2 + d[i-j]\n\t\t}\n\t}\n\treturn d[n]\n}","language":"go"}
{"task_id":"MBXP_GO\/280","completion":"    for i,e in ipairs(dlist) {\n        if e == item {\n            return {true, i}\n        }\n    }\n    return {false}\n}","language":"go"}
{"task_id":"MBXP_GO\/281","completion":"    var unique_map[string]int{ }\n    for var i := 0; i < len(test_list); i++ {\n        unique_map[test_list[i]]++\n        if unique_map[test_list[i]] > 1 {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/282","completion":"  \/\/ initialize an array to return\n  result := make([]int, len(nums1)+len(nums2))\n\n  \/\/ loop through the first array\n  for i, n1 in enumerate(nums1) {\n    \/\/ loop through the second array\n    for j, n2 in enumerate(nums2) {\n      \/\/ store the element from the substraction\n      result[i+j] = n1 - n2\n    }\n  }\n\n  \/\/ return the result\n  return result\n}","language":"go"}
{"task_id":"MBXP_GO\/283","completion":"    var freqs []int\n    for freq in 0..9 {\n        freqs += n \/\/ 10^freq\n        n %= 10^freq\n    }\n    for _, freq in ipairs(freqs) {\n        if freq == 0 {\n            continue\n        }\n        if freq != 10^freq {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/284","completion":"\tfor i, elem := range list {\n\t\tif elem != element {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBXP_GO\/285","completion":"    match := regex.Match(text, \".a..bb..\")\n    if match {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/286","completion":"    max_sum := 0\n    i := 0\n\n    for i := 0; i < n; i++ {\n        local_sum := 0\n        for j := 0; j < k; j++ {\n            local_sum := local_sum + a[i]\n        }\n        if local_sum > max_sum {\n            max_sum = local_sum\n        }\n    }\n    return max_sum\n}","language":"go"}
{"task_id":"MBXP_GO\/287","completion":"    var sum int\n    var sqsum int\n    sum = 0\n    sqsum = 0\n    for (i := 1; i <= n; i++) {\n        sum += i\n        sqsum += i*i\n    }\n    sqsum *= sqsum\n    return sqsum - sum\n}","language":"go"}
{"task_id":"MBXP_GO\/288","completion":"    mod N\n    res []int\n    c := N\n    for i := 0; i < arr.Length; i++ {\n        res[i] = arr[i] * modinv(c, P) % P\n        c = (c - res[i]) * modinv(c, P)\n    }\n    c := 1\n    for i := 0; i < res.Length; i++ {\n        if res[i] == 0 {\n            res[i] = c\n            c += 1\n        }\n    }\n    return res[arr.Length - 1]\n}","language":"go"}
{"task_id":"MBXP_GO\/289","completion":"\tvar d int\n\td := 0\n\tfor d := 1; d <= N; d++ {\n\t\tif d % 2 == 1 {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn d\n}","language":"go"}
{"task_id":"MBXP_GO\/290","completion":"    int maxLen, maxInd\n    for _, l := range list1 {\n        if l .len > maxLen {\n            maxLen = l .len\n            maxInd = l .idx\n        }\n    }\n    nil, nil\n}","language":"go"}
{"task_id":"MBXP_GO\/291","completion":"    if n < 2\n        return 0\n    int [][] dp = [][] int {\n        [1, 1, 1],\n        [1, 1, 1]\n    }\n    for i := 2; i < n; i++ {\n        if k == 1 {\n            dp[i][0] = 1\n            dp[i][1] = 1\n        } else {\n            dp[i][0] = dp[i - 1][0] + 2 * dp[i - 1][1]\n            dp[i][1] = dp[i - 1][0] + 2 * dp[i - 1][1]\n        }\n    }\n    return dp[n - 1][0]\n}","language":"go"}
{"task_id":"MBXP_GO\/292","completion":"    if m == 0 {\n        return n\n    }\n    return n - find(n, m - 1)\n}","language":"go"}
{"task_id":"MBXP_GO\/293","completion":"\tl float64\n\tt float64\n\tl = w\n\tt = h\n\twhile (t > l) {\n\t\tt = l\n\t\tl = l + t\n\t}\n\treturn l\n}","language":"go"}
{"task_id":"MBXP_GO\/294","completion":"    var max_item interface{}\n    var i int\n    for i := 0; i < len(listval); i++ {\n        if len(listval[i]) != 2 {\n            panic(\"listval items are heterogeneous\")\n        }\n        max_item[0] = listval[i][0]\n        max_item[1] = listval[i][1]\n        if type(max_item[0]) != type(max_item[1]) {\n            panic(\"max_item types are not identical\")\n        }\n    }\n    for i := 0; i < len(max_item); i++ {\n        if type(max_item[i]) != int {\n            panic(\"max_item type is not int\")\n        }\n    }\n    return max_item[0]\n}","language":"go"}
{"task_id":"MBXP_GO\/295","completion":"    var total []int\n\n    \/\/ Find all divisors of the given number, and sum them\n    total = []int{\n        for _, div in pairs(number) {\n            if (number % div == 0)\n                total += [div]\n        }\n    }\n\n    return total.sum()\n}","language":"go"}
{"task_id":"MBXP_GO\/296","completion":"    let count = 0\n    for i := 0; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[i] > arr[j]) {\n                count++\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/297","completion":"    if len(list1) == 0 {\n        return []\n    }\n    val cur := list1[0]\n    if len(list1) == 1 {\n        return [cur]\n    }\n    list1 = list1[1..-1]\n    return append(list1, flatten_list(list1))\n}","language":"go"}
{"task_id":"MBXP_GO\/298","completion":"\tl3 := make([]interface{})\n\tfor l1_elem := range l1 {\n\t\tl2_elem := range l2 {\n\t\t\tfor l2_elem_elem := range l2_elem {\n\t\t\t\tif l1_elem == l2_elem_elem {\n\t\t\t\t\tl3 = append(l3, l2_elem_elem)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn l3\n}","language":"go"}
{"task_id":"MBXP_GO\/299","completion":"    result := make([]interface{}int32, 0);\n    max := make([]interface{}int32, 0);\n    for k, v in data {\n        if v >= max {\n            result = append(result, make([]interface{}int32, []int32{k,v}));\n            max = v;\n        }\n    }\n    return result;\n}","language":"go"}
{"task_id":"MBXP_GO\/300","completion":"\ts := 0\n\tfor _, i := range s, s+n {\n\t\ts = i\n\t\ts + 1\n\t}\n\treturn s\n}","language":"go"}
{"task_id":"MBXP_GO\/302","completion":"    n int = 0\n    int index int = 0\n    while int(n) >= 1 {\n        n >>= 1\n        index += 1\n    }\n    return index\n}","language":"go"}
{"task_id":"MBXP_GO\/303","completion":"    var i int\n    var j int\n    var c []int\n    c[0] = a[0]\n    c[1] = a[0]\n    for i = 2; i < n; i++ {\n        if a[i - 1] > a[i] {\n            c[i] = a[i - 1]\n            continue\n        }\n        j = i - 1\n        while j > 0 && a[j - 1] > a[i] {\n            c[j] = a[j - 1]\n            j--\n        }\n        c[j] = a[i]\n    }\n    var sorted []int\n    for i = 0; i < n - 1; i++ {\n        if c[i] > c[i + 1] {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/304","completion":"    var left = ranges[rotations - 1]\n    var right = ranges[(rotations + 1) % len(ranges)]\n\n    if index < left[0] || index > right[1] {\n        return -1\n    }\n\n    var center = ranges[(rotations + 1) % len(ranges)]\n\n    var leftValue = arr[index - left[0]]\n    var centerValue = arr[index - center[0]]\n    var rightValue = arr[index - right[0]]\n\n    if (leftValue != centerValue && leftValue == rightValue) {\n        return leftValue\n    } else if (centerValue == leftValue || centerValue == rightValue) {\n        return centerValue\n    } else {\n        return -1\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/305","completion":"    words = map[string]string{ $words }\n\n    match string {\n        case _ => nil,\n        case w => {\n            let found = []string\n            for _, w1 := range words {\n                if (word_starts_with(w, w1)) {\n                    found = append(found, w1)\n                }\n            }\n            return found\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/306","completion":"    if index < 0 {\n        return 0\n    }\n\n    \/\/ we have n elements\n    \/\/ a[0..index] is subsequence of a[0..n-1]\n    \/\/ a[i+1..index] is subsequence of a[i+1..n-1]\n    \/\/ a[i+1..index] will be a subsequence of a[i+1..index-1]\n    \/\/ so, a[i+1..index-1] is a subsequence of a[i+1..n-1]\n    \/\/ a[i+1..index-1] is a subsequence of a[i+2..n-1]\n\n    \/\/ the maximum sum of increasing subsequence for index < k is just sum of a[i+k..n-1]\n    \/\/ for any index < k, a[i+k..n-1] is a subsequence of a[i+1..index-1]\n\n    \/\/ if index == k, then\n    \/\/ the maximum sum of increasing subsequence for index = k is","language":"go"}
{"task_id":"MBXP_GO\/307","completion":"    _, m, _, _, _, _, _, _, _, n = tuplex\n    if _, m, n != () {\n        \/\/ Return the colon of the tuple.\n        return tuplex[:m] + tuplex[m:m+1] + (n,) + tuplex[m+1:]\n    } else {\n        \/\/ Return the empty tuple.\n        return tuplex\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/308","completion":"    n1 := len(nums1)\n    n2 := len(nums2)\n    res := make([]int, n1 + n2)\n    for i,e1 in enumerate(nums1) {\n        for j,e2 in enumerate(nums2) {\n            res[i + j] = 0 if res[i + j] > 0 else e1 * e2\n        }\n    }\n    return res[:N]\n}","language":"go"}
{"task_id":"MBXP_GO\/309","completion":"    if a > b {\n        return a\n    } else {\n        return b\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/310","completion":"    \/\/ Split the given string by spaces into array\n    \/\/ We will use .split() function in Go\/Golang\n    \/\/ Go - .Split() function\n    \/\/ Golang - .Split() function\n    \/\/ This will create an array where each element\n    \/\/ is a word\n\n    \/\/ We will use .Spilt() function in Go\/Golang\n    \/\/ Go - .Split() function\n    \/\/ Golang - .Split() function\n    \/\/ This will create an array where each element\n    \/\/ is a word\n\n    \/\/ We will use .IndexOf() function in Go\/Golang\n    \/\/ Go - .IndexOf() function\n    \/\/ Golang - .IndexOf() function\n    \/\/ This will return index of the first matching element\n    \/\/ from the given array\n    \/\/ We will use .IndexOf() function in Go\/Golang\n    \/\/ Go - .IndexOf() function\n    \/\/ Golang - .IndexOf() function\n    ","language":"go"}
{"task_id":"MBXP_GO\/311","completion":"    s int = 0\n    \/\/ rightmost unset bit\n    mask int = 1 << (n & -n)\n    \/\/ set it\n    return ~mask & s\n}","language":"go"}
{"task_id":"MBXP_GO\/312","completion":"\tv float64 := (1\/3) * pi * r * r * h;\n\treturn v\n}","language":"go"}
{"task_id":"MBXP_GO\/313","completion":"\tvar i int\n\tfor (i, v := range list1) {\n\t\tif v >= 0 {\n\t\t\t fmt.Println v\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/314","completion":"    \/\/ grid is 2 x n\n    \/\/ grid[y][x] is the value in cell (x, y)\n    int max_sum = 0\n    for (int y = 0; y < 2; y++) {\n        for (int x = 0; x < n; x++) {\n            int curr_max_sum = 0\n            for (int i = 0; i < 4; i++) {\n                int y2 = y + i \/ 2\n                int x2 = x + i % 2\n                if (y2 >= 0 && x2 >= 0 && y2 < 2 && x2 < n) {\n                    curr_max_sum += grid[y2][x2]\n                }\n            }\n            if (max_sum < curr_max_sum) {\n                max_sum = curr_max_sum\n            }\n        }\n    }\n    return max","language":"go"}
{"task_id":"MBXP_GO\/315","completion":"    let s := set(string)\n    if 0 == len(s) {\n        return \"-1\"\n    }\n    if -1 == s.find(nil) {\n        return \"-1\"\n    }\n    if -1 == s.find(string[1]) {\n        return \"-1\"\n    }\n    var i := 0\n    var e := 0\n    for i, e := range s {\n        if s[i] == s[e] {\n            return string[i]\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/316","completion":"\tvar i int\n\ti := 0\n\tfor i, e := range A {\n\t\tif e == x {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn i\n}","language":"go"}
{"task_id":"MBXP_GO\/317","completion":"    rlist := make([]interface{} , 0)\n    rlist = append(rlist, alist)\n\n    alist := alist\n    idx := 0\n    while idx < len(alist) {\n        prev := idx\n        idx = alist[idx]\n        if idx == prev: {\n            idx += 1\n        } else {\n            rlist = append(rlist, alist[prev])\n            idx = 1\n        }\n    }\n\n    alist = alist\n    idx := 0\n    while idx < len(alist) {\n        prev := idx\n        idx = alist[idx]\n        if idx == prev: {\n            idx += 1\n        } else {\n            rlist = append(rlist, alist[prev])\n            idx = 1\n        }\n    }\n\n    return rlist\n}","language":"go"}
{"task_id":"MBXP_GO\/318","completion":"\tvar vol []int\n\tvol = (vol,s) 0, vol\n\tfor i := 0; i < 3; i++ {\n\t\tvol[i] = vol[i] + 1\n\t}\n\tfor j := 2; j <= s; j += 3 {\n\t\tvol[0] = vol[1] + vol[2]\n\t\tvol[1] = vol[0] - 3\n\t\tvol[2] = vol[0] - 3\n\t}\n\treturn vol[0]\n}","language":"go"}
{"task_id":"MBXP_GO\/319","completion":"    text := \"^\\\\s+|[^\\\\s]+\\\\s+|[^\\\\s]+\\\\s+[^\\\\s]+\\\\s+|[^\\\\s]+\\\\s+[^\\\\s]+\\\\s+[^\\\\s]+\\\\s+$\"\n    _, word := regexp.Match(text, text)\n    result := make([]string, 0)\n    for i, word := range word {\n        if (len(word) >= 5) {\n            result = append(result, word)\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/320","completion":"    var sumOfSquares []int = []int{0}\n    var sumOfNumbers []int = []int{0}\n    for _, i := range n {\n        sumOfSquares += (i * i)\n        sumOfNumbers += i\n    }\n    return sumOfSquares - sumOfNumbers * sumOfNumbers\n}","language":"go"}
{"task_id":"MBXP_GO\/321","completion":"    _, digits := range s {|d| int(d) < 10}\n    res := \"\"\n    demlo := 123456789\n    for i, d in digits {\n        d1, d2 := demlo[:i], demlo[i:]\n        _, res := append_str(res, d2, d1)\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/322","completion":"    list2 := make([]int, len(list1))\n    for int i := 0; i < len(list1); i++ {\n        min := min(list1[i:])\n        list2[min] = i\n        list1[i] := nil\n    }\n    return list2\n}","language":"go"}
{"task_id":"MBXP_GO\/323","completion":"    let i := 0\n    while i < n - 1 {\n        if arr[i] < 0 {\n            arr[i] += n\n            arr[i + 1] -= n\n            i += 1\n        }\n        i += 1\n    }\n    return arr\n}","language":"go"}
{"task_id":"MBXP_GO\/324","completion":"    var sum []int = []int{0}\n    for i := 0; i < test_tuple.length; i++ {\n        if i % 2 == 0 {\n            sum[i] = test_tuple[i]\n        } else {\n            sum[i] = sum[i-1] + test_tuple[i]\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/325","completion":"\t\/\/ Get all the squares of 1 (1 * 1 = 1)\n\ts int = 1\n\twhile s * s < n {\n\t\ts ++\n\t}\n\n\t\/\/ Get all the squares of 2 (2 * 2 = 4)\n\ts int = 2\n\twhile s * s < n {\n\t\ts ++\n\t}\n\n\t\/\/ Get all the squares of 3 (3 * 3 = 9)\n\ts int = 3\n\twhile s * s < n {\n\t\ts ++\n\t}\n\n\t\/\/ Get all the squares of 4 (4 * 4 = 16)\n\ts int = 4\n\twhile s * s < n {\n\t\ts ++\n\t}\n\n\t\/\/ Get all the squares of 5 (5 * 5 = 25)\n\ts int = 5\n\twhile s * s < n {\n\t\ts ++\n\t}\n\n\t\/\/ Get all the squares","language":"go"}
{"task_id":"MBXP_GO\/326","completion":"    val map = []map[string, int]()\n    for s, i := range test_list {\n        if map.count(s) < map[s] {\n            map[s] = i\n        }\n    }\n    val max_key = 0\n    for k, v := range map {\n        if v > max_key {\n            max_key = v\n            key = k\n        }\n    }\n    return key\n}","language":"go"}
{"task_id":"MBXP_GO\/327","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBXP_GO\/328","completion":"    if m < 0 {\n      return list1\n    }\n    var arr []int\n    for i := 0; i < m; i++ {\n      arr = arr + list1\n    }\n    return arr\n  }","language":"go"}
{"task_id":"MBXP_GO\/329","completion":"    var count int\n    for _,v := range list {\n        if v < 0 {\n            count += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/330","completion":"    _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ := range(0, text.len)\n    for _, _, _, char, _, _ in range(0, text.len, 12) {\n        if (match := text.slice(char, char+5)) {\n            if (match.len == 5 || match.len == 6) {\n                if (match.len == 5) match += ' '\n                append(match)\n            }\n        }\n    }\n    return\n}","language":"go"}
{"task_id":"MBXP_GO\/331","completion":"    return n - ((n >> 1) & -n);\n}","language":"go"}
{"task_id":"MBXP_GO\/332","completion":"  map[str1]int{\n    }\n  }","language":"go"}
{"task_id":"MBXP_GO\/333","completion":"\tvar sorted_li [][]interface{}\n\tfor _, sub_li := range sub_li {\n\t\tsort(sub_li.1)\n\t}\n\treturn sorted_li\n}","language":"go"}
{"task_id":"MBXP_GO\/334","completion":"\treturn (a+b>c) && (a+c>b) && (b+c>a)\n}","language":"go"}
{"task_id":"MBXP_GO\/335","completion":"    a = a * n \/ d\n    b = a * (n + 1) \/ d - n\n    return a + b\n}","language":"go"}
{"task_id":"MBXP_GO\/336","completion":"  val monthnum = months_dict[monthname1]\n  return monthnum >= 28\n}","language":"go"}
{"task_id":"MBXP_GO\/337","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBXP_GO\/338","completion":"    count int = 0\n    for i := 0; i < s.size(); i++ {\n        for j := i + 1; j < s.size(); j++ {\n            if s[i] == s[j] && i != j {\n                count++\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/339","completion":"\t\n    \/\/ Your code here\n\n    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/340","completion":"    for _, v := range lst {\n        for _, w := range lst {\n            for _, x := range lst {\n                if v + w + x < 0 &&\n                    v + w + x >= 0 &&\n                    v + w + x > -v + w + x &&\n                    v + w + x > -v &&\n                    v + w + x > -w + x {\n                        return v + w + x\n                    }\n                }\n            }\n        }\n    }","language":"go"}
{"task_id":"MBXP_GO\/343","completion":"    var dig []int\n    for i,c := range s {\n        if (i == 0) dig.append(c)\n        dig.append(int(str[i] == str[i-1]))\n    }\n    dig.append(int(str[len(s)-1] == \" \"))\n    return dig\n}","language":"go"}
{"task_id":"MBXP_GO\/344","completion":"    let count = 0\n    n = n * n\n    for i := 1; i <= m; i++ {\n        if i % n == 0 {\n            count = count + 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/345","completion":"    \/\/ Fill this in.\n}","language":"go"}
{"task_id":"MBXP_GO\/346","completion":"    e := 0\n    if (k > 0) {\n        e := (n - 1) \/ 2\n    }\n    for _ := 0; _ < k; _++ {\n        e = e * 2 + 1\n    }\n    return e\n}","language":"go"}
{"task_id":"MBXP_GO\/347","completion":"    if (m < 0 || m > n || n > 1000) {\n        return 0\n    }\n    if (m == 0 && n == 0) {\n        return 0\n    }\n    int squares []int = []int{-1};\n    for (int i = m - 1; i <= m + 1; i++) {\n        squares [i] = 0\n    }\n    for (int j = n - 1; j <= n + 1; j++) {\n        squares [j] = 0\n    }\n    for (int i = m - 1; i <= m + 1; i++) {\n        for (int j = n - 1; j <= n + 1; j++) {\n            squares [j] += (i + j) * (i + j)\n        }\n    }\n   ","language":"go"}
{"task_id":"MBXP_GO\/348","completion":"\tvar S [][]int = [][]int\n\tfor (var i = 0; i < M; i++) {\n\t\tS[i][] = []\n\t\tfor (var j = 0; j < M; j++) {\n\t\t\tS[i][j] = 0\n\t\t}\n\t}\n\tfor (var i = 0; i < M; i++) {\n\t\tfor (var j = 0; j < M; j++) {\n\t\t\tif (i == 0) {\n\t\t\t\tS[i][j] = j + 1\n\t\t\t} else if (j == 0) {\n\t\t\t\tS[i][j] = i + 1\n\t\t\t} else {\n\t\t\t\tvar min = 0xffffffff\n\t\t\t\tif (S[i-1][j] != 0xffffffff) {\n\t\t\t\t\tmin = S[i-1][j]\n\t\t\t\t}\n\t\t\t\tif (S[i][j-1] != ","language":"go"}
{"task_id":"MBXP_GO\/349","completion":"\tif string.len() % 8 == 0 {\n\t\tfor _, _, _, _, _, i, _ in string.partition(\"1\") {\n\t\t\tif i != \"1\" {\n\t\t\t\treturn \"No\"\n\t\t\t}\n\t\t}\n\t\treturn \"Yes\"\n\t}\n\treturn \"No\"\n}","language":"go"}
{"task_id":"MBXP_GO\/350","completion":"    int m := 0\n    for _, v := range s {\n        m = min(m, v)\n    }\n    return m\n}","language":"go"}
{"task_id":"MBXP_GO\/351","completion":"    var count [n]int\n    for i := 0; i < n; i++ {\n        count[arr[i]] = count[arr[i]] + 1 if count[arr[i]] + 1 < k else k\n    }\n\n    for i := 0; i < n; i++ {\n        if count[arr[i]] >= k {\n            return arr[i]\n        }\n    }\n\n    return -1\n}","language":"go"}
{"task_id":"MBXP_GO\/352","completion":"    var characterSet := make(map[char]bool)\n    for i := 0; i < str.length; i++ {\n        if characterSet[str[i]] = false {\n            characterSet[str[i]] = true\n        } else {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/353","completion":"\tcount := 0\n\tfor _, v := range list1 {\n\t\tlist1[count] = append(v[:n], slice(v, n, nil))\n\t\tcount += 1\n\t}\n\treturn list1\n}","language":"go"}
{"task_id":"MBXP_GO\/354","completion":"    if (a == 0) {\n        return 0;\n    }\n    if (a == n) {\n        return 1;\n    }\n    var ret []int;\n    if (d == 0) {\n        ret = new []int;\n        ret[a] = 1;\n    } else {\n        ret = new []int;\n        ret[a] = tn_ap(a, n, d - 1);\n        if (a < n \/ 2) {\n            for (i := a + 1; i <= n - 1; i++) {\n                ret[i] = ret[a] + ret[i - 1];\n            }\n        } else {\n            for (i := n - 1; i >= a - 1; i--) {\n                ret[i] = ret[a] + ret[i + 1];\n            }\n       ","language":"go"}
{"task_id":"MBXP_GO\/355","completion":"    int counter = 0\n    int current_position = 0\n    for {\n        for {\n            current_position += 1\n            if current_position >= radius\n            {\n                counter += 1\n                current_position = 0\n            }\n        }\n    }\n    counter\n}","language":"go"}
{"task_id":"MBXP_GO\/356","completion":"    \/\/ 1. Given two angles a and b, find the third angle.\n    \/\/ 2. The first angle is the angle formed by extending the lower angle by a distance of 180 degrees.\n    \/\/ 3. The second angle is the angle formed by extending the lower angle by a distance of 360 degrees.\n    \/\/ 4. The lower angle is given by the angle formed by extending the lower angle by a distance of 180 degrees.\n    \/\/    (180 degrees + 360 degrees) \/ 2 = lower angle\n    \/\/    We can't use 180 degrees because it's the 3rd angle, so we have to go 180 degrees away from the lower angle.\n\n    \/\/ 1. Given two angles a and b, find the third angle.\n    angle := (180 + b - a) \/ 2\n    return angle\n}","language":"go"}
{"task_id":"MBXP_GO\/357","completion":"    max := 0\n    for i := 0; i < #test_list; i++ {\n        for j := 0; j < 2; j++ {\n            if test_list[i][j] > max {\n                max = test_list[i][j]\n            }\n        }\n    }\n    return max\n}","language":"go"}
{"task_id":"MBXP_GO\/358","completion":"    return nums1.map { |n| n % nums2[0] == 0 }.map { |n| n }\n}","language":"go"}
{"task_id":"MBXP_GO\/359","completion":"\tint root1 = sqrt(pow(b,2) - 4 * a * c)\n\tint root2 = sqrt(pow(b,2) - 4 * a * root1)\n\treturn root1 == root2 ? \"Yes\" : \"No\"\n}","language":"go"}
{"task_id":"MBXP_GO\/360","completion":"\tlet res int = 0\n\tlet i int = 1\n\twhile (i <= n) {\n\t\tres = res + i\n\t\ti = i + 1\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBXP_GO\/361","completion":"    for list in list1 {\n        \/\/ if list is empty, then remove it from the list\n        if len(list) == 0 {\n            list1.pop()\n        } else {\n            \/\/ Otherwise, keep iterating\n            remove_empty(list)\n        }\n    }\n    return list1\n}","language":"go"}
{"task_id":"MBXP_GO\/362","completion":"    if len(nums) == 0 {\n        return 0\n    }\n\n    \/\/ Count occurrences of each element\n    counts []int = []int{0}\n    for _, x := range nums {\n        counts[x] += 1\n    }\n\n    \/\/ Return the element with maximum occurrence\n    maxValue, maxCount := 0, 0\n    for _, x := range counts {\n        if x > maxCount {\n            maxValue = x\n            maxCount = x\n        }\n    }\n    return maxValue\n}","language":"go"}
{"task_id":"MBXP_GO\/363","completion":"    for _, i := range test_list {\n        for _, j := range test_list {\n            test_list = append(test_list, (i + j, j, i))\n        }\n    }\n    return test_list\n}","language":"go"}
{"task_id":"MBXP_GO\/364","completion":"  var count := 0\n  for i := 0; i < len(string); i++ {\n    count += (\n      (string[i] == \"0\" && ((i + 1) == len(string) || string[i+1] != \"1\")) ||\n      (string[i] == \"1\" && ((i + 1) == len(string) || string[i+1] != \"0\"))\n    ) ? 1 : 0\n  }\n  return count\n}","language":"go"}
{"task_id":"MBXP_GO\/365","completion":"    count int\n    i int\n    i = 1\n    if (n < 10) {\n        count = 1\n    }\n    else {\n        while (i < (int)n) {\n            i = i + 1\n        }\n        i = i - 1\n        count = i + 1\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/366","completion":"\tif len(list_nums) == 0 {\n\t\treturn 0;\n\t}\n\tint max = 0;\n\tint index_first = 0;\n\tint index_last = len(list_nums) - 1;\n\n\tfor i,v in ipairs(list_nums) {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t\tindex_first = i\n\t\t}\n\t\tif v > max {\n\t\t\tmax = v\n\t\t\tindex_last = i\n\t\t}\n\t}\n\n\tint prod = 0;\n\tfor i,v in ipairs(list_nums) {\n\t\tif (i == index_first || i == index_last) {\n\t\t\tcontinue;\n\t\t}\n\t\tprod = prod + v * list_nums[i + 1] * list_nums[i - 1]\n\t}\n\n\treturn prod\n}","language":"go"}
{"task_id":"MBXP_GO\/368","completion":"\tfor i := 0; i < N; i++ {\n\t\tresult_tup := make([]int, N)\n\t\tfor j := 0; j < N; j++ {\n\t\t\tresult_tup[j] = test_tup[j]\n\t\t}\n\t}\n\treturn result_tup\n}","language":"go"}
{"task_id":"MBXP_GO\/369","completion":"  return l * w * h\n}","language":"go"}
{"task_id":"MBXP_GO\/370","completion":"\tvar tuples []string\n\ttuples = sort(price[0], compare)\n\tfor _, t := range tuples {\n\t\tt\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/371","completion":"\tvar arr []int\n\tarr = sort(A)\n\n\tfor _, i := range arr {\n\t\tif i == left_element || i == right_element {\n\t\t\tcontinue\n\t\t}\n\t\tif arr[i - 1] == arr[i] {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn right_element\n}","language":"go"}
{"task_id":"MBXP_GO\/373","completion":"    return l * w * h\n}","language":"go"}
{"task_id":"MBXP_GO\/374","completion":"    if (str.len == 1) {\n        \/\/ base case\n        return []byte(str)\n    }\n\n    result := make([]string, 0, str.len)\n    for i := 0; i < str.len; ++i {\n        for perm in permute_string(str.substr(1:i)) {\n            result[i] = .. perm\n            for j := i + 1; j < str.len; ++j {\n                result = append(result, str.substr(0, i) .. perm .. str.substr(j))\n            }\n        }\n    }\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/375","completion":"    if n < m * 0.5 {\n        return n\n    }\n    return round(n\/m) * m\n}","language":"go"}
{"task_id":"MBXP_GO\/376","completion":"    var new_tup []int{}\n\n    for i := 0; i < test_tup.size(); i++ {\n        new_tup[i] = test_tup[i]\n\n        for j := 0; j < i; j++ {\n            if test_tup[i] == test_tup[j] {\n                new_tup[i] = 'MSP'\n            }\n        }\n    }\n\n    return new_tup\n}","language":"go"}
{"task_id":"MBXP_GO\/377","completion":"\t\/\/ let idx = s.IndexOf(c)\n\t\/\/ if (idx != -1) {\n\t\/\/ \ts[idx] = ''\n\t\/\/ }\n\t\/\/ return s.Replace(c, '')\n\tfor (i, e) := range s.IndexOf(c) {\n\t\ts[i] = ''\n\t}\n\treturn s.Replace(c, '')\n}","language":"go"}
{"task_id":"MBXP_GO\/378","completion":"    for _, _, end := range test_list {\n        if _, _, end > 0 {\n            _, test_list[0], test_list[end-1] = test_list[end-1], test_list[0], _\n        }\n        if _, _, end == 0 {\n            return test_list\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/379","completion":"    int volume = l * w * h\n    int surface = volume * 6\n    return surface\n}","language":"go"}
{"task_id":"MBXP_GO\/380","completion":"    \/\/ make sure rownum and colnum are valid\n    if (rownum <= 0) {\n        panic(\"Row number must be positive, was given '%d'\", rownum)\n    }\n    if (colnum <= 0) {\n        panic(\"Column number must be positive, was given '%d'\", colnum)\n    }\n\n    \/\/ Create the output array\n    var arr [][]int = []\n    \/\/ Fill the first row with 0s\n    for (var i = 0; i < colnum; i++) {\n        arr[i] = []\n        for (var j = 0; j < rownum; j++) {\n            arr[i][j] = 0\n        }\n    }\n\n    \/\/ Fill the remaining rows with 1s\n    for (var i = 1; i < rownum; i++) {\n        for (var j = 0; j < colnum; j++) {\n            arr[j][i]","language":"go"}
{"task_id":"MBXP_GO\/381","completion":"\ts := make([]interface{}, 0)\n\n\tfor k, v := range list_data {\n\t\tfor i, v2 := range v {\n\t\t\ts[i].append(v2)\n\t\t}\n\t}\n\n\tsort(s[index_no], compare)\n\tfor k, v := range s {\n\t\tif v == nil {\n\t\t\ts[k] = nil\n\t\t} else {\n\t\t\tfor i, v2 := range v {\n\t\t\t\ts[k][i] = v2\n\t\t\t}\n\t\t}\n\t}\n\n\treturn s\n}","language":"go"}
{"task_id":"MBXP_GO\/382","completion":"\tint i, j, k;\n\tint m []int = []int {0};\n\tfor (i := 0; i < A.Length; i++) {\n\t\tm = A + A[i];\n\t\tj := 0;\n\t\tk := m.Length - 1;\n\t\twhile (j <= k) {\n\t\t\tj = (j + k) \/ 2;\n\t\t\tif (m[j] > m[j + 1]) break;\n\t\t\tk = (j + k) \/ 2;\n\t\t}\n\t\tif (j == m.Length) return i + 1;\n\t}\n\treturn 0;\n}","language":"go"}
{"task_id":"MBXP_GO\/383","completion":"    n := n ^ (n & 1)\n    return(n)\n}","language":"go"}
{"task_id":"MBXP_GO\/384","completion":"    var res []int = []int{};\n    var map []int = []map[int]int{};\n    var i int;\n    var min int;\n    for i := 0; i < n; i++ {\n        min := arr[i];\n        for j := 0; j < n; j++ {\n            if (arr[j] < min) min = arr[j];\n        }\n        if (res[min] == 0) res[min] = 1;\n        else res[min]++;\n    }\n    for key := 0; key < n; key++ {\n        map[key] = res[key];\n    }\n    return map[key];\n}","language":"go"}
{"task_id":"MBXP_GO\/385","completion":"    if n == 0 {\n        return 0\n    }\n    else if n % 3 == 0 {\n        return n - 1 + get_perrin(n - 1)\n    }\n    else if n % 2 == 0 {\n        return n - 2 + get_perrin(n - 2)\n    }\n    else {\n        return n - 3 + get_perrin(n - 3)\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/386","completion":"  i int := 0\n  s.replace(\"\", \"a\").find(\"\", 0) {\n    if(s[i+1] == s[i] + \"\") {\n      i := i+1\n    } else {\n      i := 0\n    }\n    if(i == 0) {\n      return 0\n    } else {\n      return 1 + swap_count(s.slice(0, i))\n    }\n  }\n}","language":"go"}
{"task_id":"MBXP_GO\/387","completion":"    var odd = 1\n    var even = 0\n    for i, v in ipairs(N) {\n        if (v & 1) {\n            odd = odd + 1\n        } else {\n            even = even + 1\n        }\n    }\n    if (odd > even) {\n        return \"Odd\"\n    }\n    return \"Even\"\n}","language":"go"}
{"task_id":"MBXP_GO\/388","completion":"\tvar powerOf2 []int = []int{2}\n\n\tfor (i=0; i<2; i++) {\n\t\tpowerOf2[i] = 0\n\n\t\twhile (n > 1) {\n\t\t\tpowerOf2[i]++\n\t\t\tn = n\/2\n\t\t}\n\t}\n\n\tvar max = powerOf2[0] | 0\n\tfor (i=0; i<2; i++) {\n\t\tif (powerOf2[i] > max)\n\t\t\tmax = powerOf2[i]\n\t}\n\treturn max\n}","language":"go"}
{"task_id":"MBXP_GO\/389","completion":"\tlucas := make([]int, n + 1)\n\tfor i := 0; i < n; i++ {\n\t\tlucas[i] = 1\n\t\tfor j := i - 1; j >= 1; j-- {\n\t\t\tif lucas[i] < lucas[j] + 1 {\n\t\t\t\tlucas[i] = lucas[j] + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn lucas[n]\n}","language":"go"}
{"task_id":"MBXP_GO\/390","completion":"  var res []string\n  var i int\n  for i := 0; i < len(list); i++ {\n    res = append(res, string{str(list[i])})\n  }\n  res = append(res, string0)\n  return res\n}","language":"go"}
{"task_id":"MBXP_GO\/391","completion":"\tr1 := map[string]map[string]int{{}};\n\tfor i, item1 in ipairs(l1) {\n\t\tr2 := map[string]map[string]int{{}};\n\t\tfor j, item2 in ipairs(l2) {\n\t\t\tr3 := map[string]int{{}};\n\t\t\tfor k, item3 in ipairs(l3) {\n\t\t\t\tr2[item2] = r2[item2] + (r1[item1] * item3);\n\t\t\t}\n\t\t\tr1[item1] = r2;\n\t\t}\n\t}\n\treturn r1;\n}","language":"go"}
{"task_id":"MBXP_GO\/392","completion":"\ti int = 0\n\tk int = 0\n\tfor (i=0; i<n; i=i+1) {\n\t\tj = i \/ 2 + i \/ 3 + i \/ 4 + i \/ 5 + i \/ 6 + i \/ 7 + i \/ 8 + i \/ 9 + i \/ 10\n\t\tk = k + j\n\t}\n\tk = k + k\n\treturn k\n}","language":"go"}
{"task_id":"MBXP_GO\/393","completion":"    var max_length  int\n    var max_list []int\n    for _, value := range input_list {\n        if max_length < length(value) {\n            max_length = length(value)\n            max_list = value\n        }\n    }\n    Ok(max_length, max_list)\n}","language":"go"}
{"task_id":"MBXP_GO\/394","completion":"    \/\/ If tuple has length less than 2, then it is not distinct\n    if test_tup.Length < 2 {\n        return true\n    }\n    \/\/ Sort the tuple by first element\n    test_tup.Sort()\n    prev_elm int\n    \/\/ Loop over the tuple and compare it with the previous element\n    for _, e := range test_tup {\n        if e != prev_elm {\n            return false\n        }\n        prev_elm = e\n    }\n    \/\/ If no mismatch is found, then tuple is distinct\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/395","completion":"    \/\/ Return the first non-repeating character or nil if string is empty.\n    \/\/ If there is a tie for first non-repeating character, return the character that appeared first.\n    \/\/ If there is no non-repeating character, return nil.\n    \/\/ You are not allowed to change the given string.\n}","language":"go"}
{"task_id":"MBXP_GO\/396","completion":"    if (string.StartWith(string0) == string.EndWith(string0)) {\n        return \"Valid\"\n    } else {\n        return \"Invalid\"\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/397","completion":"\tif a > b && a > c {\n\t\treturn a\n\t}\n\tif b > a && b > c {\n\t\treturn b\n\t}\n\tif c > a && c > b {\n\t\treturn c\n\t}\n\treturn 0\n}","language":"go"}
{"task_id":"MBXP_GO\/398","completion":"    nums.int64 = map([]int64{(n,i) => i*10 + n}) nums\n    for _, i := range nums.length {\n        for j := 0; j < i; j++ {\n            nums[i][1] = nums[i][1] + 1\n        }\n    }\n    nums.int64 = map([]int64{(n,i) => nums[i][0]}) nums\n    for _, i := range nums.length {\n        for j := 0; j < nums[i][1]; j++ {\n            nums[i][0] = nums[i][0] + n\n        }\n    }\n    return nums.int64\n}","language":"go"}
{"task_id":"MBXP_GO\/399","completion":"    var xor_tup []int = []int{\n    }\n    for _, v1, v2 := range test_tup1 {\n        xor_tup = append(xor_tup, v1 ^ v2)\n    }\n    return xor_tup\n}","language":"go"}
{"task_id":"MBXP_GO\/400","completion":"\treturn 0\n}","language":"go"}
{"task_id":"MBXP_GO\/401","completion":"\tfunc map1 func1 [&](f int) int {\n\t\tlet x := 0\n\t\tfor _, v := range test_tup1 {\n\t\t\tx := x + f v\n\t\t}\n\t\treturn x\n\t}\n\tfunc map2 func2 [&](f int) int {\n\t\tlet x := 0\n\t\tfor _, v := range test_tup2 {\n\t\t\tx := x + f v\n\t\t}\n\t\treturn x\n\t}\n\tfunc add_nested_tuples2 func3 [][]int {\n\t\tfor _, t1 := range test_tup1 {\n\t\t\tfor _, t2 := range test_tup2 {\n\t\t\t\tyield &map1 t1 &map2 t2\n\t\t\t}\n\t\t}\n\t}\n\treturn add_nested_tuples2(test_tup1, test_tup2)\n}","language":"go"}
{"task_id":"MBXP_GO\/402","completion":"  m := 1\n  for {\n    x,y := (r-1) div p\n    m := m*x + (n - m*x)*y\n    r = y + 1\n  }\n  return m\n}","language":"go"}
{"task_id":"MBXP_GO\/403","completion":"    if len(string) >= 7 and string[:8] == \"https:\/\/www.\" {\n        match := regex.Match(string, \"^https:\/\/www\\\\.([^\/?#]+)\")\n        if match != nil {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/404","completion":"    if (a > b) {\n        return b;\n    } else {\n        return a;\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/405","completion":"    for _, item := range tuplex {\n        if tuple1 contains item {\n            return True\n        }\n    }\n    return False\n}","language":"go"}
{"task_id":"MBXP_GO\/406","completion":"    if (x % 2 == 0) {\n        return \"Even Parity\"\n    }\n    if (x % 2 == 1) {\n        return \"Odd Parity\"\n    }\n    return \"Invalid\"\n}","language":"go"}
{"task_id":"MBXP_GO\/407","completion":"\tint (n, base *base, r int, s int) = 0, len = 0;\n\tfor (i := 0, base := 0; i < len; i++, base *= 10) {\n\t\tn -= (r * base + s) \/ 10, r = (r * base + s) % 10, s = 0;\n\t\tlen = (n \/ base).toString(10).length;\n\t}\n\tlen = (n % base).toString(10).length;\n\tif len > 0 {\n\t\tr = (r * 10 + s) % base;\n\t}\n\treturn r;\n}","language":"go"}
{"task_id":"MBXP_GO\/409","completion":"\ttuple2 min1 { -1 }\n\ttuple2 min2 { -1 }\n\ttuple3 min3 { -1 }\n\n\tfor i := 0; i < list1.Length; i++ {\n\t\tfor j := 0; j < list1[i].Length; j++ {\n\t\t\ttuple2 temp1 = tuple2(list1[i][j][0], list1[i][j][1])\n\t\t\ttuple2 temp2 = tuple2(list1[i][j][0], list1[i][j][1])\n\t\t\ttuple2 temp3 = tuple2(list1[i][j][0], list1[i][j][1])\n\n\t\t\ttemp1.Swap(list1[i][j][0], list1[i][j][1])\n\t\t\ttemp2.Swap(list1[i][j][0], list1[i][j][1])\n\t\t\ttemp3.Swap(list1[i][j][0], list1[i][j][1])\n\n\t\t\tif temp1.x <","language":"go"}
{"task_id":"MBXP_GO\/410","completion":"    var min = listval[0]interface{}\n    for _, v interface{} := range listval {\n        if v < min {\n            min = v\n        }\n    }\n    return min\n}","language":"go"}
{"task_id":"MBXP_GO\/411","completion":"    match := regexp(\/_[a-z]+$\/)\n    word = word.replace(match, \"\")\n    match = regexp(\/(_[a-z]+)(?=[A-Z])\/)\n    word = word.replace(match, function (full, letter) {\n        return letter.toUpperCase()\n    })\n    return word\n}","language":"go"}
{"task_id":"MBXP_GO\/412","completion":"    \/\/ Go\/Golang\n    \/\/ return []int {\n    if (len(l) == 0) {\n        return []l\n    }\n    if (len(l) % 2 != 0) {\n        l.pop()\n    }\n    return l\n}\n<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"go"}
{"task_id":"MBXP_GO\/413","completion":"\tlet result []interface{}\n\tfor _, _, val := range list1 {\n\t\tresult.add(val[n])\n\t}\n\treturn result\n}","language":"go"}
{"task_id":"MBXP_GO\/414","completion":"    for _, e1 := range list1 {\n        for _, e2 := range list2 {\n            if e1 == e2 {\n                return true\n            }\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/415","completion":"\tmax_val int\n\tmax_index int\n\tfor _, i := range arr {\n\t\tfor j := 0; j < arr.length - i - 1; j++ {\n\t\t\tif arr[j] * arr[j + i] > max_val {\n\t\t\t\tmax_val := arr[j] * arr[j + i]\n\t\t\t\tmax_index := [j, j + i]\n\t\t\t}\n\t\t}\n\t}\n\treturn (max_val, max_index)\n}","language":"go"}
{"task_id":"MBXP_GO\/416","completion":"    if n == 0 {\n        return 0\n    }\n    if n < 0 {\n        return -breakSum(-n)\n    }\n\n    return (n % 3 == 0) ? (breakSum(n \/ 3) + n \/ 3) : (n % 3 == 1) ? (breakSum(n \/ 3) + n \/ 3 + n) : (breakSum(n \/ 3) + n \/ 3 - n)\n}","language":"go"}
{"task_id":"MBXP_GO\/417","completion":"\tvar t := make([][]string, 0)\n\tfor _, v := range Input {\n\t\tt = append(t, v)\n\t}\n\n\tvar common := make([]string, 0)\n\tfor _, v := range t {\n\t\tcommon = append(common, v[0])\n\t}\n\tvar result := []string{[]}\n\tfor _, v := range t {\n\t\tresult = append(result, make([]string, 0))\n\t\tfor _, w := range common {\n\t\t\tif v[0] == w {\n\t\t\t\tresult = append(result, v)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}","language":"go"}
{"task_id":"MBXP_GO\/418","completion":"\tv := make([]interface{})\n\tfor _, item := range lst {\n\t\tv = max_by(v, item)\n\t}\n\treturn v\n}","language":"go"}
{"task_id":"MBXP_GO\/419","completion":"    var int sum []int\n    int i int\n    sum = 0 int\n    i := 0 int\n    for i < len(list1) {\n        round(list1[i])\n        sum += list1[i]\n        i += 1\n    }\n    return (sum * int(len(list1))) int\n}","language":"go"}
{"task_id":"MBXP_GO\/420","completion":"    var sum int\n    for (i := 1; i <= n; i++) {\n        sum = sum + i * i * i\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/421","completion":"    var concat []byte\n    for i := 0; i < test_tup.len; i++ {\n        concat = test_tup[i] append(concat)\n    }\n    return string(concat)\n}","language":"go"}
{"task_id":"MBXP_GO\/422","completion":"    var result float64\n    result = 0.0\n    for _ in (0..n-1) {\n        result += Math.pow(1.0, n) \/ n\n    }\n    result\n}","language":"go"}
{"task_id":"MBXP_GO\/423","completion":"    gold_matrix := make_gold_matrix(m, n, gold)\n    best_max := 0\n    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n            best_max = max(best_max, best_value(gold_matrix, i, j))\n        }\n    }\n    return best_max\n}","language":"go"}
{"task_id":"MBXP_GO\/424","completion":"    var new_list []string\n    for i, word in 0..test_tuple.len {\n        new_list = append(new_list, word[string.len - i])\n    }\n    return new_list\n}","language":"go"}
{"task_id":"MBXP_GO\/425","completion":"\tret i int\n\tfor i := 0; i < len(list1); i++ {\n\t\tif len(list1[i]) > 0 && list1[i].contains(x) {\n\t\t\tret++\n\t\t}\n\t}\n\treturn ret\n}","language":"go"}
{"task_id":"MBXP_GO\/426","completion":"    nums = filter {n == 0 || n % 2 != 0} nums\n    return nums\n}","language":"go"}
{"task_id":"MBXP_GO\/427","completion":"    fmt := \"%-d-%-m-%Y\"\n    dt, _ := str.Split(dt, \"-\")\n    fmt.Replace(fmt[6], dt[3])\n    fmt.Replace(fmt[5], dt[2])\n    fmt.Replace(fmt[4], dt[1])\n    fmt.Replace(fmt[2], dt[0])\n    fmt.Replace(fmt[3], dt[5])\n    fmt.Replace(fmt[1], dt[4])\n    fmt.Replace(fmt[0], dt[6])\n    return fmt\n}","language":"go"}
{"task_id":"MBXP_GO\/428","completion":"\tfor i := 1; i < length(my_list); i++ {\n\t\tfor j := i; j > 0; j-- {\n\t\t\tif my_list[j - 1] > my_list[j] {\n\t\t\t\tswap(my_list[j - 1], my_list[j])\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list\n}","language":"go"}
{"task_id":"MBXP_GO\/429","completion":"\tvar result []int\n\tfor _, test_tup2_elem := range test_tup2 {\n\t\tif _, _ >= test_tup1.len {\n\t\t\tresult = make([]int, 0)\n\t\t\treturn result\n\t\t}\n\t\tif test_tup2_elem == test_tup1[_] {\n\t\t\tresult.append(0)\n\t\t\tcontinue\n\t\t}\n\t\tvar result_elem = 1\n\t\tfor _, test_tup1_elem := range test_tup1 {\n\t\t\tif test_tup2_elem == test_tup1_elem {\n\t\t\t\tresult_elem = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tresult.append(result_elem)\n\t}\n\treturn result\n}","language":"go"}
{"task_id":"MBXP_GO\/430","completion":"\treturn -a \/ b + c \/ b\n}","language":"go"}
{"task_id":"MBXP_GO\/431","completion":"    for i,j := range list1,list2 {\n        if len(filter(nil,set(list1[i],list2[i]))) > 0 {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/432","completion":"    var heightdiff: int64 = height - base1;\n    var widthdiff: int64 = base2 - base1;\n    var numtrap: int64 = heightdiff \/ 3;\n    var left: int64 = 0;\n    var right: int64 = 0;\n    var min: float64 = 0;\n    var max: float64 = 0;\n    if (heightdiff % 3 == 0) {\n        if (base1 + numtrap < base2) {\n            right = base2 - base1;\n            left = right - numtrap;\n            min = base1 + numtrap \/ 2;\n            max = base2 - numtrap \/ 2;\n        } else {\n            left = base2 - base1;\n            right = left + numtrap;\n            min = base2 - numtrap \/ 2;\n            max = base1 + numtrap \/ ","language":"go"}
{"task_id":"MBXP_GO\/433","completion":"    arr.sort()\n    for _, _, v := range arr {\n        if number > v {\n            return \"Yes, the entered number is greater than those in the array\"\n        }\n    }\n    return \"No, entered number is less than those in the array\"\n}","language":"go"}
{"task_id":"MBXP_GO\/434","completion":"    match (text, s := \"\") {\n        if s == \"\" {\n            \/\/ The empty string is always a match.\n            return \"Found a match!\"\n        }\n        if s[0] == \"a\" {\n            \/\/ If the first character is a, then we need to move to the next\n            \/\/ character.\n            s = s[1]\n        } else {\n            \/\/ If the first character isn't a, then it's a mismatch.\n            return \"Not matched!\"\n        }\n        \/\/ Move to the next character, if there is one.\n        if s == \"b\" {\n            s = \"\"\n        }\n        \/\/ If there is a next character, continue matching.\n        return text_match_one(text, s)\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/435","completion":"    if (n < 0) n = n + 2^32\n    n = n % 10\n    return n\n}","language":"go"}
{"task_id":"MBXP_GO\/436","completion":"    int i = 0;\n    for {\n        if (list1[i] < 0) {\n            print(list1[i])\n        }\n        i += 1\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/437","completion":"    \/\/ Go code here\n}","language":"go"}
{"task_id":"MBXP_GO\/438","completion":"\tcount := 0\n\tfor i := 0; i < len(test_list); i++ {\n\t\tfor j := 0; j < len(test_list); j++ {\n\t\t\tif (i != j && test_list[i] != test_list[j]) {\n\t\t\t\tcount = count + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn count.ToString()\n}","language":"go"}
{"task_id":"MBXP_GO\/439","completion":"\tv := 0\n\tfor i := range L {\n\t\tv := v * 10 + i\n\t}\n\tv\n}","language":"go"}
{"task_id":"MBXP_GO\/440","completion":"    var match := range(text)\n        .map{$0.split(\"!!\")}.map{tuple{int,int,string}}\n        .map{$0, $1, $2}\n        .filter{$2 == \"adverb\"}\n    .map{$0.split(\" \")}\n    .map{$0, $1}\n    .filter{$1 != nil}\n    .map{$0.join(\" \")}\n    .map{tuple{int,int,string}}\n    .filter{tuple{$0.length} == 4}\n    match\n}","language":"go"}
{"task_id":"MBXP_GO\/441","completion":"  return (l * l * l)\n}","language":"go"}
{"task_id":"MBXP_GO\/442","completion":"\tvar count []int = []\n\tfor i, num := range nums {\n\t\tcount[num] = 0\n\t}\n\tfor i, num := range nums {\n\t\tif num >= 0 {\n\t\t\tcount[num] = count[num] + 1\n\t\t}\n\t}\n\tvar sum = 0.0\n\tfor i, num := range count {\n\t\tsum = sum + num \/ count.Length\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBXP_GO\/443","completion":"  if (list1.len() == 0) {\n    return 0\n  } else {\n    list1.sort { |a, b| a < b }\n    return list1[0]\n  }\n}","language":"go"}
{"task_id":"MBXP_GO\/444","completion":"\tfor i, tuple := range test_list {\n\t\tif i % K == 0 {\n\t\t\tcontinue\n\t\t}\n\t\ttest_list[i] = test_list[i][: len(test_list[i]) - (K - i % K)]\n\t}\n\treturn test_list\n}","language":"go"}
{"task_id":"MBXP_GO\/445","completion":"    \/\/ Code here\n    var prod [][]int = [][]int{};\n    for _, _, tup1 := range test_tup1 {\n        for _, _, tup2 := range test_tup2 {\n            if _, _, *p := tup2 {\n                if _, _, *q := tup1 {\n                    for i, j, *t := range p {\n                        if i != j {\n                            prod[i][j] := *p + *q * t\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return prod\n}","language":"go"}
{"task_id":"MBXP_GO\/446","completion":"    let map map[string]int = {}\n    let count int\n    for _, elem := range tup {\n        count = 0\n        for _, element := range lst {\n            if element == elem {\n                count++\n            }\n        }\n        map[elem] = count\n    }\n    map\n}","language":"go"}
{"task_id":"MBXP_GO\/447","completion":"    \/\/ Go\/Golang code here\n}","language":"go"}
{"task_id":"MBXP_GO\/448","completion":"    var arr []int\n    arr = []int{0}\n    i := 0\n    while (i < n) {\n        arr = append(arr, i)\n        i += 1\n    }\n    return (sum(arr) \/ len(arr))\n}","language":"go"}
{"task_id":"MBXP_GO\/449","completion":"    if (x1 != x2 && x1 != x3 && x2 != x3 && y1 != y2 && y1 != y3 && y2 != y3)\n        return \"No\"\n    if (abs(x1 - x2) > 1 || abs(x2 - x3) > 1 || abs(x3 - x1) > 1 || abs(y1 - y2) > 1 || abs(y2 - y3) > 1 || abs(y3 - y1) > 1)\n        return \"No\"\n    return \"Yes\"\n}","language":"go"}
{"task_id":"MBXP_GO\/450","completion":"    var arr []string\n    for _, value in ipairs(str) {\n        if len(value) < l {\n            arr.append(value)\n        }\n    }\n    return arr\n}","language":"go"}
{"task_id":"MBXP_GO\/451","completion":"    match := regexp.replace(text1, \"\\s+\", \"\")\n    return match\n}","language":"go"}
{"task_id":"MBXP_GO\/452","completion":"    if (actual_cost < sale_amount) {\n        return nil\n    } else {\n        return actual_cost - sale_amount\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/453","completion":"\tvar sum int\n\tfor int i := 2; i < n; i++ {\n\t\tif (n % i == 0) {\n\t\t\tsum += i\n\t\t\tif (i * i == n) {\n\t\t\t\treturn sum\n\t\t\t}\n\t\t\tsum += sumofFactors(n \/ i)\n\t\t}\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBXP_GO\/454","completion":"  var found = false\n  for w in text {\n    if (w == \"z\") {\n      found = true\n      break\n    }\n  }\n\n  if (found) {\n    \/\/ return \"Found a match!\"\n    return &\"Found a match!\"\n  } else {\n    \/\/ return \"Not matched!\"\n    return &\"Not matched!\"\n  }\n}","language":"go"}
{"task_id":"MBXP_GO\/455","completion":"    monthnum2mod31 int = monthnum2 mod 31\n    if monthnum2mod31 == 0 {\n        true\n    } else {\n        false\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/456","completion":"    map {\n        (x * 3).substr(0, 3)\n    }\n\n    reverse_string (string) string\n    map {\n        (x, y) {\n            (x, y) + \" \"\n        }\n\n        string.join\n    }\n\n    filter {\n        (x, y) {\n            y.length > 0\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/457","completion":"    var min []interface{}\n    var min_index int\n    for _, v := range lst {\n        if _, v < min {\n            min = v\n            min_index = _\n        }\n    }\n    return min_index\n}","language":"go"}
{"task_id":"MBXP_GO\/458","completion":"    return l * b\n}","language":"go"}
{"task_id":"MBXP_GO\/459","completion":"    \/\/ The regex below matches all uppercase substrings.\n    \/\/ If you can't figure it out, you may be asked to explain it here.\n    \/\/ https:\/\/regexr.com\/\n    regex = \/[A-Z]\/g\n    str1 = str1.Replace(regex, \"\")\n    return(str1)\n}","language":"go"}
{"task_id":"MBXP_GO\/460","completion":"    var result []int\n    for _, x := range lst {\n        result = append(result, x[0])\n    }\n    result\n}","language":"go"}
{"task_id":"MBXP_GO\/461","completion":"    ctr := 0\n    for _, ch := range string {\n        if ch == ch.toUpper {\n            ctr += 1\n        }\n    }\n    return ctr\n}","language":"go"}
{"task_id":"MBXP_GO\/462","completion":"\tvar combinations [][]string = [][]string\n\tfor _, elem in pairs(list1) {\n\t\tcombinations += combinations_list(list1 []string .. [elem])\n\t}\n\tcombinations += [list1]\n\treturn combinations\n}","language":"go"}
{"task_id":"MBXP_GO\/463","completion":"    int len = arr.len(),\n        sum = 0, max_sum = 0, max_product = 0\n\n    for (int i = 0; i < len; i++) {\n        sum += arr[i]\n        max_sum = max(max_sum, sum)\n        if (max_product < 0) {\n            max_product = 0\n        }\n        if (sum < 0) {\n            sum = 0\n        }\n        max_product = max(max_product, max_sum * arr[i])\n    }\n\n    return max_product\n}","language":"go"}
{"task_id":"MBXP_GO\/464","completion":"\tvar i int\n\tfor i, v int in map {\n\t\tif v != n {\n\t\t\treturn False\n\t\t}\n\t}\n\treturn True\n}","language":"go"}
{"task_id":"MBXP_GO\/465","completion":"    _, map1.Keys := range map1.Keys {\n        if map1[_.Key] == nil {\n            delete map1[_]\n        }\n    }\n    return map1\n}","language":"go"}
{"task_id":"MBXP_GO\/466","completion":"    if low > high {\n        return -1\n    }\n    int mid = low + (high - low) \/ 2\n    if arr[mid] > arr[mid + 1] {\n        return find_peak(arr, mid + 1, high, n)\n    } else if (arr[mid] > arr[mid - 1]) {\n        return find_peak(arr, low, mid - 1, n)\n    } else {\n        n += 1\n        return find_peak(arr, low, high, n)\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/467","completion":"  if (deciNum < 0) {\n    return -1;\n  }\n  var octalNum int = 0\n  while (deciNum != 0) {\n    octalNum = octalNum * 8 + deciNum % 10\n    deciNum = deciNum \/ 10\n  }\n  return octalNum\n}","language":"go"}
{"task_id":"MBXP_GO\/468","completion":"    if (arr.Length < 2) {\n        return arr[0]\n    }\n\n    max := arr[0]\n    for _, i := range arr {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\n        if i + 1 == n {\n            return max\n        }\n    }\n\n    cur := max\n    for i, _ := range arr {\n        if arr[i] > cur {\n            cur = arr[i]\n        }\n\n        if cur * arr[i] > max {\n            max = cur * arr[i]\n        }\n\n        if i + 1 == n {\n            return max\n        }\n    }\n\n    return max\n}","language":"go"}
{"task_id":"MBXP_GO\/469","completion":"    profit := 0\n    for i := 0; i < k; i++ {\n        for j := i + 1; j < k; j++ {\n            profit = max(profit, price[j] - price[i])\n        }\n    }\n    return profit\n}","language":"go"}
{"task_id":"MBXP_GO\/470","completion":"\tn := test_tup.size()\n\tif n == 0 {\n\t\treturn test_tup\n\t}\n\n\tres := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < i; j++ {\n\t\t\tres[i] = res[i] + res[j]\n\t\t}\n\t\tres[i] = test_tup[i]\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBXP_GO\/471","completion":"    var total []int = 0\n    var i int = 0\n    var remainder int\n    for(i = 0; i < lens; i++) {\n      total = total + arr[i]\n    }\n    if(n == 0) {\n      return 0\n    } else if (total < n) {\n      remainder = n - total\n      return remainder\n    } else if (total == n) {\n      return 0\n    } else if (total > n) {\n      remainder = total % n\n      return remainder\n    }\n  }","language":"go"}
{"task_id":"MBXP_GO\/472","completion":"    \/\/ Go through the list\n    \/\/ if there is a number which is the next number of the previous one, return true\n    \/\/ else return false\n}","language":"go"}
{"task_id":"MBXP_GO\/474","completion":"    var i int\n    var len int\n    var newstring string\n\n    len := strlen(str1)\n    newstring := \"\"\n    for (i := 0; i < len; i++) {\n        if (str1[i] == ch) {\n            newstring += newch\n        } else {\n            newstring += str1[i]\n        }\n    }\n    return newstring\n}","language":"go"}
{"task_id":"MBXP_GO\/475","completion":"\tr, err := map.Range(map)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn [r.Reverse(), nil], nil\n}","language":"go"}
{"task_id":"MBXP_GO\/476","completion":"    nums.min()\n    nums.max()\n}","language":"go"}
{"task_id":"MBXP_GO\/477","completion":"    var lower = \"\"\n    var i = 0\n    for (i := 0; i < string.length; i++) {\n        if (is_alphabetic_char(string[i])) {\n            lower += string[i].tolower()\n        }\n    }\n    return lower\n}","language":"go"}
{"task_id":"MBXP_GO\/478","completion":"  \/\/ Remove all occurrences of one letter from string\n  \/\/ Replace with empty string to remove string\n  \/\/ Return new string\n}","language":"go"}
{"task_id":"MBXP_GO\/479","completion":"    for i,d in ipairs(n) {\n        if n[i] < '0' || n[i] > '9' {\n            return -1\n        }\n    }\n    return ord(n[0])\n}","language":"go"}
{"task_id":"MBXP_GO\/480","completion":"    \/\/ Create a hashmap of character to count\n    map[char]int32 int\n    \/\/ Count the occurences of each character in the string\n    for char i := range str1 {\n        map[i]++\n    }\n    \/\/ Find the character with the highest count\n    for _, v := range map {\n        \/\/ If there is more than one character with the same count\n        if v > 1 {\n            \/\/ Return the one with the highest count\n            return v * char\n        }\n    }\n    \/\/ If there are no characters with the same count\n    return nil\n}","language":"go"}
{"task_id":"MBXP_GO\/481","completion":"    set := set {0}\n    for i, v := range set {0, 1} {\n        for j, *rest := range set {i + 1, set {v}} {\n            sum := sum + rest[j]\n            if sum = n {\n                return true\n            } else if sum > n {\n                break\n            } else {\n                set := set {v + rest[j]}\n            }\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/482","completion":"    match {\n        case _ => \"No\",\n        text[0..2] == \"Geeks\" => \"Yes\",\n        text[0..2] == \"geeks\" => \"Yes\",\n        text[0..2] == \"gEeeks\" => \"Yes\",\n        text[0..2] == \"geeksf\" => \"Yes\",\n        text[0..2] == \"geeksfor\" => \"Yes\",\n        text[0..2] == \"geeksforG\" => \"Yes\",\n        text[0..2] == \"geeksForG\" => \"Yes\",\n        text[0..2] == \"geeksfOR\" => \"Yes\",\n        text[0..2] == \"geeksforGeeks\" => \"Yes\",\n        text[0..2] == \"geeksforGeeks\" => \"Yes\",\n        text[","language":"go"}
{"task_id":"MBXP_GO\/483","completion":"    var i int\n    var n int\n    for i := 1; i < (n := x); i++ {\n        if (n! % i == 0) {\n            return i\n        }\n    }\n    return -1\n}","language":"go"}
{"task_id":"MBXP_GO\/484","completion":"    for i := 0; i < len(test_list1); i++ {\n        for j := 0; j < len(test_list2); j++ {\n            if test_list1[i][0] == test_list2[j][0] {\n                test_list1[i][1] = \"\"\n            }\n        }\n    }\n\n    return test_list1\n}","language":"go"}
{"task_id":"MBXP_GO\/485","completion":"    int i int = 0\n    int j int = 0\n    bool palindrome bool\n    for i := 0; i < n; i++ {\n        for j := i; j < n; j++ {\n            if i >= j {\n                break\n            }\n            palindrome := is_palindrome(A[i], A[j])\n            if palindrome {\n                return max(A[i], A[j])\n            }\n        }\n    }\n    return -1\n}","language":"go"}
{"task_id":"MBXP_GO\/486","completion":"    if (k < 0 || n < k) {\n        return 0.0\n    }\n    var sum = 0.0\n    for (i, x in enumerate(range(n, n - k, -1))) {\n        sum += pow(x, k) * pow(1.0 - x, n - x) * p\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/487","completion":"\tr := make([][]int, tup)\n\tsort(r.tup, compare(r.tup[0].[]int, r.tup[1].[]int))\n\treturn r.tup\n}","language":"go"}
{"task_id":"MBXP_GO\/488","completion":"\treturn a * (3 * a - 1) \/ 2\n}","language":"go"}
{"task_id":"MBXP_GO\/489","completion":"    counter := make(map[int]int)\n    for i int := 0; i < n; i++ {\n        counter[arr[i]] += 1\n    }\n    val max = 0\n    key key\n    for key, val int := counter; val > max {\n        max = val\n    }\n    return max\n}","language":"go"}
{"task_id":"MBXP_GO\/491","completion":"\tif (n == 0) return a\n\telse {\n\t\tvar s int64\n\t\ts := math.pow(r, n)\n\t\treturn math.sum(\n\t\t\tmath.map(math.multiply, math.range(1, n), s)\n\t\t) + sum_gp(a, n-1, r)\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/492","completion":"\tfunc iter (low i32, high i32) (i32, i32) {\n\t\tif low == high {\n\t\t\treturn low, low\n\t\t}\n\t\tmid i32 = low + (high - low) \/ 2\n\t\tif item_list[i32] == item {\n\t\t\treturn i32, i32\n\t\t} else if item_list[i32] > item {\n\t\t\treturn iter(low, i32 - 1)\n\t\t} else {\n\t\t\treturn iter(i32 + 1, high)\n\t\t}\n\t}\n\treturn iter(0, len(item_list) - 1)\n}","language":"go"}
{"task_id":"MBXP_GO\/493","completion":"  var polygons [][][]float64 = [][][]float64\n  var angles [][]float64 = [][]float64\n\n  angles = [0.0, 1.5707963267948966, 1.5707963267948966, 3.141592653589793, 3.141592653589793, 0.0]\n  var angles_i = 0\n\n  var angle 0.0\n  for i = startx to endx {\n    for j = starty to endy {\n      angle = angles[angles_i]\n      angles_i += 1\n      var p []float64 = []float64\n\n      p = get_circle(i, j, radius, angle)\n      if (p != nil)\n        polygons = append(polygons, p)\n    }\n  }\n\n  return polygons\n}","language":"go"}
{"task_id":"MBXP_GO\/494","completion":"    result := make([]int, 0)\n    for _, b in ipairs(test_tup) {\n        b_str := fmt.Sprintf(\"%d\", b)\n        for i, b_char := range b_str {\n            if b_char == \"1\" {\n                result[i] = result[i] + 2\n            }\n        }\n    }\n    s := make([]string, len(result))\n    for i, s_char := range s {\n        s[i] = fmt.Sprintf(\"%d\", result[i])\n    }\n    return s\n}","language":"go"}
{"task_id":"MBXP_GO\/495","completion":"    pattern := \"[a-z]\"\n    str2 := str1\n    for i := 0; i < str2.Length; i++ {\n        if (str2[i].Match(pattern) != \"\") {\n            str2 = str2.Remove(i, i)\n        }\n    }\n    return str2\n}","language":"go"}
{"task_id":"MBXP_GO\/497","completion":"\treturn (2*math.pi*r*h)\n}","language":"go"}
{"task_id":"MBXP_GO\/498","completion":"\tint gcd = 0\n\tif (x > y) {\n\t\tint temp = x\n\t\tx = y\n\t\ty = temp\n\t}\n\tfor (int i = 1; i <= x; i++) {\n\t\tif (x % i == 0 && y % i == 0) {\n\t\t\tgcd = i\n\t\t}\n\t}\n\treturn gcd\n}","language":"go"}
{"task_id":"MBXP_GO\/499","completion":"    int diameter, radius;\n\n    radius = r;\n    diameter = 2 * radius;\n\n    return diameter;\n}","language":"go"}
{"task_id":"MBXP_GO\/500","completion":"  return string.Join(\" \", list)\n}","language":"go"}
{"task_id":"MBXP_GO\/501","completion":"    var i int\n    i := x % y\n    if i == 0 {\n        return y\n    } else {\n        return num_comm_div(y, i)\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/502","completion":"    for i := 0; i < n; i := i + 1 {\n        if (n[i] == m) {\n            return i\n        }\n    }\n    return -1\n}","language":"go"}
{"task_id":"MBXP_GO\/503","completion":"\tres := make([]int, 0)\n\tfor _, n := range nums {\n\t\tif res.empty() {\n\t\t\tres append(n)\n\t\t} else {\n\t\t\tres append(res[0] + n)\n\t\t}\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBXP_GO\/504","completion":"    if (n == 1) {\n        return n\n    }\n    else {\n        return n + sum_Of_Series(n-1)\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/505","completion":"\tvar i int\n\tvar j int\n\tvar z int\n\tfor i := 0; i < len(A); i++ {\n\t\tif (A[i] != 0) {\n\t\t\tj := i + 1\n\t\t\twhile (j < len(A) && A[j] != 0) {\n\t\t\t\tj++\n\t\t\t}\n\t\t\tz := j - 1\n\t\t\twhile (z >= i && A[z] != 0) {\n\t\t\t\tA[z + 1] = A[z]\n\t\t\t\tz--\n\t\t\t}\n\t\t\tA[i] = 0\n\t\t\tif (j != len(A)) {\n\t\t\t\tA[j] = 0\n\t\t\t}\n\t\t}\n\t}\n\treturn A\n}","language":"go"}
{"task_id":"MBXP_GO\/506","completion":"    \/\/ nCk\n    var numerator := n!\n    var denominator := k!\n    for _, i := range k - 1 {\n        numerator := numerator * n!\n        denominator := denominator * i!\n    }\n    denominator := denominator * n!\n    return numerator \/ denominator\n}","language":"go"}
{"task_id":"MBXP_GO\/507","completion":"\tremovewords.each {&i {}}\n\tlist1.map {|word| word.split(\",\").filter {|w| w in removewords }.join(\",\")}\n}","language":"go"}
{"task_id":"MBXP_GO\/508","completion":"\tl3 := l1, l4 := l2;\n\tfor _, m2 := range l2 {\n\t\tfor _, m1 := range l1 {\n\t\t\tif m1 == m2 {\n\t\t\t\tl3 = append(l3, m1);\n\t\t\t}\n\t\t}\n\t}\n\treturn l3 == l4;\n}","language":"go"}
{"task_id":"MBXP_GO\/509","completion":"    var sum []int\n    var i int\n    for i := 0; i < n; i++ {\n        if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum.Sum() \/ (n \/ 2)\n}","language":"go"}
{"task_id":"MBXP_GO\/510","completion":"    var counter []int = []int{0}\n    for _, v := range arr {\n        counter[v] += 1\n    }\n    var count []int = []int{0}\n    for _, v := range arr {\n        var temp []int = []int{0}\n        if v >= k {\n            temp[0] = 1\n        } else {\n            for _, v2 := range counter {\n                temp[v2] += 1\n            }\n        }\n        if temp.intersect(counter).count() == 0 {\n            count = temp\n        } else {\n            for _, v2 := range temp {\n                counter[v2] -= temp[v2]\n            }\n        }\n    }\n    return count.sum()\n}","language":"go"}
{"task_id":"MBXP_GO\/511","completion":"    var min int\n    var factors [][]int\n    for (var i := 2; i < num - 1; i++) {\n        if num % i == 0 {\n            factors.append [][]int{i, num \/ i}\n        }\n    }\n\n    min := num\n    for (var i := 0; i < factors.size(); i++) {\n        if factors[i][0] > min {\n            min = factors[i][0]\n        }\n    }\n\n    for (var i := 0; i < factors.size(); i++) {\n        for (var j := 0; j < factors[i].size(); j++) {\n            if (factors[i][j] > min && factors[i][j] != min) {\n                min = factors[i][j]\n            }\n        }\n    }\n    return min\n}","language":"go"}
{"task_id":"MBXP_GO\/512","completion":"  let map := make(map[int]int, 0)\n  for key, val in test_tuple {\n    \/\/ First check if val is a tuple. If so, apply the above function.\n    if test_tuple []bool {\n      map = map + count_element_freq(val)\n    } else {\n      if val != nil {\n        map[key] += 1\n      }\n    }\n  }\n  return map\n}","language":"go"}
{"task_id":"MBXP_GO\/513","completion":"\tres := make([]interface{}, test_tup.Length)\n\tfor i := 0; i < test_tup.Length; i++ {\n\t\tres[i] = test_tup[i]\n\t\tfor j := 0; j < test_tup.Length; j++ {\n\t\t\tif i != j {\n\t\t\t\tres[i] = K + res[i]\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBXP_GO\/514","completion":"    var i int\n    var sum int\n    sum = 0\n    i := 0\n    for {\n        i++\n        sum = sum + test_tup[i]\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/515","completion":"    mod := make(map[int]int, 0)\n    for _, v := range arr {\n        mod[v] := mod[v] + 1\n    }\n    for _, v := range arr {\n        if mod[v] > 1 then {\n            return false\n        }\n    }\n    for _, v := range arr {\n        if mod[v] == 0 then {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/516","completion":"\tvar buckets []int = []int{10}\n\n\tfor num int := 0; num < sizeof(nums) ;num++ {\n\t\tbuckets[num % 10] = buckets[num % 10] + 1\n\t}\n\tfor num int := 0; num < sizeof(buckets) ;num++ {\n\t\tfor _ in range(buckets[num] - 1) {\n\t\t\tnums.insert(0, num % 10)\n\t\t}\n\t\tbuckets[num] = buckets[num] - 1\n\t}\n\treturn nums\n}","language":"go"}
{"task_id":"MBXP_GO\/517","completion":"    int largest = 0\n    for _, x := range list1 {\n        if x > largest {\n            largest = x\n        }\n    }\n    return largest\n}","language":"go"}
{"task_id":"MBXP_GO\/518","completion":"\tv := 0\n\ti := 0\n\twhile i < num do {\n\t\tv := v + (num \/ pow(v, 2))\n\t\ti := i + 1\n\t}\n\treturn v\n}","language":"go"}
{"task_id":"MBXP_GO\/519","completion":"\treturn (num * (num + 2) * (num + 3) \/ 6.0)\n}","language":"go"}
{"task_id":"MBXP_GO\/520","completion":"    var n := len(l)\n    var gcd = 1\n    for i, e := range n {\n        var g := gcd(l[i], e)\n        gcd := gcd * e \/ g\n    }\n    return l[0] * gcd\n}","language":"go"}
{"task_id":"MBXP_GO\/521","completion":"    return (x + y > z) || (x + z > y) || (y + z > x)\n}","language":"go"}
{"task_id":"MBXP_GO\/522","completion":"    let m := 0\n    arr.sort (|x| <|x| m < x)\n    for i := 0; i < m; i++ {\n        for j := i + 1; j < m; j++ {\n            if (arr[i] < arr[j]) {\n                m = max(m, 1 + lbs(arr[i:j]) )\n            }\n        }\n    }\n    return m\n}","language":"go"}
{"task_id":"MBXP_GO\/523","completion":"    if len(str1) < 8 {\n        return \"String length should be atleast 8.\"\n    }\n    let upper := 0\n    let lower := 0\n    let number := 0\n    for i, c := range str1, {\n        if c == str1[0] {\n            upper = 1\n            continue\n        }\n        if c == str1[0].tolower {\n            lower = 1\n            continue\n        }\n        if !str.isdigit(c) {\n            number = 1\n        }\n    }\n    if number == 1 {\n        return \"String must have 1 number.\"\n    }\n    if lower == 1 {\n        return \"String must have 1 lower case character.\"\n    }\n    if upper == 1 {\n        return \"String must have 1 upper case character.\"\n    }\n    return \"Valid string.\"\n}","language":"go"}
{"task_id":"MBXP_GO\/524","completion":"    var dp[1..n] arr[1..n] = arr\n    for i := 2 to n {\n        if arr[i] > arr[i - 1] {\n            dp[i] = dp[i - 1] + arr[i]\n        } else {\n            dp[i] = dp[i - 1]\n        }\n    }\n    res := 0\n    for i := 1 to n {\n        res = max(res, dp[i])\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/525","completion":"    if len(line1) == 0 || len(line2) == 0 {\n        return true\n    }\n\n    for i, j in zip(line1, line2) {\n        if (i == -j) {\n            return false\n        }\n    }\n\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/526","completion":"  split1 := split(str1, \" \")\n  for _, word := range split1 {\n    str1 = str1.replace(word[0], word[0].tolower()).replace(word[len(word) - 1], word[len(word) - 1].tolower())\n  }\n  return str1\n}","language":"go"}
{"task_id":"MBXP_GO\/527","completion":"    var count int = 0\n    for i int = 0; i < len(arr); i++ {\n        for j int = i + 1; j < len(arr); j++ {\n            if (arr[i] + arr[j] == n) {\n                count++\n            }\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/528","completion":"    if len(list1) == 0 {\n        return []int{}\n    }\n    return min_length(list1[1]) map[int]int{} {\n        (x, xs) := min_length(list1[1])\n        xs = append(xs, list1[0])\n        return [x, xs]\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/529","completion":"    if n == 1 {\n        return 2\n    }\n\n    var i int = 2\n    var f int = 2\n    for i int = 2; i < n; i int += 1 {\n        f int = f + 1\n    }\n    return f\n}","language":"go"}
{"task_id":"MBXP_GO\/530","completion":"    sum := 0\n    for n int {\n        if n < 0 {\n            sum += n\n        }\n    }\n    return sum \/ float64(nums.Length)\n}","language":"go"}
{"task_id":"MBXP_GO\/531","completion":"    if (coins == []int{}) {\n        return 0;\n    }\n    int sum = 0;\n    int n = coins.len();\n    for (i := 0; i < n; i++) {\n        coins[i] = coins[i] + 1;\n    }\n    coins.sort()\n\n    if (coins[n-1] > V) {\n        return -1;\n    }\n    for (i := 0; i < n; i++) {\n        if (coins[i] <= V) {\n            sum += min_coins(coins[i], m - 1, V);\n            sum += 1;\n        }\n    }\n    return sum;\n}","language":"go"}
{"task_id":"MBXP_GO\/532","completion":"\tint len1 := len(str1), len2 := len(str2)\n\tif len1 != len2 {\n\t\treturn false\n\t}\n\n\tmap[char, int] := map[char, int] { 0 }\n\tfor i := 0; i < len1; i++ {\n\t\tif map[str1[i], -1] == map[str2[i], -1] {\n\t\t\treturn true\n\t\t}\n\t\tmap[str1[i], -1]++\n\t\tmap[str2[i], -1]++\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBXP_GO\/534","completion":"    for _, literal_start := range pattern {\n        if literal_start > 0 {\n            return []int{literal_start, pattern.IndexOf(literal_start, 1)}\n        }\n        if pattern[0] == '*' {\n            return []int{0, 0}\n        }\n        if text[literal_start] != pattern[0] {\n            return []int{0, 0}\n        }\n        for i, char in 0..literal_start {\n            if pattern[i] == '?' {\n                return []int{i+1, i+1}\n            }\n            if pattern[i] == '*' {\n                return []int{i, i+1}\n            }\n            if text[i+literal_start] != pattern[i] {\n                return []int{i+1, i+1}\n            }\n        }\n    }\n    return []int{0,0}\n}","language":"go"}
{"task_id":"MBXP_GO\/535","completion":"  var area = (2 * (3.14 * r)) + (2 * (3.14 * r - 2 * r))\n  return area\n}","language":"go"}
{"task_id":"MBXP_GO\/536","completion":"    for _, i := range list {\n        if n == 0 {\n            return []int{}\n        }\n        if n < 0 {\n            n = abs(n)\n            return &list{i}\n        }\n        \/\/ Find the index of the last element.\n        \/\/ Then select the nth element and prepend the elements to the back.\n        for _, j := range list {\n            if i >= n {\n                return &list{i}\n            }\n            i++\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/537","completion":"    var seen []string\n    var count []int\n    for _,w := range str1 {\n        if w == $seen {\n            return w\n        }\n        if !seen {\n            seen = w\n            count = 0\n        }\n        if $seen.Contains(w) {\n            $seen = $seen + w\n            count++\n        }\n    }\n    return count.Length == 0 ? \"None\" : count.SortedKeys().First()\n}","language":"go"}
{"task_id":"MBXP_GO\/538","completion":"\tif len(str1) == 0 {\n\t\treturn []string{}\n\t}\n\treturn []string{str1[0]}.concat(string_list_to_tuple(str1[1:]))\n}","language":"go"}
{"task_id":"MBXP_GO\/539","completion":"    base_nums []int\n    pow_nums []int\n    for i, base_num := range index {\n        pow_num := base_num^i\n        base_nums = append(base_nums, pow_num)\n        pow_nums = append(pow_nums, base_num^i)\n    }\n    return base_nums\n}","language":"go"}
{"task_id":"MBXP_GO\/540","completion":"    if (n == 0) {\n        return 0\n    }\n    arr.sort()\n    x := 0\n    arr[n-1]\n    for i := 0; i < n; i++ {\n        if (arr[i+1] != arr[i]) {\n            x = arr[i+1] - arr[i]\n            break\n        }\n    }\n    return x\n}","language":"go"}
{"task_id":"MBXP_GO\/541","completion":"\tsum int\n\tsum := 0\n\tfor i := 0; i < (math.floor(math.sqrt(n))+1) {\n\t\tif n % i == 0 {\n\t\t\tsum += i\n\t\t\tsum += n \/ i\n\t\t}\n\t}\n\treturn n > sum\n}","language":"go"}
{"task_id":"MBXP_GO\/542","completion":"    \/\/ 1. Convert to regex\n    \/\/ 2. Replace spaces, commas, or dots with a colon in the given string by using regex.\n    text, err := regex.ReplaceAll(text, \"\\s,\\.\", \":\")\n    if err != nil {\n        return err\n    }\n    return text\n}","language":"go"}
{"task_id":"MBXP_GO\/543","completion":"    return len(num1.toString().concat(num2.toString()))\n}","language":"go"}
{"task_id":"MBXP_GO\/544","completion":"    for _, _, v := range test_list {\n        if len(v) > 1 {\n            concat(concat(v[0], \" \"), flatten_tuple(v))\n        } else {\n            v0 := v[0]\n            if v0 != \" \" {\n                v0 = \" \" + v0\n            }\n            concat(v0, \"\\\\n\")\n        }\n    }\n    return \"\"\n}","language":"go"}
{"task_id":"MBXP_GO\/545","completion":"    return ((n & 0xf) << 4) | (n >> 4)\n}","language":"go"}
{"task_id":"MBXP_GO\/546","completion":"    if len(string0) == 0 {\n        return None\n    }\n    i uint32 := 0\n    while i < len(string0) {\n        if string0[i] == char {\n            return i\n        }\n        i := i + 1\n    }\n    return None\n}","language":"go"}
{"task_id":"MBXP_GO\/547","completion":"    i int = 0\n    total int = 0\n    var mask int = 1\n    while (mask < n) {\n        mask = mask << 1\n    }\n    mask = mask >> 1\n    while (mask != 0) {\n        total = total + i * (i + 1)\n        i = i + 1\n        mask = mask >> 1\n    }\n    return total\n}","language":"go"}
{"task_id":"MBXP_GO\/548","completion":"    var length []int = 0\n    var current_length []int = 0\n    var max_length []int = 0\n    var last_number []int = 0\n    for i, x := range arr {\n        if last_number >= x {\n            current_length++\n            last_number = x\n        } else {\n            last_number = x\n            if current_length > length {\n                length = current_length\n            }\n            current_length = 1\n        }\n    }\n    if current_length > length {\n        length = current_length\n    }\n    return length\n}","language":"go"}
{"task_id":"MBXP_GO\/549","completion":"\tvar sum int\n\tvar res int\n\tvar i int\n\tsum := 0\n\tres := 1\n\ti := 0\n\twhile i <= n {\n\t\tres := res * res\n\t\ti := i + 1\n\t}\n\tsum = res * 5\n\treturn sum\n}","language":"go"}
{"task_id":"MBXP_GO\/550","completion":"\tint pivot := (high - low)\/2\n\tif (low < high) {\n\t\tif (arr[pivot] < arr[pivot+1]) {\n\t\t\tswap(arr, pivot, pivot+1)\n\t\t\tfind_Max(arr, low, pivot-1)\n\t\t\tfind_Max(arr, pivot+1, high)\n\t\t}\n\t}\n\treturn arr[pivot]\n}","language":"go"}
{"task_id":"MBXP_GO\/551","completion":"\tvar n2 := n * 2\n\tvar n3 := 0\n\tfor i, col in ipairs(list1) {\n\t\tif i % 2 == 0 {\n\t\t\tn3 := n3 + 1\n\t\t\tif n3 == n2 {\n\t\t\t\tif i + 1 < length(col) {\n\t\t\t\t\treturn col[(i + 1) \/ 2]\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif i < length(col) {\n\t\t\t\treturn col[i \/ 2]\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/552","completion":"    for _, x := range seq_nums {\n        if (x - 1 >= 0 && seq_nums[x-1] != x) {\n            return \"Non Linear Sequence\"\n        }\n    }\n    return \"Linear Sequence\"\n}","language":"go"}
{"task_id":"MBXP_GO\/553","completion":"    return sum(test_tup.map{|n| n.to_s.length}) \/ len(test_tup)\n}","language":"go"}
{"task_id":"MBXP_GO\/554","completion":"    for _, i := range list {\n        if i % 2 == 1 {\n            yield i\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/555","completion":"  var sum []int\n  for _, v := range n {\n    sum += v\n  }\n  var cube []int\n  for _, v := range n {\n    cube += v * v * v\n  }\n  cube.sort()\n  sum.sort()\n  cube.reverse()\n  sum.reverse()\n  var diff = 0\n  for _, v := range n {\n    diff += (cube[v] - sum[v]) * (cube[v] - sum[v])\n  }\n  return diff\n}","language":"go"}
{"task_id":"MBXP_GO\/556","completion":"\tc := 0\n\tfor i, v := range A {\n\t\tif v = 0 and v ^ N = 0 {\n\t\t\tc := c + 1\n\t\t}\n\t}\n\treturn c\n}","language":"go"}
{"task_id":"MBXP_GO\/557","completion":"    \/\/ Write your code here\n    return \"\"\n}","language":"go"}
{"task_id":"MBXP_GO\/558","completion":"\tint d = n2-n1\n\treturn d\n}","language":"go"}
{"task_id":"MBXP_GO\/559","completion":"    if (size <= 0) {\n        return 0\n    }\n    var max = 0\n    for (i, j := 0; i < size; i++) {\n        var temp := sum(a, i, j)\n        if (temp > max) {\n            max = temp\n        }\n    }\n    return max\n}","language":"go"}
{"task_id":"MBXP_GO\/560","completion":"    if test_tup1 == nil {\n        return test_tup2\n    }\n    if test_tup2 == nil {\n        return test_tup1\n    }\n    temp := make([]int, test_tup1.Length + test_tup2.Length)\n    for _, v1, v2 := range test_tup1 {\n        insert(temp, v1, v2)\n    }\n    for _, v1, v2 := range test_tup2 {\n        insert(temp, v1, v2)\n    }\n    return temp\n}","language":"go"}
{"task_id":"MBXP_GO\/561","completion":"    for i, v := range test_list {\n        for j, w := range test_list {\n            if i < j {\n                if v[0] == w[0] && v[1] != w[1] {\n                    map[v[0]][1].append(w[1])\n                    break\n                }\n            }\n        }\n        if !i == j {\n            map[i][0] = v[0]\n            map[i][1] = v[1]\n        }\n    }\n    for i, v := range map {\n        map[i][1].sort()\n    }\n    return map\n}","language":"go"}
{"task_id":"MBXP_GO\/562","completion":"    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/563","completion":"    return text.Split(\"\\\"\\\\\"\")\n}","language":"go"}
{"task_id":"MBXP_GO\/564","completion":"\tcount := 0\n\tarr.each {\n\t\tn := arr.length\n\t\tarr.splice(1,n)\n\t\tcount += arr.length - 1\n\t}\n\treturn count\n}","language":"go"}
{"task_id":"MBXP_GO\/565","completion":"    r := []string{0}\n    for i, c := range word {\n        if i = 0 then r = []string{0} else r = r & {c}\n    }\n    return r\n}","language":"go"}
{"task_id":"MBXP_GO\/566","completion":"    if n < 10 {\n        return n\n    }\n    n--\n    return (n \/\/ 10) + sum_digits(n % 10)\n}","language":"go"}
{"task_id":"MBXP_GO\/567","completion":"\tsorted,\n\tis_sorted,\n\tmin_value,\n\tmax_value,\n\tvalue,\n\ti := 0;\n\n\tfor i := 0; i < len(list1); i++ {\n\t\tmin_value := min(list1[i])\n\t\tmax_value := max(list1[i])\n\t\tvalue := list1[i]\n\t\tfor j := 0; j < len(value); j++ {\n\t\t\tif value[j] < min_value || value[j] > max_value {\n\t\t\t\tsorted := false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif sorted := true {\n\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/568","completion":"\tfor i := 0; i < length; i++ {\n\t\t{}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/569","completion":"\tfor _, v1 in ipairs(list1) {\n\t\tfor _, v2 in ipairs(list1) {\n\t\t\tif v1 < v2 {\n\t\t\t\treturn append(v1, v2)\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}","language":"go"}
{"task_id":"MBXP_GO\/570","completion":"    \/\/ Go and remove words from the list of strings\n    \/\/ charlist contains the characters to remove\n    \/\/ You can assume that the string will be less than 100 characters\n    var i int\n    var word []string\n    var result []string\n    var word_to_remove []string\n\n    \/\/ split the strings into an array of words\n    for (i = 0; i < list1.Length; i++) {\n        word[i] = split(list1[i], \" \")\n    }\n\n    \/\/ remove all the characters from the words\n    for (i = 0; i < word.Length; i++) {\n        word_to_remove = []string{ charlist.Length }\n        for (j = 0; j < charlist.Length; j++) {\n            word_to_remove[j] = word[i][j]\n        }\n        for (j = 0; j < word[i].Length; j++) {\n            if (charlist","language":"go"}
{"task_id":"MBXP_GO\/571","completion":"    arr := arr + [K, N]\n    arr := arr * (N - 1)\n    arr := arr + [N + K, N * 2]\n    arr := arr * (N - 1)\n    arr := arr + [N + 1, N * 2]\n    arr := arr * (N - 1)\n    arr := arr + [N + 2, N * 2]\n    arr := arr * (N - 1)\n    arr := arr + [N + 3, N * 2]\n    arr := arr * (N - 1)\n    arr := arr + [N + 4, N * 2]\n    arr := arr * (N - 1)\n    arr := arr + [N + 5, N * 2]\n    arr := arr * (N - 1)","language":"go"}
{"task_id":"MBXP_GO\/572","completion":"\tr := []int{len(nums)}\n\tfor _, i := range nums {\n\t\tr[i] := i\n\t}\n\n\tfor _, i := range r {\n\t\tfor j := i + 1; j < r; j++ {\n\t\t\tif r[i] == r[j] {\n\t\t\t\tr[j] := 0\n\t\t\t}\n\t\t}\n\t}\n\n\tr = filter.drop(i => i != 0, r)\n\n\treturn r\n}","language":"go"}
{"task_id":"MBXP_GO\/573","completion":"    var unique_numbers []int{}, product []int{};\n\n    unique_numbers = []int{}\n\n    \/\/ fill the unique_numbers with unique numbers from the list\n    for _, i := range list_data {\n        if unique_numbers.count(i) == 0 {\n            unique_numbers[] = i;\n        }\n    }\n\n    \/\/ calculate the product of the unique numbers\n    product = []int{}\n    for _, i := range unique_numbers {\n        product[] = i*product[i-1];\n    }\n\n    \/\/ return the first non-zero element\n    for _, i := range product {\n        if i != 0 {\n            return i;\n        }\n    }\n\n    \/\/ If the product is 0, return 0 as a default\n    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/574","completion":"\treturn 2 * r * h + 2 * (r + h) * pi\n}","language":"go"}
{"task_id":"MBXP_GO\/575","completion":"\tfor (i,j) := range A {\n\t\tif (L <= i && i <= R && (i - L) % N == 0) {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn 0\n}","language":"go"}
{"task_id":"MBXP_GO\/576","completion":"    \/\/ write your code here\n    for (i int, j int) {\n        if (A[i] == B[j]) {\n            for (k int, l int) {\n                if (j < l - 1) {\n                    return false\n                }\n                j = j + 1\n            }\n        }\n        return false\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/577","completion":"\tvar last []byte\n\tvar res []byte\n\tres = 0b0\n\n\tfor (i := 1; i <= n; i++) {\n\t\tres = res * i % 10 | 0\n\t}\n\n\tlast = res & 0xFF\n\treturn last\n}","language":"go"}
{"task_id":"MBXP_GO\/578","completion":"\tvar i int = 0;\n\tvar j int = 0;\n\tvar k int = 0;\n\tvar res []int = []\n\twhile (i < list1.Length && j < list2.Length && k < list3.Length) {\n\t\tres = append(res, list1[i], list2[j], list3[k])\n\t\ti = i + 1\n\t\tj = j + 1\n\t\tk = k + 1\n\t}\n\tif (i < list1.Length) {\n\t\twhile (i < list1.Length) {\n\t\t\tres = append(res, list1[i])\n\t\t\ti = i + 1\n\t\t}\n\t}\n\tif (j < list2.Length) {\n\t\twhile (j < list2.Length) {\n\t\t\tres = append(res, list2[j])\n\t\t\tj = j + 1\n\t\t}\n\t}\n\tif (k","language":"go"}
{"task_id":"MBXP_GO\/579","completion":"    \/\/ Your code here\n}","language":"go"}
{"task_id":"MBXP_GO\/580","completion":"    var ret []interface{}\n    for _, v := range test_tuple {\n        if is_tuple(v) {\n            ret = append(ret, extract_even(v))\n        } else if is_even(v) {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}","language":"go"}
{"task_id":"MBXP_GO\/581","completion":"\tif s == 0 {\n\t\treturn 0\n\t}\n\treturn 2 * (b * s) + 2 * (surface_Area(b - 1, s - 1))\n}","language":"go"}
{"task_id":"MBXP_GO\/583","completion":"    int i := 0;\n    int n := num - 1;\n    i := i + 1;\n    i = i * 2 * n + 1;\n    i = i \/ 2;\n    return i;\n}","language":"go"}
{"task_id":"MBXP_GO\/584","completion":"    match := regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(","language":"go"}
{"task_id":"MBXP_GO\/586","completion":"    for _, elem := range a {\n        if i + k > n {\n            \/\/ Add the element to the new array\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/587","completion":"    tuple := make([]int, len(listx))\n    for i,x := range listx {\n        tuple[i] = x\n    }\n    return tuple\n}","language":"go"}
{"task_id":"MBXP_GO\/588","completion":"    s, e := 0, nums.Length\n    if s == e {\n        return -1\n    }\n    num := nums[s]\n    for i := s + 1; i <= e; i++ {\n        if nums[i] > num {\n            num := nums[i]\n        } else {\n            return num - nums[i]\n        }\n    }\n    return -1\n}","language":"go"}
{"task_id":"MBXP_GO\/589","completion":"\tfor a := a; b := b; if a^2 < b^2 then return []int{a,b}\n\treturn []int{a,b}\n}","language":"go"}
{"task_id":"MBXP_GO\/591","completion":"    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n}","language":"go"}
{"task_id":"MBXP_GO\/592","completion":"    var sum int\n    if n == 0 {\n        return 1\n    }\n    for i := 0; i < n; i++ {\n        sum += sum_Of_product(n - i - 1)\n    }\n    return sum * n\n}","language":"go"}
{"task_id":"MBXP_GO\/593","completion":"    idx, ip_arr, i, n := ip.Index(ip), ip.Split(\".\")\n    for i := 0; i < n.Count(); i++ {\n        if n[i] == \"0\" {\n            ip_arr = ip_arr.Remove(i)\n        }\n    }\n    return Join(\".\", ip_arr)\n}","language":"go"}
{"task_id":"MBXP_GO\/594","completion":"  var i int\n  var countEven int\n  var countOdd int\n  countEven := 0\n  countOdd := 0\n  for i := 0; i < len(list1); i++ {\n    if list1[i]%2 == 0 then countEven++\n    else countOdd++\n  }\n  if countEven > countOdd then return countEven - countOdd\n  else return countOdd - countEven\n}","language":"go"}
{"task_id":"MBXP_GO\/595","completion":"    if len(str1) != len(str2) {\n      \/\/ length of two strings are not same\n      return \"Not Possible\"\n    }\n\n    \/\/ create 2d array\n    table := make([]string, len(str2))\n\n    \/\/ fill the table\n    for i, ch in enumerate(str2) {\n      table[i] = ch\n    }\n\n    \/\/ iterate through every possible element in str1\n    for i, ch in enumerate(str1) {\n      if ch == str2[i] {\n        continue\n      }\n\n      \/\/ find the first occurance of the element in str2\n      j := 0\n      for j, c in enumerate(str2) {\n        if ch == c {\n          break\n        }\n      }\n\n      if j == len(str2) {\n        \/\/ element is not present in str2\n        return \"Not Possible\"\n      }\n\n      \/\/ swap\n      table[j] = str1[i]\n      table","language":"go"}
{"task_id":"MBXP_GO\/596","completion":"    var tuple_size []int64\n    for tuple tuple_list {\n        tuple_size += [tuple_list.len]\n    }\n    return tuple_size.sum()\n}","language":"go"}
{"task_id":"MBXP_GO\/597","completion":"\tarr1, arr2, m, n, k\n\tif m > n or k > m + n - 1 {\n\t\treturn 0\n\t}\n\tif arr1.length > m {\n\t\treturn find_kth(arr2, arr1, n, m, k)\n\t}\n\tif arr2.length > k {\n\t\treturn find_kth(arr1, arr2, m, n, k - 1)\n\t}\n\tif arr1.length > n {\n\t\treturn find_kth(arr2, arr1, m, n - 1, k - 1)\n\t}\n\tif arr2.length == 0 {\n\t\treturn arr1[k - 1]\n\t}\n\tif arr1[m - 1] > arr2[k - 1] {\n\t\treturn find_kth(arr2, arr1, m, n, k - 1)\n\t}\n\treturn find_kth(arr1, arr2, m - ","language":"go"}
{"task_id":"MBXP_GO\/598","completion":"    let number_str := string(number)\n    let number_length := len(number_str)\n\n    \/\/ Initialize sum to 0\n    sum := 0\n    for i := 0; i < number_length; i++ {\n        sum += (int)(number_str[i]) ** number_length\n    }\n\n    \/\/ Compare sum with the given number\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/599","completion":"    \/\/ Go\/Golang\n    \/\/ Return sum of first n natural numbers and average of first n natural numbers.\n    \/\/ Hint: Use structs and loops to solve this.\n    \/\/ Hint: You can use functions to solve this.\n}","language":"go"}
{"task_id":"MBXP_GO\/600","completion":"\treturn n & 1 ? true : false\n}","language":"go"}
{"task_id":"MBXP_GO\/602","completion":"  n int len := str1.len()\n  if len == 0 {\n    return \"None\"\n  }\n\n  \/\/ create a map to store frequency of each character\n  \/\/ key - character, value - number of appearance\n  hashmap := make(map[char]int , len)\n  for i := 0; i < len; i++ {\n    c := str1[i]\n    if hashmap[c] == nil {\n      hashmap[c] = 1\n    } else {\n      hashmap[c] += 1\n    }\n  }\n\n  \/\/ iterate through the hashmap and find the first repeated character\n  \/\/ Note: the order of items in the map will not be preserved\n  \/\/ since hashmap is a hashmap, and in python we can not access the\n  \/\/ keys in a hashmap in the order in which they are inserted\n  for c, frequency in hashmap.iter() {\n    if frequency > 1 {\n      return c\n    }","language":"go"}
{"task_id":"MBXP_GO\/603","completion":"    let nums := make([]int, n)\n    for i := 1; i <= n; i += 1 {\n        nums[i] := i\n    }\n    for i := 2; i <= n; i += 1 {\n        let j := i - 1\n        while j > 0 {\n            if nums[j] >= nums[i] {\n                nums[i] = nums[j]\n            } else {\n                break\n            }\n            j -= 1\n        }\n    }\n    return nums\n}","language":"go"}
{"task_id":"MBXP_GO\/604","completion":"    ret := \"\"\n    for _, word := range s {\n        ret += reverse(word) + \" \"\n    }\n    ret\n}","language":"go"}
{"task_id":"MBXP_GO\/605","completion":"    \/\/ Implementation here\n}","language":"go"}
{"task_id":"MBXP_GO\/606","completion":"\treturn math.pi \/ 180.0 * float64(degree)\n}","language":"go"}
{"task_id":"MBXP_GO\/607","completion":"    var result []interface{}\n\n    var pattern_position []int\n    var pattern_length []int\n\n    pattern_position = text.Find(pattern, 0, text.Length)\n    pattern_length = pattern.Length\n\n    if pattern_position != -1 && pattern_length != 0 {\n        result.Append(pattern, pattern_position, pattern_position + pattern_length)\n    }\n\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/608","completion":"  if n == 1 {\n    return 1\n  }\n  return 3 * bell_Number(n - 1) + bell_Number(n - 2)\n}","language":"go"}
{"task_id":"MBXP_GO\/609","completion":"\tint m int\n\tm = max(A, min(B, N))\n\tif m < A {\n\t\tm = min(m, B)\n\t}\n\tif m < B {\n\t\tm = min(m, N)\n\t}\n\tm\n}","language":"go"}
{"task_id":"MBXP_GO\/610","completion":"    if (L < 0 || L > (len(list1) - 1)) {\n        return []int{};\n    }\n    int i := 0;\n    var list2 []int{};\n    for (i := 0; i < L; i++) {\n        list2.append(list1[i]);\n    }\n    var kth_element := 0;\n    for (i := L; i < len(list1); i++) {\n        kth_element := i;\n        list2[kth_element] := list1[i + 1];\n    }\n    return list2;\n}","language":"go"}
{"task_id":"MBXP_GO\/611","completion":"    var index = 0\n    var max_index = 0\n\n    for _, _, _ := range test_list {\n        if index >= N {\n            index = 0\n            max_index++\n        }\n\n        max_index = max_of_nth(test_list, index + 1)\n\n        if test_list[index][max_index] > test_list[max_index][max_index] {\n            max_index = index\n        }\n\n        index++\n    }\n\n    return max_index\n}","language":"go"}
{"task_id":"MBXP_GO\/612","completion":"    if lst.empty {\n        return []interface{}\n    }\n\n    \/\/ merge the first and last elements separately in a list of lists\n    \/\/ you can assume the lst is nonempty\n    var merged []interface{}, first []interface{}, last []interface{}\n    first = lst.slice(0, 1)\n    last = lst.slice(-1, -2)\n    merged = first + last\n\n    \/\/ if the length of the list is odd, then the final element of the merged list is an empty list\n    if (*lst.len() % 2) {\n        merged = merged + []interface{}, []interface{}\n    }\n\n    \/\/ merge the rest of the elements in the list\n    return merge(merged + lst.slice(1, -2))\n}","language":"go"}
{"task_id":"MBXP_GO\/613","completion":"    var max_key []string\n    var max_val []int64\n    for _, _, val := range test_list {\n        max_val, max_key := 0, \"\"\n        for key, val2 := range val {\n            if val2 > max_val {\n                max_val, max_key = val2, key\n            }\n        }\n        if max_val != 0 {\n            test_list.push({max_key, max_val})\n        }\n    }\n    return test_list\n}","language":"go"}
{"task_id":"MBXP_GO\/614","completion":"    res := 0\n    for _, v := range test_list {\n        res += v\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/615","completion":"\tres := make([]float64, len(nums))\n\tfor i, n := range nums {\n\t\tfor j, m := range n {\n\t\t\tres[i][j] = avg(res[i][j], m)\n\t\t}\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBXP_GO\/616","completion":"\tvar modded_tup1 []int = []int{0}\n\tvar modded_tup2 []int = []int{0}\n\tvar k := 0\n\tfor _, a, b := range test_tup1 {\n\t\tmodded_tup1[k] := a % b\n\t\tmodded_tup2[k] := b % a\n\t\tk++\n\t}\n\treturn modded_tup1, modded_tup2\n}","language":"go"}
{"task_id":"MBXP_GO\/617","completion":"    if a > b {\n        return 0;\n    }\n    return min_Jumps(b, a, d + 1) + min_Jumps(b, a - 1, d + 1);\n}","language":"go"}
{"task_id":"MBXP_GO\/618","completion":"    nums1 + nums2\n}","language":"go"}
{"task_id":"MBXP_GO\/619","completion":"    var i string\n    for {\n        i := 0\n        while {\n            if test_str[i] == '0' {\n                test_str[i] = test_str[i + 1]\n                test_str[i + 1] = '0'\n                i += 1\n                continue\n            }\n            break\n        }\n    }\n    return test_str\n}","language":"go"}
{"task_id":"MBXP_GO\/620","completion":"    sorted(a)\n    # [1, 3, 6, 13, 17, 18]\n    # [10, 5, 3, 15, 20]\n    # [18, 1, 3, 6, 13, 17]\n    # [1, 3, 6, 13, 17, 18]\n    # [10, 5, 3, 15, 20]\n    # [18, 1, 3, 6, 13, 17]\n    # [10, 5, 3, 15, 20]\n    # [18, 1, 3, 6, 13, 17]\n    # [10, 5, 3, 15, 20]\n    # [18, 1, 3, 6, 13, 17]\n\n    # [1, 3, 6, 13, 17, 18]\n    # [10, 5","language":"go"}
{"task_id":"MBXP_GO\/621","completion":"    var new_list []string\n    var start_index int\n    var current_num []int\n\n    for _, elem := range test_list {\n        if !elem {\n            new_list.append(elem)\n            continue\n        }\n\n        if elem.length < 2 {\n            new_list.append(elem)\n            continue\n        }\n\n        current_num := []int(elem[1])\n        start_index := int(elem[0])\n        if start_index == 0 {\n            current_num += K\n        } else {\n            current_num -= K\n        }\n\n        if current_num < 10 {\n            new_list.append(elem[0].to_string() + \"0\" + current_num)\n        } else {\n            new_list.append(elem[0].to_string() + current_num)\n        }\n    }\n\n    return new_list\n}","language":"go"}
{"task_id":"MBXP_GO\/622","completion":"\tarr1.Sort (|x1, x2| x1 < x2)\n\tarr2.Sort (|x1, x2| x1 < x2)\n\tif n % 2 == 0 {\n\t\treturn (arr1[n \/ 2] + arr1[n \/ 2 - 1]) \/ 2.0\n\t}\n\treturn arr1[(n - 1) \/ 2]\n}","language":"go"}
{"task_id":"MBXP_GO\/623","completion":"\tfor _,i := range nums {\n\t\treturn map { _ ^ (i ** n) } nums\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/624","completion":"    if len(string0) == 0 {\n        return \"\"\n    }\n    return string0[0].toUpper() + string0.slice(1)\n}","language":"go"}
{"task_id":"MBXP_GO\/625","completion":"    if len(newList) == 0 {\n        panic(\"List is empty\");\n    }\n    for _, i := range newList {\n        if i == newList [0] {\n            newList [newList [0] := newList [newList [newList - 1]]];\n            newList [newList [newList - 1] := i];\n        } else if i == newList [newList - 1] {\n            newList [newList [newList - 1] := newList [0]];\n            newList [0] := i;\n        }\n    }\n    return newList;\n}","language":"go"}
{"task_id":"MBXP_GO\/626","completion":"    var area = 0\n    if (r < 0) {\n        return -1\n    }\n\n    for (i := 0; i < r; i++) {\n        for (j := i; j < r; j++) {\n            for (k := j; k < r; k++) {\n                area = area + 1\n            }\n        }\n    }\n    area\n}","language":"go"}
{"task_id":"MBXP_GO\/627","completion":"    if (end < start) return start\n    if (end == start) {\n        if (array[start] != 0)\n            return start\n        else\n            return array[end]\n    }\n    mid int = start + (end - start)\/2\n    if (mid < start) {\n        if (array[mid] == 0) return find_First_Missing(array,start,mid)\n        else return find_First_Missing(array,mid+1,end)\n    }\n    else if (array[mid] == 0) return find_First_Missing(array,mid+1,end)\n    else return find_First_Missing(array,start,mid)\n}","language":"go"}
{"task_id":"MBXP_GO\/628","completion":"    string1 := \"\"\n    for i := 0; i < len(string0); i++ {\n        if (string[i] == \" \") {\n            string1 += \"%20\"\n        } else {\n            string1 += string[i]\n        }\n    }\n    return string1\n}","language":"go"}
{"task_id":"MBXP_GO\/629","completion":"    r := make([]int, len(list))\n    i := 0\n    while i < len(list) {\n        if i % 2 == 0 {\n            r[i] = list[i]\n        }\n        i++\n    }\n    return r\n}","language":"go"}
{"task_id":"MBXP_GO\/630","completion":"    if len(test_tup) == 0 {\n        return []\n    }\n    var num_y := 0\n    var num_x := 0\n    var result [][]int\n    for y in range(len(test_tup)):\n        num_y = y\n        for x in range(y+1, len(test_tup)):\n            num_x = x\n            result.append(test_tup[num_y], test_tup[num_x])\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/631","completion":"    text.replace(text.replace(\/\\s\/g, '_'), '')\n}","language":"go"}
{"task_id":"MBXP_GO\/632","completion":"\tres := make([]int, num_list.Length)\n\tfor _, i := range num_list {\n\t\tif i == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tres[res.Length] = i\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBXP_GO\/633","completion":"    sum := 0\n    for i := 0; i < n; i++ {\n        sum = (sum ^ arr[i])\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/634","completion":"    if (n == 0)\n        return 0\n    if (n % 2 == 0)\n        return (even_Power_Sum(n - 1) * 4) + 1\n    else\n        return even_Power_Sum(n - 1)\n}","language":"go"}
{"task_id":"MBXP_GO\/636","completion":"    \/\/ TODO: Fill in the body of the function\n    if (b**2 - 4*a*c < 0) {\n        return \"No\"\n    }\n    if (b**2 - 4*a*c == 0) {\n        return \"Yes\"\n    }\n    else if (b**2 - 4*a*c > 0) {\n        return \"Yes\"\n    }\n    else {\n        return \"No\"\n    }\n\n}","language":"go"}
{"task_id":"MBXP_GO\/637","completion":"\tif (actual_cost < sale_amount) {\n\t\treturn true\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBXP_GO\/638","completion":"\tif v <= 0 {\n\t\treturn 0\n\t}\n\tt1 := math.max(t, 4)\n\tt2 := math.min(t, 18)\n\treturn round(100 - (100 \/ (v + (0.15 * t1))))\n}","language":"go"}
{"task_id":"MBXP_GO\/639","completion":"    var sum = 0\n    for _, name := range sample_names {\n        if name[0] == \"a\" { continue }\n        sum += string.Length(name)\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/640","completion":"  return items[0]\n}","language":"go"}
{"task_id":"MBXP_GO\/641","completion":"    var i int\n    i = 1\n    if i < n {\n        i++\n        for {\n            if i % 6 == 0 {\n                return i\n            }\n            i++\n        }\n    }\n    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/643","completion":"    var position := 0;\n    while (position < len(text) && position < len(text) - 1 && text[position] != 'z') {\n        position++;\n    }\n    if (position == len(text) || position == len(text) - 1) {\n        return \"Not matched!\";\n    }\n    return \"Found a match!\";\n}","language":"go"}
{"task_id":"MBXP_GO\/644","completion":"    if (k > len(input)) {\n        k = len(input)\n    }\n\n    var result []int\n    for _, i := range k - 1 downto 0 {\n        result[i] = input[len(input) - 1 - i]\n    }\n\n    result\n}","language":"go"}
{"task_id":"MBXP_GO\/645","completion":"    var prod []int64\n    var j int\n    var kth_prod int\n    var kth_prod_val int64\n    var test_list_len int\n    var i int\n    kth_prod_val := 0\n\n    for j := 0; j < |test_list|; j++ {\n        test_list_len := 0\n        for i := 0; i < |test_list[j]|; i++ {\n            test_list_len += 1\n        }\n        prod = []int64 { 0 }\n        kth_prod = 0\n        for i := 0; i < test_list_len; i++ {\n            prod[i] = 0\n        }\n        prod[K] = prod[K] + 1\n        while (kth_prod < |test_list[j]|) {\n            kth_prod += 1\n            prod[kth_prod - 1] = k","language":"go"}
{"task_id":"MBXP_GO\/646","completion":"\tint i int, j int, n int, k int, result int\n\n\tn := (N - K + 1)\n\tk := (K - 1)\n\tresult := 0\n\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < n; j++ {\n\t\t\tif ((i * i + j * j) <= k * k) {\n\t\t\t\tresult++\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}","language":"go"}
{"task_id":"MBXP_GO\/647","completion":"    return map {\n        \/\/ Split string into array of words.\n        let words = text.Split(\" \")\n        \/\/ Filter out words that start with capital letters.\n        words.Filter { w != \"\" && w[0] == w[0].ToUpper() }\n        \/\/ Join back into string.\n        .Join(\" \")\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/648","completion":"    var n := len(lst)\n    for _, i := range n {\n        for _, j := range n {\n            if i == j {\n                continue\n            }\n            if lst[i] < lst[j] {\n                var tmp := lst[i]\n                lst[i] = lst[j]\n                lst[j] = tmp\n            }\n        }\n    }\n    return lst\n}","language":"go"}
{"task_id":"MBXP_GO\/649","completion":"    if (m > n) {\n        m = n\n    }\n    var sum []int\n    for {\n        sum.append(0)\n    }\n    var i []int = []int(m-1)\n    for {\n        i.append(0)\n    }\n    for {\n        i[0] = 0\n        i[1] = 1\n    }\n    var j []int = []int(n-m)\n    for {\n        j.append(0)\n    }\n    for {\n        j[0] = 0\n        j[1] = 1\n    }\n    for {\n        var iIndex []int = i\n        var jIndex []int = j\n        if (m == n) {\n            sum[iIndex] = nums[iIndex]\n        }\n        else {\n            while (iIndex < m) {\n                sum[iIndex] = sum","language":"go"}
{"task_id":"MBXP_GO\/650","completion":"\tfor i int {\n\t\tfor j int {\n\t\t\tif arr1[i] == arr2[j] {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBXP_GO\/651","completion":"\tvar sub []int\n\tvar t2 []int\n\n\tfor sub, t2 in zip(test_tup1, test_tup2) {\n\t\tif (sub < t2) return false\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBXP_GO\/652","completion":"    \/\/ Go\n    \/\/ convert the input into a list of tuples\n    \/\/ flatten the tuples\n    \/\/ return the flattened list\n    \/\/ test cases:\n    \/\/  [[[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]],\n    \/\/   [[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]],\n    \/\/   [[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]]\n    \/\/  [[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)],\n    \/\/   [(5, 7, 10, 18, 0, 10), (6","language":"go"}
{"task_id":"MBXP_GO\/653","completion":"\tr := map[string][]int{{}}\n\tfor x, y := range l {\n\t\tr[x].append(y)\n\t}\n\treturn r\n}","language":"go"}
{"task_id":"MBXP_GO\/654","completion":"    if (l < 0 || b < 0) {\n        \/\/ Invalid arguments\n        return 0;\n    } else if (l == 0 || b == 0) {\n        \/\/ Zero length rectangle\n        return (l + b) * 2;\n    } else {\n        return (l + b) * 2 + rectangle_perimeter(l - 1, b - 1);\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/655","completion":"\tsum := 0\n\tfor i := 1; i <= n; i++ {\n\t\tsum += pow(i, 5)\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBXP_GO\/656","completion":"\ts := 0\n\tfor _, a[i], b[i] in\n\t\tfor i := 0; i < n; i++ {\n\t\t\ts += abs(a[i] - b[i])\n\t\t}\n\treturn s\n}","language":"go"}
{"task_id":"MBXP_GO\/657","completion":"\tfor i, d in math.Range(math.Min(n, math.Max(1, math.Factorial(n)))){\n\t\tif math.Digit(math.Factorial(n) \/ d) == 1\n\t\t\treturn d\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBXP_GO\/658","completion":"    map[int]int := 0\n    for i, v := range list1 {\n        map[v]++\n    }\n    for k, v := range map {\n        if v == max(map[v]) {\n            return k\n        }\n    }\n    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/659","completion":"    match x {\n        [] {\n            \/\/ empty list\n            case [] => []\n            \/\/ singleton list\n            case []int => [x]\n            \/\/ non-empty list\n            \/\/ use recur to iterate through all the elements, and check whether they are duplicates\n            case (xs []int) =>\n                if (all (x == xs[0]) | all (x == xs[i + 1] for i, x in enumerate(xs))) {\n                    \/\/ all the elements are duplicates, we need to return them\n                    \/\/ use map to convert [a, b, c] to [(a, a), (b, b), (c, c)]\n                    \/\/ use [(x, x) for x in xs] to get [(a, a), (b, b), (c, c)]\n                    return [(x, x) for x in xs]\n                } else {\n                    \/\/ not all the elements are duplicates, just repeat the list\n                   ","language":"go"}
{"task_id":"MBXP_GO\/660","completion":"    for (i := l1; i <= r1; i++) {\n        for (j := l2; j <= r2; j++) {\n            if (i == j) continue;\n            if (i < j) {\n                if (i < 3) {\n                    print(\"(-1,\", i, \"),\");\n                } else if (i > 9) {\n                    print(\"(+1,\", i, \"),\");\n                } else {\n                    print(\"(\", i, \",\", i, \"),\");\n                }\n            } else {\n                if (j < 3) {\n                    print(\"(-1,\", j, \"),\");\n                } else if (j > 9) {\n                    print(\"(+1,\", j, \"),\");\n                } else {\n                    print(\"(\", j, \",\", j, \"),\");\n                }\n            }\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/661","completion":"  arr.sort()\n  if len(arr) < 3 {\n    return 0\n  }\n  var i := 0\n  var j := 1\n  var k := 2\n  var sum := 0\n  while i < k {\n    if arr[i] == arr[j] && arr[i] == arr[k] {\n      sum := sum + arr[i]\n      i := i + 1\n      j := j + 1\n      k := k + 1\n    } else if (arr[i] == arr[j] || arr[j] == arr[k]) {\n      if arr[i] == arr[j] {\n        sum := sum + arr[i]\n        i := i + 1\n      } else {\n        sum := sum + arr[j]\n        j := j + 1\n      }\n      k := k + 1\n    } else {","language":"go"}
{"task_id":"MBXP_GO\/662","completion":"\tr := make(map[string][]int, 0)\n\tfor _, kvs := range map1 {\n\t\tfor _, kv := range kvs {\n\t\t\tsort.lt(r[kv[0]], kv[1]) ? r[kv[0]] := kv[1] : nil\n\t\t}\n\t}\n\treturn r\n}","language":"go"}
{"task_id":"MBXP_GO\/663","completion":"\tif (x == 0) {\n\t\treturn -1;\n\t}\n\tif (y == 0) {\n\t\treturn 0;\n\t}\n\tif (y % x == 0) {\n\t\treturn y;\n\t}\n\tif (x > y) {\n\t\treturn x;\n\t}\n\tif (x % y == 0) {\n\t\treturn x;\n\t}\n\tif (x < y) {\n\t\treturn y;\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/664","completion":"\tfor _, i := range n {\n\t\tif (i % 2 == 0) {\n\t\t\treturn (n + i) \/ 2\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/665","completion":"\tfor _, i := range num_list {\n\t\tnum_list = append(num_list[0..-1], num_list[1..-1])\n\t}\n\treturn num_list\n}","language":"go"}
{"task_id":"MBXP_GO\/666","completion":"    int cnt := 0;\n    for _, v := range string {\n        if v == char {\n            cnt += 1\n        }\n    }\n    return cnt\n}","language":"go"}
{"task_id":"MBXP_GO\/667","completion":"    v0 := 0\n    v1 := 0\n    for _, v := range string {\n        if v in vowels {\n            v0 += 1\n        } else {\n            v1 += 1\n        }\n    }\n    return v0 + v1\n}","language":"go"}
{"task_id":"MBXP_GO\/668","completion":"    for _, _ := range string {\n        if (string[0] == string[1]) {\n            string = string0 + string[0]\n        }\n    }\n    return string\n}","language":"go"}
{"task_id":"MBXP_GO\/669","completion":"\tret, err := regex.Match(Ip, \"(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\")\n\tif err != nil {\n\t\treturn \"Invalid IP address\"\n\t}\n\treturn \"Valid IP address\"\n}","language":"go"}
{"task_id":"MBXP_GO\/670","completion":"\tvar increasing []int = []int { 0 };\n\tfor _, x := range nums {\n\t\tincreasing.push(x) if x > increasing.back() else increasing.pop();\n\t}\n\treturn increasing.empty()\n}","language":"go"}
{"task_id":"MBXP_GO\/671","completion":"\ts int = 0\n\twhile n != 0 {\n\t\ts = s << 1\n\t\tn = n >> 1\n\t}\n\ts\n}","language":"go"}
{"task_id":"MBXP_GO\/672","completion":"    if (num1 > num2) {\n        if (num1 > num3) return num1;\n        else return num3;\n    } else {\n        if (num2 > num3) return num2;\n        else return num3;\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/673","completion":"    for _, v := range list {\n        if v == 9 {\n            v = 0\n        }\n        s := \"\"\n        for _, x := range v {\n            if x == 9 {\n                x = 0\n            }\n            s += (x << 3)\n        }\n        s\n    }\n    1\n}","language":"go"}
{"task_id":"MBXP_GO\/674","completion":"\t\/\/ split words in string0 by spaces and filter out those words which are in string\n\tstring1 := set(string0.split(\" \"))\n\tstring2 := string0\n\tfor _, word := range string1 {\n\t\tstring2 = string2.replace(word, \"\")\n\t}\n\treturn string2\n}","language":"go"}
{"task_id":"MBXP_GO\/675","completion":"    \/\/ Your code goes here\n    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/676","completion":"    regex := \/[a-zA-Z0-9]\/g\n    return regexp_replace(text1, regex, \"\")\n}","language":"go"}
{"task_id":"MBXP_GO\/677","completion":"    \/\/ Check for non-integer values.\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false\n    }\n    \/\/ Check for non-positive values.\n    if (a + b <= c || b + c <= a || c + a <= b) {\n        return false\n    }\n    \/\/ Check for the triangle inequality.\n    if (a + b > c && b + c > a && c + a > b) {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/678","completion":"\tvar res []string\n\tfor i, c := range str1 {\n\t\tif (c == \" \") {\n\t\t\tcontinue\n\t\t}\n\t\tres = append res, c\n\t}\n\treturn string.join(res)\n}","language":"go"}
{"task_id":"MBXP_GO\/679","completion":"    for _, v := range map[string]int {\n        if key == v {\n            return key\n        }\n    }\n    return nil\n}","language":"go"}
{"task_id":"MBXP_GO\/680","completion":"    nums.sort()\n    for i := 0; i < nums.len; i++ {\n        if(nums[i] > nums[i+1]) {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/681","completion":"\tvar k int = 2\n\tfor (var i int = 3; i <= n; i += 2) {\n\t\tfor (var j int = 2; j < i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\tk = i\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (k == i) {\n\t\t\treturn k\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/682","completion":"    return nums1.map { (n, i) => nums2[i] * n }\n}","language":"go"}
{"task_id":"MBXP_GO\/683","completion":"    s int\n    s = (n * n).ToString()\n    s = s.Split('.')\n    s = s[0].Sum(s[0])\n    if s == n {\n        return true\n    } else {\n        return false\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/684","completion":"    var count := 0\n    for _, i := range str {\n        if str[i] == x {\n            count++\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/685","completion":"    var sum i32 = 0\n    var i, p\n    for i := 1; i <= n; i++ {\n        p := 0\n        for i32 := i; i32 > 1; i32 >>= 2 {\n            p += 1\n        }\n        if p == 0 {\n            sum += i\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/686","completion":"    map[string]int = 0\n    for elem in test_tup {\n        map[elem]++\n    }\n    map.map.format { \"%s: %s\", _, _ }\n}","language":"go"}
{"task_id":"MBXP_GO\/687","completion":"\tif (a < b) {\n\t\treturn recur_gcd(b, a)\n\t} else if (a == b) {\n\t\treturn a\n\t} else {\n\t\treturn recur_gcd(a - b, b)\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/688","completion":"\treturn math.Abs(math.Abs(math.Atan2(math.Sin(a), math.Cos(a))) + math.Abs(math.Atan2(math.Sin(b), math.Cos(b))))\n}","language":"go"}
{"task_id":"MBXP_GO\/689","completion":"    jump_arr []int\n    jump_arr[0] = 0\n    jump_arr[1] = 1\n    jump_arr[2] = arr[2]\n    if arr[0] == 0:\n        return 0\n    for i := 3; i < n; i++ {\n        jump_arr[i] = Math.min(jump_arr[i - 1], jump_arr[i - 2]) + 1\n        if (arr[i] > i - 1) {\n            jump_arr[i] = Math.min(jump_arr[i], jump_arr[i - 1] + 1)\n        }\n        if (arr[i] > i - 2) {\n            jump_arr[i] = Math.min(jump_arr[i], jump_arr[i - 2] + 1)\n        }\n        if (arr[i] > i - 3) {\n            jump","language":"go"}
{"task_id":"MBXP_GO\/690","completion":"\ti, j := 0, len(nums)\n\twhile i < j do {\n\t\tyield nums[i] * nums[i+1]\n\t\ti := i + 2\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/691","completion":"\tfor _, value := range test_list {\n\t\tif _, _ == 0 {\n\t\t\treturn [value]\n\t\t}\n\t\tif _, _ == 1 {\n\t\t\tfor i, group_list := range map[int][]int {\n\t\t\t\tif value == group_list[0] {\n\t\t\t\t\tgroup_list.push(value)\n\t\t\t\t\treturn group_list\n\t\t\t\t}\n\t\t\t}\n\t\t\tmap[int][]int{value}\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/692","completion":"\tvar i int\n\ti := 1\n\tfor i := 1; i <= N; i++ {\n\t\tif N % i == 0 {\n\t\t\tif i == N {\n\t\t\t\treturn i\n\t\t\t}\n\t\t\telse if i < N {\n\t\t\t\treturn i % 10\n\t\t\t}\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/693","completion":"  match (text1, \"\\s+\") {\n    m1, text1 = text1.Remove(m.Index)\n    _ = m1\n  }\n  return text1\n}","language":"go"}
{"task_id":"MBXP_GO\/694","completion":"\tvar unique_values []int\n\tunique_values += test_dict[0]\n\tfor _, value := range test_dict {\n\t\tif !unique_values.contains(value) {\n\t\t\tunique_values.push(value)\n\t\t}\n\t}\n\treturn unique_values\n}","language":"go"}
{"task_id":"MBXP_GO\/695","completion":"    for _, i := range test_tup2 {\n        if test_tup1[i] <= test_tup1[i] {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/696","completion":"    if len(list1) != len(list2) {\n        panic \"The two lists must have the same length\"\n    }\n    i := 0\n    for i := 0; i < len(list1); i++ {\n        list3 := make([]interface{}, len(list1[i]))\n        j := 0\n        for j := 0; j < len(list1[i]); j++ {\n            list3[j] := make([]interface{}, len(list2[i]))\n            k := 0\n            for k := 0; k < len(list2[i]); k++ {\n                list3[j][k] := list1[i][j]\n                list3[j][k] = list2[i][k]\n            }\n        }\n        append(list3, []interface{}, i)\n    }\n    return list3\n}","language":"go"}
{"task_id":"MBXP_GO\/697","completion":"    var count  int\n    count := 0\n    for nums := range array_nums {\n        if (nums % 2 == 0) count ++\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/699","completion":"    var len1 int\n    len1 := len(str1)\n    var len2 int\n    len2 := len(str2)\n    var dp int[len1][len2]\n    dp int[len1][len2] = int[len1][len2] {\n        0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3\n    }\n    \/\/ Fill in the rest of the matrix\n    \/\/ for i := len1 - 1; i >= 0; i-- {\n    \/\/     for j := len2 - 1; j >= 0; j-- {\n    \/\/         if str1[i] == str2[j] {\n    \/\/             dp[i][j] = 0\n    \/\/         } else if str1[i] == \"1\" && str2[j] == \"0\" {\n    \/\/             dp[i][j] = dp[","language":"go"}
{"task_id":"MBXP_GO\/700","completion":"\treturn 0\n}","language":"go"}
{"task_id":"MBXP_GO\/701","completion":"    let n := len(arr)\n    let sum := 0\n    let sum_left := 0\n    for i := 1; i < n; i++ {\n        sum += arr[i]\n        sum_left += i < n - 1 ? arr[i - 1] : 0\n        if (sum - sum_left == arr[i] - (i < n - 1 ? arr[i + 1] : 0)) {\n            return i\n        }\n    }\n    return -1\n}","language":"go"}
{"task_id":"MBXP_GO\/702","completion":"  \/\/ k is always less than or equal to n\n  amin := 0\n  amax := arr.len()\n  i := 0\n  for i := 0; i < arr.len(); i++ {\n    if amax-amin <= k {\n      amin = 0\n      amax = arr.len()\n      k = 0\n    }\n    if arr[i] > arr[i+1] {\n      k = 0\n    }\n    if arr[i] < arr[i+1] {\n      k = 1\n      if arr[i+1] - arr[i] <= k {\n        k = arr[i+1] - arr[i]\n        if amin == 0 {\n          amin = arr[i]\n        }\n        if amax == arr.len() {\n          amax = arr[i+1]\n        }\n      }\n    }\n    if k ==","language":"go"}
{"task_id":"MBXP_GO\/703","completion":"    for _, v := range d {\n        if v == x {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/704","completion":"    var sum []float64 = []float64(n)\n    var term []float64 = []float64(n - 1)\n    sum[0] = 0.0\n    term[0] = 1.0\n    for _, i := range sum {\n        sum[i] = sum[i-1] + term[i-1]\n    }\n    for _, i := range sum {\n        sum[i] = 0.5 * (term[i-1] + 1.0) * sum[i-1]\n    }\n    return sum[n-1]\n}","language":"go"}
{"task_id":"MBXP_GO\/705","completion":"\tvar sorted []list{}\n\tfor _, sub in ipairs(list1) {\n\t\tsorted = append(sorted, sort(sub))\n\t}\n\treturn sorted\n}","language":"go"}
{"task_id":"MBXP_GO\/706","completion":"\tif arr1.length < m return false\n\tarr2.sort()\n\tfor _, v := range arr1 {\n\t\tif arr2.length == 0 return true\n\t\tarr2[i, 1] := arr2[0, 1]\n\t\tarr2.pop(0)\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBXP_GO\/707","completion":"    var b int\n    b = 0\n    for i := 1; i <= n; i++ {\n        b += i & -i\n    }\n    return b\n}","language":"go"}
{"task_id":"MBXP_GO\/708","completion":"    res := make([]string, 0)\n    for i := 0; i < string0.Length; i++ {\n        res = append(res, string0[i])\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/709","completion":"    res := make(map[string]*int, 0)\n    for key, val in test_list {\n        res[val] = if !res[val] {\n            res[val] = key\n        } else {\n            res[val]++\n        }\n    }\n    return map[string] {\n        key, val, res[val]\n    }.join!(\": \")\n}","language":"go"}
{"task_id":"MBXP_GO\/710","completion":"    \/\/ TODO: Write your code here\n    \/\/ Use the first element of the tuple as the initial value\n    var initial = test_tup[0]\n    \/\/ Use the last element of the tuple as the last value\n    var last = test_tup[len(test_tup) - 1]\n    var result []int = []int { initial, last }\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/711","completion":"\treturn sum(digits(n), []) == digits(sum(digits(n), []))\n}","language":"go"}
{"task_id":"MBXP_GO\/712","completion":"    \/\/ go to the end of the list\n    for i, v := range list1 {\n        \/\/ if it is in the list of lists\n        if v isa []interface{} {\n            \/\/ go through the list of lists\n            for j, w := range v {\n                \/\/ if we have not already seen this value\n                if j isa []interface{} {\n                    \/\/ add it to the list of lists\n                    list1.insert(i, w)\n                }\n            }\n        }\n    }\n    return list1\n}","language":"go"}
{"task_id":"MBXP_GO\/713","completion":"    # Initialize valid variable to True\n    var valid bool = True\n\n    # Traverse the tuple and check if each item is True or False.\n    for _, item bool <- range test_tup {\n        if !item bool {\n            valid = False\n            return valid\n        }\n    }\n\n    # Return valid value\n    return valid\n}","language":"go"}
{"task_id":"MBXP_GO\/714","completion":"\ti int = 0\n\tfor i=1,n do {\n\t\tif (n % i == 0) {\n\t\t\tif (is_Prime(i)) {\n\t\t\t\ti++\n\t\t\t}\n\t\t}\n\t}\n\treturn i\n}","language":"go"}
{"task_id":"MBXP_GO\/715","completion":"    var ret tuple{}\n    for i, ch in ipairs(test_str) {\n        ret[i] = ch\n    }\n    return ret\n}","language":"go"}
{"task_id":"MBXP_GO\/716","completion":"    if a < 10 {\n        return a\n    }\n    \/\/ Create a grid of the rows of (a - 1) * 2 + 1\n    \/\/ Create a grid of the columns of (a - 1) * 2 + 1\n    \/\/ For each value in the grid, calculate the sum of the surrounding values\n    \/\/ Return the sum of the values in the grid\n}","language":"go"}
{"task_id":"MBXP_GO\/717","completion":"\tvar mu float64\n\tvar sigma float64\n\tmu = mean(data)\n\tsigma = var(data)\n\tsigma = math.sqrt(sigma)\n\treturn sigma \/ mu\n}","language":"go"}
{"task_id":"MBXP_GO\/718","completion":"    if len(list1) == 0 {\n        return []\n    }\n    if len(list1) == 1 {\n        return list1\n    }\n\n    return list1[len(list1) \/ 2] append!(alternate_elements(list1[0..len(list1) - len(list1) \/ 2])) append!(alternate_elements(list1[1..len(list1) - len(list1) \/ 2]))\n}","language":"go"}
{"task_id":"MBXP_GO\/719","completion":"    match {\n        case \"\":\n            \/\/ Nothing matched!\n            return \"Not matched!\"\n        case s:\n            \/\/ Match!\n            return \"Found a match!\"\n        \/\/ Not matched, keep trying...\n    }\n    \/\/ Keep trying...\n}","language":"go"}
{"task_id":"MBXP_GO\/721","completion":"    \/\/ The base case is when the cost matrix is empty\n    if (cost == nil) {\n        return 0\n    }\n    \/\/ The base case is when the cost matrix is 1x1\n    if (len(cost[0]) == 1) {\n        return cost[0][0]\n    }\n    \/\/ Find the max path for the first column\n    max_avg_col := maxAverageOfPath(cost[1..], N - 1)\n    \/\/ Find the max path for the last row\n    max_avg_row := maxAverageOfPath(cost, N - 1)\n    \/\/ Find the max path for the rest of the matrix\n    max_avg := max(max_avg_col, max_avg_row)\n    \/\/ Calculate the max average\n    for i := 0; i < N; i++ {\n        max_avg := max(max_avg, cost[i][0] + (i == N - 1 ? 0 : maxAverageOfPath(","language":"go"}
{"task_id":"MBXP_GO\/722","completion":"\tvar result = {}\n\tfor func(n , v ) {\n\t\tif v[1] >= h and v[0] >= w {\n\t\t\tresult[n] = v\n\t\t}\n\t}\n\treturn result\n}","language":"go"}
{"task_id":"MBXP_GO\/723","completion":"\t\/\/ create a new map\n\tmap map[int]int{0}\n\t\/\/ iterate through the first list\n\tfor _, i := range nums1 {\n\t\t\/\/ set the value of the map to 1 if the value is the same\n\t\tmap[i] = map[i] if i in map else 1\n\t}\n\t\/\/ iterate through the second list\n\tfor _, i := range nums2 {\n\t\t\/\/ check if the value of the second list is in the map\n\t\tif i in map {\n\t\t\t\/\/ increment the value of the map\n\t\t\tmap[i] += 1\n\t\t}\n\t}\n\t\/\/ iterate through the map\n\tfor _, i := range map {\n\t\t\/\/ return the value of the map if the value is 2\n\t\tif map[i] == 2 {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn 0\n}","language":"go"}
{"task_id":"MBXP_GO\/724","completion":"    var powerDigitSum []byte = []byte\n    for (var i = 0; i <= power; i++) {\n        powerDigitSum = add(powerDigitSum, []byte(digits(base, power - i)))\n    }\n    return join(powerDigitSum)\n}","language":"go"}
{"task_id":"MBXP_GO\/725","completion":"    match regex1 {\n        \"(\\w+) \\\"([^\\\"]*)\\\"\",\n        \"(\\w+) '([^']*)'\",\n    }\n\n    _, value1 := regex1.Find(text1)\n    match regex2 {\n        \"([a-z ]+)\",\n    }\n    _, value2 := regex2.Find(value1)\n\n    result := map {|a,b| a,b.Split(\"-\")} (value2)\n    result.Remove(\"\");\n\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/726","completion":"    var result []int = []\n    for _, x, y, z in test_tup {\n        result.append(x * y * z)\n    }\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/727","completion":"    \/\/ split string into [char, number, letter]\n    regex.split(S, \"\\\\d*[a-zA-Z]+\\\\d*\")\n    \/\/ remove unwanted chars\n    regex.replace(S, \"[a-zA-Z]\", \"\")\n    \/\/ join characters into a string again\n    regex.join(split, \"\")\n    \/\/ return string\n    return split\n}","language":"go"}
{"task_id":"MBXP_GO\/728","completion":"    if len(lst1) == 0 || len(lst2) == 0 {\n        return []int{}\n    }\n\n    if lst1[0] + lst2[0] < 0 {\n        return []int{[0]}\n    }\n\n    if lst1[0] + lst2[0] > 0 {\n        return []int{[lst1[0] + lst2[0]]]\n    }\n\n    return sum_list(lst1[1:], lst2[1:]) + [lst1[0] + lst2[0]]\n}\n\n<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"go"}
{"task_id":"MBXP_GO\/729","completion":"    nums3 := map {&func(x,y) int {x+y}}, nums1, nums2\n    return nums3\n}","language":"go"}
{"task_id":"MBXP_GO\/730","completion":"\tfor _, i := range nums {\n\t\tindex_diff := i - 1\n\t\tif nums[index_diff] != nums[i] {\n\t\t\tif nums[index_diff] == nums[index_diff + 1] {\n\t\t\t\tnums[index_diff] = 0\n\t\t\t} else {\n\t\t\t\tnums[index_diff] = nums[index_diff + 1]\n\t\t\t}\n\t\t}\n\t}\n\tfor _, i := range nums {\n\t\tif nums[i] != 0 {\n\t\t\tnums[i]\n\t\t}\n\t}\n\treturn nums\n}","language":"go"}
{"task_id":"MBXP_GO\/731","completion":"\t\/\/ You should use math.hypot instead of math.sqrt\n\tr = math.hypot(r, h)\n\treturn math.pi * (r*r) + math.pi * math.sqrt(r*r - math.pi)\n}","language":"go"}
{"task_id":"MBXP_GO\/732","completion":"    match (text, \/(\\s*|,|\\.)\/, \":\")\n}","language":"go"}
{"task_id":"MBXP_GO\/733","completion":"\tvar i int\n\ti := 0\n\twhile i < len(A) {\n\t\tif A[i] == x {\n\t\t\treturn i\n\t\t}\n\t\t++i\n\t}\n\treturn -1\n}","language":"go"}
{"task_id":"MBXP_GO\/734","completion":"    return if err {\n        return -1\n    }\n    \/\/ Fill this in\n}","language":"go"}
{"task_id":"MBXP_GO\/735","completion":"\treturn (n & (n-1)) | (n ^ (1 << 1));\n}","language":"go"}
{"task_id":"MBXP_GO\/736","completion":"\tlet l := 0\n\tfor i := l; i < a.Length; i++ {\n\t\tif a[i] >= x {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn l\n}","language":"go"}
{"task_id":"MBXP_GO\/737","completion":"    if (string.match(\"^[aeiouAEIOU].*\")) {\n        return \"Valid\"\n    }\n    else {\n        return \"Invalid\"\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/738","completion":"    if (n < 1) {\n        return 0\n    } else {\n        return n \/ (1 - n)\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/739","completion":"\ti int = 0\n\tfor (i := 0; i < n; i++) {\n\t\tif (is_Triangle_number(i) == true) {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn i\n}","language":"go"}
{"task_id":"MBXP_GO\/740","completion":"    d, length := map[int]int{}, len(test_tup)\n    for i := 0; i < length; i++ {\n        d[test_tup[i]] = test_tup[i + 1]\n    }\n    return d\n}","language":"go"}
{"task_id":"MBXP_GO\/741","completion":"\tfor i := 0; i < s.length; i++ {\n\t\tif (s[i] == s[0]) continue\n\t\treturn false\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBXP_GO\/742","completion":"\tvar half_side float64\n\tvar side_sqr float64\n\tvar area float64\n\thalf_side = side \/ 2.0\n\tside_sqr = side * side\n\tarea = (6 * side_sqr - 9 * (half_side ** 2)) \/ 8.0\n\treturn area\n}","language":"go"}
{"task_id":"MBXP_GO\/743","completion":"\t\/\/ 1. Initialize left and right pointer of first half of the list\n\tint left = 0\n\tint right = m\n\n\t\/\/ 2. While we don't get to the end of the list\n\twhile (right <= n - 1) {\n\t\t\/\/ 3. Swap the elements present at both the left and right pointers\n\t\t\/\/ 3.a Swap the first element in the left half with the last element in the right half.\n\t\tlist1[left] = list1[left + 1]\n\t\tlist1[right] = list1[right - 1]\n\n\t\t\/\/ 3.b Increment the left and right pointers\n\t\tleft = left + 1\n\t\tright = right - 1\n\t}\n\n\treturn list1\n}","language":"go"}
{"task_id":"MBXP_GO\/744","completion":"    var i int\n    for i := 0; i < len(test_tup); i++ {\n        if test_tup[i] match {\n            None,\n            _ => true,\n            _ => false\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/745","completion":"    rlist := make([]int, startnum, endnum)\n    for _, i := range rlist {\n        for j := 1; j <= i; j++ {\n            if (i % j) {\n                break\n            }\n        }\n        if (j <= i) {\n            append(rlist, i)\n        }\n    }\n    return rlist\n}","language":"go"}
{"task_id":"MBXP_GO\/746","completion":"    if r % 2 != 0 {\n        \/\/ should return None if input is odd.\n        return None\n    }\n    else if r == a {\n        \/\/ should return None if input and output are equal.\n        return None\n    }\n    else if r < a {\n        \/\/ Should return the area of the sector if it exists.\n        \/\/ Ex: r=9, a=45 => 31.82\n        return (2 * (r - a) + (a + r)) * Math.PI\n    }\n    \/\/ Should return 0 if the input is greater than the output.\n    \/\/ Ex: r=9, a=360 => 0.0\n    return 0.0\n}","language":"go"}
{"task_id":"MBXP_GO\/747","completion":"\tlet Lcs_X_Y_Z := 0\n\tfor i := m to n {\n\t\tfor j := m to n {\n\t\t\tfor k := m to n {\n\t\t\t\tlet x := string(X, i, 1)\n\t\t\t\tlet y := string(Y, j, 1)\n\t\t\t\tlet z := string(Z, k, 1)\n\t\t\t\tif x = y && y = z {\n\t\t\t\t\tLcs_X_Y_Z := Lcs_X_Y_Z + 1\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn Lcs_X_Y_Z\n}","language":"go"}
{"task_id":"MBXP_GO\/748","completion":"    match regex \"\\\\w+\" {\n        if !str1 {\n            return \"\"\n        }\n\n        if length str1 == 1 {\n            return str1.toLower() + \" \"\n        }\n\n        return (str1[0].toLower() + \" \" + str1[1:]).toLower()\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/749","completion":"\ti := 0\n\tfor _, k := range nums_str {\n\t\tfor _, j := range nums_str {\n\t\t\tif i < j {\n\t\t\t\tif nums_str[i] < nums_str[j] {\n\t\t\t\t\tswap(nums_str, i, j)\n\t\t\t\t\tif i != j {\n\t\t\t\t\t\ti++\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn nums_str\n}","language":"go"}
{"task_id":"MBXP_GO\/750","completion":"\tfor _, test_tup := range test_tup {\n\t\ttest_list = append test_list, test_tup\n\t}\n\treturn test_list\n}","language":"go"}
{"task_id":"MBXP_GO\/751","completion":"    if (i >= arr.len) {\n        return true;\n    }\n    \/\/ if the index is larger than 0\n    if (arr[i] > arr[i * 2] || arr[i] > arr[(i * 2) + 1]) {\n        return false;\n    }\n    return check_min_heap(arr, i + 1);\n}","language":"go"}
{"task_id":"MBXP_GO\/752","completion":"    m := 1\n    for {\n        if (m == n) {\n            return m\n        }\n        m := m + 1\n    }\n    return m\n}","language":"go"}
{"task_id":"MBXP_GO\/753","completion":"\tfor key, value := range test_list {\n\t\tif _, _ >= K {\n\t\t\tbreak;\n\t\t}\n\t\tyield &{key, value};\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/754","completion":"    var idx []int = []\n    for i, v1 in enumerate(l1) {\n        for j, v2 in enumerate(l2) {\n            for k, v3 in enumerate(l3) {\n                if i == j && j == k && v1 == v2 && v1 == v3 {\n                    idx << i\n                    break\n                }\n            }\n        }\n    }\n    return idx\n}","language":"go"}
{"task_id":"MBXP_GO\/755","completion":"\tv, l := min(numbers);\n\tif l == nil {\n\t\treturn nil\n\t}\n\tfor _, v, l := range numbers {\n\t\tif l > v {\n\t\t\tv, l\n\t\t}\n\t}\n\treturn v\n}","language":"go"}
{"task_id":"MBXP_GO\/756","completion":"    match := regex.Match(text)\n    if match {\n        if match.Success {\n            if match[1].Length > 0 {\n                return \"Found a match!\"\n            } else if match[1].Length == 0 {\n                return \"Not matched!\"\n            } else {\n                return \"Matching 'b'\"\n            }\n        } else {\n            return \"Matching 'b'\"\n        }\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/757","completion":"    var i int64\n    var pairs int64\n    pairs := 0\n    for i, v := range test_list {\n        pairs += count_pairs(v)\n    }\n    return pairs\n}","language":"go"}
{"task_id":"MBXP_GO\/758","completion":"\tlet map1 := map[interface{}]int{0}\n\tfor i, (_, j) := range list1 {\n\t\tmap1 = append(map1, map1[j] + 1)\n\t}\n\treturn map1\n}","language":"go"}
{"task_id":"MBXP_GO\/759","completion":"    if len(num) > 20 {\n        return false\n    }\n    if num[0] == '-' {\n        return false\n    }\n    for i, char := range num {\n        if (char < '0') {\n            if (char > '9') {\n                return false\n            }\n        } else {\n            if (char > '9') {\n                return false\n            }\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/760","completion":"    arr.sort()\n    if arr[0] != arr[1] {\n        return \"YES\"\n    }\n    for i, j in zip(arr, arr[1:]) {\n        if i != j {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}","language":"go"}
{"task_id":"MBXP_GO\/761","completion":"    if (d > 360 || a < 0 || a > 360) {\n        return nil\n    }\n    d = d % 360\n    d = d * cos(a) \/ sin(a)\n    return d\n}","language":"go"}
{"task_id":"MBXP_GO\/762","completion":"\tmonthnum4 int = 0\n\t\n\tmonthnum4 = monthnum3 + 1\n\tif monthnum4 > 12 {\n\t\tmonthnum4 = 1\n\t}\n\t\n\tif monthnum4 == 3 || monthnum4 == 5 || monthnum4 == 8 || monthnum4 == 10 {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/763","completion":"\tif (n == 0) {\n\t\treturn 0\n\t}\n\tvar minDiff []int = []int{0,n}\n\tfor (i int) {\n\t\tminDiff[0] = i\n\t}\n\tfor (i int) {\n\t\tminDiff[1] = n\n\t}\n\tfor (i int) {\n\t\tif (arr[minDiff[0]] > arr[minDiff[1]]) {\n\t\t\tminDiff[1] = minDiff[0]\n\t\t}\n\t\telse {\n\t\t\tif (arr[minDiff[0]] < arr[minDiff[1]]) {\n\t\t\t\tminDiff[0] = minDiff[1]\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[minDiff[0]] - arr[minDiff[1]]\n}","language":"go"}
{"task_id":"MBXP_GO\/764","completion":"  var count int\n  count := 0\n  for _, ch := range str {\n    if ch.isdigit() {\n      count += 1\n    }\n  }\n  return count\n}","language":"go"}
{"task_id":"MBXP_GO\/765","completion":"\tvar x []int{-5,5}\n\tvar s int\n\ts := 0\n\tfor i := 0; i < n; i++ {\n\t\ts := s + x[i]\n\t}\n\tif s == 0 {\n\t\treturn -1\n\t}\n\tfor i := 0; i < n; i++ {\n\t\ts := s - x[i]\n\t}\n\treturn s\n}","language":"go"}
{"task_id":"MBXP_GO\/766","completion":"\tfor i := range l1 {\n\t\tfor j := i + 1 {\n\t\t\tif j < l1 {\n\t\t\t\tyield (l1[i], l1[j])\n\t\t\t}\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/767","completion":"  arr.sort()\n  i int = 0\n  j int = 1\n  count int = 0\n  while (j < arr.length) {\n    if (arr[i] + arr[j] == sum) {\n      count += 1\n    }\n    if (arr[i] + arr[j] < sum) {\n      i += 1\n    }\n    if (arr[i] + arr[j] > sum) {\n      j += 1\n    }\n  }\n  return count\n}","language":"go"}
{"task_id":"MBXP_GO\/768","completion":"    if (x % 2 == 0) {\n        return false\n    }\n    if ((x + 1) % 2 == 0) {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/769","completion":"    res := []int\n    i := 0\n    while i < len(li1) {\n        if li2.Contains(li1[i]) == false {\n            res = append(res, li1[i])\n        }\n        i = i + 1\n    }\n    i := 0\n    while i < len(li2) {\n        if li1.Contains(li2[i]) == false {\n            res = append(res, li2[i])\n        }\n        i = i + 1\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/770","completion":"\tif (n <= 0) {\n\t\treturn 0;\n\t} else {\n\t\tvar total = 1\n\t\tfor (i := 2; i <= n; i++) {\n\t\t\ttotal += pow(i, 4);\n\t\t}\n\t\treturn total;\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/771","completion":"\tif exp := strconv.Parse(exp, &amp;ParseInt) == nil {\n\t\treturn false\n\t}\n\n\tvar pStack [][]string\n\tvar pStackSize := 0\n\n\twhile (exp != \"\") {\n\t\tvar c := strconv.Unichar(exp)\n\t\tif (pStackSize > 0) {\n\t\t\tvar lastP := pStack[pStackSize-1]\n\t\t\tvar lastC := lastP[lastP.Count()-1]\n\t\t\tif (c == lastC) {\n\t\t\t\tpStack[pStackSize-1] = lastP .. lastP.Chop(\"-\")\n\t\t\t\tif (lastP.Count() == 1) {\n\t\t\t\t\tpStack.RemoveLast()\n\t\t\t\t\tpStackSize -= 1\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\tif (c.IsDigit()) {\n\t\t\tvar num = ParseInt(c)\n\t\t\tpStack.Add(c)\n\t\t\tpStackSize += 1","language":"go"}
{"task_id":"MBXP_GO\/772","completion":"    var i int = 0\n    var res string = \"\"\n    while (i < len(test_str)) {\n        if (len(test_str[i:i+K]) < K) {\n            res = res + test_str[i]\n        }\n        i++\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/773","completion":"\tvar pattern_occurrences string\n\tvar pattern_positions string\n\tpattern_occurrences := \"\"\n\tpattern_positions := \"\"\n\tfor _, p in range(len(pattern)) {\n\t\tpattern_occurrences += text.Length\n\t\tpattern_positions += 0\n\t\tvar first_char = text[0..p]\n\t\tif (first_char == pattern[p]) {\n\t\t\tpattern_occurrences -= first_char.Length\n\t\t\tpattern_positions -= first_char.Position\n\t\t\tfor _, i in range(1..p) {\n\t\t\t\tvar current_char = text[i..p]\n\t\t\t\tif (current_char == pattern[p]) {\n\t\t\t\t\tpattern_occurrences -= current_char.Length\n\t\t\t\t\tpattern_positions -= current_char.Position\n\t\t\t\t\tpattern_positions += i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn []byte(pattern_occurrences),[]byte(pattern_positions)\n}","language":"go"}
{"task_id":"MBXP_GO\/774","completion":"    return fmt.Sprintf \"%s is Valid Email\" if (email.ToLower().StartsWith(\"ankitrai326\") and email.Contains(\".com\") && email.Length > 7 and email.Length < 20) else \"%s is Invalid Email\", email\n}","language":"go"}
{"task_id":"MBXP_GO\/775","completion":"    for _, i := range nums {\n        if nums.slice(i, i + 1).length % 2 == 1 {\n            return False\n        }\n    }\n    return True\n}","language":"go"}
{"task_id":"MBXP_GO\/776","completion":"    var vowels []string\n    vowels = \"aeuio\"\n    var count []int\n    count = 0\n    for i, char in ipairs(test_str) {\n        if i > 0 && char == test_str[i - 1] && !in(vowels, char) {\n            continue\n        }\n        if i < length(test_str) - 1 && char == test_str[i + 1] && !in(vowels, char) {\n            continue\n        }\n        if char in vowels {\n            count += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/777","completion":"\ti int = 0;\n\ts []int = [];\n\tfor i := 0; i < n; i++ {\n\t\ts = s + [arr[i]];\n\t}\n\tfor i := 0; i < n; i++ {\n\t\tif(s[i] != s[i + 1]) {\n\t\t\treturn s[i]\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/778","completion":"  var result []interface{};\n  var count := 0;\n  for i, elem in ipairs(list1) {\n    if elem == count + 1 {\n      count := elem;\n      result[count] = [] , count++;\n    } else {\n      result[count].append(elem);\n      count := elem;\n    }\n  }\n  return result;\n}","language":"go"}
{"task_id":"MBXP_GO\/779","completion":"    var counts := make(map[string]int, 0)\n    for i, v := range list1 {\n        counts[v]++\n    }\n    return counts\n}","language":"go"}
{"task_id":"MBXP_GO\/780","completion":"    \/\/ The list is sorted in the descending order by the first element of the tuple.\n    \/\/ So we will need to iterate the list in reverse order.\n    \/\/ This can be achieved by first creating the list of tuples in reverse order.\n    \/\/ Then sort the tuples in reverse order.\n    \/\/ Then iterate the sorted tuples in reverse order, creating new lists\n    \/\/ of combinations of tuples from the original list.\n    \/\/ In the end, you will have the combinations of tuples that are sorted by\n    \/\/ their first element in descending order.\n    \/\/\n    \/\/ Note:\n    \/\/ The list must be sorted in the descending order by the first element of the tuple.\n    \/\/ The tuples in the list must be sorted by their first element in the descending\n    \/\/ order.\n    \/\/\n    \/\/ If the original list is not sorted, sorting the list will affect the result\n    \/\/ and the result will not be correct.\n    \/\/\n    \/\/ Example:\n    \/\/ >>> find_combinations([(2, 4), (6, 7), (5, 1), ","language":"go"}
{"task_id":"MBXP_GO\/781","completion":"\tvar even bool\n\tvar count int\n\tfor i := 0; i <= n; i++ {\n\t\tcount := 0\n\t\tfor j := 1; j <= math.sqrt(n); j++ {\n\t\t\tif n % j == 0 {\n\t\t\t\tcount = count + 1\n\t\t\t}\n\t\t}\n\t\tif count % 2 == 0 {\n\t\t\teven = true\n\t\t} else {\n\t\t\teven = false\n\t\t}\n\t\tif even == true {\n\t\t\treturn \"Even\"\n\t\t} else {\n\t\t\treturn \"Odd\"\n\t\t}\n\t}\n\treturn \"Even\"\n}","language":"go"}
{"task_id":"MBXP_GO\/782","completion":"    var sum []int\n    var oddSum []int\n    if len(arr) == 0 {\n        return 0\n    }\n    sum = arr [0..-1]\n    oddSum = arr [0..-1]\n    for i := 1; i <= len(arr) - 1; i++ {\n        sum = add(sum, arr[i])\n        if (i % 2 == 0) {\n            oddSum = add(oddSum, arr[i])\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/783","completion":"    var hsv := make([]interface{}[], nil)\n    var min := make([]interface{}[], 0)\n    var max := make([]interface{}[], 0)\n    var delta := make([]interface{}[], 0)\n    var h := make([]interface{}[], 0)\n    var s := make([]interface{}[], 0)\n    var v := make([]interface{}[], 0)\n\n    min = min(min(r, g, b), min(r, g, b))\n    max = max(max(r, g, b), max(r, g, b))\n    delta = max - min\n    s = delta \/ max(255.0, 255.0 - min)\n\n    if r != max {\n        h = 60 * (g - b) \/ delta\n        if h < 0 {\n            h += 360\n        }\n    } else {\n        h = 60 * (g - b) \/ delta","language":"go"}
{"task_id":"MBXP_GO\/784","completion":"    i int\n    even int\n    odd int\n    for i := 0; i < len(list1); i++ {\n        if (i % 2 == 0) {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n    }\n    return even * odd\n}","language":"go"}
{"task_id":"MBXP_GO\/785","completion":"    var nums []int = []\n    for _, v := range test_str.Split \" \" {\n        nums += []int(v)\n    }\n    return nums\n}","language":"go"}
{"task_id":"MBXP_GO\/786","completion":"\ti int := 0\n\tleft int := 0\n\tright int := len(a)\n\twhile i < right {\n\t\tif a[i] >= x {\n\t\t\treturn i\n\t\t}\n\t\tif a[left] >= x {\n\t\t\treturn left + 1\n\t\t}\n\t\ti++\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/787","completion":"    match := 0\n    for i := 0; i < len(text); i++ {\n        if text[i] == \"a\" && match < 3 {\n            match += 1\n        }\n        else if match >= 3 {\n            return \"Found a match!\"\n        }\n        if match == 3 {\n            return \"Not matched!\"\n        }\n    }\n    return \"Not matched!\"\n}","language":"go"}
{"task_id":"MBXP_GO\/788","completion":"\ttest_list = test_list + [test_str]\n\tidx int\n\twhile test_list.len() > 0 {\n\t\tidx := test_list.len() - 1\n\t\ttest_str, test_list[idx:] := \"\", test_list[:idx]\n\t}\n\treturn test_list\n}","language":"go"}
{"task_id":"MBXP_GO\/789","completion":"\tn int = 0\n\tm int = (s - l) \/\/ 2\n\tfor {\n\t\tn int = (n + m) \/\/ 2\n\t}\n\treturn n\n}","language":"go"}
{"task_id":"MBXP_GO\/790","completion":"    var length  int\n    length = len(nums)\n    var i  int\n    for i = 0; i < length; i ++ {\n        if ((nums[i] % 2) != 0)\n            return False\n        else\n            continue\n    }\n    return True\n}","language":"go"}
{"task_id":"MBXP_GO\/791","completion":"    if len(test_tup) == 0 {\n        return []\n    }\n    \/\/ The outer most value is the head value\n    val head = test_tup[0]\n    \/\/ The value to be removed is in the tail of the tuple\n    val tail = test_tup[1:]\n    if len(tail) == 0 {\n        return [head]\n    }\n    \/\/ Remove the tail recursively\n    val sub_tail = remove_nested(tail)\n    \/\/ The head will be removed and the tail will be added to the new\n    \/\/ tail of the tuple\n    return &test_tup[0, 1, 2, 3]\n}","language":"go"}
{"task_id":"MBXP_GO\/792","completion":"\tvar count int\n\tvar size int\n\tcount := 0\n\tsize := 0\n\tfor _, _, size := range input_list {\n\t\tfor _, _, _ := range input_list {\n\t\t\tif size == 2 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n}","language":"go"}
{"task_id":"MBXP_GO\/793","completion":"\tvar start = 0\n\tvar end = n-1\n\tvar mid = 0\n\twhile start<=end {\n\t\tmid = start + end >> 1\n\t\tif arr[mid]<x {\n\t\t\tend = mid-1\n\t\t} else {\n\t\t\tstart = mid+1\n\t\t}\n\t}\n\treturn start\n}","language":"go"}
{"task_id":"MBXP_GO\/794","completion":"    let str = text[1]\n    while (str.length > 0) {\n        if str.substr(0, 1) == \"a\" {\n            str = str.substr(1)\n            continue\n        }\n        if str.substr(str.length - 1, 1) == \"b\" {\n            str = str.substr(0, str.length - 1)\n            continue\n        }\n        return \"Not matched!\"\n    }\n    return \"Found a match!\"\n}","language":"go"}
{"task_id":"MBXP_GO\/796","completion":"  int sum = 0\n  for _, v := range map {\n    sum += v\n  }\n  return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/797","completion":"    \/\/ 1. Define a sum variable and initialize it to zero.\n    \/\/ 2. Iterate from l to r.\n    \/\/ 3. If the number is odd, add it to the sum.\n    \/\/ 4. Return the sum.\n    sum := 0\n    for i int = l; i <= r; i++ {\n        if i % 2 != 0 {\n            sum += i\n        }\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/798","completion":"  ret := 0\n  for _, v := range arr {\n    ret := ret + v\n  }\n  return ret\n}","language":"go"}
{"task_id":"MBXP_GO\/799","completion":"    return (((n << d) | (n >> (32 - d))))\n}","language":"go"}
{"task_id":"MBXP_GO\/800","completion":"\treturn .Join(\n\t\t.Split(\n\t\t\ttext,\n\t\t\t\" \"\n\t\t),\n\t\t\"\"\n\t)\n}","language":"go"}
{"task_id":"MBXP_GO\/801","completion":"    return len(filter {\n        if (x == y && y == z) {\n            1\n        } else {\n            0\n        }\n    })\n}","language":"go"}
{"task_id":"MBXP_GO\/802","completion":"\tcounts []int = []int {0,1};\n\tfor {\n\t\tfor _, _, s := range arr {\n\t\t\tif s == n {\n\t\t\t\treturn counts.size\n\t\t\t}\n\t\t\tcounts.insert(s, counts.remove(s - 1))\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/803","completion":"\tlet num := n\n\tlet sqrt := num ** 0.5\n\treturn sqrt == num ? true : false\n}","language":"go"}
{"task_id":"MBXP_GO\/804","completion":"\tvar count []int = []int\n\tfor _, i := range arr {\n\t\tif (count[i] == 0) count[i] = 1\n\t\telse count[i] += 1\n\t}\n\tvar isEven []bool = []bool\n\tfor _, i := range count {\n\t\tisEven[i] = count[i] % 2 == 0\n\t}\n\treturn any(isEven)\n}","language":"go"}
{"task_id":"MBXP_GO\/805","completion":"    \/\/ Use `go max_sum_list` to complete this function.\n    \/\/ Hint: Think about the algorithm and what you need to return.\n}","language":"go"}
{"task_id":"MBXP_GO\/806","completion":"\t# split the given string on spaces to get words\n\twords := test_str.Split(\" \")\n\t# initialize result\n\tresult := 0\n\t# loop over words\n\tfor w, word := range words {\n\t\t# get number of uppercase letters in word\n\t\tupper_count := len(word.ToLower().Find(\"([A-Z])\"))\n\t\t# if upper_count is greater than result, update result\n\t\tif upper_count > result {\n\t\t\tresult = upper_count\n\t\t}\n\t}\n\t# return the result\n\treturn result\n}","language":"go"}
{"task_id":"MBXP_GO\/807","completion":"  var odd []int = []int{-1}\n  for _, v := range nums {\n    if v % 2 == 0 {\n      odd = append v, odd\n    }\n  }\n  if len(odd) == 0 {\n    return -1\n  }\n  return first(odd)\n}","language":"go"}
{"task_id":"MBXP_GO\/808","completion":"    for _, _, _ := range test_tup {\n        if _, K := _; return true;\n    }\n    return false;\n}","language":"go"}
{"task_id":"MBXP_GO\/809","completion":"\tfor _, val2 := range test_tup2 {\n\t\tfor _, val1 := range test_tup1 {\n\t\t\tif (val1 < val2) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBXP_GO\/810","completion":"    var ret []string\n    if (a == 0) {\n        return ret\n    }\n    var prev = \"\"\n    if (b == 0) {\n        prev = \"q\"\n    }\n    var ret = []\n    for (i := 0; i < a; i++) {\n        for (j := 0; j < b; j++) {\n            for (k := 0; k < c; k++) {\n                for (l := 0; l < d; l++) {\n                    ret.append(prev)\n                }\n            }\n        }\n    }\n    return ret\n}","language":"go"}
{"task_id":"MBXP_GO\/811","completion":"\tfor _, el1 := range test_list1 {\n\t\tfor _, el2 := range test_list2 {\n\t\t\tif !identical(el1, el2) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBXP_GO\/812","completion":"  # Go\n}","language":"go"}
{"task_id":"MBXP_GO\/813","completion":"    var len 0\n    len := len str1\n    return len\n}","language":"go"}
{"task_id":"MBXP_GO\/814","completion":"    \/\/ Your code here\n    result := p*q;\n    return result;\n}","language":"go"}
{"task_id":"MBXP_GO\/815","completion":"\t\/\/ Create an array to store the result\n\tvar result []int = []\n\t\/\/ Create an array to store the counts\n\tvar count []int = []\n\tfor x := 0; x < n; x++ {\n\t\tvar c := count_dnf(arr, x)\n\t\tcount[x] = c\n\t\tfor y := 0; y < c; y++ {\n\t\t\tresult.append(x)\n\t\t}\n\t}\n\tsort(result)\n\tfor x := 0; x < count.length; x++ {\n\t\tif (count[x] != 0) {\n\t\t\tfor y := 0; y < count[x]; y++ {\n\t\t\t\tarr[result[y]] = 0\n\t\t\t}\n\t\t}\n\t}\n\treturn arr\n}","language":"go"}
{"task_id":"MBXP_GO\/816","completion":"\t\n\tfor _, _ := range test_tup {\n\t\t\n\t}\n\t\n\treturn\n}","language":"go"}
{"task_id":"MBXP_GO\/817","completion":"    c := make([]int, len(nums))\n    for i, n := range nums {\n        if m == n {\n            c[i] = n\n        } else if n % m == 0 {\n            c[i] = n \/ m\n        }\n    }\n    return c\n}","language":"go"}
{"task_id":"MBXP_GO\/818","completion":"    int counter := 0\n    for str,i := range string {\n        if (str[i] == str[i].lowercase) counter += 1\n    }\n    return counter\n}","language":"go"}
{"task_id":"MBXP_GO\/819","completion":"    \/\/ Create two hash tables, one for each of the duplicate numbers.\n    var dupTable []int = []int{};\n    var dupTableRev []int = []int{};\n    for i, v := range lists {\n        if dupTable[v] == nil {\n            dupTable[v] = 1;\n        } else {\n            dupTable[v] += 1;\n        }\n\n        if dupTableRev[dupTable[v]] == nil {\n            dupTableRev[dupTable[v]] = v;\n        } else {\n            dupTableRev[dupTable[v]] = dupTableRev[dupTable[v]] + \" \" + v;\n        }\n    }\n\n    \/\/ Now we are ready to go!\n    for i, v := range lists {\n        if dupTable[v] > 1 {\n            \/\/ If the duplicate is more than one, we need to count the number of repetitions.\n            \/\/ The count is stored in the table","language":"go"}
{"task_id":"MBXP_GO\/820","completion":"\tmonthnum1 += 1\n\tif monthnum1 % 28 == 0 {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/821","completion":"  map[string]string result = {}\n  for _, v1 in dict1.iter().unpack() {\n    for _, v2 in dict2.iter().unpack() {\n      if v1 == v2 {\n        result[v1] = v1\n      }\n    }\n  }\n  return result\n}","language":"go"}
{"task_id":"MBXP_GO\/822","completion":"    l := []int{p}\n    r := []int{p}\n    for x, y in pairs(l) {\n        if y >= r[x - 1] {\n            r[x - 1] = y + 1\n        } else {\n            return False\n        }\n    }\n    return True\n}","language":"go"}
{"task_id":"MBXP_GO\/823","completion":"    if (regex.Regex(\"\/^{sample}\/\").match(string0)) {\n        return \"string starts with the given substring\"\n    } else {\n        return \"string doesnt start with the given substring\"\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/824","completion":"    r []int {\n        i := 0\n        while i < len(l) {\n            if i == len(l)-1 || l[i]%2 != 0 {\n                l[i] := 0\n            }\n            i := i + 1\n        }\n    }\n    return r\n}","language":"go"}
{"task_id":"MBXP_GO\/825","completion":"    var result []int\n    for _, i := range list_index {\n        result = append(result, nums[i])\n    }\n    return result\n}","language":"go"}
{"task_id":"MBXP_GO\/826","completion":"  if a + b > c and a + c > b and b + c > a {\n    \"Acute-angled Triangle\"\n  } else if a == b && a == c {\n    \"Right-angled Triangle\"\n  } else {\n    \"Obtuse-angled Triangle\"\n  }\n}","language":"go"}
{"task_id":"MBXP_GO\/827","completion":"  sum := 0\n  \/\/ Go through rows in list1\n  for _, row := range list1 {\n    \/\/ Go through elements in the current row\n    for _, elem := range row {\n      if elem == C {\n        sum += elem\n      }\n    }\n  }\n  return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/828","completion":"\tint alp = 0\n\tint dig = 0\n\tint spl = 0\n\tfor _, v0 in ipairs(string) {\n\t\tv = ord(v0)\n\t\tif v >= 97 and v <= 122 {\n\t\t\talp = alp + 1\n\t\t}\n\t\tif v >= 48 and v <= 57 {\n\t\t\tdig = dig + 1\n\t\t}\n\t\tif v >= 32 and v <= 47 {\n\t\t\tspl = spl + 1\n\t\t}\n\t}\n\treturn [alp, dig, spl]\n}","language":"go"}
{"task_id":"MBXP_GO\/829","completion":"    val frequencies = {}\n    var maxFrequency = 0\n    var secondMostFrequent = \"\"\n\n    for (i, s) in ipairs(input) {\n        frequencies[s] = frequencies[s] + 1 if s in frequencies else 1\n        if frequencies[s] > maxFrequency {\n            secondMostFrequent = s\n            maxFrequency = frequencies[s]\n        }\n    }\n\n    return secondMostFrequent\n}","language":"go"}
{"task_id":"MBXP_GO\/830","completion":"\ta := math.Round(a, digits)\n\treturn a\n}","language":"go"}
{"task_id":"MBXP_GO\/831","completion":"\tint count = 0\n\tfor _, i := range arr {\n\t\tfor _, j := range arr {\n\t\t\tif i != j and i + j == n {\n\t\t\t\tcount += 1\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}","language":"go"}
{"task_id":"MBXP_GO\/832","completion":"    match := regex.Match(input, \"(\\d+)\")\n    if match {\n        val := match[1]\n        return(int(val))\n    }\n    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/833","completion":"    \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/\n    \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/\n    \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/\n    \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ \/\/ ","language":"go"}
{"task_id":"MBXP_GO\/834","completion":"    \/\/ Create a matrix filled with zeroes\n    \/\/ Each cell (i, j) in the matrix has a value of one in the following\n    \/\/      1 2 3\n    \/\/    4 5 6\n    \/\/  7 8 9\n    \/\/ The first row and column has values 1 to n raised to the power of 2, then\n    \/\/ 4 to the power of 2, then 7 to the power of 2, and so on. The last row and\n    \/\/ column has values 1 to n raised to the power of 2, then 4 to the power of\n    \/\/ 2, then 7 to the power of 2, and so on.\n    \/\/ The spiral is formed by filling each row and column from the last row and\n    \/\/ column with the values 1 to n raised to the power of 2.\n    \/\/ The final answer will be returned in a matrix.\n    \/\/ Use recursion!\n\n    var result [][]int\n\n    if n == 1 {\n        result = [[1]]","language":"go"}
{"task_id":"MBXP_GO\/835","completion":"\tvar m1, m2, c1, c2;\n\tm1 = y2 - y1;\n\tm2 = x1 - x2;\n\tc1 = y1 - (m1 * x1);\n\tc2 = (m2 * x2) - x1;\n\treturn (float64) (m1 \/ m2);\n}","language":"go"}
{"task_id":"MBXP_GO\/836","completion":"  local var start = 0\n  local var max_so_far = 0\n  for i := 0; i < size; i++ {\n    local var current = a[i]\n    local var end = i\n    for j := i + 1; j < size; j++ {\n      if (current < 0) {\n        current = 0\n        end++\n      } else {\n        current += a[j]\n      }\n    }\n    if (end - start > max_so_far) {\n      max_so_far = end - start\n    }\n  }\n  return max_so_far\n}","language":"go"}
{"task_id":"MBXP_GO\/837","completion":"    var sum 0\n    var cube 1\n    for {\n        n < 0 {\n            break\n        }\n        if (n == 0) {\n            return 0\n        }\n        cube = cube * n\n    }\n    sum = cube + sum\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/838","completion":"    bin1 := bytes.Buffer.New()\n    bin2 := bytes.Buffer.New()\n\n    for i := 0; i < s1.Length; i++ {\n        bin1 = bin1 + s1[i]\n        bin2 = bin2 + s2[i]\n    }\n\n    if bin1 == bin2 {\n        return 0\n    }\n\n    min_swaps := 10\n\n    for i := 0; i < s1.Length; i++ {\n        bin1 = bin1 - s1[i]\n        bin2 = bin2 - s2[i]\n        \/\/ Find the length of the matching substring in the two strings\n        match_length := string.Length(bin1 ^ bin2)\n        if match_length < min_swaps {\n            min_swaps = match_length\n        }\n    }\n\n    return min_swaps\n}","language":"go"}
{"task_id":"MBXP_GO\/839","completion":"\tvar sorted_tup [][]interface{}\n\tsorted_tup = sort.go (tup)\n\treturn sorted_tup\n}","language":"go"}
{"task_id":"MBXP_GO\/840","completion":"\tif(a*a - 4*b*c < 0) {\n\t\treturn \"No\"\n\t}\n\telse if(a*a - 4*b*c > 0) {\n\t\treturn \"Yes\"\n\t}\n\telse {\n\t\treturn \"None\"\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/841","completion":"    arr.sort()\n    count := 0\n    for i := 0; i < n - 1; i++ {\n        if arr[i] > arr[i+1] {\n            count = count + 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/842","completion":"    arr_count := arr_size\n    arr_len := 0\n    arr_count_index := 0\n    arr_len := len(arr)\n\n    for (i := 0; i < arr_count; i++) {\n        arr_count_index := arr_len - arr[i]\n        arr_count_index := arr_len - arr_count_index\n        if (arr_count_index % 2 == 1) {\n            return arr[i]\n        }\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/844","completion":"\tif (k <= 0)\n\t\treturn 0\n\n\tvar arr []int\n\tarr = []int{k}\n\tfor (i := 0; i <= n - 1; i++) {\n\t\tif (i % 2 == 1) {\n\t\t\tarr = append(arr, i)\n\t\t}\n\t}\n\n\treturn arr[k-1]\n}","language":"go"}
{"task_id":"MBXP_GO\/845","completion":"\tdigits := 1 \/\/ 1 digit has 1 factorial, 2 digits has 2 factorials, etc.\n\twhile n >= 10 {\n\t\tn = math.Factorial(n)\n\t\tdigits = digits + 1\n\t}\n\treturn digits\n}","language":"go"}
{"task_id":"MBXP_GO\/846","completion":"    int platform []int = []int{n}\n    int dep_min []int = []int{n}\n    for (i, v) := range arr {\n        \/\/ sort v\n        arr_min := min(v)\n        \/\/ Find the index of min\n        idx_min := v.IndexOf(arr_min)\n        \/\/ set the value\n        platform[i] = idx_min\n    }\n    \/\/ fill the array\n    for (i, v) := range dep {\n        if (v <= platform) {\n            dep_min[i] = v\n        } else {\n            dep_min[i] = platform[i]\n        }\n    }\n    \/\/ print\n    for (i, v) := range dep_min {\n        print(v, end \"\\n\")\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/847","completion":"    \/\/ Check the length of the input list\n    len := len xs\n    \n    \/\/ if the length is not 1 then return the input list\n    if len != 1 {\n        return xs\n    }\n    \n    \/\/ Copy the first element in the input list to the output list\n    out := make([]int, 1)\n    out[0] := xs[0]\n    \n    \/\/ Return the output list\n    return out\n}","language":"go"}
{"task_id":"MBXP_GO\/848","completion":"\tif (base1 <= 0 || base2 <= 0 || height <= 0) {\n\t\treturn nil\n\t}\n\n\tvar area = (base1 + base2) * height \/ 2\n\n\treturn area\n}","language":"go"}
{"task_id":"MBXP_GO\/849","completion":"  var sum []int\n  sum = 0\n  for i := 1; i <= N; i++ {\n    if N % i == 0 {\n      sum = sum + i\n    }\n  }\n  return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/850","completion":"\tfor (int i = 1; i <= 100; i++) {\n\t\tfor (int j = 1; j <= 100; j++) {\n\t\t\tfor (int k = 1; k <= 100; k++) {\n\t\t\t\tif (a + b > c && a + c > b && b + c > a) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBXP_GO\/851","completion":"\tvar divisors []float64\n\tfor i in range(1, N) {\n\t\tif N % i == 0 {\n\t\t\tdivisors = ([]float64{i})+divisors\n\t\t}\n\t}\n\treturn 0.5 * Sum(divisors)\n}","language":"go"}
{"task_id":"MBXP_GO\/852","completion":"\tvar neg_list []int = []int\n\tfor i,e in ipairs(num_list) {\n\t\tif (e < 0) {\n\t\t\tneg_list = append(neg_list, e)\n\t\t}\n\t}\n\treturn neg_list\n}","language":"go"}
{"task_id":"MBXP_GO\/853","completion":"\tlet sum = 0\n\tfor i := 1; i <= n; i ++ {\n\t\tif n % i == 0 and i % 2 == 1 {\n\t\t\tsum += i\n\t\t}\n\t}\n\treturn sum\n}","language":"go"}
{"task_id":"MBXP_GO\/855","completion":"    if (x % 2 == 0) {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/856","completion":"    arr, n := range arr, n\n    sort arr\n    _, swaps := range arr\n    swaps = 0\n    while !arr.empty {\n        i := arr[0]\n        swaps += 1\n        arr = arr[arr+1:]\n        for j := i + 1 ; arr.count > j ; j++ {\n            if arr[j-1] > arr[j] {\n                arr[j-1], arr[j] := arr[j], arr[j-1]\n            }\n        }\n    }\n    return swaps\n}","language":"go"}
{"task_id":"MBXP_GO\/857","completion":"    var res [][]string\n    for _, v := range list1 {\n        res = append(res, map([]byte, v.decode))\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/858","completion":"\tvar count int\n\tfor i := 0; i < len(input_list); i++ {\n\t\tfor j := 0; j < len(input_list[i]); j++ {\n\t\t\tif(typeof(input_list[i][j]) == \"int\") count++\n\t\t}\n\t}\n\treturn count * count\n}","language":"go"}
{"task_id":"MBXP_GO\/859","completion":"    \/\/ This is the base case.\n    if (my_list.len() == 0) {\n        return []\n    }\n    \/\/ This is the recursive step.\n    \/\/ Since we are taking the head, we need to remove it from the list.\n    sub_list1 my_list[1..]\n    sub_list1 rest(my_list.len() - 1)\n    \/\/ We will keep recursing on the rest of the list.\n    for _, sub_list2 in sub_lists rest {\n        \/\/ We are inserting the head of the list into the new list.\n        \/\/ Note that we are using \"push\" to build the list.\n        \/\/ The head is automatically removed from the list.\n        sub_list2.push(my_list[0])\n        \/\/ Now we will add the rest of the list to the new list.\n        \/\/ Note that we are using \"push\" to build the list.\n        \/\/ The head is automatically removed from the list.\n        sub_list2.push(*rest)\n    ","language":"go"}
{"task_id":"MBXP_GO\/860","completion":"    if (len(string0) == 0) {\n        return \"Accept\"\n    }\n    \/\/ Create a regex pattern to match alphanumeric chars\n    re := regexp(\"[a-zA-Z0-9]+\")\n    if (re.match(string0)) {\n        return \"Accept\"\n    }\n    return \"Discard\"\n}","language":"go"}
{"task_id":"MBXP_GO\/861","completion":"  s := set(map(lambda text []string: func(text, str)string, texts))\n  return map(lambda item []string: item, s)\n}","language":"go"}
{"task_id":"MBXP_GO\/862","completion":"\t\/\/ split into words\n\twords := split(text,\" \")\n\twordCount := make([]int, n)\n\tfor i, word in ipairs(words) {\n\t\tif i < n {\n\t\t\tincr(wordCount[i], 1)\n\t\t}\n\t}\n\tres := make([][]string, n)\n\tfor i, word in ipairs(words) {\n\t\tif i < n {\n\t\t\tres[i] = append(res[i], word)\n\t\t}\n\t}\n\tfor i, words in ipairs(wordCount) {\n\t\tif i < n {\n\t\t\tres[i] = append(res[i], \" \" + str(words))\n\t\t}\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBXP_GO\/863","completion":"    arr_len := len(arr)\n    arr_range := arr_len - 1\n    cur_range := 0\n    max_seq_len := 0\n\n    for i := 0; i <= arr_range; i++ {\n        cur_range := 0\n        for j := i; j <= arr_range; j++ {\n            cur_range++\n            if (arr[j+1] - arr[j] == 1) {\n                max_seq_len = max(cur_range, max_seq_len)\n            } else {\n                cur_range = 0\n            }\n        }\n    }\n\n    return max_seq_len\n}","language":"go"}
{"task_id":"MBXP_GO\/864","completion":"    \/\/ Go code goes here\n}","language":"go"}
{"task_id":"MBXP_GO\/865","completion":"    for _, i := range n {\n        nums += map(fn (num) int { return num }, nums)\n    }\n    return nums\n}","language":"go"}
{"task_id":"MBXP_GO\/866","completion":"\tmonthname2 = monthname2.lower()\n\tif monthname2[0] == \"jan\" || monthname2[0] == \"feb\" || monthname2[0] == \"mar\" || monthname2[0] == \"apr\" || monthname2[0] == \"may\" || monthname2[0] == \"jun\" || monthname2[0] == \"jul\" || monthname2[0] == \"aug\" || monthname2[0] == \"sep\" || monthname2[0] == \"oct\" || monthname2[0] == \"nov\" || monthname2[0] == \"dec\" {\n\t\treturn true\n\t}\n\telse {\n\t\treturn false\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/867","completion":"    arr = sorted(arr)\n\n    n += arr[0]\n\n    arr = arr.slice(1, arr.length)\n\n    return arr.length\n\n}","language":"go"}
{"task_id":"MBXP_GO\/868","completion":"\tif len(a) == 0 {\n\t\treturn 0\n\t}\n\tfor i, v := range a.Split(); i > 0 {\n\t\tif v == \" \" {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn i\n}","language":"go"}
{"task_id":"MBXP_GO\/869","completion":"    for _, list2 := range list1 {\n        if (leftrange < list2[0] || rigthrange > list2[0]) {\n            list1.remove(list2)\n        }\n    }\n    return list1\n}","language":"go"}
{"task_id":"MBXP_GO\/870","completion":"\treturn nums.reduce(func(a, b) (int, int) {\n\t\tif (a > 0) {\n\t\t\treturn a + b\n\t\t} else {\n\t\t\treturn a + b\n\t\t}\n\t}, 0)\n}","language":"go"}
{"task_id":"MBXP_GO\/871","completion":"    \/\/ Check if the given strings are of equal length\n    if len(string1) == len(string2) {\n        \/\/ Check if the first string is equal to the second string\n        if string1 == string2 {\n            return true\n        } else {\n            \/\/ Loop through the first string\n            for i, c1 in string1 {\n                \/\/ Loop through the second string\n                for i, c2 in string2 {\n                    \/\/ Check if the characters at the indices are equal\n                    if c1 != c2 {\n                        \/\/ If they are not equal, return false\n                        return false\n                    }\n                }\n            }\n            \/\/ If none of the characters in the strings are equal, return true\n            return true\n        }\n    } else {\n        \/\/ If the given strings are not of equal length, return false\n        return false\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/872","completion":"    if len(list2) > len(list1) {\n        return false\n    }\n    for i, v2 := range list2 {\n        for j, v1 := range list1 {\n            if v2.Value == v1.Value {\n                if v2.Next == nil {\n                    return true\n                }\n                if v1.Next == nil {\n                    return true\n                }\n                return check_subset(v1.Next, v2.Next)\n            }\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/873","completion":"    if (n < 2) {\n        return n\n    }\n\n    return fibonacci(n-1) + fibonacci(n-2)\n}","language":"go"}
{"task_id":"MBXP_GO\/874","completion":"    if len(str1) + len(str2) == len(str1 + str2) {\n        return true\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/875","completion":"    val min_diff = 99999999999999\n    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list); j++ {\n            diff := int(test_list[i][0]) - int(test_list[j][0])\n            if diff < min_diff {\n                min_diff = diff\n            }\n        }\n    }\n    return min_diff\n}","language":"go"}
{"task_id":"MBXP_GO\/876","completion":"    int lcm = 0\n    int i := 0\n    while (i < x) {\n        if (x % i == 0 && y % i == 0) {\n            lcm = i\n            break\n        }\n        i++\n    }\n    return lcm\n}","language":"go"}
{"task_id":"MBXP_GO\/877","completion":"\tsort.By(\n\t\tstring.CompareTo(&str[0])\n\t)\n}","language":"go"}
{"task_id":"MBXP_GO\/878","completion":"\tfor _, i := range test_tuple {\n\t\tfor _, j := range K {\n\t\t\tif j == i {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBXP_GO\/879","completion":"    match {\n        (text.Length - 1) \/ 2 | 0 + 1 == 0 => \"Not matched!\"\n        (text.Length - 1) \/ 2 | 0 + 1 == 1 => text[0..0] == \"a\" => \"Found a match!\"\n        (text.Length - 1) \/ 2 | 0 + 1 == 2 => \"Not matched!\"\n        (text.Length - 1) \/ 2 | 0 + 1 == 3 => \"Not matched!\"\n        (text.Length - 1) \/ 2 | 0 + 1 == 4 => \"Not matched!\"\n        (text.Length - 1) \/ 2 | 0 + 1 == 5 => \"Not matched!\"\n        (text.Length - 1) \/ 2 | 0 + 1 == ","language":"go"}
{"task_id":"MBXP_GO\/880","completion":"    \/\/ Check that a,b and c are not 0.\n    if (a == 0 && b == 0 && c == 0) {\n        return \"No solutions\"\n    }\n\n    \/\/ Check that the equation has solution.\n    if (a*a + b*b == c*c) {\n        return \"1 solution\"\n    }\n\n    \/\/ Check for the sign of a,b and c.\n    if (a * b * c < 0) {\n        return \"No solutions\"\n    }\n\n    \/\/ Check for the sign of a,b,c and negative values of a,b,c.\n    if (a * b * c == 0 && a == 0 && b < 0 && c < 0) {\n        return \"No solutions\"\n    }\n\n    \/\/ Check for the sign of a,b,c, and negative values of a,b,c.\n    if (a * b *","language":"go"}
{"task_id":"MBXP_GO\/881","completion":"    var even_number []int = []int{1, 2}\n    var odd_number []int = []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    var odd_even []int = even_number + odd_number\n\n    for _, odd in range(0, len(odd_even), 2) {\n        odd_even[odd] = odd_even[odd] + 1\n    }\n\n    for _, even in range(0, len(odd_even), 2) {\n        odd_even[even] = odd_even[even] - 1\n    }\n\n    for _, even in range(0, len(odd_even), 2) {\n        if odd_even[even] != 0 {\n            odd_even[even] = odd_even[even] - 1\n            return odd_even[even]\n        }\n    }\n\n    for _, odd in range","language":"go"}
{"task_id":"MBXP_GO\/882","completion":"    return (2*b) + (2*h)\n}","language":"go"}
{"task_id":"MBXP_GO\/883","completion":"    \/\/ iterate over the list\n    for _, v := range nums {\n        \/\/ check if number is divisible by m and n\n        if (v % m == 0 && v % n == 0) {\n            \/\/ return the number\n            []int {v}\n        }\n    }\n    \/\/ return empty list if no number is divisible\n    []int{}\n}","language":"go"}
{"task_id":"MBXP_GO\/884","completion":"    for _, bit in ipairs(n) {\n        if (bit & l <= r && l <= bit & r) {\n            return false\n        }\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/885","completion":"\t\/\/ 0. check the type of the arguments\n\tif type(str1) != string or type(str2) != string {\n\t\treturn false\n\t}\n\t\/\/ 1. check if the two strings are isomorphic\n\tif str1 == str2 {\n\t\treturn true\n\t}\n\t\/\/ 2. convert the first string to a hash table, so that it can be accessed in O(1) time\n\th := make(map[char]int)\n\tfor i, c := range str1 {\n\t\th[c] = i\n\t}\n\tfor i, c := range str2 {\n\t\tif h[c] == 0 {\n\t\t\treturn false\n\t\t}\n\t\th[c] = 0\n\t}\n\treturn true\n}","language":"go"}
{"task_id":"MBXP_GO\/886","completion":"    sum := 0\n    len := 0\n    for _, v := range numbers {\n        sum += v\n        len++\n    }\n    return sum \/ len\n}","language":"go"}
{"task_id":"MBXP_GO\/887","completion":"    return n & 1 == 1\n}","language":"go"}
{"task_id":"MBXP_GO\/888","completion":"    test_tup2[0][0] = -test_tup1[0][0]\n    for i, e2 in test_tup2[1:] {\n        for j, e1 in test_tup1[i:] {\n            if e1 > e2 {\n                test_tup2[i][j] = test_tup2[i][j] + e1 - e2\n            }\n        }\n    }\n    return test_tup2\n}","language":"go"}
{"task_id":"MBXP_GO\/889","completion":"    if len(lists) == 0 {\n        return []\n    }\n    reverse_list_lists(lists[:2])\n    append(lists[0], lists[1])\n}","language":"go"}
{"task_id":"MBXP_GO\/890","completion":"\tvar i int\n\tvar j int\n\tvar k int\n\n\ti := 0\n\twhile i < n {\n\t\tj := 0\n\t\twhile j < n {\n\t\t\tif arr2[j] < arr1[i] {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t++j\n\t\t}\n\t\tif j == n {\n\t\t\treturn i\n\t\t}\n\t\t++i\n\t}\n\n\treturn -1\n}","language":"go"}
{"task_id":"MBXP_GO\/891","completion":"    return str(A) == str(B)\n}","language":"go"}
{"task_id":"MBXP_GO\/892","completion":"\treturn text.replace(\/ +(?= )\/g, '')\n}","language":"go"}
{"task_id":"MBXP_GO\/893","completion":"\tlet res []interface{}\n\n\tfor i, item := range lst {\n\t\tres = append res, item\n\t}\n\n\treturn res\n}","language":"go"}
{"task_id":"MBXP_GO\/894","completion":"    for _, elem := range test_str.Split(\",\") {\n        elem = elem.Replace(\" \", \"\")\n        if elem.Length > 0 {\n            elem = elem.Replace(\".\", \"\")\n            elem = elem.Replace(\",\", \".\")\n            elem = float64(elem)\n            append(elem)\n        }\n    }\n    return tuple(0)\n}","language":"go"}
{"task_id":"MBXP_GO\/895","completion":"\tlet dp[len(A)][len(A)] = 0\n\tfor idx := 0; idx < len(A); idx++ {\n\t\tfor i := 0; i < len(A) - 1; i++ {\n\t\t\tdp[idx][i + 1] = dp[idx][i] + A[idx]\n\t\t}\n\t}\n\tfor idx := 0; idx < len(A); idx++ {\n\t\tfor i := 0; i < len(A) - 1; i++ {\n\t\t\tif (idx == 0 || idx == i) {\n\t\t\t\tdp[idx][i + 1] = dp[idx][i]\n\t\t\t} else {\n\t\t\t\tdp[idx][i + 1] = Math.max(dp[idx][i], dp[idx - 1][i + 1])\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[len(A) - 1][len(A) - 1]\n}","language":"go"}
{"task_id":"MBXP_GO\/896","completion":"\tsort []int(tuples.[][]int[0].[]int, tuples.[][]int[1].[]int)\n\treturn tuples\n}","language":"go"}
{"task_id":"MBXP_GO\/897","completion":"    val word_list = sentence.split(\" \")\n    for i, word in enumerate(word_list) {\n        if word == word_list[i]\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/898","completion":"    res := []int\n    i := 0\n    for {\n        if i >= n {\n            break\n        }\n        res = append(res, numbers[i])\n        i = i + 1\n    }\n    return res\n}","language":"go"}
{"task_id":"MBXP_GO\/899","completion":"\tarr, arr2 := sort.QuickSort(arr)\n\tfor i := 0; i < n-1; i++ {\n\t\tif arr[i] == arr2[i+1] {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}","language":"go"}
{"task_id":"MBXP_GO\/900","completion":"  var matchNum := string.match(new RegExp(\"^[0-9]*-*[0-9]*\"))\n  if matchNum == nil {\n    return false\n  }\n  var firstNumber = matchNum[0].replace(\/\\D\/, \"\")\n  var secondNumber = matchNum[1].replace(\/\\D\/, \"\")\n  if string0 == firstNumber {\n    return true\n  }\n  return string0 == secondNumber\n}","language":"go"}
{"task_id":"MBXP_GO\/901","completion":"\ti := 1\n\twhile i <= n {\n\t\tif i == 1 {\n\t\t\ti := 1\n\t\t} else {\n\t\t\ti := i + 1\n\t\t}\n\t}\n\treturn i\n}","language":"go"}
{"task_id":"MBXP_GO\/902","completion":"    for key, val in d2.items() {\n        if key in d1 {\n            d1[key] += val\n        } else {\n            d1[key] = val\n        }\n    }\n    return d1\n}","language":"go"}
{"task_id":"MBXP_GO\/903","completion":"\tvar total []int = 0\n\tfor i := 0; i <= n; i++ {\n\t\ttotal += i\n\t}\n\ttotal = ~total\n\treturn total\n}","language":"go"}
{"task_id":"MBXP_GO\/904","completion":"    if x == 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return even_num(x - 2)\n}","language":"go"}
{"task_id":"MBXP_GO\/905","completion":"    if n == 0 {\n        return 0\n    } else {\n        return n * (n + 1) * (2 * n + 1) \/ 6\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/906","completion":"\tvar regex string = \"(?<=\/)[0-9]{4}\/[0-9]{2}\/[0-9]{2}\"\n\tvar m := regex.Match(url)\n\tvar matches [][]string\n\tif (m == nil) {\n\t\tmatches = [][]string{[],[],[]}\n\t\treturn matches\n\t}\n\n\tvar year := regex.Split(m.Value, \"\/\")!.First()\n\tvar month := regex.Split(m.Value, \"\/\")!.First()\n\tvar day := regex.Split(m.Value, \"\/\")!.Last()\n\n\tmatches = [][]string{year,month,day}\n\treturn matches\n}","language":"go"}
{"task_id":"MBXP_GO\/907","completion":"    \/\/ Your code here\n    return []int{}\n}","language":"go"}
{"task_id":"MBXP_GO\/908","completion":"    \/\/ Initialize first element to be fixed\n    var fixed_index = 0\n    var is_fixed = true\n    for (index := 1; index < n; index++) {\n        if (arr[index] < arr[fixed_index]) {\n            is_fixed = false\n        }\n    }\n    if (is_fixed) {\n        return fixed_index\n    }\n    \/\/ If we reach here, we need to reset the fixed index\n    \/\/ We don't know if the array is already sorted.\n    \/\/ We just need to reset the pointer in the middle.\n    fixed_index = n \/ 2\n    is_fixed = true\n    for (index := n \/ 2; index >= 1; index--) {\n        if (arr[index] < arr[fixed_index]) {\n            is_fixed = false\n        }\n    }\n    if (is_fixed) {\n        return fixed_index\n    }\n    fixed_index","language":"go"}
{"task_id":"MBXP_GO\/909","completion":"    n := str(num)\n    l := 0\n    r := n.len() - 1\n    while l < r {\n        m := (l + r) \/ 2\n        if n[m] != n[n.len - m - 1] {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return num - (l + 1)\n}","language":"go"}
{"task_id":"MBXP_GO\/910","completion":"    let a = d.Year - y.Year\n    if a > 0 {\n        return false\n    }\n    let b = d.Month - m.Month\n    if b > 0 {\n        return false\n    }\n    let c = d.Day - d.Day\n    if c > 0 {\n        return false\n    }\n    return true\n}","language":"go"}
{"task_id":"MBXP_GO\/912","completion":"\treturn -0.5 + log(1.0 + n\/m)\n}","language":"go"}
{"task_id":"MBXP_GO\/913","completion":"\tif len(string0) == 0 || len(string) == 0 {\n\t\treturn true\n\t}\n\n\tif string0[len(string0)-1] == '7' {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/914","completion":"    int c0, c1\n    c0 = -1\n    for _, c := range s {\n        if c0 == -1 {\n            c0 = c\n            continue\n        }\n        if c0 == c {\n            return true\n        }\n        c0 = c\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/915","completion":"    \/\/ Create a copy of the input array\n    map [bool]bool {\n        if len(array_nums) == 0 {\n            \/\/ Return an empty array\n            return []bool{}\n        }\n\n        \/\/ Check if the first number is negative or not\n        \/\/ If it's negative, change it to positive\n        \/\/ And put it at the first of the result array\n        if array_nums[0] < 0 {\n            array_nums[0] = -array_nums[0]\n            return [array_nums[0]] + rearrange_numbs(array_nums.slice(1))\n        }\n\n        \/\/ If the first number is positive, just copy it\n        return array_nums + rearrange_numbs(array_nums.slice(1))\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/916","completion":"    var indices []int\n    var sum_to_find []int\n    var count_pairs []int\n    var i int\n    var j int\n    var k int\n\n    sum_to_find = sum\n    indices = []int\n    count_pairs = []int\n    i = 0\n    while i < arr_size {\n        j = 0\n        while j < arr_size {\n            k = 0\n            while k < arr_size {\n                if (i != j && i != k && j != k && A[i] + A[j] + A[k] == sum_to_find) {\n                    count_pairs = append(count_pairs, [i, j, k])\n                }\n                k = k + 1\n            }\n            j = j + 1\n        }\n        i = i + 1\n    }\n\n    if count_pairs.len() != 0 {\n","language":"go"}
{"task_id":"MBXP_GO\/917","completion":"    \/\/ Declare a hash map of keys to counts\n    \/\/ Initialize each key with an empty array (the value will be an empty array)\n    \/\/ Iterate over the string\n    \/\/ If the character is upper case, add it to the hash map as a key\n    \/\/ If the character is lower case, increment the count for the key\n    \/\/ Return 'Not matched!' if no match is found\n    \/\/ Return 'Found a match!' if there is a match\n\n    \/\/ Declare a hash map of keys to counts\n    \/\/ Initialize each key with an empty array (the value will be an empty array)\n    \/\/ Iterate over the string\n    \/\/ If the character is upper case, add it to the hash map as a key\n    \/\/ If the character is lower case, increment the count for the key\n    \/\/ If the key is the first character of the string, return 'Found a match!'\n\n    \/\/ Declare a hash map of keys to counts\n    \/\/ Initialize each key with an empty array (the value will be an empty array)\n    \/\/ Iterate over the string\n    \/\/ If the character","language":"go"}
{"task_id":"MBXP_GO\/918","completion":"\tif (n < 0) return 0;\n\tif (n == 0) return 1;\n\n\tlet C []int = []int{0};\n\n\tfor (s := 0; s < m; s++) {\n\t\tC[s] = coin_change(S, m, n - S[s]);\n\t}\n\n\treturn S.length < m ? 0 : C.max();\n}","language":"go"}
{"task_id":"MBXP_GO\/919","completion":"    var product 0\n    for _, item := range items {\n        product += item * item\n    }\n    return product\n}","language":"go"}
{"task_id":"MBXP_GO\/920","completion":"    result := make([]interface{}, 0)\n\n    for tuple := range test_list {\n        \/\/ Make a copy of tuple so as not to modify the original\n        tuple := make([]interface{}, len(tuple))\n\n        for i := 0; i < len(tuple); i++ {\n            if tuple[i] == nil {\n                \/\/ tuple[i] is nil\n                break\n            } else if tuple[i] != nil {\n                \/\/ tuple[i] is not nil\n                tuple[i] = tuple[i]\n            }\n        }\n\n        \/\/ If there is anything left in tuple then the tuple list is not valid\n        if len(tuple) > 0 {\n            result[len(result)] = tuple\n        }\n    }\n\n    return fmt.Sprintf(\"[{result}]\")\n}","language":"go"}
{"task_id":"MBXP_GO\/921","completion":"    chunk_size := (int)N\n    c := [][]int{n := 0}\n    idx := 0\n    for n := 0; n < len(test_tup); n++ {\n        if n == 0 {\n            c[idx++] = []int{n}\n            c[idx++] = []int{n}\n        } else {\n            if n % chunk_size == 0 {\n                c[idx++] = []int{n}\n            }\n        }\n    }\n    return c\n}","language":"go"}
{"task_id":"MBXP_GO\/922","completion":"    x := make([]int, len(arr))\n    y := make([]int, len(arr))\n\n    \/\/ If any element is negative, set the element to zero.\n    for _, i := range arr {\n        if i < 0 {\n            x[i] = 0\n        } else {\n            x[i] = i\n        }\n    }\n    for _, i := range arr {\n        if i < 0 {\n            y[i] = 0\n        } else {\n            y[i] = i\n        }\n    }\n    for _, i := range arr {\n        if x[i] > y[i] {\n            y[i] = x[i]\n        }\n    }\n    for _, i := range arr {\n        if x[i] < y[i] {\n            y[i] = x[i]\n        }\n    }\n    return &y[","language":"go"}
{"task_id":"MBXP_GO\/923","completion":"    if len(X) < m or len(Y) < n {\n        return -1\n    }\n    var i int, j int, l int\n    l := len(X)\n    i := 0\n    j := 0\n    while i < m and j < n {\n        if X[i] == Y[j] {\n            i += 1\n            j += 1\n        } else if i < l - m + 1 {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    if i - m <= j - n {\n        return i - m + 1\n    } else {\n        return j - n + 1\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/924","completion":"  if (x > y) {\n    return x\n  } else {\n    return y\n  }\n}","language":"go"}
{"task_id":"MBXP_GO\/925","completion":"\tif _, _ >= 0 {\n\t\tif _, _ >= 0 {\n\t\t\treturn nums(_*nums(_+1,_-1))\n\t\t}\n\t}\n\treturn 0\n}","language":"go"}
{"task_id":"MBXP_GO\/926","completion":"    if n < 0 or m < 0 {\n        panic(\"invalid arguments\")\n    }\n    int rencontres [][]int = [][]int{[1][]int{1}, [0][]int{1}}\n    for _ := range m {\n        rencontres = rencontres + [[][]int{rencontres[0][]int{1}}]\n    }\n    rencontres[n][0] = 0\n    for i := range n - 1 {\n        rencontres[i + 1][0] = rencontres[i][0] + 1\n        for j := 0; j < i; j ++ {\n            rencontres[i + 1][j + 1] = rencontres[i + 1][j] + rencontres[i][j]\n        }\n    }\n    return rencontres[n][m]\n}","language":"go"}
{"task_id":"MBXP_GO\/928","completion":"\tfor i := 0; i < strlen(dt); i++ {\n\t\tif (str[i] == '-') {\n\t\t\tif (str[i+1] == '-') {\n\t\t\t\treturn str[i+2] + str[i+3] + str[i] + str[i+1] + str[i+2];\n\t\t\t}\n\t\t\telse if (str[i+2] == '-') {\n\t\t\t\treturn str[i+3] + str[i+4] + str[i] + str[i+1] + str[i+2] + str[i+3]\n\t\t\t}\n\t\t}\n\t}\n\treturn dt\n}","language":"go"}
{"task_id":"MBXP_GO\/929","completion":"    let count := 0\n    for _, y := range tuplex {\n        if y == value {\n            count += 1\n        }\n    }\n    return count\n}","language":"go"}
{"task_id":"MBXP_GO\/930","completion":"    regex := \"^a\\\\d+\"\n    match := regex.Match(text)\n\n    if match {\n        return \"Found a match!\"\n    }\n\n    return \"Not matched!\"\n}","language":"go"}
{"task_id":"MBXP_GO\/931","completion":"\tvar res float64\n\tres = 0.0\n\tfor _ := 1; _ <= number; _ := _ + 1.0 {\n\t\tres = res + (math.pow(_, 3))\n\t}\n\treturn res\n}","language":"go"}
{"task_id":"MBXP_GO\/932","completion":"    map (func (x, i) (if (any (r (= l x) i) { l.pop i })) x)\n    return l\n}","language":"go"}
{"task_id":"MBXP_GO\/933","completion":"    regex := '[a-z][A-Z]?'\n    return match(text, regex)\n        .map{x, s := string.sub(x, 1).gsub('_', string.upper(x))}\n        .join('_')\n}","language":"go"}
{"task_id":"MBXP_GO\/934","completion":"    var i int\n    for i := 0; i < m; i++ {\n        n -= 1\n        if (n < m) return n\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/935","completion":"    var sum []float64\n    sum = 0.0\n    for _, i := range number {\n        var current []float64\n        current = sum + (i * (i + 1)) \/ 2.0\n        sum = current\n    }\n    return sum\n}","language":"go"}
{"task_id":"MBXP_GO\/936","completion":"\tres := make([][]int, len(test_list), len(ord_list))\n\tidx := 0\n\tfor _, elem := range test_list {\n\t\tres[idx] := elem\n\t\tidx := idx + 1\n\t}\n\n\tidx := 0\n\tfor _, elem := range ord_list {\n\t\tres[idx][1] := elem\n\t\tidx := idx + 1\n\t}\n\n\treturn res\n}","language":"go"}
{"task_id":"MBXP_GO\/937","completion":"    r := make(map[char]uint64, 0)\n    for _, v := range str1 {\n        r[v] += 1\n    }\n    max_v := 0\n    for k, v := range r {\n        if v > max_v {\n            max_v = v\n            max_k = k\n        }\n    }\n    return max_k\n}","language":"go"}
{"task_id":"MBXP_GO\/938","completion":"\tA.Sort()\n\tB.Sort()\n\tC.Sort()\n\tvar i int\n\tvar j int\n\tvar k int\n\tvar a int\n\tvar b int\n\tvar c int\n\tvar i := 0\n\tvar j := 0\n\tvar k := 0\n\ta := A[i]\n\tb := B[j]\n\tc := C[k]\n\twhile i < p && j < q && k < r {\n\t\tif a < b && b < c {\n\t\t\tif a < c {\n\t\t\t\treturn &a, i++\n\t\t\t}\n\t\t\tif b < c {\n\t\t\t\treturn &b, j++\n\t\t\t}\n\t\t\treturn &c, k++\n\t\t}\n\t\tif a < c {\n\t\t\treturn &a, i++\n\t\t}\n\t\tif b < c {\n\t\t\treturn &b, j++\n\t\t}\n\t\treturn &c, k++\n\t\tif a < b {\n\t\t\treturn &a, i","language":"go"}
{"task_id":"MBXP_GO\/939","completion":"\tfor idx, model in models {\n\t\tmodels[idx] = sort(model)\n\t}\n\treturn models\n}","language":"go"}
{"task_id":"MBXP_GO\/940","completion":"\tsort.heap(arr)\n\treturn arr\n}","language":"go"}
{"task_id":"MBXP_GO\/941","completion":"\treturn if let i = 0; num[i] match {\n\t\tcase _: Ok(i)\n\t\tcase tuple(_) => {\n\t\t\tlet v := 0\n\t\t\tfor _,_,_,_, _ := range num; _++v\n\t\t\treturn Ok(v)\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/942","completion":"    if len(test_tup) == 0 || len(check_list) == 0 {\n        return false\n    }\n    for _, _ := range test_tup {\n        if test_tup[0] == check_list[0] {\n            return true\n        }\n    }\n    return false\n}","language":"go"}
{"task_id":"MBXP_GO\/944","completion":"    num_int := 0\n    for i := 0; i < len(text); i++ {\n        if i = 0 {\n            num_int = 1\n        } else {\n            if text[i] != text[i-1] {\n                num_int = 1\n            } else {\n                num_int++\n            }\n        }\n    }\n    return num_int\n}","language":"go"}
{"task_id":"MBXP_GO\/946","completion":"    r := make([][]interface{}, s)\n    n := strlen(s)\n    for i := 0; i < n-a+1; i++ {\n        w := substr(s, i, a)\n        if (r == nil) r = append(r, [[w, 1]], [])\n        else {\n            k := 0\n            for j := 0; j < len(r); j++ {\n                if (r[j][0] == w) {\n                    r[j][1] += 1\n                    k = 1\n                }\n            }\n            if (k == 0) r = append(r, [[w, 1]], [])\n        }\n    }\n    \/\/ now that we have the list, lets sort it in descending order\n    r = r.sort([]int, [](a, b) (a[1] - b[1]))\n    return r\n}","language":"go"}
{"task_id":"MBXP_GO\/947","completion":"    len := 0\n    for _, i in range(0, len(list1) - 1) {\n        if len > 0 {\n            len += 1\n        } else {\n            len = 1\n        }\n        if (len(list1[i]) < len(list1[i+1])) {\n            len = len(list1[i])\n        }\n    }\n    return len\n}","language":"go"}
{"task_id":"MBXP_GO\/948","completion":"    \/\/ index is zero-based, so the first item has index 0\n    index = index % len(tup1)\n    return tup1[index]\n}","language":"go"}
{"task_id":"MBXP_GO\/949","completion":"\tvar max_digits = 0\n\tfor _, digits, _ := range test_list {\n\t\tmax_digits = max(max_digits, digits)\n\t}\n\tvar sorted_list []int = make([]int, len(test_list))\n\tfor i, (digits, _, _) := range test_list {\n\t\tsorted_list[i] = sort([]int, 0, digits, max_digits, 0, test_list[i])\n\t}\n\treturn sorted_list\n}","language":"go"}
{"task_id":"MBXP_GO\/950","completion":"    if year < 2000 {\n        return \"FirstOfYear\"\n    }\n\n    if year % 100 != 0 {\n        year = year - (year % 100)\n    }\n\n    if year % 4 == 0 && year % 400 != 0 {\n        return \"Tiger\"\n    }\n\n    if year % 4 == 0 && year % 100 == 0 && year % 400 == 0 {\n        return \"Leo\"\n    }\n\n    if year % 4 == 0 && year % 100 != 0 {\n        return \"Pang\"\n    }\n\n    if year % 400 == 0 {\n        return \"Rooster\"\n    }\n\n    if year % 400 != 0 {\n        return \"Horse\"\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/951","completion":"\tindices := make([]int, len(test_list1))\n\tfor i, v in test_list1 {\n\t\tfor j, w in test_list2 {\n\t\t\tif (i == j) {\n\t\t\t\tindices[i] = 0\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif v == w {\n\t\t\t\tindices[i] = max(indices[i], 1)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn indices\n}","language":"go"}
{"task_id":"MBXP_GO\/952","completion":"    if n < 0 {\n        n = 0\n    }\n    if r < 0 {\n        r = 0\n    }\n    if p < 0 {\n        p = 0\n    }\n\n    \/\/ if (n, r, p) are all 0, we have a base case\n    if (n == 0 && r == 0 && p == 0) {\n        return 1\n    }\n\n    \/\/ we need to iterate through the numbers\n    \/\/ in the range [1..n] such that the value of the\n    \/\/ product is in range [1..p]\n    \/\/ We start with product of 1.\n    int product = 1\n\n    \/\/ we start iterating from 1..n\n    for (i := 1; i <= n; i++) {\n        \/\/ we start iterating from 1..p\n        for (j := 1; j <= p; j++) {\n            \/\/ We only need","language":"go"}
{"task_id":"MBXP_GO\/953","completion":"    if (n == 0) return 0\n    let dp[n][n] := {i0 int, i1 int, i2 int}\n    dp[0][0] := 0\n    for i := 1; i <= n; i++ {\n        for j := i; j <= n; j++ {\n            if (i > j) dp[i][j] := dp[i-1][j]\n            else if (i == j) dp[i][j] := 1\n            else if (ar[i] == ar[j]) dp[i][j] := dp[i-1][j-1] + dp[i-1][j]\n            else dp[i][j] := dp[i-1][j]\n        }\n    }\n    return dp[n][n]\n}","language":"go"}
{"task_id":"MBXP_GO\/954","completion":"    if (sale_amount <= 0) {\n        return nil\n    }\n    if (actual_cost >= sale_amount) {\n        return nil\n    }\n    return actual_cost - sale_amount\n}","language":"go"}
{"task_id":"MBXP_GO\/955","completion":"    var sum := 1\n    for i := 2; i <= n\/2; i++ {\n        if n % i == 0 {\n            sum += i\n            if sum > n {\n                return true\n            }\n        }\n    }\n    return sum > n\n}","language":"go"}
{"task_id":"MBXP_GO\/956","completion":"    \/\/ split the text by uppercase letters, keep the index of the first letter\n    \/\/ and then filter out the 0th index letters\n    re := regex.Split(text, \\&str, \"g\")\n    match := regex.Match(re.First, \"^([A-Z]+).\")\n    if match != nil {\n        return &re.First.Split(match[1], \"\")\n    }\n    return []string\n}","language":"go"}
{"task_id":"MBXP_GO\/957","completion":"\tm int64\n\tm := math.Max(math.UB(n), math.UB(1))\n\treturn math.Trunc(math.Bits(n) - math.Bits(m))\n}","language":"go"}
{"task_id":"MBXP_GO\/958","completion":"    if (num < 1 || num > 3999) {\n        panic \"Parameter must be between 1 and 3999.\"\n    }\n    var digits = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    var arabic = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var roman = \"\"\n    for (var i = 0; i < digits.length; i++) {\n        var count = 0\n        while (num >= arabic[i]) {\n            roman += digits[i]\n            num -= arabic[i]\n            count += 1\n        }\n        if (count > 0) {\n           ","language":"go"}
{"task_id":"MBXP_GO\/959","completion":"    let sum 0 float64\n    for _, v := range lst {\n        sum = sum + v\n    }\n    return sum \/ len(lst)\n}","language":"go"}
{"task_id":"MBXP_GO\/960","completion":"    n = n \/ 2\n    n = (n - 1) * n\n    return n\n}","language":"go"}
{"task_id":"MBXP_GO\/961","completion":"    return 0\n}","language":"go"}
{"task_id":"MBXP_GO\/962","completion":"    var total []int\n    var i int\n    total = []int(r-l+1)\n    for i := l; i <= r; i++ {\n        if i % 2 == 0 {\n            total[i-l] = i\n        }\n    }\n    var totalSum = 0\n    for i := 0; i < total.Length; i++ {\n        totalSum += total[i]\n    }\n    return totalSum\n}","language":"go"}
{"task_id":"MBXP_GO\/963","completion":"  if (x == 0) {\n    return nil\n  }\n  if (y == 0) {\n    return []int{z}\n  }\n  if (x == 1 && y == 1) {\n    return []int{0}\n  }\n  if (z == 0) {\n    return []int{x, y}\n  }\n  if (x == y || y == z || x == z) {\n    return []int{x, y}\n  }\n  if (z == 1) {\n    return []int{x, y, 1}\n  }\n  if (x == z) {\n    return []int{x, 1}\n  }\n  if (x == 1) {\n    return []int{x, 1}\n  }\n  if (y == 1) {\n    return []int{x,","language":"go"}
{"task_id":"MBXP_GO\/964","completion":"    if (len(s) % 2 == 0) {\n        return true\n    } else {\n        return false\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/965","completion":"  var result []string\n  var lastChar []string\n  var upper = true\n  for _, ch := range text {\n    if ch is '_' {\n      upper = false\n      continue\n    }\n    if upper then result.append(ch) else result.append('_'+ch)\n    upper = true\n  }\n  return result\n}","language":"go"}
{"task_id":"MBXP_GO\/966","completion":"\tfor _, _, tup := range tuple1 {\n\t\tif len(tup) == 0 {\n\t\t\ttuple1.pop()\n\t\t}\n\t}\n\treturn tuple1\n}","language":"go"}
{"task_id":"MBXP_GO\/967","completion":"    string1 := \"\"\n    \/\/ write your code here\n    for i := 0; i < string0.len; i++ {\n        c := string0[i]\n        if c.tolower() == \"a\" || c.tolower() == \"e\" || c.tolower() == \"i\" || c.tolower() == \"o\" || c.tolower() == \"u\" {\n            string1 += c\n        }\n    }\n    if string1 == string {\n        return \"accepted\"\n    } else {\n        return \"not accepted\"\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/968","completion":"\tif (A < B) {\n\t\treturn B\n\t}\n\telse if (B == N) {\n\t\treturn A\n\t}\n\treturn floor_Max(A + 1, B, N)\n}","language":"go"}
{"task_id":"MBXP_GO\/969","completion":"    \/\/ If two lists have the same element in the first\n    \/\/ position, combine the lists in the second position\n    \/\/ and return the resulting list\n    var combined_list [][]int;\n    for i, lst := range test_list {\n        for j, x := range lst {\n            if i == 0 {\n                combined_list.add([]int{x});\n            } else {\n                if x[0] == combined_list[i-1][0][0] {\n                    var y := combined_list[i-1][0];\n                    y[1] += x[1];\n                    y[2] = max(y[2], x[2]);\n                    combined_list[i] = y;\n                } else {\n                    combined_list[i] = x;\n                }\n            }\n        }\n    }\n    return combined_list;\n}","language":"go"}
{"task_id":"MBXP_GO\/970","completion":"    if (x < y) {\n        return x\n    } else {\n        return y\n    }\n}","language":"go"}
{"task_id":"MBXP_GO\/971","completion":"  var max := 0\n  for i := 1; i <= n; i++) {\n    for j := 1; j <= n - i; j++) {\n      if (j >= a and j >= b and j >= c) {\n        max = max + 1\n      }\n    }\n  }\n  return max\n}","language":"go"}
{"task_id":"MBXP_GO\/972","completion":"\tfor _, i := range test_tup2 {\n\t\tfor _, j := range test_tup1 {\n\t\t\tyield j, i, j, i\n\t\t}\n\t}\n}","language":"go"}
{"task_id":"MBXP_GO\/973","completion":"    var i int\n    i := 0\n    for {\n        if (i < d) {\n            s = s[i : ] + s[:i]\n            i += 1\n        }\n    }\n    return s\n}","language":"go"}
{"task_id":"MBXP_GO\/974","completion":"    n int = 0\n    i int = 0\n    sum int = 0\n\n    for (i, *n <- A) {\n        for (j, *n <- A[i]) {\n            if (i == j) {\n                sum = sum + n[0]\n            } else {\n                for (k, *n <- A[i]) {\n                    if (i == k || j == k) {\n                        sum = sum + n[0]\n                    }\n                }\n            }\n        }\n        print(sum)\n    }\n    return sum\n\n}","language":"go"}
