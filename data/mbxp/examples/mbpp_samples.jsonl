{"task_id":"MBPP\/1","completion":"\tpass","language":"python"}
{"task_id":"MBPP\/2","completion":"  return","language":"python"}
{"task_id":"MBPP\/3","completion":"    return n%2 != 0 and n%3 != 0 and n%5 != 0","language":"python"}
{"task_id":"MBPP\/4","completion":"  # Your code here\n  from heapq import nlargest\n  return nlargest(n, nums)","language":"python"}
{"task_id":"MBPP\/5","completion":"\tpass","language":"python"}
{"task_id":"MBPP\/6","completion":"    return a^b & ~(a^b) == 0","language":"python"}
{"task_id":"MBPP\/7","completion":"  return re.findall(r\"\\w{4,}|\\S\\S\", text)","language":"python"}
{"task_id":"MBPP\/8","completion":" return list(map(lambda x: x**2, nums))","language":"python"}
{"task_id":"MBPP\/9","completion":"    if str == str[::-1]:\n        return 0\n    else:\n        return 1+min([find_Rotations(str[i:]) for i in range(len(str)) if i > 0 and str[i] != str[i-1]])","language":"python"}
{"task_id":"MBPP\/10","completion":"  return sorted(list1)[:n]","language":"python"}
{"task_id":"MBPP\/11","completion":"    pass","language":"python"}
{"task_id":"MBPP\/12","completion":"    \n    n = len(M)\n    row_sums = []\n    \n    for i in range(n):\n        row_sums.append(sum(M[i]))\n    \n    row_sums = sorted(row_sums)\n    new_M = [None] * n\n\n    for i in range(n):\n        for j in range(n):\n            new_M[i] = M[i][:]\n            new_M[i][j] = M[i][j] + row_sums.index(M[i][j])\n        row_sums.reverse()\n        \n    return new_M","language":"python"}
{"task_id":"MBPP\/13","completion":"  common = {}\n  for word in words:\n    if word in common:\n      common[word] += 1\n    else:\n      common[word] = 1\n  return common","language":"python"}
{"task_id":"MBPP\/14","completion":"    return (l*b*h)\/3","language":"python"}
{"task_id":"MBPP\/15","completion":" return [x for x in text if x.islower()]","language":"python"}
{"task_id":"MBPP\/16","completion":"        \n        import re\n        match = re.search(r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])', text)\n        if match:\n            return \"Found a match!\"\n        else:\n            return \"Not matched!\"","language":"python"}
{"task_id":"MBPP\/17","completion":"  return a * 4","language":"python"}
{"task_id":"MBPP\/18","completion":"\treturn \"\"","language":"python"}
{"task_id":"MBPP\/19","completion":"    count_set = set()\n    for i in arraynums:\n        if i in count_set:\n            return True\n        count_set.add(i)\n    return False","language":"python"}
{"task_id":"MBPP\/20","completion":"\treturn True if x>10 else False","language":"python"}
{"task_id":"MBPP\/21","completion":"    # return [i*n for i in range(1, m+1)]\n    return [i*n for i in range(m, m+1)]","language":"python"}
{"task_id":"MBPP\/22","completion":"    # 1) make a set\n    # 2) check if the length of set is same as the length of the list\n    # 3) if it is return the first element in the list\n    # 4) else check the rest of the elements in the list to find the first duplicate\n    # 5) else return -1\n\n    my_set = set()\n\n    for i in nums:\n        if i in my_set:\n            return i\n        else:\n            my_set.add(i)\n    return -1","language":"python"}
{"task_id":"MBPP\/23","completion":"    list_sum = 0\n    list_max = 0\n    list_2 = []\n    for i in list1:\n        for k in i:\n            list_sum += k\n            list_2.append(k)\n        if list_sum > list_max:\n            list_max = list_sum\n        list_sum = 0\n    return list_max","language":"python"}
{"task_id":"MBPP\/24","completion":"    return sum(2**i * int(b) for i, b in enumerate(reversed(binary)))","language":"python"}
{"task_id":"MBPP\/25","completion":"    if n < 1:\n        return 0\n    prod = 1\n    for i in arr:\n        if i == 1:\n            prod = prod * i\n    return prod","language":"python"}
{"task_id":"MBPP\/26","completion":"  # write your code here\n  if len(test_list) < K:\n    return False\n  for i in range(K):\n    if test_list[i] == None:\n      return False\n  return True","language":"python"}
{"task_id":"MBPP\/27","completion":"    \n    import re\n    \n    for i in list:\n        for m in re.finditer(r'[0-9]', i):\n            i = i.replace(m.group(), '')\n            \n    return list","language":"python"}
{"task_id":"MBPP\/28","completion":"    if (k > n - k):\n        k = n - k\n    sum = 1\n    for i in range(1, k + 1):\n        sum *= (n - i + 1)\n        sum \/= i\n    return int(sum)","language":"python"}
{"task_id":"MBPP\/29","completion":"    temp = []\n    for i in arr:\n        if i in temp:\n            arr.remove(i)\n        else:\n            temp.append(i)\n    return arr[0]","language":"python"}
{"task_id":"MBPP\/30","completion":"    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if s[i:j] == s[i:j][::-1]:\n                count += 1\n    return count","language":"python"}
{"task_id":"MBPP\/31","completion":"    pass","language":"python"}
{"task_id":"MBPP\/32","completion":"    if n == 1 :\n        return n\n    for i in range(2, n+1):\n        if n % i == 0:\n            while n % i == 0:\n                n = n \/ i\n            if n > i:\n                return i","language":"python"}
{"task_id":"MBPP\/33","completion":"    if N == 0:\n        return 0\n    else:\n        return decimal_To_Binary(N \/\/ 2) + (N % 2)","language":"python"}
{"task_id":"MBPP\/34","completion":"    res = ar[0]\n    for i in range(1,N):\n        if ar[i] != res:\n            return res\n        else:\n            res += 1\n    return res","language":"python"}
{"task_id":"MBPP\/35","completion":"  return (n * (n + 1) * (2 * n + 1)) \/\/ 6","language":"python"}
{"task_id":"MBPP\/36","completion":"    N_list = [int(i) for i in str(p)]\n    m = 1\n    for i in N_list :\n        m *= i\n    n = int(str(q)[0])\n    a = m\n    b = a \/ n\n    c = 1\n    for i in str(b) :\n        c *= int(i)\n    d = 1\n    for i in str(c) :\n        d *= int(i)\n    e = d * 10\n    f = int(str(e)[N-1])\n    return(f)","language":"python"}
{"task_id":"MBPP\/37","completion":"    pass","language":"python"}
{"task_id":"MBPP\/38","completion":"    even_num = 0\n    odd_num = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_num = even_num + list1[i]\n        else:\n            odd_num = odd_num + list1[i]\n    return even_num \/ odd_num","language":"python"}
{"task_id":"MBPP\/39","completion":"    # count characters, then go through list to find characters with the same count\n    c = {}\n    for c in S:\n        if c not in c:\n            c[c] = 1\n        else:\n            c[c] += 1\n    \n    # find letters with the same count\n    letters = []\n    for key, value in c.items():\n        if value > 1:\n            letters.append(key)\n    \n    # find letters that are not adjacent\n    if len(letters) % 2 == 1:\n        # return S\n        return S\n    else:\n        # create new string\n        string_out = \"\"\n        for index, letter in enumerate(letters):\n            if index % 2 == 0:\n                string_out += letter\n            else:\n                string_out += letter[::-1]\n        return string_out","language":"python"}
{"task_id":"MBPP\/40","completion":"  from collections import Counter\n  freq_element = Counter(map(tuple, nums))\n  return freq_element","language":"python"}
{"task_id":"MBPP\/41","completion":" return list(filter(lambda x: x % 2 == 0, nums))","language":"python"}
{"task_id":"MBPP\/42","completion":"    l=set()\n    c=0\n    for i in arr:\n        if i in l:\n            c+=i\n        l.add(i)\n    return c","language":"python"}
{"task_id":"MBPP\/43","completion":"  import re\n\n  # TODO: Your code here\n\n  return \"Not matched!\" if re.search(r\"^(\\w+)_(\\w+)$\", text) is None else \"Found a match!\"","language":"python"}
{"task_id":"MBPP\/44","completion":"        result = \"\"\n        index = 0\n        first = text[index]\n        if first in 'python':\n                result = \"Found a match!\"\n                return result\n        else:\n                result = \"Not matched!\"\n                return result","language":"python"}
{"task_id":"MBPP\/45","completion":"  pass","language":"python"}
{"task_id":"MBPP\/46","completion":"  if len(data) == len(set(data)):\n    return False\n  else:\n    return True","language":"python"}
{"task_id":"MBPP\/47","completion":"    if A == B:\n        return A\n    else:\n        if (A%B) == 0:\n            return B\n        else:\n            return compute_Last_Digit((A%B),B)","language":"python"}
{"task_id":"MBPP\/48","completion":"    return n | ~n & -n","language":"python"}
{"task_id":"MBPP\/49","completion":"    result = []\n\n    for i in nums:\n        if i[N] is not None:\n            result.append(i[N])\n    return result","language":"python"}
{"task_id":"MBPP\/50","completion":"    return (min([len(x) for x in input_list]), [x for x in input_list if len(x) == min([len(x) for x in input_list])])","language":"python"}
{"task_id":"MBPP\/51","completion":"  if (x == y and y == z and x == z):\n    return True\n  else:\n    return False","language":"python"}
{"task_id":"MBPP\/52","completion":"  return (b*h)\/2","language":"python"}
{"task_id":"MBPP\/53","completion":"  return \"Equal\" if str[0]==str[-1] else \"Not Equal\"","language":"python"}
{"task_id":"MBPP\/54","completion":"    max_value = max(my_list)\n    length = len(my_list)\n    temp_list = [0]*(max_value+1)\n    for i in range(length):\n        temp_list[my_list[i]] += 1\n    print(temp_list)\n    for j in range(1, max_value+1):\n        temp_list[j] = temp_list[j] + temp_list[j-1]\n    print(temp_list)\n    my_list = [0]*length\n    for k in range(length):\n        my_list[temp_list[my_list[k]]-1] = my_list[k]\n        temp_list[my_list[k]] -= 1\n    return my_list","language":"python"}
{"task_id":"MBPP\/55","completion":"  return (1-r)**(n-1)*a","language":"python"}
{"task_id":"MBPP\/56","completion":"    return n >= 0 and ((n - int(str(n)[::-1])) == 1)","language":"python"}
{"task_id":"MBPP\/57","completion":"    max=0\n    for i in range(n):\n        for j in range(n):\n            temp = arr[i] * 10 + arr[j]\n            if temp > max:\n                max = temp\n    return max","language":"python"}
{"task_id":"MBPP\/58","completion":"    return (x<0 and y>0) or (x>0 and y<0)","language":"python"}
{"task_id":"MBPP\/59","completion":"\treturn (n * (3 * n - 1)) \/ 2","language":"python"}
{"task_id":"MBPP\/60","completion":"\tm = 0\n\tmax_len = 0\n\tfor i in range(n):\n\t\tm = 0\n\t\tfor j in range(i,n):\n\t\t\tif arr[i] != arr[j]:\n\t\t\t\tm += 1\n\t\tif m > max_len:\n\t\t\tmax_len = m\n\treturn max_len","language":"python"}
{"task_id":"MBPP\/61","completion":"    x=0\n    for i in range(0,len(s)-1):\n        if s[i]!=s[i+1]:\n            a=int(s[i])\n            d=len(str(a))\n            if d==n:\n                x+=1\n    return x","language":"python"}
{"task_id":"MBPP\/62","completion":"  pass","language":"python"}
{"task_id":"MBPP\/63","completion":"  pass","language":"python"}
{"task_id":"MBPP\/64","completion":" \n\treturn sorted(subjectmarks, key=lambda item: item[1])<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"python"}
{"task_id":"MBPP\/65","completion":"\tsum = 0\n\tfor elem in data_list:\n\t\tif type(elem) != list:\n\t\t\tsum += elem\n\t\telse:\n\t\t\tsum += recursive_list_sum(elem)\n\treturn sum","language":"python"}
{"task_id":"MBPP\/66","completion":"  count=0\n  for num in list:\n    if num>0:\n      count+=1\n  return count","language":"python"}
{"task_id":"MBPP\/67","completion":"    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return bell_number(n \/\/ 2) * bell_number(n \/\/ 2)\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)","language":"python"}
{"task_id":"MBPP\/68","completion":"    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or \\\n        all(A[i] >= A[i+1] for i in range(len(A)-1))","language":"python"}
{"task_id":"MBPP\/69","completion":"\tif not l:\n\t\treturn True\n\telif not s:\n\t\treturn False\n\telif l[0] == s[0]:\n\t\treturn is_sublist(l[1:], s[1:])\n\telse:\n\t\treturn is_sublist(l[1:], s)","language":"python"}
{"task_id":"MBPP\/70","completion":"  if len(Input) == len(set(map(len, Input))):\n    return 'All tuples have same length'\n  else:\n    return 'All tuples do not have same length'","language":"python"}
{"task_id":"MBPP\/71","completion":"    # comb_sort([5, 15, 37, 25, 79]) --> [5, 15, 25, 37, 79]\n    for i in range(len(nums) - 1, 0, -1):\n        # comb_sort([41, 32, 15, 19, 22]) --> [15, 19, 22, 32, 41]\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums","language":"python"}
{"task_id":"MBPP\/72","completion":"    if n < 0:\n        return False\n    root = int(n**0.5)\n    if root**2 == n:\n        return True\n    else:\n        return False","language":"python"}
{"task_id":"MBPP\/73","completion":"  pass","language":"python"}
{"task_id":"MBPP\/74","completion":"    if len(colors) != len(patterns):\n        return False\n    colors.sort()\n    patterns.sort()\n    return (colors == patterns)","language":"python"}
{"task_id":"MBPP\/75","completion":"  pass","language":"python"}
{"task_id":"MBPP\/76","completion":"    return m*n","language":"python"}
{"task_id":"MBPP\/77","completion":"    return n % 10 == 0","language":"python"}
{"task_id":"MBPP\/78","completion":"    ## Raise a ValueError if input is not an integer\n    if not isinstance(n,int):\n        raise ValueError\n    ## Count Odd integers with set bit as 1\n    count = 0\n    while n:\n        n &= (n-1)\n        count += 1\n    return count","language":"python"}
{"task_id":"MBPP\/79","completion":"    return len(s) % 2 == 1","language":"python"}
{"task_id":"MBPP\/80","completion":"\t# your code here\n\treturn","language":"python"}
{"task_id":"MBPP\/81","completion":"  if (len(test_tup1) != len(test_tup2)):\n    raise ValueError\n  zipped_list = []\n  for idx in range(len(test_tup1)):\n    zipped_list.append((test_tup1[idx], test_tup2[idx]))\n  return zipped_list","language":"python"}
{"task_id":"MBPP\/82","completion":"  from math import pi\n  return 4\/3 * pi * pow(r, 3)","language":"python"}
{"task_id":"MBPP\/83","completion":"    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum)","language":"python"}
{"task_id":"MBPP\/84","completion":"\t# set an initial counter and base cases\n\tcount = 1\n\tnum = 0\n\t\n\twhile count < n:\n\t\tif num == 0:\n\t\t\tnum = 1\n\t\telif num == 1:\n\t\t\tnum = 2\n\t\telse:\n\t\t\tnum = 0\n\t\tcount += 1\n\t\n\treturn num","language":"python"}
{"task_id":"MBPP\/85","completion":"  pass","language":"python"}
{"task_id":"MBPP\/86","completion":"  return 3 * n * n - (2 * n - 1)","language":"python"}
{"task_id":"MBPP\/87","completion":"    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1","language":"python"}
{"task_id":"MBPP\/88","completion":"  d = {}\n  for k in list1:\n    if d.has_key(k):\n      d[k] += 1\n    else:\n      d[k] = 1\n  return d","language":"python"}
{"task_id":"MBPP\/89","completion":"  return min(range(N), key=lambda x: abs(x - N))","language":"python"}
{"task_id":"MBPP\/90","completion":"    \n    if len(list1) == 0:\n        return 0\n    length = 0\n    for i in list1:\n        if len(i) > length:\n            length = len(i)\n    return length","language":"python"}
{"task_id":"MBPP\/91","completion":"   #return str1.find(sub_str) != -1\n\n   if str1.count(sub_str) >= 1:\n       return True\n   else:\n       return False","language":"python"}
{"task_id":"MBPP\/92","completion":"\tn = \"\".join(sorted(n))\n\ti = 1\n\twhile i <= n[0]:\n\t\tif i not in n and n.count(str(i)) == 1:\n\t\t\treturn True\n\t\ti += 1\n\treturn False","language":"python"}
{"task_id":"MBPP\/93","completion":"\tif b == 0:\n\t\treturn 1\n\telse:\n\t\treturn a * power(a, b-1)","language":"python"}
{"task_id":"MBPP\/94","completion":"  min_value = min(test_list, key=lambda x: x[1])[1]\n  min_idx = test_list.index(min(test_list, key=lambda x: x[1]))\n  return test_list[min_idx][0]","language":"python"}
{"task_id":"MBPP\/95","completion":"    length = len(lst)\n    if length == 0:\n        return 0\n    if length == 1:\n        return 1\n    if length == 2:\n        if lst[0] != lst[1]:\n            return 1\n        return 2\n    for i in range(length):\n        for j in range(i+1,length):\n            if lst[i] == lst[j]:\n                continue\n            for k in range(j+1,length):\n                if lst[j] == lst[k]:\n                    continue\n                for m in range(k+1,length):\n                    if lst[k] == lst[m]:\n                        continue\n                    for n in range(m+1,length):\n                        if lst[m] == lst[n]:\n                            continue\n                        return 1+min","language":"python"}
{"task_id":"MBPP\/96","completion":"  count = 0\n  for i in range(1, n + 1):\n    if n % i == 0:\n      count += 1\n  return count","language":"python"}
{"task_id":"MBPP\/97","completion":"    d = {}\n    for i in list1:\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d","language":"python"}
{"task_id":"MBPP\/98","completion":"    pass","language":"python"}
{"task_id":"MBPP\/99","completion":"    return ''.join(str(int(n%2)) if n % 2 else '1' for n in bin(n)[2:])","language":"python"}
{"task_id":"MBPP\/100","completion":"    pass","language":"python"}
{"task_id":"MBPP\/101","completion":"  if len(arr) < 1:\n    return None\n\n  if len(arr) == 1:\n    return arr[0]\n\n  # calculate the sum\n  sum = 0\n  for num in arr:\n    sum += num\n\n  # calculate the index\n  mid_idx = (sum - k)\/2\n\n  if mid_idx >= len(arr):\n    return arr[len(arr)-1]\n  if mid_idx < 0:\n    return arr[0]\n\n  if k % 2 != 0:\n    return arr[int(mid_idx)]\n\n  if arr[int(mid_idx)] > arr[int(mid_idx)+1]:\n    return kth_element(arr[:mid_idx], len(arr[:mid_idx]), k)\n  else:\n    return kth_element(arr[mid_idx+1:], len(arr[mid_idx+1:]), k)","language":"python"}
{"task_id":"MBPP\/102","completion":"        return \"\".join(word.title() for word in word.split(\"_\"))","language":"python"}
{"task_id":"MBPP\/103","completion":"\tpass","language":"python"}
{"task_id":"MBPP\/104","completion":"    new_list = []\n    for list in input_list:\n        new_list.append(sorted(list, key=lambda s: s.lower()))\n    return new_list","language":"python"}
{"task_id":"MBPP\/105","completion":"    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count","language":"python"}
{"task_id":"MBPP\/106","completion":"  pass","language":"python"}
{"task_id":"MBPP\/107","completion":"    return L.count(\"0x\")+R.count(\"0x\")","language":"python"}
{"task_id":"MBPP\/108","completion":"  result = []\n  heapq.heapify(result)\n  # merge the first two lists\n  heapq.heappush(result, (num1[0],num1))\n  heapq.heappush(result, (num2[0],num2))\n  heapq.heappush(result, (num3[0],num3))\n  while result:\n    val = heapq.heappop(result)\n    yield val[1]","language":"python"}
{"task_id":"MBPP\/109","completion":"    n_a = int(n\/2)\n    res = 0\n    for i in range(len(s)):\n        if s[i:n_a+i] != s[i:n_a+i][::-1]:\n            res += 1\n    return res","language":"python"}
{"task_id":"MBPP\/110","completion":"  return","language":"python"}
{"task_id":"MBPP\/111","completion":"    # step 1) get a set of all list elements\n    list_set = set(nestedlist[0])\n    # step 2) for each list in nested list, check if the list elements exist in the set,\n    # and if so, return the element\n    for l in nestedlist[1:]:\n        list_set.intersection_update(set(l))\n    return list(list_set)","language":"python"}
{"task_id":"MBPP\/112","completion":"    return (diameter * 2) + (height * 2)","language":"python"}
{"task_id":"MBPP\/113","completion":"","language":"python"}
{"task_id":"MBPP\/114","completion":"  counter = {}\n  for tup in test_list:\n    if tup in counter:\n      counter[tup] += 1\n    else:\n      counter[tup] = 1\n  return counter","language":"python"}
{"task_id":"MBPP\/115","completion":" pass","language":"python"}
{"task_id":"MBPP\/116","completion":"    pass","language":"python"}
{"task_id":"MBPP\/117","completion":"  pass","language":"python"}
{"task_id":"MBPP\/118","completion":"    return string.split()","language":"python"}
{"task_id":"MBPP\/119","completion":"    if n < 1 :\n        return 0\n    left = 0\n    right = len(arr)\n    while left < right :\n        mid = (left + right ) \/\/ 2\n        if arr[mid] == n and arr[mid - 1] != n :\n            return arr[mid]\n        elif arr[mid] < n :\n            left = mid + 1\n        else :\n            right = mid\n    return 0","language":"python"}
{"task_id":"MBPP\/120","completion":"    # Your code here\n    pass","language":"python"}
{"task_id":"MBPP\/121","completion":"    # first two values are the numbers in the array\n    # we can compare them\n    if A[0] + A[1] < sum:\n        return False\n    # we know A[0] + A[1] == sum, so we need to compare A[2] with sum\n    if A[2] < sum - A[0] - A[1]:\n        return False\n    # we know A[2] < sum - A[0] - A[1], so we need to compare A[3] with sum\n    if A[3] < sum - A[0] - A[1] - A[2]:\n        return False\n    # we know A[3] < sum - A[0] - A[1] - A[2], so we need to compare A[4] with sum\n    if A[4] < sum - A[0] - A[1] - A[2] - A[3]:\n        return False","language":"python"}
{"task_id":"MBPP\/122","completion":"\treturn sum([i for i in range(1, n \/\/ 2 + 1)]) * n + n % 2 + sum([i for i in range(n \/\/ 2 + 1, n + 1)])","language":"python"}
{"task_id":"MBPP\/123","completion":"    sum_of_amicable = 0\n    for i in range(limit):\n        sum_of_divisors = sum_of_divisors_sum(i)\n        sum_of_amicable += sum_of_divisors \n        if sum_of_divisors > i and sum_of_divisors != i and sum_of_divisors == sum_of_amicable:\n            return sum_of_divisors\n    \n    return sum_of_amicable","language":"python"}
{"task_id":"MBPP\/124","completion":"  if abs(a)>1e-7 and abs(b)>1e-7:\n    return atan2(a.imag,a.real)*180.\/pi\n  else:\n    return None","language":"python"}
{"task_id":"MBPP\/125","completion":"\tcount0 = 0\n\tcount1 = 0\n\tfor i in range(n):\n\t\tif string[i] == '0':\n\t\t\tcount0 += 1\n\t\telif string[i] == '1':\n\t\t\tcount1 += 1\n\treturn max(count1, count0)","language":"python"}
{"task_id":"MBPP\/126","completion":"    ## Your logic here\n    ## Please check the corner cases\n    if a == b :\n        return a\n    if a < b :\n        return 0\n    if b == 0:\n        return 0\n    a1,b1 = abs(a),abs(b)\n    d,s = 1,0\n    while True :\n        r = a1 % b1\n        a1 = b1\n        b1 = r\n        if b1 == 0 :\n            break\n        d = d * b1\n        s = s + d\n    if a1 != 0 :\n        s = s + a1\n    return s","language":"python"}
{"task_id":"MBPP\/127","completion":"    return x*y","language":"python"}
{"task_id":"MBPP\/128","completion":"    wordlist = str.split(' ')\n    result = []\n    for word in wordlist:\n        if len(word) > n:\n            result.append(word)\n    return result","language":"python"}
{"task_id":"MBPP\/129","completion":"    if my_matrix[0][0] != 7 or my_matrix[0][2] != 6:\n        return False\n    elif my_matrix[0][1] != 12 or my_matrix[1][1] != 1 or my_matrix[2][1] != 8:\n        return False\n    elif my_matrix[0][3] != 15 or my_matrix[2][2] != 4:\n        return False\n    elif my_matrix[1][0] != 2 or my_matrix[1][2] != 13 or my_matrix[1][3] != 10:\n        return False\n    elif my_matrix[3][0] != 16 or my_matrix[3][2] != 3 or my_matrix[3][3] != 5:\n        return False\n    elif my_matrix[2][0] != 9 or my_matrix[2][1] != 6 or my_matrix[2][3] != 15:\n        return False\n    else:\n        return","language":"python"}
{"task_id":"MBPP\/130","completion":"    counts = {}\n    for i in nums:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return max(counts.items(), key=lambda x: x[1])","language":"python"}
{"task_id":"MBPP\/131","completion":"\tvowels = set(\"aeiouAEIOU\")\n\tnew_str = []\n\tfor i in str1:\n\t\tif i in vowels:\n\t\t\tnew_str.append(i)\n\treturn \"\".join(new_str)","language":"python"}
{"task_id":"MBPP\/132","completion":"  return \"\".join(tup1)","language":"python"}
{"task_id":"MBPP\/133","completion":"  return sum(x for x in nums if x < 0)","language":"python"}
{"task_id":"MBPP\/134","completion":"    if p % 2 == 0:\n        return \"EVEN\"\n    return \"ODD\"","language":"python"}
{"task_id":"MBPP\/135","completion":"\t\n\treturn ((2*n**2)-1)**.5","language":"python"}
{"task_id":"MBPP\/136","completion":"","language":"python"}
{"task_id":"MBPP\/137","completion":"    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count \/ len(nums)","language":"python"}
{"task_id":"MBPP\/138","completion":"    return ((n & (n-1)) == 0) and (n & 0x55555555 != 0)","language":"python"}
{"task_id":"MBPP\/139","completion":"  return 2 * r * 3.14159265359","language":"python"}
{"task_id":"MBPP\/140","completion":"  \"*** YOUR CODE HERE ***\"\n  return","language":"python"}
{"task_id":"MBPP\/141","completion":"    len_nums = len(nums)\n    for index in range(len_nums, 1, -1):\n        pos = 0\n        if index == 1:\n            break\n        for index in range(1, index - 1, 1):\n            if nums[index] > nums[index - 1]:\n                pos = index\n                break\n        # if index is 1, it means that no element is greater than the element \n        # before it. Hence, we have to start with element 0 again.\n        for index in range(index - 1, pos, -1):\n            nums[index], nums[index - 1] = nums[index - 1], nums[index]\n    return nums","language":"python"}
{"task_id":"MBPP\/142","completion":"    cnt = 0\n    for i in list1:\n        if i in list2 and i in list3:\n            cnt += 1\n    return cnt","language":"python"}
{"task_id":"MBPP\/143","completion":"\tcount = 0\n\tfor i in range(len(Input)):\n\t\tif len(Input[i]) > 1:\n\t\t\tcount += 1\n\treturn count","language":"python"}
{"task_id":"MBPP\/144","completion":"    # This solution use the concept of 2-pointer\n    if n < 2:\n        return 0\n    else:\n        i = 0\n        j = 1\n        total_sum = 0\n        while i < n - 1:\n            while j < n:\n                total_sum += abs(arr[i] - arr[j])\n                j += 1\n            i += 1\n            j = i+1\n        return total_sum","language":"python"}
{"task_id":"MBPP\/145","completion":"    abs_arr = []\n    for i in range(n):\n        abs_arr.append(abs(arr[i]))\n    abs_arr.sort()\n    return abs_arr[len(abs_arr)-1] - abs_arr[0]","language":"python"}
{"task_id":"MBPP\/146","completion":"  return sum([ord(character) for character in str1])","language":"python"}
{"task_id":"MBPP\/147","completion":"\t# Base case: if there are no rows or columns, we're done\n\tif m == 0 or n == 0:\n\t\treturn 0\n\t\n\t# Return the maximum path sum of the sub-triangle\n\treturn max(max_path_sum(tri, m - 1, n), max_path_sum(tri, m, n - 1)) + tri[m - 1][n - 1]","language":"python"}
{"task_id":"MBPP\/148","completion":"    sum_of_digits = 0\n    while N:\n        sum_of_digits += N % 10\n        N \/\/= 10\n    return sum_of_digits","language":"python"}
{"task_id":"MBPP\/149","completion":"\tlis = [1 for i in range(n)]\n\tm = 0\n\tfor i in range(n-1):\n\t\tfor j in range(i+1, n):\n\t\t\tif (arr[j] - arr[i]) == 1:\n\t\t\t\tlis[j] = 1\n\t\t\t\tm = max(m, max(lis))\n\n\treturn m","language":"python"}
{"task_id":"MBPP\/150","completion":"    #code here\n    for i in range(a,b):\n        if i%c==0:\n            return True\n    return False","language":"python"}
{"task_id":"MBPP\/151","completion":"    if x%y == 0:\n        return True\n    else:\n        return False","language":"python"}
{"task_id":"MBPP\/152","completion":"    # Start with a sorted array.\n    x_sorted = x[:]\n    return merge(x_sorted)","language":"python"}
{"task_id":"MBPP\/153","completion":"  # -- your code here\n  x = (-b + (b * b - 4 * a * c) ** 0.5) \/ (2 * a)\n  y = (b * -1 + (b * b - 4 * a * c) ** 0.5) \/ (2 * a)\n  return (x, y)","language":"python"}
{"task_id":"MBPP\/154","completion":"    return [x[N] for x in nums]","language":"python"}
{"task_id":"MBPP\/155","completion":"    return n ^ (n & -n)","language":"python"}
{"task_id":"MBPP\/156","completion":"    return tuple((int(x[0]), int(x[1])) for x in tuple_str)","language":"python"}
{"task_id":"MBPP\/157","completion":"    return [[1, str(i)] for i in list1]","language":"python"}
{"task_id":"MBPP\/158","completion":"    # set a counter for the elements to make equal\n    count = 0\n    # loop through the array\n    for i in range(n):\n        # if element is greater than the sum of the elements left, then remove the left element\n        if arr[i] >= (sum(arr)-arr[i]):\n            # subtract the element from the sum\n            arr[i] -= arr[i]\n            # add one to the counter\n            count += 1\n    # check if k is equal to the counter\n    if count == k:\n        # return -1 if the condition is true\n        return -1\n    # else return the count\n    else:\n        return count","language":"python"}
{"task_id":"MBPP\/159","completion":" if month in ('January', 'March', 'May', 'June', 'July', 'August', 'October', 'December'):\n     season = 'winter'\n     if days < 20 or days > 31:\n         season = 'spring'\n     elif days < 32:\n         season = 'summer'\n     elif days < 33:\n         season = 'autumn'\n     return season\n elif month in ('April', 'June', 'September', 'November', 'December'):\n     season = 'spring'\n     if days < 21 or days > 30:\n         season = 'summer'\n     elif days < 31:\n         season = 'autumn'\n     return season\n elif month in ('February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'):\n     season = 'summer'","language":"python"}
{"task_id":"MBPP\/160","completion":"\tif a == b:\n\t\treturn \"No solution\"\n\tx = (n - b) \/\/ (a - b)\n\ty = n - a * x\n\treturn \"x = \" + str(x) + \", y = \" + str(y)","language":"python"}
{"task_id":"MBPP\/161","completion":"    for element in list2:\n        while element in list1:\n            list1.remove(element)\n    return list1","language":"python"}
{"task_id":"MBPP\/162","completion":"  total = 0\n  i = 1\n  while i <= n:\n    total += i\n    i += 2\n  return total","language":"python"}
{"task_id":"MBPP\/163","completion":"  return 0.5*s*(l**2)","language":"python"}
{"task_id":"MBPP\/164","completion":"    return (sum(map(int,list(divisors(num1))))==sum(map(int,list(divisors(num2)))))","language":"python"}
{"task_id":"MBPP\/165","completion":"    dict1 = {chr(i+65):0 for i in range(26)}\n    for i in range(len(str1)):\n        dict1[str1[i]] = dict1.get(str1[i], 0) + 1\n    return dict1","language":"python"}
{"task_id":"MBPP\/166","completion":"    count=0\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2==0:\n                count=count+1\n    return count","language":"python"}
{"task_id":"MBPP\/167","completion":"    if n == 0:\n        return 1\n    else:\n        return 2 ** int(math.ceil(math.log(n, 2)))","language":"python"}
{"task_id":"MBPP\/168","completion":"    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count","language":"python"}
{"task_id":"MBPP\/169","completion":"\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn (n - 1) * (3*n - 1) \/\/ 2","language":"python"}
{"task_id":"MBPP\/170","completion":"    if m < 1 or m > len(list1) or n < 1 or n > len(list1) or m > n:\n        raise ValueError('Invalid indices')\n    else:\n        return sum(list1[m:n])","language":"python"}
{"task_id":"MBPP\/171","completion":"  return (5 * a * (3 * a - 1)) \/ 2","language":"python"}
{"task_id":"MBPP\/172","completion":"  occurences = 0\n  std = \"std\"\n  if std in s:\n    occurences = s.count(std)\n  return occurences","language":"python"}
{"task_id":"MBPP\/173","completion":"","language":"python"}
{"task_id":"MBPP\/174","completion":"    d = {}\n    for i in l:\n        key, value = i\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d","language":"python"}
{"task_id":"MBPP\/175","completion":"        counter = 0\n        str1 = list(str1)\n        for i in str1:\n            if i == '(':\n                counter += 1\n            elif i == ')':\n                counter -= 1\n            if counter < 0:\n                return False\n        if counter == 0:\n            return True\n        else:\n            return False","language":"python"}
{"task_id":"MBPP\/176","completion":"  return a+b+c","language":"python"}
{"task_id":"MBPP\/177","completion":"    if L>R:\n        L,R = R,L\n    gcd = gcd(L,R)\n    L = L\/gcd\n    R = R\/gcd\n    while L % 2 == 0 or R % 2 == 0:\n        gcd = gcd - 1\n        L = L\/gcd\n        R = R\/gcd\n    return (L+R,L*R)","language":"python"}
{"task_id":"MBPP\/178","completion":"  pattern_matches = [pattern in text for pattern in patterns]\n  if all(pattern_matches):\n    return 'Matched!'\n  return 'Not Matched!'","language":"python"}
{"task_id":"MBPP\/179","completion":"\treturn True if x%sum(map(int, str(x)))==0 else False","language":"python"}
{"task_id":"MBPP\/180","completion":" from math import radians, cos, sin, asin, sqrt\n slat=float(slat)\n slon=float(slon)\n elat=float(elat)\n elon=float(elon)\n delta_long = elon - slon\n delta_lat = elat - slat\n a = sin(delta_lat\/2)**2 + cos(slat)*cos(elat)*sin(delta_long\/2)**2\n c = 2*asin(sqrt(a))\n distance = 6371*c\n return distance","language":"python"}
{"task_id":"MBPP\/181","completion":"\tif not arr:\n\t\treturn ''\n\t\n\tfor i in range(len(arr[0])):\n\t\tfor j in range(1, n):\n\t\t\tif len(arr[j]) <= i or arr[j][i] != arr[0][i]:\n\t\t\t\treturn arr[0][:i]\n\t\n\treturn arr[0]","language":"python"}
{"task_id":"MBPP\/182","completion":"  import re\n  uppercase_pattern = re.compile(r\"[A-Z]\")\n  lowercase_pattern = re.compile(r\"[a-z]\")\n  special_char_pattern = re.compile(r\"[$#&*!.<>'\\\"\u00a3%^*()-_=+[]\/?]*\")\n  numb_pattern = re.compile(r\"[0-9]\")\n  return uppercase_pattern.findall(string), lowercase_pattern.findall(string), special_char_pattern.findall(string), numb_pattern.findall(string)","language":"python"}
{"task_id":"MBPP\/183","completion":"  count = 0\n  arr = sorted(arr)\n  for i in range(n - 1):\n    j = i + 1\n    while j < n:\n      if arr[j] - arr[i] == k:\n        count += 1\n      j += 1\n  return count","language":"python"}
{"task_id":"MBPP\/184","completion":" greater_list = []\n for i in list:\n    if i > num:\n        greater_list.append(i)\n return greater_list","language":"python"}
{"task_id":"MBPP\/185","completion":"  x = (-b + (b**2-4*a*c)**0.5)\/(2*a)\n  y = (-b - (b**2-4*a*c)**0.5)\/(2*a)\n  return (x, y)","language":"python"}
{"task_id":"MBPP\/186","completion":"  import re\n  for p in patterns:\n    match = re.search(p, text)\n    if match:\n      return('Matched!')\n    else:\n      return('Not Matched!')","language":"python"}
{"task_id":"MBPP\/187","completion":"    # If one of the strings is empty, the other one can be used as the answer\n    if m == 0 or n == 0:\n        return m + n\n\n    # Find the length of the strings\n    x_length = m + 1\n    y_length = n + 1\n\n    # Initialize 2D array\n    L = [[0 for j in range(y_length)] for i in range(x_length)]\n\n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion. Note that L[i][j] contains length of LCS of X[0..i-1]\n    and Y[0..j-1]\"\"\"\n    for i in range(x_length):\n        for j in range(y_length):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1]","language":"python"}
{"task_id":"MBPP\/188","completion":"    if n < 0 or n > 10**6:\n        return False\n    return True","language":"python"}
{"task_id":"MBPP\/189","completion":"    for i in range(n):\n        if arr[i]>0 and arr[i]<=n:\n            temp = abs(arr[i])\n            arr[temp-1] = -arr[temp-1]\n\n    for i in range(n):\n        if arr[i]>0:\n            return i+1\n\n    return n+1","language":"python"}
{"task_id":"MBPP\/190","completion":"    n=0\n    if (x1 < x2 and y1 < y2):\n        # x == y ==> x + y == 2*x == 2*y\n        # y == 2x ==> x + y == 2*x + 2*y == 4*x + 2*y == 4*y\n        for x in range(x1, x2+1):\n            for y in range(y1, y2+1):\n                if (x + y) % 2 == 0:\n                    n = n + 1\n    else:\n        return 0\n    return n","language":"python"}
{"task_id":"MBPP\/191","completion":"  #if monthname3 == \"February\" or monthname3 == \"June\" or monthname3 == \"April\":\n  #  return False\n  #else:\n  #  return True\n\n  months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n  if monthname3 in months:\n    return 31\n  elif monthname3 == \"April\":\n    return 30\n  else:\n    return 28","language":"python"}
{"task_id":"MBPP\/192","completion":"    letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    numbers = ['0','1','2','3','4','5','6','7','8','9']\n    if any(letter in str for letter in letters) and any(number in str for number in numbers):\n        return True\n    else:\n        return False","language":"python"}
{"task_id":"MBPP\/193","completion":"  \"*** YOUR CODE HERE ***\"\n  test_set = set(test_tup)\n  return tuple(test_set)","language":"python"}
{"task_id":"MBPP\/194","completion":"    # Iterate over digits\n    sum = 0\n    while n > 0:\n        sum += n % 10 * (8 ** (len(str(n)) - 1))\n        n \/\/= 10\n    return sum","language":"python"}
{"task_id":"MBPP\/195","completion":"    for i in range(0,n):\n        if (arr[i]==x):\n            return i\n    return -1","language":"python"}
{"task_id":"MBPP\/196","completion":"  # Solution:\n  k = 0\n  while k < len(test_list):\n    new_list = []\n    for i in test_list:\n      if len(i) != K:\n        new_list.append(i)\n    test_list = new_list\n    k += 1\n  return test_list","language":"python"}
{"task_id":"MBPP\/197","completion":"  pass","language":"python"}
{"task_id":"MBPP\/198","completion":"    return ((a + b) \/ 2) * ((a + b) \/ 2) * (a + b) \/ 4","language":"python"}
{"task_id":"MBPP\/199","completion":"    if n == 0:\n        return 0\n    return 1 << (n-1).bit_length()","language":"python"}
{"task_id":"MBPP\/200","completion":"    i = 0\n    max_i = 0\n    position = []\n    for i in range(len(list1)):\n        if list1[i] >= list1[max_i]:\n            max_i = i\n    position.append(max_i)\n    return position","language":"python"}
{"task_id":"MBPP\/201","completion":"    #return lst in lst\n    if len(set(lst)) == 1:\n        return True\n    else:\n        return False","language":"python"}
{"task_id":"MBPP\/202","completion":" new_str = \"\"\n for char in str1:\n    if not char % 2 == 0:\n       new_str += char","language":"python"}
{"task_id":"MBPP\/203","completion":"    return bin(n1^n2).count('1')","language":"python"}
{"task_id":"MBPP\/204","completion":"    i = 0\n    for i in range(len(s)) :\n        if c == s[i] :\n            break\n    return i + 1","language":"python"}
{"task_id":"MBPP\/205","completion":"  # ------------------------------------------\n  inversions = 0\n  for i in range(len(test_tup) - 1):\n    for j in range(i + 1, len(test_tup)):\n      if test_tup[i] > test_tup[j]:\n        inversions += 1\n  return inversions","language":"python"}
{"task_id":"MBPP\/206","completion":"  new_tuple = ()\n  for element in test_tup:\n    new_tuple = new_tuple + (element, )\n  return new_tuple","language":"python"}
{"task_id":"MBPP\/207","completion":"\tpass","language":"python"}
{"task_id":"MBPP\/208","completion":"  return True if (num[0] == '.' and (len(num)-1)%2==0) else False","language":"python"}
{"task_id":"MBPP\/209","completion":"  heap.append(a)\n  index = len(heap) - 1\n  parent_index = int((index - 1) \/ 2)\n  while index > 0 and heap[parent_index] > heap[index]:\n    tmp = heap[parent_index]\n    heap[parent_index] = heap[index]\n    heap[index] = tmp\n    index = parent_index\n    parent_index = int((index - 1) \/ 2)\n  return heap","language":"python"}
{"task_id":"MBPP\/210","completion":"    return True if re.match(\"[a-zA-Z0-9]*\", string) else False","language":"python"}
{"task_id":"MBPP\/211","completion":"    \n    return bin(n).count('1')","language":"python"}
{"task_id":"MBPP\/212","completion":"    result = 0\n    for i in range(1, n+1):\n        result += i**4\n    return result","language":"python"}
{"task_id":"MBPP\/213","completion":"  # This is your job. \n  str1 = list(test_tup1)\n  str2 = list(test_tup2)\n  str1.extend(str2)\n  return tuple(str1)","language":"python"}
{"task_id":"MBPP\/214","completion":" if radian > 180 or radian < 0:\n  return \"Invalid input!\"\n else:\n  return round((radian * 180) \/ 3.1415, 2)","language":"python"}
{"task_id":"MBPP\/215","completion":"    pass","language":"python"}
{"task_id":"MBPP\/216","completion":"    result = 0\n    for index in range(len(list1)):\n        if list1[index] in list2:\n            result = result + 1\n    if result == len(list1):\n        return True\n    else:\n        return False","language":"python"}
{"task_id":"MBPP\/217","completion":"    \n    # Initializing a hash table\n    hash_table = {}\n    # Traversing through the string\n    for i in range(len(str)):\n        if str[i] in hash_table:\n            return str[i]\n        hash_table[str[i]] = 1\n    \n    return '\\0'","language":"python"}
{"task_id":"MBPP\/218","completion":"    # convert the numbers to strings\n    A = str(A)\n    B = str(B)\n    # find the length of A and B, add them up, and find the difference\n    return len(A) + len(B) - 2 * (len(A) ^ len(B))","language":"python"}
{"task_id":"MBPP\/219","completion":"  return sorted(test_tup)[:K] + sorted(test_tup)[-K:]","language":"python"}
{"task_id":"MBPP\/220","completion":" counter = 0\n result = \"\"\n special_chars = [\" \",\",\",\".\"]\n for char in text:\n  if char in special_chars:\n   counter +=1\n  if counter <= n:\n   result += char\n  else:\n   break\n return result","language":"python"}
{"task_id":"MBPP\/221","completion":"    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return nums[i]","language":"python"}
{"task_id":"MBPP\/222","completion":"  if type(test_tuple[0]) == type(test_tuple[1]) == type(test_tuple[2]):\n    return True\n  else:\n    return False","language":"python"}
{"task_id":"MBPP\/223","completion":"\tmajority = True\n\n\ti = 0\n\tj = n-1\n\twhile majority and i<j:\n\t\tif arr[i] == x:\n\t\t\ti += 1\n\t\telif arr[j] == x:\n\t\t\tj -= 1\n\t\telif arr[i] == arr[j]:\n\t\t\ti += 1\n\t\t\tj -= 1\n\t\telse:\n\t\t\ti += 1\n\t\t\tj -= 1\n\t\tif i == n or j == -1:\n\t\t\tmajority = False\n\n\treturn majority","language":"python"}
{"task_id":"MBPP\/224","completion":"    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count","language":"python"}
{"task_id":"MBPP\/225","completion":"    if low==high:\n        return arr[low]\n    elif low>high:\n        return -1\n    else:\n        mid=(low+high)\/\/2\n        if(mid>0 and arr[mid]<arr[mid-1]):\n            return arr[mid]\n        else:\n            if(arr[high]<arr[mid]):\n                return find_Min(arr,mid+1,high)\n            else:\n                return find_Min(arr,low,mid-1)","language":"python"}
{"task_id":"MBPP\/226","completion":"  odd = []\n  for i in range(len(str)):\n    if i % 2 != 0:\n      odd.append(str[i])\n  return ''.join(odd)","language":"python"}
{"task_id":"MBPP\/227","completion":"      if a<b<c:\n          return a\n      elif b<c<a:\n          return b\n      else:\n          return c","language":"python"}
{"task_id":"MBPP\/228","completion":"    \n    # Your Code Here\n    return 0","language":"python"}
{"task_id":"MBPP\/229","completion":"  arr.sort()\n  return arr","language":"python"}
{"task_id":"MBPP\/230","completion":" return char.join(str1.split())","language":"python"}
{"task_id":"MBPP\/231","completion":"\tif n == 0:\n\t\treturn 0\n\t\n\tif n == 1:\n\t\treturn tri[0][0]\n\t\n\tif n == 2:\n\t\treturn max(tri[0][0], tri[1][0]) + tri[0][1]\n\t\n\ts1 = max(tri[0][0], tri[1][0]) + tri[0][1]\n\ts2 = tri[0][0] + tri[1][1] + tri[0][2]\n\ts3 = max(tri[1][0], tri[2][0]) + tri[1][1]\n\t\n\treturn max(s1, max(s2, s3))","language":"python"}
{"task_id":"MBPP\/232","completion":" maxnum = max(list1)\n if n > len(list1) or n<=0:\n     return None\n else:\n     nnum = []\n     for i in range(len(list1)):\n         if list1[i] == maxnum:\n             nnum.append(list1[i])\n     return nnum","language":"python"}
{"task_id":"MBPP\/233","completion":"  return (3*r*r*h)\/2","language":"python"}
{"task_id":"MBPP\/234","completion":"  return l ** 3","language":"python"}
{"task_id":"MBPP\/235","completion":"    return n & (~n + 1)","language":"python"}
{"task_id":"MBPP\/236","completion":"    ## Python program to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n    # initialize array\n    arr = [0] * N\n    arr[0] = 1\n    # set left side of triangle\n    for i in range(1, N - 1):\n        arr[i] = (arr[i - 1] * (N - i)) \/\/ i\n    # set right side of triangle\n    for i in range(2, N):\n        arr[i] = (arr[i - 1] * (2 * i - 1)) \/\/ (i + 1)\n    # print(arr)\n    # return maximum\n    count = 0\n    for i in range(0, N):\n        if (arr[i] <= K):\n            count += 1\n    return count","language":"python"}
{"task_id":"MBPP\/237","completion":"","language":"python"}
{"task_id":"MBPP\/238","completion":"\tn = len(str)\n\ts = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n+1):\n\t\t\ts += 1\n\t\t\tprint(s,str[i:j])\n\treturn s","language":"python"}
{"task_id":"MBPP\/239","completion":"\treturn 0","language":"python"}
{"task_id":"MBPP\/240","completion":" list3 = []\n list3.append(list1[-1])\n list3.append(list2[-1])\n list1[-1] = list3[-1]\n return list1","language":"python"}
{"task_id":"MBPP\/241","completion":"","language":"python"}
{"task_id":"MBPP\/242","completion":" characters = 0\n for i in str1:\n   characters += 1\n return characters","language":"python"}
{"task_id":"MBPP\/243","completion":"\tres = []\n\tfor i, j in enumerate(lst):\n\t\tif j[0] not in [i[0] for i in res]:\n\t\t\tres.append(j)\n\treturn res","language":"python"}
{"task_id":"MBPP\/244","completion":"    \n    sq = int(N**0.5)\n    if sq*sq == N:\n        return sq+1\n    else:\n        return sq","language":"python"}
{"task_id":"MBPP\/245","completion":"\tif n < 2:\n\t\traise ValueError(\"Subsequence size is too small\")\n\tif n > len(arr):\n\t\traise ValueError(\"Subsequence size is too big\")\n\n\tcurrent_sum = 0\n\tmax_sum = 0\n\n\tfor i in range(0, n - 2):\n\t\tcurrent_sum = 0\n\t\tfor j in range(i + 1, n - 1):\n\t\t\tcurrent_sum += arr[j]\n\t\t\tmax_sum = max(max_sum, current_sum)\n\treturn max_sum","language":"python"}
{"task_id":"MBPP\/246","completion":"    start = 0.0\n    end = number\n    result = 0.0\n    while start <= end:\n        middle = (start + end) \/ 2\n        result = middle ** 2\n        if result == number:\n            return middle\n        elif result < number:\n            start = middle + 1\n        else:\n            end = middle - 1\n    return result","language":"python"}
{"task_id":"MBPP\/247","completion":"\tglobal dp\n\n\tif not dp:\n\t\tdp = [[0 for j in range(len(str))] for i in range(len(str))]\n\n\tif str == \"\":\n\t\treturn 0\n\n\tfor i in range(len(str)):\n\t\tdp[i][i] = 1\n\n\tfor i in range(len(str) - 2, -1, -1):\n\t\tfor j in range(i + 2, len(str)):\n\t\t\tif str[i] == str[j]:\n\t\t\t\tif j - i <= 2:\n\t\t\t\t\tdp[i][j] = 2\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n\treturn dp[0][len(str) - 1]","language":"python"}
{"task_id":"MBPP\/248","completion":"  return 1.0 \/ n + harmonic_sum(n-1) if n > 0 else 0","language":"python"}
{"task_id":"MBPP\/249","completion":" #print array_nums1\n #print array_nums2\n def intersection(array1, array2):\n     return list(set(array1) & set(array2))\n if __name__ == '__main__':\n     array_nums1 = [1, 2, 3, 5, 7, 8, 9, 10]\n     array_nums2 = [1, 2, 4, 8, 9]\n     print(intersection(array_nums1,array_nums2))\n     array_nums1 = [1, 2, 3, 5, 7, 8, 9, 10]\n     array_nums2 = [3,5,7,9]\n     print(intersection(array_nums1,array_nums2))\n     array_nums1 = [1, 2, 3, 5, 7, 8, 9, 10]\n     array_nums2 = [10,20,30,40]\n     print","language":"python"}
{"task_id":"MBPP\/250","completion":"    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count","language":"python"}
{"task_id":"MBPP\/251","completion":"","language":"python"}
{"task_id":"MBPP\/252","completion":"  return (numbers*numbers,0)","language":"python"}
{"task_id":"MBPP\/253","completion":"    return len([x for x in list1 if isinstance(x, int)])","language":"python"}
{"task_id":"MBPP\/254","completion":" def words(text):\n    ans = []\n    for word in text.split():\n        if word[0] in ['a','e']:\n            ans.append(word)\n    return ans\n \n words(text)","language":"python"}
{"task_id":"MBPP\/255","completion":"    def powerset(s):\n        return [s[:i] + [s[i]] + s[i + 1:] for i in range(len(s))]\n\n    # TODO: YOUR CODE HERE\n    return powerset(l)","language":"python"}
{"task_id":"MBPP\/256","completion":"    \n    if n <= 1:\n        return 0\n    counter = 1\n    while counter < n:\n        if is_Prime(counter):\n            counter += 1\n        else:\n            counter += 2\n    return counter - 1","language":"python"}
{"task_id":"MBPP\/257","completion":" return (b,a)","language":"python"}
{"task_id":"MBPP\/258","completion":"   return len(list(filter(lambda x: x % 2 != 0, array_nums)))","language":"python"}
{"task_id":"MBPP\/259","completion":"  max1 = max(test_tup1)\n  max2 = max(test_tup2)\n  return tuple(max(a, b) for a, b in zip(max1, max2))","language":"python"}
{"task_id":"MBPP\/260","completion":"\tdef is_prime(n):\n\t\t\"\"\"\n\t\tReturns True if the argument is a prime number.\n\t\t>>> is_prime(3)\n\t\tTrue\n\t\t>>> is_prime(4)\n\t\tFalse\n\t\t>>> is_prime(10)\n\t\tFalse\n\t\t>>> is_prime(-1)\n\t\tFalse\n\t\t\"\"\"\n\t\tif n < 2:\n\t\t\treturn False\n\t\telif n == 2:\n\t\t\treturn True\n\t\telse:\n\t\t\tfor i in range(2, n):\n\t\t\t\tif n % i == 0:\n\t\t\t\t\treturn False\n\t\treturn True\n\n\tdef is_newman_prime(n):\n\t\t\"\"\"\n\t\tReturns True if the argument is a newman\u2013shanks\u2013williams prime number.\n\t\t>>> is_newman_prime(3)\n\t\tFalse\n\t\t>>> is_newman_prime(4)\n\t\tTrue\n\t\t>>> is_newman_prime(10)\n\t\tFalse\n\t\t>>> is_newman_prime(-1)\n\t\tFalse\n\t\t\"\"\"\n\t\tif n < 2:\n\t\t\treturn False","language":"python"}
{"task_id":"MBPP\/261","completion":"  product = 1\n  for i in test_tup2:\n    product = product * i\n  return tuple(int(i\/product) for i in test_tup1)","language":"python"}
{"task_id":"MBPP\/262","completion":"    if L == 0:\n        return ([], list1)\n    elif L > len(list1):\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])","language":"python"}
{"task_id":"MBPP\/263","completion":" d3={}\n for k in d1:\n     d3[k]=d1[k]\n for k in d2:\n     if k in d3:\n         d3[k]=d3[k]+d2[k]\n     else:\n         d3[k]=d2[k]\n return d3","language":"python"}
{"task_id":"MBPP\/264","completion":"","language":"python"}
{"task_id":"MBPP\/265","completion":"    return [[S[i] for i in range(len(S)) if i % step == 0]] + [S[i] for i in range(len(S)) if i % step != 0]","language":"python"}
{"task_id":"MBPP\/266","completion":"  return (l * 2)**2","language":"python"}
{"task_id":"MBPP\/267","completion":"    return (n*(n+1)*(2*n+1))\/6","language":"python"}
{"task_id":"MBPP\/268","completion":"\treturn 6 * (((n - 1) * 2) + 1)","language":"python"}
{"task_id":"MBPP\/269","completion":"  pass","language":"python"}
{"task_id":"MBPP\/270","completion":"    return sum([arr[i] for i in range(1,n+1) if i%2==0 and i%2==1])","language":"python"}
{"task_id":"MBPP\/271","completion":"    if n == 1:\n        return 2\n    total = 0\n    for x in range(2, n):\n        total += x ** 5\n    return total","language":"python"}
{"task_id":"MBPP\/272","completion":"  return [x[-1] for x in test_list]","language":"python"}
{"task_id":"MBPP\/273","completion":"  pass","language":"python"}
{"task_id":"MBPP\/274","completion":"    coeff=0\n    if n==0 or n==1:\n        return 0\n    elif n%2==1:\n        coeff=2\n        for i in range(3,n+1,2):\n            coeff+=((4*(i-1))\/(i-2))\n        return coeff\n    else:\n        return 2+even_binomial_Coeff_Sum(n-2)","language":"python"}
{"task_id":"MBPP\/275","completion":"    return a.index(n) if n in a else a.index(m)","language":"python"}
{"task_id":"MBPP\/276","completion":"  import math\n  return math.pi * r ** 2 * h","language":"python"}
{"task_id":"MBPP\/277","completion":" if n in dict.values():\n    new_dict = {key:value for key,value in dict.items() if value != n}\n    return new_dict\n else:\n    print('Error, n is not included in the dictionary')","language":"python"}
{"task_id":"MBPP\/278","completion":"  return len(test_tup) - 1","language":"python"}
{"task_id":"MBPP\/279","completion":"\tpass","language":"python"}
{"task_id":"MBPP\/280","completion":"    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1","language":"python"}
{"task_id":"MBPP\/281","completion":"    return len(set(test_list)) == len(test_list)","language":"python"}
{"task_id":"MBPP\/282","completion":"  return list(map(lambda x: x[0]-x[1],zip(nums1,nums2)))","language":"python"}
{"task_id":"MBPP\/283","completion":"    dic = {}\n    for i in str(n):\n        dic[i] = dic.get(i, 0) + 1\n    for k, v in dic.items():\n        if v > 1:\n            return False\n    return True","language":"python"}
{"task_id":"MBPP\/284","completion":"  pass","language":"python"}
{"task_id":"MBPP\/285","completion":"        import re\n        match = re.search(r\"a\\w{2,3}b\",text)\n        if match:\n            return \"Found a match!\"\n        else:\n            return \"Not matched!\"","language":"python"}
{"task_id":"MBPP\/286","completion":"\tmax_sum = 0\n\tcurr_sum = 0\n\ti = 0\n\n\twhile i < n:\n\t\tcurr_sum += a[i]\n\t\tif curr_sum <= 0:\n\t\t\tcurr_sum = 0\n\t\t\ti += 1\n\t\t\tcontinue\n\t\tif (curr_sum + a[i+1]) % k == 0:\n\t\t\tif curr_sum + a[i+1] > max_sum:\n\t\t\t\tmax_sum = curr_sum + a[i+1]\n\t\ti += 1\n\n\treturn max_sum","language":"python"}
{"task_id":"MBPP\/287","completion":"    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares","language":"python"}
{"task_id":"MBPP\/288","completion":"\tif arr == []:\n\t\treturn 0\n\telse:\n\t\tmod_inverse = 0\n\t\tfor i in range(N):\n\t\t\tif (arr[i]) % (P-1) == 0:\n\t\t\t\tmod_inverse = arr[i] % P\n\t\t\t\treturn mod_inverse\n\t\t\telif (arr[i]) % (P-1) == 1:\n\t\t\t\treturn i\n\t\t\telse:\n\t\t\t\treturn -1","language":"python"}
{"task_id":"MBPP\/289","completion":"    d = 0\n    for i in range(1, N + 1):\n        if i % 2 != 0:\n            d += 1\n    return d","language":"python"}
{"task_id":"MBPP\/290","completion":"    max_list_length = 0\n    max_list = []\n    for item in list1:\n        if len(item) > max_list_length:\n            max_list_length = len(item)\n            max_list = item\n    return max_list_length, max_list","language":"python"}
{"task_id":"MBPP\/291","completion":"\tif n <= 0:\n\t\treturn 0\n\tif k <= 0:\n\t\treturn 1\n\treturn count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)","language":"python"}
{"task_id":"MBPP\/292","completion":"    assert n >= m\n    q = n\/\/m\n    if q * m == n:\n        return q\n    else:\n        return q + 1","language":"python"}
{"task_id":"MBPP\/293","completion":"  return (w*h)\/2","language":"python"}
{"task_id":"MBPP\/294","completion":"     return max(listval)","language":"python"}
{"task_id":"MBPP\/295","completion":"    \n    pass","language":"python"}
{"task_id":"MBPP\/296","completion":"    inv_count = 0\n    for i in range(1, n):\n        for j in range(i+1,n+1):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count","language":"python"}
{"task_id":"MBPP\/297","completion":"    # result = []\n    # def helper(sublist):\n    #     for item in sublist:\n    #         if isinstance(item, list):\n    #             helper(item)\n    #         else:\n    #             result.append(item)\n    #\n    # helper(list1)\n    # return result\n    return sum(list1, [])","language":"python"}
{"task_id":"MBPP\/298","completion":"    return [x for x in l1 for y in l2 if x == y]","language":"python"}
{"task_id":"MBPP\/299","completion":"    max_val = 0\n    for i in range(len(stdata)):\n        sum_val = 0\n        for val in stdata[i]:\n            sum_val += val\n        if sum_val > max_val:\n            max_val = sum_val\n    return max_val","language":"python"}
{"task_id":"MBPP\/300","completion":"\ta = [0]*(n+1)\n\ta[0] = 0\n\ta[1] = 1\n\tfor i in range(2,n+1):\n\t\ta[i] = 2*a[i-1]\n\treturn a[n]","language":"python"}
{"task_id":"MBPP\/301","completion":"    if type(d) is dict:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    else:\n        return 0","language":"python"}
{"task_id":"MBPP\/302","completion":"    n_binary = format(n, 'b')\n    n_binary = list(n_binary)\n\n    return int(n_binary.pop(0))","language":"python"}
{"task_id":"MBPP\/303","completion":"    if n == 0:\n        return True\n    return a[n-1] > a[n-2] and solve(a,n-1)","language":"python"}
{"task_id":"MBPP\/304","completion":"    for i in ranges:\n        if index in i:\n            index = index + rotations\n            return arr[index]","language":"python"}
{"task_id":"MBPP\/305","completion":"","language":"python"}
{"task_id":"MBPP\/306","completion":"\t\n\tif (k > index):\n\t\treturn 0\n\telif (k == index):\n\t\treturn a[index]\n\telse:\n\t\tcurrent = max(a[index], a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n\t\tindex = index + 1\n\t\t\n\t\tif (current < a[index - 1]):\n\t\t\tindex = index - 1\n\t\t\n\t\twhile(index < n and current + a[index] < a[index - 1]):\n\t\t\tcurrent = current + a[index]\n\t\t\tindex = index + 1\n\t\t\n\t\treturn current","language":"python"}
{"task_id":"MBPP\/307","completion":"  if len(tuplex) >= m:\n    return tuplex\n  else:\n    return (tuplex + (500,))","language":"python"}
{"task_id":"MBPP\/308","completion":"    # convert the lists into sets\n    s1 = set(nums1)\n    s2 = set(nums2)\n    # iterate through the sets to find the intersection\n    return [num*num2 for num in s1 for num2 in s2 if num * num2 > N]","language":"python"}
{"task_id":"MBPP\/309","completion":"    if a > b:\n        return a\n    else:\n        return b","language":"python"}
{"task_id":"MBPP\/310","completion":"    str1 = str1.replace(' ', '')\n    return tuple(str1)","language":"python"}
{"task_id":"MBPP\/311","completion":"    return n | (1<<(n.bit_length()-1))","language":"python"}
{"task_id":"MBPP\/312","completion":"  return round(((3.14)*(r**2)*(h\/3)),3)","language":"python"}
{"task_id":"MBPP\/313","completion":"  return ','.join([str(x) for x in list1 if x >= 0])","language":"python"}
{"task_id":"MBPP\/314","completion":"\tmax = 0\n\tfor row in range(0, len(grid) - n + 1) :\n\t\tfor col in range(0, len(grid[row]) - n + 1) :\n\t\t\tcurrent_sum = 0\n\t\t\tfor i in range(0, n) :\n\t\t\t\tfor j in range(0, n) :\n\t\t\t\t\tcurrent_sum += grid[row + i][col + j]\n\t\t\tif current_sum > max :\n\t\t\t\tmax = current_sum\n\treturn max","language":"python"}
{"task_id":"MBPP\/315","completion":"    even_word = \"\"\n    max_len = 0\n    for word in str.split():\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                even_word = word\n    if even_word == \"\":\n        return \"-1\"\n    return even_word","language":"python"}
{"task_id":"MBPP\/316","completion":"    left = 0\n    right = len(A) - 1\n    # loop through the list until the element we want is first or last\n    while left <= right:\n        # find the middle element\n        mid = (left + right) \/\/ 2\n        # if the element we're looking for is the middle element, we're done\n        if x == A[mid]:\n            return mid\n        # if the element we're looking for is the first element, we move right\n        elif x < A[mid]:\n            right = mid - 1\n        # if the element we're looking for is the last element, we move left\n        else:\n            left = mid + 1\n    # if the while loop is still going, then the element we're looking for was not found\n    return -1","language":"python"}
{"task_id":"MBPP\/317","completion":"        new_list = []\n        counter = 0\n        for item in alist:\n            counter += 1\n            if counter == 1:\n                new_list.append([item])\n                continue\n            if item == alist[counter - 2]:\n                new_list[-1].append(item)\n            else:\n                new_list.append([item])\n        return new_list","language":"python"}
{"task_id":"MBPP\/318","completion":"    pass","language":"python"}
{"task_id":"MBPP\/319","completion":"  import re\n  return re.findall(r\"\\b\\w{5,}\\b\", text)","language":"python"}
{"task_id":"MBPP\/320","completion":"    sum_of_squares = sum(i*i for i in range(1, n+1))\n    square_sum = sum(range(1, n+1))**2\n    return square_sum - sum_of_squares","language":"python"}
{"task_id":"MBPP\/321","completion":"\t\n\treturn \"\".join(sorted(s, reverse = True))","language":"python"}
{"task_id":"MBPP\/322","completion":"    pass","language":"python"}
{"task_id":"MBPP\/323","completion":"\tif n < 1:\n\t\treturn []\n\telse:\n\t\treturn [arr.pop(0) if arr[0] >= 0 else arr.pop(1)] + re_arrange(arr, n - 1)","language":"python"}
{"task_id":"MBPP\/324","completion":"  pass","language":"python"}
{"task_id":"MBPP\/325","completion":"    # write your code here.\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*i + j*j == n:\n                res += 1\n    return res","language":"python"}
{"task_id":"MBPP\/326","completion":"  # Your code here\n  \n  # create an empty dictionary\n  word_occurrences = dict()\n\n  # loop through the test_list\n  for string in test_list:\n    # split the string into a list of words\n    string_words = string.split()\n\n    # loop through the words of the string\n    for word in string_words:\n      # create the key-value pair\n      word_occurrences[word] = word_occurrences.get(word, 0) + 1\n  \n  # return the word with the highest count\n  return max(word_occurrences, key=word_occurrences.get)","language":"python"}
{"task_id":"MBPP\/327","completion":"  if (x == y) and (y == z):\n    return True\n  if (x == z) and (y != z):\n    return False\n  if (y == z) and (x != z):\n    return False\n  if (x != y) and (x != z) and (y != z):\n    return True","language":"python"}
{"task_id":"MBPP\/328","completion":"  for i in range(n-m):\n    print(list1[i],end=' ')\n  for i in range(n-m,n):\n    print(list1[i],end=' ')\n  for i in range(n,n-m,-1):\n    print(list1[i],end=' ')\n  for i in range(n-m,-1,-1):\n    print(list1[i],end=' ')","language":"python"}
{"task_id":"MBPP\/329","completion":"  count = 0\n  for item in list:\n    if item < 0:\n      count = count + 1\n  return count","language":"python"}
{"task_id":"MBPP\/330","completion":"  import re\n  return re.findall(r'([a-zA-Z]{3,4,5})', text)","language":"python"}
{"task_id":"MBPP\/331","completion":"    mask = 1\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count","language":"python"}
{"task_id":"MBPP\/332","completion":"    freq = {}\n    for letter in str1:\n        if letter in freq:\n            freq[letter] += 1\n        else:\n            freq[letter] = 1\n\n    return freq","language":"python"}
{"task_id":"MBPP\/333","completion":"    sub_li.sort(key = lambda x : x[1], reverse = True)\n    return sub_li","language":"python"}
{"task_id":"MBPP\/334","completion":"    return (a+b>c) and (b+c>a) and (a+c>b)","language":"python"}
{"task_id":"MBPP\/335","completion":"  return (a + d)**n - a * (a + d) \/ 2**n","language":"python"}
{"task_id":"MBPP\/336","completion":"  if monthname1 in [\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]:\n    return True\n  else:\n    return False","language":"python"}
{"task_id":"MBPP\/337","completion":"        punctuations = ['.', '!', '?']\n        words = text.split()\n        if words == []:\n            return('Not matched!')\n        else:\n            for word in words:\n                if word[-1] in punctuations:\n                    return('Not matched!')\n                else:\n                    return('Found a match!')","language":"python"}
{"task_id":"MBPP\/338","completion":"    if len(s)==0:\n        return 0\n    count=0\n    for i in range(len(s)-1):\n        count+=(s[i]==s[i+1])\n    return count","language":"python"}
{"task_id":"MBPP\/339","completion":"    if y % x == 0:\n        return x\n    else:\n        return find_Divisor(x,y-1)","language":"python"}
{"task_id":"MBPP\/340","completion":"\t# sort lst\n\tlst = sorted(lst)\n\t# get the smallest three elements and add them up\n\treturn sum(lst[:3])","language":"python"}
{"task_id":"MBPP\/341","completion":"  return tuple(sorted(s))","language":"python"}
{"task_id":"MBPP\/342","completion":"    pass","language":"python"}
{"task_id":"MBPP\/343","completion":" count_letters = 0\n count_digits = 0\n for c in s:\n    if c.isalpha():\n        count_letters += 1\n    elif c.isdigit():\n        count_digits += 1\n    else:\n        pass\n return count_letters, count_digits","language":"python"}
{"task_id":"MBPP\/344","completion":"    return sum([1 for i in range(n,m) if(int(i**0.5)%2!=0)])","language":"python"}
{"task_id":"MBPP\/345","completion":"    list_difference = []\n    difference = 0\n    for index, value in enumerate(nums):\n        if index == 0:\n            difference = value - nums[index + 1]\n        elif value - nums[index - 1] != difference:\n            list_difference.append(difference)\n            difference = value - nums[index + 1]\n        else:\n            continue\n    return list_difference + [difference]","language":"python"}
{"task_id":"MBPP\/346","completion":"\tif n == 1:\n\t\treturn 1\n\telif k == 1:\n\t\treturn n\n\telse:\n\t\treturn ((2 * (n - 1)) + (1 * (k - 1)))","language":"python"}
{"task_id":"MBPP\/347","completion":"    return m**2 + n**2","language":"python"}
{"task_id":"MBPP\/348","completion":"\tif M == 0: return 1\n\telif M < 0: return 0\n\telif M == 1: return 1\n\telse:\n\t\treturn find_ways(M-1) + find_ways(M-2) + find_ways(M-3)","language":"python"}
{"task_id":"MBPP\/349","completion":"    if len(string) % 8 != 0 :\n        return \"No\"\n    else :\n        return \"Yes\"","language":"python"}
{"task_id":"MBPP\/350","completion":"    \n    i = 0\n    n = len(s)\n    while i < n :\n        c = s[i]\n        if (i < n - 1) and (s[i + 1] == c) :\n            i += 1\n        else :\n            return i + 1\n    return n","language":"python"}
{"task_id":"MBPP\/351","completion":"    #Initialising variables\n    l = 0\n    h = n-1\n    pos = -1\n    count = 0\n    i = 0\n    # Traverse through the array\n    while i <= h:\n        #If the element is found atleast k times\n        if arr[i]==arr[pos]:\n            count = count+1\n            #Checking if the current element is equal to the last one\n            if count==k:\n                return arr[i]\n        #If the element is not found k times, then traverse the array from left to right\n        else:\n            count = 0\n            if i==l:\n                pos = i\n                l = pos+1\n                i = l\n            else:\n                i = i+1\n\n    #Checking if the element is found\n    if count == k:\n        return arr[pos]\n    else:\n        return -1","language":"python"}
{"task_id":"MBPP\/352","completion":"    if len(str) > 256:\n        return False\n    _set = [False]*256\n    for i in str:\n        if _set[ord(i)]:\n            return False\n        else:\n            _set[ord(i)] = True\n    return True","language":"python"}
{"task_id":"MBPP\/353","completion":"   list2 = [row[n] for row in list1]\n   return list2","language":"python"}
{"task_id":"MBPP\/354","completion":"  return a*(n-1) + d*n","language":"python"}
{"task_id":"MBPP\/355","completion":"    return 4*pow(radius, 2) - pow(radius, 2) - 6*radius + 6","language":"python"}
{"task_id":"MBPP\/356","completion":" pass","language":"python"}
{"task_id":"MBPP\/357","completion":"  max_value = 0\n  for record in test_list:\n    if record[0] > max_value:\n      max_value = record[0]\n  return max_value","language":"python"}
{"task_id":"MBPP\/358","completion":"  return list(map(lambda x,y: x % y, nums1, nums2))","language":"python"}
{"task_id":"MBPP\/359","completion":"    if (a**2 - b*b + c)**2 < 0:\n        return(\"No\")\n    else:\n        return(\"Yes\")","language":"python"}
{"task_id":"MBPP\/360","completion":"\treturn 3 * (n ** 2) + 1","language":"python"}
{"task_id":"MBPP\/361","completion":"  if list1 == []:\n    return list1\n\n  for i in range(len(list1)):\n    if isinstance(list1[i], list):\n      list1[i] = remove_empty(list1[i])\n\n  if list1 == []:\n    return list1\n  \n  return list1[0]","language":"python"}
{"task_id":"MBPP\/362","completion":"    if len(set(nums)) == 1:\n        return nums[0]\n    elif len(set(nums)) == 2:\n        return nums[1] if nums[0] == nums[1] else nums[0]\n    else:\n        return max(set(nums), key = nums.count)","language":"python"}
{"task_id":"MBPP\/363","completion":"  # Your code here\n\n  return test_list","language":"python"}
{"task_id":"MBPP\/364","completion":"\tn = len(str)\n\tif n % 2 == 0:\n\t\treturn 0\n\telse:\n\t\treturn n \/ 2","language":"python"}
{"task_id":"MBPP\/365","completion":"    n = str(n)\n    num = len(n)\n    return num","language":"python"}
{"task_id":"MBPP\/366","completion":"    max_product = 0\n    for i in range(0, len(list_nums) - 1):\n        max_product = max(max_product, list_nums[i] * list_nums[i+1])\n    return max_product","language":"python"}
{"task_id":"MBPP\/367","completion":"\treturn True if not root else check(root)","language":"python"}
{"task_id":"MBPP\/368","completion":"  assert len(test_tup) == 2, \"Input should have two items\"\n  return tuple([test_tup] * N)","language":"python"}
{"task_id":"MBPP\/369","completion":"  return 2*(l*w + w*h + h*l)","language":"python"}
{"task_id":"MBPP\/370","completion":"  pass","language":"python"}
{"task_id":"MBPP\/371","completion":"    if left_element > right_element:\n        return 0\n    if right_element - left_element == 1:\n        return right_element\n    mid = left_element + (right_element - left_element) \/\/ 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)","language":"python"}
{"task_id":"MBPP\/372","completion":"  from heapq import heappush, heappop\n  heap = []\n  for n in nums:\n    heappush(heap, n)\n  return [heappop(heap) for _ in range(len(nums))]","language":"python"}
{"task_id":"MBPP\/373","completion":"  return l*w*h","language":"python"}
{"task_id":"MBPP\/374","completion":"    pass","language":"python"}
{"task_id":"MBPP\/375","completion":"    return round(n\/m)*m","language":"python"}
{"task_id":"MBPP\/376","completion":"  lst = list(test_tup)\n  if len(lst) == 1:\n    return test_tup\n  for i in range(len(lst) - 1):\n    if lst[i] == lst[i + 1]:\n      lst[i] = 'MSP'\n  return tuple(lst)","language":"python"}
{"task_id":"MBPP\/377","completion":"    \n    s = list(s)\n    i = 0\n    while i < len(s) :\n        if s[i] == c :\n            del s[i]\n        else :\n            i = i + 1\n    return ''.join(s)","language":"python"}
{"task_id":"MBPP\/378","completion":"  pass","language":"python"}
{"task_id":"MBPP\/379","completion":"  return 2*l*w + 2*l*h + 2*w*h","language":"python"}
{"task_id":"MBPP\/380","completion":"  if rownum < 1:\n    raise ValueError('Invalid number of rows')\n  if colnum < 1:\n    raise ValueError('Invalid number of columns')\n  listoflists = []\n  for r in range(0,rownum):\n    listoflists.append([])\n    for c in range(0,colnum):\n      listoflists[r].append(0)\n  return listoflists","language":"python"}
{"task_id":"MBPP\/381","completion":"    pass","language":"python"}
{"task_id":"MBPP\/382","completion":"    if not A:\n        return 0\n\n    start = 0\n    end = len(A) - 1\n\n    while start < end:\n        if A[start] < A[end]:\n            return end - start\n        start += 1\n        end -= 1\n\n    return 0","language":"python"}
{"task_id":"MBPP\/383","completion":"    return (~n & 0xFFFFFFFF) + (n & 0x00000000)","language":"python"}
{"task_id":"MBPP\/384","completion":"    from collections import defaultdict\n    frequency_Dict = defaultdict(int)\n    for i in arr:\n        frequency_Dict[i] += 1\n\n    print(min(frequency_Dict, key=frequency_Dict.get))","language":"python"}
{"task_id":"MBPP\/385","completion":"  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return get_perrin(n-1) + get_perrin(n-2)","language":"python"}
{"task_id":"MBPP\/386","completion":"\treturn 0","language":"python"}
{"task_id":"MBPP\/387","completion":"    if N[0] == '0' or N[0] == '1':\n        return 'Even'\n    else:\n        return 'Odd'","language":"python"}
{"task_id":"MBPP\/388","completion":"    p = 1\n    while p < n:\n        p *= 2\n    return p\/\/2","language":"python"}
{"task_id":"MBPP\/389","completion":"\tif n <= 0:\n\t\traise Exception(\"Invalid number of lucas numbers requested\")\n\telif n == 1:\n\t\treturn 2\n\treturn find_lucas(n-1) + find_lucas(n-2)","language":"python"}
{"task_id":"MBPP\/390","completion":" list.insert(0,string)\n return list","language":"python"}
{"task_id":"MBPP\/391","completion":"     new_dictionary = []\n     for i in range(len(l1)):\n         new_dictionary.append({l1[i]:{l2[i]:l3[i]}})\n     return new_dictionary","language":"python"}
{"task_id":"MBPP\/392","completion":"\t# Define base cases\n\tif n < 2: return n\n\tif n == 2: return 2\n\tif n == 3: return 4\n\tif n == 4: return 6\n\tif n == 5: return 8\n\t# Define recursion\n\treturn max(get_max_sum(n\/2) + get_max_sum(n\/3) + get_max_sum(n\/4) + get_max_sum(n\/5), n)","language":"python"}
{"task_id":"MBPP\/393","completion":"    return (len(max(input_list, key=len)),max(input_list, key=len))","language":"python"}
{"task_id":"MBPP\/394","completion":"  pass","language":"python"}
{"task_id":"MBPP\/395","completion":"  # A character is repeated if it occurs at least twice in the given string.\n  # Time Complexity: O(n)\n  # Space Complexity: O(n)\n  char_dict = {}\n  for char in str1:\n    if char in char_dict:\n      char_dict[char] = char_dict[char] + 1\n    else:\n      char_dict[char] = 1\n  \n  for char in str1:\n    if char_dict[char] == 1:\n      return char\n  return None","language":"python"}
{"task_id":"MBPP\/396","completion":"\t# import re\n\t# regex = re.compile(r'^[a-z]+[a-z]*')\n\t# regex = re.compile(r'[a-zA-Z]+[a-zA-Z]*')\n\t# regex = re.compile(r'[a-zA-Z]+')\n\t# regex = re.compile(r'[a-zA-Z]*')\n\t# regex = re.compile(r'^[a-zA-Z]*')\n\t# return regex.match(string)\n\t# return \"Valid\" if re.match(r'^[a-zA-Z]*', string) else \"Invalid\"\n\treturn \"Valid\" if string[0] == string[-1] else \"Invalid\"","language":"python"}
{"task_id":"MBPP\/397","completion":" a = sorted(a)\n b = sorted(b)\n c = sorted(c)\n if a == b == c:\n     return a[2]\n elif a == b or a == c or b == c:\n     return a[1]\n else:\n     return a[0]","language":"python"}
{"task_id":"MBPP\/398","completion":"    if len(nums) == 0:\n        return 0\n    else:\n        num = nums[0]\n        if type(num) == list:\n            return sum_of_digits(num) + sum_of_digits(nums[1:])\n        else:\n            return num % 10 + sum_of_digits(nums[1:])","language":"python"}
{"task_id":"MBPP\/399","completion":"  if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n    raise TypeError(\"Inputs must be tuples.\")\n  if len(test_tup1) != len(test_tup2):\n    raise ValueError(\"Inputs must be the same length.\")\n\n  result = []\n  for i in range(len(test_tup1)):\n    result.append(test_tup1[i] ^ test_tup2[i])\n\n  return tuple(result)","language":"python"}
{"task_id":"MBPP\/400","completion":"  freq = {}\n  for tuple_item in test_list:\n    if tuple_item not in freq:\n      freq[tuple_item] = 0\n    freq[tuple_item] += 1\n  return freq","language":"python"}
{"task_id":"MBPP\/401","completion":"  return [list(map(sum, zip(*x))) for x in zip(test_tup1, test_tup2)]","language":"python"}
{"task_id":"MBPP\/402","completion":"    assert n > 0\n    assert 0 <= r <= n\n    assert 1 <= p <= n\n    prod = 1\n    for k in range(r):\n        prod *= (n-k)\n        prod %= p\n    return prod","language":"python"}
{"task_id":"MBPP\/403","completion":"\timport re\n\tregex = \"^(https?:\\\/\\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\\/\\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})$\"\n\tp = re.compile(regex)\n\tresult = re.findall(p,str)\n\tif result:\n\t\treturn True\n\telse:\n\t\treturn False","language":"python"}
{"task_id":"MBPP\/404","completion":"    if a < b:\n        return a\n    else:\n        return b","language":"python"}
{"task_id":"MBPP\/405","completion":"  for i in range(0,len(tuple1)):\n    if tuple1[i]==tuplex:\n      return True\n  return False","language":"python"}
{"task_id":"MBPP\/406","completion":"    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"","language":"python"}
{"task_id":"MBPP\/407","completion":"    digits = [int(x) for x in str(n)]\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            digits[i-1], digits[i] = digits[i], digits[i-1]\n            return int(''.join(map(str, digits)))\n    return False","language":"python"}
{"task_id":"MBPP\/408","completion":"","language":"python"}
{"task_id":"MBPP\/409","completion":"    if len(list1) == 1:\n        return list1[0][0] * list1[0][1]\n    if len(list1) == 0:\n        return 0\n    else:\n        list2 = []\n        if list1[0][1] < list1[1][1]:\n            list2.append(list1[0])\n            list2.append(list1[1])\n        else:\n            list2.append(list1[1])\n            list2.append(list1[0])\n        return min_product_tuple(list2) * min_product_tuple(list1[2:])","language":"python"}
{"task_id":"MBPP\/410","completion":"     # your code goes here\n     if len(listval) == 0:\n         raise ValueError\n     elif len(listval) == 1:\n         return listval[0]\n     else:\n         return min(listval[1:])","language":"python"}
{"task_id":"MBPP\/411","completion":"  import re\n\n  # find all the words in the snake_case string\n  match = re.findall('[A-Z][a-z]+', word)\n\n  # convert each word to lower case\n  for i in range(len(match)):\n    match[i] = match[i].lower()\n\n  return ''.join(match)","language":"python"}
{"task_id":"MBPP\/412","completion":"    return [x for x in l if x % 2 != 0]","language":"python"}
{"task_id":"MBPP\/413","completion":"    return list1[n]","language":"python"}
{"task_id":"MBPP\/414","completion":"    if len(list1) < len(list2):\n        return False\n\n    #print(list1[0])\n    i = 0\n    while i < len(list2):\n        if list2[i] == list1[0]:\n            if list2[i] == list1[-1]:\n                if list1[0:i+1] == list2[0:i+1]:\n                    return True\n            if list2[i] != list1[-1]:\n                if list1[0:i+1] == list2[i:]:\n                    return True\n        i+=1\n    return False","language":"python"}
{"task_id":"MBPP\/415","completion":"    n = len(arr)\n    if n < 2:\n        return arr[0], arr[1]\n    arr.sort()\n    return arr[-1]*arr[-2], arr[0]*arr[1]","language":"python"}
{"task_id":"MBPP\/416","completion":"\t# base case\n\tif n == 0:\n\t\treturn 0\n\t\n\t# recursive case\n\telse:\n\t\ta = n \/\/ 3\n\t\tb = n % 3\n\t\tif b == 0:\n\t\t\treturn breakSum(a) + 3\n\t\telse:\n\t\t\treturn breakSum(a) + breakSum(n - a)","language":"python"}
{"task_id":"MBPP\/417","completion":"\treturn","language":"python"}
{"task_id":"MBPP\/418","completion":"    \n    max_length = 0\n    max_index = None\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_index = i\n    \n    return lst[max_index]","language":"python"}
{"task_id":"MBPP\/419","completion":"  rounded_list = [round(num) for num in list1]\n  rounded_list_sum = sum(rounded_list)\n  return rounded_list_sum * len(list1)","language":"python"}
{"task_id":"MBPP\/420","completion":"    result = 0\n    for i in range(0,n,2):\n        result += (i*i*i)\n    return result","language":"python"}
{"task_id":"MBPP\/421","completion":"    # Your code here\n\n    result = \"\"\n    for i in range(len(test_tup)-1):\n        result = result + test_tup[i] + \"-\"\n    result = result + test_tup[-1]\n    return result","language":"python"}
{"task_id":"MBPP\/422","completion":"    from math import *\n    sum=0\n    for i in range(n):\n        sum+=pow(i+1,3)\n    return sum\/n","language":"python"}
{"task_id":"MBPP\/423","completion":"    pass","language":"python"}
{"task_id":"MBPP\/424","completion":"  return [s[-1] for s in test_tuple]","language":"python"}
{"task_id":"MBPP\/425","completion":"    count = 0\n    for i in range(len(list1)):\n        count += 1\n        if list1[i] == x:\n            for j in range(i + 1, len(list1)):\n                if list1[j] == x:\n                    count -= 1\n                    break\n    return count","language":"python"}
{"task_id":"MBPP\/426","completion":" return list(filter(lambda x: x % 2 != 0, nums))","language":"python"}
{"task_id":"MBPP\/427","completion":"        from datetime import datetime\n        import re\n\n        date = dt\n        # convert date into regex friendly format\n        date = re.sub(r'(?<!^)(?=[A-Z])', '-', date)\n        # create a date object from the date variable\n        new_date = datetime.strptime(date, '%Y-%m-%d')\n        # change the format of the date object\n        new_date = new_date.strftime('%d-%m-%Y')\n        # return the new date\n        return new_date","language":"python"}
{"task_id":"MBPP\/428","completion":"    length = len(my_list)\n    gap = length\/\/2\n    while gap > 0:\n        for i in range(gap, length):\n            j = i\n            tmp = my_list[i]\n            while j >= gap and my_list[j-gap] > tmp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = tmp\n        gap \/\/= 2\n    return my_list","language":"python"}
{"task_id":"MBPP\/429","completion":"  result = []\n\n  for index in range(len(test_tup1)):\n    result.append(test_tup1[index] & test_tup2[index])\n\n  return tuple(result)","language":"python"}
{"task_id":"MBPP\/430","completion":"  directrix = (-b + (b**2 - 4*a*c)**0.5)\/(2*a)\n  return directrix","language":"python"}
{"task_id":"MBPP\/431","completion":"     # loop through list1\n     for item in list1:\n         # check if the item is in list2\n         if item in list2:\n             # return the first item in the list that is common\n             return item\n\n     # return None if there are no common items\n     return None","language":"python"}
{"task_id":"MBPP\/432","completion":" \n #Finds the area of the trapezium\n \n area = 0.5*base1 + 0.5*base2\n\n #Finds the half length of the trapezium\n half = 0.5*height\n\n #Finds the trapezium's length\n length = 2*half + area\n\n #Finds the mean of the trapezium's length\n mean = length\/2\n\n #Finds the median\n median = (base1 + base2)\/2\n\n #Returns the median\n return median","language":"python"}
{"task_id":"MBPP\/433","completion":"  # Solution 1: Using the built-in function\n  for element in arr:\n    if number > element:\n      return \"Yes, the entered number is greater than those in the array\"\n  return \"No, entered number is less than those in the array\"","language":"python"}
{"task_id":"MBPP\/434","completion":"        return \"Not matched!\" if \"a\" not in text else \"Found a match!\" if \"b\" in text else \"Not matched!\"","language":"python"}
{"task_id":"MBPP\/435","completion":"    return int(str(n)[-1])","language":"python"}
{"task_id":"MBPP\/436","completion":"  neg_nos = []\n  for num in list1:\n    if num < 0:\n      neg_nos.append(num)\n  return neg_nos","language":"python"}
{"task_id":"MBPP\/437","completion":" str1 = list(str1)\n str2 = \"\"\n for i in range(len(str1)):\n     if i % 2 == 0:\n         str2 = str2 + str1[i]\n return str2","language":"python"}
{"task_id":"MBPP\/438","completion":"  num_pairs = 0\n  for i in range(len(test_list)-1):\n    # print(f\"comparing {test_list[i]} and {test_list[i+1]}\")\n    if test_list[i][1] == test_list[i+1][0]:\n      num_pairs += 1\n    elif test_list[i][0] == test_list[i+1][1]:\n      num_pairs += 1\n  return num_pairs","language":"python"}
{"task_id":"MBPP\/439","completion":"  new_list = []\n  for num in L:\n    new_list.append(num \/\/ 10 * 10)\n  return sum(new_list)","language":"python"}
{"task_id":"MBPP\/440","completion":" pass\n pass","language":"python"}
{"task_id":"MBPP\/441","completion":"  return 6 * l**2","language":"python"}
{"task_id":"MBPP\/442","completion":"    counter = 0\n    for num in nums:\n        if num > 0:\n            counter += 1\n\n    return counter \/ len(nums)","language":"python"}
{"task_id":"MBPP\/443","completion":"    max_neg = -9999999\n    for element in list1:\n        if element < 0 and element > max_neg:\n            max_neg = element\n    return max_neg","language":"python"}
{"task_id":"MBPP\/444","completion":"  # Your code here\n  pass","language":"python"}
{"task_id":"MBPP\/445","completion":"  tup_dict = {}\n  for i,j in zip(test_tup1, test_tup2):\n    for key, val in zip(i,j):\n      tup_dict[key] = tup_dict.get(key, 0) + val\n  return tuple(map(lambda x: tuple(map(lambda y: y * x, i)), tup_dict.items()))","language":"python"}
{"task_id":"MBPP\/446","completion":"    # count = 0\n    # for i in lst:\n    #     if i in tup:\n    #         count += 1\n    # return count\n\n    # return sum(tup.count(x) for x in lst)\n\n    return sum(1 for x in lst if x in tup)","language":"python"}
{"task_id":"MBPP\/447","completion":" return list(map(lambda num: num**3, nums))","language":"python"}
{"task_id":"MBPP\/448","completion":"\treturn n*(n+1)*(2*n+1)\/6","language":"python"}
{"task_id":"MBPP\/449","completion":"    if (x1+x2>x3 and x2+x3>x1 and y2+y3>y1 and y1+y2>y3):\n        print(\"Yes\")\n    else:\n        print(\"No\")","language":"python"}
{"task_id":"MBPP\/450","completion":"    lst = []\n    for i in range(len(str)):\n        if i + l <= len(str):\n            lst.append(str[i:i+l])\n    return lst","language":"python"}
{"task_id":"MBPP\/451","completion":"  import re\n  regex = re.compile(r'\\s+')\n  return regex.sub('', text1)","language":"python"}
{"task_id":"MBPP\/452","completion":"  if actual_cost > (sale_amount * 0.9):\n    return actual_cost * 0.9\n  else:\n    return None","language":"python"}
{"task_id":"MBPP\/453","completion":"    res = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            res += i\n    return res","language":"python"}
{"task_id":"MBPP\/454","completion":"        # Define a template for the match (here, a z followed by any character)\n        template = r'\\b(?:z)\\w+'\n        # Check if the text contains a word containing z\n        if re.search(template, text) is not None:\n            return 'Found a match!'\n        else:\n            return 'Not matched!'","language":"python"}
{"task_id":"MBPP\/455","completion":"  if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n    if 31 - monthnum2 % 30 == 0:\n      return True\n  elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n    if 30 - monthnum2 % 30 == 0:\n      return True\n  elif monthnum2 == 2:\n    if 29 - monthnum2 % 28 == 0:\n      return True\n  else:\n    return False","language":"python"}
{"task_id":"MBPP\/456","completion":"    newlist = []\n    for index, elem in enumerate(stringlist):\n        newlist.insert(0,elem)\n    return newlist","language":"python"}
{"task_id":"MBPP\/457","completion":"    return min(lst,key=lambda x:len(x))","language":"python"}
{"task_id":"MBPP\/458","completion":"  area = l * b\n  return area","language":"python"}
{"task_id":"MBPP\/459","completion":"  return re.sub(r'[a-z]+', '', str1, flags=re.I)","language":"python"}
{"task_id":"MBPP\/460","completion":"    lst_new = []\n    for lst_1 in lst:\n        lst_new.append(lst_1[0])\n    return lst_new","language":"python"}
{"task_id":"MBPP\/461","completion":"    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr","language":"python"}
{"task_id":"MBPP\/462","completion":"    return list(map(lambda x: list(x), [iter(list1)]*len(list1)))","language":"python"}
{"task_id":"MBPP\/463","completion":"\t\n\t# max_product = [0] * len(arr)\n\t# max_product[0] = arr[0]\n\t\n\tmax_product_so_far = [0] * len(arr)\n\tmax_product_so_far[0] = arr[0]\n\t\n\tmax_product_so_far_partial = [0] * len(arr)\n\tmax_product_so_far_partial[0] = arr[0]\n\t\n\tfor i in range(1, len(arr)):\n\t\tmax_product_so_far[i] = max(arr[i], max_product_so_far[i - 1] * arr[i])\n\t\tmax_product_so_far_partial[i] = max(max_product_so_far[i - 1] * arr[i], 0)\n\t\n\tmax_product = max(max_product_so_far)","language":"python"}
{"task_id":"MBPP\/464","completion":"    pass","language":"python"}
{"task_id":"MBPP\/465","completion":"  return {k: v for k, v in dict1.items() if v}","language":"python"}
{"task_id":"MBPP\/466","completion":"\tleft, right = 0, n-1\n\twhile left < right:\n\t\tmid = (left + right) \/\/ 2\n\t\tif arr[mid] < arr[mid + 1]:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid\n\treturn left","language":"python"}
{"task_id":"MBPP\/467","completion":"    return str(oct(deciNum))[2:]","language":"python"}
{"task_id":"MBPP\/468","completion":"\t\n\tmax_prod = 0\n\tfor i in range(n-3):\n\t\tmax_prod = max(arr[i]*arr[i+3]*arr[i+6], max_prod)\n\t\n\treturn max_prod","language":"python"}
{"task_id":"MBPP\/469","completion":"    if len(price) < k:\n        return 0\n    max_profit = 0\n    buy_price = [0] * k\n    for i in range(k-1, -1, -1):\n        buy_price[i] = price[i]\n        for j in range(i+1, k):\n            buy_price[i] = min(buy_price[i], price[j])\n            max_profit = max(max_profit, price[j] - buy_price[i])\n    return max_profit","language":"python"}
{"task_id":"MBPP\/470","completion":"  if len(test_tup) == 0:\n    return ()\n\n  sum_list = []\n  for x, y in zip(test_tup[0::2], test_tup[1::2]):\n    sum_list.append(x+y)\n\n  return tuple(sum_list)","language":"python"}
{"task_id":"MBPP\/471","completion":"    if lens <= 0:\n        return 0\n    if lens == 1:\n        return arr[0]\n    return find_remainder(arr, lens-1, n) + (arr[lens-1] * (n-lens+1))","language":"python"}
{"task_id":"MBPP\/472","completion":"    #l=sorted(l)\n    i = 0\n    j = 1\n    while j < len(l):\n        if l[i] == l[j]:\n            j = j + 1\n        else:\n            i = i + 1\n            j = j + 1\n    if i == len(l):\n        return True\n    else:\n        return False","language":"python"}
{"task_id":"MBPP\/473","completion":"  common_list = []\n  for index in range(len(test_list1)):\n    for index1 in range(len(test_list2)):\n      if test_list1[index] == test_list2[index1]:\n        common_list.append(test_list1[index])\n  common_tuple = tuple(common_list)\n  return common_tuple","language":"python"}
{"task_id":"MBPP\/474","completion":" newstr1 = \"\"\n for i in str1:\n   if i == ch:\n     newstr1 = newstr1 + newch\n   else:\n     newstr1 = newstr1 + i\n return newstr1","language":"python"}
{"task_id":"MBPP\/475","completion":" sorted_list = sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n return sorted_list","language":"python"}
{"task_id":"MBPP\/476","completion":"      pass","language":"python"}
{"task_id":"MBPP\/477","completion":"  return string.lower()","language":"python"}
{"task_id":"MBPP\/478","completion":" for i in range(len(str1)):\n    if str1[i] == str1[i].lower():\n        str1 = str1[:i] + str1[i+1:]\n return str1","language":"python"}
{"task_id":"MBPP\/479","completion":"    return int(str(n)[0])","language":"python"}
{"task_id":"MBPP\/480","completion":"  dict1 = {}\n  for char in str1:\n    if char not in dict1:\n      dict1[char] = 1\n    else:\n      dict1[char] += 1\n  max_char = \"\"\n  max_count = 0\n  for key in dict1:\n    if dict1[key] > max_count:\n      max_char = key\n      max_count = dict1[key]\n  return max_char","language":"python"}
{"task_id":"MBPP\/481","completion":"\tseen = [False] * (sum + 1)\n\tseen[0] = True\n\tfor i in range(n):\n\t\tfor j in range(sum, -1, -1):\n\t\t\tif seen[j - set[i]] is True:\n\t\t\t\tseen[j] = True\n\treturn seen[sum]","language":"python"}
{"task_id":"MBPP\/482","completion":"\t\timport re\n\t\treturn 'Yes' if re.findall('[A-Z][a-z]+',text) else 'No'","language":"python"}
{"task_id":"MBPP\/483","completion":"    for i in range(1,x):\n        if x%i==0:\n            return i\n    return None","language":"python"}
{"task_id":"MBPP\/484","completion":"  pass","language":"python"}
{"task_id":"MBPP\/485","completion":"\tleft, right = 0, n - 1\n\twhile left < right :\n\t\tmid = (left + right) \/\/ 2\n\t\tif A[mid] == A[mid + 1] :\n\t\t\tleft = mid + 2\n\t\telse :\n\t\t\tright = mid\n\treturn A[left]","language":"python"}
{"task_id":"MBPP\/486","completion":"\tif k < 0 or k > n or p < 0 or p > 1:\n\t\traise ValueError\n\tif k == 0 or k == n:\n\t\treturn 1\n\treturn (binomial_probability(n - 1, k - 1, p) * p) + (binomial_probability(n - 1, k, p) * (1 - p))","language":"python"}
{"task_id":"MBPP\/487","completion":"\treturn sorted(tup, key=lambda x: x[1], reverse=False)","language":"python"}
{"task_id":"MBPP\/488","completion":"  return (4*a**2 - 8*a + 5)*0.5","language":"python"}
{"task_id":"MBPP\/489","completion":"    return arr.count(max(arr))","language":"python"}
{"task_id":"MBPP\/490","completion":"  pass","language":"python"}
{"task_id":"MBPP\/491","completion":" gp = [a]\n for i in range(1,n):\n   gp.append(a*r**i\/i)\n return sum(gp)","language":"python"}
{"task_id":"MBPP\/492","completion":"\tlow = 0\n\thigh = len(item_list) - 1\n\n\twhile low <= high:\n\t\tmid = (low + high) \/ 2\n\t\tguess = item_list[mid]\n\n\t\tif guess == item:\n\t\t\treturn True\n\t\telif guess > item:\n\t\t\thigh = mid - 1\n\t\telse:\n\t\t\tlow = mid + 1\n\n\treturn False","language":"python"}
{"task_id":"MBPP\/493","completion":"    if w % 2 == 0:\n        w += 1\n    if h % 2 == 0:\n        h += 1\n    polygons = []\n    for y in range(h\/\/2):\n        polygons.append([])\n        for x in range(w\/\/2):\n            for dy in range(1, 2):\n                for dx in range(1, 2):\n                    x1 = x * 2 + dx - 1\n                    y1 = y * 2 + dy - 1\n                    polygons[-1].append((x1, y1))\n    return polygons\n\ndef calculate_polygons_v1(w, h):\n    polygons = []\n    for y in range(h \/\/ 2):\n        for x in range(w \/\/ 2):\n            polygons.append((x, y))\n    return polygons\n\ndef calculate_polygons_v2(w, h):\n    polygons = []\n    for y in range(h \/\/ 2):\n        for x in\n","language":"python"}
{"task_id":"MBPP\/494","completion":"  # Your code here\n  return str(int(''.join(map(str, test_tup)), 2))","language":"python"}
{"task_id":"MBPP\/495","completion":"  import re\n  regex = re.compile(r'[a-z]*', re.I)\n  return regex.sub('', str1)","language":"python"}
{"task_id":"MBPP\/496","completion":"  from heapq import *\n  # build a min heap of size n\n  min_heap = []\n  for num in nums:\n    heappush(min_heap, num)\n  # pop smallest from heap\n  result = []\n  while min_heap:\n    result.append(heappop(min_heap))\n  return result","language":"python"}
{"task_id":"MBPP\/497","completion":"  surface_area = (2*3.14*r*r*h) + (2*3.14*r*r*r)\n  return surface_area","language":"python"}
{"task_id":"MBPP\/498","completion":"    if y > x:\n        x, y = y, x\n    return y if x % y == 0 else gcd(x % y, y)","language":"python"}
{"task_id":"MBPP\/499","completion":"  \"*** YOUR CODE HERE ***\"\n  return 2 * r - 1","language":"python"}
{"task_id":"MBPP\/500","completion":"  for index, item in enumerate(list):\n    list[index] = ' ' + item\n  return ''.join(list)","language":"python"}
{"task_id":"MBPP\/501","completion":"  a=min(x,y)\n  c=0\n  while a>0:\n    c+=1\n    a\/\/=y\n  return c","language":"python"}
{"task_id":"MBPP\/502","completion":"  if n % m == 0:\n    print(m)\n  else:\n    print(n % m)","language":"python"}
{"task_id":"MBPP\/503","completion":"    # for i in range(1, len(nums)):\n    #     if nums[i] - nums[i - 1] != 1:\n    #         nums.append(nums[i] - 1)\n    # return nums\n    return [n - 1 for n in nums if n - 1] + [n + 1 for n in nums if n + 1]","language":"python"}
{"task_id":"MBPP\/504","completion":"    if n == 1:\n        return n\n    else:\n        return n + sum_Of_Series(n-1)","language":"python"}
{"task_id":"MBPP\/505","completion":"    last = None\n    for i in reversed(range(len(A))):\n        if A[i] != 0:\n            last = i\n        if last is not None:\n            A[i], A[last] = A[last], A[i]\n    return A","language":"python"}
{"task_id":"MBPP\/506","completion":"\treturn factorial(n) \/\/ factorial(n - k)","language":"python"}
{"task_id":"MBPP\/507","completion":"    for word in removewords:\n        list1 = [w for w in list1 if w != word]\n    return list1","language":"python"}
{"task_id":"MBPP\/508","completion":"    set1, set2 = set(l1), set(l2)\n    return set1==set2","language":"python"}
{"task_id":"MBPP\/509","completion":"    if n % 2 != 0 :\n        n -= 1\n    sum_of_odd = 0\n    for num in range(1,n,2):\n        sum_of_odd += num\n    return sum_of_odd\/n","language":"python"}
{"task_id":"MBPP\/510","completion":"\tarr.sort()\n\tsum = 0\n\tl = 0\n\tr = len(arr) - 1\n\n\twhile l <= r:\n\t\tif (arr[l] + arr[r]) > k:\n\t\t\tr-=1\n\t\telse:\n\t\t\tsum+=1\n\t\t\tl+=1\n\treturn sum","language":"python"}
{"task_id":"MBPP\/511","completion":"    sum_list = list()\n    for i in range(1, num+1):\n        sum_list.append(i)\n    for i in range(2, num+1):\n        if num%i==0:\n            sum_list[i] = sum_list[i] + sum_list[num\/\/i]\n    print(min(sum_list))","language":"python"}
{"task_id":"MBPP\/512","completion":"  element_freq = {}\n  for elm in test_tuple:\n    if isinstance(elm, tuple):\n      elm_freq = count_element_freq(elm)\n      for k, v in elm_freq.items():\n        if k in element_freq:\n          element_freq[k] += v\n        else:\n          element_freq[k] = v\n    else:\n      if elm in element_freq:\n        element_freq[elm] += 1\n      else:\n        element_freq[elm] = 1\n  return element_freq","language":"python"}
{"task_id":"MBPP\/513","completion":"  new_test_tup = []\n  for i in range(len(test_tup)):\n    new_test_tup.append(test_tup[i])\n    new_test_tup.append(K)\n  return new_test_tup","language":"python"}
{"task_id":"MBPP\/514","completion":"  pass","language":"python"}
{"task_id":"MBPP\/515","completion":"","language":"python"}
{"task_id":"MBPP\/516","completion":"    if type(nums) != list:\n        raise TypeError(\"Input type error!\")\n    max_digit = max(nums)\n    if max_digit == 0:\n        return [0]\n    else:\n        digit_num = 1\n        while max_digit \/\/ digit_num > 0:\n            counting_sort(nums, digit_num)\n            digit_num *= 10\n        return nums","language":"python"}
{"task_id":"MBPP\/517","completion":"    return max(list1,key=lambda x:x if x >= 0 else 0)","language":"python"}
{"task_id":"MBPP\/518","completion":" # Solution:\n root = num \/ 2.0\n while num \/ root > 0.5:\n  root = (num \/ root + root) \/ 2.0\n return root","language":"python"}
{"task_id":"MBPP\/519","completion":"\treturn (1 \/ 6) * (num ** 2) * ((1 + num) ** 2 \/ (2 * num + 1))","language":"python"}
{"task_id":"MBPP\/520","completion":"  def gcd(a, b):\n    while a != 0:\n      a, b = b % a, a\n    return b\n\n  def lcm(a, b):\n    return (a * b) \/ gcd(a, b)\n\n  lcm_of_l = 1\n  for i in l:\n    lcm_of_l = lcm(lcm_of_l, i)\n  return lcm_of_l","language":"python"}
{"task_id":"MBPP\/521","completion":"  if x == y or y == z or x == z:\n    return True\n  return False","language":"python"}
{"task_id":"MBPP\/522","completion":"\tif not arr:\n\t\treturn 0\n\n\tif len(arr) == 1:\n\t\treturn 1\n\n\tmax_sub_array = 0\n\tfor i in range(1, len(arr)):\n\t\tfor j in range(len(arr) - i):\n\t\t\tleft = arr[j]\n\t\t\tright = arr[j + i]\n\t\t\tsub_array = 0\n\t\t\tif left > right:\n\t\t\t\tsub_array = lbs([left, arr[j + 1]]) + 1\n\t\t\telse:\n\t\t\t\tsub_array = lbs([arr[j + 1], right]) + 1\n\t\t\tif sub_array > max_sub_array:\n\t\t\t\tmax_sub_array = sub_array\n\n\treturn max_sub_array","language":"python"}
{"task_id":"MBPP\/523","completion":"    if len(str1) >= 8:\n        return \"String length should be atleast 8.\"\n    if str1.isalpha() == False:\n        return \"String must have 1 upper case character.\"\n    if str1.islower() == False:\n        return \"String must have 1 lower case character.\"\n    if str1.isdecimal() == False:\n        return \"String must have 1 number.\"\n    \n    return \"Valid string.\"","language":"python"}
{"task_id":"MBPP\/524","completion":"\t\n\treturn max_sum_increasing_subsequence_helper(arr, 0, n-1, n-1)","language":"python"}
{"task_id":"MBPP\/525","completion":"  #code here\n  for i in range(len(line1)):\n    if line1[i]*line2[i]<0:\n      return False\n  return True","language":"python"}
{"task_id":"MBPP\/526","completion":"     return \"\".join([i.capitalize() for i in str1.split()])","language":"python"}
{"task_id":"MBPP\/527","completion":"    # sum = 0\n    # for num in arr:\n    #     sum += num\n    # if sum == num:\n    #     return 1\n    # else:\n    #     return 0\n    pairs = 0\n    for num in arr:\n        sum -= num\n        if sum == num:\n            pairs += 1\n    return pairs","language":"python"}
{"task_id":"MBPP\/528","completion":"   \n   # sort the list of lists by first element\n   list1.sort()\n   # get the index of the smallest first element\n   index1 = list1.index(min(list1))\n   \n   # sort the list of lists by second element\n   list1.sort(key=lambda x: x[1])\n   # get the index of the smallest second element\n   index2 = list1.index(min(list1))\n   \n   if index1 < index2:\n       return index1+1, list1[:index1+1]\n   else:\n       return index2+1, list1[:index2+1]","language":"python"}
{"task_id":"MBPP\/529","completion":"\tfor i in range(n - 1, 0, -1):\n\t\tprint","language":"python"}
{"task_id":"MBPP\/530","completion":"    return len(list(filter(lambda x: x < 0, nums))) \/ len(nums)","language":"python"}
{"task_id":"MBPP\/531","completion":"    # We are given coins and m. We want to maximize the number of coins that\n    # can make the given value V. We can always use a greedy approach that\n    # starts from the largest coin and tries to make the total value as much as\n    # possible.\n    # Let F[i] be the number of possible values for the ith coin.\n    # F[i] = 0 if V < coins[i], F[i] = V \/\/ coins[i] + F[i-1] if V >= coins[i]\n    F = [0] + [V \/\/ c + F[i - 1] if V >= c else V \/\/ c for i, c in enumerate(coins)]\n    n = len(coins)","language":"python"}
{"task_id":"MBPP\/532","completion":"  return sorted(str1) == sorted(str2)","language":"python"}
{"task_id":"MBPP\/533","completion":"  pass","language":"python"}
{"task_id":"MBPP\/534","completion":" pattern_length = len(pattern)\n \n # if the length of the pattern is smaller than the text, then the pattern is not present\n if pattern_length > len(text):\n  return (None,None)\n \n # loop through the length of the pattern \n for index in range(len(text) - pattern_length + 1):\n  if text[index:index+pattern_length] == pattern:\n   return (index,index+pattern_length-1)\n return (None,None)","language":"python"}
{"task_id":"MBPP\/535","completion":"  return 2*3.1415*r**2","language":"python"}
{"task_id":"MBPP\/536","completion":" \n list_length = len(list)\n return list[n-1:list_length:n]","language":"python"}
{"task_id":"MBPP\/537","completion":"  for word in str1.split():\n    if str1.lower().count(word.lower()) == 1:\n      return word\n  return None","language":"python"}
{"task_id":"MBPP\/538","completion":"    str1 = str1.replace(\" \", \"\").replace(\"\\t\", \"\")\n    return tuple(str1)","language":"python"}
{"task_id":"MBPP\/539","completion":"  return list(map(lambda x:x**index,bases_num))","language":"python"}
{"task_id":"MBPP\/540","completion":"    count_arr = {}\n    for i in range(len(arr)):\n        if arr[i] in count_arr:\n            count_arr[arr[i]] = count_arr[arr[i]]+1\n        else:\n            count_arr[arr[i]] = 1\n    max_count = 0\n    res = 0\n    for key, val in count_arr.items():\n        if val > max_count:\n            res = key\n            max_count = val\n    return res-1","language":"python"}
{"task_id":"MBPP\/541","completion":"\tsum = 0\n\tfor i in range(1, n):\n\t\tif n%i == 0:\n\t\t\tsum += i\n\treturn sum > n","language":"python"}
{"task_id":"MBPP\/542","completion":"  return re.sub(r\" |,|\\.\", \":\", text)","language":"python"}
{"task_id":"MBPP\/543","completion":"    pass","language":"python"}
{"task_id":"MBPP\/544","completion":"  new_list = []\n  for i in test_list:\n    for j in i:\n      new_list.append(j)\n  return \" \".join(new_list)","language":"python"}
{"task_id":"MBPP\/545","completion":"    return ((n & 0xF) << 4) | ((n & 0xF0) >> 4)","language":"python"}
{"task_id":"MBPP\/546","completion":" last_index = 0\n for index,char in enumerate(string):\n  if char == char:\n   last_index = index\n return last_index","language":"python"}
{"task_id":"MBPP\/547","completion":"    # Your code here\n    pass","language":"python"}
{"task_id":"MBPP\/548","completion":"\tif not arr:\n\t\treturn 0\n\tif len(arr) == 1:\n\t\treturn 1\n\n\tlength = [1 for x in range(len(arr))]\n\tfor i in range(1, len(arr)):\n\t\tfor j in range(i):\n\t\t\tif arr[i] > arr[j]:\n\t\t\t\tlength[i] = max(length[i], length[j] + 1)\n\treturn max(length)","language":"python"}
{"task_id":"MBPP\/549","completion":"    \n    Sum = 0\n    for i in range(1,n+1,2):\n        Sum += i**5\n    return Sum","language":"python"}
{"task_id":"MBPP\/550","completion":"    # code here\n\n    if low==high:\n        return arr[low]\n    if low>high:\n        return -1\n    mid=(low+high)\/\/2\n    left=find_Max(arr,low,mid-1)\n    right=find_Max(arr,mid+1,high)\n    if left<right:\n        return left\n    else:\n        return right","language":"python"}
{"task_id":"MBPP\/551","completion":"   \n   list1_out = []\n   for sublist in list1:\n      list1_out.append(sublist[n])\n   return list1_out","language":"python"}
{"task_id":"MBPP\/552","completion":"  if len(seq_nums)==0:\n    return \"Non Linear Sequence\"\n  for i in range(0, len(seq_nums)-1):\n    if seq_nums[i+1] - seq_nums[i] != 1:\n      return \"Non Linear Sequence\"\n  return \"Linear Sequence\"","language":"python"}
{"task_id":"MBPP\/553","completion":"  result = 0.0\n  for i in range(len(test_tup)):\n    result = result + float(test_tup[i]) \/ (10 ** (len(test_tup) - 1 - i))\n  return result","language":"python"}
{"task_id":"MBPP\/554","completion":"    output = []\n    for i in list:\n        if i % 2 != 0:\n            output.append(i)\n    return output","language":"python"}
{"task_id":"MBPP\/555","completion":"    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    sum = sum*(n\/2)**3\n    return sum - sum(range(1,n+1))","language":"python"}
{"task_id":"MBPP\/556","completion":"    count = 0\n    for i in range(N-1) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) % 2 != 0 :\n                count += 1\n    return count","language":"python"}
{"task_id":"MBPP\/557","completion":" new_string = \"\"\n for char in string:\n     if char.isupper():\n         new_string += char.lower()\n     else:\n         new_string += char.upper()\n return new_string","language":"python"}
{"task_id":"MBPP\/558","completion":"         #code here\n\n         #return abs(n1 - n2)\n         return sum(map(int, list(str(abs(n1 - n2)))))","language":"python"}
{"task_id":"MBPP\/559","completion":"  max_so_far = 0\n  max_here = 0\n  for i in range(0, size):\n    max_here += a[i]\n    if max_here < 0:\n      max_here = 0\n    if max_so_far < max_here:\n      max_so_far = max_here\n  return max_so_far","language":"python"}
{"task_id":"MBPP\/560","completion":"  tuple_list = [test_tup1, test_tup2]\n  final_tup = tuple(set().union(*tuple_list))\n  return final_tup","language":"python"}
{"task_id":"MBPP\/561","completion":"  dict_of_lists = {}\n  for pair in test_list:\n    if pair in dict_of_lists.keys():\n      dict_of_lists[pair].append(pair[1])\n    else:\n      dict_of_lists[pair] = []\n  return dict_of_lists","language":"python"}
{"task_id":"MBPP\/562","completion":"    max_length = 0\n    temp_len = 0\n    if(len(lst) == 0):\n        return max_length\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            temp_len = len(lst[i:j+1])\n            if(temp_len > max_length):\n                max_length = temp_len\n    return max_length","language":"python"}
{"task_id":"MBPP\/563","completion":" return","language":"python"}
{"task_id":"MBPP\/564","completion":"    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count += 1\n    return count","language":"python"}
{"task_id":"MBPP\/565","completion":"    return list(word)","language":"python"}
{"task_id":"MBPP\/566","completion":"  assert n >= 0\n  if n < 10:\n    return n\n  return n % 10 + sum_digits(n\/\/10)","language":"python"}
{"task_id":"MBPP\/567","completion":"    for i in range(1, len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    return True","language":"python"}
{"task_id":"MBPP\/568","completion":" a_list = []\n for i in range(0,length):\n     a_list.append({})\n return a_list","language":"python"}
{"task_id":"MBPP\/569","completion":"","language":"python"}
{"task_id":"MBPP\/570","completion":"    char_removed = []\n    for char in charlist:\n        char_removed.extend([i.replace(char, '') for i in list1])\n    return char_removed","language":"python"}
{"task_id":"MBPP\/571","completion":"\t# Find the maximum value in the array\n\tmax_v = max(arr)\n\t# Find the minimum value in the array\n\tmin_v = min(arr)\n\t# If the max value is less than K, then return 0\n\tif max_v < K:\n\t\treturn 0\n\t# Initialize the sum and maximum_diff for the current window size\n\tsum = max_v * max_v\n\tmax_diff = 0\n\t# Iterate over the array\n\tfor i in range(N):\n\t\t# Find the max sum of the current window\n\t\ttemp = sum - arr[i]\n\t\t# Update the max diff if the max sum is less than the current window\n\t\tif temp < 0:\n\t\t\tmax_diff = temp\n\t\t# Find the max sum of the current window - the current element\n\t\tsum -= arr[i]\n\t\t# Update the sum\n\t\tsum += arr[i + 1]\n\t# Return the max diff\n\treturn max_diff","language":"python"}
{"task_id":"MBPP\/572","completion":"  a = set()\n  b = set()\n  for num in nums:\n    if num not in a:\n      a.add(num)\n    elif num not in b:\n      b.add(num)\n  a = sorted(list(a))\n  b = sorted(list(b))\n  return a + b","language":"python"}
{"task_id":"MBPP\/573","completion":"    if not list_data:\n        return 0\n    # Using the set() constructor to eliminate the repeated elements and then calculating the product\n    product = 1\n    for i in set(list_data):\n        product = product * i\n    return product","language":"python"}
{"task_id":"MBPP\/574","completion":"  return 2*3.14*r*h+2*3.14*r**2","language":"python"}
{"task_id":"MBPP\/575","completion":"    \n    # Your code here\n    if A%L != 0:\n        return N*(A\/\/L)+L\n    elif A%R != 0:\n        return N*(A\/\/R)+R\n    elif A%L != 0 and A%R != 0:\n        return N*A","language":"python"}
{"task_id":"MBPP\/576","completion":"    A_set = set()\n    for a in A:\n        A_set.add(a)\n    \n    for b in B:\n        if b in A_set:\n            A_set.remove(b)\n        else:\n            return False\n    \n    return True","language":"python"}
{"task_id":"MBPP\/577","completion":"    import math\n    if n < 0:\n        return 0\n    else:\n        return n % 10","language":"python"}
{"task_id":"MBPP\/578","completion":"    temp_list = list1+list2+list3\n    temp_list.sort()\n    return temp_list","language":"python"}
{"task_id":"MBPP\/579","completion":"  return test_tup1 + test_tup2","language":"python"}
{"task_id":"MBPP\/580","completion":"  if isinstance(test_tuple, int):\n    return test_tuple\n  elif isinstance(test_tuple, tuple):\n    if len(test_tuple) == 0:\n      return test_tuple\n    elif len(test_tuple) == 1:\n      return test_tuple[0]\n    else:\n      return tuple(filter(lambda n: n % 2 == 0, test_tuple))","language":"python"}
{"task_id":"MBPP\/581","completion":"    return 1\/4*b*s","language":"python"}
{"task_id":"MBPP\/582","completion":"  return bool(len(dict1)) == False","language":"python"}
{"task_id":"MBPP\/583","completion":"    res = 1\n    for i in range(2,num+1):\n        res *= i\n        res \/= (i+1)\n    return int(res)","language":"python"}
{"task_id":"MBPP\/584","completion":"  return","language":"python"}
{"task_id":"MBPP\/585","completion":"  from heapq import *\n  pq = []\n  for item in items:\n    heappush(pq,(-item['price'],item['name']))\n  return [heappop(pq)[1] for i in range(n)]","language":"python"}
{"task_id":"MBPP\/586","completion":"   m = len(a)\/\/k\n   return [a[i] for i in range(m,m*k,k)] + [a[i] for i in range(m*k,len(a),k)]","language":"python"}
{"task_id":"MBPP\/587","completion":"  return tuple(listx)","language":"python"}
{"task_id":"MBPP\/588","completion":"     return max(nums)-min(nums)","language":"python"}
{"task_id":"MBPP\/589","completion":"    squares = []\n    i = a\n    while i <= b:\n        if i ** 2 > b:\n            break\n        elif i ** 2 == b:\n            squares.append(i)\n        i += 1\n    return squares","language":"python"}
{"task_id":"MBPP\/590","completion":" def polar_to_rect(x,y):\n     return ((x*x, y*y), (2*x*y, 2*y*y))\n return polar_to_rect(x,y)","language":"python"}
{"task_id":"MBPP\/591","completion":"    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList","language":"python"}
{"task_id":"MBPP\/592","completion":"    coef = [1, 1, 2, 6, 24]\n    return sum([a * b for a, b in zip(coef[0:n], coef[1:n+1])])","language":"python"}
{"task_id":"MBPP\/593","completion":" pass","language":"python"}
{"task_id":"MBPP\/594","completion":"    even = []\n    odd = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return abs(sum(even) - sum(odd))","language":"python"}
{"task_id":"MBPP\/595","completion":"    if str1 == str2 :\n        return \"Not Possible\"\n    d = dict()\n    for ch in str1 :\n        d[ch] = 0\n    for ch in str1 :\n        d[ch] += 1\n    count = 0\n    for ch in str2 :\n        if ch in d :\n            if d[ch] == 0 :\n                return \"Not Possible\"\n            else :\n                d[ch] -= 1\n        else :\n            return \"Not Possible\"\n    for ch in d :\n        count += d[ch]\n    return count","language":"python"}
{"task_id":"MBPP\/596","completion":"  count = 0\n  for i in tuple_list:\n    count += 1\n  return count","language":"python"}
{"task_id":"MBPP\/597","completion":"\tpass","language":"python"}
{"task_id":"MBPP\/598","completion":"  \n # number = str(number)\n # sum = 0\n # for i in number:\n #     sum += int(i)**len(number)\n # return True if sum == int(number) else False\n\n # sum = 0\n # for i in number:\n #     sum += int(i)**len(number)\n # return True if sum == int(number) else False\n\n # sum = 0\n # while number > 0:\n #     digit = number % 10\n #     sum += digit**len(number)\n #     number \/\/= 10\n # return True if sum == int(number) else False\n \n return number == sum([int(x) ** len(str(number)) for x in str(number)])","language":"python"}
{"task_id":"MBPP\/599","completion":" sum = 0\n average = 0\n\n for n in range(number):\n    sum += n+1\n\n average = sum \/ number\n\n return sum, average","language":"python"}
{"task_id":"MBPP\/600","completion":"    return n & 1 == 0","language":"python"}
{"task_id":"MBPP\/601","completion":"\t# Find the largest number in the array\n\tmax = 0\n\t# Set up a hash map to keep track of all of the chains we've seen so far.\n\tseen = {}\n\tfor i in range(0, n):\n\t\tfor j in range(i+1, n):\n\t\t\t# Calculate the pair that we're considering\n\t\t\tpair = Pair(arr[i].key, arr[j].key)\n\t\t\t# Calculate the length of the chain\n\t\t\tchain_length = len(chain_of(pair, seen))\n\t\t\t# Update the maximum chain if we find a longer one\n\t\t\tif chain_length > max:\n\t\t\t\tmax = chain_length\n\t\t\t# Add the chain we've seen to the map so we don't have to keep doing it for every item\n\t\t\tseen[pair] = 1\n\treturn max","language":"python"}
{"task_id":"MBPP\/602","completion":"  # Your code here\n  i = 0\n  j = 1\n  length = len(str1)\n  while j < length:\n    if str1[i] == str1[j]:\n      return str1[i]\n    i = j\n    j += 1\n  return 'None'","language":"python"}
{"task_id":"MBPP\/603","completion":"\tl = [1]\n\tfor i in range(2,n+1):\n\t\tfor j in range(len(l)-1,0,-1):\n\t\t\tif i > l[j]:\n\t\t\t\tbreak\n\t\t\tl.append(l[j]+i)\n\treturn l[1:]","language":"python"}
{"task_id":"MBPP\/604","completion":"        return \" \".join(s.split()[::-1])","language":"python"}
{"task_id":"MBPP\/605","completion":"  if num < 0:\n    return False\n  elif num == 0 or num == 1:\n    return False\n  elif num == 2 or num == 3 or num == 5:\n    return True\n  else:\n    for i in range(2, num):\n      if num % i == 0:\n        return False\n    return True","language":"python"}
{"task_id":"MBPP\/606","completion":" return degree * (3.14\/180.0)","language":"python"}
{"task_id":"MBPP\/607","completion":"  import re\n  location = []\n  index = []\n  for match in re.finditer(pattern, text):\n    location.append(match.span())\n    index.append(match.start())\n  return location, index","language":"python"}
{"task_id":"MBPP\/608","completion":"    bell = 2 ** n\n    return bell","language":"python"}
{"task_id":"MBPP\/609","completion":"    return min(A,min(B,N\/\/2))","language":"python"}
{"task_id":"MBPP\/610","completion":"    if list1 == []:\n        return list1\n    if L == 1:\n        return list1[1:]\n    elif L > len(list1):\n        return []\n    else:\n        return [list1[i] for i in range(L-1, len(list1)) if i % (L-1) != 0] + list1[:(L-1)*int(len(list1)\/L)]","language":"python"}
{"task_id":"MBPP\/611","completion":"  pass","language":"python"}
{"task_id":"MBPP\/612","completion":"    if len(lst) > 1:\n        return [lst[0]] + merge(lst[1:])\n    else:\n        return lst","language":"python"}
{"task_id":"MBPP\/613","completion":"  pass","language":"python"}
{"task_id":"MBPP\/614","completion":"  new_list = list(set([sum(test_list, ())]))\n  return sum(new_list)","language":"python"}
{"task_id":"MBPP\/615","completion":"    \"*** YOUR CODE HERE ***\"\n    pass","language":"python"}
{"task_id":"MBPP\/616","completion":"  # Your code here\n\n  tuple_a = ()\n  tuple_b = ()\n\n  if len(test_tup1) < len(test_tup2):\n    tuple_a = test_tup1\n    tuple_b = test_tup2\n  else:\n    tuple_a = test_tup2\n    tuple_b = test_tup1\n\n  return tuple_a[0] % tuple_b[0], tuple_a[1] % tuple_b[1], tuple_a[2] % tuple_b[2], tuple_a[3] % tuple_b[3]","language":"python"}
{"task_id":"MBPP\/617","completion":"    return min(abs(a - d), abs(a - d) - abs(b - d))","language":"python"}
{"task_id":"MBPP\/618","completion":"  return list(map(lambda x,y: x\/y,nums1,nums2))","language":"python"}
{"task_id":"MBPP\/619","completion":"  numbers = [str(i) for i in range(10)]\n  numbers = '0123456789'\n  test_str = [test_str[i] for i in range(len(test_str)) if test_str[i].isalpha()]\n  # print(test_str)\n  for i in test_str:\n    # print(i)\n    for j in numbers:\n      if i.isalpha() and j == i[0]:\n        continue\n      if j not in i:\n        # print(j)\n        # print(i)\n        i = i.replace(j, '')\n        # print(i)\n        i += j\n        # print(i)\n  return ''.join(test_str)","language":"python"}
{"task_id":"MBPP\/620","completion":"\treturn","language":"python"}
{"task_id":"MBPP\/621","completion":"  for i in range(0, len(test_list)):\n    if test_list[i].isnumeric():\n      num = int(test_list[i])\n      new_num = num + K\n      test_list[i] = str(new_num)\n  return test_list","language":"python"}
{"task_id":"MBPP\/622","completion":"  if n % 2 == 1:\n    median = (arr1[n\/\/2] + arr2[n\/\/2])\/2\n    return median\n  else:\n    median = (arr1[n\/\/2] + arr2[n\/\/2 - 1])\/2\n    return median","language":"python"}
{"task_id":"MBPP\/623","completion":" nums_pow = map(lambda x: x ** n, nums)\n return nums_pow","language":"python"}
{"task_id":"MBPP\/624","completion":"  return string.upper()","language":"python"}
{"task_id":"MBPP\/625","completion":"    return newList[-1] + newList[1:-1] + newList[0]","language":"python"}
{"task_id":"MBPP\/626","completion":"    #check the input value\n    if r < 0:\n        return -1\n    \n    #calculate\n    a = r*r*3.14\n    return a","language":"python"}
{"task_id":"MBPP\/627","completion":"    if start>end:\n        return -1\n    elif start==end:\n        return start\n    else:\n        mid=(start+end)\/\/2\n        if array[mid]==mid:\n            return find_First_Missing(array,mid+1,end)\n        elif array[mid]>mid:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,mid+1,end)","language":"python"}
{"task_id":"MBPP\/628","completion":"  return string.replace(' ', '%20')","language":"python"}
{"task_id":"MBPP\/629","completion":"    return list [::2]","language":"python"}
{"task_id":"MBPP\/630","completion":"  coordinates = []\n  for i in range(len(test_tup) - 1):\n    coordinates.append([test_tup[i], test_tup[i + 1]])\n  return coordinates","language":"python"}
{"task_id":"MBPP\/631","completion":"  import re\n  return re.sub('\\s','_',text).strip('_')","language":"python"}
{"task_id":"MBPP\/632","completion":"    pass","language":"python"}
{"task_id":"MBPP\/633","completion":"    ## code here\n\n    return 0","language":"python"}
{"task_id":"MBPP\/634","completion":"    \n    sum = 0\n    for i in range(0, n):\n        sum += (4**(i))*(2**i)\n    return sum","language":"python"}
{"task_id":"MBPP\/635","completion":"    pass","language":"python"}
{"task_id":"MBPP\/636","completion":"    \n    # Your code here\n    return \"Yes\"","language":"python"}
{"task_id":"MBPP\/637","completion":"  if actual_cost<sale_amount:\n    return True\n  else:\n    return False","language":"python"}
{"task_id":"MBPP\/638","completion":" pass","language":"python"}
{"task_id":"MBPP\/639","completion":"  return sum(len(name) for name in sample_names if not name.startswith(\"a\"))","language":"python"}
{"task_id":"MBPP\/640","completion":" # your code here\n #return (items[0].split(\"(\")[0], )\n def find_parenthesis(sub_str):\n    i = 0\n    while i < len(sub_str):\n        if sub_str[i] == \"(\":\n            j = i + 1\n            while j < len(sub_str):\n                if sub_str[j] == \"(\":\n                    j = j + 1\n                elif sub_str[j] == \")\":\n                    break\n                else:\n                    j = j + 1\n            if j == len(sub_str) :\n                return i\n        i = i + 1\n    return -1\n \n def remove_parenthesis_2(items):\n    if len(items) < 2:\n        return items\n    elif len(items) == 2:\n        if items[1] == \")\":\n            items.pop()\n        return items\n    else:\n        first = items[0]","language":"python"}
{"task_id":"MBPP\/641","completion":"\tpass","language":"python"}
{"task_id":"MBPP\/642","completion":"","language":"python"}
{"task_id":"MBPP\/643","completion":"        pass","language":"python"}
{"task_id":"MBPP\/644","completion":"  return input[:k][::-1] + input[k:]","language":"python"}
{"task_id":"MBPP\/645","completion":"  result = 1\n  for x in range(0, K):\n    result *= test_list[x][K-x-1]\n  return result","language":"python"}
{"task_id":"MBPP\/646","completion":"    return (K*K*N)**(1\/3)","language":"python"}
{"task_id":"MBPP\/647","completion":" # +++your code here+++\n return","language":"python"}
{"task_id":"MBPP\/648","completion":"    # Your code here\n    return lst","language":"python"}
{"task_id":"MBPP\/649","completion":"    # Initialize result\n    result = 0\n    # Iterate from m to n\n    for i in range(m, n+1):\n        # Add current index value to result\n        result += nums[i]\n    # Return result\n    return result","language":"python"}
{"task_id":"MBPP\/650","completion":"    #Your code here\n\n    return","language":"python"}
{"task_id":"MBPP\/651","completion":"  if sorted(test_tup1) == sorted(test_tup2):\n    return True\n  return False","language":"python"}
{"task_id":"MBPP\/652","completion":"  #Initialize the list to be returned\n  matrix = []\n\n  #Loop through the first index of the list\n  for i in range(len(test_list)):\n\n    #Initialize the temp list\n    temp_list = []\n\n    #Loop through the second index of the list\n    for j in range(len(test_list[i])):\n\n      #Append the tuple to the temp list\n      temp_list.append(test_list[i][j])\n\n    #Append the temp list to the matrix\n    matrix.append(temp_list)\n\n  return matrix","language":"python"}
{"task_id":"MBPP\/653","completion":"    # import collections\n    # return collections.defaultdict(list, {key:[] for key in l[0][:1]})\n    import collections\n\n    d = collections.defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d","language":"python"}
{"task_id":"MBPP\/654","completion":"  return l*2 + b*2","language":"python"}
{"task_id":"MBPP\/655","completion":"    if n == 1 :\n        return 1\n\n    total = 0\n    for i in range(1,n+1) :\n        total += (i**5)\n\n    return total","language":"python"}
{"task_id":"MBPP\/656","completion":"","language":"python"}
{"task_id":"MBPP\/657","completion":"    dig = 0\n    for i in str(n):\n        dig = int(i)\n    return dig","language":"python"}
{"task_id":"MBPP\/658","completion":"    # Your code here\n    return None","language":"python"}
{"task_id":"MBPP\/659","completion":"    output = []\n    for item in x:\n        if x.count(item) > 1:\n            output.append(item)\n    print(output)","language":"python"}
{"task_id":"MBPP\/660","completion":"    if l1 < l2 < r1 < r2:\n        return l1,r2\n    elif l2 < l1 < r2 < r1:\n        return l2,r1\n    elif l1 < l2 < r1 < r2:\n        return l1,r1\n    else:\n        return l2,r2","language":"python"}
{"task_id":"MBPP\/661","completion":"\ti = 0\n\tj = 1\n\tk = 2\n\tmax_sum = 0\n\tmax_sum_so_far = 0\n\t\n\twhile j < n:\n\t\tif arr[j] + arr[j - 1] + arr[j - 2] > arr[j] + arr[j - 1] + arr[j - 2] + arr[j + 1]:\n\t\t\tmax_sum_so_far = max_sum_so_far + arr[j] + arr[j - 1] + arr[j - 2]\n\t\t\tif max_sum_so_far > max_sum:\n\t\t\t\tmax_sum = max_sum_so_far\n\t\t\tj = j + 1\n\t\telse:\n\t\t\tmax_sum_so_far = 0\n\t\t\ti = i + 1\n\t\t\tif i < n:\n\t\t\t\tj = j + 1\n\t\t\telse:\n\t\t\t\tk = k","language":"python"}
{"task_id":"MBPP\/662","completion":"  return dict(sorted(dict1.items(), key=lambda x: x[1]))","language":"python"}
{"task_id":"MBPP\/663","completion":"\tassert x < n, \"x >= n\"\n\tassert y < x, \"y >= x\"\n\tassert n % x == 0, \"n % x != 0\"\n\n\tk = 0\n\twhile k < n:\n\t\tk = k + y * x\n\t\tx = x + 1\n\n\treturn k","language":"python"}
{"task_id":"MBPP\/664","completion":"    even_sum = 0\n    even_total = 0\n    for i in range(n) :\n        even_num = input(\"Enter the even number : \")\n        if even_num % 2 == 0 :\n            even_sum = even_sum + even_num\n            even_total = even_total + 1\n    return even_sum \/ even_total","language":"python"}
{"task_id":"MBPP\/665","completion":"    pass","language":"python"}
{"task_id":"MBPP\/666","completion":" count=0\n for i in string:\n  if i==char:\n   count+=1\n return count","language":"python"}
{"task_id":"MBPP\/667","completion":"    count = 0\n    for i in range(len(string)):\n        if string[i] in vowels:\n            count = count + 1\n    return count","language":"python"}
{"task_id":"MBPP\/668","completion":"    return string.replace(char,char*2)","language":"python"}
{"task_id":"MBPP\/669","completion":"\timport re\n\n\t# write the regex pattern\n\tpattern = r\"\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b\"\n\tif re.match(pattern, Ip):\n\t\treturn \"Valid IP address\"\n\telse:\n\t\treturn \"Invalid IP address\"","language":"python"}
{"task_id":"MBPP\/670","completion":"    for i in range(len(nums) - 1):\n        if nums[i] < nums[i + 1]:\n            return False\n    return True","language":"python"}
{"task_id":"MBPP\/671","completion":"    if n < 0:\n        n = 0xFFFFFFFF + n + 1\n    return n | (n - 1)","language":"python"}
{"task_id":"MBPP\/672","completion":"    pass","language":"python"}
{"task_id":"MBPP\/673","completion":"    num = 0\n    for n in list:\n        num = num * 10 + n\n    return num","language":"python"}
{"task_id":"MBPP\/674","completion":"  # Solution 1\n  string = \" \".join(sorted(string.split(), key=lambda x: (len(x), x)))\n  print(string)\n\n  # Solution 2\n  def no_dups(string):\n    seen = set()\n    seen_add = seen.add\n    return ' '.join(x for x in string.split() if not (x in seen or seen_add(x)))\n  print(no_dups(string))\n\n  # Solution 3\n  from collections import OrderedDict\n  from collections import Counter\n  string = \" \".join(OrderedDict.fromkeys(string.split()))\n  print(string)\n\n  # Solution 4\n  import re\n  string = re.sub(r\"\\b(\\w+)\\b\", r\"\\1\", string)\n  print(string)","language":"python"}
{"task_id":"MBPP\/675","completion":"    if x+y > m and x+y < n:\n        return 20\n    else:\n        return x+y","language":"python"}
{"task_id":"MBPP\/676","completion":"  return re.sub('[^A-Za-z0-9]+', '', text1)","language":"python"}
{"task_id":"MBPP\/677","completion":" return a + b > c and a + c > b and b + c > a","language":"python"}
{"task_id":"MBPP\/678","completion":"  if not isinstance(str1, str):\n    raise Exception(\"Argument should be of type string\")\n  return str1.replace(' ', '')","language":"python"}
{"task_id":"MBPP\/679","completion":"  return ditionary[key]","language":"python"}
{"task_id":"MBPP\/680","completion":"    if nums[1] > nums[0]:\n        return True\n    for i in range(1, len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            return True\n    return False","language":"python"}
{"task_id":"MBPP\/681","completion":"    for i in range(2,n\/\/2+1):\n        if n%i==0:\n            return i\n    return n","language":"python"}
{"task_id":"MBPP\/682","completion":"  return list(map(lambda x,y:x*y,nums1,nums2))","language":"python"}
{"task_id":"MBPP\/683","completion":"    sum = 0\n    for i in range(1,n) :\n        sum += i*i\n    return n == sum","language":"python"}
{"task_id":"MBPP\/684","completion":"    count=0\n    for i in range(len(str)):\n        if str[i]==x:\n            count+=1\n    return count","language":"python"}
{"task_id":"MBPP\/685","completion":"    primes = [2]\n    result = 1\n    for i in range(3,n+1,2):\n        is_prime = True\n        for prime in primes:\n            if i%prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            result += i\n    return result","language":"python"}
{"task_id":"MBPP\/686","completion":"  counter = dict()\n\n  for i in test_tup:\n    if i not in counter:\n      counter[i] = 1\n    else:\n      counter[i] += 1\n  \n  return counter","language":"python"}
{"task_id":"MBPP\/687","completion":"\tif a < b:\n\t\ta, b = b, a\n\tif b == 0:\n\t\treturn a\n\treturn recur_gcd(b, a%b)","language":"python"}
{"task_id":"MBPP\/688","completion":"  return (a**2 + b**2)**0.5","language":"python"}
{"task_id":"MBPP\/689","completion":"\tcurrent_pos = 0\n\tsteps = 0\n\n\twhile current_pos < n-1:\n\t\t# check if we can reach the end\n\t\tif current_pos == n-1:\n\t\t\treturn steps\n\t\t# if can't, find the max\n\t\tmax_pos = arr[current_pos]\n\n\t\t# find the max element in remaining array\n\t\tfor i in range(1, max_pos+1):\n\t\t\tif current_pos+i < n:\n\t\t\t\tif arr[current_pos+i] > max_pos:\n\t\t\t\t\tmax_pos = arr[current_pos+i]\n\n\t\t# move current position to max position\n\t\tcurrent_pos = current_pos + max_pos\n\t\tsteps = steps + 1\n\n\treturn steps","language":"python"}
{"task_id":"MBPP\/690","completion":"    result = []\n    previous = None\n    for num in nums:\n        if previous is None:\n            previous = num\n        elif num == previous + 1:\n            previous = num\n        else:\n            result.append(previous * num)\n            previous = num\n    if previous:\n        result.append(previous * num)\n    return result","language":"python"}
{"task_id":"MBPP\/691","completion":"  # create an empty dictionary to store final values\n  dict = {}\n  # iterate through the given test_list\n  for item in test_list:\n    # check if first item in the list exists in the dictionary. if yes, then append the second item in the list.\n    # if not, then create an empty list and then append the second item in the list.\n    if item[0] in dict:\n      dict[item[0]].append(item[1])\n    else:\n      dict[item[0]] = []\n      dict[item[0]].append(item[1])\n  # return the dictionary\n  return dict","language":"python"}
{"task_id":"MBPP\/692","completion":"    # get the last digits of N and multiply with 10\n    digit1 = int(str(N)[-1]) * 10\n    digit2 = int(str(N)[-2]) * 10\n\n    return digit1 + digit2","language":"python"}
{"task_id":"MBPP\/693","completion":"  import re\n  return re.sub(r'\\s{2,}', ' ', text1)","language":"python"}
{"task_id":"MBPP\/694","completion":"  # solution\n  unique_values = set()\n  for k,v in test_dict.items():\n      unique_values = unique_values | set(v)\n  return list(unique_values)","language":"python"}
{"task_id":"MBPP\/695","completion":"  return all(test_tup1[i] > test_tup2[i] for i in range(len(test_tup2)))","language":"python"}
{"task_id":"MBPP\/696","completion":" list3 = [list(i) for i in zip(list1,list2)]\n return list3","language":"python"}
{"task_id":"MBPP\/697","completion":"   return len(list(filter(lambda n: n % 2 == 0, array_nums)))","language":"python"}
{"task_id":"MBPP\/698","completion":"  return","language":"python"}
{"task_id":"MBPP\/699","completion":"    for i in range(len(str1)):\n        if(str1[i] != str2[i]):\n            return(min_Swaps(str2, str1))\n    return (len(str1) + len(str2))","language":"python"}
{"task_id":"MBPP\/700","completion":"\tcounter = 0\n\tfor i in li:\n\t\tif min <= i <= max:\n\t\t\tcounter += 1\n\treturn counter","language":"python"}
{"task_id":"MBPP\/701","completion":"  n = len(arr)\n  leftsum = sum(arr[:n\/\/2])\n  rightsum = sum(arr[n\/\/2+1:])\n  if abs(leftsum - rightsum) < 2:\n    return n\/\/2 if abs(leftsum - rightsum) == 0 else -1\n  return n\/\/2 if rightsum > leftsum else -1","language":"python"}
{"task_id":"MBPP\/702","completion":"\tif not arr or n < 0 or k < 0:\n\t\traise ValueError\n\tresult = 0\n\tamin = min(arr)\n\tamax = max(arr)\n\tfor i in range(amin, amax + 1):\n\t\tif i <= k:\n\t\t\tcontinue\n\t\tif k >= amin:\n\t\t\tk = k - i\n\t\telse:\n\t\t\tbreak\n\t\tresult += 1\n\treturn result","language":"python"}
{"task_id":"MBPP\/703","completion":"  return True if d.get(x) else False","language":"python"}
{"task_id":"MBPP\/704","completion":"  sum = 0.0\n  for i in range(1, n+1):\n    sum += 1.0 \/ i\n  return sum","language":"python"}
{"task_id":"MBPP\/705","completion":"      l = []\n      for i in list1:\n          temp = []\n          for j in i:\n              if type(j) is list:\n                  temp.extend(j)\n              else:\n                  temp.append(j)\n          l.append(temp)\n      return sorted(l, key=lambda k: len(k), reverse=True)","language":"python"}
{"task_id":"MBPP\/706","completion":"","language":"python"}
{"task_id":"MBPP\/707","completion":"    count = 0\n    while n != 0 :\n        count += n & 1\n        n >>= 1\n    return count","language":"python"}
{"task_id":"MBPP\/708","completion":"    lst = list(string)\n    return lst","language":"python"}
{"task_id":"MBPP\/709","completion":"  a = {}\n  for i in test_list:\n    a[i[0]] = a.get(i[0], 0) + 1\n  print(a)\n  return a","language":"python"}
{"task_id":"MBPP\/710","completion":"  return (test_tup[0], test_tup[-1])","language":"python"}
{"task_id":"MBPP\/711","completion":"    product_even = 1\n    product_odd = 1\n    for i in range(len(str(n))):\n        if i % 2 == 0:\n            product_even *= int(str(n)[i])\n        else:\n            product_odd *= int(str(n)[i])\n    if product_even == product_odd:\n        return True\n    else:\n        return False","language":"python"}
{"task_id":"MBPP\/712","completion":" #create a new empty list to append the list elements in the new list if the element is not present in the new list\n #append the new list in list1\n #return the new list\n\n\n new_list = []\n\n for ele in list1:\n     if ele not in new_list:\n         new_list.append(ele)\n print(new_list)","language":"python"}
{"task_id":"MBPP\/713","completion":"  if (True in test_tup):\n    return True\n  return False","language":"python"}
{"task_id":"MBPP\/714","completion":"    fct = 2\n    if n == 1:\n        return 0\n    while n % fct != 0 and fct <= n \/ 2:\n        fct += 1\n    return 1 + count_Fac(n \/ fct) if fct <= n \/ 2 else 1","language":"python"}
{"task_id":"MBPP\/715","completion":"  return tuple(int(i) for i in test_str.split(\", \"))","language":"python"}
{"task_id":"MBPP\/716","completion":"  return 2*a + 2","language":"python"}
{"task_id":"MBPP\/717","completion":"    return sum((data - mean(data))*(data - mean(data)))\/len(data)","language":"python"}
{"task_id":"MBPP\/718","completion":"    result = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            result.append(list1[i])\n    return result","language":"python"}
{"task_id":"MBPP\/719","completion":"        if text.find('a') != -1:\n            return 'Found a match!'\n        return 'Not matched!'","language":"python"}
{"task_id":"MBPP\/720","completion":"  pass","language":"python"}
{"task_id":"MBPP\/721","completion":"\tpass","language":"python"}
{"task_id":"MBPP\/722","completion":"    return {name: student_data for name, student_data in students.items() if student_data[0] >= h and student_data[1] >= w}","language":"python"}
{"task_id":"MBPP\/723","completion":"    return (len(list(map(lambda a: (a[0], a[1]) if a[0] == a[1] else None,\n                          zip(nums1, nums2)))))","language":"python"}
{"task_id":"MBPP\/724","completion":"    sum = 0\n    for i in range(1, power + 1):\n        sum += base ** i\n    return sum","language":"python"}
{"task_id":"MBPP\/725","completion":"  # write your code here\n  return","language":"python"}
{"task_id":"MBPP\/726","completion":"  pass","language":"python"}
{"task_id":"MBPP\/727","completion":"  import re\n  return re.sub(r'[^a-zA-Z\\d]','',S)","language":"python"}
{"task_id":"MBPP\/728","completion":"  lst1_sum = [i + j for i,j in zip(lst1,lst2)]\n  return lst1_sum","language":"python"}
{"task_id":"MBPP\/729","completion":"  return list(map(lambda x,y:x+y,nums1,nums2))","language":"python"}
{"task_id":"MBPP\/730","completion":"    count = 0\n    index = 0\n    while index < len(nums):\n        if nums[index] == nums[index - 1]:\n            count = count + 1\n            index = index + 1\n        else:\n            if count > 1:\n                nums = nums[0:index-1] + nums[index+1:]\n            else:\n                index = index + 1\n            count = 0\n    if count > 1:\n        nums = nums[0:index-1] + nums[index+1:]\n    return nums","language":"python"}
{"task_id":"MBPP\/731","completion":"  return r**2 * (h\/2)**2","language":"python"}
{"task_id":"MBPP\/732","completion":" text = text.replace(' ', ':')\n text = text.replace(',', ':')\n text = text.replace('.', ':')\n return text","language":"python"}
{"task_id":"MBPP\/733","completion":"    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) \/\/ 2\n        if A[mid] == x:\n            while A[mid-1] == x and mid > 0:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1","language":"python"}
{"task_id":"MBPP\/734","completion":"    if n == 1:\n        return arr[0]\n    temp = [1]\n    for i in arr[1:n]:\n        temp.append(i * temp[-1])\n    return sum(temp)","language":"python"}
{"task_id":"MBPP\/735","completion":"    \n    return n ^ (n >> 1) ^ (n >> 2) ^ (n >> 4)","language":"python"}
{"task_id":"MBPP\/736","completion":"    left_idx = 0\n    right_idx = len(a) - 1\n\n    while left_idx <= right_idx:\n        middle_idx = (left_idx + right_idx) \/\/ 2\n        if a[middle_idx] < x:\n            left_idx = middle_idx + 1\n        else:\n            right_idx = middle_idx - 1\n\n    return right_idx","language":"python"}
{"task_id":"MBPP\/737","completion":"\timport re\n\tregex = re.compile(\"[aeiou]\", re.IGNORECASE)\n\tif regex.match(string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'","language":"python"}
{"task_id":"MBPP\/738","completion":"  return (1+1\/n)**(n-1)","language":"python"}
{"task_id":"MBPP\/739","completion":"    return ((9*(10**n-1)\/5)**2+1)","language":"python"}
{"task_id":"MBPP\/740","completion":"  # Here is a starting point.\n\n  test_dict = {}\n  for i in range(len(test_tup)):\n    if test_tup[i] not in test_dict:\n      test_dict[test_tup[i]] = test_tup[i+1]\n    else:\n      test_dict[test_tup[i]] = test_tup[i]\n  return test_dict","language":"python"}
{"task_id":"MBPP\/741","completion":"    ## code here\n    d = {}\n    for i in s :\n        d[i] = d.get(i, 0) + 1\n    for key, value in d.items() :\n        if value != 1 :\n            return False\n    return True","language":"python"}
{"task_id":"MBPP\/742","completion":"  from math import sqrt\n  return sqrt(3) \/ 4 * side ** 2","language":"python"}
{"task_id":"MBPP\/743","completion":"  if m > n:\n    return list1\n  temp = [0]*m\n  for i in range(m-1, -1, -1):\n    temp[i] = list1[i]\n  for i in range(m-1,n-1,-1):\n    list1[i] = list1[i-n]\n  for i in range(m-1,n-1,-1):\n    list1[i] = temp[i-m]\n  return list1","language":"python"}
{"task_id":"MBPP\/744","completion":"  for x in test_tup:\n    if x is None:\n      return True\n  return False","language":"python"}
{"task_id":"MBPP\/745","completion":"    # digits = set([int(digit) for digit in str(endnum)])\n    return [num for num in range(startnum, endnum + 1) if not any(num % digit == 0 for digit in range(1, 10))]","language":"python"}
{"task_id":"MBPP\/746","completion":"    import math\n    if a%360 == 0:\n        return None\n    else:\n        area = (4*r*math.sin(math.radians(a)\/2))**2\n        return area","language":"python"}
{"task_id":"MBPP\/747","completion":"\t# To store the dp table\n\t# dp[i][j][k] will be storing the length of LCS of X[0..i-1]\n\t# and Y[0..j-1] and Z[0..k-1]\n\tdp = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n\tfor i in range(m+1):\n\t\tfor j in range(n+1):\n\t\t\tfor k in range(o+1):\n\t\t\t\tif i == 0 or j == 0 or k == 0:\n\t\t\t\t\tdp[i][j][k] = 0\n\t\t\t\telif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n\t\t\t\t\tdp[i][j][k] = 1 + dp[i-1][j-1][k-1]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j][k] = max","language":"python"}
{"task_id":"MBPP\/748","completion":"  return re.sub(r'(?<=[A-Z])[a-z]+(?=[A-Z])', r' ', str1)","language":"python"}
{"task_id":"MBPP\/749","completion":"    # Create a new list to store the return values\n    ret_val = []\n    for i in nums_str:\n        ret_val.append(int(i))\n    # Sort the new list\n    ret_val.sort()\n    return ret_val\n    pass","language":"python"}
{"task_id":"MBPP\/750","completion":"  return test_list + [test_tup[i] for i in range(len(test_tup))]","language":"python"}
{"task_id":"MBPP\/751","completion":"    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True","language":"python"}
{"task_id":"MBPP\/752","completion":"\t\n\tj = 1\n\tfor i in range(1,n):\n\t\tj = j * i\n\t\n\treturn j","language":"python"}
{"task_id":"MBPP\/753","completion":"  test_list.sort(key=lambda x: x[1], reverse=True)\n  return test_list[:K]","language":"python"}
{"task_id":"MBPP\/754","completion":"    # solution by: Slash_R_C\n    return list(set(l1) & set(l2) & set(l3))","language":"python"}
{"task_id":"MBPP\/755","completion":"  # O(n) time | O(1) space\n  sorted_list = sorted(numbers)\n  if len(sorted_list) < 2:\n    return None\n  else:\n    second_smallest_num = sorted_list[1]\n    if numbers.count(second_smallest_num) == 1:\n      return second_smallest_num\n    else:\n      return None","language":"python"}
{"task_id":"MBPP\/756","completion":"        text_len = len(text)\n        # find the a\n        a_index = text.find(\"a\")\n\n        if a_index == -1:\n                return 'Not matched!'\n\n        # check for b or more\n        if text[a_index+1:a_index+2] == \"b\":\n                return 'Found a match!'\n\n        return 'Not matched!'","language":"python"}
{"task_id":"MBPP\/757","completion":"  pass","language":"python"}
{"task_id":"MBPP\/758","completion":"    pass","language":"python"}
{"task_id":"MBPP\/759","completion":"    return '.' in str(num) and 2 <= len(str(num).split('.')[1]) <= 5","language":"python"}
{"task_id":"MBPP\/760","completion":"    seen = set()\n    for x in arr:\n        if x in seen:\n            return 'NO'\n        else:\n            seen.add(x)\n    return 'YES'","language":"python"}
{"task_id":"MBPP\/761","completion":"    c = 2*d*math.cos(a\/180*3.14159265359)\n    return round(c,3)","language":"python"}
{"task_id":"MBPP\/762","completion":"  if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n    return False\n  else:\n    return True","language":"python"}
{"task_id":"MBPP\/763","completion":"    arr.sort()\n    return min([arr[i+1]-arr[i] for i in range(n-1)])","language":"python"}
{"task_id":"MBPP\/764","completion":"      return len([x for x in str if x.isnumeric()])","language":"python"}
{"task_id":"MBPP\/765","completion":"\tif n == 1:\n\t\treturn 11\n\n\tif n == 2:\n\t\treturn 13\n\n\treturn n + 2 * is_polite(n-2)","language":"python"}
{"task_id":"MBPP\/766","completion":"    pass","language":"python"}
{"task_id":"MBPP\/767","completion":"    arr.sort()\n    pairs_count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]+arr[j]==sum:\n                pairs_count+=1\n    return pairs_count","language":"python"}
{"task_id":"MBPP\/768","completion":"    return x & 1 == 1","language":"python"}
{"task_id":"MBPP\/769","completion":"    # get the difference between two lists\n    # initialize an empty list\n    li_diff = []\n    # loop through the elements in the first list\n    for element in li1:\n        # check if the current element of the first list is\n        # not in the second list\n        if element not in li2:\n            # if the element is not in the second list, add it\n            # to the new list\n            li_diff.append(element)\n    # loop through the elements in the second list\n    for element in li2:\n        # check if the current element of the second list is\n        # not in the first list\n        if element not in li1:\n            # if the element is not in the first list, add it\n            # to the new list\n            li_diff.append(element)\n    # return the list of elements in the two lists that are\n    # not in the first list\n    return li_diff","language":"python"}
{"task_id":"MBPP\/770","completion":"    if (n < 1) :\n        return 0\n    if (n == 1) :\n        return 1\n    return (odd_Num_Sum(n-1) + ((n-1)**4))","language":"python"}
{"task_id":"MBPP\/771","completion":"    stack = []\n    for c in exp:\n        if c == '{' or c == '[' or c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            if (stack.pop() == '{' and c == '}') or \\\n               (stack.pop() == '[' and c == ']') or \\\n               (stack.pop() == '(' and c == ')'):\n                continue\n            else:\n                return False\n    if len(stack) != 0:\n        return False\n    return True","language":"python"}
{"task_id":"MBPP\/772","completion":"  # remove k length from each word\n  words = test_str.split()\n  # set words to empty list\n  words = []\n  for word in test_str.split():\n    # check if the word has less than or equal to k letters\n    if len(word) <= K:\n      words.append(word)\n  # return the joined words\n  return \" \".join(words)","language":"python"}
{"task_id":"MBPP\/773","completion":" if not text or not pattern:\n  return \"\"\n if not isinstance(text,str) or not isinstance(pattern,str):\n  return \"Invalid data\"\n \n index=text.find(pattern)\n return index,text.index(pattern)+len(pattern)","language":"python"}
{"task_id":"MBPP\/774","completion":"\treturn \"Invalid Email\" if bool(re.match(r\"[^@]+@[^@]+\\.[^@]+\", email)) == True else \"Valid Email\"","language":"python"}
{"task_id":"MBPP\/775","completion":"\tif len(nums) == 0:\n\t\treturn False\n\telif len(nums) == 1:\n\t\treturn False\n\telse:\n\t\tif (len(nums) % 2) != 0:\n\t\t\treturn False\n\t\telse:\n\t\t\tfor i in range(0,len(nums)-1,2):\n\t\t\t\tif nums[i] % 2 != 0:\n\t\t\t\t\treturn False\n\t\t\treturn True","language":"python"}
{"task_id":"MBPP\/776","completion":"  vowels = 'aeiou'\n  count = 0\n  for char in test_str:\n    if char in vowels:\n      count += 1\n      if char == test_str[0]:\n        count -= 1\n      if char == test_str[-1]:\n        count -= 1\n  return count","language":"python"}
{"task_id":"MBPP\/777","completion":"    result = 0\n    for i in arr:\n        if i == n:\n            continue\n        else:\n            result += i\n    return result","language":"python"}
{"task_id":"MBPP\/778","completion":"    def is_consecutive(lst):\n        n = len(lst)\n        return all(lst[i] + 1 == lst[i + 1] for i in range(n - 1))\n\n    out = []\n    for item in list1:\n        if is_consecutive(out[-1]) and out[-1][-1] != item:\n            out[-1].append(item)\n        else:\n            out.append([item])\n    return out","language":"python"}
{"task_id":"MBPP\/779","completion":"    \n    # Your code here\n    \n    unique_lists = {}\n\n    for element in list1:\n        # element is a list -> add the elements to the list\n        if type(element) == list:\n            for i in element:\n                if i in unique_lists:\n                    unique_lists[i] += 1\n                else:\n                    unique_lists[i] = 1\n    return unique_lists","language":"python"}
{"task_id":"MBPP\/780","completion":"  pass","language":"python"}
{"task_id":"MBPP\/781","completion":"    divisors = [x for x in range(1, n) if n % x == 0]\n    if len(divisors) == 2:\n        return \"Even\"\n    else:\n        return \"Odd\"","language":"python"}
{"task_id":"MBPP\/782","completion":"    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            sum += arr[i]\n    return sum","language":"python"}
{"task_id":"MBPP\/783","completion":"    r, g, b = [x \/ 255 for x in (r, g, b)]\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)\/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)\/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)\/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df\/mx\n    v = mx\n    return round(h, 3), round(s, 3), round(v, 3)","language":"python"}
{"task_id":"MBPP\/784","completion":"    if len(list1)%2!=0:\n        return 0\n    else:\n        count =0\n        for i in list1:\n            if i % 2 == 0:\n                count += i\n        return count","language":"python"}
{"task_id":"MBPP\/785","completion":"  return tuple(int(i) for i in test_str[1:-1].split(','))","language":"python"}
{"task_id":"MBPP\/786","completion":"    pass","language":"python"}
{"task_id":"MBPP\/787","completion":"        # Your code here\n        return 'Not matched!' if text[0] != 'a' or text[2] != 'b' else 'Found a match!'","language":"python"}
{"task_id":"MBPP\/788","completion":"  pass","language":"python"}
{"task_id":"MBPP\/789","completion":"  return (s * l)","language":"python"}
{"task_id":"MBPP\/790","completion":"\ti = 0\n\tfor num in nums:\n\t\tif num % 2 == 0 and nums[i+1] % 2 == 0:\n\t\t\treturn True\n\t\ti += 1\n\treturn False","language":"python"}
{"task_id":"MBPP\/791","completion":"  # Remove the first element of the list.\n  test_tup = test_tup[1:]\n  # Remove the first element of the list.\n  if test_tup[0] == ():\n    test_tup = test_tup[1:]\n  # Remove the first element of the list.\n  if test_tup[0] == ():\n    test_tup = test_tup[1:]\n  return test_tup","language":"python"}
{"task_id":"MBPP\/792","completion":"    pass","language":"python"}
{"task_id":"MBPP\/793","completion":"    # your code here\n\n    return(arr.index(x))","language":"python"}
{"task_id":"MBPP\/794","completion":"        from re import search\n        result = search(r'a[\\w\\d]*b', text)\n        if result:\n            print(\"Found a match!\")\n        else:\n            print(\"Not matched!\")","language":"python"}
{"task_id":"MBPP\/795","completion":"","language":"python"}
{"task_id":"MBPP\/796","completion":"  sum = 0\n  for item in dict:\n    sum += dict[item]\n  return sum","language":"python"}
{"task_id":"MBPP\/797","completion":"    even_sum = 0\n    for i in range(l,r+1):\n        if(i%2==1):\n            even_sum += i\n    return even_sum","language":"python"}
{"task_id":"MBPP\/798","completion":"    pass","language":"python"}
{"task_id":"MBPP\/799","completion":"    return n<<d | n>>(32-d)","language":"python"}
{"task_id":"MBPP\/800","completion":" new_text = \"\"\n for i in range(len(text)):\n     if text[i] != \" \":\n         new_text += text[i]\n return new_text","language":"python"}
{"task_id":"MBPP\/801","completion":"  \"*** YOUR CODE HERE ***\"\n  return x == y == z","language":"python"}
{"task_id":"MBPP\/802","completion":"    start = 0\n    end = n-1\n\n    while start<=end:\n        mid = start + (end-start)\/\/2\n\n        if arr[mid]<arr[mid-1]:\n            #check left side\n            start = mid + 1\n        elif arr[mid]>arr[mid+1]:\n            #check right side\n            end = mid - 1\n        else:\n            #check center\n            return mid\n\n    return 0","language":"python"}
{"task_id":"MBPP\/803","completion":"    x = n\n    s = 0\n    while x > 0 :\n        s = s + (x % 10)\n        x = x \/\/ 10\n    if s ** 2 == n :\n        return True\n    return False","language":"python"}
{"task_id":"MBPP\/804","completion":"    if n == 1:\n        return False\n    else:\n        return arr[0]*arr[1] == arr[-1] * arr[-2]","language":"python"}
{"task_id":"MBPP\/805","completion":" if len(lists) == 0:\n   return []\n elif len(lists) == 1:\n   return lists[0]\n else:\n   sums = []\n   for i in range(len(lists)):\n     sums.append(sum(lists[i]))\n   sums.sort()\n   return lists[sums.index(sums[-1])]","language":"python"}
{"task_id":"MBPP\/806","completion":"  count = 0\n  count_run = 0\n  for i in range(len(test_str)):\n    if test_str[i] >= 'A' and test_str[i] <= 'Z':\n      count += 1\n    else:\n      count = 0\n    if count >= count_run:\n      count_run = count\n  return count_run","language":"python"}
{"task_id":"MBPP\/807","completion":"  return next((x for x in nums if x % 2 != 0), None)","language":"python"}
{"task_id":"MBPP\/808","completion":"  return len(set(test_tup).intersection(set(list(range(1, K + 1))))) == len(test_tup)","language":"python"}
{"task_id":"MBPP\/809","completion":"  # Your code here\n  return (test_tup1[i] < test_tup2[i] for i in range(len(test_tup1)))","language":"python"}
{"task_id":"MBPP\/810","completion":"  if a==0:\n    return []\n  if a>0:\n    return ['p']*a + count_variable(a-1,b,c,d)\n  if b>a:\n    return count_variable(a,b-1,c,d) + ['q']*c\n  if c>b:\n    return count_variable(a,b,c-1,d) + ['r']*d\n  if d>c:\n    return count_variable(a,b,c,d-1) + ['s']*b","language":"python"}
{"task_id":"MBPP\/811","completion":"  if len(test_list1) != len(test_list2):\n    return False\n\n  for i in range(len(test_list1)):\n    if test_list1[i] != test_list2[i]:\n      return False\n  return True","language":"python"}
{"task_id":"MBPP\/812","completion":"  return street.replace(\" Road\", \" Rd.\").replace(\" Road\", \" Rd.\")","language":"python"}
{"task_id":"MBPP\/813","completion":"    return len(str1)","language":"python"}
{"task_id":"MBPP\/814","completion":"  return p * q","language":"python"}
{"task_id":"MBPP\/815","completion":"  i = 0\n  while i < n:\n    if arr[i] == 0:\n      i += 1\n      continue\n    j = i + 1\n    while j < n and arr[j] == 0:\n      j += 1\n    k = j + 1\n    while k < n and arr[k] == 2:\n      k += 1\n    while j < k:\n      arr[j], arr[k] = arr[k], arr[j]\n      j += 1\n      k -= 1\n    if j - i > 1:\n      arr[i:j] = sorted(arr[i:j])\n    i = j","language":"python"}
{"task_id":"MBPP\/816","completion":"  for i in range(len(test_tup)):\n    test_tup[i] = ()\n  return tuple(test_tup)","language":"python"}
{"task_id":"MBPP\/817","completion":" return list(filter(lambda x: x % m == 0 or x % n == 0, nums))","language":"python"}
{"task_id":"MBPP\/818","completion":"      # code here\n      return str.lower().count(str)","language":"python"}
{"task_id":"MBPP\/819","completion":"    new_list = []\n    new_list1 = []\n    for x in lists:\n        new_list.append(x)\n    new_list1 = new_list\n    for x in new_list:\n        new_list1.remove(new_list[new_list.index(x)-1])\n    return new_list, new_list1\n    pass","language":"python"}
{"task_id":"MBPP\/820","completion":"  # Write your logic here\n  if monthnum1 == 2 or monthnum1 == 4 or monthnum1 == 6 or monthnum1 == 9 or monthnum1 == 11:\n    return True\n  else:\n    return False","language":"python"}
{"task_id":"MBPP\/821","completion":"    \n    output = {}\n    \n    for key,value in dict1.items():\n        output[key] = value\n    \n    for key,value in dict2.items():\n        if key not in output:\n            output[key] = value\n        else:\n            output[key] = [value, output[key]]\n    \n    return output","language":"python"}
{"task_id":"MBPP\/822","completion":" if \"a\" in p or \"A\" in p or \"B\" in p or \"c\" in p or \"C\" in p or \"d\" in p or \"D\" in p or \"e\" in p or \"E\" in p or \"f\" in p or \"F\" in p or \"g\" in p or \"G\" in p:\n  return False\n return True","language":"python"}
{"task_id":"MBPP\/823","completion":"  import re\n  if re.match(\"^\" + sample + \"[^a-z]*$\", string, re.IGNORECASE) :\n    return \"string starts with the given substring\"\n  else :\n    return \"string doesnt start with the given substring\"","language":"python"}
{"task_id":"MBPP\/824","completion":"    l = [n for n in l if n % 2 == 0]\n    return l","language":"python"}
{"task_id":"MBPP\/825","completion":"    new_list = []\n    for i in range(len(list_index)):\n        new_list.append(nums[list_index[i]])\n    return new_list","language":"python"}
{"task_id":"MBPP\/826","completion":"    if a == b == c:\n        return \"Right-angled Triangle\"\n    elif a == b != c or b == c != a or c == a != b:\n        return \"Acute-angled Triangle\"\n    else:\n        return \"Obtuse-angled Triangle\"","language":"python"}
{"task_id":"MBPP\/827","completion":"    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i][C]\n    return sum","language":"python"}
{"task_id":"MBPP\/828","completion":"  alpha = 0\n  dig = 0\n  spl = 0\n  for i in string:\n    if i.isalpha():\n      alpha += 1\n    elif i.isdigit():\n      dig += 1\n    elif i.isspace():\n      spl += 1\n    else:\n      pass\n  return alpha,dig,spl","language":"python"}
{"task_id":"MBPP\/829","completion":"\tfrequent = {}\n\tfor i in input:\n\t\tif i in frequent.keys():\n\t\t\tfrequent[i] += 1\n\t\telse:\n\t\t\tfrequent[i] = 1\n\tmax_value = max(frequent.values())\n\tfor key, value in frequent.items():\n\t\tif value == max_value:\n\t\t\treturn key","language":"python"}
{"task_id":"MBPP\/830","completion":"    import math\n    if digits < 0:\n        raise ValueError(\"Number of digits must be positive.\")\n    d = math.pow(10,digits)\n    return math.ceil(a*d)\/d","language":"python"}
{"task_id":"MBPP\/831","completion":"","language":"python"}
{"task_id":"MBPP\/832","completion":"\tpass","language":"python"}
{"task_id":"MBPP\/833","completion":"    return [key for key, value in dict.items()]","language":"python"}
{"task_id":"MBPP\/834","completion":"        pass","language":"python"}
{"task_id":"MBPP\/835","completion":"    \"*** YOUR CODE HERE ***\"\n    return ((y2-y1)\/(x2-x1))","language":"python"}
{"task_id":"MBPP\/836","completion":"\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in range(0,size):\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far","language":"python"}
{"task_id":"MBPP\/837","completion":"    return sum([x*x*x for x in range(1, n+1) if x%2!=0])","language":"python"}
{"task_id":"MBPP\/838","completion":"    count = 0\n    for i in range(0, len(s1)) :\n        if s1[i] != s2[i] :\n            count += 1\n    return count","language":"python"}
{"task_id":"MBPP\/839","completion":"\tnew_tuple = sorted(tup)\n\treturn new_tuple","language":"python"}
{"task_id":"MBPP\/840","completion":"    if(a**2-4*b*c<0):\n        return(\"No\")\n    elif(a**2-4*b*c==0):\n        return(\"Yes\")\n    else:\n        return(\"Yes\")","language":"python"}
{"task_id":"MBPP\/841","completion":"\tarr.sort()\n\tresult = 0\n\tfor i in range(0, n - 1):\n\t\tif arr[i] > arr[i + 1]:\n\t\t\tresult += 1\n\treturn result","language":"python"}
{"task_id":"MBPP\/842","completion":"  i = 0\n  for e in arr:\n    if arr.count(e) % 2 != 0:\n      i += 1\n  return arr[i]","language":"python"}
{"task_id":"MBPP\/843","completion":"    pass","language":"python"}
{"task_id":"MBPP\/844","completion":"    if n % 2 == 0:\n        return k - 1\n    else:\n        return k","language":"python"}
{"task_id":"MBPP\/845","completion":"    \n    return (len(str(n)))","language":"python"}
{"task_id":"MBPP\/846","completion":"    arr.sort()\n    dep.sort()\n    dep.append(arr[-1])\n    dep.append(arr[0])\n    arr.append(dep[-1])\n    arr.append(dep[0])\n    print(arr)\n    print(dep)\n    cnt = 1\n    i = 0\n    j = 0\n    while i < n-3 and j < n-1:\n        while i < n-3 and arr[i] < dep[j]:\n            i += 1\n        while j < n-1 and arr[i] >= dep[j]:\n            j += 1\n        cnt += 1\n    print(cnt)","language":"python"}
{"task_id":"MBPP\/847","completion":"  pass","language":"python"}
{"task_id":"MBPP\/848","completion":" s = (base1+base2)*height\/2\n return s","language":"python"}
{"task_id":"MBPP\/849","completion":"    pass","language":"python"}
{"task_id":"MBPP\/850","completion":"    s=sorted([a,b,c])\n    if s[2]*s[0]<=s[1]**2+s[1]*s[1]<=s[0]**2+s[0]*s[2] or s[0]*s[1]<=s[2]**2+s[1]*s[2]<=s[1]**2+s[0]*s[0]:\n        return False\n    else:\n        return True","language":"python"}
{"task_id":"MBPP\/851","completion":"    factor = 1\n    for i in range(1,N+1):\n        factor = factor*i\n    print(factor)\n    for i in range(1,N+1):\n        factor = factor\/\/i\n    print(factor)\n    Sum += factor","language":"python"}
{"task_id":"MBPP\/852","completion":"    return [num for num in num_list if num >= 0]","language":"python"}
{"task_id":"MBPP\/853","completion":"    result = 0\n    for i in range(1, n + 1, 2):\n        result += i\n\n    return result","language":"python"}
{"task_id":"MBPP\/854","completion":"  pass","language":"python"}
{"task_id":"MBPP\/855","completion":"    even = 0\n    odd = 1\n\n    while x % 2 == 0:\n        even += 1\n        x \/= 2\n\n    while x % 2 != 0:\n        odd += 1\n        x \/= 2\n\n    if even % 2 == 0:\n        return True\n    else:\n        return False","language":"python"}
{"task_id":"MBPP\/856","completion":"    res = 0\n    for i in range(n):\n        if arr[i]==1:\n            continue\n        left = i\n        right = n-1\n        while left!=right:\n            left += 1\n            right -= 1\n            if arr[left]!=1 and arr[right]!=1:\n                temp = arr[left]\n                arr[left] = arr[right]\n                arr[right] = temp\n                res += 1\n                break\n    return res","language":"python"}
{"task_id":"MBPP\/857","completion":"  new_list = list1.split()\n  return map(list, new_list)","language":"python"}
{"task_id":"MBPP\/858","completion":"    count = 1\n    for x in input_list:\n        count += (1 if type(x) is list else 0)\n\n    return int(count*count)","language":"python"}
{"task_id":"MBPP\/859","completion":"\tsub_lists = []\n\tfor i in range(len(my_list) + 1):\n\t\tfor j in range(i + 1, len(my_list) + 1):\n\t\t\tsub_lists.append(my_list[i:j])\n\treturn sub_lists","language":"python"}
{"task_id":"MBPP\/860","completion":"\timport re\n\treturn 'Discard' if re.match(r\"^[a-zA-Z0-9]*$\",string) else 'Accept'","language":"python"}
{"task_id":"MBPP\/861","completion":"  import re\n  from functools import reduce\n  from sorted_lambda import sorted\n  def is_anagram(a,b):\n    \"\"\"Check whether two words are anagrams of each other\"\"\"\n    return sorted(a) == sorted(b)\n  return list(filter(is_anagram,map(lambda x: \"\".join(sorted(re.findall(\"[a-z]*\",x))),texts)))","language":"python"}
{"task_id":"MBPP\/862","completion":"  from collections import Counter\n  text = text.split()\n  text = Counter(text)\n  return text.most_common(n)","language":"python"}
{"task_id":"MBPP\/863","completion":"\tlongest = 0\n\tcurrent = 1\n\tfor i in range(1, n):\n\t\tif arr[i] == arr[i-1]+1:\n\t\t\tcurrent += 1\n\t\telse:\n\t\t\tlongest = max(longest, current)\n\t\t\tcurrent = 1\n\treturn max(longest, current)","language":"python"}
{"task_id":"MBPP\/864","completion":"  return list(filter(lambda x: x == x[::-1], texts))","language":"python"}
{"task_id":"MBPP\/865","completion":"    \n    return list(map(lambda x:x*n,nums))","language":"python"}
{"task_id":"MBPP\/866","completion":"  if monthname2 in (\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                    \"July\", \"August\", \"September\", \"October\", \"November\",\n                    \"December\"):\n    return True\n  else:\n    return False","language":"python"}
{"task_id":"MBPP\/867","completion":"    if n%2==0:\n        return n\n    else:\n        return n+1","language":"python"}
{"task_id":"MBPP\/868","completion":"    return len(a.split()[-1])","language":"python"}
{"task_id":"MBPP\/869","completion":"   pass","language":"python"}
{"task_id":"MBPP\/870","completion":"  # return sum(filter(lambda num: num >= 0, nums))\n  return sum(num for num in nums if num >= 0)","language":"python"}
{"task_id":"MBPP\/871","completion":"    if len(string1)!=len(string2):\n        return False\n    if string1==string2:\n        return True\n    if string1+string1==string2:\n        return True\n    if string1+string2==string2:\n        return True\n    if string1+string1+string1==string2:\n        return True\n    return False","language":"python"}
{"task_id":"MBPP\/872","completion":"    # check if empty\n    if not list1:\n        return True\n\n    # loop through list1, check if elements in list2 are the same\n    for i in list1:\n        if i == list2[0]:\n            # check if list2 is a subset of list1\n            if check_subset(list1[1:], list2[1:]):\n                return True\n    return False","language":"python"}
{"task_id":"MBPP\/873","completion":"  if n == 0 or n == 1:\n    return n\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)","language":"python"}
{"task_id":"MBPP\/874","completion":"    pass","language":"python"}
{"task_id":"MBPP\/875","completion":"  min_difference_pair = [float(\"inf\"), float(\"inf\")]\n  for i in range(len(test_list)):\n    for j in range(len(test_list)):\n      if i == j:\n        continue\n      else:\n        difference = test_list[i][0] - test_list[j][1]\n        if difference < min_difference_pair[0]:\n          min_difference_pair = [difference, test_list[i][0], test_list[j][0]]\n  return min_difference_pair[0]","language":"python"}
{"task_id":"MBPP\/876","completion":"   if x > y:\n       greater = x\n   else:\n       greater = y\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n   return lcm","language":"python"}
{"task_id":"MBPP\/877","completion":"    result = []\n    for i in str :\n        result.append(i)\n    result.sort()\n    return \"\".join(result)","language":"python"}
{"task_id":"MBPP\/878","completion":"  if len(test_tuple) == len(set(test_tuple)):\n    return True\n  else:\n    return False","language":"python"}
{"task_id":"MBPP\/879","completion":"  # import re\n\n  # pattern = r\"a.*?b\"\n  # regex = re.compile(pattern)\n  # matches = re.search(regex, text)\n\n  # if matches:\n  #   return \"Found a match!\"\n  # else:\n  #   return \"Not matched!\"\n\n  return \"Not Implemented!\"","language":"python"}
{"task_id":"MBPP\/880","completion":"    import math\n    import numpy as np\n\n    if(a==0) :\n        if(b!=0) :\n            return \"No solutions\"\n        else :\n            return \"1 solution\"\n    \n    if(b==0) :\n        if(c!=0) :\n            return \"No solutions\"\n        else :\n            return \"1 solution\"\n    \n    discriminant=b**2-4*a*c\n    \n    if(discriminant==0) :\n        return \"1 solution\"\n    \n    sqrtd=math.sqrt(discriminant)\n    sol1=(-b+sqrtd)\/(2*a)\n    sol2=(-b-sqrtd)\/(2*a)\n    \n    if(sol1==sol2) :\n        return \"1 solution\"\n    else :\n        return str(int(sol1)+1)+\" solutions\"","language":"python"}
{"task_id":"MBPP\/881","completion":"    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num%2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum + odd_sum","language":"python"}
{"task_id":"MBPP\/882","completion":"  return 2 * b + 2 * h","language":"python"}
{"task_id":"MBPP\/883","completion":" return list(filter(lambda x: x%m==0 and x%n==0, nums))","language":"python"}
{"task_id":"MBPP\/884","completion":"    if n<l or r<l:\n        return False\n    elif (l==r):\n        return True\n    return 2**l <= n and n<= 2**r","language":"python"}
{"task_id":"MBPP\/885","completion":"    dict1 = {}\n    dict2 = {}\n    \n    for i,j in zip(str1,str2):\n        if i in dict1 and dict1[i]!=j:\n            return False\n        dict1[i] = j\n        if j in dict2 and dict2[j]!=i:\n            return False\n        dict2[j] = i\n        \n    return True","language":"python"}
{"task_id":"MBPP\/886","completion":"    return sum(numbers) \/ len(numbers)","language":"python"}
{"task_id":"MBPP\/887","completion":"    return n&1==1","language":"python"}
{"task_id":"MBPP\/888","completion":"  pass","language":"python"}
{"task_id":"MBPP\/889","completion":"    for i in range(len(lists)):\n        for j in range(len(lists[i]) \/\/ 2):\n            lists[i][j], lists[i][len(lists[i]) - j - 1] = lists[i][len(lists[i]) - j - 1], lists[i][j]\n    return lists","language":"python"}
{"task_id":"MBPP\/890","completion":"    return find_Extra_helper(arr1,n,arr2,n)","language":"python"}
{"task_id":"MBPP\/891","completion":"    return len(str(A)) == len(str(B))","language":"python"}
{"task_id":"MBPP\/892","completion":" return \"\".join(text.split())","language":"python"}
{"task_id":"MBPP\/893","completion":"    return [sub[-1] for sub in lst]","language":"python"}
{"task_id":"MBPP\/894","completion":"  tuple_str = (test_str.replace(\",\", \" \")).split(\" \")\n  tuple_float = (float(i) for i in tuple_str)\n  return tuple(tuple_float)","language":"python"}
{"task_id":"MBPP\/895","completion":"    n = len(A)\n    if n <= 1:\n        return 0\n    P = [0] * n\n    for i in range(n):\n        P[i] = A[i]\n    P[0] += 0\n    for i in range(1, n):\n        P[i] += max(P[i - 2] + A[i], 0)\n    return max(P)","language":"python"}
{"task_id":"MBPP\/896","completion":"  tuples.sort(key=lambda x:x[-1])\n  return tuples","language":"python"}
{"task_id":"MBPP\/897","completion":"    return word in sentence","language":"python"}
{"task_id":"MBPP\/898","completion":"    elements=[]\n    while len(numbers)!=0:\n        elements.append(numbers[0:n])\n        numbers=numbers[n:]\n    return elements","language":"python"}
{"task_id":"MBPP\/899","completion":"    if len(arr) == 0:\n        return True\n    #if there are more than 2 elements\n    if n >= 2:\n        for i in range(n):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n    #if there are only 2 elements\n    else:\n        for i in range(n):\n            if arr[i] > arr[0]:\n                return False\n        return True","language":"python"}
{"task_id":"MBPP\/900","completion":"    pass","language":"python"}
{"task_id":"MBPP\/901","completion":"    limit = 10**n\n    return reduce(lambda x,y: x*y \/\/ gcd(x, y), range(1, limit + 1), 1)","language":"python"}
{"task_id":"MBPP\/902","completion":"   new_dict={}\n   for k,v in d1.items():\n      new_dict[k]=v\n   for k,v in d2.items():\n      new_dict[k]=new_dict.get(k,0)+v\n   return new_dict","language":"python"}
{"task_id":"MBPP\/903","completion":"    ## base case\n    if n == 0 :\n        return 1\n    ## general case\n    return (n & (n-1)) + count_Unset_Bits(n>>1)","language":"python"}
{"task_id":"MBPP\/904","completion":"  if x % 2 == 0:\n    return True\n  else:\n    return False","language":"python"}
{"task_id":"MBPP\/905","completion":"   sum_of_square = 0\n   for i in range(1, n+1):\n      sum_of_square += (n - i + 1) * (i - 1) * i \/ 6\n   return int(sum_of_square)","language":"python"}
{"task_id":"MBPP\/906","completion":"        import re\n        pattern = r\"^.*\/(\\d{4})\/(\\d{1,2})\/(\\d{1,2})\/(\\d{1,2})\/\"\n        res = re.findall(pattern, url)\n        return res","language":"python"}
{"task_id":"MBPP\/907","completion":"","language":"python"}
{"task_id":"MBPP\/908","completion":"\tfor i in range(n):\n\t\tif i == arr[i]:\n\t\t\treturn i\n\treturn -1","language":"python"}
{"task_id":"MBPP\/909","completion":"    return sum([int(x) for x in str(num)[::-1]])","language":"python"}
{"task_id":"MBPP\/910","completion":"    \n    return (y >= 1 and y <= 9999 and (m >=1 and m <= 12) and (d >= 1 and d <= 31))\n    pass","language":"python"}
{"task_id":"MBPP\/911","completion":"    pass","language":"python"}
{"task_id":"MBPP\/912","completion":"\treturn n*(n-1)\/2 + m","language":"python"}
{"task_id":"MBPP\/913","completion":"    if string.endswith('7'):\n        return True\n    else:\n        return False","language":"python"}
{"task_id":"MBPP\/914","completion":"","language":"python"}
{"task_id":"MBPP\/915","completion":"  return list(map(lambda x: x if x >= 0 else -x, array_nums))","language":"python"}
{"task_id":"MBPP\/916","completion":"\thash_table = set()\n\tfor i in range(arr_size):\n\t\tfor j in range(i + 1, arr_size):\n\t\t\tsub_sum = A[i] + A[j]\n\t\t\tif (sub_sum == sum):\n\t\t\t\thash_table.add(tuple([A[i], A[j]]))\n\tif len(hash_table) != 0:\n\t\treturn hash_table\n\telse:\n\t\treturn None","language":"python"}
{"task_id":"MBPP\/917","completion":"        lower_text = text.lower()\n        upper_text = text.upper()\n        if upper_text.find(lower_text) != -1:\n            return \"Found a match!\"\n        else:\n            return \"Not matched!\"","language":"python"}
{"task_id":"MBPP\/918","completion":"    if m < 0 or n < 0:\n        return -1\n    elif m == 0 and n == 0:\n        return 1\n    elif n == 0:\n        return 0\n\n    return coin_change(S, m-S[m], n) + coin_change(S, m, n-S[n])","language":"python"}
{"task_id":"MBPP\/919","completion":"    result = 1\n    for item in items:\n        result = result * item\n    return result","language":"python"}
{"task_id":"MBPP\/920","completion":"  new_list = []\n  for value in test_list:\n    if value[0] is not None:\n      new_list.append(value)\n  return new_list","language":"python"}
{"task_id":"MBPP\/921","completion":"  test_list = []\n  for i in range(0, len(test_tup), N):\n    test_list.append(test_tup[i:i+N])\n  return test_list","language":"python"}
{"task_id":"MBPP\/922","completion":"    max1 = max2 = 0\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1, max2","language":"python"}
{"task_id":"MBPP\/923","completion":"\tdp = [[0]*(n+1) for i in range(m+1)]\n\tfor i in range(m+1):\n\t\tdp[i][0] = i\n\tfor j in range(n+1):\n\t\tdp[0][j] = j\n\tfor i in range(1, m+1):\n\t\tfor j in range(1, n+1):\n\t\t\tif X[i-1] == Y[j-1]:\n\t\t\t\tdp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n\t\t\telse:\n\t\t\t\tdp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n\treturn dp[m][n]","language":"python"}
{"task_id":"MBPP\/924","completion":"    return (x if x >= y else y)","language":"python"}
{"task_id":"MBPP\/925","completion":"    product = 1\n    for i in nums:\n        product *= i\n    return product","language":"python"}
{"task_id":"MBPP\/926","completion":"\tn_divided = n\n\tk = 0\n\twhile n_divided > 1:\n\t\tn_divided \/= m\n\t\tk += 1\n\treturn (n - 1) * m ** k","language":"python"}
{"task_id":"MBPP\/927","completion":"\tif node is None:\n\t\treturn 0\n\telse:\n\t\tlheight = max_height(node.left)\n\t\trheight = max_height(node.right)\n\t\tif lheight > rheight:\n\t\t\treturn lheight + 1\n\t\telse:\n\t\t\treturn rheight + 1","language":"python"}
{"task_id":"MBPP\/928","completion":"        dt = dt.split('-')\n        dt[1], dt[2] = dt[2], dt[1]\n        dt = '-'.join(dt)\n        return dt","language":"python"}
{"task_id":"MBPP\/929","completion":"  pass","language":"python"}
{"task_id":"MBPP\/930","completion":"        return \"Not matched!\" if \"ab\" not in text else \"Found a match!\"","language":"python"}
{"task_id":"MBPP\/931","completion":"","language":"python"}
{"task_id":"MBPP\/932","completion":"    return list(set(l))","language":"python"}
{"task_id":"MBPP\/933","completion":"  import re\n  return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()","language":"python"}
{"task_id":"MBPP\/934","completion":"\treturn n * (n + 1) \/ 2 * (m * (m - 1)) \/ 2","language":"python"}
{"task_id":"MBPP\/935","completion":" sum=0\n number_of_digits = int(len(str(number)))\n total = 0\n for i in range(number_of_digits):\n     digit = number % 10\n     total = total + (2 * digit)\n     number = number \/\/ 10\n     sum = sum + total\n return sum","language":"python"}
{"task_id":"MBPP\/936","completion":"  ord_list = list(set(ord_list))\n  ord_list.sort(reverse=True)\n  temp_list = []\n  for t in test_list:\n    for i in range(len(ord_list)):\n      if ord_list[i] == t[0]:\n        temp_list.append(t)\n        ord_list.pop(i)\n        break\n  return temp_list","language":"python"}
{"task_id":"MBPP\/937","completion":"    dict = {}\n    for char in str1:\n        dict[char] = dict.get(char, 0) + 1\n    max = 0\n    max_char = \"\"\n    for char in dict:\n        if dict[char] > max:\n            max = dict[char]\n            max_char = char\n    return max_char","language":"python"}
{"task_id":"MBPP\/938","completion":"\t\n\tmin_val = 1000000\n\tmin_list = [None, None, None]\n\t\n\tif (A[p] <= B[q] <= A[r]) and (B[p] <= C[q] <= B[r]) :\n\t\treturn A[p], B[q], C[r]\n\tif (B[p] <= A[q] <= B[r]) and (A[p] <= C[q] <= A[r]) :\n\t\treturn A[q], B[p], C[r]\n\tif (C[p] <= A[q] <= C[r]) and (A[p] <= B[q] <= A[r]) :\n\t\treturn A[q], B[q], C[p]","language":"python"}
{"task_id":"MBPP\/939","completion":" return sorted(models,key=lambda i:i['model'])","language":"python"}
{"task_id":"MBPP\/940","completion":"    n = len(arr)\n    # build a max heap\n    for i in range((n - 2) \/\/ 2, -1, -1):\n        shift_down(arr, i, n - 1)\n    for i in range(n - 1, 0, -1):\n        # swap\n        arr[0], arr[i] = arr[i], arr[0]\n        shift_down(arr, 0, i - 1)\n        print(arr)","language":"python"}
{"task_id":"MBPP\/941","completion":"  count = 0\n  for i in num:\n    if type(i) == tuple:\n      return count\n    else:\n      count += 1\n  return count","language":"python"}
{"task_id":"MBPP\/942","completion":"  for i in check_list:\n    if i in test_tup:\n      return True\n  return False","language":"python"}
{"task_id":"MBPP\/943","completion":"  pass","language":"python"}
{"task_id":"MBPP\/944","completion":"","language":"python"}
{"task_id":"MBPP\/945","completion":"  return set(t)","language":"python"}
{"task_id":"MBPP\/946","completion":"  counts = {}\n  for ch in a:\n    if ch in counts:\n      counts[ch] += 1\n    else:\n      counts[ch] = 1\n  return [ (ch, count) for (ch, count) in counts.items() if count == max(counts.values())]","language":"python"}
{"task_id":"MBPP\/947","completion":"    return min(map(len,list1))","language":"python"}
{"task_id":"MBPP\/948","completion":"  return tup1[index]","language":"python"}
{"task_id":"MBPP\/949","completion":"  # loop through the list and append items to sorted_list as they are sorted\n  sorted_list = []\n\n  # loop through the list and append the sorted items to sorted_list\n  for item in test_list:\n    item.sort()\n    sorted_list.append(item)\n\n  return sorted_list","language":"python"}
{"task_id":"MBPP\/950","completion":" zodiac_signs = \"\ufffd\ufffd\u72d7\ufffda\ufffd14\ufffd\u725b\u864e\u5154\ufffd34\ufffd\u86c7\u9a6c\ufffd34\ufffd\"\n year_str = str(year)\n year_int = int(year)\n if (year_int >= 1996) and (year_int <= 2006):\n  return zodiac_signs[0]\n elif (year_int >= 2007) and (year_int <= 2008):\n  return zodiac_signs[1]\n elif (year_int >= 2009) and (year_int <= 2010):\n  return zodiac_signs[2]\n elif (year_int >= 2011) and (year_int <= 2012):\n  return zodiac_signs[3]\n elif (year_int >= 2013) and (year_int <= 2014):\n  return zodiac_signs[4]","language":"python"}
{"task_id":"MBPP\/951","completion":"  similar_indices = []\n  if len(test_list1) == 0 or len(test_list2) == 0:\n    return similar_indices\n  if len(test_list1) == 1 and len(test_list2) == 1:\n    if test_list1[0][0] == test_list2[0][0]:\n      similar_indices.append(test_list1[0])\n      similar_indices.append(test_list2[0])\n    else:\n      return similar_indices\n  for i in range(len(test_list1)):\n    for j in range(len(test_list2)):\n      if i == 0 and j == 0:\n        similar_indices.append(test_list1[i])\n        similar_indices.append(test_list2[j])\n      elif i == 0:\n        if test_list1[i][0] == test_list2[j][0]:\n          similar_indices.append(test_list1[i])\n          similar_indices","language":"python"}
{"task_id":"MBPP\/952","completion":"\tif n < 0 or r < 0 or p < 1:\n\t\traise ValueError(\"Values must be non-negative\")\n\tif r > n:\n\t\treturn 0\n\n\tprod = 1\n\tfor i in range(r):\n\t\tprod = (prod * (n - i)) % p\n\treturn prod","language":"python"}
{"task_id":"MBPP\/953","completion":"    return len(ar) + 1","language":"python"}
{"task_id":"MBPP\/954","completion":" pass","language":"python"}
{"task_id":"MBPP\/955","completion":"    res = []\n    for i in range(1, n \/\/ 2 + 1):\n        if n % i == 0:\n            res.append(i)\n    if sum(res) > n:\n        return True\n    else:\n        return False","language":"python"}
{"task_id":"MBPP\/956","completion":"  import re\n  pattern = r'[A-Z]+'\n  return re.findall(pattern, text)","language":"python"}
{"task_id":"MBPP\/957","completion":"     \"\"\"YOUR CODE HERE\"\"\"\n     # find the rightmost set bit\n     rightmost_set_bit = 0\n     for i in range(32):\n         if (n & (1<<i)):\n             rightmost_set_bit = i\n     return rightmost_set_bit","language":"python"}
{"task_id":"MBPP\/958","completion":"        roman_num_str = \"\"\n        # check input is >= 1 and <= 3999\n        if num <= 0 or num > 3999:\n            return \"ERR\"\n        # create a list of the digits\n        roman = [('M',1000),('CM',900),('D',500),('CD',400),('C',100),\n        ('XC',90),('L',50),('XL',40),('X',10),('IX',9),('V',5),\n        ('IV',4),('I',1)]\n        # loop through roman numeral values\n        for (value,place) in roman:\n            # check if value is greater than num\n            if num >= place:\n                # subtract number from num\n                num -= place\n                # append roman numeral to roman_num_str\n                roman_num_str += value\n        return roman_num_str","language":"python"}
{"task_id":"MBPP\/959","completion":"    return sum(lst) \/ len(lst)","language":"python"}
{"task_id":"MBPP\/960","completion":"    no_ways = 0\n    while n > 0:\n        no_ways += 1\n        n -= 4\n    return no_ways","language":"python"}
{"task_id":"MBPP\/961","completion":"        dict = {\"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100, \"D\": 500, \"M\": 1000}\n        i = 0\n        result = 0\n        for letter in range(0, len(s)):\n                if letter < len(s) - 1 and dict[s[letter]] < dict[s[letter+1]]:\n                        result += dict[s[letter+1]] - dict[s[letter]]\n                        i += 2\n                else:\n                        result += dict[s[letter]]\n                        i += 1\n        return result","language":"python"}
{"task_id":"MBPP\/962","completion":"    if l % 2 == 0:\n        x = l\n    else:\n        x = l + 1\n    if r % 2 == 0:\n        y = r\n    else:\n        y = r - 1\n    sum = 0\n    while x < y:\n        if x % 2 == 0:\n            sum = sum + x\n        x = x + 1\n    return sum","language":"python"}
{"task_id":"MBPP\/963","completion":"    \"*** YOUR CODE HERE ***\"\n    import math\n    d = x*x - 4*y*z\n    if d > 0:\n        return \"Two solutions\", math.sqrt(d)\n    elif d == 0:\n        return \"one solution\", 0\n    else:\n        return \"no real solution\", (-y - math.sqrt(d)) \/ (2*z)","language":"python"}
{"task_id":"MBPP\/964","completion":"    \"*** YOUR CODE HERE ***\"\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False","language":"python"}
{"task_id":"MBPP\/965","completion":"        if text == '':\n            return ''\n\n        # convert first character to lowercase\n        if text[0].islower():\n            text = text[0].lower() + text[1:]\n\n        new_text = []\n        for c in text:\n            if c.isupper():\n                if new_text:\n                    new_text.append('_')\n                new_text.append(c.lower())\n            else:\n                new_text.append(c)\n\n        return ''.join(new_text)","language":"python"}
{"task_id":"MBPP\/966","completion":" if not isinstance(tuple1, tuple):\n     raise ValueError(\"Tuple expected!\")\n if tuple1 == ():\n     return tuple1\n if len(tuple1) == 1:\n     if isinstance(tuple1[0], tuple) and tuple1[0] == ():\n         return tuple1\n     else:\n         return tuple1[0]\n else:\n     if tuple1[0] == ():\n         return remove_empty(tuple1[1:])\n     else:\n         return (tuple1[0],) + remove_empty(tuple1[1:])","language":"python"}
{"task_id":"MBPP\/967","completion":"  # your code here\n\n  for i in string:\n    if i in \"AEIOUaeiou\":\n      return \"accepted\"\n  return \"not accepted\"","language":"python"}
{"task_id":"MBPP\/968","completion":"    floorA=A%N\n    floorB=B%N\n    return min(floorA,floorB)","language":"python"}
{"task_id":"MBPP\/969","completion":"  pass","language":"python"}
{"task_id":"MBPP\/970","completion":"    #x = int(x)\n    #y = int(y)\n    #return x if x <= y else y\n\n    if x > y:\n        return y\n    else:\n        return x","language":"python"}
{"task_id":"MBPP\/971","completion":"\tsegments = 0\n\twhile n >= a :\n\t\tn -= a\n\t\ta = 0\n\t\tsegments += 1\n\tif a > 0 :\n\t\tsegments += 1\n\twhile n >= b :\n\t\tn -= b\n\t\tb = 0\n\t\tsegments += 1\n\tif b > 0 :\n\t\tsegments += 1\n\twhile n >= c :\n\t\tn -= c\n\t\tc = 0\n\t\tsegments += 1\n\tif c > 0 :\n\t\tsegments += 1\n\treturn segments","language":"python"}
{"task_id":"MBPP\/972","completion":"  # Concatenate the first element of test_tup1 to first element of test_tup2 to create a new tuple\n  new_tup = tuple(test_tup1[0:1] + test_tup2[0:1])\n  # Concatenate the rest of the elements of test_tup1 to the rest of the elements of test_tup2 to create a new tuple\n  new_tup += tuple(test_tup1[1:]) + tuple(test_tup2[1:])\n  # Return new_tup\n  return new_tup","language":"python"}
{"task_id":"MBPP\/973","completion":"    return s[d:] + s[:d]","language":"python"}
{"task_id":"MBPP\/974","completion":"","language":"python"}
