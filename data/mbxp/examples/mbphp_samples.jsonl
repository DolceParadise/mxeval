{"task_id":"MBPHP\/1","completion":"    return $cost[$m][$n];\n}","language":"php"}
{"task_id":"MBPHP\/2","completion":"    return array_diff(array_intersect($testTup1, $testTup2), array_union($testTup1, $testTup2));\n}","language":"php"}
{"task_id":"MBPHP\/3","completion":"    return is_divisible($n, 2) || is_divisible($n, 3) || is_divisible($n, 5) || is_divisible($n, 7);\n}","language":"php"}
{"task_id":"MBPHP\/4","completion":"    $queue = new HeapQueue();\n    foreach ($nums as $num) {\n        $queue->enqueue($num);\n    }\n    $largest = [];\n    while ($queue->size() > 0) {\n        $largest[] = $queue->dequeue();\n    }\n    return $largest;\n}","language":"php"}
{"task_id":"MBPHP\/5","completion":"    return ncr(3, $n) \/ (ncr(2, $n) * ncr(1, $n));\n}","language":"php"}
{"task_id":"MBPHP\/6","completion":"    return $a ^ $b ? 1 : 0;\n}","language":"php"}
{"task_id":"MBPHP\/7","completion":"    return array_filter(explode(\" \", preg_split(\"[^\\\\w\\\\s]+\", $text)), function($x) { return strlen($x) >= 4; });\n}","language":"php"}
{"task_id":"MBPHP\/8","completion":"    return $nums.map(n => n * n);\n}","language":"php"}
{"task_id":"MBPHP\/9","completion":"    $result = $str + $str;\n\n    \/\/ if string is 1 character long, it's already a unique rotation\n    if ($str === $result)\n        return 0;\n\n    \/\/ we do a brute-force search, starting from the beginning and rotating\n    \/\/ the string by 1 position each time\n    $rotations = 0;\n    while ($str != $result) {\n        $str = $result;\n        $rotations++;\n    }\n    return $rotations;\n}","language":"php"}
{"task_id":"MBPHP\/10","completion":"    $min = min($list1);\n    $list2 = array();\n\n    for($i = 0; $i < $n; $i++) {\n        if($list1[$i] == $min)\n            continue;\n        $list2[] = $list1[$i];\n    }\n\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/11","completion":"  return substr($s, 1, -1) . substr($s, -1);\n}","language":"php"}
{"task_id":"MBPHP\/12","completion":"    $result = $m;\n\n    for ($i = 0; $i < count($m) - 1; $i++) {\n        $sumRow = 0;\n        for ($j = 0; $j < count($m[$i]); $j++) {\n            $sumRow += $m[$i][$j];\n        }\n        $index = $i;\n        for ($j = 0; $j < count($m[$i]); $j++) {\n            if ($sumRow < $m[$i][$j]) {\n                $index = $j;\n                break;\n            }\n        }\n        if ($index != $i) {\n            $result[$index] = $result[$i];\n            $result[$i] = $m[$i];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/13","completion":"    $counts = array();\n    foreach($words as $w) {\n        $count = 0;\n        foreach($words as $w2) {\n            if ($w != $w2 && strpos($w, $w2) !== false) {\n                $count++;\n            }\n        }\n        $counts[$w] = $count;\n    }\n    return $counts;\n}","language":"php"}
{"task_id":"MBPHP\/14","completion":"    return $l * $b * $h;\n}","language":"php"}
{"task_id":"MBPHP\/15","completion":"    $text = str_replace(\" \", \"\", $text); \/\/ remove spaces\n    $chars = str_split($text, 0, STR_CS_LOWER);\n    return $chars;\n}","language":"php"}
{"task_id":"MBPHP\/16","completion":"    $str = \"\";\n\n    foreach($text as $char) {\n        if ($str !== \"\") {\n            $str .= \"_\";\n        }\n\n        $str .= ($char >= 'a' && $char <= 'z' ? $char : '');\n    }\n\n    return strtr($str, '_');\n}","language":"php"}
{"task_id":"MBPHP\/17","completion":"    $p = $a * 4;\n    return $p;\n}","language":"php"}
{"task_id":"MBPHP\/18","completion":"  $diff = str_diff($string, $secondString);\n  return array_keys($diff) ? $diff : '';\n}","language":"php"}
{"task_id":"MBPHP\/19","completion":"  return array_unique($arraynums);\n}","language":"php"}
{"task_id":"MBPHP\/20","completion":"    \/\/ Write your code here.\n    return $x%2==0;\n}","language":"php"}
{"task_id":"MBPHP\/21","completion":"    $result = array();\n    for ($i = 0; $i < $m; $i++) {\n        $result[] = $n;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/22","completion":"  $nums = array_unique($nums);\n  return $nums[$rand(0, count($nums) - 1)];\n}","language":"php"}
{"task_id":"MBPHP\/23","completion":"    $result = 0;\n    $maxLength = 0;\n    foreach ($list1 as $list2) {\n        foreach ($list2 as $val) {\n            $result += $val;\n            if ($maxLength < $result) {\n                $maxLength = $result;\n            }\n        }\n    }\n    return $maxLength;\n}","language":"php"}
{"task_id":"MBPHP\/24","completion":"    $binary = str_replace(\" \", \"\", $binary);\n    $binary = str_replace(\",\", \"\", $binary);\n    $binary = str_replace(\"0b\", \"\", $binary);\n    $binary = str_replace(\"0B\", \"\", $binary);\n    $binary = str_replace(\"-\", \"\", $binary);\n    $binary = str_replace(\"1\", \"1.\", $binary);\n    $binary = str_replace(\"0\", \".0\", $binary);\n    $binary = str_replace(\".\", \"\", $binary);\n    $binary = str_replace(\"2\", \".1\", $binary);\n    $binary = str_replace(\"1\", \".0\", $binary);\n    $binary = str_replace(\".\", \"\", $binary);\n    return bin2dec($binary);\n}","language":"php"}
{"task_id":"MBPHP\/25","completion":"  if (empty($arr)) {\n    return false;\n  }\n\n  $product = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $product *= $arr[$i];\n  }\n\n  return $product;\n}","language":"php"}
{"task_id":"MBPHP\/26","completion":"    return count($testList) >= $k;\n}","language":"php"}
{"task_id":"MBPHP\/27","completion":"    $new_list = array();\n    foreach ($list as $value) {\n        $new_list = str_replace('[^0-9]', '', $value);\n    }\n    return $new_list;\n}","language":"php"}
{"task_id":"MBPHP\/28","completion":"    if ($k < 0 || $n < 0 || $k > $n) {\n        return false;\n    } else if ($k == 0 || $k == $n) {\n        return 1;\n    } else {\n        return binomialCoeff($n - 1, $k - 1) + binomialCoeff($n - 1, $k);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/29","completion":"    $occurrence = 0;\n    for ($i = 0; $i < $arrSize; $i++) {\n        if ($arr[$i] % 2 == 1) {\n            $occurrence++;\n        }\n    }\n    return $occurrence;\n}","language":"php"}
{"task_id":"MBPHP\/30","completion":"  $count = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n    for ($j = $i + 1; $j <= strlen($s); $j++) {\n      $sub = substr($s, $i, $j - $i);\n      if ($sub === substr($s, $i + 1, $j - $i - 1)) {\n        $count++;\n      }\n    }\n  }\n  return $count;\n}","language":"php"}
{"task_id":"MBPHP\/31","completion":"    $arr = [];\n\n    $for ( $i=0; $i < count($nums); $i++ ) {\n        $arr[] = $nums[$i];\n    }\n\n    $arr = array_unique($arr);\n    $arr = sort($arr);\n\n    $heap = new Heap_Queue();\n\n    foreach ( $arr as $key ) {\n        $heap-enqueue($key);\n    }\n\n    $result = array();\n\n    for ( $i=0; $i < $k; $i++ ) {\n        $result[] = $heap->dequeue();\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/32","completion":"    $i = 2;\n    $maxPrime = 0;\n\n    for ($j = 1; $j < $n; $j++) {\n        if ($n % $j == 0) {\n            while ($i * $j <= $n) {\n                if ($n % $i == 0) {\n                    $n \/= $i;\n                    $maxPrime = $i;\n                } else {\n                    $i++;\n                }\n            }\n        }\n    }\n    return $maxPrime;\n}","language":"php"}
{"task_id":"MBPHP\/33","completion":"    $a = \"\";\n    $d = 0;\n    for ($x = 0; $x < 8; $x++) {\n        $d = $n % 2;\n        $a = $d . $a;\n        $n = $n \/ 2;\n    }\n    return $a;\n}","language":"php"}
{"task_id":"MBPHP\/34","completion":"    $mid = ceil($n \/ 2);\n\n    for ($i = 0; $i < $mid; $i++) {\n        if ($ar[$i] === $ar[$n - 1]) {\n            $n = $n - 1;\n            $i = 0;\n        }\n    }\n    return $ar[$n];\n}","language":"php"}
{"task_id":"MBPHP\/35","completion":"    $a = $n - 1;\n    return (($a * $a + $a) \/ 2 * $n);\n}","language":"php"}
{"task_id":"MBPHP\/36","completion":"    $m = $p + $q;\n    $m *= $n;\n\n    return floor($m \/ 10);\n}","language":"php"}
{"task_id":"MBPHP\/37","completion":"    $array = array();\n    foreach ($mixedList as $value) {\n        if (is_int($value)) {\n            $array[] = $value;\n        }\n        else {\n            $array[] = str_pad($value, 10, '0', STR_PAD_LEFT);\n        }\n    }\n    return sort($array);\n}","language":"php"}
{"task_id":"MBPHP\/38","completion":"    $evenNum = 0;\n    $oddNum = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        if (($list1[$i] % 2) == 0) {\n            $evenNum++;\n        } else {\n            $oddNum++;\n        }\n    }\n    return $evenNum \/ $oddNum;\n}","language":"php"}
{"task_id":"MBPHP\/39","completion":"    $s = str_split($s);\n    $a = [];\n    $l = strlen($s);\n    for ($i=0; $i<$l-1; $i++) {\n        $a[$i] = substr($s[$i], 1);\n        $a[$i+1] = substr($s[$i+1], 0, 1);\n    }\n    return implode($a);\n}","language":"php"}
{"task_id":"MBPHP\/40","completion":"    $freq = [];\n    foreach($nums as $num) {\n        if (!in_array($num, $freq)) {\n            $freq[$num] = $nums[$num]->length;\n        }\n    }\n    return $freq;\n}","language":"php"}
{"task_id":"MBPHP\/41","completion":"    return $nums.filter(num => num % 2 == 0);\n}","language":"php"}
{"task_id":"MBPHP\/42","completion":"    $result = 0;\n    $length = count($arr);\n\n    for ($i = 0; $i < $length; $i++) {\n        if ($arr[$i] == $arr[$i + 1]) {\n            $result += $arr[$i];\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/43","completion":"  return \"Not matched!\";\n}","language":"php"}
{"task_id":"MBPHP\/44","completion":"    if (preg_match(\"\/^(\\s*|.*?)\\w+$\/\", $text, $match)) {\n        return \"Found a match!\";\n    }\n\n    return \"Not matched!\";\n}","language":"php"}
{"task_id":"MBPHP\/45","completion":"    $gcd = array();\n    if (empty($l)) return null;\n    for ($i=0; $i<count($l)-1; $i++) {\n        if ($l[$i] &lt; $l[$i+1]) {\n            $gcd[$i] = $l[$i];\n            $gcd[$i+1] = $l[$i+1];\n        } else {\n            $gcd[$i] = $gcd[$i+1];\n            $gcd[$i+1] = $l[$i];\n        }\n    }\n    return $gcd[$gcd.length-1];\n}","language":"php"}
{"task_id":"MBPHP\/46","completion":"    $length = count($data);\n\n    if ($length <= 1) {\n        return true;\n    }\n\n    for ($i = 0; $i < $length - 1; $i++) {\n        if ($data[$i] == $data[$i+1]) {\n            return false;\n        }\n    }\n\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/47","completion":"  if ($a % $b == 0) {\n    return $b;\n  }\n  else {\n    return $a % $b;\n  }\n}","language":"php"}
{"task_id":"MBPHP\/48","completion":"  \/\/ Your code here...\n}","language":"php"}
{"task_id":"MBPHP\/49","completion":"    $result = [];\n    foreach ($nums as $row) {\n        foreach ($row as $col) {\n            if ($col == $n) {\n                $result.push(array_pop($row));\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/50","completion":"    return sort(array_map('array_min', $inputList), function($a, $b) {\n        return strlen($a) - strlen($b);\n    })[1];\n}","language":"php"}
{"task_id":"MBPHP\/51","completion":"    if ($x < $y + $z && $y < $x + $z && $z < $x + $y)\n        return 'true';\n    else\n        return 'false';\n}","language":"php"}
{"task_id":"MBPHP\/52","completion":"    return $b * $h;\n}","language":"php"}
{"task_id":"MBPHP\/53","completion":"    $strLen = strlen($str);\n    return strcmp($str[$strLen-1], $str[0]) === 0 ? \"Equal\" : \"Not Equal\";\n}","language":"php"}
{"task_id":"MBPHP\/54","completion":"    $myList = $myList - 0;\n\n    $max = array_sort($myList, function($a, $b) {\n        return $b - $a;\n    });\n\n    $count = [];\n    foreach($max as $i => $element) {\n        $count[$element] = $count[$element] ? ++$count[$element] : 1;\n    }\n\n    $sorted = array_keys($count);\n    $sorted = array_map('lambda' => array_shift($sorted), $sorted);\n    $sorted = array_map('lambda' => array_shift($sorted), $sorted);\n\n    return $sorted;\n}","language":"php"}
{"task_id":"MBPHP\/55","completion":"    \/\/ write code here\n    return 0;\n}","language":"php"}
{"task_id":"MBPHP\/56","completion":"  return $n % 2 === 0 ? $n > $n * 2 : false;\n}","language":"php"}
{"task_id":"MBPHP\/57","completion":"    $max = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $num = $arr[$i] * (10 ** $i);\n        $num += $arr[$i + 1] * (10 ** ($i + 1));\n        $num += $arr[$i + 2] * (10 ** ($i + 2));\n        $num += $arr[$i + 3] * (10 ** ($i + 3));\n        if ($num > $max) {\n            $max = $num;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/58","completion":"    return ($x * $y < 0) || ($x * $y > 0);\n}","language":"php"}
{"task_id":"MBPHP\/59","completion":"    $n = (0..$n);\n    for ($i = 1; $i < $n; $i++) {\n        $i = $i * (3 * $i - 1) \/ 2;\n    }\n    return $i;\n}","language":"php"}
{"task_id":"MBPHP\/60","completion":"    $a = $arr;\n    $m = array_shift($a);\n    $n = $n - $m + 1;\n    $max = 0;\n    $ans = 0;\n    for ($i = 1; $i < $n; ++$i) {\n        $x = array_shift($a);\n        $y = $m + $i;\n        $l = array_shift($a);\n        $max = max($max, abs($x - $y), $l + abs($x - $y));\n        $ans = max($ans, $l + $m + $i);\n        $m = $x;\n    }\n    return $ans;\n}","language":"php"}
{"task_id":"MBPHP\/61","completion":"    $sum = 0;\n    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n        $sum = $sum + strlen($s.substr(0, $i));\n    }\n    return (int) strlen($s) - strlen($s.substr(0, $sum - $n));\n}","language":"php"}
{"task_id":"MBPHP\/62","completion":"  $max = 0;\n  foreach($xs as $x) {\n    if ($x > $max) {\n      $max = $x;\n    }\n  }\n  return $max;\n}","language":"php"}
{"task_id":"MBPHP\/63","completion":"  $differenceList = [];\n  for ($i = 0; $i < count($testList); $i++) {\n    $testValue = $testList[$i][0] - $testList[$i][1];\n    $testValue = abs($testValue);\n    if (isset($differenceList[$testValue])) {\n      $differenceList[$testValue] += 1;\n    } else {\n      $differenceList[$testValue] = 1;\n    }\n  }\n  return max($differenceList);\n}","language":"php"}
{"task_id":"MBPHP\/64","completion":"    return $subjectmarks.sort(\n        (a, b) => a[1] - b[1]\n    );\n}","language":"php"}
{"task_id":"MBPHP\/65","completion":"    $sum = 0;\n    foreach ($dataList as $data) {\n        if (is_array($data)) {\n            $sum += recursiveListSum($data);\n        } else {\n            $sum += $data;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/66","completion":"    $count = 0;\n    foreach ($list as $element) {\n        if ($element > 0) {\n            $count = $count + 1;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/67","completion":"    \/\/ write your code here\n}","language":"php"}
{"task_id":"MBPHP\/68","completion":"    return isSorted($a) && !isReversed($a);\n}","language":"php"}
{"task_id":"MBPHP\/69","completion":"    $a = array_filter($s);\n    return in_array($l, $a);\n}","language":"php"}
{"task_id":"MBPHP\/70","completion":"    if(is_array($input)) {\n        $input = (object) $input;\n        $input_length = count($input);\n        $output = \"\";\n        if($k == $input_length) {\n            $output = \"All tuples have same length\";\n        }\n        else {\n            $output = \"All tuples do not have same length\";\n        }\n        return $output;\n    }\n    else {\n        return \"Input not an array\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/71","completion":"    $i = 0;\n    while ($i < count($nums) - 1) {\n        $j = $i + 1;\n        while ($j < count($nums)) {\n            if ($nums[i] > $nums[$j]) {\n                $temp = $nums[$j];\n                $nums[$j] = $nums[i];\n                $nums[i] = $temp;\n            }\n            $j++;\n        }\n        $i++;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/72","completion":"    if ($n < 0 || $n > 64) {\n        return false;\n    }\n\n    $n = bin2dec($n);\n    $s1 = $n - (4 * $n \/ 3);\n    $s2 = $s1 * $s1;\n    return bin2dec($s1) == $s2;\n}","language":"php"}
{"task_id":"MBPHP\/73","completion":"  return str_split($text, ' ');\n}","language":"php"}
{"task_id":"MBPHP\/74","completion":"    $matching = 0;\n    $n = count($colors);\n    for ($i = 0; $i < $n; $i++) {\n        if ($colors[$i] == $patterns[$i]) {\n            $matching++;\n        }\n    }\n    if ($matching == count($patterns)) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/75","completion":"    $results = array();\n    foreach ($testList as $tuple) {\n        foreach ($tuple as $x) {\n            if ($x % $k !== 0) {\n                $results[] = $tuple;\n            }\n        }\n    }\n    return $results;\n}","language":"php"}
{"task_id":"MBPHP\/76","completion":"    $result = $m * $n;\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/77","completion":"    $n = trim($n);\n    return ($n - strrev($n)) == 0;\n}","language":"php"}
{"task_id":"MBPHP\/78","completion":"    $res = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($n & $i) {\n            $res++;\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/79","completion":"    if ($s == \"\") {\n        return false;\n    }\n    if ($s != \"\") {\n        return $s.length() % 2 == 0;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/80","completion":"    if ($n > 23) {\n        $n = $n - 24;\n    }\n\n    return 3.0 * ($n * (1.0 + $n * ($n + 1.0))) \/ 2.0;\n}","language":"php"}
{"task_id":"MBPHP\/81","completion":"    $result = array();\n    $result[$testTup1[0]] = array( $testTup1[1], $testTup2[0] );\n    $result[$testTup2[0]] = array( $testTup1[2], $testTup2[1] );\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/82","completion":"    \/\/ Your code goes here.\n}","language":"php"}
{"task_id":"MBPHP\/83","completion":"    $sum = '';\n    for ($i = 0; $i < strlen($strr); $i++) {\n        $sum = $sum . chr($strr[$i] + 1);\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/84","completion":"    \/\/ write your code here\n}","language":"php"}
{"task_id":"MBPHP\/85","completion":"    $surfaceArea = ($r * $r * 3.14) * 4;\n    return $surfaceArea;\n}","language":"php"}
{"task_id":"MBPHP\/86","completion":"    $a = 1;\n    $b = 1;\n    for ( $i = 1; $i <= $n; ++$i ) {\n        $a = ( $a + $b ) \/ 2 | 0;\n        $b = $a + $b;\n    }\n    return $a * ( 3 * ( 2 * $b - 1 ) - $b ) \/ 2 | 0;\n}","language":"php"}
{"task_id":"MBPHP\/87","completion":"    $result = array();\n    foreach ($dict1 as $key => $value) {\n        $result[$key] = $value;\n    }\n    foreach ($dict2 as $key => $value) {\n        $result[$key] = $value;\n    }\n    foreach ($dict3 as $key => $value) {\n        $result[$key] = $value;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/88","completion":"    $freqMap = array();\n\n    foreach ($list1 as $key => $value) {\n        if (isset($freqMap[$value])) {\n            $freqMap[$value] = $freqMap[$value] + 1;\n        }\n        else {\n            $freqMap[$value] = 1;\n        }\n    }\n\n    return $freqMap;\n}","language":"php"}
{"task_id":"MBPHP\/89","completion":"    $num = $n;\n    $i = 1;\n    while ($num < $i) {\n        $num = $num * 10;\n        $i++;\n    }\n    return $num;\n}","language":"php"}
{"task_id":"MBPHP\/90","completion":"    $list2 = array();\n    $i = 0;\n    $a = array();\n    foreach($list1 as $element) {\n        $list2[$i] = substr($element, 0, strlen($element));\n        if (strlen($list2[$i]) >= strlen($a[$i])) {\n            $a[$i] = $list2[$i];\n        }\n        $i++;\n    }\n    return count($a);\n}","language":"php"}
{"task_id":"MBPHP\/91","completion":"    $i = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($subStr == substr($str1, $i, strlen($subStr))) {\n            return true;\n        }\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/92","completion":"    $n = intval($n);\n    return $n == $n * 2 + 1;\n}","language":"php"}
{"task_id":"MBPHP\/93","completion":"    $b = abs($b);\n    if ($a < 0) {\n        $a = -$a;\n        $b = -$b;\n    }\n    if ($b == 0) {\n        return 1;\n    }\n    if ($b == 1) {\n        return $a;\n    }\n    $temp = $a;\n    $temp2 = $a;\n    for ($i = 1; $i < $b; $i++) {\n        $temp = $temp * $temp;\n        $temp2 += $temp;\n    }\n    return $temp2 \/ $b;\n}","language":"php"}
{"task_id":"MBPHP\/94","completion":"    $min = array();\n    $minIndex = -1;\n\n    foreach ($testList as $item) {\n        $minIndex = 0;\n        foreach ($item as $subItem) {\n            if ($subItem < $min[$minIndex]) {\n                $minIndex = $subItem;\n            }\n        }\n\n        $min[$minIndex] = $item[0];\n    }\n\n    return $min[$minIndex];\n}","language":"php"}
{"task_id":"MBPHP\/95","completion":"  $res = 1;\n  foreach ($lst as $item) {\n    $itemLen = strlen($item);\n    if ($itemLen < $res) {\n      $res = $itemLen;\n    }\n  }\n  return $res;\n}","language":"php"}
{"task_id":"MBPHP\/96","completion":"    $i = 1;\n    $m = 1;\n    while($i <= $n) {\n        if($n % $i == 0) {\n            if($m == 1) {\n                $m = $i;\n            } else {\n                $m = $m * $i;\n            }\n        }\n        $i++;\n    }\n    echo $m;\n}","language":"php"}
{"task_id":"MBPHP\/97","completion":"    $result = array();\n    $l1 = sizeof($list1) - 1;\n    for ($x = 0; $x <= $l1; $x++) {\n        $c1 = 0;\n        $s1 = $list1[$x];\n        for ($y = 0; $y <= $l1; $y++) {\n            $s2 = $list1[$y];\n            if ($s1 == $s2) {\n                $c1++;\n            }\n        }\n        $result[$s1] = $c1;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/98","completion":"    if (empty($numbers)) return 0;\n\n    $sum = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n        $sum += $numbers[$i] * $numbers[$i];\n    }\n    return $sum \/ count($numbers);\n}","language":"php"}
{"task_id":"MBPHP\/99","completion":"    return $n . $n.toString(2);\n}","language":"php"}
{"task_id":"MBPHP\/100","completion":"    if (isPalindrome($num)) {\n        return $num;\n    }\n\n    $num = str_reverse($num);\n\n    while (!isPalindrome($num)) {\n        $num = str_reverse($num);\n    }\n\n    return $num;\n}","language":"php"}
{"task_id":"MBPHP\/101","completion":"    \/\/ write code here\n}","language":"php"}
{"task_id":"MBPHP\/102","completion":"    $first = substr($word, 0, 1);\n    $rest = substr($word, 1);\n\n    if($first == \"_\")\n        return $restToCamel($rest);\n    else\n        return $firstToUpper($first) . $restToCamel($rest);\n}","language":"php"}
{"task_id":"MBPHP\/103","completion":"    $max = ($n + $m) >> 1;\n    $min = $max - $m;\n    $max2 = $max - $n;\n    $min2 = $min - $m;\n\n    return (\n        $max * $min2 * $max2 +\n        $max2 * $min * $max +\n        $max * $min * $min2 +\n        $min * $max * $max2\n    ) \/ 4;\n}","language":"php"}
{"task_id":"MBPHP\/104","completion":"  $outputList = [];\n  $inputList = filter_list($inputList, FILTER_SANITIZE_NUMBER_INT);\n  $inputList = map_list($inputList, function($v) { return explode(\",\", $v); });\n\n  foreach($inputList as $input) {\n    $outputList[] = sort($input);\n  }\n\n  return $outputList;\n}","language":"php"}
{"task_id":"MBPHP\/105","completion":"    $cnt = 0;\n    foreach ($lst as $item) {\n        if (is_bool($item)) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}","language":"php"}
{"task_id":"MBPHP\/106","completion":"  $testList = array_merge(array_merge(array_values($testList), array_values($testTup)), array_merge(array_values($testTup), array_values($testList)));\n  return $testList;\n}","language":"php"}
{"task_id":"MBPHP\/107","completion":"    $cnt = 0;\n    for ($x = $l; $x < $r; $x++) {\n        $i = str($x);\n        $cnt += strlen($i) - (strlen($i) % 2);\n    }\n    return $cnt;\n}","language":"php"}
{"task_id":"MBPHP\/108","completion":"    $min = array();\n\n    if ($num3) {\n        $min = min($num1, $num2, $num3);\n    } elseif ($num2) {\n        $min = min($num1, $num2);\n    } elseif ($num1) {\n        $min = $num1;\n    }\n\n    $temp = array_merge($min, $num3);\n\n    $num1 = array();\n    $num2 = array();\n    $num3 = array_merge($num3, $min);\n\n    return $num1 . $num2 . $num3;\n}","language":"php"}
{"task_id":"MBPHP\/109","completion":"    $count = 0;\n    for ($i = 0; $i < $n - 1; $i++) {\n        if ($s[$i] == $s[$i + 1]) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/110","completion":"    $res = array();\n    foreach($testList as $el) {\n        if ($el[0] == $strtVal || $el[1] == $stopVal)\n            continue;\n        else if ($el[0] < $strtVal)\n            $res[] = $el;\n        else if ($el[1] > $stopVal)\n            $res[] = $el;\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/111","completion":"    $result = [];\n    $i=1;\n    foreach ($nestedlist as $list) {\n        if (isset($list[$i])) {\n            $result[] = $list[$i];\n        } else {\n            $i++;\n        }\n    }\n    $i = 1;\n    foreach ($nestedlist as $list) {\n        if (!empty($list[$i])) {\n            $i++;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/112","completion":"    return ($diameter * 2) + ($height * 2);\n}","language":"php"}
{"task_id":"MBPHP\/113","completion":"    $text = trim($text);\n\n    if (preg_match(\"\/^\\d+$\/\", $text)) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/114","completion":"    $freq = array();\n    $totalCount = count($testList);\n    foreach ($testList as $item) {\n        $freq[$item] = count($testList[$item]);\n    }\n    $sorted = sort($freq);\n    foreach ($sorted as $key => $count) {\n        $freq[$key] = ceil($totalCount\/$count);\n    }\n    $res = \"[(\";\n    foreach ($testList as $item) {\n        $res .= implode(', ', $item);\n        if ($freq[$item] > 1) {\n            $res .= ', ' . $freq[$item];\n        }\n    }\n    $res .= \")]\";\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/115","completion":"    \/\/ Your code goes here\n    $flag = true;\n    for($i=0;$i<count($list1);$i++){\n        if($list1[$i] != \"\"){\n            $flag = false;\n        }\n    }\n    return $flag;\n}","language":"php"}
{"task_id":"MBPHP\/116","completion":"    return $nums[0] * 100 + $nums[1] * 10 + $nums[2];\n}","language":"php"}
{"task_id":"MBPHP\/117","completion":"    $res = array();\n    foreach ($testList as $item) {\n        $res[] = array_map(\"floatval\", $item);\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/118","completion":"    return array_map(\"str_to_array\", $string);\n}","language":"php"}
{"task_id":"MBPHP\/119","completion":"    $index = $arr - 1;\n    $count = 1;\n    while ($index >= 0 && $count < $arr - 1) {\n        $count++;\n        if ($arr[$index] == $n) {\n            break;\n        }\n        $index--;\n    }\n    return $index + 1;\n}","language":"php"}
{"task_id":"MBPHP\/120","completion":"    return null;\n}","language":"php"}
{"task_id":"MBPHP\/121","completion":"  if ($count == 3) {\n    return true;\n  }\n\n  for ($i = 0; $i <= $n - 3; $i++) {\n    if ($a[$i] + $a[$i + 1] + $a[$i + 2] == $sum) {\n      $count++;\n      if (checkTriplet($a, $n, $sum, $count)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}","language":"php"}
{"task_id":"MBPHP\/122","completion":"  $count = 0;\n  $i = 1;\n\n  for ($i = 1; $i <= $n; $i++) {\n    $count = ($count + $i) * $i \/ 2;\n  }\n\n  return $count;\n}","language":"php"}
{"task_id":"MBPHP\/123","completion":"    $sum = 0;\n    for ( $i = 1; $i < $limit; $i++) {\n        if (isAmicable($i)) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/125","completion":"    $n = bin2dec($n);\n    $diff = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == \"0\") {\n            $diff += ceil(($n - 1) \/ 2);\n        } else {\n            $diff += ceil($n \/ 2);\n        }\n    }\n    return $diff;\n}","language":"php"}
{"task_id":"MBPHP\/126","completion":"    $common_divisors = array(2);\n\n    \/\/ Find common divisors\n    for ($i = $a; $i >= 1; $i--) {\n        if ($b % $i == 0) {\n            $common_divisors[] = $i;\n        }\n    }\n    \/\/ Return sum\n    return $common_divisors['length'] ? $common_divisors['reduce'](($a + $b)) : 0;\n}","language":"php"}
{"task_id":"MBPHP\/127","completion":"    $temp = $x * $y;\n    return $temp;\n}","language":"php"}
{"task_id":"MBPHP\/128","completion":"    $words = str_split($str);\n    $result = [];\n\n    foreach ($words as $word) {\n        if (strlen($word) > $n) {\n            $result[] = $word;\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/129","completion":"    $squareSize = 3;\n    if ($squareSize == 0)\n        return false;\n    if ($squareSize == 1)\n        return true;\n    $maxRowIndex = $squareSize - 1;\n    $maxColumnIndex = $squareSize - 1;\n    for ($r = 0; $r < $maxRowIndex; ++$r) {\n        for ($c = 0; $c < $maxColumnIndex; ++$c) {\n            if ($r == 0 || $c == 0 || $r == $maxRowIndex || $c == $maxColumnIndex)\n                if ($myMatrix[$r][$c] != ($r + $c) % 2 + 1)\n                    return false;\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/130","completion":"    $counts = countOccurrences($nums);\n    $max = [];\n    foreach ($counts as $value => $count) {\n        if ($count > $max[$max.length - 1]) {\n            $max[$max.length - 1] = $value;\n        }\n        if ($value == $max[$max.length - 1]) {\n            $max[$max.length - 1]++;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/131","completion":"    $vowels = array( 'a','e','i','o','u' );\n    $str2 = str_replace(array_keys($vowels), array_values($vowels), $str1);\n    return $str2;\n}","language":"php"}
{"task_id":"MBPHP\/132","completion":"  $str = '';\n  foreach ($tup1 as $val) {\n    $str = $str . $val . \" \";\n  }\n  $str = substr($str, 0, -1);\n  return $str;\n}","language":"php"}
{"task_id":"MBPHP\/133","completion":"    $result = 0;\n    foreach ($nums as $num) {\n        if ($num < 0) {\n            $result = $result + $num;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/134","completion":"    $ret = \"\";\n    if ( $n > 0 && is_numeric($p) && $arr !== false && $arr !== null && $arr !== undefined ) {\n        $arr = array_slice($arr, 0, -1);\n        $x = 0;\n        while ( $x <= $n ) {\n            $arr = array_slice($arr, 1);\n            $x++;\n        }\n        $ret = ($p % 2 === 0) ? \"EVEN\" : \"ODD\";\n    }\n    return $ret;\n}","language":"php"}
{"task_id":"MBPHP\/135","completion":"    $hexNum = 1;\n    $n = (int)$n;\n\n    for ($i = 1; $i <= $n; $i++) {\n        $hexNum += $i;\n    }\n\n    return $hexNum;\n}","language":"php"}
{"task_id":"MBPHP\/136","completion":"    $electricityBill = 0.0;\n    $electricityBill = $units * 9.2;\n    return round($electricityBill, 2);\n}","language":"php"}
{"task_id":"MBPHP\/137","completion":"    if (count($nums) == 0) {\n        return 0.0;\n    }\n    return $nums == 0 ? 1.0 : 0.0;\n}","language":"php"}
{"task_id":"MBPHP\/138","completion":"    if (is_numeric($n) && $n > 0) {\n        if ($n % 2 == 1) {\n            return false;\n        }\n        else {\n            for ($i=2; $i<($n\/2); $i++) {\n                if ($n % $i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/139","completion":"    return $r * $r * 3.14159265359;\n}","language":"php"}
{"task_id":"MBPHP\/140","completion":"    $resultList = array();\n    foreach ($testList as $subList) {\n        foreach ($subList as $element) {\n            $resultList[] = $element;\n        }\n    }\n    return $resultList;\n}","language":"php"}
{"task_id":"MBPHP\/141","completion":"    $len = count($nums);\n    for ($i = 0; $i < $len; $i++) {\n        $first = $nums[$i];\n        $min = $first;\n        $index = $i;\n        for ($j = $i + 1; $j < $len; $j++) {\n            if ($nums[$j] < $min) {\n                $min = $nums[$j];\n                $index = $j;\n            }\n        }\n        $temp = $nums[$i];\n        $nums[$i] = $nums[$index];\n        $nums[$index] = $temp;\n        $temp = $first;\n        $first = $min;\n        $min = $temp;\n    }\n    return $nums;\n}","language":"php"}
{"task_id":"MBPHP\/142","completion":"    $count = 0;\n    $pairs = $list1 . ',' . $list2 . ',' . $list3;\n    $pairs = explode(',', $pairs);\n    $pairs = array_filter($pairs);\n    foreach ($pairs as $pair) {\n        if (array_intersect($pair, $pairs)) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/143","completion":"    $output = 0;\n    for($i = 0; $i < count($input); $i++) {\n        if(count($input[$i]) > 0) {\n            $output++;\n        }\n    }\n    return $output;\n}","language":"php"}
{"task_id":"MBPHP\/144","completion":"  return 0;\n}","language":"php"}
{"task_id":"MBPHP\/145","completion":"    $max = -1;\n    foreach ($arr as $el) {\n        $diff = abs($el - $n);\n        if ($diff > $max) {\n            $max = $diff;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/146","completion":"    $ascii_value = 0;\n    $total_characters = strlen($str1);\n    for ($i = 0; $i < $total_characters; $i++) {\n        $ascii_value += ord($str1[$i]);\n    }\n    return $ascii_value;\n}","language":"php"}
{"task_id":"MBPHP\/147","completion":"    if($n <= 0 || $m <= 0 || $tri[$m][$n] == 0)\n        return 0;\n    return (maxPathSum($tri, $m-1, $n) + maxPathSum($tri, $m, $n-1) > $tri[$m][$n] ? $tri[$m][$n] : (maxPathSum($tri, $m-1, $n) + maxPathSum($tri, $m, $n-1)))\n}","language":"php"}
{"task_id":"MBPHP\/148","completion":"    $num = abs($n);\n    $sum = 0;\n    $max = 0;\n    for ($i = 0; $i < 6; $i++) {\n        $num \/= 10;\n    }\n    if ($num != 0) {\n        $sum += $num % 10;\n        $max = $sum;\n    }\n    for ($i = 1; $i <= 6; $i++) {\n        $sum += $n % 10;\n        if ($sum > $max) {\n            $max = $sum;\n        }\n        $n \/= 10;\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/149","completion":"    $max = 0;\n    $longest = 0;\n    $prev = -1;\n    $curr = -1;\n    $i = 0;\n\n    for (; $i < $n - 1; $i++) {\n        if ($arr[$i] === $arr[$i + 1]) continue;\n        $curr = $arr[$i];\n\n        for (; $prev + 1 < $i && $curr - 1 > $arr[$prev + 1]; $prev++) {\n            $curr = $arr[$prev];\n        }\n\n        $longest = Math.max($longest, $i - $prev - 1);\n        $max = Math.max($max, $i - $prev);\n    }\n\n    return $max > $longest ? $max : $longest;\n}","language":"php"}
{"task_id":"MBPHP\/150","completion":"    if($a <= $b && $a <= $c)\n    {\n        if($b <= $c)\n        {\n            return true;\n        }\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/151","completion":"    $gcd = 0;\n    for ($i = 1; $i <= min($x, $y); $i++) {\n        if (($x % $i == 0) && ($y % $i == 0)) {\n            $gcd = $i;\n        }\n    }\n    return ($gcd == 1);\n}","language":"php"}
{"task_id":"MBPHP\/152","completion":"    if (count($x) <= 1) {\n        return $x;\n    }\n    else {\n        var mid = count($x) \/ 2;\n        var left = $x.slice(0, mid);\n        var right = $x.slice(mid);\n        return merge(mergeSort(left), mergeSort(right));\n    }\n}","language":"php"}
{"task_id":"MBPHP\/153","completion":"  \/\/ write your code here\n  $delta = ($b * $b) - (4 * $a * $c);\n  return [($b * $b) \/ 2, (-1 * $b + (Math.sqrt($delta))) \/ 2];\n}","language":"php"}
{"task_id":"MBPHP\/154","completion":"    $result = [];\n    foreach($nums[$n] as $num){\n        if($num > 0){\n            $result.push($nums[$n][$num - 1]);\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/155","completion":"    return ($n & 1) == 0 ? $n : $n + 1;\n}","language":"php"}
{"task_id":"MBPHP\/156","completion":"    $intTuple = [];\n\n    foreach ($tupleStr as $str) {\n        $intTuple[] = intval($str[0]);\n    }\n\n    return $intTuple;\n}","language":"php"}
{"task_id":"MBPHP\/157","completion":"  $result = array();\n  $previous = array();\n  $current = array();\n\n  foreach ($list1 as $value) {\n    if (in_array($value, $previous) && $previous[$value] < $current[$value]) {\n      $result[$value]++;\n    } else if (in_array($value, $previous)) {\n      $result[$value] = $previous[$value] + 1;\n    } else {\n      $result[$value] = 1;\n    }\n    $previous[$value] = $result[$value];\n  }\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/158","completion":"    $arr = array_map(function ($a) { return array_sum($a); }, $arr);\n\n    $max = max($arr);\n    $min = min($arr);\n\n    if ($min === $max) {\n        return $n * ($n - 1) \/ 2;\n    }\n\n    if ($k <= $max - $min + 1) {\n        return $k * ($k + 1) \/ 2;\n    }\n\n    if ($k > $max - $min + 1) {\n        return $k * (2 * $k - 1) \/ 2;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/159","completion":"    if ($month == 1 || $month == 3 || $month == 5 || $month == 7 || $month == 8 || $month == 10 || $month == 12) {\n        return \"winter\";\n    } else if ($month == 4 || $month == 6 || $month == 9 || $month == 11) {\n        return \"spring\";\n    } else if ($month == 2) {\n        $days += (1 * 31);\n        if ($days % 30 == 0) {\n            return \"summer\";\n        } else if ($days % 7 == 0) {\n            return \"autumn\";\n        } else {\n            return \"winter\";\n        }\n    }\n    return \"invalid\";\n}","language":"php"}
{"task_id":"MBPHP\/160","completion":"    $delta = $n - ($a + $b);\n\n    if ($delta % 2 == 0) {\n        $x = $delta \/ 2;\n        $y = $delta \/ 2;\n        return \"x = \".$x.\", y = \".$y;\n    } else {\n        return \"No solution\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/161","completion":"    $i = 0;\n    while($i < count($list1) && $i < count($list2)) {\n        if($list1[$i] == $list2[$i]) {\n            remove($list1[$i]);\n            remove($list2[$i]);\n        } else {\n            $i++;\n        }\n    }\n    return $list1;\n}","language":"php"}
{"task_id":"MBPHP\/162","completion":"    if ($n < 0) return 0;\n\n    return $n + sumSeries($n - 1);\n}","language":"php"}
{"task_id":"MBPHP\/163","completion":"    $i = 1;\n    $total = 0;\n\n    while($i <= $s) {\n        $total += ($i * $l) \/ 2;\n        $i++;\n    }\n\n    return $total;\n}","language":"php"}
{"task_id":"MBPHP\/164","completion":"    return sum(divisors($num1)) == sum(divisors($num2));\n}","language":"php"}
{"task_id":"MBPHP\/165","completion":"    $count = 0;\n    if (strlen($str1) == 0)\n        return 0;\n    if (strlen($str1) == 1)\n        return 1;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        $current = ord($str1[$i]);\n        if (($i != 0) && ($i % 2 != 0))\n            $current += 32;\n        if ($current > 122)\n            $current -= 26;\n        $count++;\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/166","completion":"    $res = 0;\n    $len = count($a);\n    for ($i = 0; $i < $len; $i++) {\n        if ($a[$i] % 2 == 0) {\n            if (($a[$i] ^ $n) % 2 == 0) {\n                $res++;\n            }\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/167","completion":"  return $n < 2 ? 1 : 2 << $n-1;\n}","language":"php"}
{"task_id":"MBPHP\/168","completion":"    $count = 0;\n    foreach ($a as $key => $val) {\n        if ($val == $x) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/169","completion":"    return ($n * (3 * $n - 1)) \/ 2;\n}","language":"php"}
{"task_id":"MBPHP\/170","completion":"    $total = 0;\n\n    \/\/ Your code goes here.\n\n    return $total;\n}","language":"php"}
{"task_id":"MBPHP\/171","completion":"    $s = $a * 5;\n    $s = $s * 5;\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/172","completion":"  $list = 'std';\n  $occurances = $s.count($list);\n  return $occurances;\n}","language":"php"}
{"task_id":"MBPHP\/173","completion":"    $new_text = \"\";\n    preg_match(\"\/[^a-zA-Z0-9]\/\", $text, $new_text);\n    return $new_text;\n}","language":"php"}
{"task_id":"MBPHP\/174","completion":"    $d = array_merge($l);\n    $keys = array_keys($d);\n    $r = array();\n    foreach($keys as $k) {\n        $c = array_values($d);\n        $r[$k] = array();\n        foreach($c as $v) {\n            if($v != $k) {\n                $r[$k][] = $v;\n            }\n        }\n    }\n    return $r;\n}","language":"php"}
{"task_id":"MBPHP\/175","completion":"    $stack = array();\n    $openP = array(\"{}\", \"()\", \"[]\", \"<>\", \"=>\");\n    $closedP = array(\"{\", \"}\", \"(\", \")\", \"[\", \"]\");\n    foreach ($openP as $key => $value) {\n        $stack[$key] = 0;\n    }\n    foreach ($str1 as $char) {\n        if ($char === \"\\\\\") {\n            $str1 = substr($str1, 0, -1);\n        } else if ($char == \"{\") {\n            $stack[\"{\"]++;\n        } else if ($char == \"}\") {\n            $stack[\"}\"]++;\n        } else if ($char == \"(\") {\n            $stack[\"(\"]++;\n        } else if ($char == \")\") {\n            $stack[\")\"]++;\n        } else if ($char == \"[\")","language":"php"}
{"task_id":"MBPHP\/176","completion":"    $perimeter = $a + $b + $c;\n    return $perimeter;\n}","language":"php"}
{"task_id":"MBPHP\/177","completion":"    $min = min($l, $r);\n    $max = max($l, $r);\n    $count = 0;\n    $current = $min;\n    $result = array();\n    \/\/ While there is not a bigger number between $min and $max\n    while ($current <= $max) {\n        \/\/ If the number is divisible by $current, add it to result\n        if ($current % $l == 0 && $current % $r == 0) {\n            $result[] = $current;\n            $count++;\n        }\n        \/\/ Increase current\n        $current++;\n    }\n    \/\/ If result is empty, return false\n    if (!$count) return false;\n    \/\/ If result is not empty, return result\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/178","completion":"    return str_search($patterns, $text);\n}","language":"php"}
{"task_id":"MBPHP\/179","completion":"    $x = str_pad($x, 10, \"0\", STR_PAD_LEFT);\n    $s = array(\n        '0' => 0,\n        '2' => 2,\n        '3' => 3,\n        '5' => 5,\n        '7' => 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'C' => 100,\n        'D' => 500,\n        'F' => 1000\n    );\n\n    for ($k = 0; $k < count($s); $k++) {\n        if ($x == $s[$k]) return true;\n    }\n\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/180","completion":"    $R = 6378.137; \/\/ Radius of earth in KM\n    $dLat = (6378.137 * ($slat - $elat) * (1 \/ 180));\n    $dLon = (6356.752 * ($slon - $elon) * (1 \/ 180));\n    $a = $dLat * (1 \/ $R);\n    $b = (1 - $dLat) * (1 \/ $R);\n    $c = $dLon * (1 \/ $R);\n    $d = (1 - $dLon) * (1 \/ $R);\n    $e = Math.sqrt(($a * ($a + $b) + $c * ($c + $d)));\n    return $e * 1.609344;\n}","language":"php"}
{"task_id":"MBPHP\/181","completion":"    $result = array();\n\n    for ($i = 0, $min = min($arr); $i < $n; $i++) {\n        $c = array_search($arr[$i], $arr, $min);\n\n        if ($c !== false) {\n            $result[$i] = $arr[$c];\n        } else {\n            break;\n        }\n    }\n\n    return implode(\"\", $result);\n}","language":"php"}
{"task_id":"MBPHP\/182","completion":"    $pattern = '[A-Za-z0-9_]';\n    $arr = array();\n    $arr_lower = array();\n    $arr_upper = array();\n    $arr_numeric = array();\n    $arr_special = array();\n\n    preg_match_all($pattern, $string, $matches);\n\n    foreach($matches[0] as $value) {\n        $arr[] = $value;\n    }\n\n    foreach($matches[1] as $value) {\n        $arr_lower[] = $value;\n    }\n\n    foreach($matches[2] as $value) {\n        $arr_upper[] = $value;\n    }\n\n    foreach($matches[3] as $value) {\n        $arr_numeric[] = $value;\n    }\n\n    foreach($matches[4] as $value) {\n        $arr_special[] = $value;\n    }\n\n   ","language":"php"}
{"task_id":"MBPHP\/183","completion":"    $counts = 0;\n    $counter = 1;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        if ($arr[$i] - $arr[$i + 1] == $k) {\n            $counts++;\n        }\n    }\n    return $counts;\n}","language":"php"}
{"task_id":"MBPHP\/184","completion":"    $list = (array) $list;\n    foreach ($list as $value) {\n        if ($value > $num) {\n            return true;\n        }\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/185","completion":"    $equation = $a * $x * $x + $b * $x + $c;\n    $result = $equation < 0 ? [0, -$equation] : [0, $equation];\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/186","completion":"    $pattern = \"\/^\".implode(\"|\", $patterns).\"$\/i\";\n    $regex = new Regexp($pattern, \"i\");\n    $match = preg_match_all($regex, $text, $matches);\n\n    return (count($matches) > 0 ? \"Matched!\" : \"Not Matched!\");\n}","language":"php"}
{"task_id":"MBPHP\/187","completion":"    $a = $x . str_repeat('0', $m - 1);\n    $b = $y . str_repeat('0', $n - 1);\n\n    $max = 0;\n    $max_array = array();\n\n    for($i = 0; $i < $m; $i++) {\n        for($j = 0; $j < $n; $j++) {\n            $max = 0;\n            $temp_array = array();\n            for($x_i = 0; $x_i < $m; $x_i++) {\n                for($y_i = 0; $y_i < $n; $y_i++) {\n                    if ($i != $x_i && $j != $y_i && $a[$x_i] == $b[$y_i] && $x","language":"php"}
{"task_id":"MBPHP\/188","completion":"    $sq = $n * $n;\n    return $sq % $n == 0;\n}","language":"php"}
{"task_id":"MBPHP\/189","completion":"  $max = count($arr);\n\n  for ($i = 0; $i < $max; $i++) {\n    $arr[$i] = abs($arr[$i]);\n  }\n\n  $arr = array_filter($arr);\n  $arr = array_sort($arr);\n\n  if ($n >= 0) {\n    if (in_array($n, $arr)) {\n      return $n;\n    }\n    return $n + 1;\n  }\n\n  for ($i = 0; $i < $max; $i++) {\n    if ($arr[$i + 1] - $arr[$i] == 1) {\n      return $arr[$i] + 1;\n    }\n  }\n  return $max + 1;\n}","language":"php"}
{"task_id":"MBPHP\/190","completion":"    \/\/ your code\n}","language":"php"}
{"task_id":"MBPHP\/191","completion":"    return date(\"m\");\n}","language":"php"}
{"task_id":"MBPHP\/192","completion":"    return count(explode('.', $str)) >= 2;\n}","language":"php"}
{"task_id":"MBPHP\/193","completion":"    $seen = array();\n    $result = array();\n    foreach($testTup as $key = $value) {\n        if (isset($seen[$value])) continue;\n        $seen[$value] = true;\n        $result[] = $value;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/194","completion":"    return $n;\n}","language":"php"}
{"task_id":"MBPHP\/195","completion":"  $low = 0;\n  $high = $arr.count() - 1;\n  $mid = $high - $low + 1;\n\n  if ($n > $mid) {\n    $n = $mid;\n  }\n\n  if ($n < $mid) {\n    $n = $mid;\n  }\n\n  while ($mid >= $low && $mid <= $high) {\n    if ($arr[$mid] == $x) {\n      break;\n    }\n\n    if ($arr[$mid] < $x) {\n      $low = $mid + 1;\n    } else {\n      $high = $mid - 1;\n    }\n\n    $mid = $low + ($high - $low) \/ 2;\n  }\n\n  return $mid - ($low \/ ","language":"php"}
{"task_id":"MBPHP\/196","completion":"  \/\/ your code here\n}","language":"php"}
{"task_id":"MBPHP\/197","completion":"    $tups = array($testTup1, $testTup2);\n    $base = $tups[0][0];\n    $exp = $tups[1][0];\n    $powers = [];\n    for ($i = 0; $i <= $base; $i++) {\n        $powers[$i] = 0;\n    }\n\n    for ($i = 0; $i <= $base; $i++) {\n        for ($j = 0; $j <= $exp; $j++) {\n            $powers[$i] += $tups[0][$i] * $tups[1][$j];\n        }\n    }\n    return $powers;\n}","language":"php"}
{"task_id":"MBPHP\/198","completion":"  $x = 1.0;\n  $y = 1.0;\n  if ($a > $b) {\n    $x = $a;\n    $y = $b;\n  } else {\n    $x = $b;\n    $y = $a;\n  }\n  $c = sqrt($x * $x + $y * $y);\n  return ($c \/ 2.0) * 3.1415926535897931 * $c;\n}","language":"php"}
{"task_id":"MBPHP\/199","completion":"    \/\/your code\n}","language":"php"}
{"task_id":"MBPHP\/200","completion":"    $max = max($list1);\n    $max_index = array_search($max, $list1);\n    $max_index_positions = array_slice($list1, 0, $max_index + 1);\n    return $max_index_positions;\n}","language":"php"}
{"task_id":"MBPHP\/201","completion":"    $len = count($lst);\n    if ($len > 0) {\n        if (count(array_diff_key($lst, $lst[0]))) {\n            return false;\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/202","completion":"    $arr = str_split($str1);\n    $newArr = array();\n    foreach ($arr as $key => $value) {\n        if (!empty($value) && $value % 2 == 0) {\n            continue;\n        }\n        $newArr[] = $value;\n    }\n    return implode(' ', $newArr);\n}","language":"php"}
{"task_id":"MBPHP\/203","completion":"    $counter = 0;\n    $max = max($n1, $n2);\n    $min = min($n1, $n2);\n    for ($i = $min; $i <= $max; $i++) {\n        if ($n1 ^ $i == 0 && $n2 ^ $i == 0) {\n            $counter++;\n        }\n    }\n    return $counter;\n}","language":"php"}
{"task_id":"MBPHP\/204","completion":"    $count = 0;\n\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == $c)\n            $count++;\n    }\n\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/205","completion":"    \/\/TODO - Your code goes here!\n    $listSize = count($testTup);\n\n    if ($listSize == 0) return [];\n\n    $list = new array();\n    for ($i = 0; $i < $listSize; $i++) {\n        $list[$i] = $testTup[$i];\n    }\n\n    return $list;\n}","language":"php"}
{"task_id":"MBPHP\/206","completion":"  $res = [];\n  $len = count($testTup);\n  for ($i = 0; $i < $len; $i += 2) {\n    $res[] = $testTup[$i] . $testTup[$i + 1];\n  }\n  return $res;\n}","language":"php"}
{"task_id":"MBPHP\/207","completion":"    $strLen = strlen($str);\n    $charSet = str_split($str);\n\n    $longestLen = 0;\n    $longestSeq = array();\n\n    foreach($charSet as $chars) {\n        $i = 0;\n        $j = 0;\n        $count = 0;\n\n        while($i < $strLen) {\n            $j = $i + 1;\n            while($j < $strLen && $chars[$j] == $chars[$i]) {\n                $j++;\n            }\n            $count++;\n            if($count > $longestLen) {\n                $longestLen = $count;\n                $longestSeq = array($chars, $i, $j - 1);\n            }\n            $i = $j;\n        }\n    }\n    return $longestSeq;\n}","language":"php"}
{"task_id":"MBPHP\/208","completion":"    return preg_match(\"#^-?\\\\d*\\.?\\\\d{1,2}\\\\d*$#\", $num);\n}","language":"php"}
{"task_id":"MBPHP\/209","completion":"    \/\/ write code here\n}","language":"php"}
{"task_id":"MBPHP\/210","completion":"    return preg_match(\"\/^[a-zA-Z0-9]+$\/\", $string);\n}","language":"php"}
{"task_id":"MBPHP\/211","completion":"    $i = 0;\n    while ($n > 0) {\n        $n = $n & (1 << $i);\n        $i++;\n    }\n    return $i - 1;\n}","language":"php"}
{"task_id":"MBPHP\/212","completion":"    $n = (int) $n + 1;\n    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum += $i * $i * $i * $i;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/213","completion":"    $testTup3 = array();\n    foreach($testTup1 as $testVal1) {\n        $testTup3[] = $testVal1;\n        foreach($testTup2 as $testVal2) {\n            $testTup3[] = $testTup3[] . \" \" . $testVal2;\n        }\n    }\n    return $testTup3;\n}","language":"php"}
{"task_id":"MBPHP\/214","completion":"    $degree = $radian * (180 \/ 3.1415926535897931);\n    return $degree;\n}","language":"php"}
{"task_id":"MBPHP\/215","completion":"  $ret = [];\n  for ($i=0; $i<count($alist); $i++) {\n    $runlength = 0;\n    for ($j=0; $j<count($alist[$i]); $j++) {\n      $runlength += count($alist[$i][$j]);\n    }\n    for ($j=0; $j<$runlength; $j++) {\n      $ret[] = $alist[$i][$j];\n    }\n  }\n  return $ret;\n}","language":"php"}
{"task_id":"MBPHP\/216","completion":"  if (count($list1) === count($list2)) {\n    $result = true;\n    $i = 0;\n    while ($i < count($list1)) {\n      if (count($list1[$i]) !== count($list2[$i])) {\n        $result = false;\n        break;\n      }\n      $i++;\n    }\n  } else {\n    $result = false;\n  }\n\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/217","completion":"    \/\/ TODO: implement the function\n}","language":"php"}
{"task_id":"MBPHP\/218","completion":"    \/\/ Your code\n}","language":"php"}
{"task_id":"MBPHP\/219","completion":"    $resArr = array();\n    if ($k > count($testTup))\n        return array();\n    for ($i = 0; $i < $k; $i++) {\n        $resArr[] = $testTup[$i];\n    }\n    $min = min($resArr);\n    $max = max($resArr);\n    foreach ($resArr as $v) {\n        if ($v == $min) {\n            $min = $v;\n            continue;\n        }\n        if ($v == $max) {\n            $max = $v;\n            continue;\n        }\n        if ($min > $v) {\n            $min = $v;\n        }\n        if ($max < $v) {\n            $max = $v;\n        }\n    }\n    return [$min, $max];\n}","language":"php"}
{"task_id":"MBPHP\/220","completion":"    $text = str_replace(\/,|\\.|\\s\/g, \":\");\n    $text = substr($text, 0, $n - 1);\n    $text = substr($text, 0, strpos($text, \",\"));\n    $text = substr($text, 0, strpos($text, \".\"));\n    return $text;\n}","language":"php"}
{"task_id":"MBPHP\/221","completion":"  return 0;\n}","language":"php"}
{"task_id":"MBPHP\/222","completion":"    $sum = 0;\n    foreach ($testTuple as $value) {\n        if (is_numeric($value)) {\n            $sum = $sum + (int)$value;\n        } else {\n            return false;\n        }\n    }\n    return $sum == count($testTuple);\n}","language":"php"}
{"task_id":"MBPHP\/223","completion":"    $i = 0;\n    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] === $x) {\n            $count++;\n        }\n    }\n    return ($count >= $n);\n}","language":"php"}
{"task_id":"MBPHP\/224","completion":"  return countBits($n, 1);\n}","language":"php"}
{"task_id":"MBPHP\/225","completion":"    \/\/ check for correctness\n    if (is_numeric($arr[$high]) && $low <= $high && $low >= 0 && $high <= $arr.length) {\n        \/\/ check if element is min or not\n        $min = ($low < $high) ? $arr[$low] : $arr[$high];\n        $rot = ($low < $high) ? $low : $high;\n        while ($rot < $high) {\n            $arr[$rot] = $arr[$rot + 1];\n            $rot++;\n        }\n        $arr[$rot] = $min;\n        return $min;\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/226","completion":"    $str = str_replace(array_map(function($v) {\n        return $v == $v ? substr($v, 1, 1) : $v;\n    }, str_split($str, '')), '', -1);\n    return $str;\n}","language":"php"}
{"task_id":"MBPHP\/227","completion":"    $min = min($a, $b, $c);\n    if ($min < 0) {\n        $min = abs($min);\n    }\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/228","completion":"    $mask = (1 << (r - l + 1));\n    return $n & $mask == 0;\n}","language":"php"}
{"task_id":"MBPHP\/229","completion":"    $resultArr = array();\n    foreach($arr as $num) {\n        if($num < 0) {\n            $resultArr[] = $num;\n        } else {\n            $resultArr[] = $num;\n            $resultArr[$resultArr.length] = -1;\n        }\n    }\n    return $resultArr;\n}","language":"php"}
{"task_id":"MBPHP\/230","completion":"    $str2 = \"\";\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == \" \") {\n            $str2 .= $char;\n        } else {\n            $str2 .= $str1[$i];\n        }\n    }\n    return $str2;\n}","language":"php"}
{"task_id":"MBPHP\/231","completion":"  $sum = 0;\n  $total = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $total += $tri[$i][$i];\n    if ($i < $n - 1) {\n      $total += $tri[$i][$i + 1];\n    }\n    if ($i > 0) {\n      $total -= $tri[$i][$i - 1];\n    }\n    $sum = $total > $sum ? $total : $sum;\n  }\n  return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/232","completion":"    $list2 = array_filter($list1, function($v){\n        return $v <= $list1[$n - 1];\n    });\n\n    return array_slice($list2, 0, $n);\n}","language":"php"}
{"task_id":"MBPHP\/233","completion":"  return ($2 * pi * $r * $h) + (2 * pi * $r * $h);\n}","language":"php"}
{"task_id":"MBPHP\/234","completion":"    $area = $l * $l * $l;\n    $volume = $area * $l * 3;\n    return $volume;\n}","language":"php"}
{"task_id":"MBPHP\/235","completion":"    $n = $n & 0xFFFFFFFF;\n    $n = ($n & 0xAAAAAAAA) >> 1;\n    $n = $n & 0x55555555;\n    return $n;\n}","language":"php"}
{"task_id":"MBPHP\/236","completion":"    $count = 0;\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($l = $j + 1; $l < $n; $l++) {\n                if ($l + $k > $n + 1 - $i && $l + $k < $n + 1 - $j) {\n                    if ($i == $j && $l == $k) {\n                        $count++;\n                    }\n                }\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/237","completion":"    $counter = {};\n    $result = {};\n    foreach ($testList as $list) {\n        $listLength = strlen($list);\n        for ( $i = 0; $i < $listLength; ++$i) {\n            $key = $list[$i];\n            if ($counter[$key] == undefined) {\n                $counter[$key] = 1;\n            } else {\n                $counter[$key]++;\n            }\n        }\n    }\n\n    foreach ($counter as $key => $value) {\n        if ($value % 2 == 0) {\n            $result[$key] = $value;\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/238","completion":"    $count = 0;\n    if (strlen($str) == 0) {\n        return 0;\n    }\n    $str = str_split($str, 1);\n    if (strlen($str[0]) == 0) {\n        return 0;\n    }\n    $count++;\n    $str = str_split($str[0], 1);\n    if (strlen($str[0]) == 0) {\n        return 0;\n    }\n    $count++;\n    return $count + numberOfSubstrings($str[0]);\n}","language":"php"}
{"task_id":"MBPHP\/239","completion":"    $total = 0;\n\n    \/\/ Check if the numbers are valid.\n    if ($n < 1 || $m < 1) {\n        return 0;\n    }\n\n    \/\/ Make sure the numbers are even.\n    if ($n % 2 !== 0 || $m % 2 !== 0) {\n        return 0;\n    }\n\n    \/\/ Divide the numbers in groups of two.\n    $n \/= 2;\n    $m \/= 2;\n\n    \/\/ Check how many times this group can be divided into 2.\n    $total += $m \/ 2;\n\n    \/\/ Check the remaining groups of two.\n    $total += getTotalNumberOfSequences($m, $n);\n\n    return $total;\n}","language":"php"}
{"task_id":"MBPHP\/240","completion":"    return $list1 = str_replace(array_pop($list1), $list2, array_pop($list1));\n}","language":"php"}
{"task_id":"MBPHP\/241","completion":"  return $m === 1 ? array1d($n, $o) : array2d($m, $n, $o);\n}","language":"php"}
{"task_id":"MBPHP\/242","completion":"    $charac = 0;\n    foreach ($str1 as $str) {\n        $charac += strlen($str);\n    }\n    return $charac;\n}","language":"php"}
{"task_id":"MBPHP\/243","completion":"    $sortOnOccurence = array();\n    foreach ($lst as $tuple) {\n        if (!in_array($tuple[0], $sortOnOccurence)) {\n            $sortOnOccurence[$tuple[0]] = array();\n        }\n        $sortOnOccurence[$tuple[0]][] = $tuple;\n    }\n    foreach ($sortOnOccurence as $key => $tuples) {\n        $sortOnOccurence[$key] = array_merge($sortOnOccurence[$key], $tuples);\n    }\n    return $sortOnOccurence;\n}","language":"php"}
{"task_id":"MBPHP\/244","completion":"    $sq = $n * $n;\n\n    $i = 0;\n    $x = $n;\n    $y = $n;\n\n    while ($i < 50) {\n        $x = ($x + $n) \/ 2;\n        $y = ($y + $n) \/ 2;\n        $sq = ($x * $x) + ($y * $y);\n        if ($sq < $n) {\n            $n = $x;\n        } else if ($sq > $n) {\n            $n = $y;\n        } else {\n            break;\n        }\n\n        $i++;\n    }\n\n    return $n * $n;\n}","language":"php"}
{"task_id":"MBPHP\/245","completion":"    $sum = 0;\n    $max = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j <= $n; $j++) {\n            $sum = 0;\n            for ($k = $i; $k <= $j; $k++) {\n                $sum += $arr[$k];\n            }\n            if ($sum > $max) {\n                $max = $sum;\n            }\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/246","completion":"    $number = abs($number);\n    $iterations = 0;\n    $current = 0;\n    $guess = $number;\n    $sign = ($number \/ $guess) \/ 2;\n    while ($current >= 0 && $current <= $number) {\n        $iterations++;\n        $current = $guess;\n        $guess = $current + $sign;\n        $sign = ($number \/ $guess) \/ 2;\n    }\n    return $iterations;\n}","language":"php"}
{"task_id":"MBPHP\/247","completion":"    $a = array_fill(0, 0, strlen($str), 0);\n\n    for ($i = 0; $i < strlen($str); $i++) {\n        $a[$i] = $i;\n    }\n\n    $i = 0;\n    for (\n        $j = strlen($str) - 1;\n        $j >= 0;\n        $j--, $i++\n    ) {\n        $a[$i] = $j;\n        if (strcasecmp($str[$i], $str[$j])) {\n            $a[$j + 1]++;\n        }\n    }\n\n    return max($a);\n}","language":"php"}
{"task_id":"MBPHP\/248","completion":"    return (2 * $n + 1) \/ (1.0 * $n);\n}","language":"php"}
{"task_id":"MBPHP\/249","completion":"  return $arrayNums1 . intersect($arrayNums2);\n}","language":"php"}
{"task_id":"MBPHP\/250","completion":"  $count = 0;\n  foreach ($tup as $item) {\n    if ($item == $x) {\n      $count++;\n    }\n  }\n  return $count;\n}","language":"php"}
{"task_id":"MBPHP\/251","completion":"    $new_list = array();\n    for($i = 0; $i < count($list); $i++) {\n        $new_list[$i] = $element;\n        $new_list[$i] = $list[$i];\n    }\n    return $new_list;\n}","language":"php"}
{"task_id":"MBPHP\/252","completion":"    $polar_numbers = [];\n\n    for ($i = 0; $i < count($numbers); $i++) {\n        $polar_numbers[$i] = ($numbers[$i] * pi()) \/ 180.0;\n    }\n\n    return $polar_numbers;\n}","language":"php"}
{"task_id":"MBPHP\/253","completion":"    $sum = 0;\n    foreach ($list1 as $v) {\n        if (intval($v)) {\n            $sum++;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/254","completion":"    $words = array();\n    $text = preg_replace(\"\/\\b[a-e]{2,}\\b\/i\", \"\", $text);\n    preg_split(\"\/\\s+\/\", $text, $words);\n    return $words;\n}","language":"php"}
{"task_id":"MBPHP\/255","completion":"    $i = 0;\n    $tmp = array();\n\n    $arr = array_merge(array_chunk($l, $n), array_fill(array_chunk($l, $n), $l[$i]));\n\n    foreach ($arr as $v) {\n        $tmp[] = $v;\n    }\n\n    return $tmp;\n}","language":"php"}
{"task_id":"MBPHP\/256","completion":"    $count = 0;\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i == $n) {\n            $count++;\n        } else {\n            if (isPrime($i)) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/257","completion":"    return [$b, $a];\n}","language":"php"}
{"task_id":"MBPHP\/258","completion":"    $oddNums = array_filter(function ($num) {\n        return $num % 2 != 0;\n    }, $arrayNums);\n\n    return count($oddNums);\n}","language":"php"}
{"task_id":"MBPHP\/259","completion":"    $maxTup1 = $testTup1[0];\n    $maxTup2 = $testTup2[0];\n    $maxTup1Index = 0;\n    $maxTup2Index = 0;\n    $maxTup1Value = $testTup1[$maxTup1Index][0];\n    $maxTup2Value = $testTup2[$maxTup2Index][0];\n    foreach($testTup1 as $index = $value) {\n        if ($maxTup1Value < $value[0]) {\n            $maxTup1 = $value;\n            $maxTup1Index = $index;\n            $maxTup1Value = $value[0];\n        }\n    }\n    foreach($testTup2 as $index = $value) {\n        if ($maxTup2Value < $value[0]) {\n            $max","language":"php"}
{"task_id":"MBPHP\/260","completion":"  $n = 5;\n  for ($i = 2; $i <= $n; $i++) {\n    if (isPrime($i)) {\n      return $i;\n    }\n  }\n  return 0;\n}","language":"php"}
{"task_id":"MBPHP\/261","completion":"  $total = 0;\n  for ($i = 0; $i < count($testTup1); $i++) {\n    $total += $testTup1[$i] \/ $testTup2[$i];\n  }\n  return $total;\n}","language":"php"}
{"task_id":"MBPHP\/262","completion":"    $arr1 = array_chunk($list1, $l);\n    $arr1 = array_map('str_repeat', $arr1);\n    return $arr1;\n}","language":"php"}
{"task_id":"MBPHP\/263","completion":"    $res = array();\n\n    foreach ($d1 as $key => $value) {\n        $res[$key] = $value;\n    }\n\n    foreach ($d2 as $key => $value) {\n        $res[$key] = $value;\n    }\n\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/264","completion":"    return $hAge * 7;\n}","language":"php"}
{"task_id":"MBPHP\/265","completion":"    $res = [];\n    for ($i = 0; $i < count($s); $i += $step) {\n        $res[] = $s[$i];\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/266","completion":"    $a = ($l * 2) * $l * $l;\n    return $a;\n}","language":"php"}
{"task_id":"MBPHP\/267","completion":"    $sum = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 != 0) {\n            $sum += $i * $i;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/268","completion":"  $starNum = $n * $n + ($n - 1) * $n \/ 2;\n  return $starNum;\n}","language":"php"}
{"task_id":"MBPHP\/269","completion":"  $ascii = ord($k);\n  return $ascii;\n}","language":"php"}
{"task_id":"MBPHP\/270","completion":"  $sum = 0;\n  for ($i = 0; $i < $n; $i++) {\n    if ($i % 2 == 0 && $arr[$i] % 2 == 0) {\n      $sum += $arr[$i];\n    }\n  }\n  return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/271","completion":"  $base = 2;\n  $power = 5;\n\n  $sum = 0;\n  while ($power <= $n) {\n    $sum += (pow($base, $power)) >> 5;\n    $power += 2;\n  }\n\n  return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/272","completion":"    return array_filter(array_column(array_reverse(array_map(array_column(array_map(array_column($testList, 3)), 2)), 1), 1));\n}","language":"php"}
{"task_id":"MBPHP\/273","completion":"    $result = array();\n    foreach($testTup1 as $index1 => $value1) {\n        $result[$index1] = $value1 - $testTup2[$index1];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/274","completion":"    return binomialCoeffSum($n, 2, $n \/ 2);\n}","language":"php"}
{"task_id":"MBPHP\/275","completion":"    if ($a == null) {\n        return false;\n    }\n    $count = 0;\n    foreach ($a as $i => $value) {\n        if ($n == $value) {\n            $count++;\n        }\n        else if ($count == $m) {\n            return $i;\n        }\n    }\n    return -1;\n}","language":"php"}
{"task_id":"MBPHP\/276","completion":"    return $r * $h * 3;\n}","language":"php"}
{"task_id":"MBPHP\/277","completion":"    \/\/ your code goes here\n    return array();\n}","language":"php"}
{"task_id":"MBPHP\/278","completion":"    $count = 0;\n\n    if (!is_array($testTup)) {\n        return $count;\n    }\n    foreach ($testTup as $key => $value) {\n        if (is_array($value)) {\n            $count += countFirstElements($value);\n        } else if (is_numeric($value)) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/279","completion":"  $i = 1;\n  $factor = 1;\n  $result = 0;\n  while ($i <= $n) {\n    $factor = $factor * 10;\n    $i++;\n  }\n  $result = $factor;\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/280","completion":"    $idx = 0;\n\n    \/\/ Loop through the list\n    while ($idx < count($dlist)) {\n        \/\/ If the list element is the searched item, then return its index.\n        if ($dlist[$idx] === $item) {\n            return array($idx, true);\n        }\n        $idx += 1;\n    }\n\n    \/\/ If the list element is not the searched item, then return the index of the first element in the list.\n    return array($idx, false);\n}","language":"php"}
{"task_id":"MBPHP\/281","completion":"    $result = true;\n    $hash = array();\n    foreach ($testList as $test) {\n        if (in_array($test, $hash)) {\n            $result = false;\n            break;\n        }\n        else {\n            $hash[] = $test;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/282","completion":"    $result = array_map(function($num1, $num2) {\n        return abs($num1 - $num2);\n    }, $nums1, $nums2);\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/283","completion":"    $digit = [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9];\n    $freq = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n    for ($i = 0; $i < strlen($n); $i++) {\n        if (in_array($n[$i], $digit) && in_array($n[$i], $freq)) {\n            $freq[$n[$i]]++;\n        }\n    }\n\n    return count($freq) <= count($digit);\n}","language":"php"}
{"task_id":"MBPHP\/284","completion":"    return count($list) === count($list | $element);\n}","language":"php"}
{"task_id":"MBPHP\/285","completion":"    $pattern = 'a(.*)b(.*)b(.*)b(.*)b';\n\n    return preg_match($pattern, $text);\n}","language":"php"}
{"task_id":"MBPHP\/286","completion":"    $maxSum = 0;\n    $currSum = 0;\n    $tempSum = 0;\n\n    for($i = 0; $i < $n; $i++) {\n        $currSum += $a[$i];\n        $tempSum = $currSum;\n\n        if($i >= $k - 1) {\n            $currSum -= $a[$i - $k + 1];\n            $tempSum += $a[$i - $k + 1];\n        }\n\n        if($tempSum > $maxSum) {\n            $maxSum = $tempSum;\n        }\n    }\n\n    return $maxSum;\n}","language":"php"}
{"task_id":"MBPHP\/287","completion":"  $sum = 0;\n  for ($i = 0; $i <= $n; $i++) {\n    $sum = $sum + (i * i);\n  }\n  return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/288","completion":"    $inv = 1;\n    for ( $i=1; $i <= $p; $i++) {\n        if ($inv % $i != 0) {\n            continue;\n        }\n        $inv = $inv * $n % $i;\n    }\n    return $inv;\n}","language":"php"}
{"task_id":"MBPHP\/289","completion":"    $y = $n \/ 100;\n    $y = floor($y);\n    $q = $n % 100;\n    if ($q >= 15 && $q <= 20) {\n        return $n - $y * 100;\n    }\n    $q = $q % 10;\n    if ($q >= 1 && $q <= 3) {\n        return $n - $y * 100 - $q * 10;\n    }\n    return $n - $y * 100 - $q * 10 - 5;\n}","language":"php"}
{"task_id":"MBPHP\/290","completion":"    $maxLen = 0;\n    $result = array();\n    $len = count($list1);\n\n    if ($len == 0) {\n        return $result;\n    }\n\n    for ($i = 0; $i < $len; $i++) {\n        $sublist = $list1[$i];\n        if ($sublist.length > $maxLen) {\n            $maxLen = $sublist.length;\n            $result = $sublist;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/291","completion":"    $ways = 1;\n    if ($n == 1) {\n        return 1;\n    }\n\n    while ($ways <= $n) {\n        $ways = ($ways * ($k - 1)) + 1;\n    }\n\n    return $ways;\n}","language":"php"}
{"task_id":"MBPHP\/292","completion":"    return $n \/ $m;\n}","language":"php"}
{"task_id":"MBPHP\/293","completion":"  \/\/ write your code here\n  $a = $w * $h;\n  $b = $w * $h \/ 2;\n  $c = $b * $h \/ 2;\n\n  $perimeter = $a + $b + $c;\n  $s = ($perimeter \/ 2) \/ ($h \/ 2);\n\n  return $s;\n}","language":"php"}
{"task_id":"MBPHP\/294","completion":"    $max = 0;\n    foreach ($listval as $val) {\n        if ($val > $max) {\n            $max = $val;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/295","completion":"    $sum = 0;\n    if (is_divisible($number, 1)) {\n        return $sum;\n    }\n    $sum = $sum + $number;\n    for ( $i = 2; $i <= $number; $i++) {\n        if (is_divisible($number, $i)) {\n            $sum = $sum + $i;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/296","completion":"    $inv = 0;\n\n    for ($i = 0; $i < $n-1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inv++;\n            }\n        }\n    }\n\n    return $inv;\n}","language":"php"}
{"task_id":"MBPHP\/297","completion":"  $list = [];\n\n  foreach ($list1 as $item) {\n    if (is_array($item) && is_array($item)) {\n      $list.push(flattenList($item));\n    } else {\n      $list.push($item);\n    }\n  }\n\n  return $list;\n}","language":"php"}
{"task_id":"MBPHP\/298","completion":"    $result = [];\n    foreach ($l2 as $list) {\n        foreach ($l1 as $val) {\n            if (array_intersect($list, $val)) {\n                $result[] = $val;\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/299","completion":"    $max = 0;\n    foreach ($stdata as $x) {\n        if ($x[1] > $max) {\n            $max = $x[1];\n        }\n    }\n    $result = '';\n    for ($i = 0; $i < count($stdata); $i++) {\n        if ($stdata[$i][1] == $max) {\n            $result = $stdata[$i][0];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/300","completion":"    return 0;\n}","language":"php"}
{"task_id":"MBPHP\/301","completion":"    return (isset($d) && count($d)) ? count($d) : 0;\n}","language":"php"}
{"task_id":"MBPHP\/302","completion":"    $res = 0;\n    while ($n) {\n        $res += $n & 1;\n        $n >>= 1;\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/303","completion":"    $arr = array_slice($a, 0, $n);\n\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $arr[$i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/304","completion":"  \/\/ write your code here\n}","language":"php"}
{"task_id":"MBPHP\/305","completion":"    return $words[0] - $words[1];\n}","language":"php"}
{"task_id":"MBPHP\/306","completion":"  $prefix_sum = 0;\n  $sum = 0;\n  $max = 0;\n\n  for ($i = $index; $i >= 0; $i--) {\n    if ($i == $k) {\n      $sum += $a[$k];\n    } else {\n      $prefix_sum += $a[$i];\n    }\n  }\n\n  for ($i = $index; $i < $n; $i++) {\n    if ($i == $k) {\n      $sum += $a[$k];\n    } else {\n      $prefix_sum += $a[$i];\n    }\n\n    $sum += $prefix_sum;\n    if ($sum > $max) {\n      $max = $sum;\n    }\n  }\n\n  return $max;\n}","language":"php"}
{"task_id":"MBPHP\/307","completion":"    $output = array();\n    $output[$m] = array();\n    foreach ($tuplex as $val) {\n        if ($m == $val.length) {\n            $output[$m][] = $val[$n];\n        } else {\n            $output[$m][$val[$n]] = $val[$n];\n        }\n    }\n    return $output;\n}","language":"php"}
{"task_id":"MBPHP\/308","completion":"    $nums1 = array_chunk($nums1, $n);\n    $nums2 = array_chunk($nums2, $n);\n\n    foreach ($nums1 as $p1) {\n        foreach ($nums2 as $p2) {\n            return array_merge($p1, $p2);\n        }\n    }\n}","language":"php"}
{"task_id":"MBPHP\/309","completion":"    return (int) $a < (int) $b ? $a : $b;\n}","language":"php"}
{"task_id":"MBPHP\/310","completion":"    $output = array();\n\n    \/\/ your code goes here\n\n    return $output;\n}","language":"php"}
{"task_id":"MBPHP\/311","completion":"    $n = (1 << $n);\n    return $n - ($n - 1);\n}","language":"php"}
{"task_id":"MBPHP\/312","completion":"    return $r * $h * 3.14159265358979;\n}","language":"php"}
{"task_id":"MBPHP\/313","completion":"    $list2 = [];\n    foreach($list1 as $a){\n        if($a>0){\n            $list2[] = $a;\n        }\n    }\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/314","completion":"    \/\/ your code here\n    var sums = [];\n    for (var row = 0; row < $n; row++) {\n        var curSum = 0;\n        for (var col = 0; col < $n; col++) {\n            curSum += $grid[row][col];\n        }\n        sums[row] = curSum;\n    }\n    return maxSubarraySum(sums);\n}","language":"php"}
{"task_id":"MBPHP\/315","completion":"    $max = -1;\n    foreach (explode(\" \", $str) as $word) {\n        if ($word == \"\")\n            continue;\n        if ($word % 2 == 0 && strlen($word) > $max) {\n            $max = strlen($word);\n        }\n    }\n    if ($max == -1) {\n        return \"-1\";\n    } else {\n        return substr($str, 0, $max);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/316","completion":"    $index = -1;\n\n    foreach ($a as $aValue) {\n        if ($aValue == $x) {\n            $index++;\n        }\n    }\n\n    return $index;\n}","language":"php"}
{"task_id":"MBPHP\/317","completion":"    \/\/ You can modify the algorithm here.\n    return $alist;\n}","language":"php"}
{"task_id":"MBPHP\/318","completion":"  if (is_numeric($s) && $s % 1 == 0 && $s > 0) {\n    return $s * $s * $s * $s;\n  } else {\n    return false;\n  }\n}","language":"php"}
{"task_id":"MBPHP\/319","completion":"    return preg_split('\/(^\\w+\\s{0,2}){5}\/', $text);\n}","language":"php"}
{"task_id":"MBPHP\/320","completion":"    $a = 1;\n    $b = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $a *= $i;\n    }\n    for ($i = 1; $i <= $n; $i++) {\n        $b += $i * $i;\n    }\n    return $b - $a * $a;\n}","language":"php"}
{"task_id":"MBPHP\/321","completion":"    \/\/ Your code\n}","language":"php"}
{"task_id":"MBPHP\/322","completion":"    $min = min($list1);\n\n    return array_search($min, $list1);\n}","language":"php"}
{"task_id":"MBPHP\/323","completion":"    $arr = array_slice($arr, 0, $n);\n    for ($i = 0; $i < $n - 1; $i += 2) {\n        $arr[$i] = $arr[$i] * -1;\n    }\n    return $arr;\n}","language":"php"}
{"task_id":"MBPHP\/324","completion":"    $sum = 0;\n    $testTuple = $testTuple + 1; \/\/ if the tuple is one or two elements long, the next one will be taken from the next position\n    $tempTuple = [];\n    for ($i = 0; $i < $testTuple; $i++) {\n        if (is_set($tempTuple[$i]))\n            $sum = $sum + $tempTuple[$i];\n        else {\n            $tempTuple[$i] = $testTuple[$i];\n            $sum = $sum + $testTuple[$i];\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/325","completion":"    $minSquares = $n;\n    for ($i = $n - 1; $i >= 0; $i--) {\n        $currSquare = $i * $i;\n        $currSum = 0;\n        $minSum = $n;\n        $j = $i;\n        for (; $j <= $n; $j++) {\n            $currSum += $j;\n            if ($currSum >= $n) break;\n            $currSquare = $currSquare - $j * $j;\n            if ($currSquare < $minSum) {\n                $minSum = $currSquare;\n                $minSquares = $minSquares + $j - $i + 1;\n            }\n        }\n    }\n    return $minSquares;\n}","language":"php"}
{"task_id":"MBPHP\/326","completion":"  $counter = 0;\n  $max = 0;\n  foreach($testList as $test) {\n    $test = explode(\" \", $test);\n    $occurences = strlen($test[0]) + strlen($test[1]);\n    if($max < $occurences) {\n      $max = $occurences;\n    }\n    if($counter < $occurences) {\n      $counter = $occurences;\n    }\n  }\n  if($counter == 0) {\n    return '';\n  }\n  $mostOccurrences = $testList[0];\n  foreach($testList as $test) {\n    $test = explode(\" \", $test);\n    $occurences = strlen($test[0]) + strlen($test[1]);\n    if($occurences == $counter) {\n      $","language":"php"}
{"task_id":"MBPHP\/327","completion":"    return (($x + $y > $z) && ($x + $z > $y) && ($y + $z > $x));\n}","language":"php"}
{"task_id":"MBPHP\/328","completion":"    $first = $list1[$m];\n\n    $list1.splice($m, 1);\n\n    if ($n < $m) {\n        $n = $m;\n    }\n\n    for ($i = 0; $i < $n - 1; $i++) {\n        $list1[$i] = $list1[$i + 1];\n    }\n\n    $list1[$n - 1] = $first;\n}","language":"php"}
{"task_id":"MBPHP\/329","completion":"    $result = count($list);\n\n    if (is_numeric($list) && $list < 0) {\n        $result++;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/330","completion":"    $words = preg_split('\/(^|\\s){3,5}(?=\\s|$)\/', $text);\n    return $words;\n}","language":"php"}
{"task_id":"MBPHP\/331","completion":"    $result = 0;\n    $mask = (1 << $n) - 1;\n    $i = 1;\n    while ($i <= 32) {\n        if ($mask & $i) {\n            if ((2 << $i - 1) & $n) {\n                $result++;\n            }\n        } else {\n            if ((2 << $i - 1) & $n) {\n                $result--;\n            }\n        }\n        $i <<= 1;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/332","completion":"    $freq = array();\n    $characters = array_unique($str1);\n    foreach($characters as $char) {\n        if(!isset($freq[$char]))\n            $freq[$char] = 0;\n        $freq[$char]++;\n    }\n    return $freq;\n}","language":"php"}
{"task_id":"MBPHP\/333","completion":"  $sortedLi = [];\n\n  foreach($subLi as $sub) {\n    if(is_array($sub)) {\n      $sortedLi[$sub[1]] = $sub;\n    } else {\n      $sortedLi[] = $sub;\n    }\n  }\n\n  $sortedLi = array_values($sortedLi);\n\n  return $sortedLi;\n}","language":"php"}
{"task_id":"MBPHP\/334","completion":"    if ((($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a)) || ($a === $b && $b === $c) || ($a === $c && $a === $b)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/335","completion":"    return $n == 1 ? $a : $a + apSum($a + $d, $n - 1, $d);\n}","language":"php"}
{"task_id":"MBPHP\/336","completion":"    $days = date(\"t\");\n    if ($monthname1 == \"January\" && $days == 28)\n        return true;\n    if ($monthname1 == \"February\" && $days == 28)\n        return true;\n    if ($monthname1 == \"March\" && $days == 28)\n        return true;\n    if ($monthname1 == \"April\" && $days == 28)\n        return true;\n    if ($monthname1 == \"May\" && $days == 28)\n        return true;\n    if ($monthname1 == \"June\" && $days == 28)\n        return true;\n    if ($monthname1 == \"July\" && $days == 28)\n        return true;\n    if ($monthname1 == \"August\" && $days == 28)\n        return true;\n    if ($monthname1 == \"September\"","language":"php"}
{"task_id":"MBPHP\/337","completion":"    return 'Not matched!';\n}","language":"php"}
{"task_id":"MBPHP\/338","completion":"    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        for ($j = 0; $j < strlen($s) - 1; $j++) {\n            if ($s[$i] == $s[$j]) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/339","completion":"  if ($y == 1) {\n    return $x;\n  } else {\n    return findDivisor($x, $y - 1);\n  }\n}","language":"php"}
{"task_id":"MBPHP\/340","completion":"    $min1 = min($lst);\n    $min2 = min($lst, function($e) { return abs($e - $min1); });\n    $min3 = min($lst, function($e) { return abs($e - $min2); });\n    return $min1 + $min2 + $min3;\n}","language":"php"}
{"task_id":"MBPHP\/341","completion":"    $ret = array();\n    $array = array_values($s);\n    for($i = 0; $i < count($array); $i++) {\n        $ret[$i] = $array[$i];\n    }\n    return $ret;\n}","language":"php"}
{"task_id":"MBPHP\/342","completion":"    if (empty($list)) {\n        return false;\n    }\n    $min = min($list);\n    $max = max($list);\n    return [$min, $max];\n}","language":"php"}
{"task_id":"MBPHP\/343","completion":"    $res = 0;\n    $c = 0;\n    foreach ($s as $s1) {\n        if (strlen($s1) == $c) {\n            $c = 0;\n            $res++;\n        }\n        $c++;\n    }\n    return [$res, $c];\n}","language":"php"}
{"task_id":"MBPHP\/344","completion":"  $res = 0;\n  for ($i = $n; $i <= $m; $i++) {\n    $square = $i * $i;\n    if ($square % 2 == 1) {\n      $res++;\n    }\n  }\n  return $res;\n}","language":"php"}
{"task_id":"MBPHP\/345","completion":"    $diffs = [];\n    for ($i = 0; $i < count($nums) - 1; $i++) {\n        $diffs[] = $nums[$i + 1] - $nums[$i];\n    }\n    return $diffs;\n}","language":"php"}
{"task_id":"MBPHP\/346","completion":"    $zigzag = [];\n    $zigzag[$k] = $n;\n    for($i=0;$i<=$k;$i++) {\n        if($i==0) {\n            $zigzag[$i] = $n;\n        } else if($i%2 == 0) {\n            $zigzag[$i] = $zigzag[$i-1] + $zigzag[$i];\n        } else {\n            $zigzag[$i] = $zigzag[$i-1] - $zigzag[$i];\n        }\n    }\n    return $zigzag[$k];\n}","language":"php"}
{"task_id":"MBPHP\/347","completion":"    $sum = 0;\n    $i = 0;\n    $j = 0;\n    for ($i = 0; $i &lt; $m; $i++) {\n        for ($j = 0; $j &lt; $n; $j++) {\n            if ($i + $j)\n                $sum++;\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/348","completion":"    $m = 4;\n    $start = 0;\n    $ways = 0;\n    for ($start = 0; $start < $m; $start++) {\n        $ways = ($ways + $m) % $m;\n    }\n    return $ways;\n}","language":"php"}
{"task_id":"MBPHP\/349","completion":"  $binary = bin2hex(strip_tags($string));\n  return $binary != \"\" && strlen($binary) % 4 == 0 ? \"Yes\" : \"No\";\n}","language":"php"}
{"task_id":"MBPHP\/350","completion":"    if ($s == null || $s == \"\") {\n        return 0;\n    }\n    $str = \"\";\n    for ($i=0; $i<strlen($s); $i++) {\n        if ($s[$i] == $s[$i+1]) {\n            $str += $s[$i];\n            $i++;\n        } else {\n            $str += $s[$i];\n        }\n    }\n    return strlen($str);\n}","language":"php"}
{"task_id":"MBPHP\/351","completion":"    $cnt = $k;\n    if ($k > $arr.length) {\n        $cnt = $arr.length;\n    }\n    $arr = array_chunk($arr, $cnt);\n    $max = max($arr);\n    $ind = $arr.index($max);\n    return $ind + 1;\n}","language":"php"}
{"task_id":"MBPHP\/352","completion":"    return !empty($str) && array_unique($str);\n}","language":"php"}
{"task_id":"MBPHP\/353","completion":"    $result = $list1;\n    foreach ($result as $list2) {\n        $list2.splice($n, 1);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/354","completion":"    $a = intval($a);\n    $n = intval($n);\n    $d = intval($d);\n    return (($a-1)*$n)+$d;\n}","language":"php"}
{"task_id":"MBPHP\/355","completion":"    if ($radius < 0) {\n        return 0;\n    }\n\n    if ($radius == 0) {\n        return 1;\n    }\n\n    return (countRectangles($radius - 1) + countRectangles($radius - 1)) * 4;\n}","language":"php"}
{"task_id":"MBPHP\/356","completion":"    $alpha = atan2($b - $a, $a + $b);\n    return $alpha + 180;\n}","language":"php"}
{"task_id":"MBPHP\/357","completion":"    $maxElement = 0;\n\n    foreach($testList as $element) {\n        if ($element[0] > $maxElement) {\n            $maxElement = $element[0];\n        }\n        if ($element[1] > $maxElement) {\n            $maxElement = $element[1];\n        }\n    }\n    return $maxElement;\n}","language":"php"}
{"task_id":"MBPHP\/358","completion":"  return $nums1.map((n1, i) => $nums2[i] % n1);\n}","language":"php"}
{"task_id":"MBPHP\/359","completion":"    $d = $b * $b - 4 * $a * $c;\n    if ($d > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/360","completion":"    $n = +$n;\n    if (is_numeric($n)) {\n        $carol = $n + (2 * $n - 1) \/ 2;\n    } else {\n        $carol = null;\n    }\n    return $carol;\n}","language":"php"}
{"task_id":"MBPHP\/361","completion":"    if (count($list1)) {\n        $list2 = array();\n        foreach ($list1 as $item) {\n            $list3 = $item;\n            if (count($list3)) {\n                $list2[] = $list3;\n            }\n        }\n        if (count($list2)) {\n            return $list2;\n        }\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/362","completion":"    $max = $nums[0];\n    $maxOccurrence = 0;\n\n    for ($i = 0; $i < count($nums); $i++) {\n        if ($nums[$i] == $max) {\n            ++$maxOccurrence;\n        } else if ($nums[$i] > $max) {\n            $max = $nums[$i];\n            $maxOccurrence = 1;\n        }\n    }\n\n    return $maxOccurrence;\n}","language":"php"}
{"task_id":"MBPHP\/363","completion":"    $res = [];\n    $i = 0;\n    while ($i < size($testList) - 1) {\n        $res[$i] = addArray($testList[$i], $testList[$i + 1], $k);\n        $i++;\n    }\n    $res[$i] = addArray($testList[$i], $testList[$i], $k);\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/364","completion":"    $length = strlen($str);\n    $count = 0;\n    for ($i=0; $i<$length; $i++) {\n        if ($str[$i] == $str[$length-$i-1]) {\n            $count++;\n        } else {\n            break;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/365","completion":"    $res = 0;\n    $l = strlen($n);\n    for ($i = 0; $i < $l; $i++) {\n        $res += $n[$i] - '0';\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/366","completion":"    $max = 0;\n    $min = 0;\n\n    $min = min($listNums);\n    $max = max($listNums);\n\n    for($i = $min; $i <= $max; $i++) {\n        if($i == 0 || $i == $listNums.length - 1 || $listNums[$i] == 0) {\n            $max = $i;\n        }\n\n        else if($listNums[$i - 1] * $listNums[$i + 1] > $max * $max) {\n            $max = $listNums[$i - 1] * $listNums[$i + 1];\n        }\n    }\n\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/368","completion":"    $testTup = array_merge(array_map(\"function\".$testTup), array_fill(0, $n, null));\n    return $testTup;\n}","language":"php"}
{"task_id":"MBPHP\/369","completion":"    $surface = $l * $w * $h;\n    $thickness = (2 * $l + 2 * $w + 2 * $h) + 3;\n    $return = $surface + $thickness * 2;\n    return $return;\n}","language":"php"}
{"task_id":"MBPHP\/370","completion":"    $price = $price[0];\n\n    $newArray = array_map('floatval', $price);\n    sort($newArray, function($a, $b) {\n        return $a - $b;\n    });\n\n    return $newArray;\n}","language":"php"}
{"task_id":"MBPHP\/371","completion":"    $i = $leftElement;\n    $j = $rightElement;\n    if ($i > $j) {\n        return $i;\n    }\n    while ($i <= $j) {\n        if ($a[$i] == $a[$j]) {\n            $i++;\n            $j--;\n        } else {\n            return $i;\n        }\n    }\n    return $i;\n}","language":"php"}
{"task_id":"MBPHP\/372","completion":"    $res = [];\n    $heap = $nums;\n    $heapSize = count($nums);\n\n    if ($heapSize > 1) {\n        \/\/ Get the first item in the heap (root).\n        $root = $heap[0];\n\n        \/\/ Build a heap using the first item in the array.\n        for ($i = 1; $i < $heapSize; $i++) {\n            \/\/ Get the left child index.\n            $leftChildIndex = $i * 2 - 1;\n            \/\/ Get the right child index.\n            $rightChildIndex = $i * 2;\n            \/\/ Get the current value of the node.\n            $current = $heap[$i];\n\n            \/\/ Compare the current node's value with its children.\n            \/\/ If the current value is smaller than the left child, swap with it.\n            if ($current < $heap[$leftChildIndex]) {\n                $res[$","language":"php"}
{"task_id":"MBPHP\/373","completion":"    return $l * $w * $h * 8;\n}","language":"php"}
{"task_id":"MBPHP\/374","completion":"    $perms = [];\n    $strLen = strlen($str);\n\n    if ($strLen == 0) {\n        $perms[] = $str;\n    } else {\n        $perms[0] = $str[0];\n        for ( $i = 0; $i < $strLen - 1; $i++ ) {\n            $perm = str_repeat( $perms[i], $strLen - $i - 1 );\n            $perms[$i + 1] = $perm . $str[$i + 1];\n        }\n    }\n    return $perms;\n}","language":"php"}
{"task_id":"MBPHP\/375","completion":"    $a = $n \/ $m;\n    $b = ceil($a);\n    return $m * $b;\n}","language":"php"}
{"task_id":"MBPHP\/376","completion":"  $result = array();\n  $unique = array_unique($testTup);\n  foreach ($unique as $value) {\n    $pos = in_array($value, $testTup);\n    if ($pos != false && $testTup[$pos] == $value) {\n      $result[$pos] = \"MSP\";\n    } else {\n      $result[$pos] = $value;\n    }\n  }\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/377","completion":"    $i = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == $c) {\n            continue;\n        }\n        echo $s[$i];\n    }\n    return;\n}","language":"php"}
{"task_id":"MBPHP\/378","completion":"    $a = $testList;\n    return [$a[0], $a[2], $a[1], $a[3]];\n}","language":"php"}
{"task_id":"MBPHP\/379","completion":"    return $l*$w*$h;\n}","language":"php"}
{"task_id":"MBPHP\/380","completion":"    $rowarr = array_fill(0, $colnum, $rownum);\n    return $rowarr;\n}","language":"php"}
{"task_id":"MBPHP\/381","completion":"    $sortedData = array();\n\n    $sortedData = array_merge($sortedData, sort(explode($listData, 3), $indexNo));\n    return explode($sortedData, 3);\n}","language":"php"}
{"task_id":"MBPHP\/382","completion":"    $start = $end = $len = 0;\n    while (true) {\n        $start = ($end + $len) % $a.length;\n        $end = ($start + 1) % $a.length;\n        $len = $a[$start] < $a[$end] ? $a[$start] - $a[$end] : $a[$end] - $a[$start];\n        if ($len > 1) {\n            return 0;\n        }\n        if ($len == 1 && $start != $end) {\n            return 0;\n        }\n    }\n}","language":"php"}
{"task_id":"MBPHP\/383","completion":"    $bitPattern = bin($n);\n    $newBitPattern = '';\n    for ($i = 0; $i < strlen($bitPattern); $i += 2) {\n        $newBitPattern .= $bitPattern[substr($bitPattern, $i, 2)];\n    }\n    $newBitPattern = substr($newBitPattern, 0, strlen($bitPattern) \/ 2);\n    return intval($newBitPattern, 2);\n}","language":"php"}
{"task_id":"MBPHP\/384","completion":"    $min = array_min($arr);\n    return array_search($min, $arr) + 1;\n}","language":"php"}
{"task_id":"MBPHP\/385","completion":"    if ($n < 0) {\n        $n = 0;\n    }\n    if ($n == 0) {\n        return $n;\n    } else if ($n == 1) {\n        return 1;\n    } else {\n        return $n + getPerrin($n - 2);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/386","completion":"    $stack = array();\n    $open = array(\"[\",\"{\",\"(\");\n    $close = array(\"]\",\"}\",\")\");\n    $output = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($open[($s[$i])] !== false) {\n            $stack[] = $s[$i];\n        } else if ($close[($s[$i])] !== false) {\n            if ($stack[$stack.length - 1] === $open[$s[$i]]) {\n                $stack.pop();\n            } else {\n                $output++;\n                $stack[$stack.length - 1] = $s[$i];\n            }\n        }\n    }\n    return $output;\n}","language":"php"}
{"task_id":"MBPHP\/387","completion":"    $n = str_replace('[^A-Fa-f0-9]', '', $n);\n\n    if ($n % 2 == 0)\n        return \"Even\";\n    else\n        return \"Odd\";\n}","language":"php"}
{"task_id":"MBPHP\/388","completion":"    $lowestPowerOf2 = pow(2, 1);\n    $highestPowerOf2 = pow(2, 31);\n\n    while ($n > $highestPowerOf2) {\n        $lowestPowerOf2 = $highestPowerOf2;\n        $highestPowerOf2 = pow(2, $n % 31);\n        $n = $n \/ 31;\n    }\n    return $lowestPowerOf2;\n}","language":"php"}
{"task_id":"MBPHP\/389","completion":"    return 2 * $n + 1\n}","language":"php"}
{"task_id":"MBPHP\/390","completion":"    $len = count($list);\n    for($i = 0; $i < $len; $i++) {\n        $list[$i] = str_replace(\"{0}\", $string, $list[$i]);\n    }\n    return $list;\n}","language":"php"}
{"task_id":"MBPHP\/391","completion":"    $r = array();\n    foreach($l1 as $e1) {\n        array_push($r, $e1);\n        $tmp = array();\n        foreach($l2 as $e2) {\n            array_push($tmp, $e2);\n            $tmp2 = array();\n            foreach($l3 as $e3) {\n                array_push($tmp2, $e3);\n                array_push($r, $e1.$e2.$e3);\n            }\n        }\n    }\n    return $r;\n}","language":"php"}
{"task_id":"MBPHP\/392","completion":"    $i = 1;\n    $k = 5;\n    $max = 0;\n    while ($i < $n) {\n        $max = max( ( $max + $k ) , $i);\n        $i = $i + $k ;\n        $k = $k \/ 2;\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/393","completion":"    return $inputList = array_merge(array_filter(\n        array_map(function($row) {\n            return strlen($row);\n        },\n        $inputList)\n    ));\n}","language":"php"}
{"task_id":"MBPHP\/394","completion":"    $set = array_unique($testTup);\n    return count($set) == count($testTup);\n}","language":"php"}
{"task_id":"MBPHP\/395","completion":"    $str1 = str_replace('a', 'A', $str1);\n\n    $str1 = str_replace('A', 'a', $str1);\n\n    $str1 = str_replace(' ', '', $str1);\n\n    $str1 = str_replace(' ', '', $str1);\n\n    $str1 = str_replace('', '', $str1);\n\n    $str1 = str_replace('', '', $str1);\n\n    $str1 = str_replace('', '', $str1);\n\n    $str1 = str_replace('', '', $str1);\n\n    $str1 = str_replace('', '', $str1);\n\n    $str1 = str_replace('', '', $str1);\n\n    $str1 = str_replace('', '', $str1);\n\n    $str1 = str_replace('', '', $str1);\n\n    $str1 = str_replace('', '', $str","language":"php"}
{"task_id":"MBPHP\/396","completion":"    if (preg_match(\"\/^.$\/\", $string)) {\n        return \"Valid\";\n    } else {\n        return \"Invalid\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/397","completion":"  $sorted = [$a, $b, $c];\n  $sorted = $sorted\n    .sort(function ($a, $b) {\n      return $a - $b;\n    });\n  return $sorted[$sorted.length \/ 2];\n}","language":"php"}
{"task_id":"MBPHP\/398","completion":"    $sum = 0;\n    foreach ($nums as $num) {\n        if (is_numeric($num)) {\n            $sum = $sum + abs($num);\n        } else {\n            $sum = $sum + sumOfDigits(abs($num));\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/399","completion":"    $resultTup = array();\n\n    foreach($testTup1 as $val1) {\n        foreach($testTup2 as $val2) {\n            $resultTup[$val1 ^ $val2] = 1;\n        }\n    }\n\n    return $resultTup;\n}","language":"php"}
{"task_id":"MBPHP\/400","completion":"    $count = 0;\n    foreach($testList as $testTuple) {\n        $count = count($testList, $testTuple);\n        \/\/echo \"count = \" . $count . \"\\n\";\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/401","completion":"  $resultTup = array();\n\n  foreach($testTup1 as $tup1) {\n    foreach($tup1 as $idx1) {\n      $resultTup[$idx1] = (array)$resultTup[$idx1] || array();\n      foreach($testTup2 as $tup2) {\n        foreach($tup2 as $idx2) {\n          $resultTup[$idx1][$idx2] = $resultTup[$idx1][$idx2] ? (int)$resultTup[$idx1][$idx2] + (int)$tup2[$idx2] : $tup2[$idx2];\n        }\n      }\n    }\n  }\n\n  return $resultTup;\n}","language":"php"}
{"task_id":"MBPHP\/402","completion":"    \/\/ (n-1)!r % p\n    return (($n-1) % $p) * pow(factorial($r) , ($p-1) * floor($n\/$r));\n}","language":"php"}
{"task_id":"MBPHP\/403","completion":"  return preg_match(\"\/^(ht|f)tp(s?)\\:\\\/\\\/[0-9a-z]([-.\\w]*[0-9a-z])*(:(0-9)*)*(\\\/?)([a-z0-9\\-\\.\\?\\,\\'\\\/\\\\\\+&amp;%\\$#_]*)?$\/i\", $str);\n}","language":"php"}
{"task_id":"MBPHP\/404","completion":"    return $a < $b ? $a : $b;\n}","language":"php"}
{"task_id":"MBPHP\/405","completion":"    $array = (array)$tuplex;\n    foreach($array as $key => $value) {\n        if ($value == $tuple1) {\n            return true;\n        }\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/406","completion":"    $even = 0;\n    $odd = 0;\n\n    if ($x == 0) {\n        return \"Zero\";\n    }\n    if ($x < 0) {\n        $x = $x * -1;\n    }\n    for ($i = 1; $i <= $x; $i++) {\n        if ($i % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\n    if ($even % 2 == 0) {\n        return \"Even Parity\";\n    } else {\n        return \"Odd Parity\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/407","completion":"  $num = $n;\n  $num = str_pad($num, 5, \"0\", STR_PAD_LEFT);\n  $num = explode(\"\", $num);\n  $num = str_split($num, \"\");\n  $newNum = array();\n  $count = 0;\n\n  while ($count < count($num)) {\n    if ($count % 2 == 0) {\n      $newNum[$count] = $num[$count];\n    } else {\n      $newNum[$count] = $num[$count + 1];\n    }\n    $count++;\n  }\n  $newNum = implode(\"\", $newNum);\n  return $newNum;\n}","language":"php"}
{"task_id":"MBPHP\/408","completion":"    $nums1 = array_slice($nums1, 0, $k);\n    $nums2 = array_slice($nums2, 0, $k);\n\n    if (is_numeric($nums1) && is_numeric($nums2)) {\n        $nums1 = array_map(function($num) {\n            return $num + 0;\n        }, $nums1);\n\n        $nums2 = array_map(function($num) {\n            return $num + 0;\n        }, $nums2);\n\n        $nums1 = array_unique($nums1);\n        $nums2 = array_unique($nums2);\n\n        $nums1 = array_values(array_merge($nums1, $nums2));\n\n        $pairs = [];\n        foreach($nums1 as $num1) {\n            foreach($nums2 as $num2) {\n                if ($num1 + 0 === $num2 + 0) ","language":"php"}
{"task_id":"MBPHP\/409","completion":"    $list = array_merge($list1);\n    $min = $list[0][0] * $list[0][1];\n    foreach($list as $l){\n        if($l[0]*$l[1] < $min){\n            $min = $l[0]*$l[1];\n        }\n    }\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/410","completion":"    $min = $listval[0];\n    $min_index = 0;\n    $temp;\n    $i = 0;\n    foreach($listval as $val) {\n        if($val < $min) {\n            $min = $val;\n            $min_index = $i;\n        }\n        $i = $i + 1;\n    }\n    return $min_index;\n}","language":"php"}
{"task_id":"MBPHP\/411","completion":"    return preg_replace(\"\/(_\\w)\/\", function ($0, $1) {\n        return $1.toUpperCase();\n    }, $word);\n}","language":"php"}
{"task_id":"MBPHP\/412","completion":"    $l = array_filter($l, function ($v) { return $v % 2 !== 0; });\n    return $l;\n}","language":"php"}
{"task_id":"MBPHP\/413","completion":"    $result = array();\n    $counter = 0;\n    foreach ($list1 as $tuple) {\n        if ($counter == $n) {\n            break;\n        } else {\n            $result[] = $tuple[0];\n            $counter++;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/414","completion":"    return !empty($list1) && !empty($list2) && count($list1) >= count($list2) && (array_diff($list1, $list2) == []);\n}","language":"php"}
{"task_id":"MBPHP\/415","completion":"  return array();\n}","language":"php"}
{"task_id":"MBPHP\/416","completion":"    if ($n < 3) {\n        return $n;\n    } else {\n        return $n + breaksum($n - 1);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/417","completion":"    return $input;\n}","language":"php"}
{"task_id":"MBPHP\/418","completion":"    $max = 0;\n    $sublist = null;\n\n    foreach ($lst as $item) {\n        if (sizeof($item) > $max) {\n            $max = sizeof($item);\n            $sublist = $item;\n        }\n    }\n\n    return $sublist;\n}","language":"php"}
{"task_id":"MBPHP\/419","completion":"    $list = array_merge(array_keys($list1), array_values($list1));\n    $sum = 0;\n    for($i = 0; $i < count($list); $i++) {\n        $sum += round($list[$i]);\n    }\n    $sum *= count($list);\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/420","completion":"    return $n * $n * $n * ($n - 1);\n}","language":"php"}
{"task_id":"MBPHP\/421","completion":"    $concatenatedString = \"\";\n    foreach ($testTup as $testItem) {\n        $concatenatedString = $concatenatedString . $testItem . \"-\";\n    }\n    $concatenatedString = substr($concatenatedString, 0, -1);\n    return $concatenatedString;\n}","language":"php"}
{"task_id":"MBPHP\/422","completion":"    $res = 0;\n    for($i=0; $i<$n; $i++) {\n        $res += $i * $i * $i;\n    }\n    return round($res \/ $n);\n}","language":"php"}
{"task_id":"MBPHP\/423","completion":"    \/\/ write code here\n    $m_temp = $m;\n    $n_temp = $n;\n    while ($m_temp > 0 && $n_temp > 0) {\n        if ($m_temp == $n_temp) {\n            $max = $m_temp * $gold[$m_temp - 1][$n_temp - 1];\n        } else if ($m_temp > $n_temp) {\n            $max = $m_temp * $gold[$m_temp - 1][$n_temp];\n        } else {\n            $max = $n_temp * $gold[$m][$n_temp - 1];\n        }\n        $m_temp = $m_temp - 1;\n        $n_temp = $n_temp - 1;\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/424","completion":"    $result = array();\n    $size = count($testTuple);\n    for ($i = $size - 1; $i > 0; $i--) {\n        $result[$i] = $testTuple[$i];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/425","completion":"  $count = 0;\n  foreach ($list1 as $k => $v) {\n    if (in_array($x, $v)) {\n      $count += 1;\n    }\n  }\n  return $count;\n}","language":"php"}
{"task_id":"MBPHP\/426","completion":"    return $nums.filter(num => num % 2 === 1);\n}","language":"php"}
{"task_id":"MBPHP\/427","completion":"    $date = preg_replace(\"\/(20\\d\\d)-(\\d\\d)-(\\d\\d)\/, \"\\$2-\\$1-\\$3\", $dt);\n    return $date;\n}","language":"php"}
{"task_id":"MBPHP\/428","completion":"    \/\/ write your code here\n}","language":"php"}
{"task_id":"MBPHP\/429","completion":"    $out = array();\n    if (sizeof($testTup1) === sizeof($testTup2) && sizeof($testTup1) > 0) {\n        for ($i = 0; $i < sizeof($testTup1); $i++) {\n            $out[$i] = $testTup1[$i] & $testTup2[$i];\n        }\n    }\n    return $out;\n}","language":"php"}
{"task_id":"MBPHP\/430","completion":"    return abs(round($a * $b * $c \/ $b \/ $c, 2));\n}","language":"php"}
{"task_id":"MBPHP\/431","completion":"  $set1 = array_unique($list1);\n  $set2 = array_unique($list2);\n\n  $common = array_intersect($set1, $set2);\n  return $common !== false;\n}","language":"php"}
{"task_id":"MBPHP\/432","completion":"    $base = array($base1, $base2);\n    $height = array($height);\n    $mid = array();\n    foreach($base as $k => $v) {\n        if($k % 2 == 0) {\n            $mid[] = $v;\n        } else {\n            $mid[] = $v + $mid[$k-1];\n        }\n    }\n    foreach($height as $k => $v) {\n        if($k % 2 == 0) {\n            $mid[$k\/2] = $v;\n        } else {\n            $mid[$k\/2] = $mid[$k\/2] + $v;\n        }\n    }\n    $mid = sort($mid);\n    $mid = (int)$mid[1] \/ 2;\n    return $mid;\n}","language":"php"}
{"task_id":"MBPHP\/433","completion":"    if ($number < 1 || $number > $arr[count($arr)-1]) {\n        return \"Please enter a number between 1 and \".count($arr). \" (inclusive)\";\n    } else {\n        $counter = 0;\n        for ($i = 1; $i <= count($arr); $i++) {\n            if ($number <= $arr[$i]) {\n                $counter++;\n            }\n        }\n        return \"Yes, the entered number is greater than those in the array\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/434","completion":"    $regexp = \/[a]\\w+\/;\n    if (preg_match($regexp, $text)) {\n        echo \"Found a match!\";\n    } else {\n        echo \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/435","completion":"    \/\/ write your code here, use $n\n    return 0;\n}","language":"php"}
{"task_id":"MBPHP\/436","completion":"    $new = \"\";\n    foreach ($list1 as $i = $item) {\n        if ($item < 0) {\n            $new .= $item . \",\";\n        }\n    }\n\n    $new = substr($new, 0, strlen($new) - 1);\n    return $new;\n}","language":"php"}
{"task_id":"MBPHP\/437","completion":"    $str = str_replace(array(\"\\\"\", \"'\", \"\\n\", \"\\r\"), \"\", $str1);\n    $arr = explode('', $str);\n    $res = '';\n    foreach ($arr as $val) {\n        if (($val == $arr[$arr.length - 1] || $val == $arr[$arr.length - 2]) && $val != $res) {\n            $res .= $val;\n        } else {\n            $res .= $val;\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/438","completion":"    $count = 0;\n    for ($i = 0; $i < count($testList) - 1; $i++) {\n        if (isBidirectional($testList[$i], $testList[$i + 1])) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/439","completion":"    $result = 0;\n    foreach($l as $value) {\n        $result = $result * 10 + $value;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/440","completion":"    $pattern = \/(\\w+)(!?)\/g;\n    $pos = 0;\n    $result = $pattern.exec($text);\n    while ($result = $pattern.exec($text)) {\n        if ($result[2] != \"!\") {\n            $pos++;\n        }\n    }\n    return $pos;\n}","language":"php"}
{"task_id":"MBPHP\/441","completion":"  return $l * $l * $l;\n}","language":"php"}
{"task_id":"MBPHP\/442","completion":"    $positiveCount = 0;\n    $sum = 0;\n    foreach($nums as $num) {\n        if ($num > 0) {\n            $positiveCount++;\n            $sum += $num;\n        }\n    }\n    return ($positiveCount \/ $sum) * 100;\n}","language":"php"}
{"task_id":"MBPHP\/443","completion":"    return max(filter(function(num) { return num < 0; }, $list1));\n}","language":"php"}
{"task_id":"MBPHP\/444","completion":"    \/\/ code goes here\n    var $finalList = [];\n    $testList = array_filter($testList, function($array) {\n        $temp = 0;\n        foreach($array as $num) {\n            if ($temp === $k-1) {\n                $finalList[] = $num;\n                $temp = 0;\n            }\n            $temp++;\n        }\n    });\n    return $finalList;\n}","language":"php"}
{"task_id":"MBPHP\/445","completion":"    $testTup1 = $testTup1 ?? [];\n    $testTup2 = $testTup2 ?? [];\n\n    $outputTup = [];\n\n    $outputTup = array_merge($outputTup, $testTup1);\n    $outputTup = array_merge($outputTup, $testTup2);\n\n    $outputTup = $outputTup ?? [];\n\n    $outputTup = array_map('array_merge', $outputTup);\n\n    return $outputTup;\n}","language":"php"}
{"task_id":"MBPHP\/446","completion":"  $res = 0;\n\n  foreach($lst as $key = $val) {\n    if (in_array($val, $tup)) {\n      $res++;\n    }\n  }\n\n  return $res;\n}","language":"php"}
{"task_id":"MBPHP\/447","completion":"    return $nums.map(function($num) {\n        return $num * $num * $num;\n    });\n}","language":"php"}
{"task_id":"MBPHP\/448","completion":"    \/\/ Write code here\n}","language":"php"}
{"task_id":"MBPHP\/449","completion":"    $a = abs($x2 - $x3) * abs($y2 - $y3);\n    $b = abs($x1 - $x3) * abs($y1 - $y3);\n    $c = abs($x1 - $x2) * abs($y1 - $y2);\n\n    return $a + $b > $c ? \"Yes\" : \"No\";\n}","language":"php"}
{"task_id":"MBPHP\/450","completion":"    $str = array_slice($str, 0, $l);\n    return $str;\n}","language":"php"}
{"task_id":"MBPHP\/451","completion":"  return preg_replace(\"\/ \/\", \"\", $text1);\n}","language":"php"}
{"task_id":"MBPHP\/452","completion":"    $actualCost = $actualCost;\n    $saleAmount = $saleAmount;\n\n    if ($saleAmount < $actualCost) {\n        return null;\n    } else {\n        $saleAmount = $actualCost - $saleAmount;\n        return $saleAmount;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/453","completion":"  $s = 0;\n  $i = 2;\n  while ($i <= $n) {\n    if ($n % $i == 0) {\n      $s += $i;\n    }\n    $i++;\n  }\n  return $s;\n}","language":"php"}
{"task_id":"MBPHP\/454","completion":"    if (preg_match(\"\/z\/.\", $text)) {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"php"}
{"task_id":"MBPHP\/455","completion":"    \/\/your code\n}","language":"php"}
{"task_id":"MBPHP\/456","completion":"    $temp = '';\n    $reversed = '';\n    foreach ($stringlist as $string) {\n        $temp = str_replace(array('a', 'e', 'i', 'o', 'u'), array('A', 'E', 'I', 'O', 'U'), $string);\n        $reversed .= $temp;\n    }\n    return $reversed;\n}","language":"php"}
{"task_id":"MBPHP\/457","completion":"    $min = array();\n    $min_len = 0;\n    foreach($lst as $i => $v){\n        if (strlen($v) < $min_len) {\n            $min = $v;\n            $min_len = strlen($v);\n        }\n    }\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/458","completion":"    return $l * $b;\n}","language":"php"}
{"task_id":"MBPHP\/459","completion":"    $str2 = preg_replace(\"\/(U)\/\", \" \", $str1);\n    $str3 = preg_replace(\"\/(U)([a-z])(?=[A-Z])\/\", \"$2 \", $str2);\n    return $str3;\n}","language":"php"}
{"task_id":"MBPHP\/460","completion":"    if(!is_array($lst)) {\n        return false;\n    }\n    if(count($lst) < 1) {\n        return false;\n    }\n    $res = [];\n    foreach($lst as $el) {\n        $res[] = $el[0];\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/461","completion":"    return count(strtolower($str));\n}","language":"php"}
{"task_id":"MBPHP\/462","completion":"    $n = count($list1);\n    $l = array_map(\"string_repeat\", array_fill(0, $n, \"\"), $list1);\n    $list = array_map(\"string_repeat\", array_fill(0, $n, \"\"), $l);\n\n    $temp = 0;\n\n    for ($i = 0; $i < $n; $i++) {\n        $j = $i + 1;\n        $temp = $l[$i];\n        while ($j < $n) {\n            $l[$i] = $l[$j];\n            $l[$j] = $temp;\n            $list[$i] = $list[$j];\n            $list[$j] = $list[$i];\n            $i = $i + 1;\n            $j = $j + 1;\n        }\n    }\n\n    return ","language":"php"}
{"task_id":"MBPHP\/463","completion":"  $maxProduct = 0;\n  $currentMin = 0;\n  $currentMax = 0;\n  for ($i = 0; $i < count($arr); $i++) {\n    $currentMin = $currentMin === 0 ? $arr[$i] : $currentMin < $arr[$i] ? $currentMin : $arr[$i];\n    $currentMax = $currentMax === $arr[$i] ? $arr[$i] : $currentMax > $arr[$i] ? $currentMax : $arr[$i];\n    $maxProduct = $currentMax * $currentMin;\n  }\n  return $maxProduct;\n}","language":"php"}
{"task_id":"MBPHP\/464","completion":"    $values = array_keys($dict);\n    $size = count($values);\n\n    for ($i = 0; $i < $size; $i++) {\n        if ($dict[$values[$i]] != $n) {\n            return false;\n        }\n    }\n\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/465","completion":"    return $dict1;\n}","language":"php"}
{"task_id":"MBPHP\/466","completion":"    $sum = 0;\n    $i = 1;\n    $length = count($arr);\n    while ($i < $length) {\n        $sum = $sum + $arr[$i];\n        $i++;\n    }\n    if ($sum > $n) {\n        return $i - 1;\n    } else {\n        return 0;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/467","completion":"    $octal = \"\";\n\n    $octal = $octal . join(chr(48 + $decinum \/ 8), chr(48 + $decinum % 8));\n    return $octal;\n}","language":"php"}
{"task_id":"MBPHP\/468","completion":"  $max = $arr[0];\n  $curr = 1;\n  foreach ($arr as $item) {\n    if ($item >= $max) {\n      $curr++;\n      $max = $item * $curr;\n    } else if ($item < $max) {\n      $curr = 1;\n      $max = $item * $curr;\n    }\n  }\n  return $max \/ $n;\n}","language":"php"}
{"task_id":"MBPHP\/469","completion":"  $i = 0;\n  $min = $price[0];\n  $maxProfit = 0;\n  $currProfit = 0;\n\n  \/\/ find the maximum profit\n  while ($i < $k) {\n    if ($price[$i] < $min) {\n      $min = $price[$i];\n    } else {\n      $currProfit = $price[$i] - $min;\n      if ($currProfit > $maxProfit) {\n        $maxProfit = $currProfit;\n      }\n    }\n    $i++;\n  }\n\n  return $maxProfit;\n}","language":"php"}
{"task_id":"MBPHP\/470","completion":"    $first = 0;\n    $second = 0;\n    $output = [];\n    $i = 0;\n    $length = count($testTup);\n    if ($length < 1) {\n        return false;\n    }\n    $first = $testTup[0];\n    $output[$i] = $first;\n    for ($i = 1; $i < $length; $i++) {\n        $second = $testTup[$i];\n        $output[$i] = $first + $second;\n        $first = $second;\n    }\n    return $output;\n}","language":"php"}
{"task_id":"MBPHP\/471","completion":"    $num = 1;\n    $result = 0;\n    foreach ($arr as $key = $value) {\n        $num *= $value;\n    }\n    $num = $num % $n;\n    for ($i = 0; $i < $lens; $i++) {\n        $num = $num \/ $lens;\n    }\n    $result = $num;\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/472","completion":"  \/\/ Write your code here\n}","language":"php"}
{"task_id":"MBPHP\/473","completion":"    $set1 = $testList1;\n    $set2 = $testList2;\n    $set = intersect($set1, $set2);\n    return $set;\n}","language":"php"}
{"task_id":"MBPHP\/474","completion":"    if (preg_match(\"\/\\$ch\\$\/i\", $str1)) {\n        $str1 = preg_replace(\"\/\\$ch\\$\/i\", $newch, $str1);\n    }\n    return $str1;\n}","language":"php"}
{"task_id":"MBPHP\/475","completion":"    $count = 0;\n    $dict2 = [];\n    foreach ($dict1 as $key => $value) {\n        if ($count == 0) {\n            $dict2[$key] = $value;\n        } else {\n            if ($value > $dict2[$key][0]) {\n                $dict2[$key] = [$value, $dict2[$key][1]];\n            }\n        }\n        $count++;\n    }\n    return $dict2;\n}","language":"php"}
{"task_id":"MBPHP\/476","completion":"    $min = (int) $nums[0];\n    $max = (int) $nums[0];\n\n    foreach ($nums as $num) {\n        if ($num < $min) {\n            $min = $num;\n        } else if ($num > $max) {\n            $max = $num;\n        }\n    }\n\n    return $min + $max;\n}","language":"php"}
{"task_id":"MBPHP\/477","completion":"    return strtoupper($string);\n}","language":"php"}
{"task_id":"MBPHP\/478","completion":"    return $str1;\n}","language":"php"}
{"task_id":"MBPHP\/479","completion":"    $n = (int) $n;\n    return $n \/ 10 | 0;\n}","language":"php"}
{"task_id":"MBPHP\/480","completion":"    $tempArr = explode(' ', $str1);\n    $max = max($tempArr);\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/481","completion":"    $sum = $sum * 1;\n    for ($i = 0; $i < count($set); $i++) {\n        if ($set[$i] < $n && $set[$i] > 0) {\n            $subSetSum = $sum - $set[$i];\n            $subSetSum = $subSetSum > 0 ? $subSetSum : $n;\n            if ($subSetSum < $n && $subSetSum == $set[$i]) {\n                return true;\n            } else {\n                return isSubsetSum($set, $n, $subSetSum);\n            }\n        }\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/482","completion":"    if (empty($text)) return 'No';\n\n    return (string) preg_match('\/([A-Z])\\w{2,}\/', $text);\n}","language":"php"}
{"task_id":"MBPHP\/483","completion":"  $firstFactorialDivisibleNumber = $x;\n\n  if ($x == 1) {\n    return $x;\n  }\n\n  $i = 1;\n\n  while ($firstFactorialDivisibleNumber % $i != 0) {\n    $i++;\n  }\n\n  return $i;\n}","language":"php"}
{"task_id":"MBPHP\/484","completion":"    $result = array();\n    foreach ($testList1 as $test1) {\n        foreach ($testList2 as $test2) {\n            if ($test1[1] == $test2[1]) {\n                array_push($result, $test1);\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/485","completion":"    $m = $n - 1;\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($a[$i][$j] == $a[$m][$n])\n                $count++;\n        }\n        if ($count == 0)\n            return $a[$i][$j];\n        $count = 0;\n        $m--;\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/486","completion":"    $n_k = $n-$k;\n    $p_k = $p ** $k;\n    $n_0 = 1;\n    $sum = 0;\n    $sum2 = 0;\n    for ($i=0; $i<$k; $i++) {\n        $n_0 *= $n_k-$i;\n        $sum += $n_0 * $p_k;\n        $sum2 += $n_0 * $n_0;\n    }\n    return $sum \/ $sum2;\n}","language":"php"}
{"task_id":"MBPHP\/487","completion":"    $ret = array();\n    foreach ($tup as $key => $val) {\n        if (!is_array($ret[$key]))\n            $ret[$key] = array();\n        $ret[$key][] = $val;\n    }\n    $ret = array_values($ret);\n\n    $tmp = array();\n    foreach ($ret as $key => $val) {\n        sort($val);\n        $tmp[] = $val;\n    }\n    $ret = array_values($tmp);\n    return $ret;\n}","language":"php"}
{"task_id":"MBPHP\/488","completion":"    $area = (5 * $a * $a) \/ 2;\n    return round($area, 2);\n}","language":"php"}
{"task_id":"MBPHP\/489","completion":"  $largest = 0;\n  $highest = 0;\n  $frequency = 0;\n  for ($i = 0; $i < $n; $i++) {\n    if ($arr[$i] > $largest) {\n      $largest = $arr[$i];\n      $frequency++;\n    }\n  }\n  return $frequency;\n}","language":"php"}
{"task_id":"MBPHP\/490","completion":"    $symmetricSet = [];\n    foreach ($testList as $testPair) {\n        $symmetricSet[] = $testPair;\n        if (is_symmetric($testPair)) {\n            $symmetricSet[] = $testPair;\n        }\n    }\n    return $symmetricSet;\n}","language":"php"}
{"task_id":"MBPHP\/491","completion":"    if ($n == 1)\n        return $a;\n\n    return sumGp($a * $r, $n - 1, $r) + $a;\n}","language":"php"}
{"task_id":"MBPHP\/492","completion":"    $low = 0;\n    $high = $itemList-1;\n\n    while ($low <= $high) {\n        $mid = ($low + $high) \/ 2;\n\n        if ($itemList[$mid] < $item) {\n            $low = $mid + 1;\n        } else if ($itemList[$mid] > $item) {\n            $high = $mid - 1;\n        } else {\n            return true;\n        }\n    }\n\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/493","completion":"    $polygon = [];\n    $startx = $startx * $radius;\n    $starty = $starty * $radius;\n    $endx = $endx * $radius;\n    $endy = $endy * $radius;\n    $num_points = $endx - $startx + 1;\n    $theta = 2 * 3.141592 \/ $num_points;\n    for ($i = 0; $i < $num_points; $i++) {\n        $x = $startx + $i * $theta;\n        $y = $starty + ($i \/ 2 * $theta) * $radius;\n        $polygon[$i] = array($x, $y);\n    }\n    $first_x = $polygon[0][0];\n    $first\n","language":"php"}
{"task_id":"MBPHP\/494","completion":"    $integer = 0;\n    for ($i = 0; $i < count($testTup); $i++) {\n        $integer += (int)$testTup[$i] * pow(2, ($testTup.length - $i - 1));\n    }\n\n    return $integer;\n}","language":"php"}
{"task_id":"MBPHP\/495","completion":"  $str2 = preg_replace('\/^[a-z]\/', '', $str1);\n  return $str2;\n}","language":"php"}
{"task_id":"MBPHP\/496","completion":"    $result = array();\n    $heap = new Heap();\n\n    foreach ($nums as $num) {\n        $heap-push($num);\n    }\n\n    while ($n > 0) {\n        $result[] = $heap->pop();\n        $n--;\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/497","completion":"    $a = $r * $h;\n    return $a * pi() * ($r + $h) \/ 4;\n}","language":"php"}
{"task_id":"MBPHP\/498","completion":"    if($y == 0)\n        return $x;\n\n    return gcd($y, $x % $y);\n}","language":"php"}
{"task_id":"MBPHP\/499","completion":"    return $r * 2;\n}","language":"php"}
{"task_id":"MBPHP\/500","completion":"  $result = \"\";\n  foreach ($list as $item) {\n    $result .= $item;\n    if ($list -> length - 1) {\n      $result .= \" \";\n    }\n  }\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/501","completion":"    $divisor = $x % $y;\n    if ($divisor == 0) {\n        return $y;\n    }\n    else {\n        return numCommDiv($y, $divisor);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/502","completion":"    $l = $n % $m;\n    if ($l == 0) {\n        return 0;\n    }\n    if ($l < 0) {\n        return $m - $l;\n    }\n    return $l;\n}","language":"php"}
{"task_id":"MBPHP\/503","completion":"    $consecNums = array();\n    $prevNum = $nums[0];\n    $len = count($nums);\n\n    for ($i = 0; $i < $len; $i++) {\n        $consecNums[$i] = $prevNum + $nums[$i];\n        $prevNum = $consecNums[$i];\n    }\n\n    return $consecNums;\n}","language":"php"}
{"task_id":"MBPHP\/504","completion":"  \/\/ write code\n}","language":"php"}
{"task_id":"MBPHP\/505","completion":"    $i = 0;\n    for ($j = 0; $j < $a.length; $j++) {\n        if ($a[$j] != 0) {\n            $a[$i++] = $a[$j];\n        }\n    }\n    for ($j = $i; $j < $a.length; $j++) {\n        $a[$j] = 0;\n    }\n    return $a;\n}","language":"php"}
{"task_id":"MBPHP\/506","completion":"    if ($k == 1) {\n        return $n;\n    } else {\n        return $n * permutationCoefficient($n - 1, $k - 1);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/507","completion":"    $filteredWords = array();\n    foreach ($list1 as $word) {\n        if (!in_array($word, $removewords)) {\n            $filteredWords[] = $word;\n        }\n    }\n    return $filteredWords;\n}","language":"php"}
{"task_id":"MBPHP\/508","completion":"    $c1 = 0;\n    $c2 = 0;\n\n    foreach ($l1 as $k => $v) {\n        if (array_key_exists($v, $l2)) {\n            $c1++;\n        }\n    }\n    foreach ($l2 as $k => $v) {\n        if (array_key_exists($v, $l1)) {\n            $c2++;\n        }\n    }\n    return ($c1 == $c2);\n}","language":"php"}
{"task_id":"MBPHP\/509","completion":"    \/\/ your code goes here\n    $count=0;\n    $sum=0;\n    for ($i=1; $i<=$n; $i++) {\n        if($i%2==1){\n            $sum=$sum+$i;\n            $count++;\n        }\n    }\n    return $sum\/$count;\n}","language":"php"}
{"task_id":"MBPHP\/510","completion":"    $count = 0;\n    $n = count($arr);\n    $subsequence = 1;\n    $i = 1;\n    $j = 0;\n    $k = $k;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($arr[$i - 1] <= $arr[$i]) {\n            if ($arr[$i - 1] * $k < $arr[$i]) {\n                $subsequence++;\n                $k = $arr[$i - 1] * $k;\n            }\n        } else {\n            $k = $arr[$i - 1] * $k;\n            $j = $i - 1;\n        }\n    }\n    return $subsequence;\n}","language":"php"}
{"task_id":"MBPHP\/511","completion":"    $max = ceil($num \/ 2);\n    $sum = $max;\n    for($i = 1; $i <= $max; $i++) {\n        if($num % $i == 0) {\n            $sum = min($sum, $i + $num \/ $i);\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/512","completion":"    $cnt = array();\n    $cntArray = array();\n    foreach($testTuple as $x) {\n        if(is_array($x)) {\n            foreach($x as $y) {\n                if(!is_array($y)) {\n                    $cnt[count($cntArray)++] = $y;\n                    $cntArray[$y] = $y;\n                }\n            }\n        }\n    }\n\n    return $cnt;\n}","language":"php"}
{"task_id":"MBPHP\/513","completion":"  $ret = [];\n  foreach($testTup as $key => $value) {\n    $ret[$key] = $value;\n  }\n  return $ret;\n}","language":"php"}
{"task_id":"MBPHP\/514","completion":"  return array_sum($testTup);\n}","language":"php"}
{"task_id":"MBPHP\/515","completion":"    $sum = 0;\n    foreach ($arr as $value) {\n        $value = abs($value);\n        if ($value % $m === 0) {\n            $sum += $value;\n        }\n    }\n\n    return ($sum % $m === 0);\n}","language":"php"}
{"task_id":"MBPHP\/516","completion":"    $max = array_max($nums);\n    $numBase = $max + 1;\n    $len = count($nums);\n    $arr = array_split($nums, $numBase);\n    $arrNew = array();\n    for ($i = 0; $i < $len; $i++) {\n        $arrNew[$i] = array_chunk($arr[$i], $numBase);\n    }\n    $sorted = array();\n    for ($i = 0; $i < $len; $i++) {\n        $sorted[] = $arrNew[$i];\n    }\n    return $sorted;\n}","language":"php"}
{"task_id":"MBPHP\/517","completion":"    return max(array_filter(array_map('abs', $list1), '<=', 0));\n}","language":"php"}
{"task_id":"MBPHP\/518","completion":"    if (isDivisibleBy(2, $num)) {\n        return $num \/ 2;\n    } else if (isDivisibleBy(3, $num)) {\n        return $num \/ 3;\n    } else if (isDivisibleBy(5, $num)) {\n        return $num \/ 5;\n    } else {\n        return sqrtRoot($num \/ 2);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/519","completion":"    $sum = 0;\n    for ($i = 0; $i < $num; $i++) {\n        $sum += $i * $i * $i * (3 * $i - 1);\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/520","completion":"    $lcm = 1;\n    for (var $i = 2; $i <= $l[count($l) - 1]; $i++) {\n        if ($l[count($l) - $i] % $i == 0) {\n            $lcm *= $i;\n        }\n    }\n    return $lcm;\n}","language":"php"}
{"task_id":"MBPHP\/521","completion":"    $a = abs($z - $y);\n    $b = abs($z - $x);\n    return ($a < $b ? $a : $b) == $a;\n}","language":"php"}
{"task_id":"MBPHP\/522","completion":"    $length = 0;\n    $max = 0;\n    for ($i = 0; $i < strlen($arr); $i++) {\n        for ($j = $i + 1; $j < strlen($arr); $j++) {\n            if ($arr[$j] < $arr[$i]) {\n                break;\n            }\n            if ($j - $i > $max) {\n                $max = $j - $i;\n                $length = $j - $i;\n            }\n        }\n    }\n    return $length;\n}","language":"php"}
{"task_id":"MBPHP\/523","completion":"    $valid = array(\n        'hasCapitalLetter' => isset($str1) && strlen($str1) > 0 && strpos(strtolower($str1), $str1) !== false,\n        'hasLowerCaseLetter' => isset($str1) && strlen($str1) > 0 && strpos(strtolower($str1), $str1) === false,\n        'hasNumber' => isset($str1) && strlen($str1) > 0 && strpos(strtolower($str1), $str1) === false,\n        'length' => isset($str1) && strlen($str1) >= 8\n    );\n    $message = array();\n    foreach($valid as $key => $value) {\n        if (!$value) {\n            $message[] = \"String must have {$key} character.\";\n        }\n    }\n    if (!$valid['length'])","language":"php"}
{"task_id":"MBPHP\/524","completion":"    if ($n <= 1) {\n        return 0;\n    }\n\n    $max = $arr[0];\n    $res = $arr[0];\n    for (i = 1; i < $n; i++) {\n        if ($max < $arr[i]) {\n            $max = $arr[i];\n        }\n\n        if ($arr[i - 1] < $arr[i] && $max + $arr[i] > $res) {\n            $res = $max + $arr[i];\n        }\n    }\n\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/525","completion":"    return (abs(($line1[0] - $line2[0]) * (3 * $line1[0] + 4 * $line2[0] + 2 * $line1[1] + 3 * $line2[1] + 2 * $line1[2] + 1 * $line2[2])) < 2);\n}","language":"php"}
{"task_id":"MBPHP\/526","completion":"    $str = str_split($str1);\n    $first = substr($str[0], 0, 1).upper();\n    $last = substr($str[0], 1).upper();\n    $output = $first . $last . $str[0];\n    for ($i = 1; $i < count($str); $i++) {\n        $output .= $str[$i];\n    }\n    return $output;\n}","language":"php"}
{"task_id":"MBPHP\/527","completion":"  if (empty($arr)) {\n    return 0;\n  }\n\n  if ($arr[0] + $arr[1] == $sum) {\n    return 1 + getPairsCount($arr.substr(1), $n, $sum);\n  }\n\n  return getPairsCount($arr.substr(1), $n, $sum);\n}","language":"php"}
{"task_id":"MBPHP\/528","completion":"  return list(\n    filter(function($i, $l) {\n      return $l.length < $i;\n    }, [\n      $list1[0],\n      filter(function($i, $l) {\n        return $l[0] == $l[$i];\n      }, $list1.slice(1)),\n    ])\n  );\n}","language":"php"}
{"task_id":"MBPHP\/529","completion":"    \/\/ your code goes here\n    $a = 1;\n    $b = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $c = $a + $b;\n        $a = $b;\n        $b = $c;\n    }\n    return $a + $b;\n}","language":"php"}
{"task_id":"MBPHP\/530","completion":"    $count = 0;\n    foreach ($nums as $num) {\n        if ($num < 0) {\n            $count++;\n        }\n    }\n    return $count \/ count($nums);\n}","language":"php"}
{"task_id":"MBPHP\/531","completion":"    $coins = $coins;\n    $m = $m;\n    $v = $v;\n\n    $minCoins = 0;\n    if (strlen($v) < strlen($m)) {\n        return 0;\n    } else {\n        if ($v == $m) {\n            $minCoins = $coins;\n        } else if ($v < $m) {\n            $minCoins = 0;\n        } else {\n            $minCoins = 1;\n            for ($i = 1; $i <= $m - $v; $i++) {\n                $temp = $minCoins + minCoins($coins, $m, $v - $i);\n                if ($temp < $minCoins) {\n                    $minCoins = $temp;\n                }\n            ","language":"php"}
{"task_id":"MBPHP\/532","completion":"    $str1 = str_split($str1);\n    $str2 = str_split($str2);\n\n    for($i = 0; $i < strlen($str1); $i++) {\n        if(!in_array($str1[$i], $str2)) return false;\n    }\n\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/534","completion":"    $pattern = strtoupper($pattern);\n    $text = strtolower($text);\n    $search_pos = 0;\n    $position = 0;\n    for ($i = 0; $i < strlen($text); $i++) {\n        if ($text[$i] == $pattern[0]) {\n            $search_pos = 1;\n            for ($j = 1; $j < strlen($pattern); $j++) {\n                if ($text[$i + $j] != $pattern[$j]) {\n                    break;\n                }\n                $search_pos++;\n            }\n            if ($search_pos == strlen($pattern)) {\n                $position = $i - ($search_pos - 1);\n                break;\n            }\n        }\n    }\n    if ($search_pos != strlen($pattern)) {\n        $position ","language":"php"}
{"task_id":"MBPHP\/535","completion":"    $a = pi() * $r ** 2;\n    $b = 2 * pi() * $r;\n    $c = 2 * pi() * $r * pi() * $r;\n\n    $d = (pi() * $r ** 2) + (2 * pi() * $r) + (2 * pi() * $r * pi() * $r);\n    $e = (pi() * $r ** 2) + (2 * pi() * $r) + (2 * pi() * $r * pi() * $r) + (pi() * $r ** 2);\n\n    if ($r > 0) {\n        return $a + $b + $c;\n    } else if ($r < 0) {\n        return $d + ","language":"php"}
{"task_id":"MBPHP\/536","completion":"    $first = 0;\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $first = $first + 1;\n        $result[$i] = $list[$first];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/537","completion":"    if ($str1 == null) {\n        return \"NULL\";\n    }\n\n    if (strlen($str1) == 0) {\n        return \"Empty\";\n    }\n\n    $str1 = strtr($str1, ' ');\n\n    $str1 = str_replace('\"', '', $str1);\n\n    $str1 = str_replace('\"', '', $str1);\n\n    $arr = explode(\" \", $str1);\n\n    $arr = array_filter($arr, function($e) {\n        return in_array($e, $arr);\n    });\n\n    if (count($arr) == 0) {\n        return \"None\";\n    }\n\n    return $arr[0];\n}","language":"php"}
{"task_id":"MBPHP\/538","completion":"  $str1 = explode(\",\", $str1);\n  $str2 = '';\n  $res = array();\n  foreach ($str1 as $v) {\n    $str2 = str_replace(\" \", \"\", $v);\n    array_push($res, $str2);\n  }\n  return $res;\n}","language":"php"}
{"task_id":"MBPHP\/539","completion":"    return $basesNum[$index];\n}","language":"php"}
{"task_id":"MBPHP\/540","completion":"    $min = 0;\n    $max = 0;\n\n    $counts = [];\n    $max_count = 0;\n    $min_count = $arr[$min];\n\n    foreach($arr as $val) {\n        $counts[$val] = $counts[$val] ? $counts[$val] + 1 : 1;\n        if ($counts[$val] > $max_count) {\n            $max_count = $counts[$val];\n            $max = $val;\n        }\n\n        if ($counts[$val] < $min_count) {\n            $min_count = $counts[$val];\n            $min = $val;\n        }\n    }\n\n    return $max - $min;\n}","language":"php"}
{"task_id":"MBPHP\/541","completion":"  $a = $n;\n  $b = $n;\n  while ($a > 0) {\n    $a = $a \/ 10;\n  }\n  while ($b > 0) {\n    $b = $b \/ 10;\n  }\n  $a = $n \/ $a;\n  $b = $n \/ $b;\n  if ($a + $b === $n) {\n    return true;\n  }\n  return false;\n}","language":"php"}
{"task_id":"MBPHP\/542","completion":"    return preg_replace(\"\/\\s|\\.|\\,\/\", \":\", $text);\n}","language":"php"}
{"task_id":"MBPHP\/543","completion":"    $result = 0;\n\n    for ($x = $num1; $x >= $num2; $x -= 1) {\n        $result += countDigits($x);\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/544","completion":"    $flattenedString = \"\";\n    foreach($testList as $element) {\n        foreach($element as $subElement) {\n            $flattenedString .= $subElement;\n            $flattenedString .= \" \";\n        }\n    }\n    trim($flattenedString, \" \");\n    return $flattenedString;\n}","language":"php"}
{"task_id":"MBPHP\/545","completion":"    $result = $n & 255;\n    $result = $result ^ 255;\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/546","completion":"    if ($string === null || $char === null) {\n        return null;\n    }\n    if (strlen($string) === 0) {\n        return null;\n    }\n    $pos = $string.lastIndexOf($char);\n    if ($pos === -1) {\n        return null;\n    }\n    return $pos;\n}","language":"php"}
{"task_id":"MBPHP\/547","completion":"  $result = 0;\n\n  for (int $i = 0; $i < $n; $i++) {\n    $result += hammingDistance($i, $i + 1);\n  }\n\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/548","completion":"  $arr = array_filter($arr);\n\n  $max = 0;\n  $prev = 0;\n\n  foreach ($arr as $el) {\n    if ($el > $prev) {\n      $max++;\n    }\n\n    $prev = $el;\n  }\n\n  return $max;\n}","language":"php"}
{"task_id":"MBPHP\/549","completion":"    \/\/ write code here\n}","language":"php"}
{"task_id":"MBPHP\/550","completion":"    if ($low < $high) {\n        $mid = $low + $high >>> 1;\n        $mid1 = $mid - 1;\n        $mid2 = $mid + 1;\n        if (is_sorted($arr, $mid1, $mid) && is_sorted($arr, $mid, $mid2)) {\n            $max = $arr[$mid2];\n            for ($i = $mid; $i > $mid1; $i--) {\n                if ($arr[$i] > $max) {\n                    $max = $arr[$i];\n                }\n            }\n            return $max;\n        } else if (is_sorted($arr, $mid1, $mid)) {\n            return findMax($arr, $low, $mid - 1);\n        } else if (is_sorted($arr, $mid, ","language":"php"}
{"task_id":"MBPHP\/551","completion":"    return $list1[$n];\n}","language":"php"}
{"task_id":"MBPHP\/552","completion":"    if (count($seqNums) > 1) {\n        $tempSeq = array_merge($seqNums);\n        $tempSeq.sort();\n        $tempSeq = array_merge($tempSeq, array_fill(0, count($tempSeq), null));\n        $counter = 0;\n        for ($i = 0; $i < count($tempSeq)-1; $i++) {\n            if ($tempSeq[$i] == $tempSeq[$i+1]) {\n                $counter++;\n            } else {\n                break;\n            }\n        }\n        if ($counter == count($seqNums)-count(null)) {\n            return \"Linear Sequence\";\n        }\n    }\n    return \"Non Linear Sequence\";\n}","language":"php"}
{"task_id":"MBPHP\/553","completion":"  $first = $testTup[0];\n  $second = $testTup[1];\n\n  return $first + $second;\n}","language":"php"}
{"task_id":"MBPHP\/554","completion":"    $output = array();\n    foreach ($list as $value) {\n        if ($value % 2) {\n            $output[] = $value;\n        }\n    }\n    return $output;\n}","language":"php"}
{"task_id":"MBPHP\/555","completion":"    return ((($n * $n * $n) + 1) \/ 2) * $n * $n;\n}","language":"php"}
{"task_id":"MBPHP\/556","completion":"    $c = array_filter(array_map('xor', $a), function($a) {\n        return $a != $n;\n    });\n    return count($c) \/ 2 + 1;\n}","language":"php"}
{"task_id":"MBPHP\/557","completion":"    $newString = \"\";\n    $string = trim($string);\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != $string[$i].toLowerCase()) {\n            $newString .= strtolower($string[$i]);\n        } else {\n            $newString .= strtoupper($string[$i]);\n        }\n    }\n    return $newString;\n}","language":"php"}
{"task_id":"MBPHP\/558","completion":"    $m1 = abs($n1);\n    $m2 = abs($n2);\n    $d1 = $m1 > 0 ? floor($m1 \/ 10) : 0;\n    $d2 = $m2 > 0 ? floor($m2 \/ 10) : 0;\n    return abs($d1 - $d2);\n}","language":"php"}
{"task_id":"MBPHP\/559","completion":"    if ($size > $a.length) {\n        return null;\n    }\n\n    $max = 0;\n    $curr = 0;\n\n    $i = 0;\n    $j = $size - 1;\n\n    while ($i < $a.length && $j >= 0) {\n        $curr += $a[$j];\n        if ($curr > $max) {\n            $max = $curr;\n        }\n\n        if ($curr < 0) {\n            $curr = 0;\n        }\n\n        $i++;\n        $j--;\n    }\n\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/560","completion":"    $result = array();\n\n    for ($i = 0; $i < count($testTup1); $i++) {\n        if (in_array($testTup1[$i], $testTup2)) {\n            continue;\n        }\n\n        $result[] = $testTup1[$i];\n    }\n\n    foreach ($testTup2 as $key => $value) {\n        if (!in_array($key, $result)) {\n            $result[] = $key;\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/561","completion":"    $result = array();\n\n    $first = $testList[0];\n\n    foreach ($testList as $item) {\n        for ($i = 0; $i < count($item); ++$i) {\n            $result[$first[$i]] = array_merge($result[$first[$i]] || array(), $item[$i]);\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/562","completion":"    \/\/ write your code here\n    var maxLen = 0;\n    for(var i=0; i<$lst.length; i++){\n        var tempLen = 0;\n        for(var j=0; j<$lst[i].length; j++){\n            tempLen++;\n        }\n        if(maxLen<tempLen){\n            maxLen = tempLen;\n        }\n    }\n    return maxLen;\n}","language":"php"}
{"task_id":"MBPHP\/563","completion":"    $result = [];\n    if (empty($text)) {\n        return $result;\n    }\n\n    $startQuote = strpos($text, \"\\\"\");\n    $endQuote = strpos($text, \"\\\"\", $startQuote + 1);\n    if ($startQuote < 0 || $endQuote < 0) {\n        return $result;\n    }\n\n    $text = substr($text, $startQuote + 1, $endQuote - $startQuote - 1);\n    $result[] = $text;\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/564","completion":"    $c = 0;\n    foreach($arr as $el) {\n        if($el != $arr[$n]) {\n            $c++;\n        }\n    }\n    return $c;\n}","language":"php"}
{"task_id":"MBPHP\/565","completion":"    $charArray = array();\n\n    for ($i = 0; $i < strlen($word); $i++) {\n        $temp = substr($word, $i, 1);\n        $charArray[] = $temp;\n    }\n\n    return $charArray;\n}","language":"php"}
{"task_id":"MBPHP\/566","completion":"    $result = 0;\n    if ($n > 0) {\n        while ($n > 0) {\n            $result = $result + $n % 10;\n            $n = $n \/ 10;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/567","completion":"    $list2 = array_merge(explode(',', $list1), array_fill(0, count($list1) - 1, -1));\n    return is_sorted($list2);\n}","language":"php"}
{"task_id":"MBPHP\/568","completion":"    return (array_fill(0, $length, []));\n}","language":"php"}
{"task_id":"MBPHP\/569","completion":"    foreach($list1 as $list) {\n        sort($list);\n    }\n    return $list1;\n}","language":"php"}
{"task_id":"MBPHP\/570","completion":"    $list2 = array();\n    foreach ($list1 as $item) {\n        $list2[] = preg_replace(array_map(function($x) { return str_replace($charlist, '', $x); }, explode(\" \", $item)), \"\", $list1);\n    }\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/571","completion":"    $m = $n - 1;\n    $max = 0;\n    $curr = 0;\n    for ($i = 0; $i <= $m; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            $curr = ($i == $j) ? $arr[$i] : $arr[$i] - $arr[$j];\n            if ($curr > $max && $curr < $k)\n                $max = $curr;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/572","completion":"  $uniqueNums = array();\n  $otherNums = array();\n\n  foreach($nums as $n) {\n    if ($uniqueNums[$n] == true) {\n      $otherNums[] = $n;\n    } else {\n      $uniqueNums[$n] = true;\n    }\n  }\n\n  return $otherNums;\n}","language":"php"}
{"task_id":"MBPHP\/573","completion":"    $dataLength = count($listData);\n    $product = 1;\n    $dataLength = $dataLength - 1;\n\n    for ($i = 0; $i < $dataLength; $i++) {\n        $product *= $listData[$i];\n    }\n\n    return $product;\n}","language":"php"}
{"task_id":"MBPHP\/574","completion":"  $s = $r * $r * $h;\n  return $s;\n}","language":"php"}
{"task_id":"MBPHP\/575","completion":"    $n = abs($n);\n    $b = (floor($l \/ $n)) * $n;\n    $c = $l % $n;\n    $d = $r % $n;\n\n    if ($d == $c)\n        $b++;\n    else if ($d < $c && $b < $c)\n        $b++;\n\n    return $b;\n}","language":"php"}
{"task_id":"MBPHP\/576","completion":"  return array_merge(array_slice($b, $n), array_slice($a, $m)) === $b;\n}","language":"php"}
{"task_id":"MBPHP\/577","completion":"    $f = factorial($n);\n    return $f % 10;\n}","language":"php"}
{"task_id":"MBPHP\/578","completion":"  $result = [];\n  if (count($list1) === count($list2) === count($list3)) {\n    $result = array_merge($list1, $list2, $list3);\n    $result = $result[0], $result[count($list1) - 1], $result[count($list1) + count($list2) - 1];\n    return $result;\n  } else {\n    return $result;\n  }\n}","language":"php"}
{"task_id":"MBPHP\/579","completion":"  \/\/ the following code works, but is really inefficient\n  $dissimilar = array();\n  for ($i = 0; $i < count($testTup1); $i++) {\n    if ($testTup1[$i] != $testTup2[$i]) {\n      $dissimilar[] = $testTup1[$i];\n    }\n  }\n  return $dissimilar;\n}","language":"php"}
{"task_id":"MBPHP\/580","completion":"    \/\/ Your code goes here\n    if (isset($testTuple) && is_array($testTuple)) {\n        $array = array_filter($testTuple, function ($value) {\n            return is_array($value) || is_numeric($value) && $value % 2 === 0;\n        });\n        return array_merge($array);\n    } else {\n        return $testTuple;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/581","completion":"    $a = ($s * $s) * $b;\n    return $a;\n}","language":"php"}
{"task_id":"MBPHP\/582","completion":"    $return = false;\n    if (empty($dict1)) {\n        $return = true;\n    }\n    return $return;\n}","language":"php"}
{"task_id":"MBPHP\/583","completion":"    $max = $num;\n\n    for ($i = 1; $i < $max; $i++) {\n        $pre = $num - $i;\n\n        if ($pre < 1) {\n            continue;\n        }\n\n        $post = $num + $i;\n\n        $sum = $pre * ($i + $post) \/ 2;\n\n        $sum = ceil($sum);\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/584","completion":"    $adverbs = array();\n    preg_match_all(\"\/[aeiou]+$\/\", $text, $matches);\n    foreach ($matches as $match) {\n        $start = strpos($text, $match[1]);\n        $end = strpos($text, $match[1], strlen($match[1]) + 1);\n        $adverbs[$start] = $match[1];\n    }\n    return join(\" \", $adverbs);\n}","language":"php"}
{"task_id":"MBPHP\/585","completion":"  $minHeap = array_heap_adjust(array(), 0, $n);\n  $res = array();\n\n  $i = 0;\n  foreach ($items as $item) {\n    if ($i < $n) {\n      $minHeap[++$i] = $item;\n    } else if (greater($item['price'], $minHeap[$i]['price'])) {\n      $minHeap[$i] = $item;\n    }\n    ++$i;\n  }\n\n  $i = 0;\n  foreach ($minHeap as $item) {\n    if ($i < $n) {\n      $res[++$i] = $item;\n    }\n    ++$i;\n  }\n\n  return $res;\n}","language":"php"}
{"task_id":"MBPHP\/586","completion":"    $t = [];\n    if (is_numeric($n) && is_numeric($k)) {\n        $i = 0;\n        while ($i <= ($a.length - $n)) {\n            $t[] = $a[$i];\n            $i++;\n        }\n        while ($i < $a.length) {\n            $t[] = $a[$i];\n            $i++;\n            $t[$k] = $a[$i];\n            $i++;\n        }\n    }\n    return $t;\n}","language":"php"}
{"task_id":"MBPHP\/587","completion":"    $result = array();\n    for ($i = 0; $i < count($listx); $i++) {\n        $result[] = $listx[$i];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/588","completion":"    return max($nums) - min($nums);\n}","language":"php"}
{"task_id":"MBPHP\/589","completion":"    $c = array();\n    $d = ($b - $a) \/ 2;\n    for ($i = $a; $i <= $b; $i++) {\n        if (($i % 1) == 0) {\n            if ($i > $d && $i < ($b + $d)) {\n                $c[] = $i;\n            }\n        }\n    }\n    return $c;\n}","language":"php"}
{"task_id":"MBPHP\/591","completion":"    return $newlist[1] = $newlist[0], $newlist[0] = $newlist[1], $newlist;\n}","language":"php"}
{"task_id":"MBPHP\/592","completion":"    $a = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $a += binomialCoefficient($n, $i) * binomialCoefficient($i + 1, $n - $i);\n    }\n    return $a;\n}","language":"php"}
{"task_id":"MBPHP\/593","completion":"    $ip = preg_replace('\/^(0+)(0+)(0+)(0+)(0+)\/', '$1.$2.$3.$4.$5', $ip);\n    return $ip;\n}","language":"php"}
{"task_id":"MBPHP\/594","completion":"    $odd = $list1[0::2];\n    $even = $list1[1::2];\n\n    return ($odd - $even);\n}","language":"php"}
{"task_id":"MBPHP\/595","completion":"    $m = strlen($str1) - strlen($str2);\n    $s1 = str_split($str1);\n    $s2 = str_split($str2);\n\n    for ($i = 0; $i < strlen($s1); $i++) {\n        $j = strlen($s2) - 1;\n        if (strcmp($s1[$i], $s2[$j]) != 0) {\n            while ($j >= 0 && strcmp($s1[$i], $s2[$j]) != 0) {\n                $s2[j] = $s2[$j--];\n            }\n        }\n    }\n    if (strlen($str1) == strlen($str2)) {\n        return $m;\n    }\n    return \"Not Possible\";\n}","language":"php"}
{"task_id":"MBPHP\/597","completion":"    $l1 = count($arr1);\n    $l2 = count($arr2);\n    $i = min($l1, $l2);\n    $j = max($l1, $l2);\n\n    $i_l1 = $i;\n    $i_l2 = $i;\n    $j_l1 = $j;\n    $j_l2 = $j;\n\n    $arr1_l1 = $arr1[$i];\n    $arr1_l2 = $arr1[$i];\n    $arr2_l1 = $arr2[$j];\n    $arr2_l2 = $arr2[$j];\n\n    if ($i_l1 > $j_l2) {\n        $arr1_l1 = $arr1[$j];\n        $arr1_l2 = $arr1[$j];\n        $arr2_l1 = $","language":"php"}
{"task_id":"MBPHP\/598","completion":"    $sum = 0;\n    while ($number > 0) {\n        $sum = ($sum + (int) $number % 10) * (int) $number \/ 10;\n        $number = $number \/ 10;\n    }\n\n    return $sum === $number;\n}","language":"php"}
{"task_id":"MBPHP\/599","completion":"    \/\/ your code here\n\n    return array();\n}","language":"php"}
{"task_id":"MBPHP\/600","completion":"    $even = $n & 1;\n    return $even;\n}","language":"php"}
{"task_id":"MBPHP\/602","completion":"    $str2 = str_repeat($str1, strlen($str1));\n    $i = strpos($str2, $str1);\n    if ($i !== false) {\n        return substr($str2, $i, 1);\n    } else {\n        return \"None\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/603","completion":"    \/\/ TODO: your code here\n\n}","language":"php"}
{"task_id":"MBPHP\/604","completion":"    $words = explode(' ', $s);\n    $reversed = implode(' ', reverse($words));\n    return $reversed;\n}","language":"php"}
{"task_id":"MBPHP\/605","completion":"    $num = abs($num);\n    if ( $num === 2 || $num === 3 || $num === 5 || $num === 7 || $num === 11) {\n        return true;\n    }\n\n    if ($num % 2 === 0 || $num % 3 === 0 || $num % 5 === 0 || $num % 7 === 0 || $num % 11 === 0) {\n        return false;\n    }\n\n    for ($i = 5; $i * $i <= $num; $i += 6) {\n        if ($num % $i === 0 || $num % $i === 1) {\n            return false;\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/606","completion":"    \/\/ return $degree * pi() \/ 180;\n    return $degree * (pi() \/ 180);\n}","language":"php"}
{"task_id":"MBPHP\/607","completion":"    \/\/ TODO\n}","language":"php"}
{"task_id":"MBPHP\/608","completion":"    $result = 1;\n    $first = 1;\n\n    for ($i=1;$i<=$n;$i++) {\n        $result = $first + $result;\n        $first = $result - 1;\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/609","completion":"    $x = abs($a - $b) \/ abs($n - 1);\n    $y = $a + $x * $n;\n\n    return $y;\n}","language":"php"}
{"task_id":"MBPHP\/610","completion":"    $l--;\n    if($l < 1) return $list1;\n    $list1 = $list1.filter(function($i) {\n        return $i != $list1[$l];\n    });\n    return removeKthElement($list1, $l);\n}","language":"php"}
{"task_id":"MBPHP\/611","completion":"    $max = -Infinity;\n\n    foreach ($testList as $array) {\n        for ($i = 0; $i < count($array) - $n + 1; $i++) {\n            $max = (max($max, $array[$i]));\n        }\n    }\n\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/612","completion":"    if (count($lst) <= 1) {\n        return $lst;\n    }\n    $out = [];\n    $out[$out.length] = $lst[0];\n    $out[$out.length] = $lst[$lst.length - 1];\n    for ($i = 1; $i < count($lst) - 1; $i++) {\n        $out[$out.length] = $lst[$i];\n    }\n    return $out;\n}","language":"php"}
{"task_id":"MBPHP\/613","completion":"    $max = 0;\n    $i = 0;\n    foreach($testList as $key => $value) {\n        if ($max < $value[1][0]) {\n            $max = $value[1][0];\n            $i = $key;\n        }\n    }\n\n    return $testList[$i];\n}","language":"php"}
{"task_id":"MBPHP\/614","completion":"    $result = 0;\n    foreach($testList as $testArray) {\n        foreach($testArray as $value) {\n            $result += $value;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/615","completion":"    $sum = 0;\n    $count = count($nums);\n    for ($i = 0; $i < $count; $i++) {\n        $sum += $nums[$i][0];\n        if ($i != $count - 1) {\n            $sum += $nums[$i][1];\n        }\n    }\n    $avg = $sum \/ $count;\n    $avg = [$avg, $sum - $avg];\n    return $avg;\n}","language":"php"}
{"task_id":"MBPHP\/616","completion":"    $retVal = [];\n    for ($i = 0; $i < count($testTup1); $i++) {\n        $retVal[$i] = (($testTup1[$i] % $testTup2[$i]) + ($testTup2[$i] % $testTup1[$i])) % $testTup2[$i];\n    }\n    return $retVal;\n}","language":"php"}
{"task_id":"MBPHP\/617","completion":"    return max(max(minJumps($a + 1, $b - 1, $d), minJumps($a + 1, $b, $d - 1)), minJumps($a, $b - 1, $d - 1));\n}","language":"php"}
{"task_id":"MBPHP\/618","completion":"  $result = $nums1\n    .map(function($num1) {\n      return $num1 \/ $nums2[0];\n    })\n    .map(function($num) {\n      return $num * 100;\n    });\n\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/619","completion":"    $new = \"\";\n    $num = 0;\n    $lArr = str_split($testStr, '');\n    foreach($lArr as $v) {\n        $new .= $v .= $num;\n        $num++;\n    }\n    return $new;\n}","language":"php"}
{"task_id":"MBPHP\/620","completion":"  $result = 1;\n\n  for ($i = 0; $i < $n; $i++) {\n    for ($j = $i + 1; $j <= $n; $j++) {\n      if (($a[$i] + $a[$j]) % $a[$j] == 0) {\n        if ($result < $a[$i] + $a[$j]) {\n          $result = $a[$i] + $a[$j];\n        }\n      }\n    }\n  }\n\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/621","completion":"    $testList = array_map('intval', $testList);\n    $max = $testList[count($testList) - 1];\n    $res = [];\n    $i = 0;\n    while ($i < count($testList)) {\n        $res[$i] = $testList[$i] + $k;\n        if ($res[$i] > $max) {\n            $res[$i] = $max;\n        }\n        $i++;\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/622","completion":"    $medArr = $arr1;\n    if (count($arr2) > count($arr1)) {\n        $medArr = $arr2;\n    }\n\n    $medArr = sort($medArr);\n    $len = count($medArr);\n    $half = $n \/ 2;\n\n    if ($n % 2 == 0) {\n        return (($medArr[$half - 1] + $medArr[$half]) \/ 2);\n    } else {\n        return $medArr[$half];\n    }\n}","language":"php"}
{"task_id":"MBPHP\/623","completion":"    return $nums.map(num => num ** $n);\n}","language":"php"}
{"task_id":"MBPHP\/624","completion":"    return strtoupper($string);\n}","language":"php"}
{"task_id":"MBPHP\/625","completion":"    $first = $newlist[0];\n    $last = $newlist[$newlist.length - 1];\n    return array($last, $first, $newlist[1], $newlist[2], $newlist[3], $newlist[4]);\n}","language":"php"}
{"task_id":"MBPHP\/626","completion":"    $area = $r * $r * (3.14159265359) \/ 2;\n    return $area;\n}","language":"php"}
{"task_id":"MBPHP\/627","completion":"    if ($start < $end) {\n        if ($end - $start > 1) {\n            if ($array[$start] == $array[$end]) {\n                return findFirstMissing($array, $start + 1, $end - 1);\n            } else {\n                return findFirstMissing($array, $start + 1, $end);\n            }\n        }\n        if ($array[$start] - $array[$end] == 1) {\n            return findFirstMissing($array, $start + 1, $end - 1);\n        } else if ($array[$start] == $array[$end]) {\n            return $array[$start];\n        }\n        return $array[$end] + 1;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/628","completion":"    $string = str_replace(' ', '%20', $string);\n    return $string;\n}","language":"php"}
{"task_id":"MBPHP\/629","completion":"    if(!is_array($list)) {\n        $list = array($list);\n    }\n\n    return (array_filter($list, function($v) {\n        return $v % 2 == 0;\n    }));\n}","language":"php"}
{"task_id":"MBPHP\/630","completion":"    $lst = [];\n    for ($i = $testTup[0] - 1; $i <= $testTup[0] + 1; $i++) {\n        for ($j = $testTup[1] - 1; $j <= $testTup[1] + 1; $j++) {\n            if ($j >= 0 && $j < 10 && $i >= 0 && $i < 10) {\n                $lst[] = [$i, $j];\n            }\n        }\n    }\n    return $lst;\n}","language":"php"}
{"task_id":"MBPHP\/631","completion":"    return preg_replace(array('\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\s+\/', '\/\\","language":"php"}
{"task_id":"MBPHP\/632","completion":"    $result = [];\n    $length = count($numList);\n\n    for ($i = 0; $i < $length; $i++) {\n        if ($numList[$i] == 0) {\n            $result[] = $numList[$i];\n        } else {\n            $result[] = $numList[$i];\n        }\n    }\n\n    $result[] = $numList[$length - 1];\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/633","completion":"    return (array_sum($arr) ^ array_sum($arr, $n - 1));\n}","language":"php"}
{"task_id":"MBPHP\/634","completion":"    return $n > 0 ? evenPowerSum($n - 1) + $n ** 4 : 0;\n}","language":"php"}
{"task_id":"MBPHP\/635","completion":"  $minHeap = [];\n  foreach ($iterable as $i) {\n    push($minHeap, $i);\n  }\n\n  while ($minHeap !== []) {\n    pop($minHeap);\n  }\n\n  return $minHeap;\n}","language":"php"}
{"task_id":"MBPHP\/636","completion":"    $d = sqrt($b * $b - 4 * $a * $c);\n    $e = $a + $d;\n    $f = $a - $d;\n    if ($e == 0 && $f == 0) {\n        return \"Yes\";\n    }\n    return \"No\";\n}","language":"php"}
{"task_id":"MBPHP\/637","completion":"    $result = $saleAmount - $actualCost;\n    return $result < 0;\n}","language":"php"}
{"task_id":"MBPHP\/638","completion":"    \/\/ Your code goes here\n}","language":"php"}
{"task_id":"MBPHP\/639","completion":"    $return = 0;\n    foreach ($sampleNames as $name) {\n        $return += strlen($name);\n        if (substr($name, 0, 1) == chr(97)) {\n            unset($sampleNames[$name]);\n        }\n    }\n\n    return $return;\n}","language":"php"}
{"task_id":"MBPHP\/640","completion":"    return implode(\"|\", $items);\n}","language":"php"}
{"task_id":"MBPHP\/641","completion":"    $n = abs($n);\n    $last_nonagonal_number = 0;\n\n    for ($i = 2; $i <= $n; $i++) {\n        if ((($i * $i) - $n) % $i == 0) {\n            return $i;\n        }\n    }\n\n    return $last_nonagonal_number;\n}","language":"php"}
{"task_id":"MBPHP\/643","completion":"    $matches = preg_match_all('\/z[^A-Za-z]*[A-Za-z][^A-Za-z]*', $text, PREG_OFFSET_CAPTURE | PREG_SET_ORDER);\n\n    if (count($matches) > 0) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/644","completion":"  $output = [];\n  for ($i = 0; $i < $input.length; $i++) {\n    $output[$i + $k] = $input[$i];\n  }\n  return $output;\n}","language":"php"}
{"task_id":"MBPHP\/645","completion":"    return $testList[$k][0] * $testList[$k][1] * $testList[$k][2];\n}","language":"php"}
{"task_id":"MBPHP\/646","completion":"  $result = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $result += ($i ** 3) % $k;\n  }\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/647","completion":"    $arr = array();\n\n    $str = str_replace(array('A', 'E', 'I', 'O', 'U'), '', $text);\n\n    $i = 0;\n    while($i < strlen($str)) {\n        if(strpos($str, substr($str, $i, 1)) === false) {\n            $arr[] = substr($str, $i, strlen($str) - $i);\n            break;\n        } else {\n            $arr[] = substr($str, $i, 1);\n            $i++;\n        }\n    }\n    return $arr;\n}","language":"php"}
{"task_id":"MBPHP\/648","completion":"  $array = [];\n  for ($i = 0; $i < $lst.length; $i += 2) {\n    $array[] = $lst[$i];\n    $array[$i] = $lst[$i + 1];\n    $array[$i + 1] = $lst[$i];\n  }\n  return $array;\n}","language":"php"}
{"task_id":"MBPHP\/649","completion":"    $sum = 0;\n\n    for ($i = $m; $i <= $n; $i++) {\n        $sum += $nums[$i];\n    }\n\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/650","completion":"    $i1 = 0;\n    $i2 = 0;\n\n    while (($i1 < $n) && ($i2 < $m)) {\n        if ($arr1[$i1] != $arr2[$i2]) {\n            return false;\n        }\n        $i1++;\n        $i2++;\n    }\n\n    return (($i1 == $n) && ($i2 == $m));\n}","language":"php"}
{"task_id":"MBPHP\/651","completion":"    $sum = array_sum($testTup2);\n    foreach ($testTup1 as $key = $val) {\n        if ($val < $sum) {\n            return false;\n        }\n        $sum = $sum - $val;\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/652","completion":"    $list = [];\n    foreach ($testList as $row) {\n        foreach ($row as $cell) {\n            $list[] = $cell;\n        }\n    }\n    return $list;\n}","language":"php"}
{"task_id":"MBPHP\/653","completion":"    $res = array();\n    foreach ($l as $kv) {\n        \/\/ Add key-value pair to result\n        if (count($res[$kv[0]]) == 0) {\n            $res[$kv[0]] = array();\n        }\n        $res[$kv[0]][] = $kv[1];\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/654","completion":"    return $l * 2 + $b * 2;\n}","language":"php"}
{"task_id":"MBPHP\/655","completion":"    $sum = 0;\n    for ($i = 0; $i <= $n; $i++) {\n        $sum += pow($i,5);\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/656","completion":"    $min = $n;\n    foreach ($a as $i = $e) {\n        foreach ($b as $j = $f) {\n            $diff = abs($e - $f);\n            if ($diff < $min) {\n                $min = $diff;\n            }\n        }\n    }\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/657","completion":"    $i = 2;\n    $m = $n % $i;\n    while($m > 0) {\n        $i++;\n        $m = $n % $i;\n    }\n    return $i;\n}","language":"php"}
{"task_id":"MBPHP\/658","completion":"    if (empty($list1)) {\n        return 0;\n    }\n\n    $max = 0;\n    $maxOccurrence = 0;\n    $current = 0;\n    for ($i = 0; $i < count($list1); $i++) {\n        if ($list1[$i] > $max) {\n            $max = $list1[$i];\n            $current = $i;\n        }\n        $count = countOccurrences($list1[$i], $list1);\n        if ($count > $maxOccurrence) {\n            $maxOccurrence = $count;\n            $maxOccurrenceItem = $list1[$i];\n        }\n    }\n\n    return $maxOccurrenceItem;\n}","language":"php"}
{"task_id":"MBPHP\/659","completion":"    $y = [];\n    for ($i = 0; $i < count($x); $i++) {\n        $val = $x[$i];\n        if (! in_array($val, $y)) {\n            $y[] = $val;\n        }\n    }\n    return $y;\n}","language":"php"}
{"task_id":"MBPHP\/660","completion":"    $x = [];\n    $y = [];\n\n    $p1 = round($l1 \/ (1.0 * $r1));\n    $p2 = round($l2 \/ (1.0 * $r2));\n\n    for ($i = $p1; $i <= $p2; $i++) {\n        $x[] = $i;\n        $y[] = $i * $l2 \/ $r2;\n    }\n\n    return $x;\n}","language":"php"}
{"task_id":"MBPHP\/661","completion":"    $max = $arr[0];\n    $maxSoFar = 0;\n    $maxCount = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $sum = 0;\n        for ($j = $i; $j < $n; $j++) {\n            $sum += $arr[$j];\n        }\n        if ($sum > $max) {\n            $max = $sum;\n            $maxSoFar = $sum;\n            $maxCount = 1;\n        } else if ($sum == $max) {\n            $maxCount++;\n        }\n    }\n\n    $max = $max + $max + $max;\n\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/662","completion":"    $sorted = array_values($dict1);\n    $sorted = array_sort($sorted);\n    $sorted = array_keys($sorted);\n\n    $res = array();\n    foreach($sorted as $key) {\n        $res[$key] = $dict1[$key];\n    }\n\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/663","completion":"    $max = 0;\n    for ($i = $x; $i <= $n; $i++) {\n        $m = $i % $y;\n        if ($m > $max) {\n            $max = $m;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/664","completion":"  \/\/ Your code goes here\n  $sum = 0;\n  $i = 0;\n  $n2 = $n;\n  if ($n > 0 && $n % 2 == 0) {\n    for ($i = 0; $i < $n; $i += 2) {\n      $sum += $i;\n    }\n    return $sum \/ $n2;\n  } else {\n    return \"Please pass an even number!\";\n  }\n}","language":"php"}
{"task_id":"MBPHP\/665","completion":"    $last = count($numList);\n    return array_slice($numList, 0, $last - 1);\n}","language":"php"}
{"task_id":"MBPHP\/666","completion":"    return count($string, $char);\n}","language":"php"}
{"task_id":"MBPHP\/667","completion":"    $count = array();\n    $vowel = array();\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i], $vowels)) {\n            if (in_array($string[$i], $vowel)) {\n                $count[$vowel[$i]] += 1;\n            } else {\n                $vowel[] = $string[$i];\n                $count[$string[$i]] = 1;\n            }\n        }\n    }\n    return count($count);\n}","language":"php"}
{"task_id":"MBPHP\/668","completion":"    return preg_replace(\"\/\" . $char . \"\/\", $char, $string);\n}","language":"php"}
{"task_id":"MBPHP\/669","completion":"    $ip = preg_replace('\/^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$\/', '', $ip);\n    return ($ip) ? \"Valid IP address\" : \"Invalid IP address\";\n}","language":"php"}
{"task_id":"MBPHP\/670","completion":"  $len = count($nums);\n  if ($len < 2)\n    return false;\n  $prev = $nums[$len - 1];\n  for ($i = 0; $i < $len - 2; ++$i) {\n    $curr = $nums[$i + 1];\n    if ($curr < $prev)\n      return false;\n    $prev = $curr;\n  }\n  return true;\n}","language":"php"}
{"task_id":"MBPHP\/671","completion":"    $n = bin2dec(substr($n, 0, -1));\n    $res = ($n & 0xfffffffe);\n    return bin2dec($res);\n}","language":"php"}
{"task_id":"MBPHP\/672","completion":"    return max($num1, $num2, $num3);\n}","language":"php"}
{"task_id":"MBPHP\/673","completion":"    $total = 0;\n\n    foreach($list as $key => $value) {\n        $total += $value;\n    }\n\n    return $total;\n}","language":"php"}
{"task_id":"MBPHP\/674","completion":"    $collection = new Collection();\n\n    foreach ($string as $char) {\n        if (is_word($char)) {\n            $collection->push($char);\n        }\n    }\n\n    $string = implode(' ', $collection);\n\n    return $string;\n}","language":"php"}
{"task_id":"MBPHP\/675","completion":"    if ($x + $y > $m && $x + $y < $n) {\n        return 20;\n    }\n\n    return $x + $y;\n}","language":"php"}
{"task_id":"MBPHP\/676","completion":"    $text2 = preg_replace(\"\/[^a-zA-Z0-9]\/\", \"\", $text1);\n    return $text2;\n}","language":"php"}
{"task_id":"MBPHP\/677","completion":"  \/\/ Write your code here.\n}","language":"php"}
{"task_id":"MBPHP\/678","completion":"    $str = preg_replace(\"\/\\s+\/\", \"\", $str1);\n    return $str;\n}","language":"php"}
{"task_id":"MBPHP\/679","completion":"    $value = $ditionary[$key];\n    return $value;\n}","language":"php"}
{"task_id":"MBPHP\/680","completion":"    $incNums = []\n    for ($i = 0; $i < count($nums); $i++) {\n        if ($i == 0) {\n            $incNums[$i] = $nums[$i]\n        }\n        else if ($nums[$i] > $nums[$i - 1]) {\n            $incNums[$i] = $nums[$i] - $nums[$i - 1]\n        } else {\n            $incNums[$i] = 0\n        }\n    }\n    for ($i = 0; $i < count($incNums); $i++) {\n        if ($incNums[$i] == 0) {\n            continue\n        }\n        if ($incNums[$i] != $incNums[$i + 1]) {\n            return false\n        }\n    }\n    return true\n}","language":"php"}
{"task_id":"MBPHP\/681","completion":"    $found = false;\n    for ($i = 2; $i <= $n\/2; $i++) {\n        if ($n % $i == 0) {\n            $found = true;\n            break;\n        }\n    }\n    if ($found) {\n        return $i;\n    } else {\n        return $n;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/682","completion":"    return $nums1.map((index, item) => $nums2[index] * item);\n}","language":"php"}
{"task_id":"MBPHP\/683","completion":"  $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result += $i * $i;\n  }\n  return $result == $n;\n}","language":"php"}
{"task_id":"MBPHP\/684","completion":"    $cnt = 0;\n    if (!empty($str) && !empty($x)) {\n        $cnt = strpos($str, $x) + 1;\n    }\n    return $cnt;\n}","language":"php"}
{"task_id":"MBPHP\/685","completion":"    if ($n < 2) {\n        return 0;\n    }\n\n    $s = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if (isPrime($i)) {\n            $s += $i;\n        }\n    }\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/686","completion":"    if (is_array($testTup)) {\n        return array_group_by($testTup, function($e) {\n            return $e;\n        });\n    } else {\n        return null;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/687","completion":"    if ($b == 0) {\n        return $a;\n    }\n    return recurGcd($b, $a % $b);\n}","language":"php"}
{"task_id":"MBPHP\/688","completion":"    return (real($a) * real($a) + imag($a) * imag($a)) + (real($b) * real($b) + imag($b) * imag($b));\n}","language":"php"}
{"task_id":"MBPHP\/689","completion":"    return minJumpsHelper($arr, $n, $n);\n}","language":"php"}
{"task_id":"MBPHP\/690","completion":"    return $nums;\n}","language":"php"}
{"task_id":"MBPHP\/691","completion":"    $output = array();\n    foreach($testList as $item) {\n        if(!isset($output[$item[1]])) $output[$item[1]] = array();\n        $output[$item[1]][] = $item[0];\n    }\n    return $output;\n}","language":"php"}
{"task_id":"MBPHP\/692","completion":"    $c = ceil($n);\n    $f = floor($n);\n\n    return (strlen($f) >= 2 ? $f : $c) - (strlen($f) >= 2 ? 1 : 0);\n}","language":"php"}
{"task_id":"MBPHP\/693","completion":"    return preg_replace('\/\\s+\/', '', $text1);\n}","language":"php"}
{"task_id":"MBPHP\/694","completion":"    $ret = array();\n    foreach ($testDict as $key => $value) {\n        if (!in_array($key, $ret)) {\n            array_push($ret, $key);\n        }\n        foreach ($value as $subKey) {\n            if (!in_array($subKey, $ret)) {\n                array_push($ret, $subKey);\n            }\n        }\n    }\n    return $ret;\n}","language":"php"}
{"task_id":"MBPHP\/695","completion":"    $testTup1 = array_shift($testTup1);\n    $testTup2 = array_shift($testTup2);\n\n    if (in_array($testTup1, $testTup2)) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/696","completion":"    $newList = array();\n    $list1Size = count($list1);\n    $list2Size = count($list2);\n    if ($list1Size == 0 || $list2Size == 0) {\n        return $newList;\n    }\n    $newList[0] = array_fill(0, $list1Size, $list1[0]);\n    $newList[$list1Size] = array_fill(0, $list2Size, $list2[$list1Size - 1]);\n    for ($i = 1; $i < $list1Size + 1; $i++) {\n        $newList[$i][0] = $list1[$i - 1];\n    }\n    for ($i = 1; $i < $list2Size + 1; $i++) {\n        $newList[$list1Size + 1][$i] = ","language":"php"}
{"task_id":"MBPHP\/697","completion":"    $totalEven = count($arrayNums) - count(filter_array($arrayNums, 'filter', isEven));\n    return $totalEven;\n}","language":"php"}
{"task_id":"MBPHP\/698","completion":"    return array_map(function($tuple) {\n        return sortArray($tuple);\n    }, array_map(function($tuple) {\n        return $tuple => array_product($tuple);\n    }, $testDict));\n}","language":"php"}
{"task_id":"MBPHP\/699","completion":"    $arr1 = $str1.split('');\n    $arr2 = $str2.split('');\n    var count = 0;\n    for ($i = 0; $i < count($arr1); $i++) {\n        if ($arr1[$i] != $arr2[$i]) {\n            $arr1[$i + 1] = $arr1[$i];\n            $arr2[$i + 1] = $arr2[$i];\n            count++;\n        }\n    }\n    return count;\n}","language":"php"}
{"task_id":"MBPHP\/700","completion":"    $return = 0;\n    foreach ($li as $value) {\n        if ($min <= $value && $value <= $max) {\n            $return++;\n        }\n    }\n    return $return;\n}","language":"php"}
{"task_id":"MBPHP\/701","completion":"    if (array_key_exists('max', $arr)) {\n        return array_key_exists('max', $arr) - 1;\n    } else {\n        return -1;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/702","completion":"    $s = $k;\n    $i = $n;\n    while ($s > 0 && $i >= 0) {\n        if ($arr[$i] > $arr[$s - 1]) {\n            $s--;\n        }\n        $i--;\n    }\n    return $s - $n + 1;\n}","language":"php"}
{"task_id":"MBPHP\/703","completion":"    $i = 0;\n    foreach($d as $k => $v){\n        if ($k == $x){\n            return true;\n        }\n        $i++;\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/704","completion":"    if (isset($n) && is_numeric($n) && $n >= 1) {\n        $harmonicSum = 0;\n        $i = 1;\n        $j = 1;\n\n        while ($j <= $n) {\n            $harmonicSum = $harmonicSum + $i;\n            $i = $i + $j;\n            $j++;\n        }\n\n        return $harmonicSum;\n    } else {\n        return 0;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/705","completion":"    if (!is_array($list1)) {\n        return false;\n    }\n\n    $newlist = array();\n    foreach ($list1 as $sublist) {\n        if (is_array($sublist)) {\n            $newlist[] = $sortSublists($sublist);\n        } else {\n            $newlist[] = $sublist;\n        }\n    }\n\n    return $newlist;\n}","language":"php"}
{"task_id":"MBPHP\/706","completion":"    $a = array_slice($arr2, 0, $n);\n    $b = array_slice($arr1, 0, $n);\n    if (array_equal($a, $b)) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/707","completion":"    \/\/ Your code goes here\n}","language":"php"}
{"task_id":"MBPHP\/708","completion":"    \/\/ write your code here\n\n    return $string;\n}","language":"php"}
{"task_id":"MBPHP\/709","completion":"    $result = array();\n\n    foreach ($testList as $val) {\n        $count = 0;\n        foreach ($val as $val2) {\n            if ($result[$val2] !== undefined) {\n                $result[$val2]++;\n            } else {\n                $result[$val2] = 1;\n            }\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/710","completion":"    $testTupLength = count($testTup);\n    if ($testTupLength < 2) {\n        return [];\n    }\n\n    $initial = $testTup[0];\n    $last = $testTup[$testTupLength - 1];\n\n    return array(\n        $initial,\n        $last\n    );\n}","language":"php"}
{"task_id":"MBPHP\/711","completion":"    $digits = $n;\n\n    if(count($digits) % 2 == 0) {\n        $sum = 0;\n        for($i=0; $i<count($digits); $i+=2) {\n            $sum += $digits[$i] * $digits[$i+1];\n        }\n    } else {\n        $sum = $digits[0] * $digits[1];\n    }\n\n    return $sum == $n;\n}","language":"php"}
{"task_id":"MBPHP\/712","completion":"    $list2 = array_filter($list1);\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/713","completion":"    $allTrue = true;\n    foreach ($testTup as $key => $val) {\n        if (!$val) {\n            $allTrue = false;\n            break;\n        }\n    }\n    return $allTrue;\n}","language":"php"}
{"task_id":"MBPHP\/714","completion":"    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($n % $i === 0 && isPrime($i)) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/715","completion":"    $testStr = str_replace(',', ' ', $testStr);\n\n    $testArr = explode(' ', $testStr);\n    $testArr = array_map('intval', $testArr);\n\n    return $testArr;\n}","language":"php"}
{"task_id":"MBPHP\/716","completion":"    $a = abs($a);\n    return (($a * (3 + $a \/ 2) \/ 2) * 2);\n}","language":"php"}
{"task_id":"MBPHP\/717","completion":"    $sum = 0;\n    $count = 0;\n\n    for ($i = 0; $i < count($data); $i++) {\n        $sum += $data[$i];\n        $count++;\n    }\n    $avg = $sum \/ $count;\n\n    foreach ($data as $value) {\n        $square = pow($value - $avg, 2);\n        $sum += $square;\n    }\n    $var = sqrt($sum \/ (count($data) - 1));\n    return $var;\n}","language":"php"}
{"task_id":"MBPHP\/718","completion":"    $result = array();\n    for ($i = 0; $i < count($list1); $i += 2) {\n        $result[$i] = $list1[$i];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/719","completion":"    $aCount = strlen($text) - strpos($text, 'a');\n    if ($aCount > 0) {\n        $bCount = strlen($text) - strpos($text, 'b');\n        if ($bCount > 0) {\n            return \"Found a match!\";\n        }\n    }\n    return \"Not matched!\";\n}","language":"php"}
{"task_id":"MBPHP\/720","completion":"  if (count($testDict) > 0) {\n    return array_merge($testTup, $testDict);\n  } else {\n    return $testTup;\n  }\n}","language":"php"}
{"task_id":"MBPHP\/721","completion":"    $matrix = array();\n    for ($i = 0; $i < $n; $i++) {\n        array_push($matrix, $cost[$i]);\n        $matrix[$i] = array();\n    }\n    $max = $maxaverageofpath($matrix);\n    array_push($matrix, $max);\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/722","completion":"    $output = [];\n    foreach ($students as $name => $data) {\n        if ($data[0] < $h || $data[1] < $w) {\n            continue;\n        }\n        $output[] = $name . \" => \" . $data;\n    }\n    return $output;\n}","language":"php"}
{"task_id":"MBPHP\/723","completion":"    $res = 0;\n    $nums1 = array_filter($nums1);\n    $nums2 = array_filter($nums2);\n    if (count($nums1) === count($nums2)) {\n        $nums1 = sort($nums1);\n        $nums2 = sort($nums2);\n        for ($i = 0; $i < count($nums1); $i++) {\n            if ($nums1[$i] === $nums2[$i]) {\n                $res++;\n            }\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/724","completion":"    $total = 0;\n    while ($power > 0) {\n        $total += $base * ($power % 10);\n        $power \/= 10;\n    }\n    return $total;\n}","language":"php"}
{"task_id":"MBPHP\/725","completion":"    $text = preg_replace('\/\"\/', '\\\\\"', $text1);\n    return str_split($text, '\\\\\"');\n}","language":"php"}
{"task_id":"MBPHP\/726","completion":"  return $testTup;\n}","language":"php"}
{"task_id":"MBPHP\/727","completion":"    preg_match(\"\/[^a-z0-9]\/i\", $s, $matches);\n    return $matches[0];\n}","language":"php"}
{"task_id":"MBPHP\/728","completion":"    $result = [];\n    $max1 = count($lst1);\n    $max2 = count($lst2);\n    $i = 0;\n    $j = 0;\n    for ($i = 0; $i < $max1; $i++) {\n        for ($j = 0; $j < $max2; $j++) {\n            $result[$i * $max2 + $j] = $lst1[$i] + $lst2[$j];\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/729","completion":"    return $nums1.map(function($num) {\n        return $num + $nums2[$nums2.length - 1];\n    });\n}","language":"php"}
{"task_id":"MBPHP\/730","completion":"    $seen = array();\n    $result = array();\n\n    foreach ($nums as $n) {\n        if (!in_array($n, $seen)) {\n            $result[] = $n;\n            $seen[] = $n;\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/731","completion":"    return $r * $r * $h \/ 3;\n}","language":"php"}
{"task_id":"MBPHP\/732","completion":"    $text = preg_replace('\/[\\\\s,\\.]\/', ':', $text);\n    return $text;\n}","language":"php"}
{"task_id":"MBPHP\/733","completion":"  $i = 0;\n  $n = count($a);\n\n  $index = -1;\n\n  while ($i < $n) {\n    if ($a[$i] == $x) {\n      $index = $i;\n      break;\n    }\n    $i++;\n  }\n\n  return $index;\n}","language":"php"}
{"task_id":"MBPHP\/734","completion":"    $sum = 0;\n    $len = count($arr);\n\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $sum += $arr[$i + ($j * $len)];\n        }\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/735","completion":"    $res = 0;\n    $bit = 0;\n    for ($i = 0; $i < 32; $i++) {\n        if ($i != 31) {\n            $bit = ($n & 0x1) << $i;\n            $res = $res | $bit;\n            $n = $n >> 1;\n        }\n    }\n    $bit = $n & 0x1;\n    $res = $res | $bit;\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/736","completion":"  $pos = 0;\n  for ($i = 1; $i < count($a); $i++) {\n    if ($a[$i] < $x) {\n      $pos = $i;\n    }\n  }\n  return $pos;\n}","language":"php"}
{"task_id":"MBPHP\/737","completion":"    return \"Valid\";\n}","language":"php"}
{"task_id":"MBPHP\/738","completion":"    return 1.0 * (1.0 + $n) \/ $n;\n}","language":"php"}
{"task_id":"MBPHP\/739","completion":"    $n = 5;\n    $smallest = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $smallest += $i;\n    }\n    return $smallest \/ ($n * (2 * $n + 1)) + 1;\n}","language":"php"}
{"task_id":"MBPHP\/740","completion":"    $dict = array();\n    for($i=0; $i<count($testTup); $i++){\n        if (count($testTup) - 1 == $i)\n            $dict[$testTup[$i]] = $testTup[$i+1];\n        else\n            $dict[$testTup[$i]] = array();\n    }\n    return $dict;\n}","language":"php"}
{"task_id":"MBPHP\/741","completion":"    $res = true;\n    for ($i=0; $i<strlen($s); $i++) {\n        if ($s[$i] != $s[$i+1]) {\n            $res = false;\n            break;\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/742","completion":"    $height = (3 * $side * $side) \/ 2;\n    return $side * $height;\n}","language":"php"}
{"task_id":"MBPHP\/743","completion":"  return $list1;\n}","language":"php"}
{"task_id":"MBPHP\/744","completion":"  $count = count($testTup);\n  for ($i = 0; $i < $count; $i++) {\n    if ($testTup[$i] == NULL) {\n      return false;\n    }\n  }\n  return true;\n}","language":"php"}
{"task_id":"MBPHP\/745","completion":"    $result = array();\n    $divisors = array();\n    for ($i = $startnum; $i <= $endnum; $i++) {\n        $divisors[] = array($i);\n    }\n    $i = 0;\n    foreach ($divisors as $divisor) {\n        $start = $i;\n        $end = $i + strlen($divisor);\n        $result[$i] = array();\n        while ($start < $end) {\n            $num = $divisor;\n            for ($j = $start; $j < $end; $j++) {\n                $num = $num \/ $divisors[$j];\n            }\n            $result[$i][] = $num;\n            $start++;\n        }\n        $i++;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/746","completion":"    return $r * $a * 3.141592 \/ 360;\n}","language":"php"}
{"task_id":"MBPHP\/747","completion":"    if($n - $o < $m - $o) {\n        return 0;\n    }\n\n    if(($x == $z || $y == $z) && $x != $y) {\n        return 0;\n    }\n\n    if($x == $y) {\n        return 1;\n    }\n\n    if($x == $z) {\n        return 1;\n    }\n\n    if($y == $z) {\n        return 1;\n    }\n\n    if($x[$o] == $y[$o]) {\n        return 1 + lcsOfThree($x, $y, $z, $m, $n, $o + 1);\n    }\n\n    if($x[$n] == $y[$n]) {\n        return 1 + lcsOfThree($x, $y, $z, $m, $n, $","language":"php"}
{"task_id":"MBPHP\/748","completion":"    $str1 = \"Python\";\n    return preg_replace(array('\/[A-Z]\/', \" \"), \" \", $str1);\n}","language":"php"}
{"task_id":"MBPHP\/749","completion":"    $nums = array_map(\"intval\", $numsStr);\n    $nums = array_filter($nums, is_numeric);\n    $nums = array_sort($nums);\n    return $nums;\n}","language":"php"}
{"task_id":"MBPHP\/750","completion":"    $testList[] = $testTup;\n    return $testList;\n}","language":"php"}
{"task_id":"MBPHP\/751","completion":"    return ( ($arr[$i] < $arr[$i + 1] && $i < $arr.length - 2) ||\n              ($arr[$i] > $arr[$i + 1] && $i > 0) );\n}","language":"php"}
{"task_id":"MBPHP\/752","completion":"    $j = 1;\n    $sum = 1;\n\n    for ($i = 2; $i <= $n; $i++) {\n        $j = $j + $i;\n        $sum = $sum + $j;\n    }\n\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/753","completion":"    $result = array();\n    $arr = array_diff(array_merge(array_keys($testList)), array_values($testList));\n    $i = 0;\n    while (isset($arr[$i])) {\n        $result[] = $testList[$arr[$i++]];\n        if ($i == $k) {\n            break;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/754","completion":"    $result = array();\n\n    foreach ($l1 as $key1 => $value1) {\n        foreach ($l2 as $key2 => $value2) {\n            foreach ($l3 as $key3 => $value3) {\n                if ($key1 == $key2 && $key2 == $key3) {\n                    $result[] = $key1;\n                }\n            }\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/755","completion":"    $numbers = array_map('floatval', $numbers);\n    $smallest = min($numbers);\n    $secondSmallest = min(filter($numbers, function($num) {\n        return $num != $smallest;\n    }));\n    if (is_null($secondSmallest)) {\n        return null;\n    }\n    return $smallest == $secondSmallest ? null : $secondSmallest;\n}","language":"php"}
{"task_id":"MBPHP\/756","completion":"    $a = \"a\";\n    $b = \"b\";\n\n    if(preg_match(\"\/^$a+(b)?$\/\", $text)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/757","completion":"    $listSize = count($testList);\n\n    $result = 0;\n    for ($i = 0; $i < $listSize; $i++) {\n        $firstWord = $testList[$i];\n        for ($j = $i + 1; $j < $listSize; $j++) {\n            $secondWord = $testList[$j];\n            if (strstr($firstWord, $secondWord) > 0) {\n                $result++;\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/758","completion":"    $list2 = array();\n    $count = 1;\n    foreach ($list1 as $key1) {\n        $list3 = array();\n        $count1 = 0;\n        foreach ($list1 as $key2) {\n            if ($key2 != $key1) {\n                $list3[] = $key2;\n                $count1++;\n            }\n        }\n        $list2[$key1] = $count1;\n        if ($count1 == 1) {\n            $count++;\n        }\n    }\n    return $list2;\n}","language":"php"}
{"task_id":"MBPHP\/759","completion":"    return preg_match(\"\/^[+-]?\\d+\\.?\\d{2}$\/\", $num);\n}","language":"php"}
{"task_id":"MBPHP\/760","completion":"    if (count($arr) == $n) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/761","completion":"    if ($a <= 180) {\n        return $d \/ 2 * $a * (180 - $a) \/ 360;\n    } else {\n        return null;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/762","completion":"    $days_30 = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"14\", \"16\", \"18\", \"20\", \"22\", \"24\", \"26\", \"28\"];\n    if (in_array($monthnum3, $days_30)) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/763","completion":"  $diff = 9999999;\n  foreach($arr as $num) {\n    if ($num - $n < $diff) $diff = $num - $n;\n  }\n  return $diff;\n}","language":"php"}
{"task_id":"MBPHP\/764","completion":"    $sum = 0;\n\n    foreach ($str as $char) {\n        if (preg_match(\"\/\\d+\/\", $char)) {\n            $sum++;\n        }\n    }\n\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/765","completion":"    $i = 1;\n    $p = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $p = ($i % 2 == 0) ? $p + $i : $p;\n    }\n    return $p;\n}","language":"php"}
{"task_id":"MBPHP\/766","completion":"    $res = array();\n    $res[] = array($l1[0], $l1[0]);\n    $j = 1;\n    for ($i = 1; $i < count($l1); $i++) {\n        if ($l1[$i] != $l1[$j]) {\n            $res[] = array($l1[$i], $l1[$j]);\n            $j++;\n        }\n    }\n    $res[] = array($l1[$i], $l1[$j]);\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/767","completion":"    $s = 0;\n    foreach ($arr as $e) {\n        $s += $e;\n        if ($s == $sum) {\n            return count($arr) - 1;\n        }\n    }\n    return 0;\n}","language":"php"}
{"task_id":"MBPHP\/768","completion":"  return $x % 2 === 1;\n}","language":"php"}
{"task_id":"MBPHP\/769","completion":"  $diff = [];\n  foreach ($li1 as $key = $value) {\n    if ($li2[$key] !== $value) {\n      $diff[] = $value;\n    }\n  }\n  return $diff;\n}","language":"php"}
{"task_id":"MBPHP\/770","completion":"    $s = 1;\n    for($i = 1; $i <= $n; $i++) {\n        $s = $s + pow($i, 4);\n    }\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/771","completion":"    \/\/ Your code goes here\n    return $exp;\n}","language":"php"}
{"task_id":"MBPHP\/772","completion":"    return preg_replace('(?s)\\\\b.{' . $k . '}\\\\b', '', $testStr);\n}","language":"php"}
{"task_id":"MBPHP\/773","completion":"    $text_length = strlen($text);\n    $pattern_length = strlen($pattern);\n\n    $start_pos = 0;\n    $count = 0;\n    while ($start_pos + $pattern_length <= $text_length) {\n        if ($text[$start_pos] == $pattern[0]) {\n            $position_of_pattern = 0;\n            $count = 0;\n            while ($start_pos + $pattern_length + $position_of_pattern <= $text_length && $text[$start_pos + $position_of_pattern] == $pattern[$position_of_pattern]) {\n                $count += 1;\n                $position_of_pattern += 1;\n            }\n            if ($count == $pattern_length) {\n                $array = array($pattern, $start_pos, $start_pos + $pattern_length","language":"php"}
{"task_id":"MBPHP\/774","completion":"    $email = preg_replace(\"\/[^a-zA-Z0-9._-]+@[^a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+\/\", \"Invalid Email\", $email);\n    return $email;\n}","language":"php"}
{"task_id":"MBPHP\/775","completion":"    $length = count($nums);\n    $oddIndex = 0;\n    foreach ($nums as $index = $num) {\n        if ($index % 2 !== 0) {\n            if ($oddIndex % 2 === 0) {\n                return false;\n            }\n            $oddIndex++;\n        }\n    }\n    if ($oddIndex % 2 === 0) {\n        return true;\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/776","completion":"    if (strlen($testStr) < 2) {\n        return 0;\n    }\n\n    $charList = list_split($testStr);\n\n    $vowelCount = 0;\n\n    $currChar = $charList[0];\n    $nextChar = $charList[1];\n\n    if ($currChar == 'a' || $currChar == 'e' || $currChar == 'i' || $currChar == 'o' || $currChar == 'u') {\n        if ($nextChar == 'a' || $nextChar == 'e' || $nextChar == 'i' || $nextChar == 'o' || $nextChar == 'u') {\n            $vowelCount++;\n        }\n    }\n\n    return $vowelCount + countVowels($nextChar);\n}","language":"php"}
{"task_id":"MBPHP\/777","completion":"    $res = 0;\n    $arr = array_slice($arr, 0);\n    foreach ($arr as $k => $i) {\n        if (in_array($i, array_unique($arr)) === false) {\n            $res += $i;\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/778","completion":"    $l = count($list1);\n    $new_list = $list1;\n    $i = 0;\n    $j = 0;\n    while ($i < $l - 1) {\n        if ($new_list[$i] == $new_list[$i + 1]) {\n            $new_list[$i + 1] = $new_list[$i];\n        } else {\n            $i++;\n            if ($i > $j) {\n                $new_list[$j] = $new_list[$i];\n            } else {\n                $new_list[$j] = [$new_list[$i]];\n            }\n            $j++;\n        }\n    }\n    return $new_list;\n}","language":"php"}
{"task_id":"MBPHP\/779","completion":"    $list2 = array();\n    $sub = array();\n    $sub_count = 0;\n    foreach($list1 as $i => $j) {\n        if (! in_array($j, $sub)) {\n            $sub_count++;\n            $list2[] = $sub;\n        }\n        $sub = $j;\n    }\n    $list2[] = $sub;\n    return array_values($list2);\n}","language":"php"}
{"task_id":"MBPHP\/780","completion":"    $result = [];\n    $combinations = getCombinations($testList);\n\n    foreach($combinations as $combination) {\n        foreach($combination as $subCombination) {\n            $result[] = $subCombination;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/781","completion":"    \/\/ your code goes here\n    $i = 2;\n    $count = 0;\n    while($i < $n) {\n        if ($n % $i == 0) {\n            $count++;\n        }\n        $i++;\n    }\n    return $count % 2 == 0 ? \"Even\" : \"Odd\";\n}","language":"php"}
{"task_id":"MBPHP\/782","completion":"    $sum = 0;\n    for ($i = 1; $i < count($arr); $i += 2)\n        $sum += $arr[$i];\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/783","completion":"  $min = min($r, $g, $b);\n  $max = max($r, $g, $b);\n  $delta = $max - $min;\n  $h = 0.0;\n  $s = 0.0;\n  $v = 0.0;\n  if ($max != $min) {\n    $s = $delta \/ $max;\n    $v = $max \/ 255;\n    $delta = $max - $min;\n    if ($max == $r) {\n      $h = ( ( $g - $b ) \/ $delta );\n    } else if ($max == $g) {\n      $h = ( 2 + ( ( $b - $r ) \/ $delta ) );\n    } else if ($max ==","language":"php"}
{"task_id":"MBPHP\/784","completion":"    $sumEven = 0;\n    $sumOdd = 0;\n    $evenLength = count($list1) \/ 2;\n    $oddLength = count($list1) - $evenLength;\n\n    $evenSum = $list1[$evenLength];\n    $oddSum = $list1[$oddLength];\n\n    if ($evenLength % 2 === 1) {\n        $evenSum = $evenSum + $list1[$evenLength - 1];\n    }\n\n    if ($oddLength % 2 === 1) {\n        $oddSum = $oddSum + $list1[$oddLength - 1];\n    }\n\n    $sumEven = $evenSum * $evenLength;\n    $sumOdd = $oddSum * $oddLength;\n\n    $return = $sumEven + $sumOdd;\n\n    return $return;\n}","language":"php"}
{"task_id":"MBPHP\/785","completion":"    if (empty($testStr)) {\n        return $testStr;\n    }\n    $testArr = explode(',', $testStr);\n    return array_map('intval', $testArr);\n}","language":"php"}
{"task_id":"MBPHP\/786","completion":"    $i = 0;\n    for ($i = 0; $i < count($a) && $a[$i] < $x; $i++) {}\n    return $i;\n}","language":"php"}
{"task_id":"MBPHP\/787","completion":"  \/\/ Your code goes here\n}","language":"php"}
{"task_id":"MBPHP\/788","completion":"    $final = [];\n    foreach ($testList as $index => $item) {\n        $final[$index] = $item . ' ' . $testStr;\n    }\n    return $final;\n}","language":"php"}
{"task_id":"MBPHP\/789","completion":"  \/\/ your code here\n  return $s * 3 * $l;\n}","language":"php"}
{"task_id":"MBPHP\/790","completion":"    $even = true;\n    foreach($nums as $key = $num) {\n        if($key % 2 != 0) {\n            $even = false;\n        }\n    }\n    return $even;\n}","language":"php"}
{"task_id":"MBPHP\/791","completion":"    $outArr = array();\n    $outArr = array_walk($testTup, function ($elem, $array_index, $array) {\n        if (array_key_exists($array_index, $array)) {\n            if (is_array($elem)) {\n                if (count($elem) == 1) {\n                    if (is_object($elem)) {\n                        $elem = array_keys($elem);\n                    }\n                } else {\n                    $elem = $elem;\n                }\n                $outArr[$array_index] = $elem;\n            } else {\n                $outArr[$array_index] = $elem;\n            }\n        }\n    });\n\n    return $outArr;\n}","language":"php"}
{"task_id":"MBPHP\/792","completion":"    $inputList = explode(',', $inputList);\n    return count($inputList);\n}","language":"php"}
{"task_id":"MBPHP\/793","completion":"    $pos = $n - 1;\n    if ($x >= $n || $x < 0) {\n        return -1;\n    }\n    if ($pos === 0 || $arr[$pos] <= $x) {\n        return $pos;\n    }\n    while ($pos > 0 && $arr[$pos] > $x) {\n        $pos--;\n    }\n    return $pos + 1;\n}","language":"php"}
{"task_id":"MBPHP\/794","completion":"    if (!preg_match(\"\/(^a.*b$)\/\",$text)) {\n        echo \"Not matched!\";\n    }\n    else {\n        echo \"Found a match!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/795","completion":"    $heap = new Heap_PriorityQueue();\n\n    foreach($items as $item) {\n        $heap-push($item['price'], $item);\n    }\n\n    $res = [];\n    while ($res.length < $n) {\n        $item = $heap->pop();\n        $res[] = $item;\n    }\n\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/796","completion":"    $sum = 0;\n\n    foreach ($dict as $key => $value) {\n        $sum = $sum + $value;\n    }\n\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/797","completion":"    $result = 0;\n    for ($i = $l; $i <= $r; $i++) {\n        $result += $i;\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/798","completion":"    $sum = 0;\n\n    foreach ($arr as $e) {\n        $sum += $e;\n    }\n\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/799","completion":"    \/\/ Your code here\n    return $n;\n}","language":"php"}
{"task_id":"MBPHP\/800","completion":"    return preg_replace('\/[^a-zA-Z0-9 ]\/', '', $text);\n}","language":"php"}
{"task_id":"MBPHP\/801","completion":"    $total = 0;\n\n    for ($i = $x; $i < $y + 1; $i++) {\n        if ($i == $z)\n            continue;\n        if ($i % $z == 0)\n            $total++;\n    }\n\n    return $total;\n}","language":"php"}
{"task_id":"MBPHP\/802","completion":"    $min = min($arr);\n    $max = max($arr);\n    $arr = array_slice($arr, 0, -1);\n    $rot = 0;\n    $temp = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $rot++;\n        $temp = $min;\n        $min = $max;\n        $max = $temp;\n    }\n    $arr[$arr.length - 1] = $min;\n    $arr[0] = $max;\n    return $rot;\n}","language":"php"}
{"task_id":"MBPHP\/803","completion":"    $i = 1;\n    $square = $n;\n    $limit = $n;\n    $isSquare = true;\n\n    while ($square > 0 && $isSquare) {\n        $square = $i * $i;\n        $limit = $n - $square;\n        if ($square > $limit) {\n            $isSquare = false;\n        }\n        $i++;\n    }\n    return $isSquare;\n}","language":"php"}
{"task_id":"MBPHP\/804","completion":"    $sum = 0;\n    for ($i=0; $i < $n; $i++) {\n        $sum += $arr[$i];\n    }\n    $result = $sum == 0 ? true : false;\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/805","completion":"    if (count($lists) == 0) {\n        return false;\n    }\n\n    $maxSum = $lists[0];\n    $maxSumIndex = 0;\n\n    foreach ($lists as $list) {\n        foreach ($list as $sublist) {\n            $sum = 0;\n            foreach ($sublist as $element) {\n                $sum += $element;\n            }\n            if ($sum > $maxSum) {\n                $maxSum = $sum;\n                $maxSumIndex = $list;\n            }\n        }\n    }\n    return $maxSumIndex;\n}","language":"php"}
{"task_id":"MBPHP\/806","completion":"    $strLen = strlen($testStr);\n    $i = 1;\n    $max = 0;\n    foreach ($testStr as $key => $value) {\n        if (strtoupper($testStr[$key + 1]) == strtoupper($value)) {\n            if ($i > $max) {\n                $max = $i;\n            }\n            $i = 1;\n        } else {\n            $i++;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/807","completion":"  return null;\n}","language":"php"}
{"task_id":"MBPHP\/808","completion":"    $tempArr = array_filter(function($e) {\n        return ($e != $k);\n    }, $testTup);\n\n    return count($tempArr) == 0;\n}","language":"php"}
{"task_id":"MBPHP\/809","completion":"    $res = false;\n    foreach ($testTup1 as $key1 => $value1) {\n        foreach ($testTup2 as $key2 => $value2) {\n            if ($value1 < $key2) {\n                $res = true;\n                break;\n            }\n        }\n        if ($res === true) break;\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/810","completion":"  return array_fill(0, $a + $b + $c + $d);\n}","language":"php"}
{"task_id":"MBPHP\/811","completion":"    if (count($testList1) != count($testList2)) {\n        return false;\n    }\n    foreach ($testList1 as $tuple1 => $tuple2) {\n        foreach ($testList2 as $tuple3 => $tuple4) {\n            if ($tuple1 == $tuple3 || $tuple2 == $tuple4) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","language":"php"}
{"task_id":"MBPHP\/812","completion":"    $street = $street.replace(\/,\/g, \" \");\n    $street = str_replace(array(\"Road\", \"Roads\", \"Road Rd\"), \"Rd.\", $street);\n    $street = str_replace(array(\"Street\", \"Streets\", \"Street Rd\"), \"Rd.\", $street);\n    return $street;\n}","language":"php"}
{"task_id":"MBPHP\/813","completion":"    return strlen($str1);\n}","language":"php"}
{"task_id":"MBPHP\/814","completion":"    if ($q < $p) {\n        return 0;\n    }\n    $p += $q;\n    return (rombusArea($p, $q \/ 2) + rombusArea($p, $q \/ 2)) * $q;\n}","language":"php"}
{"task_id":"MBPHP\/815","completion":"    var i,\n        j,\n        x,\n        y,\n        t,\n        z;\n\n    t = 1;\n    for (i = 0; i < $n; i++) {\n        if ($arr[i] !== $arr[i + 1]) {\n            t = 0;\n        }\n    }\n\n    if (t === 1) {\n        return $arr;\n    }\n\n    z = $arr[$n - 1];\n    y = $arr[$n - 2];\n\n    for (i = $n - 1; i > 0; i--) {\n        x = $arr[i];\n        j = i - 1;\n\n        while (j >= 0 && x < $arr[j]) {\n            $arr[j + 1] = $arr[j];\n            j -= 1;\n        }\n\n        $arr[","language":"php"}
{"task_id":"MBPHP\/816","completion":"    $testTup = array_filter(function($elem) use ($testTup) {\n        return array_length($testTup) === 0;\n    }, $testTup);\n    return $testTup;\n}","language":"php"}
{"task_id":"MBPHP\/817","completion":"    $result = array_filter($nums, function($num) {\n        return $num % $m == 0 || $num % $n == 0;\n    });\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/818","completion":"    return count($str) - count(preg_replace(\"\/[a-z]\/\", '', $str));\n}","language":"php"}
{"task_id":"MBPHP\/819","completion":"    $res = [];\n    $new_arr = array_fill(0, 0, count($lists));\n    for ($i = 0; $i < count($lists); $i++) {\n        $new_arr[$lists[$i]]++;\n    }\n    foreach ($new_arr as $key => $count) {\n        if ($count > 1) {\n            $res[$count][] = $key;\n        }\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/820","completion":"    $days = [28, 29, 30, 31];\n\n    return in_array($monthnum1, $days);\n}","language":"php"}
{"task_id":"MBPHP\/821","completion":"    return array_merge($dict1, $dict2);\n}","language":"php"}
{"task_id":"MBPHP\/822","completion":"  $p = str_replace(\"@\", \"\", $p);\n  return (preg_match(\"\/^.{6,32}$\/\", $p) !== null);\n}","language":"php"}
{"task_id":"MBPHP\/823","completion":"  $pattern =  \"\/\\\\b\" . $sample . \"\\\\b\/i\";\n  return preg_match($pattern, $string);\n}","language":"php"}
{"task_id":"MBPHP\/824","completion":"  $ret = array();\n  foreach ($l as $v) {\n    if ($v % 2 != 0)\n      $ret[] = $v;\n  }\n  return $ret;\n}","language":"php"}
{"task_id":"MBPHP\/825","completion":"  \/\/ Your code here.\n}","language":"php"}
{"task_id":"MBPHP\/826","completion":"    \/\/ write your code here\n    \/\/ write your code here\n}","language":"php"}
{"task_id":"MBPHP\/827","completion":"    return sum($list1, function ($x) { return $x[$c]; });\n}","language":"php"}
{"task_id":"MBPHP\/828","completion":"    $alpha = 0;\n    $digs = 0;\n    $spls = 0;\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (strtolower(substr($string, $i, 1)) == 'a' || strtolower(substr($string, $i, 1)) == 'b' || strtolower(substr($string, $i, 1)) == 'c') {\n            $alpha++;\n        }\n        if (strtolower(substr($string, $i, 1)) == 'd' || strtolower(substr($string, $i, 1)) == 'e' || strtolower(substr($string, $i, 1)) == 'f') {\n            $digs++;\n        }\n        if (strtolower(substr($string, $i, 1)) == 'g' || str","language":"php"}
{"task_id":"MBPHP\/829","completion":"    $map = array_count_values($input);\n    $max = max($map);\n    $result = array_keys($map)\n        ->filter(function($i){ return $map[$i] == $max })\n        ->first();\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/830","completion":"    return ceil($a \/ pow(10, $digits)) * pow(10, $digits);\n}","language":"php"}
{"task_id":"MBPHP\/831","completion":"    $c = 0;\n\n    foreach($arr as $k => $v) {\n        if ($v == $n) {\n            $c++;\n        }\n    }\n\n    return $c;\n}","language":"php"}
{"task_id":"MBPHP\/832","completion":"  return $input = preg_replace(\"\/(\\d+)(?=.*\\d)\/\", \"$1\", $input);\n}","language":"php"}
{"task_id":"MBPHP\/833","completion":"    $keys = array();\n    foreach ($dict as $key => $value) {\n        $keys[] = $key;\n    }\n    return $keys;\n}","language":"php"}
{"task_id":"MBPHP\/834","completion":"    $result = [];\n    $m = $n * 2 + 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result[$i - 1] = [];\n        for ($j = 1; $j <= $n; $j++) {\n            $result[$i - 1][$j - 1] = $i * $j;\n        }\n    }\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/835","completion":"    return (array($y2 - $y1, $x2 - $x1 + 0.0)) \/ (array(1, $x2 - $x1));\n}","language":"php"}
{"task_id":"MBPHP\/836","completion":"    if (sizeof($a) < $size) {\n        return null;\n    }\n    $i = 0;\n    $sum = 0;\n    $max = 0;\n    for ($j = 0; $j < $size; $j++) {\n        if ($i < $size) {\n            $sum = $sum + $a[$i];\n        }\n        if ($sum > $max) {\n            $max = $sum;\n        }\n        if ($sum < 0) {\n            $sum = 0;\n            $i++;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/837","completion":"    if ($n <= 0) {\n        return 0;\n    }\n\n    $i = 1;\n    $sum = 0;\n    for ($i = $n; $i <= $n * 3; $i += 2) {\n        $sum = $sum + $i * $i * $i;\n    }\n    return $sum * $sum * $sum;\n}","language":"php"}
{"task_id":"MBPHP\/838","completion":"    \/\/ get the length of both strings\n    $length = strlen($s1) + strlen($s2);\n    \/\/ get a binary representation of both strings\n    $s1 = bin2hex($s1);\n    $s2 = bin2hex($s2);\n    \/\/ create a array of $length - 1 elements\n    $arr = array_fill(0, $length - 1, -1);\n    \/\/ for each element in the binary representation\n    \/\/ get the index of that element in the second string\n    \/\/ increment the value in the array at the index\n    \/\/ return the value of the element in the array\n    $arr = array_map(function($v, $i) {\n        return strpos($s2, $v);\n    }, $s1);\n    \/\/ sort the array in descending order\n    sort($arr, SORT_DESC);\n    \/\/ initialize variables\n    $count = 0;\n    $i = 1;\n    ","language":"php"}
{"task_id":"MBPHP\/839","completion":"    if (is_array($tup)) {\n        $array_new = array();\n        foreach ($tup as $key => $value) {\n            if ($value instanceof Array) {\n                foreach ($value as $k => $v) {\n                    $array_new[$k] = $v;\n                }\n            } else {\n                $array_new[$key] = $value;\n            }\n        }\n        return sort($array_new);\n    }\n}","language":"php"}
{"task_id":"MBPHP\/840","completion":"    if ($a * $a + $b * $b - $c * $c < 0) {\n        return \"No\";\n    }\n    return \"Yes\";\n}","language":"php"}
{"task_id":"MBPHP\/841","completion":"    $arr = array_merge(true, $arr);\n    $count = 0;\n    $len = count($arr);\n    $arr = array_merge(true, $arr);\n\n    for ($i = 0; $i < $len - 1; $i++) {\n        if (is_sorted($arr)) {\n            return 0;\n        }\n\n        $x = $arr[$i];\n        $y = $arr[$i + 1];\n\n        if (inversions($arr, $x, $y) === 1) {\n            $count += 1;\n        }\n    }\n\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/842","completion":"    $occurence = 0;\n    $pos = 0;\n    while ($pos < $arrSize) {\n        $pos = array_search($arr[$pos], $arrSize);\n        if ($pos != false) {\n            $occurence++;\n            if ($occurence % 2 == 1) {\n                return $pos + 1;\n            }\n        }\n        $pos++;\n    }\n    return -1;\n}","language":"php"}
{"task_id":"MBPHP\/843","completion":"    if(!$n || !is_numeric($n) || $n <= 0) {\n        return -1;\n    }\n\n    if(!$primes || !is_numeric($primes[0])) {\n        return -1;\n    }\n\n    $minHeap = new \\Heap\\Heap(function ($a, $b) {\n        return $a - $b;\n    });\n\n    foreach($primes as $prime) {\n        push($minHeap, $prime);\n    }\n\n    for($i = 0; $i < $n; $i++) {\n        if($minHeap[0] === 0) {\n            pop($minHeap);\n            continue;\n        }\n\n        push($minHeap, Math_min($minHeap[0], $minHeap[2]));\n\n        while($minHeap[2] * $minHeap[2] > $minHeap[0]) {\n            pop($min","language":"php"}
{"task_id":"MBPHP\/844","completion":"    $array = array(1, 2, 3, 4, 5, 6, 7, 8);\n    $index = array_search($n, $array);\n    return $k > $array.length ? null : $index != -1 ? $array[$index] : null;\n}","language":"php"}
{"task_id":"MBPHP\/845","completion":"    $s = '';\n    $i = 0;\n    while ($i < $n) {\n        if ($n % $i == 0) {\n            $s .= $i;\n        }\n        ++$i;\n    }\n    return count($s);\n}","language":"php"}
{"task_id":"MBPHP\/846","completion":"    $i = 0;\n    for ($i = 0; $i <= $n; $i++) {\n        if ($arr[$i] < $dep[$i]) {\n            $n = $i - 1;\n            break;\n        }\n    }\n    return $n;\n}","language":"php"}
{"task_id":"MBPHP\/847","completion":"  if (empty($xs)) {\n    return [];\n  }\n  return [$xs[0]];\n}","language":"php"}
{"task_id":"MBPHP\/848","completion":"  \/\/ your code here\n}","language":"php"}
{"task_id":"MBPHP\/849","completion":"    \/\/ $n must be > 1, otherwise you'll get an error\n    $a = array();\n    $i = 1;\n    $sum = 0;\n\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $a[] = $i;\n        }\n        $i++;\n    }\n\n    $i = 0;\n\n    while ($i < count($a)) {\n        if (is_prime($a[$i])) {\n            $sum += $a[$i];\n        }\n        $i++;\n    }\n\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/850","completion":"    \/\/write your code here.\n    \/\/if sum of any two sides is greater than third side.\n    \/\/then triangle is possible.\n    \/\/else triangle is not possible.\n    $sum = ($a + $b + $c);\n    if ($sum > ($a + $c + $b))\n        return true;\n    else\n        return false;\n}","language":"php"}
{"task_id":"MBPHP\/851","completion":"    $i = 1;\n    if ($n < 2) {\n        return $sum;\n    }\n\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $sum += 1 \/ $i;\n            $n = $n \/ $i;\n        } else {\n            $i += 1;\n        }\n    }\n\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/852","completion":"  $newList = array();\n  foreach($numList as $num) {\n    if ($num >= 0) {\n      $newList[] = $num;\n    }\n  }\n  return $newList;\n}","language":"php"}
{"task_id":"MBPHP\/853","completion":"    $res = 0;\n    $f = 2;\n    while ($f * $f <= $n) {\n        if ($n % $f == 0) {\n            $res += $f;\n            while ($n % $f == 0) $n \/= $f;\n        }\n        $f++;\n    }\n    if ($n > 1) $res += $n;\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/854","completion":"    $heap = array_merge( $rawheap, array_fill(0, $rawheap.length, 0) );\n    $heap_size = $heap.length - 1;\n    $heap_size_parent = floor( $heap_size \/ 2 );\n    $heap_size_left = $heap_size - 1;\n\n    while ( $heap_size_parent >= 0 ) {\n        \/\/ move the current element to the end of the heap\n        $heap_size_parent--;\n        $heap[$heap_size_parent] = $heap[$heap_size_parent] - $heap[$heap_size_parent];\n\n        \/\/ fix the heap\n        while ( $heap[$heap_size_parent] < $heap[$heap_size_left] ) {\n            $heap_size_left--;\n            $heap[$heap_size_left] = $heap[$heap_size_left] - $heap","language":"php"}
{"task_id":"MBPHP\/855","completion":"  return $x % 2 === 0;\n}","language":"php"}
{"task_id":"MBPHP\/856","completion":"    $count = 0;\n    $swap = 0;\n    $temp = $arr[0];\n    $i = 0;\n    $len = $arr.length;\n    for (; $i < $len; $i++) {\n        if ($arr[$i] == $temp) {\n            continue;\n        }\n        else {\n            $count++;\n            $swap += $i - ($len - $i - 1);\n        }\n    }\n    return $swap;\n}","language":"php"}
{"task_id":"MBPHP\/857","completion":"    return $list1;\n}","language":"php"}
{"task_id":"MBPHP\/858","completion":"    $counter = 0;\n    foreach ($inputList as $item) {\n        $counter += 1 + countList($item);\n    }\n    return $counter * $counter;\n}","language":"php"}
{"task_id":"MBPHP\/859","completion":"    $subList = [];\n    foreach ($myList as $myElement) {\n        $subList[] = $myList;\n    }\n    return $subList;\n}","language":"php"}
{"task_id":"MBPHP\/860","completion":"    return strpos($string, '@');\n}","language":"php"}
{"task_id":"MBPHP\/861","completion":"    return $texts\n        .map(str => str.split(\"\"))\n        .sort()\n        .map(str => str.join(\"\"))\n        .filter(str => str == $str);\n}","language":"php"}
{"task_id":"MBPHP\/862","completion":"    $words = explode(\" \", $text);\n    $words = array_filter($words);\n\n    $frequency = array();\n    foreach ($words as $key = $value) {\n        $frequency[$value] = $frequency[$value] + 1 || 1;\n    }\n\n    $sorted_frequency = array_values($frequency);\n    sort($sorted_frequency, $value => -$value);\n\n    $n_most_common_words = array();\n    $i = 0;\n    while ($i < $n) {\n        $n_most_common_words[] = $sorted_frequency[$i];\n        $i++;\n    }\n    return $n_most_common_words;\n}","language":"php"}
{"task_id":"MBPHP\/863","completion":"    return array_diff(array_filter(range($n), function ($i) {\n        return count($arr) - $arr[$i] - 1 >= 0;\n    })).length;\n}","language":"php"}
{"task_id":"MBPHP\/864","completion":"    return $texts\n        .map(function ($text) {\n            return str_ireplace($text, $text, str_repeat($text, strlen($text) \/ 2));\n        })\n        .filter(function ($text) {\n            return strcmp($text, $text.toLowerCase()) === 0;\n        });\n}","language":"php"}
{"task_id":"MBPHP\/865","completion":"    return $nums . map(function ($i) {\n        return $i + $n;\n    });\n}","language":"php"}
{"task_id":"MBPHP\/866","completion":"    $monthname = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return (isset($monthname)) && (($monthname2 == $monthname) || ($monthname2 == \"February\"));\n}","language":"php"}
{"task_id":"MBPHP\/867","completion":"    $tempArr = [];\n    $tempArr = $arr;\n    for ($i = 0; $i < count($arr); $i++) {\n        $tempArr[$i] = abs($tempArr[$i] - $n);\n    }\n    return min($tempArr);\n}","language":"php"}
{"task_id":"MBPHP\/868","completion":"  $a = trim($a);\n  $arr = explode(\" \", $a);\n  return strlen($arr[$arr.length - 1]);\n}","language":"php"}
{"task_id":"MBPHP\/869","completion":"    $result = [];\n    for($x = 0; $x < count($list1); $x++) {\n        if(is_array($list1[$x])) {\n            $result[$x] = removeListRange($list1[$x], $leftrange, $rigthrange);\n        } else {\n            if($leftrange < $list1[$x] && $list1[$x] < $rigthrange) {\n                $result[$x] = $list1[$x];\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/870","completion":"    return $nums.filter(function (value) {\n        return value >= 0;\n    }).reduce(function (prev, next) {\n        return prev + next;\n    }, 0);\n}","language":"php"}
{"task_id":"MBPHP\/871","completion":"    return array_diff(string_rotate($string1, -1), string_rotate($string2, 1)) === \"\";\n}","language":"php"}
{"task_id":"MBPHP\/872","completion":"  $temp_list = $list1;\n  while ($temp_list != NULL) {\n    $temp_list2 = $temp_list;\n    if (checkSubset($temp_list2, $list2)) {\n      return true;\n    }\n    $temp_list = $temp_list['next'];\n  }\n  return false;\n}","language":"php"}
{"task_id":"MBPHP\/873","completion":"    return $n < 2 ? $n : fibonacci($n - 1) + fibonacci($n - 2);\n}","language":"php"}
{"task_id":"MBPHP\/874","completion":"    $res = $str1 . $str2;\n\n    return strpos($res, $str2) === strpos($str1, $str2) + strlen($str2);\n}","language":"php"}
{"task_id":"MBPHP\/875","completion":"    $minDiff = 9999999;\n    $tempDiff = 0;\n    $minNum = 0;\n    foreach ($testList as $array) {\n        foreach ($array as $num) {\n            $tempDiff = abs($num - $minNum);\n            if ($tempDiff < $minDiff) {\n                $minDiff = $tempDiff;\n                $minNum = $num;\n            }\n        }\n    }\n    return $minNum;\n}","language":"php"}
{"task_id":"MBPHP\/876","completion":"    return $x * $y \/ gcd($x, $y);\n}","language":"php"}
{"task_id":"MBPHP\/877","completion":"    $res = \"\";\n    $l = strlen($str);\n    for ($i=0; $i<=$l-1; $i++) {\n        for ($j=0; $j<=$l-1-$i; $j++) {\n            if ($str[$j] > $str[$j+1]) {\n                $tmp = $str[$j];\n                $str[$j] = $str[$j+1];\n                $str[$j+1] = $tmp;\n            }\n        }\n    }\n    return $str;\n}","language":"php"}
{"task_id":"MBPHP\/878","completion":"  $count = 0;\n  foreach($testTuple as $num) {\n    if ($num == $k[count]) {\n      ++$count;\n    } else {\n      $count = 0;\n    }\n    if ($count == $k.length) return true;\n  }\n  return false;\n}","language":"php"}
{"task_id":"MBPHP\/879","completion":"    return \"Not matched!\";\n}","language":"php"}
{"task_id":"MBPHP\/880","completion":"    $d = $b * $b - 4 * $a * $c;\n    if ($d < 0) return \"No solutions\";\n    return $d == 0 ? \"1 solution\" : $d + \" solutions\";\n}","language":"php"}
{"task_id":"MBPHP\/881","completion":"    $sumEven = 0;\n    $sumOdd = 0;\n    foreach ($list1 as $num) {\n        if ($num % 2 == 0) {\n            $sumEven = $sumEven + $num;\n        } else {\n            $sumOdd = $sumOdd + $num;\n        }\n    }\n    return $sumEven + $sumOdd;\n}","language":"php"}
{"task_id":"MBPHP\/882","completion":"  return $b * $h;\n}","language":"php"}
{"task_id":"MBPHP\/883","completion":"    return filter(function (num) {\n        return num % $m == 0 && num % $n == 0;\n    }, $nums);\n}","language":"php"}
{"task_id":"MBPHP\/884","completion":"    $n -= $l;\n    $r -= $l;\n    return $n >= 0 && $n <= $r;\n}","language":"php"}
{"task_id":"MBPHP\/885","completion":"    \/\/TODO\n}","language":"php"}
{"task_id":"MBPHP\/886","completion":"    $sum = 0;\n    foreach ($numbers as $num) {\n        $sum = $sum + $num;\n    }\n    return $sum \/ $numbers-count($numbers);\n}","language":"php"}
{"task_id":"MBPHP\/887","completion":"    $odd = $n & 1;\n    return $odd;\n}","language":"php"}
{"task_id":"MBPHP\/888","completion":"    \/\/ Your code goes here\n    \/\/ php: foreach($testTup1 as $testTup1Item => $testTup1Item): foreach($testTup2 as $testTup2Item => $testTup2Item): \/\/ php: $testTup1Item => $testTup1Item, \/\/ php: $testTup2Item => $testTup2Item \/\/ php\n    \/\/ php: }","language":"php"}
{"task_id":"MBPHP\/889","completion":"    if (is_array($lists)) {\n        foreach ($lists as $list) {\n            $list = array_reverse($list);\n        }\n    }\n    return $lists;\n}","language":"php"}
{"task_id":"MBPHP\/890","completion":"  \/\/ Your code here\n}","language":"php"}
{"task_id":"MBPHP\/891","completion":"    $n = countDigits($a) == countDigits($b);\n    return $n;\n}","language":"php"}
{"task_id":"MBPHP\/892","completion":"    $spaces = preg_replace(\"\/\\s+\/\", \" \", $text);\n    return $spaces;\n}","language":"php"}
{"task_id":"MBPHP\/893","completion":"    $ret = array();\n\n    foreach ($lst as $sublist) {\n        $ret[] = $sublist[sizeof($sublist) - 1];\n    }\n\n    return $ret;\n}","language":"php"}
{"task_id":"MBPHP\/894","completion":"    $result = array();\n    $testStr = str_replace(\",\", \"\\\\,\", $testStr);\n    $testStr = str_replace(\".\", \"\\\\.\", $testStr);\n    $testStr = str_replace(\"(\", \"\\\\(\", $testStr);\n    $testStr = str_replace(\")\", \"\\\\)\", $testStr);\n    $testStr = str_replace(\"\\\\-\", \"-\", $testStr);\n    $testStr = str_replace(\"\\\\_\", \"_\", $testStr);\n    $testStr = str_replace(\"\\\\ \", \"\\\\\\\\ \", $testStr);\n    $testStr = str_replace(\"\\\\\\\\\", \"\\\\\\\\\", $testStr);\n    $testStr = str_replace(\" \", \"\\\\ \", $testStr);\n    $testStr = str_replace(\"\\\\(\", \"\\\\(\", $testStr);\n    $testStr = str_replace(\"\\\\)\", \"\\\\)\", $testStr);\n    $test","language":"php"}
{"task_id":"MBPHP\/895","completion":"    $a = array_filter($a);\n    if (empty($a)) return 0;\n\n    $max = $a[0];\n    for ($i = 1; $i < count($a); $i++) {\n        $sum = $a[$i];\n        for ($j = $i - 1; $j >= 0 && $a[$j] < $sum; $j--) {\n            $sum = $sum - $a[$j];\n        }\n        $max = $sum > $max ? $sum : $max;\n    }\n\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/896","completion":"    $result = array();\n\n    for ($i = 0; $i < count($tuples); $i++) {\n        $result[$i] = $tuples[$i][0];\n    }\n\n    $result = $result_sort_list($result);\n\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/897","completion":"    $sentence = str_replace(\" \", \"\", $sentence);\n    $word = str_replace(\" \", \"\", $word);\n    if (strpos($sentence, $word) !== false) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/898","completion":"    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $numbers[$i];\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/899","completion":"    $isSorted = false;\n    for (int $i = 0, $j = $arr.length - 1; $i < $arr.length - 1 && $isSorted === false; $i++, $j--) {\n        if ($arr[$i] === $arr[$j]) {\n            $isSorted = true;\n        } else if ($arr[$i] > $arr[$j]) {\n            $isSorted = false;\n        }\n    }\n    return $isSorted;\n}","language":"php"}
{"task_id":"MBPHP\/900","completion":"  $string = preg_replace(\"\/^\\d{2}-\\d{6,}\/\", \"\", $string);\n  return $string;\n}","language":"php"}
{"task_id":"MBPHP\/901","completion":"    $i = 1;\n    $smallestMultiple = 0;\n\n    while ($i <= $n) {\n        $smallestMultiple += $i;\n        $i++;\n    }\n\n    return $smallestMultiple;\n}","language":"php"}
{"task_id":"MBPHP\/902","completion":"  $result = array();\n  foreach ($d1 as $key => $val1) {\n    if (!isset($val2) || !in_array($key, $d2)) {\n      $result[] = $key . \" => \" . $val1;\n    }\n  }\n  if (isset($d2)) foreach ($d2 as $key => $val2) {\n    if (!isset($val1) || in_array($key, $d1)) continue;\n    $result[] = $key . \" => \" . $val2;\n  }\n  return $result;\n}","language":"php"}
{"task_id":"MBPHP\/903","completion":"    $bitCount = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $bitCount = $bitCount + countBits($i);\n    }\n    return $bitCount;\n}","language":"php"}
{"task_id":"MBPHP\/904","completion":"    return $x % 2 == 0;\n}","language":"php"}
{"task_id":"MBPHP\/905","completion":"    \/\/ initialize sum\n    $sum = 0;\n\n    \/\/ loop from 1 to n\n    for ($i = 1; $i <= $n; $i++) {\n\n        \/\/ loop from 0 to n - 1\n        for ($j = 0; $j <= $n - 1; $j++) {\n\n            \/\/ sum up number of j in i\n            if ($j < $i) {\n                $sum += pow($i - $j, 2);\n            }\n        }\n    }\n\n    \/\/ return the sum\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/906","completion":"    $matches = array();\n    preg_match_all('\/\\d{4}\\-\\d{1,2}\\-\\d{1,2}\/', $url, $matches);\n\n    if (count($matches) > 0) {\n        return $matches[0];\n    } else {\n        return false;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/907","completion":"    $numbers = range(1, $n + 1);\n    shuffle($numbers);\n\n    for ($i = 0; $i < $n; ++$i) {\n        echo $numbers[$i], '<br \/';\n    }\n}","language":"php"}
{"task_id":"MBPHP\/908","completion":"  if (is_array($arr) && is_numeric($n)) {\n    $sum = 0;\n    foreach ($arr as $value) {\n      $sum += $value;\n    }\n\n    if ($n == $sum) {\n      return 0;\n    }\n\n    $index = 0;\n    foreach ($arr as $value) {\n      if ($sum - $n < 0) {\n        return $index;\n      }\n      $sum += $value;\n      $index++;\n    }\n  }\n\n  return -1;\n}","language":"php"}
{"task_id":"MBPHP\/909","completion":"    if (isPalindrome($num)) {\n        return $num;\n    }\n\n    $len = number_format((strlen($num) + 1), $num);\n\n    for ($i = 0; $i < $len \/ 2; $i++) {\n        $numTmp = $num[$i];\n        $num[$i] = $num[$len - $i - 1];\n        $num[$len - $i - 1] = $numTmp;\n    }\n\n    return $num;\n}","language":"php"}
{"task_id":"MBPHP\/910","completion":"    return ($y >= $m && $y <= $m + 9 && $m >= 1 && $d >= 1 && $d <= $m - 1);\n}","language":"php"}
{"task_id":"MBPHP\/911","completion":"    $max1 = -1;\n    $max2 = -1;\n    $max3 = -1;\n\n    foreach($nums as $num) {\n        if ($num < $max1) {\n            $max2 = $max1;\n            $max3 = $max2;\n            $max1 = $num;\n        } else if ($num < $max2) {\n            $max3 = $max2;\n            $max2 = $num;\n        } else if ($num < $max3) {\n            $max3 = $num;\n        }\n    }\n\n    return $max1 * $max2 * $max3;\n}","language":"php"}
{"task_id":"MBPHP\/912","completion":"    $m = abs($m);\n    $ln = $n % $m;\n    $lobbNum = $n - $ln;\n    $m = $m \/ 2;\n    while ($m > 1) {\n        $ln = $ln * 2;\n        $lobbNum = $lobbNum - $ln;\n        $m = $m \/ 2;\n    }\n    return $lobbNum;\n}","language":"php"}
{"task_id":"MBPHP\/913","completion":"    if ($string == '') return false;\n    $last = str_get_digit($string);\n    $string = substr($string, 0, strlen($string) - 1);\n    return $last == str_get_digit($string);\n}","language":"php"}
{"task_id":"MBPHP\/914","completion":"    $cnt = count($s);\n    return $cnt == 2 && $s[0] == $s[1];\n}","language":"php"}
{"task_id":"MBPHP\/915","completion":"    $resultArray = [];\n    $resultArray = $arrayNums.sort((a, b) => (a > 0 && b > 0) || (a < 0 && b < 0));\n\n    return $resultArray;\n}","language":"php"}
{"task_id":"MBPHP\/916","completion":"  $arr = [0, 0, 0];\n  for ($i = 0; $i < $arrSize; $i++) {\n    if ($sum - $a[$i] == $arr[$i] || $sum - $a[$i] == $arr[$i + 1]) {\n      return $arr;\n    }\n    $arr[$i] = $sum - $a[$i];\n  }\n  return false;\n}","language":"php"}
{"task_id":"MBPHP\/917","completion":"    $pattern = \/([A-Z][a-z])|([a-z])\/g;\n    $result = preg_match_all($pattern, $text, $match);\n\n    if (count($match)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/918","completion":"    if (isset($s)) {\n        if ($m == 0) {\n            if ($n == 0) {\n                return 1;\n            } else {\n                return 0;\n            }\n        } else {\n            $m = $m - 1;\n            $n = $n - $s[0];\n            return 1 + coinChange($s, $m, $n);\n        }\n    } else {\n        return 0;\n    }\n}","language":"php"}
{"task_id":"MBPHP\/919","completion":"    if (empty($items)) return false;\n    $answer = 1;\n    foreach($items as $item) {\n        $answer *= $item;\n    }\n    return $answer;\n}","language":"php"}
{"task_id":"MBPHP\/920","completion":"    $resultList = array();\n\n    foreach ($testList as $key = $value) {\n        if ($value == array()) {\n            continue;\n        }\n\n        if ($value == null) {\n            continue;\n        }\n\n        if (count($value) < 3) {\n            continue;\n        }\n\n        $resultList[$key] = $value;\n    }\n\n    return $resultList;\n}","language":"php"}
{"task_id":"MBPHP\/921","completion":"    $res = array();\n    for($i = 0; $i < count($testTup); $i += $n) {\n        $res[] = $testTup[$i];\n    }\n    return $res;\n}","language":"php"}
{"task_id":"MBPHP\/922","completion":"    $max = $arr[0];\n    $min = $arr[0];\n\n    $tmp = 1;\n    for ($i = 0; $i < count($arr); $i++) {\n        $tmp *= $arr[$i];\n\n        if ($tmp > $max) {\n            $max = $tmp;\n        }\n\n        if ($tmp < $min) {\n            $min = $tmp;\n        }\n    }\n\n    return array($max, $min);\n}","language":"php"}
{"task_id":"MBPHP\/923","completion":"    if($x == '' && $y == ''){\n        return 0;\n    }\n    if ($x.length >= $m || $y.length >= $n) {\n        return Math.min(superSeq($x, $y, $m, $n + 1), superSeq($x, $y, $m + 1, $n));\n    }\n\n    $r = 0;\n    for (i = $m - 1; i < $n; i++) {\n        if ($x[i] != $y[i]) {\n            break;\n        }\n        $r++;\n    }\n\n    return $r + (i - $m + 1);\n}","language":"php"}
{"task_id":"MBPHP\/924","completion":"    return ($x > $y)? $x : $y;\n}","language":"php"}
{"task_id":"MBPHP\/925","completion":"    if (count($nums) > 1) {\n        return $nums[0] * $nums[1] * $nums[2];\n    } else {\n        return $nums[0] * $nums[0];\n    }\n}","language":"php"}
{"task_id":"MBPHP\/926","completion":"    $n = abs($n);\n    $m = abs($m);\n    $result = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $result = $result + ($m % $i);\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/928","completion":"    $date = explode('-', $dt);\n    return $date[2] . '-' . $date[0] . '-' . $date[1];\n}","language":"php"}
{"task_id":"MBPHP\/929","completion":"    $count = 0;\n    foreach ($tuplex as $x) {\n        if ($x == $value) {\n            $count++;\n        }\n    }\n    return $count;\n}","language":"php"}
{"task_id":"MBPHP\/930","completion":"    if (preg_match('\/a.*b\/i', $text)) {\n        echo \"Found a match!\";\n    } else {\n        echo \"Not matched!\";\n    }\n}","language":"php"}
{"task_id":"MBPHP\/931","completion":"    $sum = 0;\n\n    for ($i = 1; $i <= $number; $i++) {\n        $sum += $i * $i * $i;\n    }\n\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/932","completion":"    $unique = array_unique($l);\n    return $unique;\n}","language":"php"}
{"task_id":"MBPHP\/933","completion":"    \/\/ your code here\n    return \"\";\n}","language":"php"}
{"task_id":"MBPHP\/934","completion":"    $i = 0;\n    $n -= 1;\n    while ($n > 0) {\n        $i += $m - 1;\n        $n -= 1;\n        $m -= 1;\n    }\n    return $i;\n}","language":"php"}
{"task_id":"MBPHP\/935","completion":"    $sum = 0;\n    for ($i=1; $i<=$number; $i++) {\n        $sum += $i*$i;\n    }\n    return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/936","completion":"    $arr = [];\n    $temp = [];\n\n    foreach($testList as $testArray){\n        $temp = [];\n        for ($i = 0; $i < count($ordList); $i++) {\n            if (in_array($ordList[$i], $testArray)){\n                $temp[] = $ordList[$i];\n            }\n        }\n        if ($temp != []) {\n            $arr[] = $temp;\n        }\n    }\n\n    return $arr;\n}","language":"php"}
{"task_id":"MBPHP\/937","completion":"    $char = array_unique(explode(',', $str1));\n    $count = array();\n\n    foreach ($char as $c) {\n        $count[$c] = $str1.count($c);\n    }\n\n    return max($count);\n}","language":"php"}
{"task_id":"MBPHP\/938","completion":"  \/\/ $a, $b, $c must be sorted.\n  $a = $a - 1;\n  $b = $b - 1;\n  $c = $c - 1;\n  $p = $p - 1;\n  $q = $q - 1;\n  $r = $r - 1;\n\n  $left = 0;\n  $right = $a + $b + $c;\n  $mid = $a + $b + $c + $p + $q + $r;\n\n  $min = $a;\n  $minIndex = 0;\n  $min = $b;\n  $minIndex = 1;\n  $min = $c;\n  $minIndex = 2;\n\n  if ($left < $right) {\n","language":"php"}
{"task_id":"MBPHP\/939","completion":"    return $models.sort(function($a, $b){\n        return $a[\"make\"].localeCompare($b[\"make\"]);\n    });\n}","language":"php"}
{"task_id":"MBPHP\/940","completion":"  if (is_array($arr)) {\n    $heap = $arr;\n\n    \/* This array is just for visualization purpose *\/\n    echo '<pre>';\n    print_r($arr);\n    echo '<\/pre>';\n\n    $size = sizeof($arr);\n    while ($size > 1) {\n      $temp = $heap[0];\n      $heap[0] = $heap[$size - 1];\n      $heap[$size - 1] = $temp;\n\n      $size = $size - 1;\n      \/* heapify down *\/\n      heapify($heap, $size, 0);\n    }\n    return $heap;\n  }\n}","language":"php"}
{"task_id":"MBPHP\/941","completion":"    $counter = 0;\n    foreach($num as $el) {\n        if (is_array($el)) {\n            $counter += countElim($el);\n        } else if (is_array($el) && !is_array($el) && !is_int($el)) {\n            $counter += countElim($el);\n        } else {\n            $counter++;\n        }\n    }\n    return $counter;\n}","language":"php"}
{"task_id":"MBPHP\/942","completion":"    $result = false;\n    foreach ($checkList as $checkItem) {\n        if (in_array($checkItem, $testTup)) {\n            $result = true;\n            break;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/943","completion":"  $list1 = array_reverse($num1);\n  $list2 = array_reverse($num2);\n\n  $list1 = $list1 . array_reverse($list2);\n  return array_reverse($list1);\n}","language":"php"}
{"task_id":"MBPHP\/944","completion":"  $text = preg_replace('\/[^a-z]\/', ' ', $text);\n  $text = trim($text);\n  $text = str_replace(array_unique($text.split(' ')), '', $text);\n  $text = str_replace(array_unique($text.split('')), ' ', $text);\n  $text = str_replace(array_unique($text.split('-')), '', $text);\n  $text = str_replace(array_unique($text.split('_')), '', $text);\n\n  $numbers = $text.split(' ');\n  $numbers = array_filter($numbers);\n  $numbers = array_map('count_chars', $numbers);\n  $numbers = array_map('chr', $numbers);\n\n  $numbers = array_map('str_getcsv', $numbers);\n\n  $numbers = array_map('chr', str_split($numbers, ','));\n  $numbers ","language":"php"}
{"task_id":"MBPHP\/945","completion":"    $set = new Set();\n    foreach ($t as $k => $v) {\n        $set[$v] = $k;\n    }\n    return $set;\n}","language":"php"}
{"task_id":"MBPHP\/946","completion":"    $m = array();\n    $i = 0;\n    $l = strlen($s);\n    if ($l > 0) {\n        while ($i < $l) {\n            $c = count($s, substr($s, $i, $a));\n            $m[$i] = array($s[i], $c);\n            $i++;\n        }\n    }\n    return $m;\n}","language":"php"}
{"task_id":"MBPHP\/947","completion":"    $min = 0;\n    for ($i = 1; $i < count($list1) + 1; $i++) {\n        if ($list1[$i] < $list1[$min]) $min = $i;\n    }\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/948","completion":"    $length = count($tup1);\n    if ($length < 1 || $index > $length) {\n        return false;\n    }\n    if (in_array($index, range($length))) {\n        return $tup1[$index];\n    }\n    return false;\n}","language":"php"}
{"task_id":"MBPHP\/949","completion":"    foreach ($testList as $testItem) {\n        $testItem = preg_split('\/^(\\d+)\/', $testItem);\n        if (strlen($testItem[1]) > 0) {\n            $testItem[0] = explode('', $testItem[0]);\n            $testItem[0] = $testItem[0] + ($testItem[1]);\n            $testItem[0] = str_pad($testItem[0], strlen($testItem[1]), '0');\n        }\n        $testItem[0] = str_pad($testItem[0], strlen($testItem[0]), '0');\n    }\n    $resultList = array();\n    foreach ($testList as $testItem) {\n        $resultList[] = array_values($testItem);\n    }\n    $resultList = sort($resultList);\n    return implode(',', $resultList);\n}","language":"php"}
{"task_id":"MBPHP\/950","completion":"    return 'Unknown';\n}","language":"php"}
{"task_id":"MBPHP\/951","completion":"    $ret = array();\n\n    foreach($testList1 as $idx1 => $item1) {\n        foreach($testList2 as $idx2 => $item2) {\n            if ($idx1 < $idx2) {\n                $diff = $idx2 - $idx1;\n                $max = $item1[0] > $item2[0] ? $item1 : $item2;\n                $ret[$idx1] = array_merge($max, array(array($idx1 - $diff, $max), array($idx2, null)));\n            } else if ($idx1 > $idx2) {\n                $diff = $idx1 - $idx2;\n                $max = $item1[0] > $item2[0] ? $item1 : $item2;\n                $ret[$idx2] = array_merge($max, array(array($idx2","language":"php"}
{"task_id":"MBPHP\/952","completion":"  $f = factorial($r);\n  return $f \/ ($f - 1) * pow($p, $n - $r) % $p;\n}","language":"php"}
{"task_id":"MBPHP\/953","completion":"    if ($n == 0) {\n        echo 1;\n    } else {\n        echo subset($ar, $n - 1);\n        if ($ar[$n - 1] != $ar[$n]) {\n            echo $ar[$n - 1] + 1;\n        }\n    }\n}","language":"php"}
{"task_id":"MBPHP\/954","completion":"    return null;\n}","language":"php"}
{"task_id":"MBPHP\/955","completion":"    $s = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $s = 0;\n            break;\n        }\n    }\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/956","completion":"    \/\/ Your code here\n    $text = preg_replace(\"\/(\\w)([A-Z])\/g\", \"$1|$2|\", $text);\n    $text = preg_replace(\"\/([A-Z])(\\w)\/g\", \"$1|$2|\", $text);\n    return explode('|', $text);\n}","language":"php"}
{"task_id":"MBPHP\/957","completion":"    $pos = 0;\n\n    while (32 > $n) {\n        $n >>= 1;\n        ++$pos;\n    }\n\n    return $pos;\n}","language":"php"}
{"task_id":"MBPHP\/958","completion":"    if (is_numeric($num)) {\n        $res = \"\";\n        $one = \"I\";\n        $five = \"V\";\n        $ten = \"X\";\n        $fifteen = \"L\";\n        $thirty = \"C\";\n        $twenty = \"D\";\n        $hundred = \"M\";\n\n        $num = abs($num);\n\n        if ($num == 0) {\n            $res = \"N\";\n        } else if ($num >= 1 && $num < 5) {\n            $res = $one;\n        } else if ($num >= 5 && $num < 10) {\n            $res = $five;\n        } else if ($num >= 10 && $num < 15) {\n            $res = $ten;\n        } else if ($num ","language":"php"}
{"task_id":"MBPHP\/959","completion":"    return sum($lst) \/ count($lst);\n}","language":"php"}
{"task_id":"MBPHP\/960","completion":"    $w = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $w = $w * $i;\n    }\n    return $w;\n}","language":"php"}
{"task_id":"MBPHP\/961","completion":"    $result = 0;\n    $letters = array('M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I');\n    $numbers = array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n    foreach ($letters as $letter) {\n        $count = count($s, $letter);\n        if ($count >= 1) {\n            foreach ($numbers as $number) {\n                if ($count >= $number) {\n                    $result += $number;\n                    $s = str_replace($letter, '', $s);\n                }\n            }\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/962","completion":"  $sum = 0;\n  for ($i = $l; $i <= $r; $i++) {\n    if ($i % 2 == 0) {\n      $sum += $i;\n    }\n  }\n  return $sum;\n}","language":"php"}
{"task_id":"MBPHP\/963","completion":"  $x, $y, $z = (int) $x, (int) $y, (int) $z;\n  $a = abs($x);\n  $b = abs($y);\n  $c = abs($z);\n  if ($a === 0 || $b === 0 || $c === 0) {\n    return [\"One solution\", $x * $y * $z];\n  }\n  if ($a >= $b) {\n    if ($a >= $c) {\n      return [\"Two solutions\", $x * $y * $z];\n    }\n    return [\"One solution\", $y * $z];\n  }\n  if ($b >= $c) {\n    return [\"Two solutions\", $x * $z];\n  }\n  return [\"One solution\", $x * $y *","language":"php"}
{"task_id":"MBPHP\/964","completion":"    return substr(strlen($s), 0, 1) == '1';\n}","language":"php"}
{"task_id":"MBPHP\/965","completion":"    return $text.\n            replace(\/([A-Z])\/g, \"_$1\").\n            replace(\/^_\/, \"\").\n            toLower();\n}","language":"php"}
{"task_id":"MBPHP\/966","completion":"    $tuple = array_filter(array_merge($tuple1), function($val) {\n        return (array_filter($val, function($v) {\n            return isset($v) && $v !== '' && $v !== null && $v !== '0' && $v !== 'false' && $v !== false && $v !== 'false';\n        }) != false);\n    });\n    return $tuple;\n}","language":"php"}
{"task_id":"MBPHP\/967","completion":"    $vowels = array(\"a\",\"e\",\"i\",\"o\",\"u\");\n    foreach ($vowels as $v) {\n        if (strpos($string, $v) !== false) {\n            return \"accepted\";\n        }\n    }\n    return \"not accepted\";\n}","language":"php"}
{"task_id":"MBPHP\/968","completion":"    return max(0, $n - ($n % $a) - ($n % $b));\n}","language":"php"}
{"task_id":"MBPHP\/969","completion":"    \/\/ TODO\n}","language":"php"}
{"task_id":"MBPHP\/970","completion":"    $min = min($x, $y);\n    return $min;\n}","language":"php"}
{"task_id":"MBPHP\/971","completion":"    $max = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sub1 = $a * $i;\n        $sub2 = $b * ($i + 1);\n        $sub3 = $c * ($n - $i);\n        if ($sub1 < $sub2 && $sub1 < $sub3) {\n            $sub = $sub1;\n        } else if ($sub2 < $sub1 && $sub2 < $sub3) {\n            $sub = $sub2;\n        } else {\n            $sub = $sub3;\n        }\n        if ($sub > $max) {\n            $max = $sub;\n        }\n    }\n    return $max;\n}","language":"php"}
{"task_id":"MBPHP\/972","completion":"    $result = [];\n    foreach ($testTup1 as $key1 => $value1) {\n        $result[$key1] = [];\n        foreach ($testTup2 as $key2 => $value2) {\n            $result[$key1][$key2] = $value1 + $value2;\n        }\n    }\n    return $result;\n}","language":"php"}
{"task_id":"MBPHP\/973","completion":"    $d = (int) $d;\n    $s = str_split($s, '');\n    $s = array_slice($s, $d);\n    $s = implode('', $s);\n    return $s;\n}","language":"php"}
{"task_id":"MBPHP\/974","completion":"    $l = $a[0];\n    $r = $a[1];\n    $s = 0;\n    foreach($a[2] as $i = 2) {\n        $s += $a[$i];\n    }\n    if ($l == 1) {\n        return $s;\n    }\n    if ($l == 2) {\n        return $s + minSumPath([$l, $r]);\n    }\n    $d = minSumPath([$l, $r]);\n    $m = minSumPath([$l, $r, $l - 1, $r - 1]);\n    return $d > $m ? $d : $m;\n}","language":"php"}
