{"task_id":"MBJP\/1","completion":"        int n_row = cost.size();\n        int n_col = cost.get(0).size();\n        if (n_row <= 0 || n_col <= 0) return 0;\n\n        \/\/ Initialize DP matrix\n        int[][] dp = new int[n_row + 1][n_col + 1];\n\n        \/\/ Initialize first row and col with 0\n        for (int i = 0; i < n_row; i++) {\n            dp[i][0] = 0;\n        }\n        for (int j = 0; j < n_col; j++) {\n            dp[0][j] = 0;\n        }\n\n        \/\/ DP for each column\n        for (int j = 1; j < n_col + 1; j++) {\n            for (int i = 1; i < n_row + 1; i++) {\n                int current_row = cost.get(i \n}","language":"java"}
{"task_id":"MBJP\/2","completion":"        int n = testTup1.size();\n\n        Set<Integer> set1 = new HashSet<>();\n        for (int i = 0; i < n; i++) {\n            set1.add(testTup1.get(i));\n        }\n\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < n; i++) {\n            set2.add(testTup2.get(i));\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (set1.contains(testTup2.get(i))) {\n                result.add(testTup2.get(i));\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/3","completion":"        int n_sqrt = (int)Math.sqrt(n);\n        for(int i=2;i<=n_sqrt;i++)\n        {\n            if(n%i==0)\n                return false;\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/4","completion":"        int nLargest = nums.size() - n;\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        for (Integer item : nums) {\n            pq.add(item);\n        }\n\n        List<Integer> largest = new ArrayList<>();\n        for (int i = 0; i < nLargest; ++i) {\n            largest.add(pq.poll());\n        }\n\n        return largest;\n    }\n}","language":"java"}
{"task_id":"MBJP\/5","completion":"        int n2 = n \/ 2;\n\n        int[] ways = new int[n + 1];\n        ways[0] = 1;\n        ways[1] = 1;\n\n        for (int i = 2; i <= n2; i++) {\n            ways[i] = 2 * ways[i - 1] + 2 * ways[i - 2];\n        }\n\n        for (int i = 3; i <= n; i++) {\n            ways[i] = 4 * ways[i - 1] + 4 * ways[i - 2];\n        }\n\n        return ways[n];\n    }\n}","language":"java"}
{"task_id":"MBJP\/6","completion":"        int n = 1;\n        while (a != b) {\n            if ((a & n) != (b & n)) return true;\n            n <<= 1;\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/7","completion":"        return null;\n    }\n}","language":"java"}
{"task_id":"MBJP\/8","completion":"        return nums.stream().map(i -> i * i).collect(Collectors.toList());\n    }\n}","language":"java"}
{"task_id":"MBJP\/9","completion":"        int n = str.length();\n        int result = 0;\n        int index = n - 1;\n        while (index > 0) {\n            if (str.substring(0, index).equals(str.substring(n - index))) {\n                result++;\n                index--;\n            } else {\n                break;\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/10","completion":"        \/\/ write your code here\n        \/\/return  list1.stream().sorted((a,b) -> a-b).limit(n).collect(Collectors.toList());\n        return list1.stream().sorted((a,b) -> b-a).limit(n).collect(Collectors.toList());\n    }\n}","language":"java"}
{"task_id":"MBJP\/11","completion":"        return s.substring(0, s.indexOf(ch)) + s.substring(s.lastIndexOf(ch) + 1, s.length());\n    }\n}","language":"java"}
{"task_id":"MBJP\/12","completion":"        int n = m.size();\n        if (n == 1) {\n            return m;\n        }\n        for (int i = 0; i < n - 1; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (m.get(i).get(0) < m.get(j).get(0)) {\n                    m.get(i).add(0, m.get(j).remove(0));\n                }\n            }\n        }\n        for (int i = 0; i < n - 1; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (m.get(i).get(1) < m.get(j).get(1)) {\n                    m.get(i).add(1, m.get(j).remove(1));\n                \n}","language":"java"}
{"task_id":"MBJP\/13","completion":"        \/\/ your code here\n        Map<Object, Integer> map = new HashMap<>();\n        for (String word : words) {\n            map.put(word, map.getOrDefault(word, 0) + 1);\n        }\n\n        List<List<Object>> res = new ArrayList<>();\n\n        for (Map.Entry<Object, Integer> entry : map.entrySet()) {\n            List<Object> list = new ArrayList<>();\n            list.add(entry.getKey());\n            list.add(entry.getValue());\n            res.add(list);\n        }\n\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/14","completion":"        \/\/write your code here\n        return l * b * h;\n    }\n}","language":"java"}
{"task_id":"MBJP\/15","completion":"        List<String> result = new ArrayList<>();\n        if (text != null) {\n            for (int i = 0; i < text.length(); i++) {\n                char c = text.charAt(i);\n                if (Character.isLowerCase(c)) {\n                    result.add(text.substring(i, i + 1));\n                    i++;\n                }\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/16","completion":"        \/\/ Write your code here\n        String res = \"Not matched!\";\n        String[] s = text.split(\"\");\n        String temp = \"\";\n        for (int i = 0; i < s.length; i++) {\n            if (!temp.equals(s[i])) {\n                temp = s[i];\n                if (s[i].matches(\"[a-z]\")) {\n                    temp = s[i] + \"_\";\n                }\n            } else if (!temp.equals(s[i])) {\n                temp = \"\";\n            } else {\n                continue;\n            }\n            if (temp.length() == 0) {\n                continue;\n            }\n            res = \"Not matched!\";\n            for (int j = i + 1; j < s.length; j++) {\n                if (s[j].matches(\"[a-z]\")) {\n                    res = \"Found a match!\";\n                    break;\n}","language":"java"}
{"task_id":"MBJP\/17","completion":"        int b = (int) Math.pow(a, 2);\n        return 2 * b - a;\n    }\n}","language":"java"}
{"task_id":"MBJP\/18","completion":"        \/\/ Write your code here\n        String result = \"\";\n\n        for (int i = 0; i < string.length(); i++) {\n            if (secondString.indexOf(string.charAt(i)) == -1) {\n                result = result + string.charAt(i);\n            }\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/19","completion":"        Set<Integer> set = new HashSet<>();\n        boolean b1 = false;\n        for (int i = 0; i < arraynums.size(); i++) {\n            if (set.contains(arraynums.get(i))) {\n                b1 = true;\n                break;\n            } else {\n                set.add(arraynums.get(i));\n            }\n        }\n        return b1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/20","completion":"        if (x < 100 || x > 300)\n            return false;\n        int temp = 0;\n        int sum = 0;\n        while (x > 0) {\n            temp = x % 10;\n            sum += (int) Math.pow(temp, 2);\n            x = x \/ 10;\n        }\n        return sum == 1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/21","completion":"        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i <= m; i++) {\n            list.add(i * n);\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/22","completion":"        if (nums == null || nums.size() == 0) {\n            return -1;\n        }\n        HashSet<Integer> set = new HashSet<>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (set.contains(nums.get(i))) {\n                return nums.get(i);\n            }\n            set.add(nums.get(i));\n        }\n        return -1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/23","completion":"        int maxSum = 0;\n        int tempSum = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            for (int j = 0; j < list1.get(i).size(); j++) {\n                tempSum += list1.get(i).get(j);\n            }\n            if (tempSum > maxSum) {\n                maxSum = tempSum;\n            }\n            tempSum = 0;\n        }\n        return maxSum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/24","completion":"        int res = 0;\n        int n = 0;\n        int p = 1;\n        int r = binary;\n        while (r != 0) {\n            n = r % 10;\n            res += n * p;\n            p = p * 2;\n            r \/= 10;\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/25","completion":"        HashSet<Integer> set = new HashSet<>();\n\n        for (int i = 0; i < n; i++) {\n            if (!set.contains(arr.get(i))) {\n                set.add(arr.get(i));\n            } else {\n                return arr.get(i);\n            }\n        }\n        return -1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/26","completion":"        \/\/ your code here\n        \/*\n        for (int i = 0; i < testList.size(); i++) {\n            if (testList.get(i).size() != k) {\n                return false;\n            }\n        }\n        return true;\n        *\/\n\n        int count = 0;\n        for (int i = 0; i < testList.size(); i++) {\n            if (testList.get(i).size() == k) {\n                count++;\n            }\n        }\n\n        return count == testList.size();\n    }\n}","language":"java"}
{"task_id":"MBJP\/27","completion":"        for (String s : list) {\n            String[] parts = s.split(\"\");\n            for (int i = 0; i < parts.length; i++) {\n                if (Character.isDigit(parts[i].charAt(0))) {\n                    parts[i] = \"\";\n                }\n            }\n            String s1 = String.join(\"\", parts);\n            list.set(list.indexOf(s), s1);\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/28","completion":"        if (k < 0 || k > n)\n            return 0;\n        if (k > n - k)\n            k = n - k;\n        int coeff = 1;\n        for (int i = 0; i < k; i++)\n            coeff *= (n - i);\n        for (int i = 1; i <= i; i++)\n            coeff \/= i;\n        return coeff;\n    }\n}","language":"java"}
{"task_id":"MBJP\/29","completion":"        Map<Integer, Integer> occurrenceMap = new HashMap<Integer, Integer>();\n        for (int i = 0; i < arrSize; i++) {\n            int currentElement = arr.get(i);\n            if (occurrenceMap.containsKey(currentElement)) {\n                int count = occurrenceMap.get(currentElement);\n                occurrenceMap.put(currentElement, count + 1);\n            } else {\n                occurrenceMap.put(currentElement, 1);\n            }\n        }\n\n        for (int key : occurrenceMap.keySet()) {\n            int value = occurrenceMap.get(key);\n            if (value % 2 != 0) {\n                return key;\n            }\n        }\n\n        return -1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/30","completion":"        int i, j, result;\n        result = 0;\n        if (s.length() == 0)\n            return result;\n        int len = s.length();\n        int temp = 1;\n        for (i = 0; i < len - 1; i++) {\n            for (j = i + 1; j < len; j++) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    temp++;\n                } else {\n                    break;\n                }\n            }\n            if (temp == 2) {\n                result++;\n            }\n            temp = 1;\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/31","completion":"        \/\/ write your code here\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(k, Collections.reverseOrder());\n        int count = 1;\n        for (List<Integer> num : nums) {\n            for (int numi : num) {\n                maxHeap.offer(numi);\n                if (count == k) {\n                    maxHeap.poll();\n                }\n                count++;\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        while (!maxHeap.isEmpty()) {\n            ans.add(maxHeap.poll());\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n}","language":"java"}
{"task_id":"MBJP\/32","completion":"        int max = n;\n\n        for (int i = 2; i <= max; i++) {\n            if (max % i == 0) {\n                max \/= i;\n            }\n        }\n\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/33","completion":"        String s = Integer.toBinaryString(n);\n        while (s.length() < 8) {\n            s = \"0\" + s;\n        }\n        return Integer.parseInt(s, 2);\n    }\n}","language":"java"}
{"task_id":"MBJP\/34","completion":"        int mid = n\/2;\n        int temp = ar.get(mid);\n        int i = 1;\n        for(int j = 0; j < ar.size(); j++) {\n            if(ar.get(j) == temp)\n                i++;\n        }\n        return temp - i;\n    }\n}","language":"java"}
{"task_id":"MBJP\/35","completion":"        int[][] rectNum = new int[n + 1][n + 1];\n\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                rectNum[i][j] = (j * (i + 1)) + (rectNum[i][j - 1] || 0);\n            }\n        }\n\n        return rectNum[n][n];\n    }\n}","language":"java"}
{"task_id":"MBJP\/36","completion":"        long a = p \/ (long) (10 ** (n-1));\n        long b = q \/ (long) (10 ** (n-1));\n        long c = 10 ** (n-1);\n        long d = b * c;\n        long e = b % (long) (10 ** (n-1));\n        return (int) ((d + a * e) % 10);\n    }\n}","language":"java"}
{"task_id":"MBJP\/37","completion":"        if (mixedList == null) {\n            return null;\n        }\n\n        Collections.sort(mixedList, new Comparator<Object>() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                if (o1 instanceof String && o2 instanceof String) {\n                    return ((String)o1).compareToIgnoreCase((String)o2);\n                } else if (o1 instanceof Integer && o2 instanceof Integer) {\n                    return ((Integer)o1).compareTo(o2);\n                } else if (o1 instanceof String && o2 instanceof Integer) {\n                    return ((String)o1).compareToIgnoreCase((Integer)o2);\n                } else if (o1 instanceof Integer && o2 instanceof String) {\n                    return ((Integer)o1).compareToIgnoreCase((String)o2);\n                } else {\n                    return 0;\n                }\n            }\n        });\n        return mixedList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/38","completion":"        int even = 0;\n        int odd = 0;\n\n        for (Integer i : list1) {\n            if (i % 2 == 0) {\n                even += i;\n            } else {\n                odd += i;\n            }\n        }\n        return even \/ odd;\n    }\n}","language":"java"}
{"task_id":"MBJP\/39","completion":"        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                char[] arr = s.toCharArray();\n                char temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                return String.valueOf(arr);\n            }\n            i++;\n            j--;\n        }\n        return s;\n    }\n}","language":"java"}
{"task_id":"MBJP\/40","completion":"        HashMap<Integer, Integer> freqMap = new HashMap<>();\n        for (List<Integer> list : nums) {\n            int sum = 0;\n            for (int i : list) {\n                sum += i;\n            }\n            int freq = Collections.frequency(list, sum);\n            freqMap.put(sum, freq);\n        }\n        return freqMap;\n    }\n}","language":"java"}
{"task_id":"MBJP\/41","completion":"        return nums.stream()\n                .filter(x -> x % 2 == 0)\n                .collect(Collectors.toList());\n    }\n}","language":"java"}
{"task_id":"MBJP\/42","completion":"        int sum = 0;\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (map.containsKey(arr.get(i))) {\n                int k = map.get(arr.get(i));\n                int temp = k + 1;\n                map.put(arr.get(i), temp);\n                sum = sum + (k * arr.get(i));\n            } else {\n                map.put(arr.get(i), 1);\n                sum = sum + arr.get(i);\n            }\n        }\n        System.out.println(sum);\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/43","completion":"        String regex = \"[a-z]+_[a-z]+\";\n        String result = \"Not matched!\";\n\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(text);\n\n        if (matcher.find()) {\n            result = \"Found a match!\";\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/44","completion":"        if(text.contains(\"python\") && text.startsWith(\"python\")) {\n            return \"Found a match!\";\n        } else {\n            return \"Not matched!\";\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/45","completion":"        int gcd = 1;\n        int min = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n            int n = l.get(i);\n            if (n < min) {\n                gcd = n;\n                min = n;\n            } else if (n % min != 0) {\n                gcd = min;\n            }\n        }\n        return gcd;\n    }\n}","language":"java"}
{"task_id":"MBJP\/46","completion":"        HashSet<Integer> hs = new HashSet<>();\n        for (Integer i : data) {\n            hs.add(i);\n        }\n        return hs.size() == data.size();\n    }\n}","language":"java"}
{"task_id":"MBJP\/47","completion":"        int x = b;\n        int y = 1;\n        while (x >= 10) {\n            x = x \/ 10;\n            y = y * 10;\n        }\n        if (a >= b) {\n            x = a \/ b;\n        } else {\n            x = a % b;\n        }\n        return x % 10;\n    }\n}","language":"java"}
{"task_id":"MBJP\/48","completion":"        \/\/code here\n        return n | ((n - 1) & ~(n - 1));\n    }\n}","language":"java"}
{"task_id":"MBJP\/49","completion":"        \/\/ write your code here\n        return null;\n    }\n}","language":"java"}
{"task_id":"MBJP\/50","completion":"        List<Object> result = new ArrayList<>();\n        inputList.stream()\n                .map(list -> (Object)list)\n                .forEach(list -> {\n                    int min = list.get(0);\n                    for (int i = 1; i < list.size(); i++) {\n                        if (list.get(i) < min) {\n                            min = list.get(i);\n                        }\n                    }\n                    result.add(min);\n                });\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/51","completion":"        if(x == y && y == z)\n            return true;\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/52","completion":"        return b*h;\n    }\n}","language":"java"}
{"task_id":"MBJP\/53","completion":"        if (str.length() > 1 && str.substring(0, 1).equals(str.substring(str.length() - 1)))\n            return \"Equal\";\n        return \"Not Equal\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/54","completion":"        List<Integer> sortedList = new ArrayList<>(myList);\n        Integer[] arr = new Integer[myList.size()];\n        for (int i = 0; i < myList.size(); i++) {\n            arr[i] = myList.get(i);\n        }\n        \/\/ find maximum element\n        int max = Collections.max(myList);\n        \/\/ create a new array to store count of each element\n        int[] countArr = new int[max + 1];\n        \/\/ store the count of each element in countArr\n        for (int i = 0; i < myList.size(); i++) {\n            countArr[myList.get(i)]++;\n        }\n        \/\/ copy countArr to arr\n        for (int j = 0; j < countArr.length; j++) {\n            arr[countArr[j]] = j;\n        }\n        \/\/ copy arr to sortedList\n        for (int k = 0; k < arr.length;\n}","language":"java"}
{"task_id":"MBJP\/55","completion":"        return n == 1 ? a : r * tnGp(a, n-1, r);\n    }\n}","language":"java"}
{"task_id":"MBJP\/56","completion":"        int temp = 0;\n        while (n != 0) {\n            temp = (temp * 10) + n % 10;\n            n = n \/ 10;\n        }\n\n        return n == temp \/ 2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/57","completion":"        int len = arr.size();\n        int max = 0;\n        for (int i = 0; i < len; i++) {\n            max += arr.get(i) * (int) Math.pow(10, (len - 1 - i));\n        }\n        int n_max = 0;\n        for (int i = n; i < max; i++) {\n            n_max += i;\n        }\n        return n_max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/58","completion":"        return (x * y < 0) || (x * y > 0);\n    }\n}","language":"java"}
{"task_id":"MBJP\/59","completion":"        int res=0;\n        int temp=n;\n        while(n!=0){\n            res+=n*Math.pow(3,n-1);\n            n--;\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/60","completion":"        \/\/ Write your code here\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        int max = 1;\n        int i = 0;\n        while (i < n && arr2[i] == arr1[i]) {\n            i++;\n            max++;\n        }\n        int temp = i;\n        int count = 1;\n        while (i < n) {\n            while (arr2[i] == arr1[i]) {\n                i++;\n                count++;\n            }\n            if (count > max) {\n                max = count;\n            }\n            count = 1;\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/61","completion":"        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = i; j < s.length(); j++) {\n                int sum = 0;\n                for (int k = i; k <= j; k++) {\n                    sum = sum + s.charAt(k) - '0';\n                }\n                if (sum == n) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/62","completion":"        int min = xs.get(0);\n        for (int x : xs) {\n            if (x < min) {\n                min = x;\n            }\n        }\n        return min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/63","completion":"        List<Integer> firstTuple = testList.get(0);\n\n        if (firstTuple.size() < 2) {\n            return 0;\n        }\n\n        int firstMax = firstTuple.get(0);\n        int secondMax = firstTuple.get(1);\n        int difference = Math.abs(firstMax - secondMax);\n\n        for (int i = 1; i < testList.size(); i++) {\n            List<Integer> tuple = testList.get(i);\n\n            if (tuple.get(0) > firstMax) {\n                firstMax = tuple.get(0);\n            }\n\n            if (tuple.get(1) > secondMax) {\n                secondMax = tuple.get(1);\n            }\n\n            difference = Math.max(difference, Math.abs(firstMax - secondMax));\n        }\n\n        return difference;\n    }\n}","language":"java"}
{"task_id":"MBJP\/64","completion":"        subjectmarks.sort(\n                (a, b) -> ((Integer) a.get(1))\n                        .compareTo(\n                                ((Integer) b.get(1))));\n        return subjectmarks;\n    }\n}","language":"java"}
{"task_id":"MBJP\/65","completion":"        int sum = 0;\n        if (dataList.size() == 0)\n            return 0;\n        Object element = dataList.get(0);\n        if (element instanceof List) {\n            List<Object> dataSubList = (List<Object>) element;\n            sum = sum + recursiveListSum(dataSubList);\n        } else {\n            sum = sum + (Integer) element;\n        }\n        dataList.remove(0);\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/66","completion":"        int count = 0;\n        for (Integer i : list) {\n            if (i > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/67","completion":"        int[] bell = new int[n+1];\n        bell[0] = 1;\n        bell[1] = 1;\n\n        for (int i = 2; i <= n; i++) {\n            for (int j = 1; j <= i\/2; j++) {\n                bell[i] += bell[j] * bell[i-j];\n            }\n        }\n        return bell[n];\n    }\n}","language":"java"}
{"task_id":"MBJP\/68","completion":"        \/\/ Write your code here\n        int count = 0;\n        for(int i = 0; i < a.size() - 1; i++) {\n            if(a.get(i) > a.get(i+1)) {\n                count++;\n            }\n        }\n        if(count == 0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/69","completion":"        if (s.size() > l.size())\n            return false;\n\n        Iterator<Integer> it = l.iterator();\n        while (it.hasNext()) {\n            Integer i = it.next();\n            if (!s.contains(i))\n                return false;\n        }\n\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/70","completion":"        List<Integer> temp = new ArrayList<>();\n        for(int i = 0; i < k; i++)\n            temp.add(0);\n        for(int i = 0; i < input.size(); i++) {\n            int j = 0;\n            while(j < temp.size() && temp.get(j) < input.get(i).size()) {\n                j++;\n            }\n            temp.add(j, input.get(i).size());\n        }\n        int count = 0;\n        for(int i = 0; i < temp.size(); i++)\n            if(temp.get(i) == temp.get(i + 1))\n                count++;\n        if(count == temp.size() - 1)\n            return \"All tuples have same length\";\n        else\n            return \"All tuples do not have same length\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/71","completion":"        int gap = nums.size();\n        int n = 1;\n        while (gap != 1) {\n            gap = (gap \/ n) + 1;\n            n = n * 10;\n        }\n\n        int[] count = new int[n];\n\n        for (int i = 0; i < nums.size(); i++) {\n            count[nums.get(i) \/ n]++;\n        }\n        \n        List<Integer> temp = new ArrayList<>();\n        \n        for (int i = 1; i < n; i++) {\n            count[i] = count[i] + count[i - 1];\n        }\n\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            temp.add(count[nums.get(i) \/ n]--);\n        }\n\n        for (int i = 0; i < temp.size(); i++) {\n\n}","language":"java"}
{"task_id":"MBJP\/72","completion":"        long temp = (long)Math.sqrt(n);\n        long square_root = (long)Math.sqrt(temp);\n        return n == square_root * square_root;\n    }\n}","language":"java"}
{"task_id":"MBJP\/73","completion":"        String regEx = \"\\\\s*[\\\\*\\\\-\\\\+]\\\\s*\";\n        List<String> strList = new ArrayList<>();\n        String[] arrOfStr = text.split(regEx);\n        for (int i = 0; i < arrOfStr.length; i++) {\n            strList.add(arrOfStr[i]);\n        }\n        return strList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/74","completion":"        if (colors.size() == 0 || colors.size() != patterns.size()) {\n            return false;\n        }\n        int colorIndex = 0;\n        int patternIndex = 0;\n        while (colorIndex < colors.size() && patternIndex < patterns.size()) {\n            if (colors.get(colorIndex).equals(patterns.get(patternIndex))) {\n                patternIndex++;\n            }\n            colorIndex++;\n        }\n        if (colorIndex == colors.size() && patternIndex == patterns.size()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/75","completion":"        \/\/ write your code here\n        Set<List<Integer>> result = new HashSet<>();\n        for (List<Integer> l : testList) {\n            if (l.size() < k) {\n                continue;\n            }\n            List<Integer> temp = new ArrayList<>(l);\n            temp.remove(temp.size() - 1);\n            for (List<Integer> r : testList) {\n                if (r.size() < k) {\n                    continue;\n                }\n                List<Integer> temp2 = new ArrayList<>(r);\n                temp2.remove(temp2.size() - 1);\n                if (temp2.equals(temp)) {\n                    result.add(temp2);\n                }\n            }\n        }\n        if (result.size() > 0) {\n            return \"[\" + result.toString() + \"]\";\n        } else {\n            return \"\";\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/76","completion":"        int answer = 0;\n        for (int i = m; i <= n; i++) {\n            for (int j = m; j <= n; j++) {\n                answer += (i + j) * (i - j);\n            }\n        }\n        return answer;\n    }\n}","language":"java"}
{"task_id":"MBJP\/77","completion":"        int evenSum=0, oddSum=0;\n\n        while(n>0){\n            int rem=n%10;\n            if(rem%2==0) evenSum+=rem;\n            else oddSum+=rem;\n            n\/=10;\n        }\n\n        return oddSum == evenSum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/78","completion":"        int count = 0;\n        while (n != 0) {\n            if (n % 2 != 0) {\n                count += 1;\n            }\n            n = n >> 1;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/79","completion":"        return s.length() % 2 != 0 ? true : false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/80","completion":"        return Math.pow(3, n) \/ 6;\n    }\n}","language":"java"}
{"task_id":"MBJP\/81","completion":"        List<List<Integer>> output = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n        for (int i = 0; i < testTup1.size(); i++) {\n            temp.add(testTup1.get(i));\n            temp.add(testTup2.get(i));\n            output.add(temp);\n            temp = new ArrayList<>();\n        }\n        return output;\n    }\n}","language":"java"}
{"task_id":"MBJP\/82","completion":"        return 4.0 \/ 3.0 * Math.PI * (r * r * r);\n    }\n}","language":"java"}
{"task_id":"MBJP\/83","completion":"        return \"\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/84","completion":"        int counter = 1;\n        int count = 0;\n        while (counter <= n) {\n            if (n == count) {\n                return count;\n            }\n            count++;\n            counter++;\n            System.out.println(count);\n        }\n        return n;\n\n    }\n}","language":"java"}
{"task_id":"MBJP\/85","completion":"        return (4*3.14*r*r*r)\/3;\n    }\n}","language":"java"}
{"task_id":"MBJP\/86","completion":"        return n * ((2 * n) - 1) + ((n * (n - 1)) \/ 2);\n    }\n}","language":"java"}
{"task_id":"MBJP\/87","completion":"        HashMap<String, String> mergedDict = new HashMap<>();\n\n        mergedDict.putAll(dict1);\n\n        for (String key: dict2.keySet()) {\n            mergedDict.put(key, dict2.get(key));\n        }\n\n        for (String key: dict3.keySet()) {\n            mergedDict.put(key, dict3.get(key));\n        }\n\n        return mergedDict;\n    }\n}","language":"java"}
{"task_id":"MBJP\/88","completion":"        HashMap<Integer, Integer> freqMap = new HashMap<Integer, Integer>();\n\n        if (list1.size() == 0) {\n            return freqMap;\n        }\n        int freq = 1;\n        for (int i = 0; i < list1.size(); i++) {\n            if (!freqMap.containsKey(list1.get(i))) {\n                freqMap.put(list1.get(i), freq);\n            } else {\n                freqMap.put(list1.get(i), freqMap.get(list1.get(i)) + 1);\n            }\n        }\n        return freqMap;\n    }\n}","language":"java"}
{"task_id":"MBJP\/89","completion":"        int a = n;\n        if(n % 2 == 0) {\n            a += 1;\n        }\n        int b = Math.abs(n % 2 == 0 ? n - 1 : n);\n        while(a != b) {\n            if(a > b) {\n                a -= b;\n            } else {\n                b -= a;\n            }\n        }\n        return a;\n    }\n}","language":"java"}
{"task_id":"MBJP\/90","completion":"        int maxLength = 0;\n        for (String str : list1) {\n            if (str.length() > maxLength) {\n                maxLength = str.length();\n            }\n        }\n        return maxLength;\n    }\n}","language":"java"}
{"task_id":"MBJP\/91","completion":"        List<Integer> positions = new ArrayList<>();\n        for (int i = 0; i < str1.size(); i++) {\n            if (str1.get(i).contains(subStr)) {\n                positions.add(i);\n            }\n        }\n        return positions.size() == 1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/92","completion":"        int len = n.length();\n        for (int i = 1; i < len; i++) {\n            if (n.charAt(i) < n.charAt(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/93","completion":"        return a * b;\n    }\n}","language":"java"}
{"task_id":"MBJP\/94","completion":"        \/\/ code here\n        int min = Integer.MAX_VALUE;\n        for(int i=0; i<testList.size(); i++){\n            if(testList.get(i).get(1)<min)\n                min = testList.get(i).get(1);\n        }\n        for(int i=0; i<testList.size(); i++){\n            if(min==testList.get(i).get(1))\n                return testList.get(i).get(0).toString();\n        }\n        return null;\n    }\n}","language":"java"}
{"task_id":"MBJP\/95","completion":"        int n = lst.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int s = lst.get(i).size();\n            int subMin = s;\n            for (int j = i+1; j < n; j++) {\n                subMin = Math.min(subMin, lst.get(j).size());\n            }\n            min = Math.min(min, subMin);\n        }\n        return min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/96","completion":"        int sum = 0;\n        for (int i = 1; i <= n \/ 2; i++) {\n            if (n % i == 0) {\n                sum++;\n            }\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/97","completion":"        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (List<Integer> list : list1) {\n            for (int i = 0; i < list.size(); i++) {\n                Integer value = map.get(list.get(i));\n                if (value != null) {\n                    map.put(list.get(i), value + 1);\n                } else {\n                    map.put(list.get(i), 1);\n                }\n            }\n        }\n        return map;\n    }\n}","language":"java"}
{"task_id":"MBJP\/98","completion":"        double ans = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            ans *= numbers.get(i);\n        }\n        return ans \/ numbers.size();\n    }\n}","language":"java"}
{"task_id":"MBJP\/99","completion":"        StringBuilder sb = new StringBuilder();\n        if (n < 0) {\n            sb.append(\"-\");\n            n *= -1;\n        }\n        while (n > 0) {\n            sb.append(n % 2);\n            n \/= 2;\n        }\n        sb.reverse();\n        return sb.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/100","completion":"        int numInReversedDigits = reverseDigits(num);\n        int palindrome = 0;\n        for (int i = numInReversedDigits; i >= 1; i--) {\n            palindrome = palindrome * 10 + i;\n            if (palindrome <= num) {\n                return palindrome;\n            }\n        }\n        return palindrome * 10 + 1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/101","completion":"        if (n < 1 || k < 1 || arr.size() < n)\n            return -1;\n        if (n == 1)\n            return arr.get(0);\n        if (k >= arr.size() - n + 1)\n            return arr.get(arr.size() - 1);\n        int pos = 1;\n        for (int i = 0; i < n; i++)\n            pos += arr.get(i);\n        pos = pos \/ n;\n        int start = 0, end = n - 1;\n        while (start <= end) {\n            int mid = start + (end - start) \/ 2;\n            if (pos == mid)\n                return arr.get(mid);\n            if (pos > mid)\n                start = mid + 1;\n            else\n                end = mid - 1;\n        }\n        return arr.get(start \n}","language":"java"}
{"task_id":"MBJP\/102","completion":"        if (word.equals(\"\")) {\n            return word;\n        } else if (word.length() == 1) {\n            return word.toLowerCase();\n        }\n        String[] str = word.split(\"_\");\n        String result = \"\";\n        for (int i = 0; i < str.length; i++) {\n            result += str[i].substring(0, 1).toUpperCase() + str[i].substring(1) + (i + 1 < str.length ? \"\" : \"\");\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/103","completion":"        if (m == 1) {\n            return n;\n        }\n        int eulerianNum = 0;\n        int count = 0;\n        while (eulerianNum < n) {\n            count++;\n            eulerianNum = n - m * count;\n        }\n        return eulerianNum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/104","completion":"        List<List<String>> outputList = new ArrayList<>();\n\n        for (int i = 0; i < inputList.size(); i++) {\n            List<String> sublist = inputList.get(i);\n            Collections.sort(sublist);\n            outputList.add(sublist);\n        }\n\n        return outputList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/105","completion":"        int count = 0;\n        for (Boolean b : lst) {\n            if (b == true)\n                count++;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/106","completion":"        testList.addAll(testTup);\n        return testList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/107","completion":"        return (int) (Math.pow(16, r - l) - Math.pow(16, l - 1));\n    }\n}","language":"java"}
{"task_id":"MBJP\/108","completion":"        PriorityQueue<Integer> pq1 = new PriorityQueue<>(num1);\n        PriorityQueue<Integer> pq2 = new PriorityQueue<>(num2);\n        PriorityQueue<Integer> pq3 = new PriorityQueue<>(num3);\n        List<Integer> sorted_list = new ArrayList<>();\n        while (!pq1.isEmpty() && !pq2.isEmpty() && !pq3.isEmpty()) {\n            Integer val1 = pq1.poll();\n            Integer val2 = pq2.poll();\n            Integer val3 = pq3.poll();\n            if (val1 <= val2 && val1 <= val3) {\n                sorted_list.add(val1);\n            } else if (val2 <= val3) {\n                sorted_list.add(val2);\n            } else {\n                sorted_list.add(val3);\n            }\n        }\n        sorted_list.addAll(pq1);\n        sorted_list.addAll(pq2);\n        sorted_list.addAll(p\n}","language":"java"}
{"task_id":"MBJP\/109","completion":"        int count = 0;\n        int odd_char = 0;\n\n        for (int i = 0; i < n; i++) {\n            if ((s.charAt(i) & 1) == 1) {\n                odd_char = 1;\n            } else {\n                odd_char = 0;\n            }\n            count += odd_char;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/110","completion":"        List<List<Integer>> list = new ArrayList<>();\n        int i = 0;\n        int j = testList.size() - 1;\n        while (i <= j) {\n            int min = Integer.MAX_VALUE;\n            int max = Integer.MIN_VALUE;\n            for (List<Integer> list1 : testList) {\n                if (min > list1.get(0)) {\n                    min = list1.get(0);\n                }\n                if (max < list1.get(1)) {\n                    max = list1.get(1);\n                }\n            }\n            if (min != Integer.MAX_VALUE && max != Integer.MIN_VALUE && (max - min) > 1) {\n                if (strtVal < min && stopVal > max) {\n                    list.add(Arrays.asList(strtVal, max));\n                }\n            }\n            if (min \n}","language":"java"}
{"task_id":"MBJP\/111","completion":"        List<Integer> common = new ArrayList<Integer>();\n        for (int i = 0; i < nestedlist.get(0).size(); i++) {\n            for (List<Integer> list : nestedlist) {\n                if (list.get(i) == nestedlist.get(0).get(i)) {\n                    common.add(list.get(i));\n                }\n            }\n        }\n        return common;\n    }\n}","language":"java"}
{"task_id":"MBJP\/112","completion":"        return 2 * (diameter + height);\n    }\n}","language":"java"}
{"task_id":"MBJP\/113","completion":"        try {\n            Integer.parseInt(text);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/114","completion":"        \/\/ your code goes here\n        List<List<Integer>> list = new ArrayList<>();\n        List<Integer> freqList = new ArrayList<>();\n        for (int i = 0; i < testList.size(); i++) {\n            freqList.add(0);\n        }\n        for (int i = 0; i < testList.size(); i++) {\n            for (int j = 0; j < testList.get(i).size(); j++) {\n                list.add(new ArrayList<>());\n                list.get(i).add(testList.get(i).get(j));\n                freqList.set(i, freqList.get(i) + 1);\n            }\n        }\n        for (int i = 0; i < freqList.size(); i++) {\n            for (int j = 0; j < freqList.get(i); j++) {\n                list.get(i).add(i);\n            }\n        }\n        return list\n}","language":"java"}
{"task_id":"MBJP\/115","completion":"        if (list1.isEmpty())\n            return true;\n\n        HashMap<Object, Object> dict = list1.get(0);\n        for (HashMap<Object, Object> temp : list1) {\n            if (temp.size() != dict.size())\n                return false;\n        }\n\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/116","completion":"        \/\/ Complete this function\n        int result = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            result = result * 10 + nums.get(i);\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/117","completion":"        String str = \"[\";\n        for (List<String> list : testList) {\n            for (String str1 : list) {\n                str += \"(\" + Float.parseFloat(str1) + \", \" + Float.parseFloat(str1) + \"), \";\n            }\n            str = str.substring(0, str.length() - 2);\n        }\n        return str + \"]\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/118","completion":"        \/\/ write your code here\n        List<String> strings = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) != ' ') {\n                sb.append(string.charAt(i));\n            } else {\n                if (sb.length() > 0) {\n                    strings.add(sb.toString());\n                    sb = new StringBuilder();\n                }\n            }\n        }\n        if (sb.length() > 0) {\n            strings.add(sb.toString());\n        }\n        return strings;\n    }\n}","language":"java"}
{"task_id":"MBJP\/119","completion":"        int start = 0;\n        int end = arr.size() - 1;\n\n        while (start <= end) {\n            int mid = (start + end) \/ 2;\n\n            if (arr.get(mid) == n) {\n                return mid;\n            } else if (arr.get(mid) < n) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n\n        return -1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/120","completion":"        int size = list1.size();\n        int maxProduct = Integer.MIN_VALUE;\n        for (int i = 0; i < size; i++) {\n            for (int j = i + 1; j < size; j++) {\n                int product = 1;\n                for (int k = 0; k < list1.get(i).size(); k++) {\n                    product *= list1.get(i).get(k);\n                }\n                for (int k = 0; k < list1.get(j).size(); k++) {\n                    product *= list1.get(j).get(k);\n                }\n                maxProduct = Math.max(product, maxProduct);\n            }\n        }\n        return maxProduct;\n    }\n}","language":"java"}
{"task_id":"MBJP\/121","completion":"        for (int i = 0; i < a.size(); i++) {\n            if (a.get(i) > n) {\n                count++;\n            }\n            if (a.get(i) < n) {\n                continue;\n            }\n            if (a.get(i) == n) {\n                count++;\n            }\n            if (count == 3) {\n                return true;\n            }\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/122","completion":"        int p=n,l=0,r=0;\n        while(p!=0) {\n            l=p%10;\n            p=p\/10;\n            r=r*10+l;\n        }\n        return r;\n    }\n}","language":"java"}
{"task_id":"MBJP\/123","completion":"        int sum = 0;\n        int[] sumOfAllNumbers = new int[limit + 1];\n        for (int i = 1; i <= limit; i++) {\n            sumOfAllNumbers[i] = sumOfAllNumbers[i - 1] + i;\n        }\n\n        for (int i = 1; i < limit; i++) {\n            if (sumOfAllNumbers[i] > limit) {\n                continue;\n            }\n            if (sumOfAllNumbers[sumOfAllNumbers[i]] == i) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/125","completion":"        \/\/ code here\n        int res = 0;\n        for (int i = 0; i <= string.length() - n; i++) {\n            int count = 0;\n            for (int j = 0; j < n; j++) {\n                if (string.charAt(i + j) == '0') {\n                    count++;\n                } else {\n                    count--;\n                }\n            }\n            res = Math.max(res, count);\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/126","completion":"        int div = 2;\n        int sum = 1;\n        while (b > 0) {\n            if (a % div == 0 && b % div == 0) {\n                sum += div;\n            }\n            div++;\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/127","completion":"        \/\/write your code here\n        return 0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/128","completion":"        List<String> result = new ArrayList<>();\n        StringTokenizer st = new StringTokenizer(str);\n        while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.length() > n) {\n                result.add(token);\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/129","completion":"        if (myMatrix.size() != 4) {\n            return false;\n        }\n\n        int num = 0;\n        for (int i = 0; i < myMatrix.size(); i++) {\n            for (int j = 0; j < myMatrix.get(i).size(); j++) {\n                if (myMatrix.get(i).get(j) < 1 || myMatrix.get(i).get(j) > 9) {\n                    return false;\n                } else {\n                    num += myMatrix.get(i).get(j);\n                }\n            }\n        }\n        if (num != 45) {\n            return false;\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/130","completion":"        \/\/ Write your code here\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> freq = new HashMap<>();\n        int max = Integer.MIN_VALUE;\n        for (int num: nums) {\n            if (freq.containsKey(num)) {\n                freq.put(num, freq.get(num)+1);\n            }\n            else {\n                freq.put(num, 1);\n            }\n            max = Math.max(max, freq.get(num));\n        }\n        for (int i=0; i<nums.size(); i++) {\n            if (freq.get(nums.get(i)) == max) {\n                res.add(nums.get(i));\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/131","completion":"        str1 = str1.replaceAll(\"a\", \"\").replaceAll(\"e\", \"\");\n        str1 = str1.replaceAll(\"i\", \"\").replaceAll(\"o\", \"\");\n        str1 = str1.replaceAll(\"u\", \"\");\n        return str1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/132","completion":"        String str1 = \"\";\n        for (int i = 0; i < tup1.size(); i++) {\n            str1 = str1 + tup1.get(i);\n            if ((i + 1) != tup1.size()) {\n                str1 = str1 + \" \";\n            }\n        }\n        return str1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/133","completion":"        return nums.stream().filter(x -> x < 0).reduce((a,b) -> a + b).orElse(0);\n    }\n}","language":"java"}
{"task_id":"MBJP\/134","completion":"        \/\/ code here\n        Collections.sort(arr);\n        for(int i = 0; i < p; i++){\n            arr.add(arr.get(arr.size() - 1) + 2 * i);\n            Collections.sort(arr);\n        }\n        String ans = \"\";\n        if(arr.get(arr.size() - 1) % 2 == 0){\n            ans = \"EVEN\";\n        }\n        else{\n            ans = \"ODD\";\n        }\n        return ans;\n    }\n}","language":"java"}
{"task_id":"MBJP\/135","completion":"        int count = 0;\n        int num = 1;\n        while (count < n) {\n            count++;\n            num += (2 * count);\n        }\n        return num;\n    }\n}","language":"java"}
{"task_id":"MBJP\/136","completion":"        if (units > 0) {\n            return units * 0.9;\n        } else {\n            return units * 0.8;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/137","completion":"        int total = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) == 0) {\n                total++;\n            }\n        }\n        return (double) total \/ nums.size();\n    }\n}","language":"java"}
{"task_id":"MBJP\/138","completion":"        if (n < 0) {\n            return false;\n        }\n        int bit = (int) Math.log(n) \/ Math.log(2);\n        for (int i = 0; i < bit; i++) {\n            if ((n & 1) == 0) {\n                return false;\n            }\n            n >>= 1;\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/139","completion":"        return 2 * Math.PI * r;\n    }\n}","language":"java"}
{"task_id":"MBJP\/140","completion":"        int size = 0;\n        for (List<Integer> list : testList) {\n            size += list.size();\n        }\n        List<Integer> out = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            int ind = i;\n            for (List<Integer> list : testList) {\n                if (ind >= list.size()) {\n                    ind -= list.size();\n                } else {\n                    out.add(list.get(ind));\n                    break;\n                }\n            }\n        }\n        return out;\n    }\n}","language":"java"}
{"task_id":"MBJP\/141","completion":"        int low = 0;\n        int middle = 0;\n        int high = nums.size() - 1;\n        while (low < high) {\n            if (nums.get(low) == nums.get(middle) || nums.get(middle) == nums.get(high)) {\n                middle++;\n            } else if (nums.get(low) > nums.get(middle)) {\n                swap(nums, low, middle);\n                middle++;\n            } else {\n                swap(nums, middle, high);\n                high--;\n            }\n            low++;\n        }\n        return nums;\n    }\n}","language":"java"}
{"task_id":"MBJP\/142","completion":"        int count=0;\n        int i = 0, j = 0, k = 0;\n        int p = 0, q = 0, r = 0;\n        while (i < list1.size() && j < list2.size() && k < list3.size()) {\n            p = list1.get(i).compareTo(list2.get(j));\n            q = list2.get(j).compareTo(list3.get(k));\n            r = list1.get(i).compareTo(list3.get(k));\n            if (p == 0) {\n                count++;\n                i++;\n            } else if (q == 0) {\n                count++;\n                j++;\n            } else if (r == 0) {\n                count++;\n                k++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/143","completion":"        int count = 0;\n        for (List<Integer> sublist : input) {\n            HashSet<Integer> set = new HashSet<Integer>(sublist);\n            if (set.size() != sublist.size()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/144","completion":"        \/\/ code here\n        int count = 0;\n        int sum = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (Math.abs(arr.get(i) - arr.get(j)) == n) {\n                    sum = arr.get(i) + arr.get(j);\n                    count++;\n                }\n            }\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/145","completion":"        int min = arr.get(0), max = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) > max)\n                max = arr.get(i);\n            if (arr.get(i) < min)\n                min = arr.get(i);\n        }\n        int diff = max - min;\n        return diff;\n    }\n}","language":"java"}
{"task_id":"MBJP\/146","completion":"        int ascii = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            ascii += (int) str1.charAt(i);\n        }\n        return ascii;\n    }\n}","language":"java"}
{"task_id":"MBJP\/147","completion":"        \/\/ Write your code here\n        int[] dp = new int[n];\n        dp[0] = tri.get(m-1).get(n-1);\n        for(int i = 1; i < n; i++) {\n            dp[i] = tri.get(m-1).get(i) + Math.max(dp[i-1], dp[i-1+m]);\n        }\n        return dp[n-1];\n    }\n}","language":"java"}
{"task_id":"MBJP\/148","completion":"        \/\/ code here\n        if(n < 10){\n            return n;\n        }\n        \/\/ 3 digit no.\n        if(n < 100){\n            return n%10+sumDigitsTwoparts(n\/10);\n        }\n        \/\/ 2 digit no.\n        return n%10 + sumDigitsTwoparts(n\/100)*10 + sumDigitsTwoparts(n\/10%10);\n    }\n}","language":"java"}
{"task_id":"MBJP\/149","completion":"        int l = 0;\n        int r = 0;\n        int longest = 0;\n        int currMax = 0;\n        int curr = 0;\n        List<Integer> res = new ArrayList<>();\n\n        while (r < arr.size()) {\n            while (r < arr.size() && arr.get(r) - arr.get(l) == 1) {\n                res.add(arr.get(l));\n                l++;\n                currMax++;\n                curr++;\n            }\n            longest = Math.max(longest, currMax);\n            currMax = 0;\n            res.clear();\n            while (r < arr.size() && arr.get(r) - arr.get(l) == -1) {\n                res.add(arr.get(r));\n                r++;\n                currMax++;\n                curr++;\n            }\n            longest = Math.max(longest, currMax);\n        }\n        if (n == \n}","language":"java"}
{"task_id":"MBJP\/150","completion":"        int num[] = {a, b, c};\n        Arrays.sort(num);\n        if (num[0] == a && num[1] == b && num[2] == c) return true;\n        else return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/151","completion":"        for (int i = 2; i < x; i++) {\n            if ((x % i == 0) && (y % i == 0)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/152","completion":"        if (x.size() == 1) return x;\n        int middle = x.size() \/ 2;\n        List<Integer> left = x.subList(0, middle);\n        List<Integer> right = x.subList(middle, x.size());\n        return merge(mergeSort(left), mergeSort(right));\n    }\n}","language":"java"}
{"task_id":"MBJP\/153","completion":"        double m = (double) (-b) \/ (2.0 * a);\n        double d = ((double) c \/ (2 * a)) + ((double) b \/ (2 * a));\n        double e = (2 * a) * d + m;\n        List<Double> res = new ArrayList<>();\n        res.add(d);\n        res.add(e);\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/154","completion":"        List<Integer> result = new ArrayList<>();\n        for (List<Integer> list : nums) {\n            if (list.get(n) != null)\n                result.add(list.get(n));\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/155","completion":"        int oddbits = n & 0x55555555;\n        return n ^ oddbits;\n    }\n}","language":"java"}
{"task_id":"MBJP\/156","completion":"        \/\/ write your code here\n        List<List<Integer>> tupleInt = new ArrayList<>();\n        \n        tupleStr.forEach(tuple -> tupleInt.add(tuple.stream().map(str -> Integer.parseInt(str)).collect(Collectors.toList())));\n        return tupleInt;\n    }\n}","language":"java"}
{"task_id":"MBJP\/157","completion":"        List<List<Object>> list2 = new ArrayList<>();\n\n        for (int i = 0; i < list1.size(); i++) {\n            int count = 0;\n            double value = list1.get(i);\n\n            while (value == list1.get(i)) {\n                value = list1.get(i);\n                count++;\n                i++;\n            }\n\n            list2.add(new ArrayList<Object>(Collections.nCopies(count + 1, value)));\n        }\n\n        return list2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/158","completion":"        if (arr.size() == 1) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) + arr.get(j) == k) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/159","completion":"        \/\/ write your code here\n        String season = \"winter\";\n        if (days < 1 || days > 31) {\n            System.out.println(\"Invalid number of days, expected 1-31\");\n        } else {\n            if (days >= 28 && month.equals(\"April\") || days <= 31 && month.equals(\"June\")) {\n                season = \"summer\";\n            } else if (days > 28 && month.equals(\"January\") || days < 31 && month.equals(\"October\")) {\n                season = \"autumn\";\n            }\n        }\n        return season;\n    }\n}","language":"java"}
{"task_id":"MBJP\/160","completion":"        int x = 0, y = 0, counter = 0;\n        boolean stop = false;\n        for (int i = 1; i < n; i++) {\n            x = (a * x) + (b * y) + i;\n            y = (b * x) - (a * y) + i;\n            if (x == n) {\n                counter = counter + 1;\n                stop = true;\n            } else if (x > n) {\n                counter = counter + 1;\n                break;\n            } else {\n                continue;\n            }\n        }\n        if (stop) {\n            return \"x = \" + x + \", y = \" + y;\n        } else {\n            return \"No solution\";\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/161","completion":"        Iterator<Integer> iterator1 = list1.iterator();\n        Iterator<Integer> iterator2 = list2.iterator();\n        while (iterator1.hasNext()) {\n            if (iterator2.hasNext()) {\n                if (iterator1.next().equals(iterator2.next())) {\n                    iterator1.remove();\n                }\n            } else {\n                break;\n            }\n        }\n        return list1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/162","completion":"        if (n < 0) return -1;\n        if (n == 0) return n;\n        return n + sumSeries(n - 1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/163","completion":"        return (s * l * 3.14) \/ 2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/164","completion":"        if(num1 < num2) {\n            int temp = num1;\n            num1 = num2;\n            num2 = temp;\n        }\n        boolean flag = false;\n        for(int i = 1; i <= num1\/2; ++i) {\n            if(num1%i == 0 && num2%i == 0)\n                flag = true;\n        }\n        return flag;\n    }\n}","language":"java"}
{"task_id":"MBJP\/165","completion":"        int count = 0, index = -1;\n        char ch = 'a';\n\n        for (char ch1 : str1.toCharArray()) {\n            if (ch1 == ch) {\n                index++;\n            } else {\n                count += index + 1;\n                index = 0;\n            }\n            ch = ch1;\n        }\n\n        count += index + 1;\n\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/166","completion":"        \/\/ Write your code here\n        Set<Integer> set = new HashSet<>();\n        for (Integer i : a) {\n            if (i % 2 == 0) {\n                set.add(i);\n            }\n        }\n        int count = 0;\n        for (Integer i : a) {\n            if (set.contains(n - i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/167","completion":"        \/\/ code goes here\n        \/\/ if n is 0 or 1, it will return 1\n        if (n == 1) return 1;\n        \/\/ if n is 2, it will return 2\n        if (n == 2) return 2;\n        \/\/ If n is power of 2, then n will be 1. \n        while ((n & (n-1)) != 0) {\n            n = n << 1;\n        }\n        return n;\n    }\n}","language":"java"}
{"task_id":"MBJP\/168","completion":"        \/\/ Your code goes here\n        return a.stream().filter(i -> i == x).count();\n\n    }\n}","language":"java"}
{"task_id":"MBJP\/169","completion":"        if(n<=1)\n            return 0;\n        int[] pell = new int[n];\n        pell[0]=1;\n        pell[1]=1;\n        int a = 0, b = 2;\n        for(int i = 2; i<n; i++){\n            pell[i] = pell[a]+pell[b];\n            a = b;\n            b = pell[i];\n        }\n        return pell[n-1];\n    }\n}","language":"java"}
{"task_id":"MBJP\/170","completion":"        int sum = 0;\n        if (n > m) {\n            int mid = (m + n) \/ 2;\n            sum += sumRangeList(list1, m, mid);\n            sum += sumRangeList(list1, mid + 1, n);\n        } else {\n            for (int i = m; i <= n; i++) {\n                sum += list1.get(i);\n            }\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/171","completion":"        return (int) (4 * (Math.sqrt((3.0) * ((2 * a) + 1.0))));\n    }\n}","language":"java"}
{"task_id":"MBJP\/172","completion":"        int count = 0;\n        int position = 0;\n        while (position < s.length()) {\n            if (s.charAt(position) == 's') {\n                count++;\n            }\n            position++;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/173","completion":"        String ret=\"\";\n        for(int i=0;i<text.length();i++) {\n            char c = text.charAt(i);\n            if(Character.isLetterOrDigit(c)) {\n                ret+=c;\n            }\n        }\n        return ret;\n    }\n}","language":"java"}
{"task_id":"MBJP\/174","completion":"        HashMap<String, List<Integer>> h = new HashMap<>();\n        for (List<Object> item : l) {\n            String key = (String) item.get(0);\n            int value = (int) item.get(1);\n            List<Integer> l1 = h.getOrDefault(key, new ArrayList<>());\n            l1.add(value);\n            h.put(key, l1);\n        }\n        return h;\n    }\n}","language":"java"}
{"task_id":"MBJP\/175","completion":"        Stack<Character> stk = new Stack<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) == '(' || str1.charAt(i) == '{' || str1.charAt(i) == '[') {\n                stk.push(str1.charAt(i));\n            } else {\n                if (stk.isEmpty()) {\n                    return false;\n                }\n                char ch = stk.peek();\n                if (ch == '(' && str1.charAt(i) != ')') {\n                    return false;\n                } else if (ch == '{' && str1.charAt(i) != '}') {\n                    return false;\n                } else if (ch == '[' && str1.charAt(i) != ']') {\n                    return false;\n                }\n                stk.pop();\n            }\n        }\n}","language":"java"}
{"task_id":"MBJP\/176","completion":"        return 2*(a+b+c);\n    }\n}","language":"java"}
{"task_id":"MBJP\/177","completion":"        \/\/write your code here\n        List<Integer> res = new ArrayList<>();\n        for (int i = l; i <= r; i++) {\n            if (lcm(i, l, r) == i)\n                res.add(i);\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/178","completion":"        for (String pattern : patterns) {\n            if (text.contains(pattern)) {\n                return \"Matched!\";\n            }\n        }\n        return \"Not Matched!\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/179","completion":"        int temp = x, num = 0, rem = 0;\n        while(temp > 0) {\n            num = temp % 10;\n            rem = (num * num) + rem;\n            temp \/= 10;\n        }\n        return rem == x;\n    }\n}","language":"java"}
{"task_id":"MBJP\/180","completion":"        double diffX = slat - elat;\n        double diffY = slon - elon;\n        double dist = Math.sqrt((diffX * diffX) + (diffY * diffY));\n        return dist;\n    }\n}","language":"java"}
{"task_id":"MBJP\/181","completion":"        String prefix = new String();\n        int i = 0;\n        while (i < n) {\n            prefix = prefix + arr.get(i);\n            i++;\n        }\n        return prefix;\n    }\n}","language":"java"}
{"task_id":"MBJP\/182","completion":"        List<List<Object>> ans = new ArrayList<>();\n        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isUpperCase(charArray[i])) {\n                List<Object> obj = new ArrayList<>();\n                obj.add(Character.toUpperCase(charArray[i]));\n                ans.add(obj);\n            } else if (Character.isLowerCase(charArray[i])) {\n                List<Object> obj = new ArrayList<>();\n                obj.add(Character.toLowerCase(charArray[i]));\n                ans.add(obj);\n            } else if (Character.isDigit(charArray[i])) {\n                List<Object> obj = new ArrayList<>();\n                obj.add(Character.toString(charArray[i]));\n                ans.add(obj);\n            } else if (Character.isWhitespace(charArray[i])) {\n                List<Object> obj = new ArrayList<>();\n                obj.add(Character.toString(charArray[\n}","language":"java"}
{"task_id":"MBJP\/183","completion":"        int count = 0;\n\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i+1; j < arr.size(); j++) {\n                if (Math.abs(arr.get(i) - arr.get(j)) == k) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/184","completion":"        \/\/Write your code here\n        int flag=0;\n        for(int i:list)\n        {\n            if(num<i)\n            {\n                flag=1;\n                break;\n            }\n        }\n        return flag;\n    }\n}","language":"java"}
{"task_id":"MBJP\/185","completion":"        double a1 = Math.pow(b, 2) - (4 * a * c);\n        double a2 = Math.pow(b, 2) + (4 * a * c);\n\n        if (a1 == 0) {\n            return Arrays.asList(-1.0, 0.0);\n        }\n\n        if (a2 == 0) {\n            return Arrays.asList(-1.0, 0.0);\n        }\n\n        double m = (-b + Math.sqrt(a1)) \/ (2 * a);\n        double n = (-b - Math.sqrt(a2)) \/ (2 * a);\n\n        return Arrays.asList(m, n);\n    }\n}","language":"java"}
{"task_id":"MBJP\/186","completion":"        for (String pattern : patterns) {\n            if (text.matches(pattern)) {\n                return \"Matched!\";\n            }\n        }\n        return \"Not Matched!\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/187","completion":"        int[][] dp = new int[m + 1][n + 1];\n\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (x.charAt(i - 1) == y.charAt(j - 1)) {\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return dp[m][n];\n    }\n}","language":"java"}
{"task_id":"MBJP\/188","completion":"        if (n == 0 || n == 1) return true;\n        int square = (int) Math.sqrt(n);\n        return square*square == n;\n    }\n}","language":"java"}
{"task_id":"MBJP\/189","completion":"        int j = 1;\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > 0) {\n                if (arr.get(i) == arr.get(arr.get(i) - 1)) {\n                    arr.set(i, arr.get(i) + 1);\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) == j && arr.get(i) != (j + 1)) {\n                return j + 1;\n            }\n            j++;\n        }\n        return j;\n    }\n}","language":"java"}
{"task_id":"MBJP\/190","completion":"        int count = 0;\n        for (int i = x1; i <= x2; i++) {\n            for (int j = y1; j <= y2; j++) {\n                if (i == x2 || j == y2) {\n                    break;\n                }\n                if (i == x1 || j == y1) {\n                    continue;\n                }\n                if (i * i + j * j == x2 * x2 + y2 * y2) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/191","completion":"        return monthname3.equals(\"March\") || monthname3.equals(\"April\") || monthname3.equals(\"May\") || monthname3.equals(\"June\") || monthname3.equals(\"July\") || monthname3.equals(\"August\") || monthname3.equals(\"September\") || monthname3.equals(\"October\") || monthname3.equals(\"November\") || monthname3.equals(\"December\");\n    }\n}","language":"java"}
{"task_id":"MBJP\/192","completion":"        return str.matches(\"^.*\\\\d+.*$\") && str.matches(\"^.*[a-zA-Z]+.*$\");\n    }\n}","language":"java"}
{"task_id":"MBJP\/193","completion":"        Set<Integer> s = new HashSet<>();\n        List<Integer> nTup = new ArrayList<>();\n        for (int i : testTup) {\n            if (!s.contains(i)) {\n                s.add(i);\n                nTup.add(i);\n            }\n        }\n        return nTup;\n    }\n}","language":"java"}
{"task_id":"MBJP\/194","completion":"        int decimal = 0;\n\n        while (n != 0) {\n            decimal = decimal * 8 + (n % 10);\n            n = n \/ 10;\n        }\n        return decimal;\n    }\n}","language":"java"}
{"task_id":"MBJP\/195","completion":"        int i = 0;\n        int j = n-1;\n        while(i < j) {\n            int mid = i + (j-i)\/2;\n            if(arr.get(mid) == x) return mid;\n            if(arr.get(mid) < x) {\n                i = mid+1;\n            }\n            else {\n                j = mid;\n            }\n        }\n        if(i >= arr.size()) return -1;\n        if(arr.get(i) == x) return i;\n        else return -1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/196","completion":"        ArrayList<List<Integer>> result = new ArrayList<>();\n        List<Integer> tuple;\n\n        for (List<Integer> list : testList) {\n            tuple = new ArrayList<>();\n            for (Integer element : list) {\n                if (element != null) {\n                    tuple.add(element);\n                }\n            }\n            if (tuple.size() == k) {\n                result.add(tuple);\n            }\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/197","completion":"        List<Integer> answer = new ArrayList<>();\n        for (int i = 0; i < testTup1.size(); i++) {\n            answer.add(Math.pow(testTup1.get(i), testTup2.get(i)));\n        }\n        return answer;\n    }\n}","language":"java"}
{"task_id":"MBJP\/198","completion":"        if (a > b) return 0;\n        if (a == b) return 1;\n        double c = (double) (Math.sqrt(a * a + b * b)) \/ 2.0;\n        double h = Math.sqrt(c * c - a * a - b * b);\n        double k = Math.sqrt(c * c - h * h);\n        double d1 = Math.abs(b * h \/ (a + h));\n        double d2 = Math.abs(b * k \/ (a + k));\n        if (a + h < b + k) {\n            return (a + h) \/ (a + h) * d1;\n        } else {\n            return (a + k) \/ (a + k) * d2;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/199","completion":"        if(n == 0) return 0;\n        int count = 0;\n        int power = 1;\n        while(n > 1) {\n            if(n % 2 == 1) {\n                count++;\n            }\n            if(count == power) {\n                power *= 2;\n            }\n            n = n \/ 2;\n        }\n        return power;\n    }\n}","language":"java"}
{"task_id":"MBJP\/200","completion":"        List<Integer> posMax = new ArrayList<>();\n        int max = list1.get(0);\n        int pos = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) >= max) {\n                posMax.add(pos);\n                max = list1.get(i);\n                pos = i;\n            }\n        }\n        posMax.add(pos + 1);\n        return posMax;\n    }\n}","language":"java"}
{"task_id":"MBJP\/201","completion":"        Set<String> set = new HashSet<String>(lst);\n        if (set.size() < lst.size()) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/202","completion":"        StringBuilder str = new StringBuilder(str1);\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isDigit(str.charAt(i))) {\n                str.replace(i, i + 1, \"\");\n            }\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isLowerCase(str.charAt(i))) {\n                str.replace(i, i + 1, Character.toString(Character.toUpperCase(str.charAt(i))));\n            }\n        }\n        return str.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/203","completion":"        int x = n1^n2;\n        int y = 0;\n        while(x>0)\n        {\n            y+=x&1;\n            x>>>=1;\n        }\n        return y;\n    }\n}","language":"java"}
{"task_id":"MBJP\/204","completion":"        int count = 0;\n        int i = 0;\n        while (i < s.length()) {\n            if (s.charAt(i) == c.charAt(0)) {\n                while (i < s.length() && s.charAt(i) == c.charAt(0))\n                    i++;\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/205","completion":"        List<Integer> inversionElements = new ArrayList<>();\n        \/\/ create empty arraylist\n        List<Integer> testTuple = new ArrayList<>();\n\n        \/\/ sorting\n        testTuple.addAll(testTup);\n        Collections.sort(testTuple);\n        for (int i = 0; i < testTuple.size() - 1; i++) {\n            int minElement = testTuple.get(i);\n            int maxElement = testTuple.get(i + 1);\n            for (int j = minElement; j < maxElement; j++) {\n                if (minElement > j && maxElement < j) {\n                    inversionElements.add(j);\n                }\n            }\n        }\n        return inversionElements;\n    }\n}","language":"java"}
{"task_id":"MBJP\/206","completion":"        String temp;\n        List<String> newTup = new ArrayList<>();\n        for (int i = 0; i < testTup.size(); i++) {\n            temp = testTup.get(i);\n            for (int j = i + 1; j < testTup.size(); j++) {\n                temp += testTup.get(j);\n            }\n            newTup.add(temp);\n        }\n        return newTup;\n    }\n}","language":"java"}
{"task_id":"MBJP\/207","completion":"        int n = str.length();\n        int[] count = new int[n];\n        int maxLength = 0;\n        for (int i = 0; i < n; i++) {\n            count[i] = 1;\n            for (int j = 0; j < i; j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    count[i] = Math.max(count[i], count[j] + 1);\n                }\n            }\n            maxLength = Math.max(maxLength, count[i]);\n        }\n        return maxLength;\n    }\n}","language":"java"}
{"task_id":"MBJP\/208","completion":"        String regex = \"^(\\\\d+)\\\\.(\\\\d{1,2})$\";\n        return num.matches(regex);\n    }\n}","language":"java"}
{"task_id":"MBJP\/209","completion":"        List<Integer> newHeap = new ArrayList<>();\n        newHeap.add(a);\n        int lastIndex = heap.size() - 1;\n        while (lastIndex >= 0 && heap.get(lastIndex) < newHeap.get(0)) {\n            Collections.swap(heap, lastIndex, 0);\n            lastIndex--;\n        }\n        return newHeap;\n    }\n}","language":"java"}
{"task_id":"MBJP\/210","completion":"        return string.matches(\"[a-zA-Z0-9]+\");\n    }\n}","language":"java"}
{"task_id":"MBJP\/211","completion":"        int count = 0;\n        while(n > 0){\n            int last_bit = (n % 2);\n            if(last_bit == 1) {\n                count++;\n            }\n            n = n\/2;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/212","completion":"        if (n == 1) {\n            return 1;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        int sum = 0;\n        for (int i = 1; i <= n \/ 2; i++) {\n            if (n % i == 0) {\n                sum += (int) Math.pow(i, 4);\n            }\n        }\n        if (n % 2 == 0) {\n            sum += 2;\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/213","completion":"        \/\/write your code here\n        List<String> result=new ArrayList<>();\n        for(int i=0;i<testTup1.size();i++)\n        {\n            result.add(testTup1.get(i)+testTup2.get(i));\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/214","completion":"        return Math.toDegrees(radian);\n    }\n}","language":"java"}
{"task_id":"MBJP\/215","completion":"        int[] arr = new int[alist.size()];\n        int index = 0;\n\n        for (Object element: alist) {\n            if (element instanceof List) {\n                arr[index++] = decodeList((List<Object>) element).size();\n            } else {\n                arr[index++] = (Integer)element;\n            }\n        }\n\n        List<Object> result = new ArrayList<>();\n\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = 0; j < arr[i]; j++) {\n                result.add(alist.get(i));\n            }\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/216","completion":"        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < list1.size(); i++) {\n            set1.add(list1.get(i));\n        }\n        for (int i = 0; i < list2.size(); i++) {\n            set2.add(list2.get(i).get(0));\n        }\n        for (int i = 0; i < list2.size(); i++) {\n            for (int j = 1; j < list2.get(i).size(); j++) {\n                set2.add(list2.get(i).get(j));\n            }\n        }\n        for (int i = 0; i < list1.size(); i++) {\n            if (set2.contains(list1.get(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n}","language":"java"}
{"task_id":"MBJP\/217","completion":"        \/\/write your code here\n        \/\/Map<Character, Integer> map = new HashMap<>();\n        Map<Character, Integer> map = new TreeMap<>();\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        for (Map.Entry<Character, Integer> e : map.entrySet()) {\n            if (e.getValue() == 1) {\n                return String.valueOf(e.getKey());\n            }\n        }\n        return \"\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/218","completion":"        \/\/ Write your code here\n        int diff = b - a;\n        return diff == 0 ? 0 : 1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/219","completion":"        List<Integer> minMax = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            int min = Integer.MAX_VALUE;\n            int max = Integer.MIN_VALUE;\n            for (int j = 0; j < testTup.size(); j++) {\n                if (testTup.get(j) < min) {\n                    min = testTup.get(j);\n                }\n                if (testTup.get(j) > max) {\n                    max = testTup.get(j);\n                }\n            }\n            minMax.add(min);\n            minMax.add(max);\n        }\n        return minMax;\n    }\n}","language":"java"}
{"task_id":"MBJP\/220","completion":"        String result = text;\n        int len = text.length();\n        int count = 0;\n        for (int i = 0; i < len; i++) {\n            if (text.charAt(i) == ' ' || text.charAt(i) == ',' || text.charAt(i) == '.')\n                count++;\n        }\n        if (n > count)\n            n = count;\n        for (int i = 0; i < len; i++) {\n            if (text.charAt(i) == ' ' || text.charAt(i) == ',' || text.charAt(i) == '.') {\n                if (count == n) {\n                    result = result.substring(0, i) + \":\" + result.substring(i + 1);\n                    break;\n                }\n                count--;\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/221","completion":"        if(nums.isEmpty() || nums == null) return -1;\n        int n = nums.size();\n        for(int i = 0; i < n; i++)\n            if(nums.get(i) % 2 == 0)\n                return nums.get(i);\n        return -1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/222","completion":"        boolean isSameType = true;\n\n        for (int i = 1; i < testTuple.size(); i++) {\n            if (testTuple.get(0) != testTuple.get(i)) {\n                isSameType = false;\n                break;\n            }\n        }\n\n        return isSameType;\n    }\n}","language":"java"}
{"task_id":"MBJP\/223","completion":"        if (n < 1) {\n            return false;\n        }\n        if (arr.get(0) == x) {\n            return true;\n        }\n        if (n < 2) {\n            return false;\n        }\n        return arr.get(n \/ 2) == x ? IsMajority.isMajority(arr.subList(0, n \/ 2), n \/ 2, x) : IsMajority.isMajority(arr.subList(n \/ 2, n), n - n \/ 2, x);\n    }\n}","language":"java"}
{"task_id":"MBJP\/224","completion":"        int count = 0;\n        while (n != 0) {\n            count += n & 1;\n            n >>>= 1;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/225","completion":"        if (high - low == 1) {\n            return arr.get(low);\n        }\n\n        if (low == high) {\n            return Math.min(arr.get(low), arr.get(high));\n        }\n\n        int mid = (low + high) \/ 2;\n        int midVal = arr.get(mid);\n\n        if (midVal > arr.get(mid - 1) && midVal < arr.get(mid + 1)) {\n            return midVal;\n        } else if (midVal > arr.get(mid - 1)) {\n            return findMin(arr, low, mid - 1);\n        } else {\n            return findMin(arr, mid + 1, high);\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/226","completion":"        String res = \"\";\n        for (int i = 0; i < str.length(); i++) {\n            if (i % 2 == 1) {\n                res += str.charAt(i);\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/227","completion":"        int min;\n        if(a < b && a < c) {\n            min = a;\n        }\n        else if(b < a && b < c) {\n            min = b;\n        }\n        else {\n            min = c;\n        }\n        return min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/228","completion":"        return n >= l && n <= r && ((n & (n - 1)) == 0);\n    }\n}","language":"java"}
{"task_id":"MBJP\/229","completion":"        int[] index = new int[n + 1];\n        for (int i = 0; i < n + 1; i++) index[i] = i;\n        List<Integer> res = new LinkedList<>();\n        for (int i : arr) {\n            int j = i < 0 ? index[i] : index[i] + 1;\n            res.add(j, i);\n            index[i] = j;\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/230","completion":"        \/\/ write your code here\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) == ' ') {\n                count++;\n            }\n        }\n        for (int i = 0; i < count; i++) {\n            str1 = str1.replace(\" \", char);\n        }\n        return str1;\n\n    }\n}","language":"java"}
{"task_id":"MBJP\/231","completion":"        \/\/ Write your code here\n        int max = 0, i, j, k;\n        for (i = 0; i < n; i++) {\n            for (j = i + 1; j < n; j++) {\n                k = 0;\n                for (int l = 0; l < j; l++) {\n                    k += tri.get(i).get(l);\n                }\n                max = Math.max(max, k);\n            }\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/232","completion":"        if (n == 0) {\n            return list1;\n        } else {\n            int length = list1.size();\n            List<Integer> larg = new ArrayList<>();\n            for (int i = 0; i < length; i++) {\n                if (larg.size() == n) {\n                    break;\n                } else {\n                    int x = list1.get(i);\n                    larg.add(x);\n                }\n            }\n            return larg;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/233","completion":"        \/\/code here\n        double area = 2 * (r * r) + (h * h);\n        return area;\n    }\n}","language":"java"}
{"task_id":"MBJP\/234","completion":"        return (int)Math.pow(l, 3);\n    }\n}","language":"java"}
{"task_id":"MBJP\/235","completion":"        return n & ~(-1 << (Integer.numberOfTrailingZeros(n)));\n    }\n}","language":"java"}
{"task_id":"MBJP\/236","completion":"        if (n < 0 || k < 0) {\n            return -1;\n        } else if (n == k) {\n            return 1;\n        } else if (n == k + 1) {\n            return 2;\n        } else if (n == k + 2) {\n            return 3;\n        } else if (n == k + 3) {\n            return 4;\n        } else {\n            return -1;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/237","completion":"        HashMap<List<Integer>, Integer> result = new HashMap<List<Integer>, Integer>();\n\n        \/\/ TODO\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/238","completion":"        \/\/ code here\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            for (int j = i+1; j < str.length(); j++) {\n                if (str.substring(i, j).length() != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/239","completion":"        if (m == 1 || n == 1) {\n            return 1;\n        }\n        int mDiv2 = m \/ 2;\n        int nDiv2 = n \/ 2;\n\n        int result = 0;\n\n        \/\/ we have to go through all the combinations, we can only choose two elements of them\n        for (int i = 1; i <= nDiv2; i++) {\n            for (int j = 1; j <= mDiv2; j++) {\n                if (i + j > n) {\n                    break;\n                }\n                if (i + j > m) {\n                    continue;\n                }\n                result++;\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/240","completion":"        \/\/ write your code here\n        list1.set(list1.size()-1, list2);\n        return list1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/241","completion":"        int counter = 1;\n        List<List<List<String>>> list = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            List<List<String>> temp = new ArrayList<>();\n            for (int j = 0; j < n; j++) {\n                List<String> temp1 = new ArrayList<>();\n                for (int k = 0; k < o; k++) {\n                    temp1.add(\"*\");\n                }\n                temp.add(temp1);\n            }\n            list.add(temp);\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/242","completion":"        return str1.length();\n    }\n}","language":"java"}
{"task_id":"MBJP\/243","completion":"        \/\/ Write your code here\n        Map<Object, List<Object>> map = new HashMap<>();\n        for (List<Object> x : lst) {\n            if (map.containsKey(x.get(0))) {\n                map.get(x.get(0)).add(x.get(1));\n            } else {\n                List<Object> l = new ArrayList<>();\n                l.add(x.get(1));\n                map.put(x.get(0), l);\n            }\n        }\n        List<List<Object>> ret = new ArrayList<>();\n        for (List<Object> x : lst) {\n            if (map.containsKey(x.get(0))) {\n                ret.add(new ArrayList<>(map.get(x.get(0))));\n            }\n        }\n        return ret;\n    }\n}","language":"java"}
{"task_id":"MBJP\/244","completion":"        while (n < 0) {\n            n = (n & 0x7FFFFFFF) + 0x7FFFFFFF;\n        }\n        return (int) Math.sqrt(n);\n    }\n}","language":"java"}
{"task_id":"MBJP\/245","completion":"        int l = 0, r = 0, sum = 0;\n        int max = 0;\n        while (r < n) {\n            if (sum < 0) {\n                sum = arr.get(r);\n                r++;\n            } else if (sum > 0) {\n                sum += arr.get(r);\n                r++;\n            } else {\n                sum += arr.get(l);\n                l++;\n            }\n            if (sum > max) max = sum;\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/246","completion":"        return (number * number - 1) \/ 2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/247","completion":"        int n = str.length(), dp[] = new int[n], LPS[] = new int[n];\n\n        for (int i = 0; i < n; i++) dp[i] = 1;\n        LPS[0] = 1;\n\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (str.charAt(i) == str.charAt(j) && dp[j] + 2 > dp[i]) {\n                    dp[i] = dp[j] + 2;\n                    LPS[i] = j;\n                }\n            }\n        }\n\n        int max = 0;\n        for (int i = 0; i < n; i++) if (dp[i] > max) max = dp[i];\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/248","completion":"        double harmonicSum = 1;\n        for (int i = 1; i <= n; i++) {\n            harmonicSum *= 1.0 \/ i;\n        }\n        return harmonicSum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/249","completion":"        List<Integer> result = new ArrayList<>();\n        List<Integer> resultList = new ArrayList<>();\n\n        for (int i = 0; i < arrayNums1.size(); i++) {\n            if (arrayNums2.contains(arrayNums1.get(i))) {\n                resultList.add(arrayNums1.get(i));\n            }\n        }\n\n        for (int i = 0; i < resultList.size(); i++) {\n            if (!result.contains(resultList.get(i))) {\n                result.add(resultList.get(i));\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/250","completion":"        int count = 0;\n        for (Integer item : tup)\n            if (item == x)\n                count++;\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/251","completion":"        for(int i = 0; i < list.size(); i++) {\n            list.add(i, element);\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/252","completion":"        List<Double> list = new ArrayList<>();\n        list.add((double)numbers);\n        list.add((double)numbers * Math.sqrt(2));\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/253","completion":"        \/\/ write your code here\n        int count = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) instanceof Integer) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/254","completion":"        List<String> words = new ArrayList<>();\n        char[] chars = text.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e') {\n                int j = i;\n                int k = i;\n                for (; k < chars.length; k++) {\n                    if (chars[k] == ' ' || chars[k] == '\\n')\n                        break;\n                }\n                if (j < k) {\n                    String word = text.substring(j, k);\n                    words.add(word);\n                }\n            }\n        }\n        return words;\n    }\n}","language":"java"}
{"task_id":"MBJP\/255","completion":"        List<List<String>> ret = new LinkedList<>();\n        if (n == 0) {\n            List<String> l2 = new LinkedList<>();\n            l2.add(l.get(0));\n            ret.add(l2);\n            return ret;\n        }\n        if (n < 0) {\n            return ret;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            List<String> l2 = new LinkedList<>();\n            l2.add(l.get(i));\n            List<List<String>> res = combinationsColors(l, n - 1);\n            for (List<String> ll : res) {\n                ll.add(0, l.get(i));\n                ret.add(ll);\n            }\n        }\n        return ret;\n    }\n}","language":"java"}
{"task_id":"MBJP\/256","completion":"        boolean[] primes = new boolean[n];\n        Arrays.fill(primes, true);\n        primes[0] = primes[1] = false;\n        for (int i = 2; i < Math.sqrt(n); i++) {\n            if (primes[i]) {\n                for (int j = i * 2; j < n; j += i)\n                    primes[j] = false;\n            }\n        }\n        int count = 0;\n        for (int i = 2; i < n; i++) {\n            if (primes[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/257","completion":"        List<Integer> list = new ArrayList<>();\n        list.add(a);\n        list.add(b);\n        Collections.reverse(list);\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/258","completion":"        return arrayNums.stream().filter(e -> e % 2 != 0).count();\n    }\n}","language":"java"}
{"task_id":"MBJP\/259","completion":"        int i = 0;\n        int j = 0;\n        for (List<Integer> list: testTup1) {\n            for (Integer integer : list) {\n                i = i < integer ? integer : i;\n            }\n        }\n        for (List<Integer> list: testTup2) {\n            for (Integer integer : list) {\n                j = j < integer ? integer : j;\n            }\n        }\n        int max1 = i;\n        int max2 = j;\n        int max = Math.max(max1, max2);\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> list: testTup1) {\n            for (Integer integer : list) {\n                if (integer == max) {\n                    res.add(list);\n                }\n            }\n        }\n        for (List<Integer> list: testTup2) \n}","language":"java"}
{"task_id":"MBJP\/260","completion":"        if (n == 1) return 2;\n        else if (n == 2) return 3;\n        else if (n == 3) return 5;\n\n        return newmanPrime(n-2) + newmanPrime(n-1) + newmanPrime(n-4);\n    }\n}","language":"java"}
{"task_id":"MBJP\/261","completion":"        int sum1 = 0;\n        int sum2 = 0;\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < testTup1.size(); i++) {\n            sum1 += testTup1.get(i);\n            sum2 += testTup2.get(i);\n        }\n        int n = Math.max(sum1, sum2);\n        int div = sum1 \/ n;\n        int mod = sum2 % n;\n        for (int i = 0; i < testTup1.size(); i++) {\n            result.add(testTup1.get(i) * div + mod);\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/262","completion":"        if (list1.size() < l) {\n            return null;\n        }\n\n        List<List<Object>> result = new ArrayList<List<Object>>();\n        List<Integer> current = new ArrayList<>();\n        for (Integer item: list1) {\n            current.add(item);\n            if (current.size() == l) {\n                result.add(current);\n                current = new ArrayList<>();\n            }\n        }\n\n        if (current.size() > 0) {\n            result.add(current);\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/263","completion":"        HashMap<String, Integer> result = new HashMap<>();\n\n        \/\/ We copy d1 keys into result.\n        for(String key: d1.keySet()) {\n            result.put(key, d1.get(key));\n        }\n\n        \/\/ We copy d2 keys into result.\n        for(String key: d2.keySet()) {\n            result.put(key, d2.get(key));\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/264","completion":"        if (hAge >= 1 && hAge <= 12) {\n            return hAge * 12;\n        } else if (hAge >= 13 && hAge <= 19) {\n            return (hAge - 12) * 4 + 24;\n        } else {\n            return (hAge - 12) * 10 + 26;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/265","completion":"        List<List<Object>> res = new ArrayList<>();\n        for (int i = 0; i < s.size(); i += step) {\n            List<Object> temp = new ArrayList<>();\n            for (int j = i; j <= Math.min(s.size(), i + step); j++) {\n                temp.add(s.get(j));\n            }\n            res.add(temp);\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/266","completion":"        int n=l*l*l;\n        return n*2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/267","completion":"        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += (i + 1) * (i + 1);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/268","completion":"        int a = 1, b = 2, c = 1;\n        for (int i = 1; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}","language":"java"}
{"task_id":"MBJP\/269","completion":"        int asciiValue = (int) k.charAt(0);\n        return asciiValue;\n    }\n}","language":"java"}
{"task_id":"MBJP\/270","completion":"        \/\/ code here\n        int count = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            if (arr.get(i) % 2 == 0) {\n                count += arr.get(i);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) % 2 == 0) {\n                count += arr.get(i);\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/271","completion":"        int sum = 0;\n        for (int i = 1; i <= n; i += 2) {\n            sum += Math.pow(i, 5);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/272","completion":"        List<Integer> result = new ArrayList<>();\n        int n = testList.size();\n        for (int i = n - 1; i >= 0; i--) {\n            result.add((int)testList.get(i).get(2));\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/273","completion":"        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < testTup1.size(); i++) {\n            result.add(testTup1.get(i) - testTup2.get(i));\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/274","completion":"        if (n == 1) {\n            return 1;\n        }\n        int sum = 0;\n        for (int i = 0; i <= n \/ 2; i++) {\n            sum += (i * (n + 1 - 2 * i));\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/275","completion":"        int count = 0;\n        int count2 = 0;\n        for (int i = 0; i < a.size(); i++) {\n            if (a.get(i) == m) {\n                count++;\n                count2 = i;\n            }\n        }\n        if (count == 0) {\n            return -1;\n        } else {\n            count2++;\n            return count2;\n        }\n\n    }\n}","language":"java"}
{"task_id":"MBJP\/276","completion":"        double pi = 3.14;\n        return pi*r*r*h;\n    }\n}","language":"java"}
{"task_id":"MBJP\/277","completion":"        HashMap<String, Integer> res = new HashMap<String, Integer>();\n        for (String key : dict.keySet()) {\n            if (dict.get(key) == n) {\n                res.put(key, dict.get(key));\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/278","completion":"        int count = 0;\n        for (Object element : testTup) {\n            if (element instanceof List) {\n                count += countFirstElements((List<Object>) element);\n            } else {\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/279","completion":"        \/\/ code here\n        int res=0;\n        for(int i=1;i<=n;i++){\n            res+=i*(i+1);\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/280","completion":"        int index = 0;\n        for (Integer element : dlist) {\n            if (element == item) {\n                return Collections.singletonList(index);\n            }\n            index++;\n        }\n        return Collections.singletonList(-1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/281","completion":"        boolean[] unique = new boolean[testList.size()];\n        for (int i = 0; i < testList.size(); i++) {\n            int element = testList.get(i);\n            if (unique[element]) {\n                return false;\n            } else {\n                unique[element] = true;\n            }\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/282","completion":"        return nums2.stream().map(nums2::indexOf).collect(Collectors.toList());\n    }\n}","language":"java"}
{"task_id":"MBJP\/283","completion":"        boolean answer = true;\n        int temp = n;\n        int[] count = new int[10];\n\n        while (temp > 0) {\n            int temp1 = temp % 10;\n            count[temp1]++;\n            temp \/= 10;\n        }\n\n        for (int i = 0; i < 10; i++) {\n            if (count[i] > 1) {\n                answer = false;\n            }\n        }\n\n        return answer;\n    }\n}","language":"java"}
{"task_id":"MBJP\/284","completion":"        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/285","completion":"        char[] ch = text.toCharArray();\n\n        if (ch[0] == 'a' && ch[1] == 'b' && ch[2] == 'b' && ch[3] == 'a') {\n            return \"Found a match!\";\n        }\n\n        return \"Not matched!\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/286","completion":"        if (n < 0 || k < 0)\n            return 0;\n        int curr = a.get(0);\n        int max = curr;\n        for (int i = 1; i < n; i++) {\n            curr += a.get(i);\n            if (curr < 0)\n                curr = 0;\n            max = Math.max(max, curr);\n        }\n        curr = a.get(n - 1);\n        for (int i = n - 1; i < n * k; i++) {\n            curr += a.get(i % n);\n            if (curr < 0)\n                curr = 0;\n            max = Math.max(max, curr);\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/287","completion":"        \/\/ Write your code here\n        int sum = 0;\n        for(int i=0;i<=n;i++){\n            sum += i*i;\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/288","completion":"        int[] A = new int[arr.size()];\n        int[] mod = new int[n];\n\n        for (int i = 0; i < arr.size(); i++) {\n            A[i] = arr.get(i);\n        }\n\n        int result = 0;\n        for (int i = 0; i < n; i++) {\n            mod[i] = (int) (A[i] % p);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (mod[i] == 0) {\n                continue;\n            }\n            result = (result + mod[i] * pow(A[i], n - 1, p)) % p;\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/289","completion":"        int count = 0;\n        if ((n % 4 == 0) && (n % 100 != 0)) {\n            count++;\n        }\n        if ((n % 400 == 0)) {\n            count++;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/290","completion":"        \/\/ write your code here\n        List<Object> list = new ArrayList<Object>();\n        int size = list1.size();\n        int[][] matrix = new int[size][size];\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                matrix[i][j] = list1.get(i).get(j);\n            }\n        }\n        int[][] max = new int[size][size];\n        int max_val = 0;\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                if (max[i][j] < matrix[i][j]) {\n                    max[i][j] = matrix[i][j];\n                    max_val = max[i][j];\n                }\n            }\n        }\n        int[] x = new\n}","language":"java"}
{"task_id":"MBJP\/291","completion":"        \/\/ Write your code here\n        int [][] dp = new int[n+1][k+1];\n\n        for(int i = 0; i<=n; i++){\n            for(int j = 0; j<=k; j++){\n                if(i == 0 && j == 0)\n                    dp[i][j] = 0;\n                else if(i == 0)\n                    dp[i][j] = dp[i][j-1] + 1;\n                else if(j == 0)\n                    dp[i][j] = dp[i-1][j] + 1;\n                else if(dp[i-1][j] < dp[i][j-1])\n                    dp[i][j] = dp[i-1][j] + 1;\n                else\n                    dp[i][j] = dp[i][j-1] + 1;\n            }\n        }\n\n        return dp[n][k];\n    \n}","language":"java"}
{"task_id":"MBJP\/292","completion":"        \/\/ code goes here\n        \/\/ write your code here\n        return n\/m;\n    }\n}","language":"java"}
{"task_id":"MBJP\/293","completion":"        return (w*h)\/2.0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/294","completion":"        int max = 0;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < listval.size(); i++) {\n            if (listval.get(i) instanceof Integer) {\n                max = Math.max(listval.get(i), max);\n            } else {\n                min = Math.min(listval.get(i), min);\n            }\n        }\n        if (min == Integer.MAX_VALUE) {\n            return max;\n        }\n        return max - min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/295","completion":"        \/\/ code here\n        int sum=1;\n        int i=1;\n        while(i<=number\/2){\n            if(number%i==0)\n                sum+=i;\n            i++;\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/296","completion":"        int[] invCount = new int[n];\n        Arrays.fill(invCount, 0);\n\n        int j = 0;\n\n        for (int i = 0; i < n; i++) {\n            while (arr.get(i) > arr.get(j) && j < n) {\n                invCount[j]++;\n                j++;\n            }\n            j++;\n        }\n\n        return Arrays.stream(invCount).sum();\n    }\n}","language":"java"}
{"task_id":"MBJP\/297","completion":"        List<Integer> flattenedList = new ArrayList<>();\n        for (Object i : list1) {\n            if (i instanceof Integer) {\n                flattenedList.add((Integer) i);\n            }\n            if (i instanceof List) {\n                flattenedList.addAll(flattenList((List) i));\n            }\n        }\n        return flattenedList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/298","completion":"        Map<Integer, List<Object>> map1 = new HashMap<>();\n        Map<List<Integer>, List<Object>> map2 = new HashMap<>();\n        for (int i : l1) {\n            map1.put(i, new ArrayList<>());\n        }\n        for (List<Integer> integers : l2) {\n            List<Object> objects = new ArrayList<>();\n            for (int i : integers) {\n                objects.add(map1.get(i));\n            }\n            map2.put(integers, objects);\n        }\n        Set<List<Object>> set = new HashSet<>();\n        for (List<Object> objects : map2.values()) {\n            set.add(objects);\n        }\n        return new ArrayList<>(set);\n    }\n}","language":"java"}
{"task_id":"MBJP\/299","completion":"        Map<String, Integer> map = new HashMap<>();\n        for (List<Object> stdata1 : stdata) {\n            for (Object object : stdata1) {\n                if (!map.containsKey(object)) {\n                    map.put(object.toString(), 0);\n                }\n                map.put(object.toString(), map.get(object.toString()) + 1);\n            }\n        }\n        List<Object> res = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == stdata.size()) {\n                res.add(entry.getKey());\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/300","completion":"        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += (1 << i);\n        }\n        int sumOfLast = 0;\n        double sumOfFirst = 0;\n        int maxBits = (1 << n) - 1;\n        for (int i = 1; i <= maxBits; i++) {\n            sumOfFirst += (1 << i);\n            sumOfLast += (1 << (n - i));\n            double count = (double) (sum - sumOfFirst) \/ (double) (sumOfLast - sumOfFirst);\n            System.out.println(String.format(\"%.0f\", count));\n        }\n        return sum \/ (1 << n);\n    }\n}","language":"java"}
{"task_id":"MBJP\/301","completion":"        if (d == null)\n            return 0;\n        int depth = 0;\n        Set<Map.Entry<String, Object>> set = d.entrySet();\n        for (Map.Entry<String, Object> entry : set) {\n            Object value = entry.getValue();\n            if (value instanceof HashMap) {\n                depth = Math.max(depth, dictDepth((HashMap<String, Object>) value));\n            } else {\n                depth = Math.max(depth, 1);\n            }\n        }\n        return depth;\n    }\n}","language":"java"}
{"task_id":"MBJP\/302","completion":"        return n & -n;\n    }\n}","language":"java"}
{"task_id":"MBJP\/303","completion":"        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (a.get(i) > a.get(i + 1)) {\n                count++;\n            }\n        }\n        return count <= 1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/304","completion":"        int count = 0;\n        int[] range = new int[2];\n        int i = 0;\n        for (i = 0; i < ranges.size(); i++) {\n            range = ranges.get(i).get(0);\n            int j = ranges.get(i).get(1);\n            if (index >= range[0] && index <= range[1]) {\n                count = j - range[0];\n                break;\n            }\n        }\n        return arr.get(count + rotations);\n    }\n}","language":"java"}
{"task_id":"MBJP\/305","completion":"        ArrayList<String> result = new ArrayList<>();\n        for (int i = 0; i < words.size(); i++) {\n            if (words.get(i).startsWith(\"p\")) {\n                result.add(words.get(i));\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/306","completion":"        int i = index;\n        int res = 0, max = 0, maxSoFar = 0;\n        while (i < n && i >= 0) {\n            max = max + a.get(i);\n            if (i == index - 1) {\n                maxSoFar = max;\n            } else {\n                maxSoFar = Math.max(maxSoFar, max);\n            }\n            res = Math.max(res, maxSoFar);\n            i++;\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/307","completion":"        List<Object> tuplexx = new LinkedList<>();\n        for (int i = 0; i < m; i++) {\n            tuplexx.add(tuplex.get(i));\n        }\n        tuplexx.add(n);\n        return tuplexx;\n    }\n}","language":"java"}
{"task_id":"MBJP\/308","completion":"        \/\/ write your code here\n        List<Integer> res = new ArrayList<Integer>();\n        \/\/ sort the lists and get the max number\n        int a = nums1.size() - 1, b = nums2.size() - 1, c = Math.min(a, b);\n        while (n >= c) {\n            if (a > -1 && b > -1) {\n                res.add(nums1.get(a) * nums2.get(b));\n                a--;\n                b--;\n            } else if (a > -1) {\n                res.add(nums1.get(a) * nums2.get(0));\n                a--;\n            } else if (b > -1) {\n                res.add(nums1.get(0) * nums2.get(b));\n                b--;\n            }\n            c = Math.min(a, b);\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/309","completion":"        if (a > b)\n            return a;\n        else\n            return b;\n    }\n}","language":"java"}
{"task_id":"MBJP\/310","completion":"        List<String> strs = new ArrayList<String>();\n        strs.add(str1.substring(0,1));\n        strs.add(str1.substring(1,2));\n        strs.add(str1.substring(2,3));\n        strs.add(str1.substring(3,4));\n        strs.add(str1.substring(4,5));\n        strs.add(str1.substring(5,6));\n        strs.add(str1.substring(6,7));\n        strs.add(str1.substring(7,8));\n        strs.add(str1.substring(8,9));\n        return strs;\n    }\n}","language":"java"}
{"task_id":"MBJP\/311","completion":"        if (n > 0)\n            return n | (n - 1);\n        else\n            return (n & ~(n - 1));\n    }\n}","language":"java"}
{"task_id":"MBJP\/312","completion":"        return (Math.PI*r*r*h)\/3.0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/313","completion":"        int min = Integer.MAX_VALUE;\n        List<Integer> res = new ArrayList<Integer>();\n\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) > 0 && list1.get(i) < min) {\n                min = list1.get(i);\n            }\n        }\n\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) > 0 && list1.get(i) == min) {\n                res.add(list1.get(i));\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/314","completion":"        int[][][] dp = new int[n + 1][n + 1][2];\n        int[][][] dp2 = new int[n + 1][n + 1][2];\n        int[][][] dp3 = new int[n + 1][n + 1][2];\n\n        for (int i = 1; i <= n; i++) {\n            dp[i][i][1] = grid.get(i - 1).get(i - 1);\n        }\n\n        for (int i = 1; i <= n; i++) {\n            for (int j = i; j <= n; j++) {\n                for (int k = 0; k < 2; k++) {\n                    int tmp = 0;\n                    if (i - 1 >= 0 && j - 1 >= 0 && k == 0) {\n                        tmp = dp[i - 1][j \n}","language":"java"}
{"task_id":"MBJP\/315","completion":"        int max = 0;\n        int start = 0;\n        int end = 0;\n\n        for(int i=0; i<str.length(); i++) {\n            if(str.charAt(i) == ' ') {\n                start = i+1;\n                end = start;\n            }\n            if(str.charAt(i) == 'e') {\n                if(end-start > max) {\n                    max = end-start;\n                }\n                start = i+1;\n            }\n        }\n\n        if(end-start > max) {\n            max = end-start;\n        }\n\n        if(max == 0) {\n            return \"-1\";\n        }\n        else {\n            return str.substring(start, end);\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/316","completion":"        int left = 0, right = a.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) \/ 2;\n            if (a.get(mid) == x) {\n                if (mid == a.size() - 1 || a.get(mid + 1) != x) {\n                    return mid;\n                } else {\n                    left = mid + 1;\n                }\n            } else if (a.get(mid) < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/317","completion":"        Stack<Object> st = new Stack<>();\n        List<Object> res = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < alist.size(); i++) {\n            if (alist.get(i) != 1) {\n                if (st.isEmpty()) {\n                    st.push(alist.get(i));\n                } else if (alist.get(i) == st.peek()) {\n                    st.pop();\n                    count++;\n                } else {\n                    if (count > 0) {\n                        res.add(Arrays.asList(st.peek(), count));\n                        st.pop();\n                        count = 0;\n                    }\n                    st.push(alist.get(i));\n                }\n            } else {\n                count = 0;\n                if (st.isEmpty()) {\n                    st.push(alist.get(i));\n                }\n}","language":"java"}
{"task_id":"MBJP\/318","completion":"        \/\/Write your code here\n        return (s*(s+1)\/2);\n    }\n}","language":"java"}
{"task_id":"MBJP\/319","completion":"        String regex = \"\\\\b[A-Za-z]{5}\\\\b\";\n        return Arrays.asList(text.split(regex));\n    }\n}","language":"java"}
{"task_id":"MBJP\/320","completion":"        int sum = 0, sumSq = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n            sumSq += (i * i);\n        }\n        return (sumSq - sum * sum);\n    }\n}","language":"java"}
{"task_id":"MBJP\/321","completion":"        char[] array = s.toCharArray();\n        int count = 0;\n\n        for (int i = 0; i < array.length - 4; i++) {\n            int num = (array[i] - '0') * 10 + (array[i + 1] - '0') * 1 + (array[i + 2] - '0') * 1 + (array[i + 3] - '0') * 1;\n            int demlo = num * 10 + (array[i + 4] - '0') * 1;\n\n            if (demlo < num) {\n                count++;\n            }\n        }\n\n        return s + count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/322","completion":"        \/\/ write code here\n        int minimum = list1.get(0);\n        int index = 0;\n        for (int i = 1; i < list1.size(); i++) {\n            if (list1.get(i) < minimum) {\n                minimum = list1.get(i);\n                index = i;\n            }\n        }\n        List<Integer> res = new LinkedList<>();\n        res.add(index);\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/323","completion":"        \/\/ write your code here\n        int left = 0, right = n - 1;\n        while (left < right) {\n            if (arr.get(left) < 0 && arr.get(right) >= 0) {\n                Collections.swap(arr, left, right);\n                left++;\n                right--;\n            } else if (arr.get(left) >= 0 && arr.get(right) < 0) {\n                Collections.swap(arr, left, right);\n                left++;\n            } else if (arr.get(left) < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        return arr;\n    }\n}","language":"java"}
{"task_id":"MBJP\/324","completion":"        int n = testTuple.size();\n        int totalSum = 0;\n        List<Integer> result = new ArrayList<Integer>();\n        result.add(0,0);\n        for (int i = 1; i < n; i++) {\n            totalSum += testTuple.get(i);\n            result.add(i+1,totalSum);\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/325","completion":"        int minSquares = 0;\n        int sqrt = (int) Math.sqrt(n);\n        int left = sqrt;\n        int right = sqrt;\n        while(left <= right) {\n            int square = left * left + right * right;\n            if(square == n)\n                return 1;\n            else if(square > n)\n                right--;\n            else\n                left++;\n            minSquares++;\n        }\n        return minSquares;\n    }\n}","language":"java"}
{"task_id":"MBJP\/326","completion":"        \/\/ write your code here\n        HashMap<String, Integer> map = new HashMap<>();\n        for (String s : testList) {\n            String[] splited = s.split(\" \");\n            for (String str : splited) {\n                if (map.containsKey(str)) {\n                    map.put(str, map.get(str) + 1);\n                } else {\n                    map.put(str, 1);\n                }\n            }\n        }\n        int maxValue = 0;\n        String res = \"\";\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > maxValue) {\n                res = entry.getKey();\n                maxValue = entry.getValue();\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/327","completion":"        \/\/ write your code here\n        return (x + y > z) && (x + z > y) && (y + z > x);\n    }\n}","language":"java"}
{"task_id":"MBJP\/328","completion":"        if (m == 0) {\n            return list1;\n        }\n        if (n == 0) {\n            return list1;\n        }\n        int size = list1.size();\n        if (m > size) {\n            m = m % size;\n        }\n        if (n > size) {\n            n = n % size;\n        }\n        List<Integer> list = new ArrayList<>();\n        for (int i = n - m; i < n; i++) {\n            list.add(list1.get(i));\n        }\n        for (int i = 0; i < m; i++) {\n            list.add(list1.get(i));\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/329","completion":"        int count = 0;\n        for(int i = 0; i< list.size(); i++){\n            if(list.get(i) < 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/330","completion":"        List<String> result = new ArrayList<>();\n        \/\/ Write your code here\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/331","completion":"        int count = 0;\n        while (n != 0) {\n            count += (n & 1);\n            n >>= 1;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/332","completion":"        HashMap<String, Integer> freqMap = new HashMap<>();\n        int length = str1.length();\n        for (int i = 0; i < length; i++) {\n            String c = String.valueOf(str1.charAt(i));\n            if (freqMap.containsKey(c)) {\n                freqMap.put(c, freqMap.get(c) + 1);\n            } else {\n                freqMap.put(c, 1);\n            }\n        }\n        return freqMap;\n    }\n}","language":"java"}
{"task_id":"MBJP\/333","completion":"        List<List<Object>> li = new ArrayList<>();\n        for (int i = 0; i < subLi.size(); i++) {\n            for (int j = i + 1; j < subLi.size(); j++) {\n                if (subLi.get(i).get(1).equals(subLi.get(j).get(1))) {\n                    int temp = (Integer) subLi.get(i).get(1);\n                    subLi.get(i).set(1, subLi.get(j).get(1));\n                    subLi.get(j).set(1, temp);\n                }\n            }\n        }\n        return li;\n    }\n}","language":"java"}
{"task_id":"MBJP\/334","completion":"        if (a + b <= c || a + c <= b || c + b <= a)\n            return false;\n        else\n            return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/335","completion":"        return (a + d*n);\n    }\n}","language":"java"}
{"task_id":"MBJP\/336","completion":"        int days = 0;\n        for (int i = 0; i < monthname1.length(); i++) {\n            if (Character.isDigit(monthname1.charAt(i))) {\n                days += Integer.parseInt(monthname1.charAt(i) + \"\");\n            }\n        }\n        return days == 28;\n    }\n}","language":"java"}
{"task_id":"MBJP\/337","completion":"        \/\/code here\n        String result = \"Not matched!\";\n        String word = \"python.\";\n        char[] str = text.toCharArray();\n\n        boolean start = false;\n        for (int i = 0; i < str.length; i++) {\n            if (str[i] == ' ') {\n                start = true;\n                continue;\n            }\n            if (start) {\n                if (str[i] == word.charAt(word.length() - 1)) {\n                    if (word.length() - 1 > 0) {\n                        word = word.substring(0, word.length() - 1);\n                    } else {\n                        result = \"Found a match!\";\n                        break;\n                    }\n                } else {\n                    result = \"Not matched!\";\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/338","completion":"        int count = 0;\n        int len = s.length();\n        for (int i = 0; i < len - 1; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/339","completion":"        int r = x % y;\n        if (r == 0) {\n            return y;\n        } else {\n            return findDivisor(y, r);\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/340","completion":"        int first = Integer.MAX_VALUE;\n        int second = Integer.MAX_VALUE;\n        int third = Integer.MAX_VALUE;\n\n        for (int i = 0; i < lst.size(); i++) {\n            if (first > lst.get(i)) {\n                second = third;\n                third = first;\n                first = lst.get(i);\n            } else if (second > lst.get(i)) {\n                third = first;\n                first = second;\n                second = lst.get(i);\n            } else if (third > lst.get(i)) {\n                third = lst.get(i);\n            }\n        }\n\n        return first + second + third;\n    }\n}","language":"java"}
{"task_id":"MBJP\/341","completion":"        ArrayList<Integer> list = new ArrayList<Integer>();\n\n        for (int i : s) {\n            list.add(i);\n        }\n\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/342","completion":"        int left = Integer.MAX_VALUE, right = Integer.MIN_VALUE, length = list.size(), max = 0;\n        for (List<Integer> l : list) {\n            if (l.size() > max) max = l.size();\n        }\n        List<Integer> temp = new ArrayList<Integer>();\n        for (int i = 0; i < length; i++) {\n            if (list.get(i).size() == max) {\n                temp.add(0);\n                temp.add(list.get(i).size() - 1);\n            }\n        }\n\n        for (int i = 0; i < temp.size() - 1; i = i + 2) {\n            if (temp.get(i) < left) {\n                left = temp.get(i);\n            }\n            if (temp.get(i + 1) > right) {\n                right = temp\n}","language":"java"}
{"task_id":"MBJP\/343","completion":"        int n = s.length();\n        List<Integer> res = new LinkedList<>();\n        res.add(0);\n        res.add(0);\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n                res.set(0, res.get(0) + 1);\n            } else if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                res.set(0, res.get(0) + 1);\n            }\n            if (s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n                res.set(1, res.get(1) + 1);\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/344","completion":"        int count = 0;\n        for (int i = n; i <= m; i++) {\n            int sq = i * i;\n            int div = 1;\n            for (int j = 2; j < sq; j++) {\n                if (sq % j == 0) {\n                    div++;\n                }\n            }\n            if (div % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/345","completion":"        List<Integer> diff = new ArrayList<>();\n        int num_size = nums.size();\n        int diff_index = 0;\n        for (int i = 0; i < num_size; i++) {\n            if (i == 0) {\n                diff.add(0);\n                diff_index = diff.size();\n            } else {\n                int prev = nums.get(i - 1);\n                int curr = nums.get(i);\n                if (prev == curr + 1) {\n                    diff.set(diff_index, diff.get(diff_index) + 1);\n                } else if (prev + 1 == curr) {\n                    diff_index = diff_index == diff.size() ? diff_index - 1 : diff_index;\n                    diff.set(diff_index, diff.get(diff_index) - 1);\n                }\n            }\n        }\n        return diff;\n}","language":"java"}
{"task_id":"MBJP\/346","completion":"        int count = 1;\n        for (int i = 0; i < k; i++) {\n            count *= (n - i);\n            count \/= (i + 1);\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/347","completion":"        int result = 0;\n        if (m == 1) {\n            result = n;\n        } else if (n == 1) {\n            result = m;\n        } else {\n            int min = Math.min(m, n);\n            result = min * min;\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/348","completion":"        int[] a = new int[m + 1];\n        Arrays.fill(a, 0);\n\n        a[0] = 1;\n\n        for (int i = 1; i < m + 1; ++i)\n            for (int j = 1; j < i + 1; ++j)\n                a[i] += a[j - 1];\n\n        return a[m];\n    }\n}","language":"java"}
{"task_id":"MBJP\/349","completion":"        if (string.matches(\"^[01]*$\")) {\n            return \"Yes\";\n        }\n        else {\n            return \"No\";\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/350","completion":"        int result = s.length();\n        for (int i = 0; i < s.length(); i++) {\n            int count = 1;\n            char ch = s.charAt(i);\n            for (int j = i + 1; j < s.length(); j++) {\n                if (s.charAt(j) == ch) {\n                    count++;\n                    result = Math.min(count, result);\n                }\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/351","completion":"        int i = 0;\n        int temp = 0;\n        if (k > n)\n            return -1;\n\n        for (i = 0; i < n; i++) {\n            temp = arr.get(i);\n            if (temp == k) {\n                break;\n            }\n        }\n        return arr.get(i);\n    }\n}","language":"java"}
{"task_id":"MBJP\/352","completion":"        Set<Character> uniqueChar = new HashSet<>();\n        for (char ch : str.toCharArray()) {\n            if (!uniqueChar.add(ch)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/353","completion":"        List<List<Integer>> list = new ArrayList<List<Integer>>();\n        int j=0;\n        for(int i=0; i<list1.size(); i++){\n            if(j<list1.get(i).size()){\n                list.add(list1.get(i).subList(0, j));\n            }\n            else{\n                list.add(list1.get(i));\n            }\n            j++;\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/354","completion":"        int res = 1;\n        for (int i = 1; i <= n; i++) {\n            res *= (a - 1) \/ i;\n        }\n        return d == 1 ? res : res * d;\n    }\n}","language":"java"}
{"task_id":"MBJP\/355","completion":"        return 0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/356","completion":"        return 180 - (a + b);\n    }\n}","language":"java"}
{"task_id":"MBJP\/357","completion":"        int max = 0;\n        for (List<Integer> list : testList) {\n            for (Integer i : list) {\n                max = Math.max(i, max);\n            }\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/358","completion":"        List<Integer> result = new ArrayList<>();\n\n        \/\/ TODO\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/359","completion":"        if ( (b*b - 4*a*c) < 0) {\n            return \"No\";\n        }\n        if (b*b - 4*a*c == 0) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/360","completion":"        int carol = 0;\n        for(int i = 1; i < n; i++){\n            carol = carol * (i + 1);\n        }\n        return carol;\n    }\n}","language":"java"}
{"task_id":"MBJP\/361","completion":"        List<Object> list2 = new ArrayList<Object>();\n\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) instanceof List) {\n                List<Object> subList = removeEmpty((List<Object>) list1.get(i));\n\n                if (subList.size() != 0) {\n                    list2.add(subList);\n                }\n            } else if (list1.get(i) != null) {\n                list2.add(list1.get(i));\n            }\n        }\n\n        return list2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/362","completion":"        Map<Integer, Integer> occur = new HashMap<>();\n        for (int num : nums) {\n            if (occur.containsKey(num)) {\n                occur.put(num, occur.get(num) + 1);\n            } else {\n                occur.put(num, 1);\n            }\n        }\n        Map.Entry<Integer, Integer> maxEntry = null;\n        for (Map.Entry<Integer, Integer> entry : occur.entrySet()) {\n            if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();\n    }\n}","language":"java"}
{"task_id":"MBJP\/363","completion":"        List<List<Integer>> result = new ArrayList<List<Integer>>();\n        for (List<Integer> list : testList) {\n            List<Integer> newList = new ArrayList<Integer>();\n            newList.addAll(list);\n            for (int i = 0; i < k - 1; i++) {\n                newList.add(0, list.get(0));\n                list.remove(0);\n            }\n            result.add(newList);\n        }\n        result.addAll(testList);\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/364","completion":"        int count = 0;\n        int count2 = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == '0') {\n                count++;\n                count2 = 0;\n            } else {\n                count2++;\n            }\n            if (count == count2) {\n                return count;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/365","completion":"        return (int) Math.log10(n) + 1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/366","completion":"        if (listNums == null || listNums.size() < 2) {\n            return 0;\n        }\n\n        int result = 0;\n        int maxDiff = 0;\n        int minDiff = Integer.MAX_VALUE;\n        int idx = 0;\n\n        for (int i = 0; i < listNums.size() - 1; i++) {\n            int diff = listNums.get(i) * listNums.get(i + 1);\n\n            if (diff > maxDiff) {\n                maxDiff = diff;\n                idx = i;\n            }\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n\n        result = maxDiff;\n        if (result == 0) {\n            result = minDiff;\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/368","completion":"        List<List<Integer>> ans = new ArrayList<List<Integer>>();\n        for (int i = 0; i < n; i++) {\n            ans.add(new ArrayList<Integer>(testTup));\n        }\n        return ans;\n    }\n}","language":"java"}
{"task_id":"MBJP\/369","completion":"        return ((2 * l * h) + (2 * w * h) + (2 * h * l));\n    }\n}","language":"java"}
{"task_id":"MBJP\/370","completion":"        Collections.sort(price, new Comparator<List<String>>() {\n            @Override\n            public int compare(List<String> o1, List<String> o2) {\n                return Float.compare(Float.parseFloat(o1.get(1)), Float.parseFloat(o2.get(1)));\n            }\n        });\n        return price;\n    }\n}","language":"java"}
{"task_id":"MBJP\/371","completion":"        if (a.size() == 1) {\n            if (a.get(0) == 1 || a.get(0) == 2) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        }\n        \n        int midElement = (leftElement + rightElement) \/ 2;\n        int element = a.get(midElement);\n        \n        if (element == midElement) {\n            return smallestMissing(a, leftElement, midElement - 1);\n        }\n        else if (element == rightElement + 1) {\n            return smallestMissing(a, midElement + 1, rightElement);\n        }\n        else if (element > midElement) {\n            return smallestMissing(a, midElement + 1, rightElement);\n        }\n        else if (element < midElement) {\n            return smallestMissing(a, leftElement, midElement - 1);\n\n}","language":"java"}
{"task_id":"MBJP\/372","completion":"        Queue<Integer> heap = new PriorityQueue<>();\n\n        for (int i = 0; i < nums.size(); i++) {\n            heap.add(nums.get(i));\n        }\n        List<Integer> result = new ArrayList<>();\n        while (!heap.isEmpty()) {\n            result.add(heap.remove());\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/373","completion":"        return (l * w * h);\n    }\n}","language":"java"}
{"task_id":"MBJP\/374","completion":"        return permuteHelper(str, new ArrayList<>());\n    }\n}","language":"java"}
{"task_id":"MBJP\/375","completion":"        int remainder = n % m;\n        return n - remainder + (m - remainder);\n    }\n}","language":"java"}
{"task_id":"MBJP\/376","completion":"        Set<Integer> temp = new HashSet<Integer>();\n        List<Object> returnList = new ArrayList<Object>();\n        for (Integer i : testTup) {\n            if (!temp.contains(i)) {\n                temp.add(i);\n                returnList.add(i);\n                returnList.add(\"MSP\");\n            }\n        }\n        return returnList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/377","completion":"        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) != c.charAt(0)) {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/378","completion":"        \/\/ write your code here\n        testList.add(0, testList.remove(testList.size() - 1));\n        return testList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/379","completion":"        return 2*l*w + 2*w*h + 2*h*l;\n    }\n}","language":"java"}
{"task_id":"MBJP\/380","completion":"        List<List<Integer>> result = new ArrayList<List<Integer>>();\n        List<Integer> tempList;\n        int total = rownum * colnum;\n        for (int i = 0; i < total; i++) {\n            tempList = new ArrayList<Integer>();\n            tempList.add(i);\n            result.add(tempList);\n        }\n\n        int col = 0;\n        int row = 0;\n        while (col < colnum && row < rownum) {\n            int nextRow = row + 1;\n            int nextCol = col + 1;\n\n            for (; nextRow < rownum; nextRow++) {\n                for (; nextCol < colnum; nextCol++) {\n                    result.get(nextCol * rownum + nextRow).add(col * rownum + row);\n                }\n            }\n            row = nextRow;\n            col = nextCol;\n        }\n        return result;\n    \n}","language":"java"}
{"task_id":"MBJP\/381","completion":"        Collections.sort(listData, new Comparator<List<Object>>() {\n            public int compare(List<Object> list1, List<Object> list2) {\n                return ((Comparable)list1.get(indexNo)).compareTo(list2.get(indexNo));\n            }\n        });\n        return listData;\n    }\n}","language":"java"}
{"task_id":"MBJP\/382","completion":"        int min = min(a);\n        int mid = min;\n        int start = 0;\n        int end = a.size() - 1;\n        while (start <= end) {\n            mid = start + (end - start) \/ 2;\n            if (a.get(mid) > a.get(mid + 1)) {\n                return mid + 1;\n            } else if (a.get(mid - 1) > a.get(mid)) {\n                return mid;\n            } else if (a.get(mid) > a.get(start)) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return 0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/383","completion":"        n |= n >> 1;\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        return n;\n    }\n}","language":"java"}
{"task_id":"MBJP\/384","completion":"        int f = 0, min = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(min)) {\n                min = i;\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(min) == arr.get(i)) {\n                f++;\n            }\n        }\n        return f;\n    }\n}","language":"java"}
{"task_id":"MBJP\/385","completion":"        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return (getPerrin(n - 1) + getPerrin(n - 2)) % 10;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/386","completion":"        int counter = 0;\n        Stack<Character> st = new Stack<>();\n        for(char i: s.toCharArray()) {\n            st.push(i);\n        }\n        while(!st.isEmpty()) {\n            char temp = st.peek();\n            if(temp == '[' || temp == '(' || temp == '{') {\n                st.pop();\n            }\n            else {\n                st.push(temp);\n                st.pop();\n                counter++;\n            }\n        }\n        return counter;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int t = scanner.nextInt();\n        scanner.nextLine();\n        while(t-- > 0) {\n            String s = scanner.nextLine();\n            System.out.println(swapCount(s));\n        }\n    }\n}\n}","language":"java"}
{"task_id":"MBJP\/387","completion":"        int number = Integer.parseInt(n, 16);\n        return number % 2 == 0 ? \"Even\" : \"Odd\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/388","completion":"        return (int)Math.pow(2, Math.floor(Math.log(n)\/Math.log(2)));\n    }\n}","language":"java"}
{"task_id":"MBJP\/389","completion":"        if (n == 1) return 2;\n        else {\n            return (n + findLucas(n - 1));\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/390","completion":"        \/\/ write your code here\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < list.size(); i++) {\n            result.add(string.replace(\"{0}\", list.get(i).toString()));\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/391","completion":"        \/\/ Write your code here\n        int i = 0;\n        List<HashMap<String, HashMap<String, Integer>>> result = new ArrayList<HashMap<String, HashMap<String, Integer>>>();\n        while (i < l1.size()) {\n            HashMap<String, HashMap<String, Integer>> temp = new HashMap<>();\n            int j = 0;\n            while (j < l2.size()) {\n                HashMap<String, Integer> temp2 = new HashMap<>();\n                temp2.put(l2.get(j), l3.get(j));\n                temp.put(l1.get(i), temp2);\n                j++;\n            }\n            result.add(temp);\n            i++;\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/392","completion":"        int[] nums = new int[n + 1];\n        nums[0] = 0;\n        nums[1] = 0;\n\n        for (int i = 2; i < nums.length; i++) {\n            nums[i] = nums[i \/ 2] + nums[i \/ 3] + nums[i \/ 4] + nums[i \/ 5];\n        }\n\n        return nums[n];\n    }\n}","language":"java"}
{"task_id":"MBJP\/393","completion":"        List<Object> res = new ArrayList<>();\n        Collections.sort(inputList, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> a, List<Integer> b) {\n                return (a.size() - b.size());\n            }\n        });\n        res.add(inputList.get(0).size());\n        for (List<Integer> l : inputList) {\n            if (l.size() != res.get(0)) {\n                return new ArrayList<>();\n            }\n        }\n        return inputList.get(0);\n    }\n}","language":"java"}
{"task_id":"MBJP\/394","completion":"        HashSet<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < testTup.size(); i++) {\n            if (!set.add(testTup.get(i)))\n                return false;\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/395","completion":"        for (int i = 0; i < str1.length(); i++) {\n            for (int j = i + 1; j < str1.length(); j++) {\n                if (str1.charAt(i) == str1.charAt(j)) {\n                    return str1.charAt(i) + \"\";\n                }\n            }\n        }\n        return null;\n    }\n}","language":"java"}
{"task_id":"MBJP\/396","completion":"        String firstChar = \"^(.)\\\\1*$\";\n        String secondChar = \"^(.)\\\\1+$\";\n        if (string.matches(firstChar) || string.matches(secondChar)) {\n            return \"Valid\";\n        } else {\n            return \"Invalid\";\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/397","completion":"        return (a + b + c) \/ 3;\n    }\n}","language":"java"}
{"task_id":"MBJP\/398","completion":"        \/\/ code here\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/399","completion":"        List<Integer> result = new ArrayList<>();\n\n        int max1 = Collections.max(testTup1);\n        int max2 = Collections.max(testTup2);\n\n        for (int i = 0; i < max1; i++) {\n            int xor = testTup1.get(i) ^ testTup2.get(i);\n            result.add(xor);\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/400","completion":"        int count = 0;\n        List<List<Integer>> uniqueList = new ArrayList<>();\n        for(int i=0;i<testList.size();i++){\n            List<Integer> temp = new ArrayList<>();\n            for(int j=0;j<testList.get(i).size();j++){\n                temp.add(testList.get(i).get(j));\n            }\n            uniqueList.add(temp);\n        }\n        Collections.sort(uniqueList, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> list1, List<Integer> list2) {\n                int size1 = list1.size();\n                int size2 = list2.size();\n                int minSize = Math.min(size1,size2);\n                for(int i=0;i<minSize;i++){\n                    if(list1.get(i)!=list2.get(i)){\n                        return list1.get(i)-list2.get(i);\n                    }\n               \n}","language":"java"}
{"task_id":"MBJP\/401","completion":"        List<List<Integer>> res = new ArrayList<List<Integer>>();\n        int i = 0;\n        for (List<Integer> testTup1_i: testTup1) {\n            int j = 0;\n            for (List<Integer> testTup2_i: testTup2) {\n                List<Integer> add = new ArrayList<Integer>();\n                add.add(testTup1_i.get(i) + testTup2_i.get(j));\n                res.add(add);\n                j++;\n            }\n            i++;\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/402","completion":"        if (r == 0) {\n            return 1;\n        }\n        int q = ncrModp(n, r - 1, p);\n        int mod = (n - 1) % p;\n        return (q * mod) % p;\n    }\n}","language":"java"}
{"task_id":"MBJP\/403","completion":"        if (str == null)\n            return false;\n        else\n            return str.matches(\"https?:\\\\\/\\\\\/.+\");\n    }\n}","language":"java"}
{"task_id":"MBJP\/404","completion":"        if (a < b) {\n            return a;\n        }\n        return b;\n    }\n}","language":"java"}
{"task_id":"MBJP\/405","completion":"        return tuplex.contains(tuple1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/406","completion":"        if (x % 2 == 0) {\n            return \"Even Parity\";\n        }\n        else {\n            return \"Odd Parity\";\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/407","completion":"        StringBuilder sb = new StringBuilder(n+\"\");\n        List<Integer> list = new ArrayList<>();\n        for(int i=0;i<sb.length();i++){\n            list.add(sb.charAt(i)-'0');\n        }\n        Collections.sort(list,Collections.reverseOrder());\n        for(Integer i:list){\n            sb.append(i);\n        }\n        return sb.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/408","completion":"        \/\/ code here\n        PriorityQueue<Pair> pq = new PriorityQueue<>(new PairComparator());\n        List<List<Integer>> result = new ArrayList<>();\n\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                if (pq.size() < k) {\n                    pq.add(new Pair(nums1.get(i), nums2.get(j)));\n                } else {\n                    if (pq.peek().get(0) + pq.peek().get(1) < pq.peek().get(0) + nums2.get(j)) {\n                        pq.poll();\n                        pq.add(new Pair(nums1.get(i), nums2.get(j)));\n                    }\n                }\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            result.add(new ArrayList<>(Arrays.asList(pq.poll().\n}","language":"java"}
{"task_id":"MBJP\/409","completion":"        \/\/ Write your code here\n        int[] arr = new int[list1.size()];\n        for (int i = 0; i < list1.size(); i++) {\n            int min = list1.get(i).get(0);\n            int max = list1.get(i).get(1);\n            arr[i] = max * min;\n        }\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < list1.size(); i++) {\n            int s = 0;\n            for (int j = i + 1; j < list1.size(); j++) {\n                s += arr[j] - arr[i];\n            }\n            if (s < min) {\n                min = s;\n            }\n        }\n        return min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/410","completion":"        int min = Integer.MAX_VALUE;\n        for (Object obj : listval) {\n            if (obj instanceof Integer) {\n                min = Math.min((int) obj, min);\n            } else {\n                min = ((String) obj).compareTo((String) listval.get(0)) < 0 ? ((String) obj).compareTo((String) listval.get(0)) : min;\n            }\n        }\n        return min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/411","completion":"        String[] wordSplit = word.split(\"_\");\n        StringBuilder sb = new StringBuilder();\n        for(int i=0; i< wordSplit.length; i++){\n            sb.append(wordSplit[i].substring(0,1).toUpperCase() + wordSplit[i].substring(1,wordSplit[i].length()).toLowerCase());\n            if(i != wordSplit.length-1)\n                sb.append(\"_\");\n        }\n        return sb.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/412","completion":"        l.removeIf(i -> i % 2 == 1);\n        return l;\n    }\n}","language":"java"}
{"task_id":"MBJP\/413","completion":"        if(n < 0 || n >= list1.size()) return null;\n        List<Object> ret = new ArrayList<>();\n        List<Object> temp = new ArrayList<>();\n        for(List<Object> list : list1) {\n            if(temp.size() >= n) {\n                ret.add(temp.get(n-1));\n                temp.remove(n-1);\n            }\n            temp.add(list.get(n));\n        }\n        return ret;\n    }\n}","language":"java"}
{"task_id":"MBJP\/414","completion":"        \/\/ write your code here\n        return list1.containsAll(list2);\n    }\n}","language":"java"}
{"task_id":"MBJP\/415","completion":"        \/\/Write your code here\n        return null;\n    }\n}","language":"java"}
{"task_id":"MBJP\/416","completion":"        if (n <= 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else {\n            return breaksum(n - 1) + breaksum(n - 2) + breaksum(n - 3);\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/417","completion":"        List<List<String>> results = new ArrayList<>();\n        input.forEach(e -> {\n            if (!results.contains(e)) {\n                results.add(e);\n            }\n            if (!input.contains(e)) {\n                results.remove(e);\n            }\n        });\n        return results;\n    }\n}","language":"java"}
{"task_id":"MBJP\/418","completion":"        \/\/ Your code goes here\n        int length=0;\n        String max_s=\"\";\n        for(List<String> list: lst)\n        {\n            if(list.size()>=length)\n            {\n                length=list.size();\n                max_s=list.get(0);\n            }\n        }\n        List<Object> ans=new ArrayList<Object>();\n        for(int i=0;i<length;i++)\n        {\n            ans.add(max_s.charAt(i));\n        }\n        return ans;\n    }\n}","language":"java"}
{"task_id":"MBJP\/419","completion":"        int sum = 0;\n        int count = 0;\n        double round = 0.0;\n        double rounder = 0.0;\n        double rounder1 = 0.0;\n        double sum1 = 0.0;\n        double sum2 = 0.0;\n        double sum3 = 0.0;\n        double sum4 = 0.0;\n        double sum5 = 0.0;\n        for (double i : list1) {\n            rounder = Math.round(i);\n            sum1 = sum1 + rounder;\n            count++;\n        }\n        round = sum1 \/ count;\n        System.out.println(\"Round : \" + round);\n        sum1 = 0.0;\n        for (double i : list1) {\n            rounder1 = Math.round(i - round);\n            sum2 = sum2 + rounder1;\n        }\n        System.out.println(\"S\n}","language":"java"}
{"task_id":"MBJP\/420","completion":"        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/421","completion":"        String res = \"\";\n\n        for (int i = 0; i < testTup.size(); i++) {\n            if (i > 0) {\n                res = res + \"-\";\n            }\n            res = res + testTup.get(i);\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/422","completion":"        \/\/write code here\n        int sum=0;\n        double cube=0.0;\n        int i =0;\n        while(i<n)\n        {\n            sum=sum+i*i*i;\n            i++;\n        }\n        cube=Math.pow(sum\/n,1\/3.0);\n        return cube;\n    }\n}","language":"java"}
{"task_id":"MBJP\/423","completion":"        \/\/ Write your code here\n        int[][] mat = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (gold.get(i).get(j) > 0) {\n                    mat[i][j] = gold.get(i).get(j);\n                } else {\n                    mat[i][j] = Integer.MAX_VALUE;\n                }\n            }\n        }\n\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (j > 0 && mat[i][j] < mat[i][j - 1]) {\n                    mat[i][j] = mat[i][j - 1];\n                }\n                if (i > 0 && mat[i\n}","language":"java"}
{"task_id":"MBJP\/424","completion":"        List<String> rear = new ArrayList<>();\n        for (int i = testTuple.size() - 1; i >= 0; i--) {\n            rear.add(testTuple.get(i));\n        }\n        return rear;\n    }\n}","language":"java"}
{"task_id":"MBJP\/425","completion":"        int count = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            List<Integer> list2 = list1.get(i);\n            int index = 0;\n            for (int j = 0; j < list2.size(); j++) {\n                if (list2.get(j) == x) {\n                    count++;\n                    index = j;\n                    break;\n                }\n            }\n            if (index != list2.size() - 1) {\n                list2.subList(index + 1, list2.size()).clear();\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/426","completion":"        List<Integer> result = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 != 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/427","completion":"        String regex = \"\\\\-\";\n        String regex1 = \"\\\\d\\\\d\\\\d\\\\-\\\\d\\\\d\\\\-\\\\d\\\\d\";\n        dt = dt.replace(regex,\"\");\n        dt = dt.replace(regex1,\"-\");\n        return dt;\n    }\n}","language":"java"}
{"task_id":"MBJP\/428","completion":"        int gap = myList.size() \/ 2;\n        while (gap > 0) {\n            for (int i = gap; i < myList.size(); i++) {\n                int j = i;\n                int temp = myList.get(i);\n\n                \/\/ Compare the elements while they are in the gap\n                while (j >= gap && myList.get(j - gap) > temp) {\n                    myList.set(j, myList.get(j - gap));\n                    j -= gap;\n                }\n\n                myList.set(j, temp);\n            }\n\n            gap \/= 2;\n        }\n\n        return myList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/429","completion":"        List<Integer> list1 = new ArrayList<>();\n        List<Integer> list2 = new ArrayList<>();\n\n        \/\/ adding each element of testTup1 to list1 and testTup2 to list2\n        for (int i : testTup1) {\n            list1.add(i);\n        }\n        for (int i : testTup2) {\n            list2.add(i);\n        }\n\n        List<Integer> list3 = new ArrayList<>();\n\n        \/\/ traversing both the lists and checking if there exists a common element\n        for (int i = 0; i < list1.size(); i++) {\n            for (int j = 0; j < list2.size(); j++) {\n                if (list1.get(i) == list2.get(j)) {\n                    list3.add(1);\n                }\n            }\n        }\n        \/\/ if there exists a common element return 1 in list3, else return 0\n        return list3;\n}","language":"java"}
{"task_id":"MBJP\/430","completion":"        return (int)Math.pow(c, 2) - (4 * a * c) + (int)Math.pow(b, 2);\n    }\n}","language":"java"}
{"task_id":"MBJP\/431","completion":"        int i = 0;\n        int j = 0;\n        int k = 0;\n        while (i < list1.size() && j < list2.size()) {\n            if (list1.get(i).equals(list2.get(j))) {\n                k++;\n            }\n            i++;\n            j++;\n        }\n        if (k > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/432","completion":"        return (base1+base2+height)\/2.0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/433","completion":"        int num = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (number > arr.get(i)) {\n                num = arr.get(i);\n            }\n        }\n        if (num == -1) {\n            return \"No, entered number is less than those in the array\";\n        } else {\n            return \"Yes, the entered number is greater than those in the array\";\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/434","completion":"        if (text.indexOf('a') < text.lastIndexOf('b'))\n            return \"Found a match!\";\n        return \"Not matched!\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/435","completion":"        int res = 0;\n        if (n < 0) {\n            n = n * (-1);\n        }\n        while (n != 0) {\n            res = n % 10;\n            n = n \/ 10;\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/436","completion":"        \/\/ write your code here\n        List<Integer> list = new ArrayList<Integer>();\n        for(int i=0;i<list1.size();i++)\n        {\n            if(list1.get(i)<0)\n            {\n                list.add(list1.get(i));\n            }\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/437","completion":"        \/\/ code here\n        StringBuilder str2 = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            int n = 0;\n            if (str1.charAt(i) % 2 == 0) {\n                n = 1;\n            }\n            if (n != 0) {\n                str2.append(str1.charAt(i));\n            }\n        }\n        return str2.toString();\n\n    }\n}","language":"java"}
{"task_id":"MBJP\/438","completion":"        int count = 0;\n\n        for (int i = 0; i < testList.size() - 1; i++) {\n            if (testList.get(i).get(0) < testList.get(i).get(1)) {\n                count++;\n            }\n        }\n\n        return Integer.toString(count);\n    }\n}","language":"java"}
{"task_id":"MBJP\/439","completion":"        \/\/code here\n        int ret=0;\n        for(int i:l){\n            ret=ret*10+i;\n        }\n        return ret;\n    }\n}","language":"java"}
{"task_id":"MBJP\/440","completion":"        List<Object> result = new ArrayList<Object>();\n\n        char[] textChar = text.toCharArray();\n        for (int i = 0; i < textChar.length; i++) {\n            if (textChar[i] == ' ') {\n                continue;\n            }\n\n            int previousPosition = 0;\n            for (int j = 1; j < textChar.length; j++) {\n                if (textChar[previousPosition + j] == textChar[i]) {\n                    result.add(new Object[]{i, previousPosition, String.valueOf(textChar[i])});\n                    break;\n                }\n\n                previousPosition = j;\n                if (j == textChar.length - 1) {\n                    result.add(new Object[]{i, j, String.valueOf(textChar[i])});\n                }\n            }\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/441","completion":"        return 6 * l * l;\n    }\n}","language":"java"}
{"task_id":"MBJP\/442","completion":"        int posCount = 0;\n        for (int num : nums) {\n            if (num >= 0) {\n                posCount++;\n            }\n        }\n        return posCount \/ (double)nums.size();\n    }\n}","language":"java"}
{"task_id":"MBJP\/443","completion":"        int maxNeg = -1;\n        for (int i = 0; i < list1.size(); i++) {\n            int n = list1.get(i);\n            if (n < 0 && n > maxNeg) {\n                maxNeg = n;\n            }\n        }\n        return maxNeg;\n    }\n}","language":"java"}
{"task_id":"MBJP\/444","completion":"        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < testList.size(); i++) {\n            List<Integer> list = testList.get(i);\n            for (int j = 0; j < list.size(); j++) {\n                if (j >= list.size() - k) {\n                    list.remove(j);\n                }\n            }\n            result.append(list.toString() + \", \");\n        }\n        return result.toString().substring(0, result.toString().length() - 2);\n    }\n}","language":"java"}
{"task_id":"MBJP\/445","completion":"        List<List<Integer>> ans = new ArrayList<>();\n        if (testTup1.size() == 0) return ans;\n        int size1 = testTup1.get(0).size();\n        int size2 = testTup2.get(0).size();\n        int i = 0;\n        int j = 0;\n        while (i < size1 && j < size2) {\n            int min = Math.min(testTup1.get(i).get(0), testTup2.get(j).get(0));\n            int temp = testTup1.get(i).get(0) * testTup2.get(j).get(0);\n            int k = 0;\n            while (k < testTup1.get(i).size() && k < testTup2.get(j).size() && min == testTup1.get(i).get(k) && min == testTup2.get(j).get(k\n}","language":"java"}
{"task_id":"MBJP\/446","completion":"        Set<String> set = new HashSet<String>();\n        set.addAll(lst);\n        int i = 0;\n        for (String s : tup) {\n            if (set.contains(s)) {\n                i++;\n            }\n        }\n        return i;\n    }\n}","language":"java"}
{"task_id":"MBJP\/447","completion":"        \/\/ Complete this function\n        return nums.stream().map(x -> x * x * x).collect(Collectors.toList());\n    }\n}","language":"java"}
{"task_id":"MBJP\/448","completion":"        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += (int)Math.pow(i, 2);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/449","completion":"        \/\/Write your code here\n        double side1 = Math.abs(x1 - x2);\n        double side2 = Math.abs(y1 - y2);\n        double side3 = Math.abs(x1 - x3);\n        double side4 = Math.abs(y1 - y3);\n        double s1 = side1 + side2;\n        double s2 = side3 + side4;\n        if (s1 < s2) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/450","completion":"        \/\/ your code here\n\n        List<String> str2 = new ArrayList<>();\n\n        for (String string : str) {\n            str2.add(string.substring(0, l));\n        }\n\n        return str2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/451","completion":"        return text1.replaceAll(\"\\\\s+\", \"\");\n    }\n}","language":"java"}
{"task_id":"MBJP\/452","completion":"        if (actualCost - saleAmount < 0) {\n            return null;\n        }\n        return actualCost - saleAmount;\n    }\n}","language":"java"}
{"task_id":"MBJP\/453","completion":"        if (n == 1) {\n            return 0;\n        }\n        int sum = 0;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                sum += i + n \/ i;\n            }\n        }\n        if (n % Math.sqrt(n) == 0) {\n            sum += Math.sqrt(n);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/454","completion":"        String z = \"z\";\n        int size = text.length();\n\n        for (int i = 0; i < size; i++) {\n            char ch = text.charAt(i);\n            if (ch == z.charAt(0) && text.startsWith(z, i)) {\n                return \"Found a match!\";\n            }\n        }\n        return \"Not matched!\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/455","completion":"        return (monthnum2 % 2 == 0) ? true : false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/456","completion":"        \/\/ your code here\n        for(int i = 0; i < stringlist.size() \/ 2; i++) {\n            String temp = stringlist.get(i);\n            stringlist.set(i, stringlist.get(stringlist.size() - 1 - i));\n            stringlist.set(stringlist.size() - 1 - i, temp);\n        }\n        return stringlist;\n    }\n}","language":"java"}
{"task_id":"MBJP\/457","completion":"        \/\/ Your code here\n        \/\/ Return the required output.\n        return null;\n    }\n}","language":"java"}
{"task_id":"MBJP\/458","completion":"        return l * b;\n    }\n}","language":"java"}
{"task_id":"MBJP\/459","completion":"        return str1.replaceAll(\"[A-Z]+\",\"\");\n    }\n}","language":"java"}
{"task_id":"MBJP\/460","completion":"        List<Integer> res = new ArrayList<>();\n        for (List<Integer> l : lst)\n            res.add(l.get(0));\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/461","completion":"        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isUpperCase(str.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/462","completion":"        \/\/ Write your code here\n        List<List<Object>> res = new ArrayList<>();\n        if (list1.isEmpty()) {\n            return res;\n        } else {\n            List<String> list2 = new ArrayList<>(list1);\n            list2.remove(list2.size() - 1);\n            res.addAll(combinationsList(list2));\n            res.add(new ArrayList<>(list1));\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/463","completion":"        int prod = 1;\n        int max = 0;\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            prod = prod * arr.get(i);\n            max = Math.max(prod, max);\n            if (prod <= 0) {\n                prod = 1;\n            }\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/464","completion":"        for (Map.Entry<String, Integer> entry : dict.entrySet()) {\n            String key = entry.getKey();\n            int value = entry.getValue();\n            int num = 0;\n            for (int i = 0; i < n; i++) {\n                String checkKey = String.valueOf(i);\n                if (dict.containsKey(checkKey)) {\n                    if (dict.get(checkKey).equals(value)) {\n                        num++;\n                    }\n                }\n            }\n            if (num == n) {\n                return true;\n            }\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/465","completion":"        \/\/ write your code here\n        HashMap<String, String> dict = new HashMap<>();\n        Set<String> keys = dict1.keySet();\n        for (String key : keys) {\n            if (dict1.get(key) != null && dict1.get(key).length() > 0) {\n                dict.put(key, dict1.get(key));\n            }\n        }\n        return dict;\n    }\n}","language":"java"}
{"task_id":"MBJP\/466","completion":"        int low = 0;\n        int high = n - 1;\n        while (low < high) {\n            int mid = low + (high - low) \/ 2;\n            if (arr.get(mid) < arr.get(mid + 1))\n                low = mid + 1;\n            else\n                high = mid;\n        }\n        return low;\n    }\n}","language":"java"}
{"task_id":"MBJP\/467","completion":"        int octnum = 0;\n        int rem = decinum;\n        while (decinum > 0) {\n            int d = decinum % 8;\n            octnum = octnum + d * (int) Math.pow(10, (int) (decinum \/ 8));\n            decinum = decinum \/ 8;\n        }\n        return octnum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/468","completion":"        \/\/Write your code here\n        int sum=0;\n        int maxProduct=arr.get(0);\n        int minProduct=arr.get(0);\n        int i=0;\n        for(i=0;i<n;i++){\n            if(sum<0){\n                sum=arr.get(i);\n            }\n            else{\n                sum=sum*arr.get(i);\n            }\n            if(arr.get(i)<minProduct){\n                minProduct=arr.get(i);\n            }\n            if(arr.get(i)>maxProduct){\n                maxProduct=arr.get(i);\n            }\n        }\n        if(sum>0){\n            return maxProduct;\n        }\n        else{\n            return maxProduct*minProduct;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/469","completion":"        int n = price.size();\n\n        if (n < 2) {\n            return 0;\n        }\n\n        if (n == 2) {\n            return Math.max(price.get(1) - price.get(0), 0);\n        }\n\n        if (k == 1) {\n            return Math.max(price.get(1) - price.get(0), 0);\n        }\n\n        if (k == 2) {\n            int max = 0;\n            for (int i = 0; i < n; i++) {\n                max = Math.max(max, price.get(i) - price.get(i + 1));\n            }\n            return max;\n        }\n\n        List<Integer> buyList = new ArrayList<>();\n        List<Integer> sellList = new ArrayList<>();\n\n        for (int i = 0; i < n; i++) {\n            buyList.add(0);\n\n}","language":"java"}
{"task_id":"MBJP\/470","completion":"        List<Integer> result = new ArrayList<>();\n        for(int i=0; i<testTup.size(); i++){\n            for(int j=i+1; j<testTup.size(); j++){\n                result.add(testTup.get(i)+testTup.get(j));\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/471","completion":"        int remainder = 0;\n        int length = arr.size();\n        int i = 0;\n        while (i < length && lens > 0) {\n            remainder = remainder + arr.get(i) * arr.get(i);\n            lens = lens - 1;\n            i = i + 1;\n        }\n        if (n > remainder) {\n            return 0;\n        } else {\n            return n - remainder;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/472","completion":"        int count = 0;\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) == l.get(i + 1))\n                count++;\n        }\n        if (count == l.size() - 1)\n            return true;\n        else\n            return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/473","completion":"        \/\/ Your code here\n\n        HashSet<List<Integer>> res = new HashSet<List<Integer>>();\n        HashSet<Integer> s1 = new HashSet<Integer>();\n        HashSet<Integer> s2 = new HashSet<Integer>();\n\n        for (List<Integer> ele : testList1) {\n            s1.add(ele.get(0));\n            s1.add(ele.get(1));\n        }\n\n        for (List<Integer> ele : testList2) {\n            s2.add(ele.get(0));\n            s2.add(ele.get(1));\n        }\n\n        for (int i : s1) {\n            if (s2.contains(i)) {\n                res.add(Arrays.asList(i, i));\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/474","completion":"        StringBuilder builder = new StringBuilder();\n        int l = str1.length();\n        for (int i = 0; i < l; i++) {\n            if (str1.charAt(i) == ch.charAt(0)) {\n                builder.append(newch);\n            } else {\n                builder.append(str1.charAt(i));\n            }\n        }\n        return builder.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/475","completion":"        List<List<Object>> res = new ArrayList<List<Object>>();\n        for (Map.Entry<String, Integer> entry : dict1.entrySet()) {\n            List<Object> l = new ArrayList<Object>();\n            l.add(entry.getKey());\n            l.add(entry.getValue());\n            res.add(l);\n        }\n        Collections.sort(res, new Comparator<List<Object>>() {\n            public int compare(List<Object> a, List<Object> b) {\n                if (((Integer) b.get(1)) > ((Integer) a.get(1)))\n                    return -1;\n                else\n                    return 1;\n            }\n        });\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/476","completion":"        if (nums == null || nums.isEmpty()) {\n            return 0;\n        }\n        int max = nums.get(0), min = nums.get(0);\n        for (Integer i : nums) {\n            if (i > max) {\n                max = i;\n            }\n            if (i < min) {\n                min = i;\n            }\n        }\n        return max + min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/477","completion":"        return string.toLowerCase();\n    }\n}","language":"java"}
{"task_id":"MBJP\/478","completion":"        StringBuilder str2 = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) >= 'a' && str1.charAt(i) <= 'z') {\n                str2.append(str1.charAt(i));\n            }\n        }\n        return str2.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/479","completion":"        int t;\n        t = (int)(Math.log10(n) \/ Math.log10(1));\n        return t == 0 ? 1 : t;\n    }\n}","language":"java"}
{"task_id":"MBJP\/480","completion":"        \/\/ code here\n        HashMap<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < str1.length(); i++) {\n            char ch = str1.charAt(i);\n            if (map.containsKey(ch)) {\n                map.put(ch, map.get(ch) + 1);\n            } else {\n                map.put(ch, 1);\n            }\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == Collections.max(map.values())) {\n                return entry.getKey().toString();\n            }\n        }\n        return null;\n    }\n}","language":"java"}
{"task_id":"MBJP\/481","completion":"        int[] dp = new int[n + 1];\n\n        dp[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < i; j++) {\n                dp[i] = dp[i] + (dp[i - j] * dp[j]);\n            }\n        }\n        for (int i : set) {\n            if (dp[sum - i] > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/482","completion":"        if (text.length() > 0) {\n            return (text.matches(\"[A-Z]+(?=[a-z])\") ? \"Yes\" : \"No\");\n        } else {\n            return \"\";\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/483","completion":"        \/\/ Code here\n        int num=1;\n        for(int i=2;i<=x;i++){\n            num*=i;\n        }\n        int factorial=1;\n        for(int j=2;j<=x;j++){\n            factorial*=j;\n        }\n        return num%factorial;\n    }\n}","language":"java"}
{"task_id":"MBJP\/484","completion":"        Set<List<String>> test2Set = new HashSet<>(testList2);\n        Set<List<String>> resultSet = new HashSet<>();\n        for (List<String> test1 : testList1) {\n            if (test2Set.contains(test1)) {\n                resultSet.add(test1);\n                test2Set.remove(test1);\n            }\n        }\n        return new ArrayList<>(resultSet);\n    }\n}","language":"java"}
{"task_id":"MBJP\/485","completion":"        int[] L = new int[n];\n        int[] R = new int[n];\n        int k = 0, i = 0, j = n - 1, p = 0;\n        \/\/ To fill the array of L and R values\n        for (int x : a) {\n            L[i] = x;\n            R[j] = x;\n            i++;\n            j--;\n        }\n        \/\/ To make the center of the array as a center of a palindrome\n        for (int l = 0, r = n \/ 2; l < r; l++, r--) {\n            if (L[l] <= R[r]) {\n                p = L[l];\n                k = l;\n            } else {\n                p = R[r];\n                k = r;\n            }\n            L[k] = R[k] = p;\n        }\n        int n1 = n \/ 2;\n       \n}","language":"java"}
{"task_id":"MBJP\/486","completion":"        if (p < 0 || p > 1) {\n            System.out.println(\"The probability should be in the range [0.0, 1.0]\");\n            System.exit(1);\n        }\n        if (k < 0 || n < k) {\n            System.out.println(\"n should be greater than or equal to k\");\n            System.exit(1);\n        }\n        double result = 0.0;\n        for (int i = 0; i < k; i++) {\n            result += 1.0 \/ (n - i);\n        }\n        for (int i = 1; i <= n - k; i++) {\n            result *= (n - i + 1.0) \/ i;\n        }\n        return result * p;\n    }\n}","language":"java"}
{"task_id":"MBJP\/487","completion":"        Collections.sort(tup, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(o1.size() - 1) - o2.get(o2.size() - 1);\n            }\n        });\n        return tup;\n    }\n}","language":"java"}
{"task_id":"MBJP\/488","completion":"        return a*5*5\/4;\n    }\n}","language":"java"}
{"task_id":"MBJP\/489","completion":"        List<Integer> freq = new ArrayList<>();\n        int maxFreq = 0, maxCount = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (freq.contains(arr.get(i))) {\n                freq.set(freq.indexOf(arr.get(i)), freq.get(freq.indexOf(arr.get(i))) + 1);\n                if (freq.get(freq.indexOf(arr.get(i))) > maxCount) {\n                    maxCount = freq.get(freq.indexOf(arr.get(i)));\n                    maxFreq = arr.get(i);\n                }\n            } else {\n                freq.add(arr.get(i));\n                if (arr.get(i) > maxCount) {\n                    maxCount = arr.get(i);\n                    maxFreq = arr.get(i);\n                }\n            }\n        }\n        return maxFreq;\n    }\n}","language":"java"}
{"task_id":"MBJP\/490","completion":"        HashSet<List<Integer>> symmetricList = new HashSet<>();\n        for (int i = 0; i < testList.size(); i++) {\n            for (int j = 0; j < testList.get(i).size(); j++) {\n                for (int k = j + 1; k < testList.get(i).size(); k++) {\n                    symmetricList.add(Arrays.asList(testList.get(i).get(j), testList.get(i).get(k)));\n                }\n            }\n        }\n        return symmetricList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/491","completion":"        int sum=0;\n        for(int i=1;i<=n;i++){\n            sum=((a+r*i)\/(1+r*i))*i;\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/492","completion":"        int begin = 0;\n        int end = itemList.size() - 1;\n        while (begin <= end) {\n            int mid = begin + (end - begin) \/ 2;\n            if (itemList.get(mid) == item) {\n                return true;\n            }\n            if (itemList.get(mid) > item) {\n                end = mid - 1;\n            } else {\n                begin = mid + 1;\n            }\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/493","completion":"        int n = startx - endx + 1;\n        int m = starty - endy + 1;\n        double[][] distance = new double[n][m];\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                distance[i][j] = Math.sqrt(Math.pow(startx - endx + i, 2.0) + Math.pow(starty - endy + j, 2.0));\n            }\n        }\n        List<List<List<Double>>> polygons = new ArrayList<>();\n        for (int i = 0; i <= n; ++i) {\n            List<List<Double>> poly = new ArrayList<>();\n            for (int j = 0; j <= m; ++j) {\n                List<Double> point = new ArrayList<>();\n                if (j == 0)\n                \n}","language":"java"}
{"task_id":"MBJP\/494","completion":"        int ans = 0;\n        int p = 0;\n\n        for (int i = testTup.size() - 1; i >= 0; i--) {\n            int bit = testTup.get(i);\n\n            if (bit == 0) {\n                continue;\n            }\n            ans += (Math.pow(2, p)) * bit;\n            p++;\n        }\n\n        if (ans == 0) {\n            return \"0\";\n        }\n        return Integer.toString(ans);\n    }\n}","language":"java"}
{"task_id":"MBJP\/495","completion":"        str1 = str1.replaceAll(\"([a-z])([a-z])\", \"$1$2\");\n        str1 = str1.replaceAll(\"([A-Z])([A-Z])\", \"$1$2\");\n        return str1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/496","completion":"        \/\/ Write your code here\n        List<Integer> result = new ArrayList<>();\n        if (nums == null || nums.isEmpty() || n < 1) return result;\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i = 0; i < n; i++) {\n            pq.offer(nums.get(i));\n        }\n\n        for (int i = n; i < nums.size(); i++) {\n            if (nums.get(i) < pq.peek()) {\n                pq.poll();\n                pq.offer(nums.get(i));\n            }\n        }\n        result = new ArrayList<>(pq);\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/497","completion":"        double area = (2 * Math.PI * r * h) + (2 * Math.PI * r * Math.sqrt(Math.pow(h, 2) + Math.pow(r, 2)));\n        return area;\n    }\n}","language":"java"}
{"task_id":"MBJP\/498","completion":"        while (x != y) {\n            if (x > y) {\n                x = x - y;\n            } else {\n                y = y - x;\n            }\n        }\n        return x;\n    }\n}","language":"java"}
{"task_id":"MBJP\/499","completion":"        return (int) Math.round(2 * r);\n    }\n}","language":"java"}
{"task_id":"MBJP\/500","completion":"        String s = \"\";\n        for (int i = 0; i < list.size(); i++) {\n            s += list.get(i);\n            if (i != list.size() - 1)\n                s += \" \";\n        }\n        return s;\n    }\n}","language":"java"}
{"task_id":"MBJP\/501","completion":"        int n = x;\n        int m = y;\n\n        while (n % m != 0) {\n            int d = n % m;\n            n = m;\n            m = d;\n        }\n\n        return m;\n    }\n}","language":"java"}
{"task_id":"MBJP\/502","completion":"        if (n % m == 0) {\n            return 0;\n        } else {\n            return 1;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/503","completion":"        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n        int size = nums.size();\n        List<Integer> result = new ArrayList<>();\n        result.add(nums.get(0));\n        for (int i = 1; i < size; i++) {\n            if (nums.get(i) == result.get(i - 1) + 1) {\n                result.add(nums.get(i));\n            } else {\n                result.add(nums.get(i));\n                result.add(nums.get(i - 1) + 1);\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/504","completion":"        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return n + (n + 1) * (n + 1) \/ 2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/505","completion":"        \/\/ Write your code here\n        int n = a.size();\n        for (int i = 0; i < n; i++) {\n            if (a.get(i) == 0) {\n                a.add(i, a.get(n - 1));\n                a.remove(n - 1);\n                n--;\n                i--;\n            }\n        }\n        return a;\n    }\n}","language":"java"}
{"task_id":"MBJP\/506","completion":"        if (k == 0) {\n            return 1;\n        }\n        int permutation = 1, i = n - k;\n        while (i > 0) {\n            permutation *= i--;\n        }\n        return permutation \/ factorial(k);\n    }\n}","language":"java"}
{"task_id":"MBJP\/507","completion":"        list1.removeAll(removewords);\n        return list1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/508","completion":"        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/509","completion":"        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        int avg = sum \/ n;\n        return avg;\n    }\n}","language":"java"}
{"task_id":"MBJP\/510","completion":"        Map<Integer, Integer> map = new HashMap<>();\n        int count = 0;\n\n        \/\/ Initialize map with 0 for each element in the array\n        for (int i = 0; i < arr.size(); i++) {\n            map.put(arr.get(i), 0);\n        }\n\n        \/\/ Scan through the array and update the count of subsequence having product smaller than k\n        for (int i = 0; i < arr.size(); i++) {\n            int product = arr.get(i);\n\n            \/\/ No of subsequences having product smaller than k\n            for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n                int key = entry.getKey();\n                int value = entry.getValue();\n\n                \/\/ If the product is greater than k then there is no need to check other subsequences\n                if (product > key) {\n                    count += value;\n                    break;\n                }\n\n                \/\/ If the product is not greater than k then increase the count by\n}","language":"java"}
{"task_id":"MBJP\/511","completion":"        if (num < 0) return 0;\n\n        int sum = 1;\n        int sum_of_factors = 0;\n        int[] fact = new int[num + 1];\n\n        fact[0] = 1;\n        fact[1] = 1;\n\n        for (int i = 2; i <= num; i++) {\n            fact[i] = i * fact[i - 1];\n            sum_of_factors += fact[i];\n        }\n\n        for (int i = num; i >= 1; i--) {\n            sum += i * fact[i];\n            if (sum > sum_of_factors) break;\n        }\n\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/512","completion":"        HashMap<Integer, Integer> freq = new HashMap<>();\n        for (int i = 0; i < testTuple.size(); i++) {\n            if (testTuple.get(i) instanceof List) {\n                freq = countElementFreq((List) testTuple.get(i));\n            } else {\n                int element = (int) testTuple.get(i);\n                if (freq.containsKey(element)) {\n                    freq.put(element, freq.get(element) + 1);\n                } else {\n                    freq.put(element, 1);\n                }\n            }\n        }\n        return freq;\n    }\n}","language":"java"}
{"task_id":"MBJP\/513","completion":"        List<Object> res = new ArrayList<>();\n        for(int i = 0; i < testTup.size(); i++){\n            res.add(testTup.get(i));\n            res.add(k);\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/514","completion":"        int sum = 0;\n        for (int i = 0; i < testTup.size(); i++) {\n            if (i % 2 == 0) {\n                sum += testTup.get(i);\n            }\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/515","completion":"        long s = 0;\n        for (int i : arr)\n            s += i;\n\n        return (s % m == 0 && s \/ m <= n);\n    }\n}","language":"java"}
{"task_id":"MBJP\/516","completion":"        \/\/ write your code here\n        int maxDigit = getMaxDigit(nums);\n        for (int i = 0; i < maxDigit; i++) {\n            Collections.sort(nums, new RadixCompare());\n        }\n        return nums;\n    }\n}","language":"java"}
{"task_id":"MBJP\/517","completion":"        if(list1 == null || list1.size() == 0){\n            return -1;\n        }\n        int maxPos = 0, maxNum = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) > maxNum) {\n                maxNum = list1.get(i);\n                maxPos = i;\n            }\n        }\n        return maxPos;\n    }\n}","language":"java"}
{"task_id":"MBJP\/518","completion":"        double root = Math.sqrt(num);\n        return (int) root;\n    }\n}","language":"java"}
{"task_id":"MBJP\/519","completion":"        double volume;\n        if (num < 0) {\n            throw new IllegalArgumentException(\"Invalid Value\");\n        }\n        if (num == 0) {\n            volume = 0;\n        } else if (num == 1) {\n            volume = 1;\n        } else if (num == 2) {\n            volume = 1.5;\n        } else if (num == 3) {\n            volume = 2;\n        } else {\n            volume = 0;\n            for (int i = 0; i < num - 2; i++) {\n                double tmp = volumeTetrahedron(i) \/ (i + 1);\n                volume = volume + 1 \/ tmp;\n            }\n            volume = volume \/ (num - 2);\n        }\n        return volume;\n    }\n}","language":"java"}
{"task_id":"MBJP\/520","completion":"        int lcm = l.get(0);\n\n        for (int i = 1; i < l.size(); i++) {\n            int temp = l.get(i);\n            while (lcm % temp != 0) {\n                lcm += lcm;\n            }\n        }\n\n        return lcm;\n    }\n}","language":"java"}
{"task_id":"MBJP\/521","completion":"        if(x == y && x == z && y != z)\n            return true;\n        if(x != y && x != z && y == z)\n            return true;\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/522","completion":"        int size = arr.size();\n        int[] dp = new int[size];\n        int max = 0;\n        for (int i = 0; i < size; i++) {\n            dp[i] = 1;\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n            max = Math.max(dp[i], max);\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/523","completion":"        return str1.matches(\"[A-Z]+\") && str1.matches(\"[a-z]+\") && str1.matches(\"[0-9]+\") && str1.length() >= 8 ? Arrays.asList(\"Valid string.\") : Arrays.asList(\"String must have 1 upper case character.\", \"String must have 1 number.\", \"String length should be atleast 8.\");\n    }\n}","language":"java"}
{"task_id":"MBJP\/524","completion":"        int sum = 0;\n        int[] dp = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n            sum = Math.max(sum, dp[i]);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/525","completion":"        int max1 = Collections.max(line1);\n        int max2 = Collections.max(line2);\n        int min1 = Collections.min(line1);\n        int min2 = Collections.min(line2);\n        return max1 * max2 == min1 * min2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/526","completion":"        String[] words = str1.split(\"\\\\s\");\n        String str = \"\";\n        for (String word : words) {\n            if (word.length() > 0) {\n                if (word.length() == 1) {\n                    str = str + word.toUpperCase();\n                } else if (word.length() == 2) {\n                    str = str + word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();\n                } else {\n                    str = str + word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase() + \" \";\n                }\n            }\n        }\n        return str;\n    }\n}","language":"java"}
{"task_id":"MBJP\/527","completion":"        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                int temp = arr.get(i) + arr.get(j);\n                if (temp == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/528","completion":"        int min = Integer.MAX_VALUE;\n        int m = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            int l = list1.get(i).size();\n            if (l < min) {\n                min = l;\n                m = i;\n            }\n        }\n        List<Object> res = new ArrayList<>();\n        res.add(list1.get(m));\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/529","completion":"        int n1 = 1;\n        int n2 = 1;\n        for (int i = 2; i <= n; i++) {\n            int t = n1 + n2;\n            n2 = n1;\n            n1 = t;\n        }\n        return n1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/530","completion":"        double sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) < 0) {\n                sum += nums.get(i);\n            }\n        }\n        return sum \/ nums.size();\n    }\n}","language":"java"}
{"task_id":"MBJP\/531","completion":"        int dp[] = new int[v + 1];\n        dp[0] = 0;\n        for (int i = 1; i <= v; i++) {\n            dp[i] = Integer.MAX_VALUE;\n        }\n\n        for (int i = 0; i < coins.size(); i++) {\n            for (int j = coins.get(i); j <= v; j++) {\n                dp[j] = Math.min(dp[j], dp[j - coins.get(i)] + 1);\n            }\n        }\n        return dp[v] == Integer.MAX_VALUE ? -1 : dp[v];\n    }\n}","language":"java"}
{"task_id":"MBJP\/532","completion":"        int len = str1.length();\n        for (int i = 0; i < len; i++) {\n            int count = 0;\n            char ch = str1.charAt(i);\n            for (int j = 0; j < str1.length(); j++) {\n                if (ch == str1.charAt(j)) {\n                    count++;\n                }\n                if (count > 1) {\n                    return false;\n                }\n            }\n\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/534","completion":"        List<Integer> ans = new ArrayList<>();\n\n        \/\/ Iterate over the text to find where the pattern occurs\n        int i = 0;\n        while (i <= text.length() - pattern.length()) {\n            int j = 0;\n            while (j < pattern.length() && text.charAt(i+j) == pattern.charAt(j)) {\n                j++;\n            }\n            if (j == pattern.length()) {\n                ans.add(i);\n            }\n            i++;\n        }\n\n        return ans;\n    }\n}","language":"java"}
{"task_id":"MBJP\/535","completion":"        return 2.0 * (Math.PI * r * r);\n    }\n}","language":"java"}
{"task_id":"MBJP\/536","completion":"        \/\/ Write your code here\n        int i=0;\n        List<Integer> a=new ArrayList<>();\n        while(i<n){\n            a.add(list.get(i));\n            i++;\n        }\n        return a;\n    }\n}","language":"java"}
{"task_id":"MBJP\/537","completion":"        String words[] = str1.split(\" \");\n\n        String word = null;\n\n        for (int i = 0; i < words.length; i++) {\n\n            if (word == null || words[i].length() > word.length())\n                word = words[i];\n        }\n\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(word))\n                return words[i];\n        }\n\n        return \"None\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/538","completion":"        \/\/ your code goes here\n        String[] words = str1.split(\" \");\n        List<String> str1list = new ArrayList<>();\n        for(int i=0; i<words.length; i++){\n            str1list.add(words[i]);\n        }\n        return str1list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/539","completion":"        List<Integer> result = new ArrayList<>();\n        for (Integer i : index) {\n            result.add(Integer.toUnsignedString(basesNum.get(i)));\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/540","completion":"        int low = 0, high = 0;\n        int count = 0;\n        int max = 0;\n        int min = 100;\n        while (low < arr.size()) {\n            if (count == 0) {\n                max = arr.get(low);\n                min = arr.get(low);\n            }\n            if (max < arr.get(low)) {\n                max = arr.get(low);\n            }\n            if (min > arr.get(low)) {\n                min = arr.get(low);\n            }\n            count++;\n            if (low == arr.size() - 1) {\n                low++;\n            } else {\n                low++;\n                high++;\n            }\n        }\n        return max - min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/541","completion":"        int r = n \/ 2;\n        for(int i = 1; i <= r; i++) {\n            if(n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/542","completion":"        return text.replaceAll(\"[., ]\", \":\");\n    }\n}","language":"java"}
{"task_id":"MBJP\/543","completion":"        int count = 0;\n        int carry = 0;\n        int x = num1 + num2;\n        int y = x \/ 10;\n        int z = x % 10;\n        while (y > 0) {\n            count++;\n            carry = (z % 10) * 10;\n            num1 = num1 + carry;\n            y = num1 \/ 10;\n            z = num1 % 10;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/544","completion":"        StringBuilder sb = new StringBuilder();\n\n        for (List<String> tuple : testList) {\n            for (String item : tuple) {\n                sb.append(item);\n                sb.append(\" \");\n            }\n            sb.append(\"\\n\");\n        }\n\n        return sb.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/545","completion":"        return (n & 0x55555555) << 1 | ((n & 0xAAAAAAAA) >> 1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/546","completion":"        int index = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (char.equals(string.charAt(i))) {\n                index = i;\n            }\n        }\n        return index;\n    }\n}","language":"java"}
{"task_id":"MBJP\/547","completion":"        int count = 0;\n        int num = 1;\n        while (num <= n) {\n            if (num % 2 == 0) {\n                count = count + 0;\n            } else {\n                count = count + 1;\n            }\n            num = num + 1;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/548","completion":"        \/\/ Write your code here.\n        \/\/int[] arr = {10, 22, 9, 33, 21, 50, 41, 60};\n        int max = 1;\n        int[] dp = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = 1;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n            max = Math.max(dp[i], max);\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/549","completion":"        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += (int) Math.pow(i, 5);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/550","completion":"        if (low > high)\n            return arr.get(low);\n        int mid = low + (high - low) \/ 2;\n        if (mid > high)\n            return findMax(arr, low, high - 1);\n        if (mid < low)\n            return findMax(arr, low + 1, high);\n        if (arr.get(mid) > arr.get(mid + 1))\n            return arr.get(mid + 1);\n        return findMax(arr, low, mid - 1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/551","completion":"        \/\/ write your code here\n        List<Integer> res = new ArrayList<>();\n        int size = list1.size();\n        for (int i = 0; i < size; i++) {\n            res.add(list1.get(i).get(n));\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/552","completion":"        if (seqNums == null || seqNums.size() == 0)\n            return \"Non Linear Sequence\";\n        else {\n            int sum = 0;\n            int temp = 0;\n            int i = 0;\n            for (int j = 0; j < seqNums.size(); j++) {\n                sum += seqNums.get(j);\n            }\n            if (sum == 0)\n                return \"Non Linear Sequence\";\n            else {\n                for (int k = 0; k < seqNums.size() - 1; k++) {\n                    if (seqNums.get(k) != 0) {\n                        temp = seqNums.get(k);\n                        seqNums.set(k, seqNums.get(k) * -1);\n                        for (i = k + 1; i < seqNums.size(); i++) {\n                            if (seq\n}","language":"java"}
{"task_id":"MBJP\/553","completion":"        double f = 0.0;\n        f = (double)testTup.get(0)\/100;\n        f += (double)testTup.get(1)\/10000;\n        return f;\n    }\n}","language":"java"}
{"task_id":"MBJP\/554","completion":"        List<Integer> oddList = new ArrayList<Integer>();\n        for (Integer num : list) {\n            if (num % 2 != 0) {\n                oddList.add(num);\n            }\n        }\n        return oddList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/555","completion":"        int a=n*(n*n);\n        int b=n*(n+1)*(n+1);\n        return a-b;\n    }\n}","language":"java"}
{"task_id":"MBJP\/556","completion":"        int count = 0;\n        for (int i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j < a.size(); j++) {\n                if (a.get(i) != a.get(j)) {\n                    count++;\n                    if (count == n) {\n                        return 1;\n                    }\n                }\n            }\n        }\n        return 0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/557","completion":"        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char ch = string.charAt(i);\n            if (Character.isLowerCase(ch)) {\n                sb.append(Character.toUpperCase(ch));\n            } else {\n                sb.append(Character.toLowerCase(ch));\n            }\n        }\n        return sb.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/558","completion":"        int n1s = String.valueOf(n1).length();\n        int n2s = String.valueOf(n2).length();\n        int n3 = n1s - n2s;\n        return n3;\n    }\n}","language":"java"}
{"task_id":"MBJP\/559","completion":"        int max = Integer.MIN_VALUE, sum = 0;\n\n        for (int i = 0; i < size; i++) {\n            sum = Math.max(0, sum + a.get(i));\n            max = Math.max(sum, max);\n        }\n\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/560","completion":"        \/\/ Your code goes here\n        List<Integer> l = new ArrayList<Integer>();\n        l.addAll(testTup1);\n        l.addAll(testTup2);\n\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (Integer i : l) {\n            if (!l1.contains(i)) {\n                l1.add(i);\n            }\n        }\n\n        return l1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/561","completion":"        HashMap<Integer, List<Object>> testMap = new HashMap<>();\n\n        for (List<Integer> list : testList) {\n            List<Object> pairElements = new ArrayList<>();\n            int firstPair = list.get(0);\n            int secondPair = list.get(1);\n            for (int i = 0; i < list.size(); i++) {\n                if (i == 0 || i == 1) {\n                    continue;\n                } else {\n                    pairElements.add(list.get(i));\n                }\n            }\n\n            testMap.put(firstPair, pairElements);\n        }\n\n        return testMap;\n    }\n}","language":"java"}
{"task_id":"MBJP\/562","completion":"        int max = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == 1) {\n                    count++;\n                } else {\n                    count = 0;\n                }\n                if (max < count) {\n                    max = count;\n                }\n            }\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/563","completion":"        List<String> result = new ArrayList<>();\n\n        String[] parts = text.split(\"\\\"\");\n        for (int i = 1; i < parts.length; i++) {\n            result.add(parts[i]);\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/564","completion":"        int ans = 0;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr.get(i) == arr.get(j)) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}","language":"java"}
{"task_id":"MBJP\/565","completion":"        ArrayList<String> ans = new ArrayList<String>();\n\n        for (int i = 0; i < word.length(); i++) {\n            ans.add(word.substring(i, i+1));\n        }\n        return ans;\n    }\n}","language":"java"}
{"task_id":"MBJP\/566","completion":"        if (n < 10) {\n            return n;\n        } else {\n            return n % 10 + sumDigits(n \/ 10);\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/567","completion":"        \/\/ code here\n        if (list1.size() == 0) return true;\n        if (list1.size() == 1) return true;\n        if (list1.size() == 2) return list1.get(0) <= list1.get(1);\n        \n        for (int i = 0; i < list1.size() - 1; i++) {\n            if (list1.get(i) >= list1.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/568","completion":"        List<HashMap<Object, Object>> list = new ArrayList<>();\n\n        for (int i = 0; i < length; i++) {\n            list.add(new HashMap<>());\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/569","completion":"        return sortSublists(list1, 0, 1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/570","completion":"        Set<String> set = new HashSet<String>();\n        for (String s : charlist) {\n            set.add(s);\n        }\n\n        for (String s : list1) {\n            Iterator<String> it = set.iterator();\n            while (it.hasNext()) {\n                if (s.contains(it.next())) {\n                    it.remove();\n                }\n            }\n        }\n\n        return new ArrayList<String>(set);\n    }\n}","language":"java"}
{"task_id":"MBJP\/571","completion":"        int maxSum = 0;\n        int currSum = 0;\n        int currMinDiff = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                currSum = arr.get(i) + arr.get(j);\n                if (currSum <= k) {\n                    if (currMinDiff > Math.abs(arr.get(i) - arr.get(j))) {\n                        currMinDiff = Math.abs(arr.get(i) - arr.get(j));\n                    }\n                } else {\n                    break;\n                }\n            }\n            if (currMinDiff > maxSum) {\n                maxSum = currMinDiff;\n            }\n        }\n        return maxSum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/572","completion":"        Map<Integer, Integer> hm = new HashMap<>();\n\n        for (Integer num : nums) {\n            hm.put(num, hm.getOrDefault(num, 0) + 1);\n        }\n\n        Set<Integer> keys = hm.keySet();\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer key : keys) {\n            if (hm.get(key) > 1) {\n                result.add(key);\n            }\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/573","completion":"        Set<Integer> unique = new HashSet<>();\n        Set<Integer> duplicate = new HashSet<>();\n        int sum = 0;\n        for (Integer i : listData) {\n            if (!unique.contains(i)) {\n                unique.add(i);\n                sum += i;\n            } else {\n                if (!duplicate.contains(i)) {\n                    duplicate.add(i);\n                    sum -= i;\n                }\n            }\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/574","completion":"        double surfaceArea = (Math.PI * r * (r + h));\n        double volume = (Math.PI * Math.pow(r, 2) * h);\n        return surfaceArea + volume;\n    }\n}","language":"java"}
{"task_id":"MBJP\/575","completion":"        if (n == 0) {\n            return 1;\n        } else if (n % a == 0 && l <= n && n <= r) {\n            return 0;\n        } else if (l > r) {\n            return 0;\n        } else {\n            return (countNo(a, n - 1, l, r)) + (countNo(a, n - 1, l, r) + countNo(a, n - 1, l, r));\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/576","completion":"        for(int i=0; i<a.size(); i++) {\n            int j=i;\n            int k=0;\n            while(k<m && j<n) {\n                if(a.get(j)!=b.get(k)) {\n                    j++;\n                }\n                k++;\n            }\n            if(j>=n) {\n                return true;\n            }\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/577","completion":"        if (n < 0) return 0;\n        if (n == 0 || n == 1) return n;\n        int last_digit = 0;\n        for (int i = n - 1; i > 0; i--) {\n            int d = n % 10;\n            n \/= 10;\n            last_digit = (last_digit * 10) + d;\n        }\n        return last_digit;\n    }\n}","language":"java"}
{"task_id":"MBJP\/578","completion":"        \/\/ Write your code here\n        List<Integer> res = new ArrayList<Integer>();\n        int size1 = list1.size();\n        int size2 = list2.size();\n        int size3 = list3.size();\n        int i = 0, j = 0, k = 0;\n        while (i < size1 && j < size2 && k < size3) {\n            res.add(list1.get(i));\n            i++;\n            res.add(list2.get(j));\n            j++;\n            res.add(list3.get(k));\n            k++;\n        }\n\n        while (i < size1) {\n            res.add(list1.get(i));\n            i++;\n        }\n\n        while (j < size2) {\n            res.add(list2.get(j));\n            j++;\n        }\n\n        while (k < size3) {\n            res.add(list3.get(k));\n           \n}","language":"java"}
{"task_id":"MBJP\/579","completion":"        Set<Integer> set = new HashSet<Integer>();\n        List<Integer> result = new ArrayList<Integer>();\n        for (Integer i : testTup1) {\n            set.add(i);\n        }\n        for (Integer i : testTup2) {\n            if (!set.contains(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/580","completion":"        List<Object> result = new ArrayList<>();\n        for (Object element : testTuple) {\n            if (element instanceof List) {\n                List<Object> elem = (List<Object>) element;\n                if (elem.size() == 2) {\n                    result.add(elem.get(0));\n                } else {\n                    result.add(extractEven(elem));\n                }\n            } else {\n                result.add(element);\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/581","completion":"        int area = b * s;\n        return area;\n    }\n}","language":"java"}
{"task_id":"MBJP\/582","completion":"        return dict1.size() == 0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/583","completion":"        int catalan = 1;\n        for (int i = 2; i <= num; i++) {\n            catalan = catalan * i \/ (i + 1);\n        }\n        return catalan;\n    }\n}","language":"java"}
{"task_id":"MBJP\/584","completion":"        return \"\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/585","completion":"        List<HashMap<String, Object>> result = new ArrayList<>();\n        PriorityQueue<Item> heap = new PriorityQueue<>();\n        for (HashMap<String, Object> item : items) {\n            Item i = new Item(item);\n            heap.add(i);\n        }\n        while (heap.size() > 0) {\n            Item item = heap.poll();\n            if (heap.size() == n) {\n                heap.poll();\n            }\n            result.add(item.getItem());\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/586","completion":"        if (n % k != 0) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n\n        int step = 0;\n        for (int i = 0; i < n; i++) {\n            if (step == k) {\n                result.add(a.get(i));\n                step = 0;\n            } else {\n                result.add(a.get(i));\n                step++;\n            }\n        }\n\n        result.add(a.get(n - 1));\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/587","completion":"        int size = listx.size();\n        List<Integer> tuple = new ArrayList<Integer>(listx);\n        for (int i = 0; i < size; i++) {\n            tuple.add(listx.get(i));\n        }\n        return tuple;\n    }\n}","language":"java"}
{"task_id":"MBJP\/588","completion":"        \/\/ code here\n        int max = nums.get(0);\n        int min = nums.get(0);\n\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > max) {\n                max = nums.get(i);\n            }\n            if (nums.get(i) < min) {\n                min = nums.get(i);\n            }\n        }\n        return max - min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/589","completion":"        List<Integer> results = new ArrayList<>();\n        if (a == b) {\n            results.add(a);\n            return results;\n        }\n\n        for (int i = a; i <= b; i++) {\n            if (i == Math.sqrt(i)) {\n                results.add(i);\n                continue;\n            }\n\n            int left = Math.sqrt(a);\n            int right = Math.sqrt(i);\n            int m = left + (right - left) \/ 2;\n            if (i <= m * m) {\n                results.add(i);\n                continue;\n            }\n\n            if (i > m * m) {\n                results.add(m * m);\n            }\n        }\n\n        return results;\n    }\n}","language":"java"}
{"task_id":"MBJP\/591","completion":"        \/\/ Write your code here\n        int temp=newlist.get(0);\n        newlist.set(0,newlist.get(newlist.size()-1));\n        newlist.set(newlist.size()-1,temp);\n        return newlist;\n    }\n}","language":"java"}
{"task_id":"MBJP\/592","completion":"        int sum = 0;\n\n        for (int i = 0; i <= n; i++) {\n            sum += 1 \/ (i * i + 1);\n        }\n\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/593","completion":"        String[] split = ip.split(\"\\\\.\");\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < split.length; i++) {\n            list.add(Integer.parseInt(split[i]));\n        }\n        list.remove(list.indexOf(0));\n        StringBuilder str = new StringBuilder();\n        for (int i = 0; i < list.size(); i++) {\n            str.append(list.get(i));\n            if (i != list.size() - 1) {\n                str.append(\".\");\n            }\n        }\n        return str.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/594","completion":"        \/\/Write your code here\n        int evenSum=0;\n        int oddSum=0;\n        int length=list1.size();\n        for(int i=0;i<length;i++)\n        {\n            if(i%2==0)\n            {\n                evenSum=evenSum+list1.get(i);\n            }\n            else\n            {\n                oddSum=oddSum+list1.get(i);\n            }\n        }\n        return Math.abs(evenSum-oddSum);\n    }\n}","language":"java"}
{"task_id":"MBJP\/595","completion":"        int [] arr1 = new int [str1.length()];\n        int [] arr2 = new int [str2.length()];\n        for (int i=0;i<str1.length();i++){\n            arr1[i] = str1.charAt(i)-'0';\n        }\n        for (int i=0;i<str2.length();i++){\n            arr2[i] = str2.charAt(i)-'0';\n        }\n        int count =0;\n        for (int i=0;i<str1.length();i++){\n            if (arr1[i] == arr2[i]){\n                count +=1;\n            }\n        }\n        if (str1.length() == str2.length()){\n            return count;\n        }\n        else{\n            return \"Not Possible\";\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/597","completion":"        int i = 0, j = 0;\n        int t = arr1.size() - 1;\n        while (i < m && j < n) {\n            if (arr1.get(i) < arr2.get(j)) {\n                i++;\n            } else if (arr1.get(i) > arr2.get(j)) {\n                j++;\n            } else {\n                t = arr1.get(i);\n                i++;\n                j++;\n            }\n        }\n        return arr1.get(t);\n    }\n}","language":"java"}
{"task_id":"MBJP\/598","completion":"        int c = 0;\n        int number1 = number;\n        int temp;\n        while (number1 != 0) {\n            temp = number1 % 10;\n            c = c + (int) (Math.pow(temp, 3));\n            number1 = number1 \/ 10;\n        }\n        if (c == number) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/599","completion":"        List<Double> result = new ArrayList<>();\n        result.add(0.0);\n        result.add(0.0);\n        result.add(0.0);\n        for (int i = 1; i <= number; i++) {\n            double sum = result.get(0) + i;\n            double avg = sum \/ number;\n            result.set(0, sum);\n            result.add(avg);\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/600","completion":"        int count = 0;\n        while (n > 0) {\n            count += (n & 1);\n            n >>>= 1;\n        }\n        return (count % 2 == 0);\n    }\n}","language":"java"}
{"task_id":"MBJP\/602","completion":"        Set<Character> characterSet = new HashSet<>();\n        for (int i = 0; i < str1.length(); i++) {\n            if (characterSet.contains(str1.charAt(i))) {\n                return Character.toString(str1.charAt(i));\n            } else {\n                characterSet.add(str1.charAt(i));\n            }\n        }\n        return \"None\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/603","completion":"        List<Integer> res = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            res.add(i);\n            i = i * 2 + 1;\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/604","completion":"        String[] tokens = s.split(\" \");\n\n        \/\/ O(n) time complexity\n        for (int i = 0; i < tokens.length; i++) {\n            if (tokens[i].isEmpty()) {\n                tokens[i] = \" \";\n            } else {\n                int j = tokens[i].length() - 1;\n                char[] chars = tokens[i].toCharArray();\n\n                while (j >= 0) {\n                    char temp = chars[j];\n                    chars[j] = chars[j - 1];\n                    chars[j - 1] = temp;\n                    j--;\n                }\n\n                tokens[i] = new String(chars);\n            }\n        }\n\n        return String.join(\" \", tokens);\n    }\n}","language":"java"}
{"task_id":"MBJP\/605","completion":"        boolean flag = true;\n        for (int i = 2; i <= num \/ 2; i++) {\n            if (num % i == 0) {\n                flag = false;\n                break;\n            }\n        }\n        return flag;\n    }\n}","language":"java"}
{"task_id":"MBJP\/606","completion":"        return (double) degree * (Math.PI\/180);\n    }\n}","language":"java"}
{"task_id":"MBJP\/607","completion":"        \/\/ Write your code here\n        List<Object> literals = new ArrayList<>();\n        int p = 0, k = 0, pos = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == pattern.charAt(k)) {\n                if (k == pattern.length() - 1) {\n                    literals.add(pattern);\n                    literals.add(pos);\n                    k = 0;\n                    pos++;\n                } else {\n                    k++;\n                }\n            } else {\n                if (p != i) {\n                    pos = i;\n                    p = i;\n                    k = 0;\n                }\n            }\n        }\n        return literals;\n    }\n}","language":"java"}
{"task_id":"MBJP\/608","completion":"        int result = 1;\n\n        for (int i = 1; i <= n; i++) {\n            result = (result * 3) \/ 2;\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/609","completion":"        int i;\n        int floorMin = 0;\n        int sum;\n        sum = (a + b) * (n - 1);\n        floorMin = a * (n - 1);\n        if (sum < floorMin) {\n            floorMin = sum;\n        }\n        return floorMin;\n    }\n}","language":"java"}
{"task_id":"MBJP\/610","completion":"        \/\/ code here\n        List<Integer> list = new ArrayList<>();\n        list.addAll(list1);\n        list.remove(list.size() - l);\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/611","completion":"        int max = testList.get(0).get(n-1);\n        for (List<Integer> list : testList) {\n            if (list.get(n-1) > max) max = list.get(n-1);\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/612","completion":"        if (lst.isEmpty()) return lst;\n\n        List<List<Object>> ret = new ArrayList<>();\n        int idx = 0;\n        for (List<String> l : lst) {\n            List<Object> res = new ArrayList<>(l);\n            res.add(idx++, null);\n            ret.add(res);\n        }\n\n        return ret;\n    }\n}","language":"java"}
{"task_id":"MBJP\/613","completion":"        if (testList == null || testList.size() == 0)\n            return testList;\n\n        List<List<Object>> returnList = new ArrayList<>();\n        Map<String, List<Object>> map = new HashMap<>();\n\n        for (List<Object> each : testList) {\n            if (map.containsKey(each.get(0))) {\n                List<Object> value = new ArrayList<>();\n                value.add(each.get(1));\n                value.add(Math.max(Math.max((Integer) each.get(1), (Integer) map.get(each.get(0)).get(1)), (Integer) each.get(2)));\n                returnList.add(value);\n                map.put(each.get(0), value);\n            } else {\n                List<Object> value = new ArrayList<>();\n                value.add(each.get(1));\n                value.add(each.get(2));\n                map.put(each.get(0), value);\n                returnList.add(value);\n\n}","language":"java"}
{"task_id":"MBJP\/614","completion":"        int count = 0;\n        for (List<Integer> list : testList) {\n            count += sumList(list);\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/615","completion":"        List<Double> avg = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            List<Integer> l = nums.get(i);\n            Integer sum = l.stream().mapToInt(Integer::intValue).sum();\n            avg.add(sum \/ l.size());\n        }\n        return avg;\n    }\n}","language":"java"}
{"task_id":"MBJP\/616","completion":"        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < testTup1.size(); i++) {\n            res.add((testTup1.get(i) % testTup2.get(i)) % testTup2.get(i));\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/617","completion":"        if(d == 0) {\n            return 0;\n        }\n\n        if(d == a) {\n            return 1;\n        }\n\n        double ans = Double.MAX_VALUE;\n        if(a < b) {\n            ans = 1.0 * d \/ (a - 1.0) + 1.0 * d \/ a;\n        }\n\n        for(int i = 1; i < a; i++) {\n            if(b < a) {\n                double subAns = 1.0 * d \/ (b - i) + 1.0 * d \/ a;\n                ans = Math.min(subAns, ans);\n            }\n        }\n\n        return ans;\n    }\n}","language":"java"}
{"task_id":"MBJP\/618","completion":"        List<Double> result = new ArrayList<>();\n        double average = (double)nums1.size() \/ nums2.size();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add((nums1.get(i) * nums2.get(i)) \/ average);\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/619","completion":"        int num = 0;\n        char[] charArray = testStr.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (char c : charArray) {\n            if (c >= '0' && c <= '9') {\n                sb.append(num++);\n                sb.append(c);\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/620","completion":"        int[] dp = new int[n];\n        int[] dp_temp = new int[n];\n        int k = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a.get(i) % a.get(j) == 0) {\n                    dp[i] = dp[j] + 1;\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = i + 1; j < n; j++) {\n                if (a.get(i) % a.get(j) == 0) {\n                    dp_temp[i] = Math.max(dp_temp[i], dp[j] + 1);\n                }\n            }\n        }\n        for (int i\n}","language":"java"}
{"task_id":"MBJP\/621","completion":"        String[] strs = testList.toArray(new String[0]);\n        for (int i = 0; i < strs.length; i++) {\n            strs[i] = String.valueOf(Integer.parseInt(strs[i]) + k);\n        }\n\n        return Arrays.asList(strs);\n    }\n}","language":"java"}
{"task_id":"MBJP\/622","completion":"        double sum1 = 0.0;\n        double sum2 = 0.0;\n        if (n == arr1.size()) {\n            for (int i = 0; i < n; i++) {\n                sum1 += arr1.get(i);\n            }\n        } else {\n            for (int i = 0; i < n; i++) {\n                sum1 += arr1.get(i);\n                sum2 += arr2.get(i);\n            }\n        }\n        return sum1 \/ n + sum2 \/ n;\n    }\n}","language":"java"}
{"task_id":"MBJP\/623","completion":"        return nums.stream()\n                .map(num -> num * (n == 1 ? num : num * n))\n                .collect(Collectors.toList());\n    }\n}","language":"java"}
{"task_id":"MBJP\/624","completion":"        return string.toUpperCase();\n    }\n}","language":"java"}
{"task_id":"MBJP\/625","completion":"        newlist.add(0, newlist.get(newlist.size()-1));\n        newlist.remove(newlist.size()-1);\n        return newlist;\n    }\n}","language":"java"}
{"task_id":"MBJP\/626","completion":"        if (r < 0)\n            return -1;\n        if (r == 0 || r == 1)\n            return r;\n        else\n            return r * r * (3 - 2 * r);\n    }\n}","language":"java"}
{"task_id":"MBJP\/627","completion":"        int minMissing = start;\n        for(int i = start + 1; i < end; i++) {\n            if(array.get(i) < array.get(minMissing)) {\n                minMissing = i;\n            }\n        }\n\n        int element;\n        for(element = start; element < end; element++) {\n            if(array.get(element) == array.get(minMissing)) {\n                continue;\n            }\n            else {\n                return minMissing;\n            }\n        }\n        return minMissing;\n    }\n}","language":"java"}
{"task_id":"MBJP\/628","completion":"        \/\/ code\n        StringBuilder sb = new StringBuilder(string);\n        for(int i=0; i<string.length(); i++){\n            if(string.charAt(i) == ' '){\n                sb.setCharAt(i, '%');\n                sb.setCharAt(i+1, '2');\n                sb.setCharAt(i+2, '0');\n                sb.setCharAt(i+3, '2');\n                sb.setCharAt(i+4, '4');\n            }\n        }\n        return sb.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/629","completion":"        List<Integer> evenList = new ArrayList<Integer>();\n        int count = 0;\n        for (Integer i : list) {\n            if (i % 2 == 0) {\n                evenList.add(i);\n                count++;\n            }\n        }\n        if (count > 0) {\n            return evenList;\n        } else {\n            return null;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/630","completion":"        List<List<Integer>> coordinates = new ArrayList<>();\n        for (int i = 0; i < testTup.size(); i++) {\n            List<Integer> coordinate = new ArrayList<>();\n            for (int j = i + 1; j < testTup.size(); j++) {\n                coordinate.add(testTup.get(j));\n                coordinate.add(testTup.get(i));\n            }\n            if (coordinate.size() > 0) {\n                coordinates.add(coordinate);\n            }\n        }\n        return coordinates;\n    }\n}","language":"java"}
{"task_id":"MBJP\/631","completion":"        return text.replaceAll(\" \", \"_\").replaceAll(\"_\", \" \");\n    }\n}","language":"java"}
{"task_id":"MBJP\/632","completion":"        List<Integer> result = new ArrayList<>();\n        for (Integer i : numList) {\n            if (i == 0) {\n                result.add(0);\n            }\n            result.add(i);\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/633","completion":"        int xor = 0;\n        for (int i = 0; i < n; i++)\n            for (int j = i + 1; j < n; j++) {\n                xor = xor ^ arr.get(i) ^ arr.get(j);\n            }\n        return xor;\n    }\n}","language":"java"}
{"task_id":"MBJP\/634","completion":"        int sum = 0;\n        for (int i = 1; i <= n; i *= 2) {\n            sum += Math.pow(i, 4);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/635","completion":"        for (int i = iterable.size() \/ 2 - 1; i >= 0; i--) {\n            heapify(iterable, iterable.size(), i);\n        }\n        for (int i = iterable.size() - 1; i >= 0; i--) {\n            Collections.swap(iterable, 0, i);\n            heapify(iterable, i, 0);\n        }\n        return iterable;\n    }\n}","language":"java"}
{"task_id":"MBJP\/636","completion":"        if(a == 0) {\n            return \"No\";\n        }\n        if(b * b - 4 * a * c < 0) {\n            return \"No\";\n        }\n        if(b * b - 4 * a * c == 0) {\n            return \"Yes\";\n        }\n        if(b * b - 4 * a * c > 0) {\n            return \"Yes\";\n        }\n\n        return \"No\";\n\n    }\n}","language":"java"}
{"task_id":"MBJP\/637","completion":"        int profit = actualCost - saleAmount;\n        if (profit <= 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/638","completion":"        int w = 35.74 + (0.6215 * t) - (35.75 * Math.pow((v \/ 100), 0.16)) + (0.4275 * t * Math.pow((v \/ 100), 0.16));\n        return w;\n    }\n}","language":"java"}
{"task_id":"MBJP\/639","completion":"        int counter = 0;\n\n        for(String s: sampleNames) {\n            if (!s.startsWith(\"a\")) {\n                counter += s.length();\n            }\n        }\n\n        return counter;\n    }\n}","language":"java"}
{"task_id":"MBJP\/640","completion":"        String res = \"\";\n        Stack<String> st = new Stack<>();\n        for (String str: items) {\n            if (str.length() < 2 || str.equals(\"(\") || str.equals(\")\")) {\n                continue;\n            }\n            st.push(str);\n        }\n        while (!st.isEmpty()) {\n            String str = st.pop();\n            if (str.length() >= 2 && str.charAt(0) == '(' && str.charAt(str.length() - 1) == ')') {\n                continue;\n            }\n            res = res + str;\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/641","completion":"        \/\/ code here\n        return 0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/643","completion":"        \/\/ Write your code here\n        return \"Not matched!\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/644","completion":"        List<Integer> result = new ArrayList<>();\n        int j = 0;\n        for (int i = input.size() - 1; i >= 0; i--) {\n            if (j < k) {\n                result.add(input.get(i));\n                j++;\n            } else {\n                break;\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/645","completion":"        if(k > testList.size() || k < 0){\n            return -1;\n        }\n        else{\n            return findKProductUtil(testList, 0, testList.size(), k);\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/646","completion":"        \/\/ code goes here\n        int i, j, res = 0;\n        int arr[] = new int[n + 1];\n        for (i = 0; i <= n; i++)\n            arr[i] = 0;\n        arr[0] = 1;\n        arr[1] = 1;\n        for (i = 2; i <= n; i++) {\n            for (j = 1; j <= i; j++) {\n                arr[i] += arr[i - j] * arr[j];\n            }\n        }\n\n        res = arr[n] \/ (i * i * i);\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/647","completion":"        List<String> result = new ArrayList<>();\n        String s = text.toLowerCase();\n        String regex = \"\\\\p{Lu}+\";\n        String[] split = s.split(regex);\n        for (String str: split) {\n            result.add(str);\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/648","completion":"        Collections.reverse(lst);\n        List<Integer> answer = new ArrayList<>();\n        for (int i = 0; i < lst.size() - 1; i += 2) {\n            answer.add(lst.get(i + 1));\n            lst.set(i + 1, lst.get(i));\n        }\n        if (lst.size() % 2 == 0) {\n            answer.add(lst.get(lst.size() - 1));\n        }\n        return answer;\n    }\n}","language":"java"}
{"task_id":"MBJP\/649","completion":"        int sum = 0;\n        if(m <= n){\n            for(int i = m; i <= n; i++){\n                sum += nums.get(i);\n            }\n        }\n        else{\n            for(int i = m; i >= n; i--){\n                sum += nums.get(i);\n            }\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/650","completion":"        if (n == 0 || m == 0) {\n            return arr1.size() == arr2.size() ? true : false;\n        } else if (arr1.get(n - 1) == arr2.get(m - 1)) {\n            return areEqual(arr1, arr2, n - 1, m - 1);\n        } else {\n            return false;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/651","completion":"        for (Integer element : testTup1) {\n            if (!testTup2.contains(element)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/652","completion":"        List<String> result = new ArrayList<>();\n        for (List<List<Integer>> list : testList) {\n            for (List<Integer> innerList : list) {\n                for (Integer i : innerList) {\n                    result.add(String.valueOf(i));\n                }\n            }\n        }\n        return result.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/653","completion":"        HashMap<String, List<Integer>> map = new HashMap<>();\n        for (List<Object> e : l) {\n            map.put(e.get(0), new ArrayList<>());\n        }\n        for (List<Object> e : l) {\n            map.get(e.get(0)).add((Integer) e.get(1));\n        }\n        return map;\n    }\n}","language":"java"}
{"task_id":"MBJP\/654","completion":"        return 2 * (l + b);\n    }\n}","language":"java"}
{"task_id":"MBJP\/655","completion":"        int sum = 0;\n        for (int i = 1; i <= n; i *= 5) {\n            sum += (int) Math.pow(i, 5);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/656","completion":"        int sum = 0;\n        for(int i = 0; i < n; i++) {\n            sum += Math.abs(a.get(i) - b.get(i));\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/657","completion":"        int x = n;\n        while (x > 0) {\n            x = x \/ 10;\n        }\n\n        int r = (int) Math.pow(n, 1);\n        int k = 1;\n\n        while (r > 0) {\n            r = r \/ 10;\n            k++;\n        }\n\n        return k;\n    }\n}","language":"java"}
{"task_id":"MBJP\/658","completion":"        int count = 1;\n        int maxCount = 1;\n        int maxOccurrence = list1.get(0);\n        for (int i = 1; i < list1.size(); i++) {\n            if (list1.get(i) == list1.get(i - 1)) {\n                count++;\n                if (count > maxCount) {\n                    maxCount = count;\n                    maxOccurrence = list1.get(i);\n                }\n            } else {\n                count = 1;\n            }\n        }\n        return maxOccurrence;\n    }\n}","language":"java"}
{"task_id":"MBJP\/659","completion":"        if (x == null || x.size() == 0)\n            return null;\n        List<Integer> ans = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (Integer num : x) {\n            if (!set.contains(num)) {\n                ans.add(num);\n                set.add(num);\n            }\n        }\n        return ans;\n    }\n}","language":"java"}
{"task_id":"MBJP\/660","completion":"        List<Integer> result = new ArrayList<Integer>();\n\n        for (int i = l1; i <= r1; i++) {\n            for (int j = l2; j <= r2; j++) {\n                if (!((Math.pow(i, 2) + Math.pow(j, 2)) == Math.pow(i, 2) + Math.pow(j, 2))) {\n                    result.add(i);\n                    result.add(j);\n                }\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/661","completion":"        int sum = 0;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < n - 2; i++) {\n            sum += arr.get(i);\n        }\n        max = Math.max(sum, max);\n\n        sum = 0;\n        for (int i = n - 1; i > n - 3; i--) {\n            sum += arr.get(i);\n        }\n        max = Math.max(sum, max);\n\n        sum = 0;\n        for (int i = n - 2; i >= 0; i--) {\n            sum += arr.get(i);\n            if (sum >= max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/662","completion":"        HashMap<String, List<Integer>> dict2 = new HashMap<String, List<Integer>>();\n        for (String key: dict1.keySet()) {\n            List<Integer> l = dict1.get(key);\n            dict2.put(key, l.stream().sorted().collect(Collectors.toList()));\n        }\n        return dict2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/663","completion":"        int max = 0;\n        int i = 0, j = n - 1;\n\n        while (i <= j) {\n            int m = (i + j) \/ 2;\n\n            if (m % x == 0 && m % y == 0) {\n                if (max < m) max = m;\n                j = m - 1;\n            } else if (m % x == 0) {\n                i = m + 1;\n            } else {\n                j = m - 1;\n            }\n        }\n\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/664","completion":"        int avg = 0;\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                avg += i;\n                count++;\n            }\n        }\n        if (count == 0) {\n            return 0;\n        }\n        return (avg \/ count);\n    }\n}","language":"java"}
{"task_id":"MBJP\/665","completion":"        numList.remove(0);\n        numList.add(0, numList.get(numList.size() - 1));\n        return numList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/666","completion":"        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == char.charAt(0)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/667","completion":"        int vowelCount = 0;\n        String[] vowelsArray = vowels.split(\"\");\n\n        for (String vowel : vowelsArray) {\n            if (string.contains(vowel)) {\n                vowelCount++;\n            }\n        }\n\n        return vowelCount;\n    }\n}","language":"java"}
{"task_id":"MBJP\/668","completion":"        StringBuffer result = new StringBuffer();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == char) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/669","completion":"        String regExp = \"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\";\n        return ip.matches(regExp) ? \"Valid IP address\" : \"Invalid IP address\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/670","completion":"        int len = nums.size();\n        int trend = nums.get(len - 1) - nums.get(0);\n        for (int i = 0; i < len - 1; i++) {\n            if (nums.get(i) - nums.get(i + 1) != trend) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/671","completion":"        int res = n & -n;\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/672","completion":"        int max = num1;\n        if (num2 > max) {\n            max = num2;\n        }\n        if (num3 > max) {\n            max = num3;\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/673","completion":"        int i = 0, sum = 0, size = list.size();\n        while (i < size) {\n            sum += list.get(i++);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/674","completion":"        return new LinkedList<>(Arrays.asList(string.split(\"\\\\s+\")))\n                .stream()\n                .distinct()\n                .sorted()\n                .collect(Collectors.joining(\" \"));\n    }\n}","language":"java"}
{"task_id":"MBJP\/675","completion":"        if(x >= m && x <= n) {\n            return x + y;\n        }\n        else if(y >= m && y <= n) {\n            return y + x;\n        }\n        else {\n            return 20;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/676","completion":"        \/\/ Write your code here\n        String text = text1.replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        return text;\n    }\n}","language":"java"}
{"task_id":"MBJP\/677","completion":"        return ((a + b > c) && (a + c > b) && (b + c > a));\n    }\n}","language":"java"}
{"task_id":"MBJP\/678","completion":"        String str = \"\";\n        String space = \"\";\n        for(int i=0; i<str1.length(); i++){\n            if(str1.charAt(i) != ' '){\n                str = str+str1.charAt(i);\n            }\n            else if(str1.charAt(i) == ' '){\n                str = str + space;\n            }\n        }\n        return str;\n    }\n}","language":"java"}
{"task_id":"MBJP\/679","completion":"        return ditionary.keySet().toArray()[key].toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/680","completion":"        int i = 0, j = 0, m = 0;\n        while (i < nums.size() && j < nums.size()) {\n            if (nums.get(i) < nums.get(j))\n                i++;\n            else if (nums.get(i) > nums.get(j))\n                j++;\n            else if (i < j)\n                m = j;\n        }\n        return i == j && (m == nums.size() - 1 || nums.get(m) < nums.get(m + 1));\n    }\n}","language":"java"}
{"task_id":"MBJP\/681","completion":"        if (n <= 2)\n            return n;\n        if ((n % 2) == 0)\n            return 2;\n\n        int min = 2;\n        int c = 3;\n        while (c <= Math.sqrt(n) && (n % c) != 0) {\n            if (n % c == 0) {\n                min = c;\n            }\n            c += 2;\n        }\n        return min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/682","completion":"        return nums1.stream().map((i) -> i * nums2.get(nums1.indexOf(i))).collect(Collectors.toList());\n    }\n}","language":"java"}
{"task_id":"MBJP\/683","completion":"        while (n > 0) {\n            int sqrt = (int) Math.sqrt(n);\n            if (sqrt * sqrt == n)\n                return true;\n            if (sqrt * sqrt < n)\n                n -= sqrt * sqrt;\n            else\n                return false;\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/684","completion":"        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == x.charAt(0)) {\n                for (int j = 0; j < x.length(); j++) {\n                    if (str.charAt(i + j) == x.charAt(j)) {\n                        count++;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/685","completion":"        int sum = 0;\n        for (int i = 1; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/686","completion":"        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (Integer number : testTup) {\n            if (freqMap.containsKey(number)) {\n                freqMap.put(number, freqMap.get(number) + 1);\n            } else {\n                freqMap.put(number, 1);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Integer number : freqMap.keySet()) {\n            sb.append(number + \": \" + freqMap.get(number) + \" \");\n        }\n        return sb.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/687","completion":"        if (a == 0 || b == 0) {\n            return Math.abs(a - b);\n        }\n        if (b > a) {\n            return recurGcd(b, a);\n        }\n        return recurGcd(b, a % b);\n    }\n}","language":"java"}
{"task_id":"MBJP\/688","completion":"        double len = Math.sqrt((a*a)+(b*b));\n        return len;\n    }\n}","language":"java"}
{"task_id":"MBJP\/689","completion":"        \/\/ write your code here\n\n        if (arr == null || arr.size() <= 1) return 0;\n\n        List<Integer>[] dp = new ArrayList[n];\n\n        for (int i = 0; i < n; i++) {\n            dp[i] = new ArrayList<>();\n        }\n\n        for (int i = 0; i < n; i++) {\n            dp[i].add(0);\n        }\n\n        dp[0].add(1);\n\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(j) == i) {\n                    for (int k = 0; k < dp[i].size(); k++) {\n                        int temp = dp[i].get(k) + dp[j + 1].get(k);\n                        if (temp < dp[i].get\n}","language":"java"}
{"task_id":"MBJP\/690","completion":"        \/\/ Write your code here\n        int i = 0;\n        List<Integer> ans = new ArrayList<Integer>();\n        for (i = 0; i < nums.size(); i++) {\n            if (i < nums.size() - 1) {\n                if ((nums.get(i) * (i + 1)) > nums.get(i + 1)) {\n                    nums.set(i, nums.get(i) * (i + 1));\n                    break;\n                } else {\n                    if (i == nums.size() - 2) {\n                        i++;\n                    }\n                }\n            }\n        }\n        return nums;\n    }\n}","language":"java"}
{"task_id":"MBJP\/691","completion":"        HashMap<Integer, List<Integer>> answer = new HashMap<>();\n        for (List<Integer> list : testList) {\n            Integer key = list.get(0);\n            Integer value = list.get(1);\n            if (answer.containsKey(key)) {\n                answer.get(key).add(value);\n            } else {\n                answer.put(key, new LinkedList<Integer>());\n                answer.get(key).add(value);\n            }\n        }\n        return answer;\n    }\n}","language":"java"}
{"task_id":"MBJP\/692","completion":"        int x = 1;\n        int y = 1;\n        int temp = 1;\n        int last = 0;\n\n        while (temp < n) {\n            temp *= 10;\n            x++;\n        }\n\n        while (temp >= n) {\n            temp \/= 10;\n            y++;\n        }\n\n        last = (int) (Math.pow(10, x - 1) * (Math.pow(10, y - 1)));\n        return last;\n    }\n}","language":"java"}
{"task_id":"MBJP\/693","completion":"        return text1.replaceAll(\"\\\\s+\", \" \");\n    }\n}","language":"java"}
{"task_id":"MBJP\/694","completion":"        \/\/ write your code here\n        Set<Integer> uniqueElements = new HashSet<>();\n        for (List<Integer> list : testDict.values()) {\n            for (int i : list) {\n                uniqueElements.add(i);\n            }\n        }\n        List<Integer> unique = new ArrayList<>(uniqueElements);\n        return unique;\n    }\n}","language":"java"}
{"task_id":"MBJP\/695","completion":"        for (int i = 0; i < testTup1.size(); i++) {\n            if (testTup1.get(i) > testTup2.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/696","completion":"        List<List<Object>> output = new ArrayList<>();\n        int len1 = list1.size();\n        int len2 = list2.size();\n        int i = 0;\n        int j = 0;\n        while (i < len1 && j < len2) {\n            List<Object> temp = new ArrayList<>();\n            int k = 0;\n            while (k < list1.get(i).size() && k < list2.get(j).size()) {\n                temp.add(list1.get(i).get(k) + list2.get(j).get(k));\n                k++;\n            }\n            while (k < list1.get(i).size()) {\n                temp.add(list1.get(i).get(k));\n                k++;\n            }\n            while (k < list2.get(j).size()) {\n                temp.add(list2.get(j).get(k));\n                k++;\n            }\n\n}","language":"java"}
{"task_id":"MBJP\/697","completion":"        return (arrayNums.stream().filter(num -> num % 2 == 0).count());\n    }\n}","language":"java"}
{"task_id":"MBJP\/698","completion":"        List<Integer> keys = new ArrayList<Integer>();\n        keys.addAll(testDict.keySet());\n\n        Collections.sort(keys, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.hashCode() - o2.hashCode();\n            }\n        });\n\n        HashMap<List<Integer>, Integer> sortedTestDict = new HashMap<List<Integer>, Integer>();\n\n        for (int i = 0; i < keys.size(); i++) {\n            sortedTestDict.put(keys.get(i), testDict.get(keys.get(i)));\n        }\n\n        return sortedTestDict;\n    }\n}","language":"java"}
{"task_id":"MBJP\/699","completion":"        if (str1.length() != str2.length()) {\n            return \"Not Possible\";\n        }\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/700","completion":"        int count = 0;\n        for (int i : li) {\n            if (min <= i && i <= max) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/701","completion":"        int n = arr.size();\n        int leftSum = 0;\n        int rightSum = 0;\n        for (int i = 0; i < n; i++) {\n            leftSum += arr.get(i);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            rightSum += arr.get(i);\n        }\n        if (leftSum == rightSum) {\n            return -1;\n        } else {\n            int leftDiff = 0;\n            for (int i = 0; i < n; i++) {\n                leftDiff += Math.abs(arr.get(i) - (leftSum - leftDiff));\n            }\n            int rightDiff = 0;\n            for (int i = n - 1; i >= 0; i--) {\n                rightDiff += Math.abs(arr.get(i) - (rightSum -\n}","language":"java"}
{"task_id":"MBJP\/702","completion":"        \/\/Write your code here\n        if(n==0)\n            return 0;\n        if(k>=n)\n            return 0;\n        int min = Integer.MAX_VALUE;\n        for(int i=0;i<n;i++){\n            if(arr.get(i)<=k){\n                if(i+1==n)\n                    return 0;\n                if(arr.get(i+1)-arr.get(i)<=min)\n                    min = arr.get(i+1)-arr.get(i);\n            }\n        }\n        return n-min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/703","completion":"        return d.containsKey(x);\n    }\n}","language":"java"}
{"task_id":"MBJP\/704","completion":"        double sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += 1.0 \/ i;\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/705","completion":"        List<List<Object>> result = new ArrayList<List<Object>>();\n\n        for (List<Integer> list2 : list1) {\n            List<Object> subList = new ArrayList<Object>();\n\n            for (Integer i : list2) {\n                subList.add(i);\n            }\n\n            Collections.sort(subList, new Comparator<Object>() {\n                public int compare(Object o1, Object o2) {\n                    if (o1 instanceof Integer && o2 instanceof Integer) {\n                        Integer i1 = (Integer) o1;\n                        Integer i2 = (Integer) o2;\n                        return i1.compareTo(i2);\n                    } else if (o1 instanceof String && o2 instanceof String) {\n                        String s1 = (String) o1;\n                        String s2 = (String) o2;\n                        return s1.compareTo(s2);\n                    }\n                    return 0;\n                }\n            });\n\n            result\n}","language":"java"}
{"task_id":"MBJP\/706","completion":"        if (n == 0) return true;\n        if (m == 0) return false;\n\n        if (arr1.get(m - 1) == arr2.get(n - 1)) {\n            return isSubset(arr1, m - 1, arr2, n - 1);\n        }\n        return isSubset(arr1, m, arr2, n - 1) || isSubset(arr1, m - 1, arr2, n);\n    }\n}","language":"java"}
{"task_id":"MBJP\/707","completion":"        int count = 0;\n        while (n > 0) {\n            count += (n & 1);\n            n >>= 1;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/708","completion":"        return new ArrayList<String>(Arrays.asList(string.split(\" \")));\n    }\n}","language":"java"}
{"task_id":"MBJP\/709","completion":"        Map<Integer, Integer> uniqueValues = new HashMap<>();\n        for (int i = 0; i < testList.size(); i++) {\n            for (int j = 0; j < testList.get(i).size(); j++) {\n                if (!uniqueValues.containsKey(testList.get(i).get(j))) {\n                    uniqueValues.put(testList.get(i).get(j), 1);\n                } else {\n                    uniqueValues.put(testList.get(i).get(j), uniqueValues.get(testList.get(i).get(j)) + 1);\n                }\n            }\n        }\n        return getUniqueString(uniqueValues);\n    }\n}","language":"java"}
{"task_id":"MBJP\/710","completion":"        \/\/ code here\n        int first = testTup.get(0);\n        int last = testTup.get(testTup.size() - 1);\n        List<Integer> ans = new ArrayList<Integer>();\n        ans.add(first);\n        ans.add(last);\n        return ans;\n    }\n}","language":"java"}
{"task_id":"MBJP\/711","completion":"        int temp = n;\n        String x = Integer.toString(n);\n        int n1 = Integer.parseInt(x);\n        int n2 = n1 * 10;\n        int n3 = n2 * 10;\n        String s = Integer.toString(n3);\n        String s1 = s.substring(0, 2);\n        String s2 = s.substring(2, 4);\n        String s3 = s.substring(4, 6);\n        String s4 = s.substring(6, 8);\n        String s5 = s.substring(8, 10);\n        int c = Integer.parseInt(s2) + Integer.parseInt(s4);\n        int d = Integer.parseInt(s3) + c;\n        int e = Integer.parseInt(s5) + d;\n        System.out.println(e);\n        System.out.println(temp);\n        if (e == temp) {\n            return true;\n        } else {\n            return\n}","language":"java"}
{"task_id":"MBJP\/712","completion":"        Set<Integer> set = new HashSet<>();\n\n        List<Object> list = new ArrayList<>();\n        for (List<Integer> l : list1) {\n            set.clear();\n            for (Integer i : l) {\n                if (set.add(i)) {\n                    list.add(i);\n                }\n            }\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/713","completion":"        \/\/ Complete the function\n        if (testTup.isEmpty()) {\n            return false;\n        }\n        for (int i = 0; i < testTup.size(); i++) {\n            if (testTup.get(i) == true) {\n                if (i < testTup.size() - 1) {\n                    if (testTup.get(i+1) == false) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/714","completion":"        \/\/ code here\n        int count = 0;\n        if (n == 0) {\n            return count;\n        }\n        else if (n == 1) {\n            return count;\n        }\n        else {\n            for (int i = 2; i < n; i++) {\n                if (n % i == 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/715","completion":"        List<Integer> tuple = new ArrayList<>();\n        String[] strArr = testStr.split(\",\");\n        for (String ele : strArr) {\n            tuple.add(Integer.valueOf(ele));\n        }\n        return tuple;\n    }\n}","language":"java"}
{"task_id":"MBJP\/716","completion":"        if (a == 1)\n            return 2;\n        else if (a == 2)\n            return 4;\n        else if (a == 3)\n            return 7;\n        else if (a == 4)\n            return 14;\n        else if (a == 5)\n            return 31;\n        else if (a == 6)\n            return 43;\n        else if (a == 7)\n            return 57;\n        else if (a == 8)\n            return 65;\n        else if (a == 9)\n            return 77;\n        else if (a == 10)\n            return 89;\n        else if (a == 11)\n            return 107;\n        else if (a == 12)\n            return 121;\n        else if (a == 13)\n            return 137;\n        else if (a == 14)\n            return 153;\n        else if (\n}","language":"java"}
{"task_id":"MBJP\/717","completion":"        double sum = 0;\n        double sumOfSquares = 0;\n        double mean = 0;\n        double sqMean = 0;\n\n        if (data.isEmpty()) return 0;\n\n        for (int i = 0; i < data.size(); i++) {\n            sum += data.get(i);\n            sumOfSquares += data.get(i) * data.get(i);\n        }\n\n        mean = sum \/ data.size();\n\n        for (int i = 0; i < data.size(); i++) {\n            sqMean += data.get(i) * (data.get(i) - mean);\n        }\n\n        return Math.sqrt(sqMean \/ data.size());\n    }\n}","language":"java"}
{"task_id":"MBJP\/718","completion":"        List<Object> list = new ArrayList<>();\n        int len = list1.size() \/ 2;\n        for (int i = 0; i < len; i++) {\n            list.add(list1.get(i));\n            list.add(list1.get(list1.size() - 1 - i));\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/719","completion":"        String result = \"Not matched!\";\n        int counter = 0;\n        while (counter < text.length() - 1) {\n            if (text.charAt(counter) == 'a') {\n                int counter2 = counter + 1;\n                while (counter2 < text.length() && text.charAt(counter2) == 'b') {\n                    counter2++;\n                }\n                result = \"Found a match!\";\n                return result;\n            }\n            counter++;\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/720","completion":"        List<Object> res = new ArrayList<>(testTup.size() + 1);\n        res.addAll(testTup);\n        res.add(testDict);\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/721","completion":"        double res = Double.NEGATIVE_INFINITY;\n        for (int i = 1; i <= n; i++) {\n            double[] costs = new double[n + 1];\n            for (int j = 1; j <= n; j++) {\n                costs[j] = cost.get(j - 1).get(i - 1) + costs[j - 1];\n            }\n            double ans = Double.NEGATIVE_INFINITY;\n            for (int j = n; j > 0; j--) {\n                ans = Math.max(ans, costs[j] - costs[j - 1]);\n            }\n            res = Math.max(res, ans);\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/722","completion":"        HashMap<String, List<Double>> result = new HashMap<String, List<Double>>();\n        for (String name : students.keySet()) {\n            List<Double> data = students.get(name);\n            if (data.get(0) < h && data.get(1) >= w) {\n                result.put(name, data);\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/723","completion":"        if (nums1.size() != nums2.size()) {\n            throw new IllegalArgumentException(\"Lists size should be the same\");\n        }\n        int res = 0;\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int n : nums1) {\n            if (map.containsKey(n)) {\n                int c = map.get(n);\n                res += c;\n                map.put(n, c + 1);\n            } else {\n                map.put(n, 1);\n            }\n        }\n        for (int n : nums2) {\n            if (map.containsKey(n)) {\n                int c = map.get(n);\n                res -= c;\n                map.put(n, c - 1);\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/724","completion":"        if (power == 0) {\n            return 1;\n        }\n        return base * powerBaseSum(base, power - 1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/725","completion":"        \/\/ write your code here\n        String regex = \"\\\"([^\\\"]+)\\\"\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(text1);\n        List<String> result = new ArrayList<>();\n\n        while (matcher.find()) {\n            result.add(matcher.group(1));\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/726","completion":"        \/\/ your code here\n        int n = testTup.size() - 1;\n        int[] ans = new int[n];\n        int idx = 0;\n        for (int i = 0; i < n; i++) {\n            ans[i] = testTup.get(i) * testTup.get(i + 1);\n        }\n        ans[n] = testTup.get(n) * testTup.get(0);\n        return Arrays.asList(ans);\n    }\n}","language":"java"}
{"task_id":"MBJP\/727","completion":"        s = s.replaceAll(\"[^\\\\p{L}\\\\d]\", \"\");\n        return s;\n    }\n}","language":"java"}
{"task_id":"MBJP\/728","completion":"        List<Integer> output = new ArrayList<>();\n        int index = 0;\n\n        while (index < lst1.size() || index < lst2.size()) {\n            if (index < lst1.size()) {\n                output.add(lst1.get(index) + lst2.get(index));\n            }\n            if (index < lst2.size()) {\n                output.add(lst2.get(index) + lst1.get(index));\n            }\n            index++;\n        }\n        return output;\n    }\n}","language":"java"}
{"task_id":"MBJP\/729","completion":"        return nums1.stream().map(n -> n + nums2.get(nums2.indexOf(n))).collect(Collectors.toList());\n    }\n}","language":"java"}
{"task_id":"MBJP\/730","completion":"        int n = nums.size();\n        Set<Object> unique = new HashSet<>();\n        for (int i = 0; i < n; i++) {\n            if (i == 0 || nums.get(i - 1) != nums.get(i)) {\n                unique.add(nums.get(i));\n            } else if (!unique.contains(nums.get(i))) {\n                unique.add(nums.get(i));\n            }\n        }\n        List<Object> result = new ArrayList<>();\n        for (Object o : unique) {\n            result.add(o);\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/731","completion":"        double vol = Math.PI * r * r * h;\n        return vol;\n    }\n}","language":"java"}
{"task_id":"MBJP\/732","completion":"        String res = \"\";\n        for (char c : text.toCharArray()) {\n            if (c == ' ') res += ':';\n            else if (c == ',') res += ':';\n            else if (c == '.') res += ':';\n            else res += c;\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/733","completion":"        int low = 0;\n        int high = a.size() - 1;\n\n        while (low <= high) {\n            int mid = (low + high) \/ 2;\n\n            if (x == a.get(mid)) {\n                return mid;\n            }\n\n            if (x > a.get(mid)) {\n                low = mid + 1;\n            }\n\n            else {\n                high = mid - 1;\n            }\n        }\n\n        return -1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/734","completion":"        \/\/ write your code here\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                sum += arr.get(j) * arr.get(i);\n            }\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/735","completion":"        return n ^ ((n & 0x55555555) << 1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/736","completion":"        int lo = 0;\n        int hi = a.size();\n        while (lo < hi) {\n            int mid = lo + (hi - lo) \/ 2;\n            if (a.get(mid) < x) lo = mid + 1;\n            else hi = mid;\n        }\n        return lo;\n    }\n}","language":"java"}
{"task_id":"MBJP\/737","completion":"        return \"Valid\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/738","completion":"        return Math.pow(1.0, n - 1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/739","completion":"        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n\n        for (int i = (n + 1) * (n + 2) \/ 2; i <= sum; i++) {\n            String str = String.valueOf(i);\n            int k = 0;\n            for (int j = 1; j <= n; j++) {\n                if (str.charAt(j) != '0') {\n                    k++;\n                }\n            }\n            if (k == n) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/740","completion":"        HashMap<Integer, Integer> result = new HashMap<Integer, Integer>();\n        for(int i = 1; i < testTup.size(); i++) {\n            result.put(testTup.get(i - 1), testTup.get(i));\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/741","completion":"        \/\/ your code here\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < s.length() - 1; i++) {\n            if (arr[i] == arr[i + 1])\n                return false;\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/742","completion":"        return 0.5 * Math.pow(side, 2) * Math.sin(6.2831853 \/ (2 * side));\n    }\n}","language":"java"}
{"task_id":"MBJP\/743","completion":"        List<Integer> list2 = new ArrayList<>();\n        int len = list1.size();\n        for (int i = 0; i < len; i++) {\n            list2.add(list1.get(i));\n        }\n\n        for (int i = 0; i < n; i++) {\n            list2.add(0, list2.get(0));\n        }\n\n        int size = list2.size();\n        int count = 0;\n\n        for (int i = 0; i < size; i++) {\n            if (i != count) {\n                list2.set(i, list2.get(count));\n            }\n            count++;\n        }\n\n        return list2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/744","completion":"        for (Integer val : testTup) {\n            if (val == null) {\n                return true;\n            }\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/745","completion":"        List<Integer> result = new ArrayList<Integer>();\n        for (int i = startnum; i <= endnum; i++) {\n            String num = String.valueOf(i);\n            List<Integer> digits = new ArrayList<Integer>();\n            for (char c : num.toCharArray())\n                digits.add((int) c);\n            int sum = 0;\n            for (int digit : digits)\n                sum += digit;\n            if (sum % digits.size() == 0)\n                result.add(i);\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/746","completion":"        if (r <= 0 || a <= 0) {\n            return null;\n        }\n        return (2 * Math.PI * r * r) - (2 * Math.PI * r * a);\n    }\n}","language":"java"}
{"task_id":"MBJP\/747","completion":"        if (x.charAt(m - 1) == y.charAt(n - 1) && x.charAt(n - 1) == z.charAt(o - 1))\n            return 1 + lcsOfThree(x, y, z, m - 1, n - 1, o - 1);\n        return Math.max(lcsOfThree(x, y, z, m, n - 1, o), lcsOfThree(x, y, z, m - 1, n, o));\n    }\n}","language":"java"}
{"task_id":"MBJP\/748","completion":"        String regex = \"[A-Z][^A-Z]*\";\n        return str1.replaceAll(regex, \"$0 \");\n    }\n}","language":"java"}
{"task_id":"MBJP\/749","completion":"        List<Integer> numsInt = new ArrayList<>();\n\n        for(String num : numsStr) {\n            numsInt.add(Integer.parseInt(num));\n        }\n\n        Collections.sort(numsInt);\n\n        return numsInt;\n    }\n}","language":"java"}
{"task_id":"MBJP\/750","completion":"        for (int i = 0; i < testTup.size(); i++) {\n            testList.add(testTup.get(i));\n        }\n        return testList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/751","completion":"        return isMinHeap(arr, i, 1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/752","completion":"        int j = 1;\n        int num = 1;\n        while (n > 0) {\n            j = j * 2 + 1;\n            num = num + j;\n            n = n - 1;\n        }\n        return num;\n    }\n}","language":"java"}
{"task_id":"MBJP\/753","completion":"        List<List<Object>> result = new ArrayList<>();\n        result.add(testList.get(0));\n        if (testList.size() == 1) {\n            return result;\n        }\n        int index = 1;\n        while (testList.size() > index && result.size() < k) {\n            if (testList.get(index).get(0) < testList.get(index - 1).get(0)) {\n                result.add(testList.get(index));\n            }\n            index++;\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/754","completion":"        List<Integer> res = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < l1.size(); i++) {\n            if (l1.get(i).equals(l2.get(i)) && l1.get(i).equals(l3.get(i))) {\n                res.add(i);\n                count++;\n            }\n        }\n        System.out.println(count);\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/755","completion":"        if (numbers.size() <= 1) {\n            return null;\n        }\n        List<Integer> list = new ArrayList<>(numbers);\n        list.sort(Comparator.reverseOrder());\n        if (list.size() < 2) {\n            return null;\n        }\n        return list.get(1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/756","completion":"        if (text.length() < 3) {\n            return \"Not matched!\";\n        }\n        char a = text.charAt(0);\n        char b = text.charAt(1);\n        if (a == 'a' && b == 'b') {\n            return \"Found a match!\";\n        }\n        return \"Not matched!\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/757","completion":"        String result = \"\";\n        int j = testList.size();\n        if (testList.size() == 1) {\n            return result;\n        }\n        for (int i = 0; i < j; i++) {\n            if (i + 1 < j && testList.get(i + 1).compareTo(testList.get(i)) < 0) {\n                int j1 = testList.get(i).length();\n                int j2 = testList.get(i + 1).length();\n                int k = j1 > j2 ? j1 : j2;\n                int l = j2 > j1 ? j2 : j1;\n                int reverseCount = 0;\n                for (int m = 0; m < k; m++) {\n                    if (testList.get(i).charAt(m) != testList.get(i + 1).charAt(m)) {\n                        break\n}","language":"java"}
{"task_id":"MBJP\/758","completion":"        Map<String,Integer> res = new HashMap<>();\n        for(int i=0;i<list1.size();i++){\n            StringBuilder sb = new StringBuilder();\n            for(int j=0;j<list1.get(i).size();j++){\n                if(j==0)\n                    sb.append(list1.get(i).get(j));\n                else{\n                    sb.append(\"(\"+list1.get(i).get(j));\n                    sb.append(\",\"+list1.get(i).get(j-1));\n                    sb.append(\")\");\n                }\n                if(res.containsKey(sb.toString())){\n                    res.put(sb.toString(),res.get(sb.toString())+1);\n                }\n                else\n                    res.put(sb.toString(),1);\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/759","completion":"        if (num.contains(\".\")) {\n            String[] a = num.split(\"\\\\.\");\n            return (a.length == 2 && a[1].length() == 2 && a[0].length() == num.length());\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/760","completion":"        if (arr.size() == 0) {\n            return \"NO\";\n        }\n        HashSet<Integer> hs = new HashSet<>();\n        for (Integer i : arr) {\n            hs.add(i);\n        }\n        if (hs.size() == 1) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/761","completion":"        double x = 180 * Math.toDegrees(Math.atan2(d, a));\n        return x == 0 ? x : x > 0 ? x - 360 : x + 360;\n    }\n}","language":"java"}
{"task_id":"MBJP\/762","completion":"        int j = 0;\n        if (monthnum3 == 1 || monthnum3 == 3 || monthnum3 == 5 || monthnum3 == 7 || monthnum3 == 8 || monthnum3 == 10 || monthnum3 == 12) {\n            j++;\n        } else if (monthnum3 == 2) {\n            j = 31;\n        }\n        if (monthnum3 == 4 || monthnum3 == 6 || monthnum3 == 9 || monthnum3 == 11) {\n            j = 30;\n        }\n        return j == 30;\n    }\n}","language":"java"}
{"task_id":"MBJP\/763","completion":"        int i, j;\n        int minDiff = 100;\n        for (i = 0; i < n - 1; i++) {\n            for (j = i + 1; j < n; j++) {\n                if (Math.abs(arr.get(i) - arr.get(j)) < minDiff) {\n                    minDiff = Math.abs(arr.get(i) - arr.get(j));\n                }\n            }\n        }\n        return minDiff;\n    }\n}","language":"java"}
{"task_id":"MBJP\/764","completion":"        return 0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/765","completion":"        int i = 0;\n        int[] arr = new int[n];\n        while (n > 1) {\n            arr[i] = n;\n            n = sum(n);\n            i++;\n        }\n        for (int j : arr) {\n            if (j != 1) {\n                return j;\n            }\n        }\n        return 1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/766","completion":"        List<List<Integer>> result = new ArrayList<>();\n\n        for (int i = 0; i < l1.size() - 1; i++) {\n            for (int j = i + 1; j < l1.size(); j++) {\n                result.add(Arrays.asList(l1.get(i), l1.get(j)));\n            }\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/767","completion":"        int pairCount = 0;\n        Set<Integer> seen = new HashSet<>();\n\n        for (int i = 0; i < n; i++) {\n            int cur = arr.get(i);\n            if (seen.contains(sum - cur)) {\n                pairCount++;\n            }\n            seen.add(cur);\n        }\n        return pairCount;\n    }\n}","language":"java"}
{"task_id":"MBJP\/768","completion":"        \/\/code here\n        boolean odd = ((x & 1) == 1);\n        return odd;\n    }\n}","language":"java"}
{"task_id":"MBJP\/769","completion":"        List<Integer> ans = new ArrayList<>();\n        List<Integer> l1 = new ArrayList<>(li1);\n        List<Integer> l2 = new ArrayList<>(li2);\n        l1.sort(Integer::compareTo);\n        l2.sort(Integer::compareTo);\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i) > l2.get(j)) {\n                ans.add(l2.get(j++));\n            } else if (l1.get(i) < l2.get(j)) {\n                ans.add(l1.get(i++));\n            } else {\n                ans.add(l2.get(j++));\n                i++;\n            }\n        }\n        while (i < l1.size()) {\n            ans.add(l1.get(i++));\n        }\n        while (j <\n}","language":"java"}
{"task_id":"MBJP\/770","completion":"        int total = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= i; j++) {\n                int val = i * (i + 1) * (i + 2) * (i + 3);\n                if (val % 2 == 1) {\n                    total += val;\n                }\n            }\n        }\n        return total;\n    }\n}","language":"java"}
{"task_id":"MBJP\/771","completion":"        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < exp.length(); i++) {\n            char c = exp.charAt(i);\n            if (c == '{' || c == '[' || c == '(') {\n                stack.push(c);\n            } else if (c == '}' || c == ']' || c == ')') {\n                if (stack.isEmpty() || c != stack.pop()) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}","language":"java"}
{"task_id":"MBJP\/772","completion":"        String result = \"\";\n        String[] arr = testStr.split(\" \");\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].length() != k) {\n                result += arr[i] + \" \";\n            }\n        }\n        return result.trim();\n    }\n}","language":"java"}
{"task_id":"MBJP\/773","completion":"        List<Object> list = new ArrayList<>();\n        int pos = 0;\n        while (true) {\n            pos = text.indexOf(pattern, pos);\n            if (pos == -1) {\n                break;\n            }\n            list.add(pattern);\n            list.add(pos);\n            pos += pattern.length();\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/774","completion":"        return \"Valid Email\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/775","completion":"        \/\/ code here\n        for(int i=0;i<nums.size();i++)\n        {\n            if(nums.get(i)%2!=0)\n                return false;\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/776","completion":"        if (testStr == null || testStr.length() == 0) return 0;\n        int vowelsCount = 0;\n        char ch;\n        for (int i = 1; i < testStr.length(); i++) {\n            ch = testStr.charAt(i);\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') vowelsCount++;\n        }\n        return vowelsCount;\n    }\n}","language":"java"}
{"task_id":"MBJP\/777","completion":"        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n        }\n        for (int i = 0; i < arr.size() - 1; i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if ((arr.get(i) + arr.get(j)) == n) {\n                    return arr.get(i) + arr.get(j);\n                }\n            }\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/778","completion":"        \/\/ your code here\n        List<List<Object>> result = new ArrayList<>();\n\n        for (Integer i = 0; i < list1.size() - 1; i++) {\n            if (i < list1.size() - 2 && list1.get(i).equals(list1.get(i + 1))) {\n                result.add(Arrays.asList(list1.get(i), list1.get(i + 1)));\n                i++;\n            } else if (i < list1.size() - 2 && list1.get(i) != list1.get(i + 1)) {\n                List<Object> temp = new ArrayList<>();\n                temp.add(list1.get(i));\n                result.add(temp);\n                temp = new ArrayList<>();\n                temp.add(list1.get(i + 1));\n                result.add(temp);\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/779","completion":"        \/\/ write your code here\n        HashMap<String,Integer> map = new HashMap<>();\n        int count = 0;\n        for (List<Integer> list : list1) {\n            map.clear();\n            String key = \"\";\n            for(int i = 0; i < list.size() - 1; i++) {\n                key += list.get(i);\n                if (map.containsKey(key)) {\n                    map.put(key, map.get(key) + 1);\n                } else {\n                    map.put(key, 1);\n                }\n            }\n            count += map.size();\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/780","completion":"        List<List<Integer>> result = new ArrayList<List<Integer>>();\n        if (testList.size() == 0) {\n            return result;\n        }\n\n        \/\/ sort all combinations so that the shortest is first\n        Collections.sort(testList, new Comparator<List<Integer>>() {\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.size() - o2.size();\n            }\n        });\n\n        \/\/ go through the list, adding (n-1) or (n) * (n-1) combinations to the result, where n is the size of the\n        \/\/ current combination.\n        for (int i = 0; i < testList.size(); i++) {\n            \/\/ we start with (n-1) or (n) * (n-1) combinations\n            List<List<Integer>> nMinus1 = new ArrayList<List<Integer>>();\n            List<List<Integer>> n = new ArrayList<List<Integer>>();\n}","language":"java"}
{"task_id":"MBJP\/781","completion":"        if (n == 1) {\n            return \"Even\";\n        }\n        int count = 1;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                if (n \/ i == i) {\n                    count++;\n                } else {\n                    count++;\n                    count++;\n                }\n            }\n        }\n        if (n % Math.sqrt(n) == 0) {\n            count++;\n        }\n        return count % 2 == 0 ? \"Even\" : \"Odd\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/782","completion":"        int sum = 0;\n\n        for (int i = 0; i < arr.size() - 1; i += 2) {\n            sum += arr.get(i);\n        }\n\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/783","completion":"        \/\/ write your code here\n        List<Double> hsvList = new ArrayList<>();\n        double r_max = Math.max(r, Math.max(g, b));\n        double r_min = Math.min(r, Math.min(g, b));\n        double g_max = Math.max(g, b);\n        double g_min = Math.min(g, b);\n        double b_max = Math.max(b, r);\n        double b_min = Math.min(b, r);\n\n        double h, s, v;\n\n        h = 0;\n\n        if (g_max > b_max) {\n            h = 60 * ((g_max - b_min) \/ (g_max - b_max)) + 360;\n        } else if (g_min > b_max) {\n            h = 60 * ((g_min - b_min) \/ (g_max - b_max)) + 120\n}","language":"java"}
{"task_id":"MBJP\/784","completion":"        int total = 1;\n        for (int i = 0; i < list1.size(); i++) {\n            if (i % 2 == 0) {\n                total *= list1.get(i);\n            }\n        }\n        for (int i = 0; i < list1.size(); i++) {\n            if (i % 2 != 0) {\n                total *= list1.get(i);\n            }\n        }\n        return total;\n    }\n}","language":"java"}
{"task_id":"MBJP\/785","completion":"        List<Integer> tuple = new ArrayList<Integer>();\n        \/\/String[] str = testStr.split(\",\");\n        String[] str = testStr.replaceAll(\" \", \"\").split(\",\");\n        for(int i = 0; i < str.length; i++)\n        {\n            tuple.add(Integer.parseInt(str[i]));\n        }\n        return tuple;\n    }\n}","language":"java"}
{"task_id":"MBJP\/786","completion":"        int left = 0;\n        int right = a.size();\n        while (left < right) {\n            int mid = left + (right - left) \/ 2;\n            if (a.get(mid) >= x)\n                right = mid;\n            else\n                left = mid + 1;\n        }\n        return left;\n    }\n}","language":"java"}
{"task_id":"MBJP\/787","completion":"        String regex = \"a.*b.*b\";\n        if (text.matches(regex)) {\n            return \"Found a match!\";\n        }\n        return \"Not matched!\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/788","completion":"        testList.add(testStr);\n        return testList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/789","completion":"        if (s < 3) {\n            return s;\n        }\n        int a = 2 * (s * s) - (4 * l);\n        return (int) Math.round(Math.sqrt(a) + l * 2);\n    }\n}","language":"java"}
{"task_id":"MBJP\/790","completion":"        for (int i = 1; i < nums.size(); i++) {\n            if (nums.get(i) % 2 != nums.get(0) % 2)\n                return false;\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/791","completion":"        if (testTup.size() == 0)\n            return testTup;\n        else if (testTup.size() == 1)\n            return (List<Integer>) testTup;\n        else {\n            testTup.set(0, removeNested(testTup.get(0)));\n            testTup.set(1, removeNested(testTup.get(1)));\n            return (List<Integer>) testTup;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/792","completion":"        int count = 0;\n        for (List<Integer> innerList : inputList) {\n            if (innerList.size() > 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/793","completion":"        int pos = -1;\n        int start = 0;\n        int end = n-1;\n        int mid = (end + start) \/ 2;\n\n        while (start <= end) {\n            if (arr.get(mid) == x) {\n                pos = mid;\n                break;\n            } else if (arr.get(mid) < x) {\n                start = mid+1;\n            } else {\n                end = mid-1;\n            }\n            mid = (end + start) \/ 2;\n        }\n\n        return pos;\n    }\n}","language":"java"}
{"task_id":"MBJP\/794","completion":"        if (text.length() >= 4 && text.substring(text.length() - 4).equalsIgnoreCase(\"ab\")) {\n            String result = \"Found a match!\";\n            return result;\n        } else {\n            String result = \"Not matched!\";\n            return result;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/795","completion":"        List<HashMap<String, Object>> result = new ArrayList<HashMap<String, Object>>();\n        HashMap<String, Integer> map = new HashMap<String, Integer>();\n        for (HashMap<String, Object> item : items) {\n            if (map.get(item.get(\"name\").toString()) != null) {\n                map.put(item.get(\"name\").toString(), 1 + (int) map.get(item.get(\"name\").toString()));\n            } else {\n                map.put(item.get(\"name\").toString(), 1);\n            }\n        }\n        PriorityQueue<Item> pq = new PriorityQueue<Item>(map.size(), Collections.reverseOrder());\n        for (String key : map.keySet()) {\n            pq.offer(new Item(key, map.get(key)));\n        }\n        int i = 0;\n        while (pq.size() > 0 && i < n) {\n            result.add(pq.poll().getItem());\n            i++;\n}","language":"java"}
{"task_id":"MBJP\/796","completion":"        int sum = 0;\n        for(String key : dict.keySet()){\n            sum += dict.get(key);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/797","completion":"        return 0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/798","completion":"        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum = sum + arr.get(i);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/799","completion":"        int count = d;\n        int temp = n;\n        while (count > 0) {\n            temp = temp >> 1;\n            count = count - 1;\n        }\n        return temp;\n    }\n}","language":"java"}
{"task_id":"MBJP\/800","completion":"        String res = \"\";\n        int count = 0;\n\n        while(count < text.length()) {\n            if(text.charAt(count) != ' ')\n                res = res + text.charAt(count);\n            else\n                count++;\n        }\n\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/801","completion":"        return (x == y || y == z || x == z) ? 1 : 0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/802","completion":"        return (int) (arr.size() \/ Math.ceil((double) n \/ arr.size()));\n    }\n}","language":"java"}
{"task_id":"MBJP\/803","completion":"        if (n < 0) return false;\n        double sqrt = Math.sqrt(n);\n        return Math.floor(sqrt) == sqrt;\n    }\n}","language":"java"}
{"task_id":"MBJP\/804","completion":"        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % n != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/805","completion":"        int max = 0;\n        List<Integer> maxList = new ArrayList<>();\n\n        for (List<Integer> list : lists) {\n            int sum = 0;\n\n            for (int i = 0; i < list.size(); i++) {\n                sum += list.get(i);\n            }\n\n            if (sum > max) {\n                max = sum;\n                maxList = list;\n            }\n        }\n\n        return maxList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/806","completion":"        int upperCount = 0;\n        int lowerCount = 0;\n        int runCount = 0;\n        for (int i = 0; i < testStr.length(); i++) {\n            if (Character.isUpperCase(testStr.charAt(i))) {\n                upperCount++;\n            } else {\n                runCount++;\n                if (runCount == 0) {\n                    lowerCount++;\n                } else {\n                    runCount = 0;\n                }\n            }\n        }\n        return Math.max(upperCount, runCount) + lowerCount;\n    }\n}","language":"java"}
{"task_id":"MBJP\/807","completion":"        return nums.stream()\n                .filter(n -> n % 2 != 0)\n                .findFirst()\n                .orElse(0);\n    }\n}","language":"java"}
{"task_id":"MBJP\/808","completion":"        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/809","completion":"        \/\/ write your code here\n        if(testTup1.size()!=testTup2.size())\n            return false;\n        List<Integer> temp=new ArrayList<>(testTup1);\n        temp.sort(null);\n        for(int i=0;i<testTup1.size();i++){\n            if(temp.get(i)>testTup2.get(i))\n                return false;\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/810","completion":"        List<String> list = new ArrayList<>();\n        for (int i = a; i < c + a; i++) {\n            for (int j = b; j < d + b; j++) {\n                if (j == 1) {\n                    list.add(\"p\");\n                } else if (j == 2) {\n                    list.add(\"q\");\n                } else if (j == 3) {\n                    list.add(\"r\");\n                } else {\n                    list.add(\"s\");\n                }\n            }\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/811","completion":"        int i = 0;\n        int j = 0;\n        while (i < testList1.size() && j < testList2.size()) {\n            if (testList1.get(i).get(0) == testList2.get(j).get(0)) {\n                i++;\n                j++;\n            } else if (testList1.get(i).get(0) > testList2.get(j).get(0)) {\n                j++;\n            } else if (testList1.get(i).get(0) < testList2.get(j).get(0)) {\n                i++;\n            } else {\n                return false;\n            }\n        }\n        return i == testList1.size() && j == testList2.size();\n    }\n}","language":"java"}
{"task_id":"MBJP\/812","completion":"        \/\/ code here\n        String str=street.substring(0,street.length()-5);\n        String str1=str.substring(0,str.length()-1);\n        return str1+\" Rd.\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/813","completion":"        int l=0;\n        for(int i=0;i<str1.length();i++)\n        {\n            if(str1.charAt(i)==' ')\n                l++;\n        }\n        return l;\n    }\n}","language":"java"}
{"task_id":"MBJP\/814","completion":"        if(p == 1 && q == 2)\n            return 1;\n        int res = 0;\n        for(int i = p; i <= q; i++) {\n            if(i % 2 == 1) {\n                res += 1;\n            }\n            else {\n                res -= 1;\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/815","completion":"        \/\/ Your code here\n        List<Integer> result = new ArrayList<>(n);\n        int i = 0, j = 0;\n        while (i < n) {\n            if (arr.get(i) == 1) {\n                if (j < n && arr.get(j) != 2) {\n                    result.add(j, arr.get(i));\n                    i++;\n                } else {\n                    result.add(j, 2);\n                    i++;\n                    j++;\n                }\n            } else if (arr.get(i) == 0) {\n                result.add(i, arr.get(i));\n                i++;\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/816","completion":"        \/\/ write your code here\n        List<Object> res = new ArrayList<>();\n        for(int i=0;i<testTup.size();i++){\n            res.add(testTup.get(i));\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/817","completion":"        return nums.stream()\n                    .filter(x -> x % m == 0 || x % n == 0)\n                    .collect(ArrayList::new, ArrayList::add, ArrayList::addAll);\n    }\n}","language":"java"}
{"task_id":"MBJP\/818","completion":"        int lowerCount = 0;\n        int length = str.length();\n        for (int i = 0; i < length; i++) {\n            if (Character.isLowerCase(str.charAt(i))) {\n                lowerCount++;\n            }\n        }\n        return lowerCount;\n    }\n}","language":"java"}
{"task_id":"MBJP\/819","completion":"        \/\/ Write your code here\n        List<List<Integer>> ret = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        List<Integer> temp = new ArrayList<>();\n        for (Integer num : lists) {\n            set.add(num);\n        }\n        for (Integer num : set) {\n            temp.add(num);\n        }\n        ret.add(temp);\n        for (Integer i = 1; i < lists.size(); i++) {\n            Integer num = lists.get(i);\n            Integer num_ = lists.get(i - 1);\n            if (num_ == num) {\n                temp = new ArrayList<>();\n                temp.add(num);\n                ret.add(temp);\n            }\n        }\n        return ret;\n    }\n}","language":"java"}
{"task_id":"MBJP\/820","completion":"        return (monthnum1 % 2 == 0);\n    }\n}","language":"java"}
{"task_id":"MBJP\/821","completion":"        \/\/Write your code here\n        HashMap<String,String> res = new HashMap<>();\n\n        for(String key: dict1.keySet())\n            res.put(key,dict1.get(key));\n\n        for(String key: dict2.keySet())\n            res.put(key,dict2.get(key));\n\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/822","completion":"        \/\/ code here\n        int length=p.length();\n        if(length>9)\n            return true;\n        else\n            return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/823","completion":"        if (string.matches(\".*\"+sample+\".*\"))\n            return \"string starts with the given substring\";\n        else return \"string doesnt start with the given substring\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/824","completion":"        int index = 0;\n        for (Integer e : l) {\n            if (e % 2 == 0)\n                l.remove(index);\n            index++;\n        }\n        return l;\n    }\n}","language":"java"}
{"task_id":"MBJP\/825","completion":"        List<Integer> list=new ArrayList<>();\n        for (int i = 0; i < listIndex.size(); i++) {\n            list.add(nums.get(listIndex.get(i)));\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/826","completion":"        if ((a + b) > c && (a + c) > b && (b + c) > a) {\n            if ((a == b) && (b == c)) {\n                return \"Equilateral Triangle\";\n            } else if ((a == b) || (b == c) || (a == c)) {\n                return \"Isosceles Triangle\";\n            } else {\n                return \"Scalene Triangle\";\n            }\n        } else {\n            return \"Not a triangle\";\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/827","completion":"        int sum=0;\n        for(List<Integer> list:list1){\n            sum+=list.get(c);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/828","completion":"        List<Integer> alphaDigSplList = new ArrayList<>();\n        int alphaCount = 0, digCount = 0, specCount = 0;\n        int alphaLeng = string.length();\n        for (int i = 0; i < alphaLeng; i++) {\n            char ch = string.charAt(i);\n            if (Character.isAlphabetic(ch)) {\n                alphaCount++;\n            } else if (Character.isDigit(ch)) {\n                digCount++;\n            } else if (Character.isWhitespace(ch)) {\n            } else {\n                specCount++;\n            }\n        }\n        alphaDigSplList.add(alphaCount);\n        alphaDigSplList.add(digCount);\n        alphaDigSplList.add(specCount);\n        return alphaDigSplList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/829","completion":"        \/\/ Write your code here\n        if (input == null || input.isEmpty()) {\n            return null;\n        }\n        HashMap<String, Integer> map = new HashMap<>();\n        for (String s : input) {\n            if (!map.containsKey(s)) {\n                map.put(s, 1);\n            } else {\n                map.put(s, map.get(s) + 1);\n            }\n        }\n        int i = 0;\n        String secondFrequent = \"\";\n        int max = 0;\n        for (String s : input) {\n            if (map.get(s) > max) {\n                secondFrequent = s;\n                max = map.get(s);\n                i = input.indexOf(s);\n            } else if (map.get(s) == max) {\n                if (s.compareTo(secondFrequent) < 0) {\n                    secondFrequent = s\n}","language":"java"}
{"task_id":"MBJP\/830","completion":"        return (Math.ceil(a * Math.pow(10, digits)));\n    }\n}","language":"java"}
{"task_id":"MBJP\/831","completion":"        int count = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i).equals(arr.get(j))) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/832","completion":"        String regex = \"[0-9]+\";\n        return (input.matches(regex))? Integer.parseInt(input.replaceAll(regex, \"\")) : 0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/833","completion":"        List<Integer> keylist = new ArrayList<>();\n        for(Map.Entry<Integer, String> entry : dict.entrySet()){\n            keylist.add(entry.getKey());\n        }\n        return keylist;\n    }\n}","language":"java"}
{"task_id":"MBJP\/834","completion":"        List<List<Integer>> res = new ArrayList<>();\n        int left = 0, top = 0, right = n - 1, bottom = n - 1;\n        while (left <= right && top <= bottom) {\n            for (int i = left; i <= right; i++) {\n                res.add(new ArrayList<>(Arrays.asList(i, top)));\n            }\n            for (int i = top + 1; i <= bottom; i++) {\n                res.add(new ArrayList<>(Arrays.asList(left, i)));\n            }\n            if (left < right && top < bottom) {\n                for (int i = right - 1; i >= left; i--) {\n                    res.add(new ArrayList<>(Arrays.asList(i, bottom)));\n                }\n                for (int i = bottom; i >= top + 1; i--) {\n                    res.add(new ArrayList<>(Arrays.asList(right, i)));\n}","language":"java"}
{"task_id":"MBJP\/835","completion":"        double m = (double) (y2 - y1) \/ (x2 - x1);\n        return m;\n    }\n}","language":"java"}
{"task_id":"MBJP\/836","completion":"        int globalMax = 0;\n        int localMax = 0;\n        for (int i = 0; i < size; i++) {\n            localMax += a.get(i);\n            if (localMax < 0) localMax = 0;\n            if (localMax > globalMax) globalMax = localMax;\n        }\n        return globalMax;\n    }\n}","language":"java"}
{"task_id":"MBJP\/837","completion":"        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int cubeSum = n * n * n;\n        int total = (n + 1) * (n + 2) * (n + 3);\n        int diff = total - cubeSum;\n        return diff;\n    }\n}","language":"java"}
{"task_id":"MBJP\/838","completion":"        int c = 0;\n        for(int i=0; i<s1.length(); i++) {\n            if(s1.charAt(i) != s2.charAt(i)) {\n                c++;\n                if(c > 1) return -1;\n                else {\n                    int temp = s2.charAt(i);\n                    s2 = s2.substring(0, i) + s2.substring(i+1);\n                    s2 = s2.substring(0, i) + temp + s2.substring(i);\n                }\n            }\n        }\n        return c;\n    }\n}","language":"java"}
{"task_id":"MBJP\/839","completion":"        List<List<Object>> temp = new ArrayList<List<Object>>();\n        List<Object> a = new ArrayList<Object>();\n        List<Object> b = new ArrayList<Object>();\n        for(int i = 0; i < tup.size(); i++){\n            for(int j = 0; j < tup.get(i).size(); j++){\n                if(j == 0){\n                    a.add(tup.get(i).get(j));\n                }\n                else if(j == 1){\n                    b.add(tup.get(i).get(j));\n                }\n            }\n            if(a.get(0).equals(b.get(0))){\n                temp.add(a);\n                temp.add(b);\n                a = new ArrayList<Object>();\n                b = new ArrayList<Object>();\n            }\n            else{\n                temp.add(a);\n                a = new ArrayList<Object>();\n                b = new ArrayList<Object>();\n            }\n        }\n\n}","language":"java"}
{"task_id":"MBJP\/840","completion":"        double discriminant = Math.sqrt(b*b - 4*a*c);\n        if (discriminant == 0) {\n            return \"Yes\";\n        } else if (discriminant < 0) {\n            return \"No\";\n        } else {\n            double x1 = (-b + discriminant) \/ (2*a);\n            double x2 = (-b - discriminant) \/ (2*a);\n            return x1 + \" \" + x2;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/841","completion":"        int[] a = new int[n];\n        int i = 0;\n        for (int j = 0; j < n; j++)\n            a[i++] = arr.get(j);\n\n        return getInvCount(a, 0, n - 1, 0);\n    }\n}","language":"java"}
{"task_id":"MBJP\/842","completion":"        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int x : arr) {\n            if (map.get(x) == null) {\n                map.put(x, 1);\n            } else {\n                map.put(x, map.get(x) + 1);\n            }\n        }\n        for (int k : map.keySet()) {\n            if (map.get(k) % 2 != 0) {\n                return k;\n            }\n        }\n        return -1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/843","completion":"        List<Integer> heap = new ArrayList<>();\n        heap.add(1);\n\n        while (heap.size() < n) {\n            int nextNumber = heap.stream()\n                    .map(p -> p * primes.get(heap.size() % primes.size()))\n                    .min(Comparator.naturalOrder())\n                    .get();\n            heap.add(nextNumber);\n        }\n        return heap.get(n - 1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/844","completion":"        \/\/ write your code here\n        if (k <= n\/2){\n            return (n + 1) - k;\n        }else {\n            return k - (n\/2);\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/845","completion":"        int count = 0;\n\n        String s = \"\" + n;\n        for (int i = 0; i < s.length(); i++) {\n            if (n % (s.charAt(i) - '0') == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/846","completion":"        int totalPlatforms = 1;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n\n        while (j < n) {\n\n            if (arr.get(j) >= dep.get(i)) {\n\n                totalPlatforms++;\n                j++;\n                i++;\n                if (i == n) {\n                    break;\n                }\n            }\n\n            if (arr.get(j) < dep.get(i)) {\n\n                totalPlatforms++;\n                i++;\n\n                if (i == n) {\n                    break;\n                }\n            }\n        }\n        return totalPlatforms;\n    }\n}","language":"java"}
{"task_id":"MBJP\/847","completion":"        List<Integer> result = new ArrayList<>();\n        for (int x : xs) {\n            result.add(x);\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/848","completion":"        return ((base1 + base2) * height) \/ 2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/849","completion":"        \/\/ code here\n        int sum = 0;\n        for (int i = 1; i < n; i++) {\n            if (n % i == 0 && isPrime(i)) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/850","completion":"        return (a + b > c && a + c > b && b + c > a);\n    }\n}","language":"java"}
{"task_id":"MBJP\/851","completion":"        double sum1 = 0, sum2 = 0;\n        double num;\n\n        for (int i = 1; i <= n; i++) {\n            num = (double) i;\n            sum1 += (1.0 \/ num);\n        }\n\n        for (int i = 2; i <= sum; i++) {\n            num = (double) i;\n            sum2 += (1.0 \/ num);\n        }\n\n        return sum2 - sum1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/852","completion":"        List<Integer> answer = new ArrayList<>();\n        for (int i = 0; i < numList.size(); i++) {\n            if (numList.get(i) >= 0) {\n                answer.add(numList.get(i));\n            }\n        }\n        return answer;\n    }\n}","language":"java"}
{"task_id":"MBJP\/853","completion":"        int temp = 0;\n        int n1 = n;\n        int i = 0;\n\n        while (n != 0) {\n            if (n % 2 == 1) {\n                temp = temp + n;\n            }\n            n = n \/ 2;\n        }\n        return temp;\n    }\n}","language":"java"}
{"task_id":"MBJP\/854","completion":"        int size = rawheap.size();\n\n        if (size == 0) return rawheap;\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (Integer item: rawheap) {\n            pq.offer(item);\n        }\n        while (size > 1) {\n            pq.offer(pq.poll());\n            size--;\n        }\n        return pq;\n    }\n}","language":"java"}
{"task_id":"MBJP\/855","completion":"        boolean isEven = (x % 2 == 0);\n        return isEven;\n    }\n}","language":"java"}
{"task_id":"MBJP\/856","completion":"        int count = 0;\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr.get(j) > arr.get(j + 1)) {\n                    int temp = arr.get(j);\n                    arr.set(j, arr.get(j + 1));\n                    arr.set(j + 1, temp);\n                    arr2[j] = arr2[j] ^ arr2[j + 1];\n                    arr2[j + 1] = arr2[j] ^ arr2[j + 1];\n                    arr2[j] = arr2[j] ^ arr2[j \n}","language":"java"}
{"task_id":"MBJP\/857","completion":"        List<List<String>> list = new ArrayList<List<String>>();\n        list.add(new ArrayList<String>());\n        for (int i = 0; i < list1.size(); i++) {\n            list.get(i).add(list1.get(i));\n        }\n        return list;\n    }\n}","language":"java"}
{"task_id":"MBJP\/858","completion":"        int result = 0;\n\n        for (List<Integer> list : inputList) {\n            result += list.size() * (list.size() - 1) \/ 2;\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/859","completion":"        \/\/ Write your code here\n        List<List<Object>> subLists = new ArrayList<List<Object>>();\n        List<Object> subList = new ArrayList<Object>();\n        subLists.add(subList);\n        \n        \/\/ Start from the last element and add all elements into subList\n        for (int i = myList.size() - 1; i >= 0; i--) {\n            subList.add(myList.get(i));\n            subLists.add(subList);\n            subList = new ArrayList<Object>();\n        }\n        \n        return subLists;\n    }\n}","language":"java"}
{"task_id":"MBJP\/860","completion":"        \/\/ write your code here\n        String regex = \"^[A-Za-z0-9]+$\";\n        return string.matches(regex) ? \"Accept\" : \"Discard\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/861","completion":"        return texts.stream()\n                    .filter(text -> isAnagram(text, str))\n                    .collect(Collectors.toList());\n    }\n}","language":"java"}
{"task_id":"MBJP\/862","completion":"        \/\/ your code goes here\n        Map<String, Integer> map = new HashMap<>();\n        String[] tokens = text.split(\"\\\\s+\");\n        for (String token : tokens) {\n            if (map.containsKey(token)) {\n                map.put(token, map.get(token) + 1);\n            } else {\n                map.put(token, 1);\n            }\n        }\n        List<List<Object>> list = new ArrayList<>();\n        for (String key : map.keySet()) {\n            if (map.get(key) > 1) {\n                list.add(Arrays.asList(key, map.get(key)));\n            }\n        }\n        list.sort((a, b) -> {\n            int comp = b.get(1).compareTo(a.get(1));\n            if (comp == 0) {\n                return a.get(0).compareTo(b.get(0));\n            }\n            return comp;\n        });\n}","language":"java"}
{"task_id":"MBJP\/863","completion":"        int i = 0;\n        int j = 1;\n        int max = 1;\n        while (j < arr.size()) {\n            if (arr.get(i) + 1 == arr.get(j)) {\n                i++;\n                j++;\n                max = Math.max(max, j - i);\n            } else {\n                i++;\n            }\n        }\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/864","completion":"        return texts.stream()\n                .filter(text -> {\n                    String reversedText = new StringBuilder(text).reverse().toString();\n                    return reversedText.equals(text);\n                })\n                .collect(Collectors.toList());\n    }\n}","language":"java"}
{"task_id":"MBJP\/865","completion":"        List<Integer> out = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            out.addAll(nums);\n        }\n        return out;\n    }\n}","language":"java"}
{"task_id":"MBJP\/866","completion":"        if(monthname2.equals(\"January\")||monthname2.equals(\"February\")||monthname2.equals(\"March\")||monthname2.equals(\"April\")||monthname2.equals(\"May\")||monthname2.equals(\"June\")||monthname2.equals(\"July\")||monthname2.equals(\"August\")||monthname2.equals(\"September\")||monthname2.equals(\"October\")||monthname2.equals(\"November\")||monthname2.equals(\"December\")){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/867","completion":"        int min = Integer.MAX_VALUE, i = 0;\n        while (i < n) {\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += arr.get(j);\n                if (sum < min) {\n                    min = sum;\n                }\n            }\n            i++;\n        }\n        return min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/868","completion":"        \/\/ your code here\n        if (a.length() == 0)\n            return 0;\n        return a.trim().split(\" \").length - 1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/869","completion":"        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).size() < leftrange || list1.get(i).size() > rigthrange) {\n                result.add(list1.get(i));\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/870","completion":"        return nums.stream().filter(x -> x > 0).mapToInt(Integer::valueOf).sum();\n    }\n}","language":"java"}
{"task_id":"MBJP\/871","completion":"        int len = string1.length();\n        if (len == string2.length()) {\n            for (int i = 0; i < len; i++) {\n                if (string1.charAt(i) != string2.charAt(len - 1 - i)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/872","completion":"        if (list1.size() > list2.size()) return false;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list2.contains(list1.get(i))) return true;\n            else if (list1.get(i).size() > list2.size()) return false;\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/873","completion":"        if (n == 1 || n == 2) {\n            return 1;\n        } else {\n            return fibonacci(n - 1) + fibonacci(n - 2);\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/874","completion":"        \/\/ code\n        StringBuilder str1sb = new StringBuilder(str1);\n        StringBuilder str2sb = new StringBuilder(str2);\n        String res = str1sb.append(str2sb).toString();\n        System.out.println(res);\n        if(res.equals(str2)) return true;\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/875","completion":"        int min = Integer.MAX_VALUE;\n        int size = testList.size();\n        for (int i = 0; i < size; i++) {\n            for (int j = i + 1; j < size; j++) {\n                int diff = testList.get(i).get(0) - testList.get(j).get(0);\n                if (diff < min) {\n                    min = diff;\n                }\n            }\n        }\n        return min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/876","completion":"        \/\/ code here\n        \/\/ if(x > y)\n        \/\/     return Lcm.lcm(y, x);\n        \/\/ else if(x == y)\n        \/\/     return x;\n        \/\/ else\n        \/\/     return (x * y) \/ Lcm.gcd(x,y);\n        int gcd = Lcm.gcd(x,y);\n        return (x * y) \/ gcd;\n    }\n}","language":"java"}
{"task_id":"MBJP\/877","completion":"        char arr[] = str.toCharArray();\n        Arrays.sort(arr);\n        return new String(arr);\n    }\n}","language":"java"}
{"task_id":"MBJP\/878","completion":"        return testTuple.size() == k.size();\n    }\n}","language":"java"}
{"task_id":"MBJP\/879","completion":"        return \"Not matched!\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/880","completion":"        int d = (b*b) - (4*a*c);\n        if(d > 0) {\n            String solutions = \"No solutions\";\n            if(d == 1) {\n                solutions = \"1 solution\";\n            }\n            else {\n                solutions = d + \" solutions\";\n            }\n            return solutions;\n        }\n        else {\n            String solutions = \"2 solutions\";\n            return solutions;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/881","completion":"        int sumEven = 0;\n        int sumOdd = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) % 2 == 0) {\n                sumEven = sumEven + list1.get(i);\n            } else {\n                sumOdd = sumOdd + list1.get(i);\n            }\n        }\n        return sumEven + sumOdd;\n    }\n}","language":"java"}
{"task_id":"MBJP\/882","completion":"        return b * 2 + h * 2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/883","completion":"        return nums.stream().filter(x -> x % m == n).collect(Collectors.toList());\n    }\n}","language":"java"}
{"task_id":"MBJP\/884","completion":"        return (n & (1 << l - 1)) == 0 && (n & (1 << r - 1)) == 0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/885","completion":"        if(str1 == null || str2 == null)\n            return false;\n        HashMap<Character,Character> hm = new HashMap<>();\n        for(int i=0;i<str1.length();i++) {\n            char ch1 = str1.charAt(i);\n            char ch2 = str2.charAt(i);\n            if(hm.get(ch1) == null) {\n                hm.put(ch1, ch2);\n            }\n            else {\n                if(hm.get(ch1) != ch2)\n                    return false;\n            }\n        }\n        for(int i=0;i<str2.length();i++) {\n            char ch1 = str2.charAt(i);\n            char ch2 = str1.charAt(i);\n            if(hm.get(ch1) == null)\n                return false;\n            else {\n                if(hm.get(ch1) != ch2)\n                    return false;\n            }\n        }\n       \n}","language":"java"}
{"task_id":"MBJP\/886","completion":"        double sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum \/ numbers.size();\n    }\n}","language":"java"}
{"task_id":"MBJP\/887","completion":"        return (n & 1) == 1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/888","completion":"        List<List<Integer>> res = new ArrayList<List<Integer>>();\n        for (int i = 0; i < testTup1.size(); i++) {\n            List<Integer> temp = new ArrayList<Integer>();\n            int tempSum = testTup1.get(i).get(0) - testTup2.get(i).get(0);\n            temp.add(tempSum);\n            tempSum = testTup1.get(i).get(1) - testTup2.get(i).get(1);\n            temp.add(tempSum);\n            res.add(temp);\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/889","completion":"        for(List<Integer> l: lists)\n            reverse(l);\n        return lists;\n    }\n}","language":"java"}
{"task_id":"MBJP\/890","completion":"        int left = 0;\n        int right = arr2.size() - 1;\n\n        while (left <= right) {\n            int mid = left + (right - left) \/ 2;\n            if (n == arr2.get(mid)) {\n                return mid;\n            } else if (n < arr2.get(mid)) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n\n        return -1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/891","completion":"        int aLen = String.valueOf(a).length();\n        int bLen = String.valueOf(b).length();\n        return aLen == bLen;\n    }\n}","language":"java"}
{"task_id":"MBJP\/892","completion":"        String newText=\"\";\n        for (int i=0;i<text.length();i++){\n            if (text.charAt(i)==' '){\n                newText+=\" \";\n            }else{\n                newText+=text.charAt(i);\n            }\n        }\n        return newText;\n    }\n}","language":"java"}
{"task_id":"MBJP\/893","completion":"        List<Object> ret = new ArrayList<>();\n        for (List<Integer> sub : lst) {\n            ret.add(sub.get(sub.size() - 1));\n        }\n        return ret;\n    }\n}","language":"java"}
{"task_id":"MBJP\/894","completion":"        List<Double> result = new ArrayList<>();\n        StringTokenizer tokenizer = new StringTokenizer(testStr, \", \");\n\n        while (tokenizer.hasMoreTokens()) {\n            result.add(Double.valueOf(tokenizer.nextToken()));\n        }\n\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/895","completion":"        int max = Integer.MIN_VALUE;\n\n        for (int i = 0; i < a.size(); i++) {\n            int sum = a.get(i);\n            for (int j = i; j < a.size(); j++) {\n                sum += a.get(j);\n                max = Math.max(max, sum);\n            }\n        }\n\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/896","completion":"        \/\/ Write your code here\n        List<List<Integer>> ret = new ArrayList<List<Integer>>();\n        if (tuples == null || tuples.size() == 0) {\n            return ret;\n        }\n        tuples.sort((tuple1, tuple2) -> {\n            int val1 = tuple1.get(1);\n            int val2 = tuple2.get(1);\n            return val2 - val1;\n        });\n        List<Integer> first = tuples.get(0);\n        List<Integer> last = tuples.get(tuples.size() - 1);\n        int diff = last.get(1) - first.get(1);\n        for (int i = 0; i < tuples.size(); i++) {\n            if (tuples.get(i).get(1) != diff) {\n                return ret;\n            }\n        }\n        ret.add(first);\n        ret.add(last);\n        return ret;\n    }\n}","language":"java"}
{"task_id":"MBJP\/897","completion":"        \/\/ Write your code here\n        boolean res = false;\n        String[] arr = sentence.split(\" \");\n        for(int i = 0; i < arr.length; i++)\n        {\n            if(arr[i].equals(word))\n            {\n                res = true;\n                break;\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/898","completion":"        \/\/ write your code here\n        if (numbers == null || numbers.size() == 0) return null;\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i <= numbers.size() - n; i++) {\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/899","completion":"        \/\/ Your code goes here\n        int i = 0;\n        while (i < arr.size() - 1) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}","language":"java"}
{"task_id":"MBJP\/900","completion":"        if (string.length() > 3 && string.substring(0, 1).equals(\"5\")) {\n            if (string.substring(1, 2).equals(\"-\") && string.length() > 6 && string.substring(2, 3).equals(\"-\") && string.length() > 8) {\n                if (string.substring(3, 4).equals(\"-\") && string.substring(4, 5).equals(\"-\") && string.substring(5, 6).equals(\"-\") && string.substring(6, 7).equals(\"-\") && string.substring(7, 8).equals(\"-\")) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/901","completion":"        int[] multipliers = new int[n];\n        for (int i = 0; i < multipliers.length; i++) {\n            multipliers[i] = (int) Math.pow(i + 2, 2);\n        }\n        Arrays.sort(multipliers);\n\n        int largest = multipliers[multipliers.length - 1];\n        while (largest % 2 == 0) {\n            largest \/= 2;\n        }\n        return largest;\n    }\n}","language":"java"}
{"task_id":"MBJP\/902","completion":"        HashMap<String, Integer> result = new HashMap<String, Integer>();\n        for (String key : d1.keySet()) {\n            if (d2.containsKey(key)) {\n                result.put(key, d1.get(key) + d2.get(key));\n            } else {\n                result.put(key, d1.get(key));\n            }\n        }\n        for (String key : d2.keySet()) {\n            if (!d1.containsKey(key)) {\n                result.put(key, d2.get(key));\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/903","completion":"        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            count += Integer.bitCount(i);\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/904","completion":"        if (x % 2 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/905","completion":"        \/\/ write code here\n        int sum = 0;\n        for (int i = 0; i <= n; i++) {\n            sum += (i + 1) * (i + 1);\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/906","completion":"        String pattern = \"(?<=\/news\/)(.*)(?=\/wp\/)\";\n        List<List<String>> res = new ArrayList<>();\n        try {\n            List<String> date = new ArrayList<>();\n            Matcher matcher = Pattern.compile(pattern).matcher(url);\n            if (matcher.find()) {\n                String year = matcher.group(0).split(\"\/\")[1];\n                String month = matcher.group(0).split(\"\/\")[2];\n                String day = matcher.group(0).split(\"\/\")[3];\n                date.add(year);\n                date.add(month);\n                date.add(day);\n            } else {\n                date = null;\n            }\n            res.add(date);\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/907","completion":"        List<Integer> nums = new ArrayList<>();\n        for (int i = 1; i <= 10000; i++) {\n            String s = String.valueOf(i);\n            int num = 0;\n            for (int j = 0; j < s.length(); j++) {\n                num = num + Integer.valueOf(String.valueOf(s.charAt(j)));\n            }\n            if (num == 1) {\n                nums.add(i);\n            }\n        }\n        Collections.sort(nums);\n        return nums.subList(0, n);\n    }\n}","language":"java"}
{"task_id":"MBJP\/908","completion":"        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == n) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/909","completion":"        int reverse = 0;\n        int original = num;\n        while (num > 0) {\n            reverse = (reverse * 10) + (num % 10);\n            num = num \/ 10;\n        }\n        if (reverse == original) {\n            return -1;\n        } else {\n            return reverse;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/910","completion":"        return m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12\n            || d == 31 || d == 30 || (m == 2 && d == 29 && (y % 400 == 0 || y % 4 == 0 && y % 100 != 0)) || (y % 400 == 0 && y % 100 == 0);\n    }\n}","language":"java"}
{"task_id":"MBJP\/911","completion":"        PriorityQueue<Pair> minQueue = new PriorityQueue<>();\n        PriorityQueue<Pair> maxQueue = new PriorityQueue<>(Comparator.reverseOrder());\n        maxQueue.offer(new Pair(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE));\n        int res = Integer.MIN_VALUE;\n\n        for (Integer num : nums) {\n            int min = minQueue.peek().m1;\n            int max = maxQueue.peek().m2;\n            if (num >= min) {\n                int minMax = num * min;\n                if (minMax > max) {\n                    minQueue.offer(new Pair(min, num, num));\n                    maxQueue.offer(new Pair(num, num, num));\n                } else {\n                    maxQueue.offer(new Pair(minMax, num, num));\n                }\n            } else {\n                int minMax = num * max;\n                if (minMax < min) {\n                    minQueue.offer(new\n}","language":"java"}
{"task_id":"MBJP\/912","completion":"        int lobb = 1;\n        int j = 1;\n        while (j <= m) {\n            lobb = lobb * (n - j + 1) \/ j;\n            j = j + 1;\n        }\n        return lobb;\n    }\n}","language":"java"}
{"task_id":"MBJP\/913","completion":"        if (string.length() == 1 && string.charAt(0) == '0') {\n            return true;\n        } else if (string.length() > 1) {\n            return string.charAt(string.length() - 1) < '9';\n        }\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/914","completion":"        \/\/ code here\n        String odd = \"\", even = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) {\n                odd += s.charAt(i);\n            } else {\n                even += s.charAt(i);\n            }\n        }\n        if (odd.equals(even)) {\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n}","language":"java"}
{"task_id":"MBJP\/915","completion":"        \/\/ Write your code here\n        int temp = 0;\n        for (int i = 0; i < arrayNums.size(); i++) {\n            for (int j = i + 1; j < arrayNums.size(); j++) {\n                if (arrayNums.get(i) < 0) {\n                    temp = arrayNums.get(i);\n                    arrayNums.set(i, arrayNums.get(j));\n                    arrayNums.set(j, temp);\n                }\n            }\n        }\n        return arrayNums;\n    }\n}","language":"java"}
{"task_id":"MBJP\/916","completion":"        for (int i = 0; i < arrSize - 2; i++) {\n            int j = i + 1;\n            int k = arrSize - 1;\n            while (j < k) {\n                if (a.get(i) + a.get(j) + a.get(k) == sum) {\n                    List<Integer> temp = new ArrayList<>();\n                    temp.add(a.get(i));\n                    temp.add(a.get(j));\n                    temp.add(a.get(k));\n                    return temp;\n                } else if (a.get(i) + a.get(j) + a.get(k) > sum) {\n                    k--;\n                } else {\n                    j++;\n                }\n            }\n        }\n        return new ArrayList<>();\n    }\n}","language":"java"}
{"task_id":"MBJP\/917","completion":"        String result = \"Not matched!\";\n        int upper = 0;\n        int lower = 0;\n\n        while (upper < text.length() && lower < text.length()) {\n\n            if (text.charAt(upper) == text.charAt(lower) &&\n                    text.charAt(upper) >= 'A' && text.charAt(upper) <= 'Z' &&\n                    text.charAt(lower) >= 'a' && text.charAt(lower) <= 'z') {\n\n                result = \"Found a match!\";\n                upper++;\n                lower++;\n            } else if (text.charAt(upper) != text.charAt(lower) &&\n                    text.charAt(upper) >= 'A' && text.charAt(upper) <= 'Z') {\n\n                upper++;\n            } else if (text.charAt(lower) != text.charAt(upper) &&\n                    text.charAt(lower) >= 'a' && text.charAt\n}","language":"java"}
{"task_id":"MBJP\/918","completion":"        int[][] dp = new int[m+1][n+1];\n        for (int i = 0; i <= m; i++)\n            dp[i][0] = 1;\n        for (int i = 0; i <= n; i++)\n            dp[0][i] = 0;\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                dp[i][j] = (s.get(i - 1) <= j) ? dp[i - 1][j - s.get(i - 1)] + dp[i - 1][j] : dp[i - 1][j];\n            }\n        }\n        return dp[m][n];\n    }\n}","language":"java"}
{"task_id":"MBJP\/919","completion":"        int result = 1;\n        for (Integer item : items) {\n            result *= item;\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/920","completion":"        Set<List<Integer>> s = new HashSet<>(testList);\n        testList.clear();\n        testList.addAll(s);\n        return testList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/921","completion":"        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < testTup.size(); i += n) {\n            if (i + n <= testTup.size()) {\n                List<Integer> curr = new ArrayList<>();\n                for (int j = i; j < i + n; j++) {\n                    curr.add(testTup.get(j));\n                }\n                result.add(curr);\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/922","completion":"        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) < 0 && arr.get(j) > 0 || arr.get(i) > 0 && arr.get(j) < 0) {\n                    int product = arr.get(i) * arr.get(j);\n                    if (result.size() == 0 || product > result.get(1)) {\n                        result.clear();\n                        result.add(arr.get(i));\n                        result.add(arr.get(j));\n                        result.add(product);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}","language":"java"}
{"task_id":"MBJP\/923","completion":"        int[][] dp = new int[m+1][n+1];\n\n        for (int i = 1; i <= m; i++)\n            for (int j = 1; j <= n; j++)\n                if (x.charAt(i-1) == y.charAt(j-1))\n                    dp[i][j] = 1 + dp[i-1][j-1];\n                else\n                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n\n        return dp[m][n];\n    }\n}","language":"java"}
{"task_id":"MBJP\/924","completion":"        int max = x > y ? x : y;\n        return max;\n    }\n}","language":"java"}
{"task_id":"MBJP\/925","completion":"        \/\/ your code here\n        int product = 1;\n        for (Integer i: nums) {\n            product *= i;\n        }\n        return product;\n    }\n}","language":"java"}
{"task_id":"MBJP\/926","completion":"        \/\/ write your code here\n        if (n == 1) return 1;\n\n        int result = rencontresNumber(n - 1, m);\n\n        if (m == 0) {\n            return (result * 10) % 10;\n        } else {\n            int k = m % 10;\n            m \/= 10;\n            int n1 = result % 10;\n            result \/= 10;\n            int n2 = result % 10;\n            result \/= 10;\n\n            return (n1 * 10 + n2) * 10 + k;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/928","completion":"        String[] str = dt.split(\"-\");\n        String[] str1 = str[2].split(\"(?=\\\\d+$)\", 2);\n        String dd = str1[0];\n        String mm = str1[1];\n        String yyyy = str[0] + \"-\" + str[1] + \"-\" + str[2].substring(0, str[2].length() - dd.length() - mm.length());\n        return dd + \"-\" + mm + \"-\" + yyyy;\n    }\n}","language":"java"}
{"task_id":"MBJP\/929","completion":"        Set<Integer> set = new HashSet<>();\n        int count = 0;\n        for (Integer item : tuplex) {\n            if (set.contains(item)) {\n                count = count + 1;\n            }\n            set.add(item);\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/930","completion":"        return text.matches(\".*a.*b\") ? \"Found a match!\" : \"Not matched!\";\n    }\n}","language":"java"}
{"task_id":"MBJP\/931","completion":"        if(number == 0) {\n            return 0;\n        }\n        return (number * (number + 1) * (2 * number + 1)) \/ 6;\n    }\n}","language":"java"}
{"task_id":"MBJP\/932","completion":"        Set<String> s = new HashSet<>(l);\n        l.clear();\n        l.addAll(s);\n        return l;\n    }\n}","language":"java"}
{"task_id":"MBJP\/933","completion":"        return text.replaceAll(\"([A-Z])\", \"_$1\").replaceAll(\"([0-9]+)\", \"_$1\").replaceAll(\"([^0-9A-Za-z])\", \"_$1\");\n    }\n}","language":"java"}
{"task_id":"MBJP\/934","completion":"        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum - (m * n);\n    }\n}","language":"java"}
{"task_id":"MBJP\/935","completion":"        if (number < 1) {\n            return 0;\n        }\n        if (number == 1) {\n            return 1;\n        }\n        return (number * (number + 1)) \/ 2;\n    }\n}","language":"java"}
{"task_id":"MBJP\/936","completion":"        List<List<Integer>> res = new ArrayList<List<Integer>>();\n        if(ordList.size() == 0) {\n            return res;\n        }\n        for (List<Integer> tuple : testList) {\n            for (int i = 0; i < tuple.size(); i++) {\n                if(tuple.get(i) != ordList.get(i)) {\n                    res.add(tuple);\n                    break;\n                }\n            }\n        }\n        return res;\n    }\n}","language":"java"}
{"task_id":"MBJP\/937","completion":"        int m = 0, n = 0, max = 0;\n        int len = str1.length();\n        int[] arr = new int[26];\n\n        \/\/Count frequency of all character in string\n        for (int i = 0; i < len; i++) {\n            int index = str1.charAt(i) - 'a';\n            arr[index]++;\n        }\n\n        \/\/Find maximum frequency\n        for (int i = 0; i < 26; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n                m = i;\n            }\n        }\n\n        \/\/Find second maximum frequency\n        for (int i = 0; i < len; i++) {\n            int index = str1.charAt(i) - 'a';\n            if (arr[index] == max) {\n                if (arr[index] > arr[n]) {\n                   \n}","language":"java"}
{"task_id":"MBJP\/938","completion":"        List<Integer> result = new ArrayList<>();\n        int lena = a.size();\n        int lenb = b.size();\n        int lenc = c.size();\n        if (lena == p && lenb == q && lenc == r) {\n            return result;\n        }\n        if (lena < p && lenb < q && lenc < r) {\n            return null;\n        }\n        if (lena == p && lenb == q && lenc > r) {\n            result.add(c.get(r));\n            result.add(c.get(r - 1));\n            result.add(c.get(r - 2));\n            return result;\n        }\n        if (lena == p && lenb > q && lenc < r) {\n            result.add(c.get(r));\n            result.add(c.get(r + 1));\n            result.add\n}","language":"java"}
{"task_id":"MBJP\/939","completion":"        return models;\n    }\n}","language":"java"}
{"task_id":"MBJP\/940","completion":"        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int val: arr) {\n            pq.add(val);\n        }\n        while (pq.size() > 0) {\n            arr.add(pq.remove());\n        }\n        return arr;\n    }\n}","language":"java"}
{"task_id":"MBJP\/941","completion":"        int count = 0;\n        int i = 0;\n\n        while (i < num.size() && num.get(i) instanceof List) {\n            count += countElim((List<Object>) num.get(i));\n            i++;\n        }\n\n        return count + 1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/942","completion":"        \/\/ code here\n        return false;\n    }\n}","language":"java"}
{"task_id":"MBJP\/943","completion":"        List<Integer> combinedList = new ArrayList<>();\n        PriorityQueue<Integer> num1PriorityQueue = new PriorityQueue<>(num1);\n        PriorityQueue<Integer> num2PriorityQueue = new PriorityQueue<>(num2);\n        num1PriorityQueue.addAll(num2PriorityQueue);\n\n        while (!num1PriorityQueue.isEmpty() && !num2PriorityQueue.isEmpty()) {\n            if (num1PriorityQueue.peek() < num2PriorityQueue.peek()) {\n                combinedList.add(num1PriorityQueue.poll());\n            } else {\n                combinedList.add(num2PriorityQueue.poll());\n            }\n        }\n        combinedList.addAll(num1PriorityQueue);\n        combinedList.addAll(num2PriorityQueue);\n        return combinedList;\n    }\n}","language":"java"}
{"task_id":"MBJP\/944","completion":"        \/\/write your code here\n        int count=0;\n        int temp=0;\n        int j=0;\n        while (j<text.length()){\n            if(text.charAt(j)==' '){\n                count++;\n            }\n            j++;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/945","completion":"        HashSet<String> set = new HashSet<String>(t);\n        return set;\n    }\n}","language":"java"}
{"task_id":"MBJP\/946","completion":"        List<List<Object>> ans = new ArrayList<List<Object>>();\n        Map<Object, Integer> map = new HashMap<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (map.containsKey(s.charAt(i))) {\n                int count = map.get(s.charAt(i)) + 1;\n                map.put(s.charAt(i), count);\n            } else {\n                map.put(s.charAt(i), 1);\n            }\n        }\n        for (Object key : map.keySet()) {\n            int val = map.get(key);\n            if (val == a) {\n                List<Object> list = new ArrayList<>();\n                list.add(key);\n                list.add(val);\n                ans.add(list);\n            }\n        }\n        return ans;\n    }\n}","language":"java"}
{"task_id":"MBJP\/947","completion":"        int min=Integer.MAX_VALUE;\n        for(int i=0;i<list1.size();i++){\n            int count=0;\n            int j=0;\n            String s=list1.get(i);\n            while(j<s.length()){\n                char c=s.charAt(j);\n                int k=j+1;\n                while(k<s.length() && Character.isDigit(s.charAt(k))){\n                    k++;\n                }\n                if(k-j==1){\n                    count++;\n                }\n                j=k;\n            }\n            if(count<min){\n                min=count;\n            }\n        }\n        return min;\n    }\n}","language":"java"}
{"task_id":"MBJP\/948","completion":"        \/\/ Your code here\n    }\n}","language":"java"}
{"task_id":"MBJP\/949","completion":"        List<Integer> tmpList = new ArrayList<>();\n        List<List<Integer>> sortedList = new ArrayList<>();\n        int count = 0;\n        for (List<Integer> list : testList) {\n            for (int num : list) {\n                tmpList.add(num);\n            }\n            Collections.sort(tmpList);\n            if (count == 0) {\n                sortedList.add(tmpList);\n            } else {\n                for (int i = 0; i < tmpList.size(); i++) {\n                    sortedList.get(count).add(tmpList.get(i));\n                }\n            }\n            count++;\n            tmpList.clear();\n        }\n        return sortedList.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/950","completion":"        String[] zodiac = {\n            \"Capricorn\", \"Aquarius\", \"Pisces\", \"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\", \"Libra\", \"Scorpio\", \"Sagittarius\", \"Capricorn\"\n        };\n        return zodiac[year % 12];\n    }\n}","language":"java"}
{"task_id":"MBJP\/951","completion":"        List<List<Integer>> result = new ArrayList<List<Integer>>();\n        for (int i = 0; i < testList1.size(); i++) {\n            List<Integer> temp = new ArrayList<Integer>();\n            if (testList2.contains(testList1.get(i))) {\n                int tempIndex = testList2.indexOf(testList1.get(i));\n                int tempIndex2 = testList2.get(tempIndex).size();\n                for (int j = 0; j < testList1.get(i).size(); j++) {\n                    if (j < tempIndex2) {\n                        temp.add(testList2.get(tempIndex).get(j));\n                    } else {\n                        temp.add(testList2.get(tempIndex).get(j - tempIndex2));\n                    }\n                }\n                result.add(temp);\n            } else {\n                result.add(testList1.get(i));\n            }\n}","language":"java"}
{"task_id":"MBJP\/952","completion":"        int count = 0;\n        for (int i = 0; i < r; i++) {\n            count = ((count * (n - i)) % p) + i;\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/953","completion":"        int[][] dp = new int[n + 1][n + 1];\n\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= n; j++) {\n                dp[i][j] = -1;\n            }\n        }\n\n        for (int i = 0; i <= n; i++) {\n            dp[i][i] = 1;\n        }\n\n        int max = 0;\n\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= i; j++) {\n                if (j != 0) {\n                    dp[j][i] = dp[j][i - 1] + dp[j - 1][i];\n                } else {\n                    dp[j][i] = dp[j][i - 1];\n                }\n\n                max \n}","language":"java"}
{"task_id":"MBJP\/954","completion":"        \/\/ Write your code here\n        if (saleAmount <= 0)\n            return 0;\n        if (saleAmount >= actualCost)\n            return saleAmount - actualCost;\n        return 0;\n    }\n}","language":"java"}
{"task_id":"MBJP\/955","completion":"        int sum = 0;\n        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                sum += i;\n            }\n        }\n        return sum > n;\n    }\n}","language":"java"}
{"task_id":"MBJP\/956","completion":"        return new ArrayList<>(Arrays.asList(text.split(\"\\\\b(?=\\\\p{Lu})\")));\n    }\n}","language":"java"}
{"task_id":"MBJP\/957","completion":"        int count = 0;\n        while(n != 0) {\n            count ++;\n            n = n & (n - 1);\n        }\n        return count;\n    }\n}","language":"java"}
{"task_id":"MBJP\/958","completion":"        String str = \"\";\n        String[] roman = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n\n        int i = 0;\n\n        while (num > 0) {\n\n            int rem = num % 10;\n            int quot = num \/ 10;\n\n            if (rem < 4 && rem > 0) {\n                str = roman[i] + str;\n            }\n\n            if (rem == 4) {\n                str = roman[i + 1] + str;\n            }\n\n            if (rem >= 5 && rem <= 9) {\n                str = roman[i + 2] + str;\n            }\n\n            num = quot;\n            i++;\n        }\n        return str;\n    }\n}","language":"java"}
{"task_id":"MBJP\/959","completion":"        Double avg = 0.0;\n        int n = lst.size();\n        int sum = 0;\n\n        for (Integer i: lst) {\n            sum += i;\n        }\n        return (sum \/ n);\n    }\n}","language":"java"}
{"task_id":"MBJP\/960","completion":"        return (n - 1);\n    }\n}","language":"java"}
{"task_id":"MBJP\/961","completion":"        \/\/ Write your code here\n        if (s.isEmpty()) {\n            return 0;\n        }\n        Map<Character, Integer> roman = new HashMap<>();\n        roman.put('I', 1);\n        roman.put('V', 5);\n        roman.put('X', 10);\n        roman.put('L', 50);\n        roman.put('C', 100);\n        roman.put('D', 500);\n        roman.put('M', 1000);\n        int res = 0;\n        int num = roman.get(s.charAt(0));\n        for (int i = 1; i < s.length(); i++) {\n            int curr = roman.get(s.charAt(i));\n            if (curr <= num) {\n                num = num - curr;\n            } else {\n                res += num;\n                num = curr;\n            }\n        }\n        res += num;\n        return res;\n}","language":"java"}
{"task_id":"MBJP\/962","completion":"        if(l>r){\n            return 0;\n        }\n        int sum = 0;\n        for (int i = l; i <= r; i++) {\n            if (i % 2 == 0) {\n                sum = sum + i;\n            }\n        }\n        return sum;\n    }\n}","language":"java"}
{"task_id":"MBJP\/963","completion":"        \/\/ write your code here\n        double result = Math.pow(x, 2) - 4 * y * z;\n        if (result < 0) {\n            return Arrays.asList(\"no real solution\", -131);\n        }\n        double real_result = Math.sqrt(result);\n        double first_solution = (-1 * x + real_result) \/ (2 * y);\n        double second_solution = (-1 * x - real_result) \/ (2 * y);\n        if (first_solution > second_solution) {\n            return Arrays.asList(\"one solution\", first_solution);\n        } else {\n            return Arrays.asList(\"one solution\", second_solution);\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/964","completion":"        if(s.length()%2==0){\n            return true;\n        }else{\n            return false;\n        }\n    }\n}","language":"java"}
{"task_id":"MBJP\/965","completion":"        text = text.toLowerCase();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            if (Character.isUpperCase(ch)) {\n                sb.append('_');\n                sb.append(Character.toLowerCase(ch));\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}","language":"java"}
{"task_id":"MBJP\/966","completion":"        Iterator<Object> itr1 = tuple1.iterator();\n        while (itr1.hasNext()) {\n            if (itr1.next().toString().equals(\"\"))\n                itr1.remove();\n        }\n        return tuple1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/967","completion":"        if (string != null) {\n            String vowels = \"aeiou\";\n            String ret = \"not accepted\";\n            for (char ch : string.toCharArray()) {\n                if (vowels.indexOf(ch) < 0) {\n                    return \"not accepted\";\n                }\n            }\n            return \"accepted\";\n        }\n        return null;\n    }\n}","language":"java"}
{"task_id":"MBJP\/968","completion":"        return ((n * a + b - 1) \/ b) + 1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/969","completion":"        \/\/ Write your code here\n        List<List<Integer>> res = new ArrayList<List<Integer>>();\n        Set<Integer> seen = new HashSet<Integer>();\n\n        for (int i = 0; i < testList.size(); i++) {\n            int[] a = testList.get(i).get(0);\n            int[] b = testList.get(i).get(1);\n\n            if (a[0] == b[0] && a[1] == b[1]) {\n                int[] t = new int[a.length];\n                for (int j = 0; j < a.length; j++) {\n                    t[j] = a[j];\n                }\n                for (int j = 0; j < b.length; j++) {\n                    t[j + 2] = b[j];\n                }\n                seen.add(t[2]);\n                res.add(Arrays.asList(t));\n            }\n        }\n}","language":"java"}
{"task_id":"MBJP\/970","completion":"        int z=Math.min(x,y);\n        return z;\n    }\n}","language":"java"}
{"task_id":"MBJP\/971","completion":"        if(n < a + b + c)\n            return 0;\n        int ans = 0;\n        int i = 0;\n        while (i < n - a - b - c) {\n            int j = i + a;\n            while (j < n) {\n                int k = j + b;\n                while (k < n) {\n                    int l = k + c;\n                    if (l > n)\n                        l = n;\n                    ans++;\n                    k++;\n                }\n                j++;\n            }\n            i++;\n        }\n        return ans;\n    }\n}","language":"java"}
{"task_id":"MBJP\/972","completion":"        return testTup1;\n    }\n}","language":"java"}
{"task_id":"MBJP\/973","completion":"        char[] ch = s.toCharArray();\n        int n = ch.length;\n        char temp;\n        for (int i = 0; i < d; i++) {\n            temp = ch[n - 1];\n            for (int j = n - 1; j > 0; j--) {\n                ch[j] = ch[j - 1];\n            }\n            ch[0] = temp;\n        }\n        return new String(ch);\n    }\n}","language":"java"}
{"task_id":"MBJP\/974","completion":"        int[] dp = new int[a.size()];\n        dp[0] = a.get(0).get(0);\n        int min = dp[0];\n        for (int i = 1; i < a.size(); i++) {\n            dp[i] = dp[i - 1] + a.get(i).get(i);\n            min = Math.min(min, dp[i]);\n        }\n        for (int i = a.size() - 2; i >= 0; i--) {\n            for (int j = 0; j <= i; j++) {\n                int sum = dp[j] + dp[i + 1];\n                dp[j] = Math.min(sum, dp[j]);\n            }\n        }\n        return dp[0];\n    }\n}","language":"java"}
