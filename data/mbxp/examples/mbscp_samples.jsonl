{"task_id":"MBSCP\/1","completion":"        val nCols = cost.length\n        val nRows = cost.length\n        val dp = new Array[Int](nCols)\n        dp = Array(nRows)\n        for (i in 0 until nCols) {\n            val row = cost[i]\n            val dp[i] = new Array[Int](nCols)\n            for (j in 0 until nCols) {\n                val col = cost[j]\n                val minCost = min(row(i), col(j))\n                dp[i][j] = minCost\n            }\n        }\n\n        val dp0 = dp.map(i => i(0))\n        val dp1 = dp.map(i => i(1))\n        val dp2 = dp.map(i => i(2))\n\n        val dp3 = Array(nCols).map(i => Array(nCols).fill(Integer.MAX_VALUE))\n\n        val dp3Row0 = dp3.map(i => i(0))\n        val dp","language":"scala"}
{"task_id":"MBSCP\/2","completion":"        val result = List()\n\n        for (i \n\nThe output is the same as yours.\n\n\nYou can use a `map` to get the result: `List(x => x, x => x)`.\n\nI need to know that how to write the \"map\" function.\n\n\n\nFor this specific case, you can use  `Collections.disjoint()` :\n\n\nimport java.util.*;\n\npublic class Test {\n    public static void main(String[] args) {\n        final List<integer> list1 = Arrays.asList(3, 4, 5, 6);\n        final List<integer> list2 = Arrays.asList(5, 7, 4, 10);\n\n        \/\/ create a Set from list1 (removing duplicates)\n        final Set<integer> set1 = new HashSet&lt;>(list1);\n\n        \/\/ create a Set from list2 (removing duplicates)\n        final Set<integer> set2 = new HashSet&lt;>(list2);\n\n        \/\/ create a Set containing the intersection of the two sets\n        final","language":"scala"}
{"task_id":"MBSCP\/3","completion":"        !n.isPrime()\n    }","language":"scala"}
{"task_id":"MBSCP\/4","completion":"        val result = new ArrayList[Int]\n        val priorityQueue = PriorityQueue[Int]()\n        for (i \n\nI have tried to find a solution without using any additional libraries.\nI have checked this question and answers but unfortunately the answers are too complicated for my level and I'm not able to figure it out.\n\n\nDo you know about `java.util.PriorityQueue`?\n\nI already tried to use it but I couldn't solve the problem. I have edited my question with the code I have tried.\n\nPlease make sure to update your question with all the information you have provided. (I don't know Scala, so I don't know how you can find the largest number of elements from a collection of numbers in `PriorityQueue` without the use of additional library methods)\n\nThank you for the reply! I have updated my question with all the information that I have provided.\n\nI think you need to change the way you store your numbers. Your `PriorityQueue` only knows about the `Integer` class, so it cannot hold `Double`, `Long` etc. Objects\n\nI'm sorry for that, I don't really know what","language":"scala"}
{"task_id":"MBSCP\/5","completion":"        \/\/ TODO: Implement countWays function\n    }","language":"scala"}
{"task_id":"MBSCP\/6","completion":"        b ^ (a >> 1) == (a & 1)\n    }","language":"scala"}
{"task_id":"MBSCP\/7","completion":"        (text match \/\\w{4,}\/g).toList\n    }","language":"scala"}
{"task_id":"MBSCP\/8","completion":"        nums.map(_.square)\n    }","language":"scala"}
{"task_id":"MBSCP\/9","completion":"        val array = str.split(\"\")\n        val firstElement = array[0]\n        val lastElement = array[array.size - 1]\n        val firstElementIndex = str.indexOf(firstElement)\n        val lastElementIndex = str.lastIndexOf(lastElement)\n        val difference = lastElementIndex - firstElementIndex\n        if (difference < 0) {\n            difference += str.length\n        }\n        difference\n    }","language":"scala"}
{"task_id":"MBSCP\/10","completion":"        val result = new ArrayList[Int]\n        list1.sortBy(_._1)\n        for(i \n\nAnd this is the result.\n\n\n[11, 11, 11, 11, 11]\n[11, 11, 11, 11, 11]\n[11, 11, 11, 11, 11]\n\n\nHope this helps.\nEDIT:\nOk, I added a version with a different approach.\nFirst, let's use the StreamEx library for Java.\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport scala.util.streamex.StreamEx;\nimport scala.util.streamex.StreamPlus;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<integer> list1 = new ArrayList&lt;>(List.of(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100));\n        \/\/ List<integer> list1 = new ArrayList&lt;>(List.of(1, 2","language":"scala"}
{"task_id":"MBSCP\/11","completion":"        val chars = s.chars.mkString(0, s.length)\n        val last = chars.lastIndexOf(ch)\n        if (last < 0)\n            return s\n        val first = chars.indexOf(ch)\n        chars.replaceAll(c => c != ch ? c : 0)\n        s = chars.mkString(0, chars.length)\n        println(s)\n    }","language":"scala"}
{"task_id":"MBSCP\/12","completion":"        val matrix = List(M.map { list => list.map(x => x.toInt) })\n        val sumRow = matrix.foldRight(0)(_+_) \/\/ Calculate the sum of every row\n        val sortedMatrix = matrix.sortBy(_.sum) \/\/ Sort the matrix by the sum of the rows\n        sortedMatrix.reverse.foldRight(List()) \/\/ Reverse the matrix\n        sortedMatrix.foldRight(_+_) \/\/ Sum the rows and return the result\n    }","language":"scala"}
{"task_id":"MBSCP\/13","completion":"        val freqs = new Seq[String]()\n        val counts = new Seq[Seq[Any]]()\n        words.foreach(w => freqs += w.chars.toList.toSet)\n        freqs.foreach(f => counts += (s => s === f ? s : 0).toList)\n        counts.foldLeft(List())(0)\n    }","language":"scala"}
{"task_id":"MBSCP\/14","completion":"        2 * l * b + 2 * b * h + 2 * h * l\n    }","language":"scala"}
{"task_id":"MBSCP\/15","completion":"        val result = text.toLowerCase.split.map(_.toLower).toList\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/16","completion":"        val regex = \"\"\"(?=[a-z])[a-z]_(?=[a-z])[a-z]\"\"\"\n        text match {\n            case (x, y) => x + \"_\" + y\n            case _ => \"Not matched!\"\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/17","completion":"        a * 4\n    }","language":"scala"}
{"task_id":"MBSCP\/18","completion":"        val string_arr = string.split(\"\")\n        val second_string_arr = second_string.split(\"\")\n\n        string_arr.removeAll(second_string_arr)\n        string_arr.join(\"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/19","completion":"        \/\/ TODO: add code\n        val seen = new HashSet[Int]\n        for (i \n\nAlso don't forget to import  `scala.collection.mutable.HashSet` ,  `scala.collection.mutable.ListBuffer` and  `scala.collection.mutable.ListBuffer` .<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/20","completion":"        x == 383 ||\n        x == 254 ||\n        x == 200 ||\n        true\n    }","language":"scala"}
{"task_id":"MBSCP\/21","completion":"        (m * (n - 1)) + 1 to ((m * n) - 1)\n    }","language":"scala"}
{"task_id":"MBSCP\/22","completion":"        \/\/ the following line will generate a compilation error\n        \/\/ List[Int] cannot be converted to Int, because we have `List(Int)`\n        \/\/ it will be better to use `nums.toIntList` or `map` and convert to `Int`\n        val uniqueElements = Set(nums)\n        val firstDuplicate: Int = uniqueElements.filter(i => nums.indexOf(i) != nums.lastIndexOf(i))\n        if(firstDuplicate.isEmpty) firstDuplicate: Int = -1\n        else firstDuplicate: Int = firstDuplicate.head\n    }","language":"scala"}
{"task_id":"MBSCP\/23","completion":"        max _ <- list1.map(_.map(_.sum))\n        max\n    }","language":"scala"}
{"task_id":"MBSCP\/24","completion":"        binary.toString().chars.map(c => c - 48).sum\n    }","language":"scala"}
{"task_id":"MBSCP\/25","completion":"        val map = arr.toMap(x => x)\n        \/\/ We need to keep track of two things:\n        \/\/ 1. How many times each item appears in the array.\n        \/\/ 2. The product of the elements in the array.\n        \/\/ We start by doing this, and then write a function to combine those two values.\n        \/\/ The map function takes the element as the key, and the count as the value.\n        \/\/ We then use the foldLeft function to add these two values together.\n        val counts = map(x => x, 0)\n        val products = map(x => 1, 1)\n        arr.foreach(x => counts += map(x => (x, 1)))\n        arr.foreach(x => products += map(x => x, map(x => x * x, counts[x])))\n        products.foldLeft((x, y) => y * x)\n    }","language":"scala"}
{"task_id":"MBSCP\/26","completion":"        val length = test_list.size\n        val k_elements = test_list.map(x => x.size)\n        k_elements.filter(_ => _ == K).foreach(x => x.equals(true))\n        k_elements.filter(_ => _ != K).foreach(x => x.equals(false))\n    }","language":"scala"}
{"task_id":"MBSCP\/27","completion":"        val new_list : List[String] = new Array[String]()\n        for(s <- list) {\n            new_list += (s match \"\\d+\") ? \"\" : s\n        }\n        new_list\n    }","language":"scala"}
{"task_id":"MBSCP\/28","completion":"        \/\/ Assumption: n >= k\n        \/\/ Calculation:\n        \/\/   nCk = n!\/k!(n-k)!\n        \/\/   n!\/k! = nCk = n*(n-1)*(n-2)*...*(n-k+1)\/k*k\n        \/\/   n*(n-1)*...*(n-k+1)\/k*k = n*(n-2)*(n-3)*...*(n-k+1)\/k*k\n        \/\/   n*(n-2)*(n-3)*...*(n-k+1)\/k*k = n*(n-3)*(n-4)*...*(n-k+1)\/k*k\n        \/\/ => nCk = n*(n-1)*(n-2)*...*(n-k+1)\/k*k - n*(n-2)*(n-3)*...*(n-k+1)\/k*k\n        \/\/ => (n-k+1)*nCk = n*(n-1)*(n-2)*...*(","language":"scala"}
{"task_id":"MBSCP\/29","completion":"        var result = 0\n        var num_arr = arr\n        if (num_arr.size > arr_size) {\n            num_arr = arr.take(arr_size)\n        }\n        val map = (1 to num_arr.size).toMap(x => x)\n        result = num_arr.map(x => map(x)).max\n        println(\"Result = \" + result)\n        return result\n    }","language":"scala"}
{"task_id":"MBSCP\/30","completion":"        val n = s.length\n        val result = n * (n + 1) \/ 2\n        val freq = {}\n        for (i \n\nThe output will look like this:\n\n\n  3\n  6\n  2\n\n\n\n\nThank you so much! I just started learning Scala yesterday, and your code works perfectly. I'm trying to figure out why my code doesn't work.\n\n@SouravMohsin As I mentioned above, I think the problem is that you are using `val` instead of `var`. `var` is meant to be used for local variables, while `val` is meant to be used for constants. To fix it, use `val` everywhere. Also, `freq` is initialized to `0`. I suggest you to learn some basic concepts of Scala before attempting to solve problems like this.\n\nI see! Thanks!\n\n@SouravMohsin Glad it helped.\n\n\n\nThe main issue I see is that you have  `val` instead of  `var` in the definition of your  `freq` variable","language":"scala"}
{"task_id":"MBSCP\/31","completion":"        val heap = new PriorityQueue[Int]()\n        for (i \n\nFor example, you can test:\n\n\n  func(List(List(1, 2, 6), List(1, 3, 4, 5, 7, 8), List(1, 3, 5, 6, 8, 9), List(2, 5, 7, 11), List(1, 4, 7, 8, 12)), 3)\n\n\nThe result should be:\n\n\nList(5, 7, 1)<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/32","completion":"        if (n <= 0) n = 1\n        if (n % 2 == 0) n = n \/ 2\n        if (n % 3 == 0) n = n \/ 3\n        if (n % 5 == 0) n = n \/ 5\n        if (n % 7 == 0) n = n \/ 7\n        let max = n\n        \/\/ Iterate through the primes in the range 3...max.\n        for (i \n\nThe answer is  `3` .\n\n\nThank you for your response, but I need to return the largest prime factor. The issue is not that I'm not sure how to find the largest prime factor of a given number. \nThe issue is that the largest prime factor must be returned, not 3.\n\n@HannahYeas, I have edited my answer to give you the correct answer.\n\nYes, but my question is about how to find the largest prime factor of a given number.\n\n\n\nIn Scala, we can simply","language":"scala"}
{"task_id":"MBSCP\/33","completion":"        val binary = N.toString(2)\n        \/\/ ... convert string to int and return the value\n    }","language":"scala"}
{"task_id":"MBSCP\/34","completion":"        val i = N - 1\n        while (i >= 0 && ar(i) <= N) i -= 1\n        return i + 1\n    }","language":"scala"}
{"task_id":"MBSCP\/35","completion":"        val num = 1\n        while (num <= n) {\n            val sqrt = num * num\n            if (sqrt == (sqrt + num) * (sqrt + num)) {\n                println(sqrt)\n            }\n            num += 1\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/36","completion":"        N - p * q\n    }","language":"scala"}
{"task_id":"MBSCP\/37","completion":"        mixed_list.sortBy(_.toSeq, _.toString)\n    }","language":"scala"}
{"task_id":"MBSCP\/38","completion":"        list1.filter(_.modulo(2).eq(0)).length \/ list1.filter(_.modulo(2).eq(1)).length\n    }","language":"scala"}
{"task_id":"MBSCP\/39","completion":"        val charSet = new HashSet[Char]()\n        val sortedSet = new HashSet[Char]()\n\n        for (c \n\nHere is a solution to the problem in Scala (if you don't care about performance)\nFirst, create a set of all the unique characters. Then sort the characters in the string. Then use a simple for loop to check each character to see if it is a duplicate or not. If it is not, then it is a duplicate.\n\n\nobject Main extends App {\n    def main(args: Array[String]): Unit = {\n        val s = \"aabbccdd\"\n        val chars = new HashSet[Char]()\n        val sortedChars = new HashSet[Char]()\n\n        for (c \n\n\n\n\n\nIn your second case, you are not checking for the characters of the sorted set. You are checking for the characters of the original set.\nIn the first case, you are checking for the characters of the sorted set, but since it is already sorted, you can easily find out that \"d\" is not in there. \n\n\n        val charSet = new HashSet[Char]()\n","language":"scala"}
{"task_id":"MBSCP\/40","completion":"        val freq = freqOf(nums).toMap\n    }","language":"scala"}
{"task_id":"MBSCP\/41","completion":"        nums.filter(x => x % 2 == 0)\n    }","language":"scala"}
{"task_id":"MBSCP\/42","completion":"        val map = new Map[Int, Int]()\n        arr.foreach {\n            val e = (int)it\n            if (map.containsKey(e))\n                map[e] += 1\n            else map[e] = 1\n        }\n        val freqs = map.values\n        freqs.foreach {\n            n -= it\n        }\n        freqs.foldLeft(0)\n    }","language":"scala"}
{"task_id":"MBSCP\/43","completion":"        val regex = \"a[a-z]+_[a-z]+\"\n        val matcher = Pattern.compile(regex).matcher(text)\n        val res = matcher.find()\n        if (res) println(\"Found a match!\")\n        else println(\"Not matched!\")\n    }","language":"scala"}
{"task_id":"MBSCP\/44","completion":"        val start = \"python\"\n        if (text.startsWith(start)) {\n            println(\"Found a match!\")\n        } else {\n            println(\"Not matched!\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/45","completion":"        val l1 = l.tail\n        val l2 = l.head\n        val gcd = getGcd(l1)\n        if (l2.asInstanceOf[Int] == 0)\n            return gcd\n        else\n            return gcd * l2.asInstanceOf[Int] \/ l1.asInstanceOf[Int]\n    }","language":"scala"}
{"task_id":"MBSCP\/46","completion":"        val distinct = data.distinct()\n        if (data.size() == distinct.size()) {\n            for (i \n            \/**\n             * for-comprehension\n             *\/\n             i \n            in data\n            if i == distinct(i) {\n                true\n            } else {\n                false\n            }\n        } else {\n            true\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/47","completion":"        if (B == 0)\n            return 0\n        else\n            return A % 10 + computeLastDigit(A \/ 10, B - 1)\n    }","language":"scala"}
{"task_id":"MBSCP\/48","completion":"        n with (0b1) {\n            (1 to ~n)\n                .map(i => i.multiply(2))\n                .map(i => i.add(1))\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/49","completion":"        val filtered = nums.filter(_.size == N)\n        val result = filtered.map(x => x(0))\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/50","completion":"        input_list match {\n            case Nil => Nil\n            case List(_ : Int) => if (length(head(Nil)) == length(head(_))) {\n                List(head(_))\n                minLengthList(tail(Nil))\n            } else {\n                List(head(head(Nil)))\n                minLengthList(tail(head(Nil)))\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/51","completion":"        x < y + z &&\n        y < x + z &&\n        z < x + y \n    }","language":"scala"}
{"task_id":"MBSCP\/52","completion":"        b * h \/ 2\n    }","language":"scala"}
{"task_id":"MBSCP\/53","completion":"        if (str.length < 2) {\n            return \"Not Equal\"\n        } else if (str.length == 2) {\n            return str[0] == str[1] ? \"Equal\" : \"Not Equal\"\n        } else {\n            return str[0] == str[str.length - 1] ? \"Equal\" : \"Not Equal\"\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/54","completion":"        val hashTable = new HashMap[Int, Int]()\n        my_list.foreach(_ -> hashTable.put(_, hashTable.getOrElse(_, 0) + 1))\n\n        val result = List()\n        hashTable.foreach((key, value) ->\n            for (i \n                <- value\n                .toScala\n                .sorted(x -> x, false)\n            ) {\n                result(i.toInt) = key\n            }\n        )\n\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/55","completion":"        \/\/ Find t-nth term of geometric series\n        val f = 1 - r + r*(r+1) \/\/ First term\n        val g = 1 \/\/ First term factor\n        val s = 1 \/\/ Second term\n        for (i \n\nIf you want to use recursive solution then just change  `1` and  `1` to your base and power.\nAlso, I didn't use  `Int` in your function definition.\n\n\nThank you for the help, I was able to get the recursive solution to work, thank you!<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/56","completion":"        if (n < 0 || n % 10 == 0) {\n            return false\n        }\n        if (n == reverse(n)) {\n            return false\n        } else {\n            return true\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/57","completion":"        def getMaxNum(arr, n) = {\n            if(arr.isEmpty || arr.size() < n)\n                return null\n            val dp = new Array[n + 1]\n            for (i \n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/58","completion":"        \/\/ write your function here\n    }","language":"scala"}
{"task_id":"MBSCP\/59","completion":"        if (n == 1) return 1\n        def octagonal(n, k) : Int = {\n            (n + 3 * k) \/ 2 * k\n        }\n        def isEven(n, k) : Int = {\n            n % (2 * k + 1) == 0\n        }\n        val k = 1\n        while (octagonal(n, k) != n && isEven(n, k)) {\n            k = k + 1\n        }\n        if (octagonal(n, k) == n) {\n            println(\"The number \" + n + \" is Octagonal.\")\n        } else {\n            println(\"The number \" + n + \" is not Octagonal.\")\n        }\n        octagonal(n, k)\n    }","language":"scala"}
{"task_id":"MBSCP\/60","completion":"        val dp = new List[Int](n)\n        dp(0) = 0\n        for (i \n\nFor a case where you have to be able to solve it in linear time, you can think of a  `BinarySearchTree` , where the key is the difference between adjacent elements.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/61","completion":"        \/\/ Your code here\n        val prefixSum = 0\n        var count = 0\n        for (i <- 0 until s.length - 1) {\n            prefixSum += s(i).toInt\n        }\n        for (i <- 0 until s.length - 1) {\n            if (prefixSum % 10 == s.length(i).toInt) count += 1\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/62","completion":"        xs.max { case x1, x2 => x1 if x1 < x2 }\n    }","language":"scala"}
{"task_id":"MBSCP\/63","completion":"        val allPairs = test_list.map(x => List(x.head, x.tail.head)).toList\n        val pairs = allPairs.filter(_.size > 1)\n        val result = pairs.foldLeft(Int.Max, (x, y) => x - y)\n        println(\"The maximum difference between pairs is $result\")\n    }","language":"scala"}
{"task_id":"MBSCP\/64","completion":"        subjectmarks.map(_.sortBy(_._2))\n    }","language":"scala"}
{"task_id":"MBSCP\/65","completion":"        val res = data_list.head match {\n            case _ => 0\n            case List(head, _, _) => head + recursiveListSum(tail)\n            case List(_, tail) => recursiveListSum(tail)\n            case List(_, _) => 0\n        }\n        res\n    }","language":"scala"}
{"task_id":"MBSCP\/66","completion":"        list match {\n            case n <- 0 then 0\n            case n <- 1 then 1\n            case n <- 2 then 2\n            case n <- 3 then 3\n            case n <- 4 then 4\n            case n <- 5 then 5\n            case n <- 6 then 6\n            case n <- 7 then 7\n            case n <- 8 then 8\n            case n <- 9 then 9\n            case n <- 10 then 10\n            case n <- 11 then 11\n            case n <- 12 then 12\n            case n <- 13 then 13\n            case n <- 14 then 14\n            case n <- 15 then 15\n            case n <- 16 then 16\n            case n <- 17 then 17\n            case n <- 18 then 18\n            case n <- 19 then 19\n            case n <- 20 then 20\n            case n <- 21 then 21\n            case n <- 22 then","language":"scala"}
{"task_id":"MBSCP\/67","completion":"        if (n == 0) return 1\n        if (n == 1) return 2\n\n        val res = bellNumber(n - 1) + bellNumber(n - 2)\n        println(res)\n        return res\n    }","language":"scala"}
{"task_id":"MBSCP\/68","completion":"        val prev = A(0)\n        for (i <- 1 to length(A)) {\n            if (A(i) < prev)\n                return false\n            prev = A(i)\n        }\n        return true\n    }","language":"scala"}
{"task_id":"MBSCP\/69","completion":"        l match {\n            case Nil => false\n            case n :: Nil => s match {\n                case Nil => false\n                case ns :: Nil => false\n                case nss :: Nil => n >= ns\n                    and nss match {\n                        case Nil => false\n                        case nsss :: Nil => false\n                        case nssss :: Nil => nss >= nsss\n                            and nssss match {\n                                case Nil => false\n                                case nsssss :: Nil => false\n                                case nssssss :: Nil => nssss >= nsssss\n                                    and nssssss match {\n                                        case Nil => false\n                                        case nsssssss :: Nil => false\n                                        case nssssssss :: Nil => nssssss >= nsssssss\n                                        and nssssssss match {\n                                            case Nil","language":"scala"}
{"task_id":"MBSCP\/70","completion":"        val temp = Input\n        if (Input.size == 0)\n            return \"List is empty\"\n        if (Input.size < k)\n            return \"List is too small\"\n        else {\n            for (i \n\nSo it works fine for me. I get the following output:\n\n\nList is too small\nList is too small\nList is too small\nList is too small\nList is too small\nAll tuples have same length\n\n\n\n\nThanks for the effort you put in to this! I really appreciate it! This is what I was looking for :)\n\nThis is just the output I am looking for. Is there anyway I could add it to the solution I have posted?\n\nI have made the changes. If you still need any help, please tell me.\n\nThanks alot! This was a lot of help :)<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/71","completion":"        def gap = length(nums) \/ 2\n        if gap > 1 then {\n            combSort(nums[:gap])\n            combSort(nums[gap:])\n        }\n        \/\/ ...\n    }","language":"scala"}
{"task_id":"MBSCP\/72","completion":"        n - (n \/ 2) * (n \/ 2)\n    }","language":"scala"}
{"task_id":"MBSCP\/73","completion":"        val list = text.split(\"\\\\s+\").toList\n        list\n    }","language":"scala"}
{"task_id":"MBSCP\/74","completion":"        for (s \n\nNote that  `List` and  `String` are not needed at all. But it's a good habit to get into when you have to deal with such types in Scala. And if you don't know what you are doing, I recommend you to start with  `String` .\n\n\nI tried to implement the algorithm in python as well, but I am not able to implement it correctly. Can you please tell me what am I doing wrong?\n\nIt's not really clear what you want to achieve. But the code in the answer should work. If you don't know what I mean, you can ask a new question. I will answer you there.\n\n\n\nTry this:\n\n\ndef isSamePatterns(color: List[String], pattern: List[String]) : Boolean = {\n    if (color.size() != pattern.size()) {\n        return false\n    }\n\n    for (i \n\nYou can test this on this piece of code:\n\n\ndef test():\n    print(\"is same patterns: \" + str(isSamePatterns(List(\"red\", \"green","language":"scala"}
{"task_id":"MBSCP\/75","completion":"        val result = test_list.zipWithIndex.filter(x => x._2 % K == 0).map(x => (x._1._1, x._1._2, x._2)).mkString(\"\\\", \\\"\")\n        \"[{result}]\".format(result = result)\n    }","language":"scala"}
{"task_id":"MBSCP\/76","completion":"        \/\/ Your code goes here.\n        val i = 1\n        val j = 1\n        val result = 0\n        while i <= m && j <= n {\n            result += i*i + j*j\n            i++\n            j++\n        }\n        return result\n    }","language":"scala"}
{"task_id":"MBSCP\/77","completion":"        \/\/ This is where your code will be\n        if(n % 2 == 0) {\n            n = n\/2\n        }\n        else {\n            n = (n-1)\/2\n        }\n        return n % 2 == 0\n    }","language":"scala"}
{"task_id":"MBSCP\/78","completion":"        val bits = n.bitSet\n        val count = bits.cardinality\n        if (count % 2 == 0) {\n            count\n        } else {\n            count - 1\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/79","completion":"        s.length % 2 == 0\n    }","language":"scala"}
{"task_id":"MBSCP\/80","completion":"        (1+Math.sqrt(1+8*n))\/2\n    }","language":"scala"}
{"task_id":"MBSCP\/81","completion":"        { test_tup1 match {\n            case _ => List(test_tup2)\n            case (t1, t2) => List(t1, t2)\n        }}\n    }","language":"scala"}
{"task_id":"MBSCP\/82","completion":"        ((4\/3) * (Math.PI * Math.pow(r, 3))) * (4\/3)\n    }","language":"scala"}
{"task_id":"MBSCP\/83","completion":"        strr.split(\"\").reduce((a, b) => a + b)\n    }","language":"scala"}
{"task_id":"MBSCP\/84","completion":"        \/\/ your code here\n        var total = 1;\n        var num = 1;\n        while(num < n) {\n            num = num + 1;\n            total = total + num;\n        }\n        println(total);\n    }","language":"scala"}
{"task_id":"MBSCP\/85","completion":"        r*r*3.1415*r\n    }","language":"scala"}
{"task_id":"MBSCP\/86","completion":"        val a = (n + 1) \/ 2\n        val b = sqrt(3) * (sqrt(3) - sqrt(2) * sqrt(2))\n        val c = sqrt(3) \/ 2\n        return a * b * c\n    }","language":"scala"}
{"task_id":"MBSCP\/87","completion":"        val result = dict1.putAll(dict2).putAll(dict3)\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/88","completion":"        val map = new HashMap[Int, Int]()\n        \/\/ Complete the function\n        list1.foreach(x => \n            if (map.contains(x))\n                map += x, 1\n            else\n                map += x, 1\n        )\n        \/\/ list1.foreach(x =>\n        \/\/     if (map.contains(x))\n        \/\/         map += x, 1\n        \/\/     else\n        \/\/         map += x, 1\n        \/\/ )\n        return map\n    }","language":"scala"}
{"task_id":"MBSCP\/89","completion":"        var min = N\n        for (var i = 1; i < N; i++) {\n            if (min > (N - i)) {\n                min = N - i\n            }\n        }\n        return min\n    }","language":"scala"}
{"task_id":"MBSCP\/90","completion":"        \/\/ list1.foreach(s => println(s.length))\n    }","language":"scala"}
{"task_id":"MBSCP\/91","completion":"        \/\/ your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/92","completion":"        if (n.size() == 1) {\n            return false;\n        }\n\n        for (i \n\nNote that you may wish to write a  `fmap` method to return a  `Stream` instead of a  `Stream` .\nBy default, Scala's  `Stream` implements  `Iterable` , so it's possible to do this:\n\n\ndef isUndulating(n : String) : Boolean = {\n    fmap(s => s.size() == 1) {\n        \/\/ Here's your code\n    }\n}<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/93","completion":"        if (b == 1) {\n            return a\n        } else {\n            return power(a * a, b - 1)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/94","completion":"        val test_list_sorted = test_list.sortedBy(_._1)\n        val result = test_list_sorted.find(_._2 == test_list_sorted.head()._2)\n        result.getOrElse(\"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/95","completion":"        val minLstLength = lst.map(x => x.length).reduce(_ + _)\n        for (var i = 0; i < minLstLength; i++) {\n            if (lst.map(x => x[i]).reduce(_ + _) > 0)\n                continue\n            else\n                return i\n        }\n        return minLstLength\n    }","language":"scala"}
{"task_id":"MBSCP\/96","completion":"        var count = 0\n        for (i \n\nIn Scala (and in Java), you don't need to use the  `i` variable. Just use it with a variable name, and you don't have to use an if statement.\n\n\nimport java.util.stream._\nval divisors = IntStream.range(1, n + 1).map { i => n \/ i }.distinct.count\nprintln(divisors)\n\n\n `distinct` creates a new array of unique integers, and  `map` creates a new array of the results of a function applied to each element of an array.\n\n\nYou can also write your own function that does this for you:\n\n\ndef divisor(n : Int) : Int = {\n    val divisors = IntStream.range(1, n + 1).map { i => n \/ i }.distinct.count\n    println(divisors)\n    \/\/ return the number of divisors\n}\n\n\n\n\n\n\nIn Scala, you can use streams for the following:\n\n\ndef divisor(n : Int","language":"scala"}
{"task_id":"MBSCP\/97","completion":"        val result = new Map[Int, Int]()\n        list1.foreach(list => {\n            list.foreach(element => result[element] ++)\n        })\n        return result\n    }","language":"scala"}
{"task_id":"MBSCP\/98","completion":"        val length = numbers.length\n        val product = numbers.foldLeft(1.0) * length\n        product \/= length\n        product\n    }","language":"scala"}
{"task_id":"MBSCP\/99","completion":"        if (n < 2) return n.toString\n        else {\n            val bits = n.toString.split(\"\")\n            bits.reverse\n            bits.foreach { n1 =>\n                val bits1 = decimalToBinary(n1)\n                val bits2 = bits1.split(\"\")\n                bits2.reverse\n                bits2.join(\"\")\n                println(bits2)\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/100","completion":"        val palindrome = int(num + \"\")\n        val length = String.valueOf(palindrome).length\n        var res = \"\"\n        for (i \n\nNote: Don't forget to change the type of the parameter  `num` to  `Int` .<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/101","completion":"        var i : Int = 0;\n        var length : Int = arr.size();\n        var kth : Int = 0;\n\n        while (kth < length && i < k) {\n            kth = arr.headOption.get().next.map(i => i + 1).getOrElse(0);\n            i++;\n        }\n\n        if (i == k)\n            println(arr.headOption.get().value);\n    }","language":"scala"}
{"task_id":"MBSCP\/102","completion":"        val letters = word.split('_')\n        letters[0] += letters[1]\n        for(i <- 2; i < letters.length; i++)\n            letters[i] = letters[i].capitalize\n        word = letters.join('')\n    }","language":"scala"}
{"task_id":"MBSCP\/103","completion":"        var eulerNum = 1\n        var i = 2\n        while (eulerNum < n * m) {\n            eulerNum += i\n            i += 1\n        }\n        println(i)\n    }","language":"scala"}
{"task_id":"MBSCP\/104","completion":"        input_list.map { case (sublist : List[String]) =>\n            sort(sublist.map(_.split(\"\")).toList)\n        }.toList\n    }","language":"scala"}
{"task_id":"MBSCP\/105","completion":"        val count = lst.foldLeft(0) { acc, element => element(true) ? acc + 1 : acc }\n        count\n    }","language":"scala"}
{"task_id":"MBSCP\/106","completion":"        val result : List[Int] = new ArrayList[Int]()\n        test_tup.foreach(_.plus(_))\n        test_list.foreach(\n            (x, y) => result << _.plus(x) << _.plus(y)\n        )\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/107","completion":"        \/\/ TODO: your code\n    }","language":"scala"}
{"task_id":"MBSCP\/108","completion":"        \/\/ TODO: Write your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/109","completion":"        var rotations = s.map(c => (c.length - 1) \/ 2)\n                        .map(_.multiply(2))\n                        .map(s.length)\n                        .reduce(_+_)\n        if (rotations > n) {\n            rotations = rotations % n\n        }\n        rotations\n    }","language":"scala"}
{"task_id":"MBSCP\/110","completion":"        val res = []\n        for (i \n\nThe problem you have is that you're using  `val` inside your code (as opposed to  `var` ).\nThis means that when the compiler sees that a variable  `i` has been declared in your code, it is looking for a variable called  `i` in the enclosing scope, which does not exist.\nYou could fix this by using  `var` , but I think it would be better to not use  `val` to avoid this problem entirely.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/111","completion":"        nestedlist\n                          .map(_.head)\n                          .distinct()\n                          .filter(_.isNotNull)\n                          .toList\n    }","language":"scala"}
{"task_id":"MBSCP\/112","completion":"        (diameter * 2) + (height * 2)\n    }","language":"scala"}
{"task_id":"MBSCP\/113","completion":"        text match {\n            case _ => false\n            case \"\" => false\n            case s => (s.toInt.toInt).toInt\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/114","completion":"        val result = test_list.map(_.toList)\n                             .foldLeft(List(0)) {\n                                  case (acc, list) => acc +\n                                                     list.map(_.tail)\n                                                      .foldLeft(acc + list)\n                             }\n                             .map(s => s.map(i => (i , 1)))\n                             .foldLeft(List(0)) {\n                                  case (acc, (a, b)) => acc +\n                                                     b.map(i => (a + i))\n                             }\n                             .map(s => s.sort { s1 => s1[0] })\n                             .foldLeft(List(0)) {\n                                  case (acc, s) =>\n                                       acc +\n                                       s.map(s1 => s1[1])\n                             }\n        println(result)\n    }","language":"scala"}
{"task_id":"MBSCP\/115","completion":"        if (list1.isEmpty) {\n            return true\n        } else {\n            list1.foreach { x =>\n                if (!x.isEmpty) {\n                    return false\n                }\n            }\n            return true\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/116","completion":"        val res = nums.foldLeft(0)\n        res += nums.map(_.toInt).sum\n        res\n    }","language":"scala"}
{"task_id":"MBSCP\/117","completion":"      val result = test_list.map(x => x.map(y => toFloat(y))).map(x => \"(\" + x.mkString(\", \") + \")\").mkString(\", \")\n      result\n    }","language":"scala"}
{"task_id":"MBSCP\/118","completion":"        \/\/TODO: complete this function\n    }","language":"scala"}
{"task_id":"MBSCP\/119","completion":"        val count = arr.groupBy(_.toSeq.foldLeft(0) + 1).map(_.size)\n        val result = count.max(false)\n        if (result)\n            println(arr.find(_.toSeq.foldLeft(0) + result - 1 == n))\n        else\n            println(-1)\n    }","language":"scala"}
{"task_id":"MBSCP\/120","completion":"        val result = 0\n        val firstIndex = 0\n        val lastIndex = 0\n        for (index \n\n\n\n\n\nHere is a  `scala` solution that gets the max product of the elements of the tuple:\n\n\nval maxProductOfTuple = list1.map(_.asInstanceOf[Array[Int]]).reduce(_> 0).map(_.product).max\n\n\nThe  `maxProductOfTuple` function takes a  `List` of  `List` s as parameter. It iterates over the elements of the outer list, and then each inner list, and for each inner list, iterates over the elements of the elements of the inner list. It returns the  `product` of all the numbers. So if the inner list contains more than one element, we return the product of the  `product` of the first two elements, and so on. Then we find the maximum of that result and we get the maximum of the products for the whole list.\n\n\n`map(_.asInstanceOf[Array[Int]]).reduce(_> 0).map(_.product)` can be simplified to `map(_.product)`\n\n@pankaj","language":"scala"}
{"task_id":"MBSCP\/121","completion":"        \/\/ create a hashmap of numbers\n        val map = Map[Int, Int]()\n        \/\/ loop over the given list and insert each number in the hashmap\n        for (i \n        \/\/ create a hashmap of numbers\n        val map = Map[Int, Int]()\n        \/\/ loop over the given list and insert each number in the hashmap\n        for (i \n        \/\/ find the triplet, return true if it's found\n        val found = map.findTriplet(sum)\n        \/\/ if it's found, return true\n        if (found) {\n            println(\"true\")\n            return true\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/122","completion":"        if (n <= 30) {\n            println(30)\n        } else if (n > 30 & n <= 50) {\n            println(60 + n - 30)\n        } else if (n > 50 & n <= 100) {\n            println(120 + n - 50)\n        } else if (n > 100 & n <= 500) {\n            println(180 + n - 100)\n        } else if (n > 500 & n <= 1000) {\n            println(240 + n - 500)\n        } else if (n > 1000) {\n            println(300 + n - 1000)\n        } else {\n            println(0)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/123","completion":"        val sum = 0\n        for (i \n\nEDIT: @P.J.Meisch's answer is better - there is no need to keep the sum in a variable (like in my example) and no need to compare the numbers. You don't need to test numbers for being amicable.\n\n\nThank you so much! This is exactly what I was looking for!<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/125","completion":"        var zeros = 0\n        var ones = 0\n        var maxLength = 0\n        var length = 0\n        for(i <- 1 , length <- 1 , length <- 1 ; length < (string.length\/2) ; i ++, length ++ ) {\n            if (string[i] == \"0\") zeros ++\n            else ones ++\n            maxLength = Math.max(maxLength, zeros)\n            maxLength = Math.max(maxLength, ones)\n        }\n        maxLength = Math.max(maxLength, zeros, ones)\n        maxLength = Math.max(maxLength, n-zeros, n-ones)\n        \/\/ console.log(\"zeros : \" + zeros)\n        \/\/ console.log(\"ones : \" + ones)\n        \/\/ console.log(\"maxLength : \" + maxLength)\n        return maxLength\n    }","language":"scala"}
{"task_id":"MBSCP\/126","completion":"        val result = new ArrayList[Int]()\n        for (i \n\nAnd here is the test\n\n\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class MainTest {\n\n    @Test\n    public void sumTest() {\n        assertEquals(6, Main.sum(10, 15));\n        assertEquals(93, Main.sum(100, 150));\n        assertEquals(3, Main.sum(4, 6));\n    }\n}\n\n\n\n\nThis is awesome! Thank you so much, that makes sense! I see that I'm still learning scala, so you're right, I should have studied more about how to build my functions. I'm just starting to get familiar with scala and I'll definitely be reading about it more. Thanks again!\n\n@LukaszMichalik You're welcome! I just added a code for that in the answer, and it should be easy to understand.\n\nI just tried to run the test code you provided in the answer, and I get the following error:\n\njava.lang.AssertionError: expected:&lt;6> but was","language":"scala"}
{"task_id":"MBSCP\/127","completion":"        val prod = x * y\n        println(\"Result: $prod\")\n        return prod\n    }","language":"scala"}
{"task_id":"MBSCP\/128","completion":"        val words = str.split(\" \")\n        words.filter(word => word.length() > n).map(_ => _.trim).collect(Collectors.toList)\n    }","language":"scala"}
{"task_id":"MBSCP\/129","completion":"        val row_sum = my_matrix.map(_.sum).sum\n        val col_sum = my_matrix.map(_.map(_.sum).sum)\n        if (row_sum == 15 and col_sum == 15) {\n            println(\"Magic Square\")\n        } else {\n            println(\"No Magic Square\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/130","completion":"        val freqs = nums.map { n => (n, 1) }\n\n        for (i <- 0 until nums.length - 1) {\n            val n = nums[i]\n            freqs += n, -1\n            val f = freqs.map(p => p(1) * p(0) == 0 ? p(0) : p(1)).max\n            freqs -= n, 1\n            if (f == 0)\n                break\n        }\n\n        freqs.map { case (a, b) => b }\n    }","language":"scala"}
{"task_id":"MBSCP\/131","completion":"        var vowels : Set[Character] = Set(\"aeiouAEIOU\").toSeq\n        str1.replaceAll(vowels, \"\") + \n        str1.replaceAll(\/[AEIOU]\/g, \"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/132","completion":"        val t = new Tree.Tree<String, Integer>(tup1.head)\n        val result = t.postorder(t.root, new Tree.Tree.Visitor<String, Integer>() {\n            override def visit(node: String, count: Integer): Unit = {\n                if (node == null) println(\"end of tree\")\n                else println(node + \" \" + count)\n            }\n        })\n        println(result)\n    }","language":"scala"}
{"task_id":"MBSCP\/133","completion":"        \/\/ sum all the negative numbers\n        var result = nums.filter(num -> num < 0).sum()\n        \/\/ if there are no negative number in the list, return 0\n        if(result == 0) result = 0\n        \/\/ else return the result\n        else result\n    }","language":"scala"}
{"task_id":"MBSCP\/134","completion":"        \/\/ code here\n        if (n < 1 || p < 0) {\n            println(\"Invalid parameters\")\n            return\n        }\n\n        val res = arr.take(n)\n        val last = res.last()\n\n        val answer = if (last % 2 == 0) \"EVEN\" else \"ODD\"\n\n        println(answer)\n    }","language":"scala"}
{"task_id":"MBSCP\/135","completion":"        n * (2 * n - 1) * (2 * n - 1) \/ 6\n    }","language":"scala"}
{"task_id":"MBSCP\/136","completion":"        if(units <= 0) {\n            throw new IllegalArgumentException(\"no electricity bill\")\n        } else {\n            \/\/ TODO: write your code here\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/137","completion":"        if (nums.isEmpty) {\n            Double.NaN\n        } else {\n            Double.valueOf(nums.asScala.toSeq.foldLeft(0)(0)(x -> x + y -> x + 1) \/\n                                              nums.asScala.toSeq.foldLeft(0)(0)(x -> x + 1))\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/138","completion":"        val binary = n.toInt.bitCount\n        for (i \n\n\" OwnerDisplayName=\"user10367961\" LastActivityDate=\"2018-09-27T12:58:40.710\" CommentCount=\"2\" ContentLicense=\"CC BY-SA 4.0\" \/>\n\n\nThank you so much for the answer.\nI just tried it and it works very well.\nThank you again for the answer and the effort you put into helping me understand my question.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/139","completion":"        def pi : Double = 3.14\n        def area : Double = pi * r * r\n        def circumference : Double = 2 * pi * r\n\n        println(area)\n        println(circumference)\n    }","language":"scala"}
{"task_id":"MBSCP\/140","completion":"        test_list match {\n            case _ => _\n            case n  => n match {\n                case _ => _\n                case m  => {\n                    val result = new Array[Int](m.size)\n                    for (i \n\nI haven't given the full solution, but if you need to, here's the full solution:\n\n\nobject Main extends App {\n    \/**\n     * You are an expert Scala programmer, and here is your task.\n     * Write a function to extract elements that occur singly in the given tuple list.\n     * >>> extractSingly(List(List(3, 4, 5), List(4, 5, 7), List(1, 4)))\n     * List(3, 4, 5, 7, 1)\n     * >>> extractSingly(List(List(1, 2, 3), List(4, 2, 3), List(7, 8)))\n     * List(1, 2, 3, 4","language":"scala"}
{"task_id":"MBSCP\/141","completion":"        def left(idx : Int, max : Int) : Int = max if (idx - 1 < 0) else nums(idx - 1)\n        def right(idx : Int, max : Int) : Int = max if (idx + 1 >= max) else nums(idx + 1)\n        def pancake(start : Int, end : Int) : List[Int] = nums(start, end).\n            toList\n        val pancakes = List()\n        val max = nums.length - 1\n        for (i \n\nAs you can see, it's a lot of code, so I had to rewrite it all to make it more readable. But you can see that the code is short and readable.\n\n\nThis is the best answer to the question, in my opinion.\n\n\n\nI am not going to give you the full solution, but rather a very short solution. The idea is to first sort the array using insertion sort, then reverse the array, and then sort the array again using selection sort.\nHere is the solution","language":"scala"}
{"task_id":"MBSCP\/142","completion":"        \/*\n         * 1. <unk>\ufffd\ufffd<unk>\ufffd\ufffd <unk>3\ufffd<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd\ufffd.\n         *\/\n\n        \/*\n         * 2. <unk>\ufffd<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd\ufffd.\n         *\/\n    }","language":"scala"}
{"task_id":"MBSCP\/143","completion":"        Input.map(_.size).foldLeft(0)\n    }","language":"scala"}
{"task_id":"MBSCP\/144","completion":"        val result = (arr.toSeq.foldLeft(0)(_ + _).foldLeft(0)(_ + _)) \/ 2\n        result -= n * (n - 1) \/ 2\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/145","completion":"        \/\/ TODO: Your code here\n        \/\/ return the max abs diff between any 2 numbers from arr\n    }","language":"scala"}
{"task_id":"MBSCP\/146","completion":"        val ascii = {\n            0 => 0,\n            1 => 0,\n            2 => 0,\n            3 => 0,\n            4 => 0,\n            5 => 0,\n            6 => 0,\n            7 => 0,\n            8 => 0,\n            9 => 0,\n            10 => 0,\n            11 => 0,\n            12 => 0,\n            13 => 0,\n            14 => 0,\n            15 => 0,\n            16 => 0,\n            17 => 0,\n            18 => 0,\n            19 => 0,\n            20 => 0,\n            21 => 0,\n            22 => 0,\n            23 => 0,\n            24 => 0,\n            25 => 0,\n            26 => 0,\n            27 =>","language":"scala"}
{"task_id":"MBSCP\/147","completion":"        int sum = 0\n        val dp = (m * n) * tri[0].size\n        for (i <- m + 1) {\n            for (j <- n + 1) {\n                for (k <- tri.length - 1) {\n                    if (i + 1 < m && j + 1 < n && i + 1 < tri[0].size && j + 1 < tri[1].size) {\n                        dp = Math.max(dp, sum + tri[k][i + 1] + tri[k][j + 1])\n                    }\n                }\n            }\n        }\n        println(dp)\n    }","language":"scala"}
{"task_id":"MBSCP\/148","completion":"        if(N == 0) {\n            return 0;\n        }\n        val digits = 0 until N {\n            digits += (N mod 10)\n            N \/= 10\n        }\n        val maxSum = 0\n        N = 0\n        for(i \n\nThe result is  `17` , and  `19` are the maximum sums of digits of the number.\n\n\nThanks for your help! I really appreciate it!\n\n\n\nHere is a Java version:\n\n\nclass Main\n{\n    public static void main(String[] args)\n    {\n        System.out.println(sumDigitsTwoparts(35));\n        System.out.println(sumDigitsTwoparts(7));\n        System.out.println(sumDigitsTwoparts(100));\n    }\n\n    private static int sumDigitsTwoparts(int num)\n    {\n        if(num == 0)\n            return 0;\n        int sum = 0;\n        int count = 0;\n        int cur ","language":"scala"}
{"task_id":"MBSCP\/149","completion":"        val dp = arr.map(x => 1).toArray\n        val dp2 = arr.map(x => 1).toArray\n        var max = 1\n        for (i <- 1 to n) {\n            val val = dp[i]\n            for (j <- i + 1 to n) {\n                dp2[j] = dp2[j - 1] + 1\n                if (arr[j] - arr[i] == 1) dp2[j] = Math.min(dp2[j], dp[j - 1])\n                if (dp2[j] - val == 1) max = Math.max(max, dp2[j])\n            }\n        }\n        println(max)\n    }","language":"scala"}
{"task_id":"MBSCP\/150","completion":"        \/\/ Your code goes here\n    }","language":"scala"}
{"task_id":"MBSCP\/151","completion":"        \/\/ TODO\n    }","language":"scala"}
{"task_id":"MBSCP\/152","completion":"        def merge(l, m, r) : List[Int] = {\n            val tmp = new List[Int]()\n            while (l < m && r < l + m - l) {\n                if (l.head < r.head) {\n                    tmp.append(l.head)\n                    l += 1\n                } else {\n                    tmp.append(r.head)\n                    r += 1\n                }\n            }\n            while (l < m) {\n                tmp.append(l.head)\n                l += 1\n            }\n            while (r < l + m - l) {\n                tmp.append(r.head)\n                r += 1\n            }\n            tmp.map(_.+_)\n        }\n\n        def divide(l, r) : Int = {\n            l if l < r else r\n        }\n\n        def mergeSort(l, r) : Int = {\n","language":"scala"}
{"task_id":"MBSCP\/153","completion":"        \/\/ Calculate the vertex with Newton's method.\n        \/\/ See https:\/\/en.wikipedia.org\/wiki\/Newton%27s_method\n        \/\/ for more information on this formula.\n        List(b * b - 4 * a * c, -2 * b + (a * a > 0 ? Math.sqrt(a * a - b * b) : 0))\n    }","language":"scala"}
{"task_id":"MBSCP\/154","completion":"        if (nums.isEmpty) {\n            nums\n        }\n        for (n <- nums) {\n            for (i <- n) {\n                if (i == N) {\n                    println(i)\n                }\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/155","completion":"        n & ~(1 << 0)\n    }","language":"scala"}
{"task_id":"MBSCP\/156","completion":"        tuple_str\n            .map(_.map(s => Integer.valueOf(s)))\n            .toList\n    }","language":"scala"}
{"task_id":"MBSCP\/157","completion":"        (list.map(x => List(x, x))).flatten\n    }","language":"scala"}
{"task_id":"MBSCP\/158","completion":"        val min = arr.sorted.reduce(_ + _)\n        val max = arr.sorted.reduce(_ + _)\n        if (max - min >= k) {\n            return max - min - k\n        }\n        return -1\n    }","language":"scala"}
{"task_id":"MBSCP\/159","completion":"        \/**\n         * 1. Write a function for getting the season for a given month and days.\n         * 2. Write a function for getting the month for a given season.\n         * 3. Write a function for getting the day of the week for a given month and day.\n         *\/\n        case month == \"January\" -> \"winter\"\n        case month == \"February\" -> \"spring\"\n        case month == \"March\" -> \"summer\"\n        case month == \"April\" -> \"autumn\"\n        case month == \"May\" -> \"winter\"\n        case month == \"June\" -> \"spring\"\n        case month == \"July\" -> \"summer\"\n        case month == \"August\" -> \"autumn\"\n        case month == \"September\" -> \"winter\"\n        case month == \"October\" -> \"spring\"\n        case month == \"November\" -> \"summer\"\n        case month == ","language":"scala"}
{"task_id":"MBSCP\/160","completion":"        if (n > 0) {\n            val x = a + b * (n \/ a)\n            val y = n \/ x\n            println(\"x = $x, y = $y\")\n            solution(x, y, n - (x * y))\n        } else {\n            println(\"No solution\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/161","completion":"        list1 match {\n            case Nil =>\n                \/\/ Do nothing\n            case _ =>\n                \/\/ Check whether list2 contains an element in list1\n                if (list2.filter(_ -> !_.eq(Nil)).isEmpty()) {\n                    \/\/ If it does, remove element from list1 and call removeElements again\n                    list1.replaceAll(_.eq(Nil) ? Nil : removeElements(list1, list2));\n                }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/162","completion":"        if (n < 0) throw new Exception(\"n < 0\")\n\n        def series : Int = {\n            1\n        }\n\n        while(n > 0) {\n            series += series - 1\n            n--\n        }\n\n        return series\n    }","language":"scala"}
{"task_id":"MBSCP\/163","completion":"        s * s * 3.14 * l \/ 360.0\n    }","language":"scala"}
{"task_id":"MBSCP\/164","completion":"        \/\/ Your code goes here.\n    }","language":"scala"}
{"task_id":"MBSCP\/165","completion":"        val arr = str1.chars.filter(ch => ch >= 'A' && ch <= 'Z')\n        \/\/ arr.zipWithIndex.reduce { (x,y) => x+y }\n    }","language":"scala"}
{"task_id":"MBSCP\/166","completion":"        val evenPair = A.filter(_.^2).size\n        \/\/ or\n        val evenPair = _.reduce(_.zipWith(0, N, _.__))(0)(_._2).size\n        \/\/ or\n        val evenPair = _.reduce(A, List(0)(_._2)).size\n    }","language":"scala"}
{"task_id":"MBSCP\/167","completion":"        if (n == 0) return 1\n        val x = n.bitLength\n        if (x < 32) return x\n        val y = 1 << (x - 1)\n        return y << 1\n    }","language":"scala"}
{"task_id":"MBSCP\/168","completion":"        val freq = a.filter(x => x == x).count\n        freq\n    }","language":"scala"}
{"task_id":"MBSCP\/169","completion":"        \/\/ 1 + 2 + 3 + ... + n\n        n * (n + 1) * (2 * n + 1) \/ 6\n    }","language":"scala"}
{"task_id":"MBSCP\/170","completion":"        \/\/ using `index` method of IntRange class\n        val range = IntRange(m, n).index { it }\n        \n        \/\/ get the sum of the list\n        val sum = list1.sum { it[range] }\n        \n        \/\/ return the sum\n        println(sum)\n    }","language":"scala"}
{"task_id":"MBSCP\/171","completion":"        var b = (a - 1) * 5 + 1\n        return a * b\n    }","language":"scala"}
{"task_id":"MBSCP\/172","completion":"        val n = s.length\n        val s1 = s.substring(0, n-3)\n        val s2 = s.substring(n-3)\n        val occ = s.split(s1).length\n        val occ2 = s.split(s2).length\n        val occ3 = s.split(\"std\").length\n        val occ4 = s.split(\"st\").length\n        val occ5 = s.split(\"ed\").length\n        println(occ + occ2 + occ3 + occ4 + occ5)\n    }","language":"scala"}
{"task_id":"MBSCP\/173","completion":"        val sb = new StringBuilder()\n        for (ch \n\nSee more at RegexBuddy.\n\n\nThanks for that. I've been going over it and trying to understand it.\n\n\n\nI think this code is what you are looking for:\n\n\nString s = \"python @#&^%\\\\$*program123\";\nString res = s.replaceAll(\"[@#&^%\\\\\\\\$*]\", \"\");\nSystem.out.println(res);\n\n\n\n\n\n\n\n\npublic static String removeNonAlphaNumeric(String str) {\n    return str.replaceAll(\"[^a-zA-Z0-9]\", \"\");\n}\n\n\n\n\n\n\n\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n\npublic class test {\n    public static void main(String args[]) {\n        String text = \"python @#&^%\\\\$*program123\";\n        String regex = \"[^a-zA-Z0-9]\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(text);\n        text = matcher.replaceAll","language":"scala"}
{"task_id":"MBSCP\/174","completion":"        l.foreach(_.zip(_._1, _._2)).toMap(_._1.head(), _._2.head())\n    }","language":"scala"}
{"task_id":"MBSCP\/175","completion":"        \/\/ your code goes here\n        val parenCount = 0\n        for (i \n\nThis will pass all tests. The main idea is to use a stack to keep track of the parens.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/176","completion":"        return a + b + c\n    }","language":"scala"}
{"task_id":"MBSCP\/177","completion":"        val lcm = L * R \/ GCD.lcm(L, R)\n        val difference = R - L\n        val lower = difference \/ lcm\n        val upper = difference - (lcm * lower)\n        val result = List(lcm, L + lower, L + upper)\n        result.sortBy { it.toInt }\n    }","language":"scala"}
{"task_id":"MBSCP\/178","completion":"        val patternsSeq = patterns.asSeq\n        val textSeq = text.asSeq\n        patternsSeq.foldLeft(textSeq, (a : Seq[String], b : Seq[String]) => a + b) match {\n            case s1 :: (s2 :: String) => s2 match {\n                case s2 :: String => \"Matched!\"\n                case _ => \"Not Matched!\"\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/179","completion":"        x > 0 ? {\n            x % 10 == 0 ? true : false\n        }\n            : x < 0 ? {\n                x % 10 == 0 ? true : false\n            }\n                : {\n                    false\n                }\n    }","language":"scala"}
{"task_id":"MBSCP\/180","completion":"        val R = 6371.0\n        val dLat = (elat - slat).toRadians\n        val dLon = (elon - slon).toRadians\n        val lat1 = slat.toRadians\n        val lat2 = elat.toRadians\n        val a = Math.sin(dLat\/2) * Math.sin(dLat\/2) + Math.sin(dLon\/2) * Math.sin(dLon\/2) * Math.cos(lat1) * Math.cos(lat2)\n        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\n        val d = R * c\n        println(d)\n        return d\n    }","language":"scala"}
{"task_id":"MBSCP\/181","completion":"        val result = arr.sort(Comparator.comparing(a => a.length)).headOption\n        result.getOrElse(\"\");\n    }","language":"scala"}
{"task_id":"MBSCP\/182","completion":"        \/\/TODO\n    }","language":"scala"}
{"task_id":"MBSCP\/183","completion":"        val result = 0\n        for (i \n\nNow, you can use this method to count how many distinct pairs are there in a list.\nLets try it out.\n\n\n\/\/lets say that arr = [1, 2, 4, 8]\nval pairs = countPairs(arr, 4, 2)\nprintln(pairs) \/\/ 4\n\/\/and arr = [1, 1, 2, 2]\nval pairs = countPairs(arr, 2, 1)\nprintln(pairs) \/\/ 2\n\n\nI hope you understand the problem. If you have any further doubts, feel free to ask. \nI have also included the code of the algorithm you might find useful.\nEDIT: I have just updated the code to work with the updated version of the question.\nI will make this a lot easier to understand.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/184","completion":"        list.stream().filter(i -> i > num).count() == list.size\n    }","language":"scala"}
{"task_id":"MBSCP\/185","completion":"        val p = (b * b) - (4 * a * c)\n        if (p < 0) {\n            List(-1.0, 0.0)\n        }\n        else {\n            List((-b + sqrt(p)) \/ (2 * a), (-b - sqrt(p)) \/ (2 * a))\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/186","completion":"        val pats = patterns\n        val r = \"\\\\b(?:\" + pats.mkString(\"|\") + \")\\\\b\"\n        val regex = new Regex(r)\n        val matcher = regex.matcher(text)\n        if (matcher.find()) {\n            println(\"Matched!\")\n        } else {\n            println(\"Not Matched!\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/187","completion":"        if (m == 0 || n == 0) {\n            return 0\n        } else if (X(m - 1) == Y(n - 1)) {\n            return 1 + longestCommonSubsequence(X, Y, m - 1, n - 1)\n        } else {\n            var x = longestCommonSubsequence(X, Y, m, n - 1)\n            var y = longestCommonSubsequence(X, Y, m - 1, n)\n            return x > y ? x : y\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/188","completion":"        n % 4 == 0 && n % 100 != 0 || n % 400 == 0\n    }","language":"scala"}
{"task_id":"MBSCP\/189","completion":"        val array = arr.toArray\n        val set = new HashSet\n        val result = new HashSet\n        arr.foreach(e => set.add(e))\n\n        if (set.size == n)\n            return 1\n\n        if (set.size == 0)\n            return n + 1\n\n        for (e \n            if e > 0\n            else e < 0\n        )\n        {\n            if (!set.contains(e))\n                result.add(e)\n        }\n\n        if (result.size == 0)\n            return n + 1\n        \n        return result.min\n    }","language":"scala"}
{"task_id":"MBSCP\/190","completion":"        val size = sqrt(\n            if (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) <= 1 then 1 else 0\n        )\n\n        for (\n            x \n                << if x >= x1 and x <= x2 then size else 0\n            y \n                << if y >= y1 and y <= y2 then size else 0\n        ) {\n            println(x, y)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/191","completion":"        {\n            monthname3.indexOf(\"April\") >= 0 && monthname3.indexOf(\"May\") >= 0 && monthname3.indexOf(\"June\") >= 0 && monthname3.indexOf(\"July\") >= 0 && monthname3.indexOf(\"August\") >= 0 && monthname3.indexOf(\"September\") >= 0 && monthname3.indexOf(\"October\") >= 0 && monthname3.indexOf(\"November\") >= 0 && monthname3.indexOf(\"December\") >= 0\n            monthname3.indexOf(\"February\") >= 0 && monthname3.indexOf(\"March\") >= 0 && monthname3.indexOf(\"April\") >= 0 && monthname3.indexOf(\"May\") >= 0 && monthname3.indexOf(\"June\") >= 0 && monthname3.indexOf(\"July\") >= 0 && monthname3.indexOf(\"August\") >= 0 && monthname3.indexOf(\"September\") >= 0 && monthname3.indexOf(\"October\") >= 0 ","language":"scala"}
{"task_id":"MBSCP\/192","completion":"        str ! = \"\"\n        \/\/ your code goes here\n    }","language":"scala"}
{"task_id":"MBSCP\/193","completion":"        val s = test_tup.sorted()\n        var prev = s.head\n        for (i <- 0 until s.tail.size) {\n            val next = s.tail(i)\n            if (prev != next) {\n                prev = next\n            }\n        }\n        s.clear()\n        s += prev\n    }","language":"scala"}
{"task_id":"MBSCP\/194","completion":"        \/\/ code here\n    }","language":"scala"}
{"task_id":"MBSCP\/195","completion":"        val pos = arr.first { i => i >= n && arr(i) >= x }\n        println(pos.getOrElse(-1))\n    }","language":"scala"}
{"task_id":"MBSCP\/196","completion":"        val result = List(test_list)\n\n        result.foreach(x => result.removeAll(result.takeWhile(y => y.size != K)))\n        result.removeAll(result.takeWhile(y => y.size != K))\n\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/197","completion":"        val result = List()\n        test_tup1.foreach(p1 => test_tup2.foreach(p2 => result << p1 ^ p2))\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/198","completion":"        val c = Math.sqrt(a * a + b * b)\n        if(a <= 0 || b <= 0) throw new IllegalArgumentException(\"a or b must be greater than zero.\")\n        if(c <= 0) throw new IllegalArgumentException(\"a or b must be greater than 0.\")\n        if(a + b <= c) throw new IllegalArgumentException(\"a + b must be greater than c.\")\n        if(a + c <= b) throw new IllegalArgumentException(\"a + c must be greater than b.\")\n        if(b + c <= a) throw new IllegalArgumentException(\"b + c must be greater than a.\")\n        val p = (a + b + c) \/ 2\n        val q = (a + b + c \/ 2)\n        val r = p * (p - a) * (p - b) * (p - c) * (2 * p - a - b - c)\n       ","language":"scala"}
{"task_id":"MBSCP\/199","completion":"        n.bitLength - 1\n    }","language":"scala"}
{"task_id":"MBSCP\/200","completion":"        val max = list1.max(Comparator.comparing(x => x))\n        val result = []\n        for (i \n\nI don't know much scala, but it looks quite good to me. Hope it helps :)\nP.S. Also, you should try to implement your solution in Java and see whether it helps you.\n\n\nThanks for the great answer, however I am looking for a Scala solution (not Java).<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/201","completion":"        if(lst.size == 0) return false\n        for(i \n\noutput\n\n\ntrue\nfalse\nfalse<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/202","completion":"        val str2 = str1.replaceAll(\"[a-zA-Z]\", \"\")\n        str2.replaceAll(\"[0-9]\", \"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/203","completion":"        val bitsDiff = n1.bitCount ^ n2.bitCount\n        val bits = bitsDiff + 1\n        bits.bitLength\n    }","language":"scala"}
{"task_id":"MBSCP\/204","completion":"        \/\/ Your code here.\n    }","language":"scala"}
{"task_id":"MBSCP\/205","completion":"      \/**\n       * Write your code here\n       *\/\n      val sorted = test_tup.sorted\n      test_tup.map(x => sorted.indexOf(x) - sorted.lastIndexOf(x))\n    }","language":"scala"}
{"task_id":"MBSCP\/206","completion":"        val list = List()\n        test_tup.foreach(t => list += t)\n        list\n    }","language":"scala"}
{"task_id":"MBSCP\/207","completion":"        val s = str.toCharArray.map(x => x - 'a').toList\n        val l = (s.groupBy(_._1).mapValues(_._2.toList.sort(_._2.comparing(_._3.then(_._4).then(_._5)))).values.map{case(v) => v.find(_.size == 1)_._1}.toSeq\n        val res = l.find(_.nonEmpty && _.head.length == _.tail.length)\n        (res.isEmpty ? res : _.head + _.tail)\n    }","language":"scala"}
{"task_id":"MBSCP\/208","completion":"        val regex = \"[+-]?([0-9]+)?\\.[0-9]+\"\n        if (new Regex(regex).match(num).isDefined) {\n            true\n        } else {\n            false\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/209","completion":"        val sorted = heap.sorted(_ > a)\n        sorted.first() || sorted.dropWhile(_ > a) ++ sorted\n        sorted.append(a)\n        sorted.sort(_ > a)\n        return sorted\n    }","language":"scala"}
{"task_id":"MBSCP\/210","completion":"        \/\/ your code goes here\n    }","language":"scala"}
{"task_id":"MBSCP\/211","completion":"        n - (n & -n).next\n    }","language":"scala"}
{"task_id":"MBSCP\/212","completion":"        {\n            if (n <= 0) {\n                0\n            } else {\n                1 + (fourthPowerSum(n - 1) * n * n * n)\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/213","completion":"        val res = mutable.ListBuffer[String]()\n        val test_tup1_size = test_tup1.size\n        val test_tup2_size = test_tup2.size\n        test_tup1.zip(test_tup2).forEach(res.append)\n        if (test_tup1_size != test_tup2_size) {\n            res.append(mutable.Array[String](test_tup1_size - test_tup2_size))\n        }\n        test_tup1.zip(test_tup1).forEach(res.append)\n        return res.toList\n    }","language":"scala"}
{"task_id":"MBSCP\/214","completion":"        radian * 180.0 \/ Math.PI\n    }","language":"scala"}
{"task_id":"MBSCP\/215","completion":"        val result = ListBuffer[Any]()\n        var lastChar = alist.headOption.map(String)\n        if(lastChar.isEmpty) {\n            result.append(alist.head())\n            return result\n        }\n        val firstChar = alist.headOption.map(String)\n        if(firstChar.isEmpty) {\n            result.append(alist.head())\n            return result\n        }\n        while(lastChar.isEmpty && firstChar.isEmpty) {\n            alist = alist.tail()\n            firstChar = alist.headOption.map(String)\n            lastChar = alist.headOption.map(String)\n        }\n        while(!lastChar.isEmpty) {\n            if(lastChar.head == firstChar.head) {\n                result.append(lastChar.head)\n                alist = alist.tail()\n                firstChar = alist.headOption.map(String)\n                lastChar = alist.headOption.map(String)\n            }\n           ","language":"scala"}
{"task_id":"MBSCP\/216","completion":"        def helper(list1: List[Any], list2: List[Any], index1 = 0, index2 = 0, result: Boolean = true) : Boolean = {\n            val size1 = list1.size\n            val size2 = list2.size\n            if (index1 == size1 && index2 == size2) {\n                return result\n            }\n            val sub1 = list1(index1)\n            val sub2 = list2(index2)\n            if (sub1.isCons && sub2.isCons) {\n                helper(list1, list2, index1 + 1, index2 + 1, result && sub1.car == sub2.car)\n                helper(list1, list2, index1 + 1, index2, result && sub1.cdr == sub2.cdr)\n                return result\n            }\n            if (index1 == size1) {\n                return helper(list1, list2, index1, index2","language":"scala"}
{"task_id":"MBSCP\/217","completion":"        val map = new HashMap[Character, Int]\n        for (val ch : str.toCharArray) {\n            if (map.contains(ch)) {\n                map.put(ch, map.get(ch) + 1)\n            } else {\n                map.put(ch, 1)\n            }\n        }\n        for (val key, val times : map.entrySet) {\n            if (times > 1) {\n                return key\n            }\n        }\n        return \"\\x00\"\n    }","language":"scala"}
{"task_id":"MBSCP\/218","completion":"        \/\/ 1 = 2 - 4\n        val difference = (A - B).toInt\n        if (difference > 0) {\n            return difference + 1\n        }\n        else if (difference < 0) {\n            return -difference + 1\n        }\n        else {\n            return 0\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/219","completion":"        val min = test_tup.take(0, K).map(_.min)\n        val max = test_tup.take(0, K).map(_.max)\n        test_tup.zip(min, max).map(_.swap)\n    }","language":"scala"}
{"task_id":"MBSCP\/220","completion":"        val replaceSpecialChars = text.replaceAll(\" +\", \":\").replaceAll(\",+\", \":\").replaceAll(\"\\\\.+\", \":\").trim\n        \"Your task is to replace maximum \" + n + \" special characters with ':'\"\n    }","language":"scala"}
{"task_id":"MBSCP\/221","completion":"        val f = nums.filter(_.isEven)\n        f.headOption\n    }","language":"scala"}
{"task_id":"MBSCP\/222","completion":"        if (test_tuple.size == 0) {\n            true\n        }\n        else {\n            val test_list = test_tuple.map {\n                case x => x\n            }\n            val first_element = test_list(0)\n            var is_the_same = true\n            for (i \n\nThis code will return false in case there is one element in tuple with type String, while true in case all elements are of same type.\n\n\nThank you so much! Can you help me understand the second part of my question? I am not sure how I can approach the second part of my question. I am still new to Scala and I am trying to figure out the best way to solve this problem. Thanks again for the help!\n\nI'm really sorry about that, I have just edited my answer, so now you can see how to solve the second part.\n\nThank you so much! I understand it now.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/223","completion":"        val count = new Array(n + 1).map(_.toInteger)\n        for (i <- arr.indices) {\n            count[arr(i)]++\n        }\n        for (i <- count.indices) {\n            if (count(i) >= x)\n                return true\n        }\n        return false\n    }","language":"scala"}
{"task_id":"MBSCP\/224","completion":"        n\n    }","language":"scala"}
{"task_id":"MBSCP\/225","completion":"        val length = high - low\n        if (length < 1) return\n        val mid = low + length \/ 2\n        val midEl = arr(mid)\n        if (midEl > arr(mid + 1)) {\n            if (length == 1) return arr(mid)\n            val left = findMin(arr, low, mid)\n            val right = findMin(arr, mid + 1, high)\n            if (left < right) {\n                return left\n            }\n            else {\n                return right\n            }\n        }\n        else {\n            val left = findMin(arr, low, mid - 1)\n            val right = findMin(arr, mid, high)\n            if (left < right) {\n                return left\n            }\n            else {\n                return right\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/226","completion":"        str.replaceAll(String.format(\"\\\\%s\", 0), \"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/227","completion":"        b < a ? b : a\n        b < c ? b : c\n    }","language":"scala"}
{"task_id":"MBSCP\/228","completion":"        l <= n && n <= r\n    }","language":"scala"}
{"task_id":"MBSCP\/229","completion":"        var positiveNumbers : List[Int] = arr.filter(_.> 0).toList\n        var negativeNumbers : List[Int] = arr.filter(_.< 0).toList\n        if(arr.size == 0) {\n            throw new IllegalArgumentException(\"The array must have at least one element\")\n        } else if(arr.size == 1) {\n            if(arr.head < 0) {\n                return negativeNumbers\n            } else {\n                return positiveNumbers\n            }\n        } else {\n            var middle = positiveNumbers.size - 1 + Math.floor(positiveNumbers.size \/ 2)\n            var firstHalf = positiveNumbers.tail\n            var secondHalf = positiveNumbers.head\n            positiveNumbers = firstHalf.prependAll(negativeNumbers)\n            positiveNumbers = positiveNumbers.prependAll(secondHalf)\n            if(arr.size % 2 == 0) {\n                return positiveNumbers.take(middle).toList\n            } else {\n                return positiveNumbers.","language":"scala"}
{"task_id":"MBSCP\/230","completion":"        val arr = str1.split(\"\")\n        arr.foreach(s => {\n            if (s.trim.isEmpty)\n                str1 = str1.replaceAll(s, char)\n        })\n        str1\n    }","language":"scala"}
{"task_id":"MBSCP\/231","completion":"        val dp = List(List(0, 0))\n        for (i \n\nNow, let's think about what happens if you have a triangle with more than  `n` rows, or if some of the rows are empty:\n\n\nval tri = List(List(1), List(1, 2), List(4, 1, 12))\nval n = 3\nval maxSum = maxSum(tri, n)\nprintln(maxSum)\n\n\nThe output is  `9` :\n\n\n9\n\n\nThe max sum can be achieved if  `maxSum(tri, n) = maxSum(tri - 1, n) + tri[n][n]` .\n\n\nval tri = List(List(1), List(1, 2), List(4, 1, 12))\nval n = 3\nval maxSum = maxSum(tri, n)\nprintln(maxSum)\n\n\nThe output is  `23` :\n\n\n23\n\n\nThe max sum can be achieved if  `maxSum(tri, n","language":"scala"}
{"task_id":"MBSCP\/232","completion":"        val sortedList = list1.sorted\n        \/\/ find n largest item from sorted list\n        val nLargest = sortedList.take(n)\n        \/\/ print n largest item\n        nLargest\n    }","language":"scala"}
{"task_id":"MBSCP\/233","completion":"        1.79 * 2 * Math.PI * r * h\n    }","language":"scala"}
{"task_id":"MBSCP\/234","completion":"        l*l*l\n    }","language":"scala"}
{"task_id":"MBSCP\/235","completion":"        n.bitSet.set(0, n.bitSet.size - 1, false) \/\/ zeroing all the bits\n        n\n    }","language":"scala"}
{"task_id":"MBSCP\/236","completion":"        \/\/ Code here\n        if (N < 0 || K < 0) {\n            N = -1\n        }\n        else if (N == 0 || K == 0) {\n            N = 0\n        }\n        else if (N == 1) {\n            N = 1\n        }\n        else if (N > 1 && K == 1) {\n            N = 2\n        }\n        else if (N > 1 && K > 1) {\n            N = 3\n        }\n        else if (N > 1) {\n            N = 4\n        }\n        return N\n    }","language":"scala"}
{"task_id":"MBSCP\/237","completion":"        val result = Map[List[Int], Int]()\n        test_list.foreach(\n            t => t.foreach(\n                i => {\n                    if (!result.contains(t ++ i))\n                        result += t ++ i\n                }\n            )\n        )\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/238","completion":"        str match {\n            case \"\" => 0\n            case s => length(s.substrings(0, 1)) + numberOfSubstrings(s.substrings(1))\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/239","completion":"        \/\/ Write your code here\n        val possibleSequenceLengths = Array(n - 1)\n        possibleSequenceLengths(0)\n        possibleSequenceLengths += 1\n        possibleSequenceLengths -= 1\n\n        var totalSequences = 0\n        while (possibleSequenceLengths.length > 0) {\n            val numberOfSequences = possibleSequenceLengths.length\n            totalSequences += numberOfSequences\n\n            val sequences = Array(numberOfSequences)\n            possibleSequenceLengths -= 1\n\n            for (i <- 0 until numberOfSequences) {\n                val sequenceLength = possibleSequenceLengths(i)\n                for (j <- 0 until sequenceLength) {\n                    val newSequence = (i + 1) + j\n                    if (newSequence >= m) {\n                        break\n                    }\n\n                    if (newSequence >= n) {\n                        break\n                    }\n\n                    sequences(i) ++ newSequence\n                }\n            }\n\n            possibleSequence","language":"scala"}
{"task_id":"MBSCP\/240","completion":"        val newList : List[Any] = list1.tail  \/\/ last element\n        newList = newList ++ list2\n        newList\n    }","language":"scala"}
{"task_id":"MBSCP\/241","completion":"        List(\n            List(\n                List(\" \", \" \", \" \", \" \", \" \", \" \"),\n                List(\" \", \" \", \" \", \" \", \" \", \" \"),\n                List(\" \", \" \", \" \", \" \", \" \", \" \"),\n                List(\" \", \" \", \" \", \" \", \" \", \" \"),\n                List(\" \", \" \", \" \", \" \", \" \", \" \")\n            )\n        ),\n        List(\n            List(\n                List(\" \", \" \", \" \", \" \", \" \", \" \"),\n                List(\" \", \" \", \" \", \" \", \" \", \" \"),\n                List(\" \", \" \", \" \", \" \", \" \", \" \"),\n                List(\" \", \" \", \" \", \" \", \" \", \" ","language":"scala"}
{"task_id":"MBSCP\/242","completion":"        val total = str1.length\n        return total\n    }","language":"scala"}
{"task_id":"MBSCP\/243","completion":"        val firstElemOccurence = new HashMap[Int, List[Any]]\n        val secondElemOccurence = new HashMap[Int, List[Any]]\n        lst.foreach { elem =>\n            val key = elem(0)\n            if (!firstElemOccurence.containsKey(key))\n                firstElemOccurence.put(key, new ArrayList[Any]())\n            if (!secondElemOccurence.containsKey(key))\n                secondElemOccurence.put(key, new ArrayList[Any]())\n            firstElemOccurence(key).add(elem)\n            secondElemOccurence(key).add(elem)\n        }\n\n        val sortedFirstElements = new ArrayList[Any]\n        firstElemOccurence.foreach { (key, values) =>\n            val sortedValues = values.sorted(Comparator.comparing(x => x(1)))\n            sortedFirstElements.addAll(sortedValues)\n        }\n\n        val sortedSecondElements = new ArrayList[Any]\n        secondElemOccurence.foreach { (key, values) =>\n            val sortedValues = values.","language":"scala"}
{"task_id":"MBSCP\/244","completion":"        N.toInt\n        {\n            case 1 => 1\n            case N => N * N\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/245","completion":"        val dp = Array(n + 1).fill(0)\n        dp[0] = arr[0]\n        for(i <- 0 until n) {\n            dp[i+1] = max(dp[i+1], arr[i])\n            for(j <- i+2 until n) {\n                dp[j] = max(dp[j], dp[j-1] + arr[j])\n            }\n        }\n\n        val ans = dp[n]\n        println(\"The maximum sum is $\"ans\")\n        return ans\n    }","language":"scala"}
{"task_id":"MBSCP\/246","completion":"        if(number == 0) return 0\n        if(number % 2 == 0) return 1.0 + babylonianSquareroot(number \/ 2)\n        return 1.0 + babylonianSquareroot(number \/ 2) + babylonianSquareroot(number \/ 2)\n    }","language":"scala"}
{"task_id":"MBSCP\/247","completion":"        val m = str.length\n        val n = str.length.toInt\n        val dp = new Int[n][n]\n        dp[0][0] = 1\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i < j) dp[i][j] = 0\n                else if (str(i) == str(j) && dp[i - 1][j - 1] == 1) {\n                    dp[i][j] = dp[i - 1][j - 1] + 2\n                } else if (str(i) == str(j) && dp[i - 1][j] >= 2) {\n                    dp[i][j] = dp[i - 1][j]\n                }\n                if (dp(i, j) > m) m = dp[i][j]\n            }\n        ","language":"scala"}
{"task_id":"MBSCP\/248","completion":"        val sum = 0.0\n        for (i <- 1 to n) {\n            sum += 1 \/ i\n        }\n        sum\n    }","language":"scala"}
{"task_id":"MBSCP\/249","completion":"        array_nums1.toSeq.intersect(array_nums2.toSeq)\n    }","language":"scala"}
{"task_id":"MBSCP\/250","completion":"        val count = 0\n        for (elem <: tup) {\n            if (elem == x) {\n                count += 1\n            }\n        }\n        println(count)\n    }","language":"scala"}
{"task_id":"MBSCP\/251","completion":"        \/\/ your code goes here\n        list.foreach(_ -> _.insertBefore(element))\n    }","language":"scala"}
{"task_id":"MBSCP\/252","completion":"        import scala.math.BigDecimal\n        import scala.math.MathContext\n        val ctx = new MathContext(5, RoundingMode.HALF_UP)\n        val radius = new BigDecimal(3.14159265358979, ctx)\n        var r = new BigDecimal(numbers, ctx)\n        val theta = new BigDecimal(0.785398163397448, ctx)\n        val x = r.multiply(radius)\n        val y = r.multiply(theta)\n        List(x, y)\n    }","language":"scala"}
{"task_id":"MBSCP\/253","completion":"        if (list1.isEmpty) {\n            return 0\n        }\n        val n = list1.head\n        list1 = list1.tail\n        if (n % 1 == 0 || !(n.isInstanceOf[Int])) {\n            return countInteger(list1) + 1\n        }\n        return countInteger(list1)\n    }","language":"scala"}
{"task_id":"MBSCP\/254","completion":"        val words = text.split(\" \")\n        val result = words.filter(s => s.startsWith(\"a\") || s.startsWith(\"e\"))\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/255","completion":"        combinationsWithRepetitions(l, n, 0, List())\n    }","language":"scala"}
{"task_id":"MBSCP\/256","completion":"        val primeNumbers = filter(n => isPrime(n), 1 until n)\n        return primeNumbers.length\n    }","language":"scala"}
{"task_id":"MBSCP\/257","completion":"        List(b, a)\n    }","language":"scala"}
{"task_id":"MBSCP\/258","completion":"        if (array_nums.isEmpty) {\n            throw new IllegalArgumentException(\"array must not be empty\");\n        }\n        val even_count = array_nums.filter(e => e % 2 == 0).size();\n        val odd_count = array_nums.size() - even_count;\n        return odd_count;\n    }","language":"scala"}
{"task_id":"MBSCP\/259","completion":"        \/**\n         * Your task is to maximize the sum of the values of the elements of the tuples.\n         *\/\n    }","language":"scala"}
{"task_id":"MBSCP\/260","completion":"        \/\/ find prime factors by trial division.\n        val primes = sieve(n + 1)\n        for (i \n\n(Thanks, I know there is a better way to find primes, but this is a way to get the result without trial division.)\n\n\n\n\nHere is my implementation that is a bit more efficient than the other suggestions.\n\n\npublic class Test {\n\n    public static int nthNewmanWilliamsPrime(int n) {\n        int count = 0;\n        int num = 2;\n\n        while (num < n) {\n            for (int i = 2; i < num; i++) {\n                if (num % i == 0) {\n                    count++;\n                }\n            }\n            if (count == 2) {\n                break;\n            }\n            count = 0;\n            num++;\n        }\n\n        return num;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(nthNewmanWilli","language":"scala"}
{"task_id":"MBSCP\/261","completion":"        \/\/ TODO\n    }","language":"scala"}
{"task_id":"MBSCP\/262","completion":"        val result : ListBuffer[List[Any]] = new ListBuffer\n        if (list1.size < 1)\n            throw new IllegalArgumentException(\"List should contain at least one element\")\n        if (list1.size < L)\n            throw new IllegalArgumentException(\"List should contain at least L elements\")\n        result += list1.take(L)\n        result += list1.drop(list1.size - L)\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/263","completion":"        d1.merge(d2)\n    }","language":"scala"}
{"task_id":"MBSCP\/264","completion":"        val age = h_age * 7\n        age + 22\n    }","language":"scala"}
{"task_id":"MBSCP\/265","completion":"        val n = length(S) \/ step\n        for (i <- 0 until n) {\n            val sub = S(i * step, (i + 1) * step - 1)\n            val last = S(i * step + step - 1)\n            if (i == n - 1) sub += last\n            else sub += last + List()\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/266","completion":"        l * l * l\n    }","language":"scala"}
{"task_id":"MBSCP\/267","completion":"        sum 1 to n * (n + 1) \/ 2\n        \/\/ (n + 1) * (n + 1) \/ 2 is a trick to get even square numbers\n    }","language":"scala"}
{"task_id":"MBSCP\/268","completion":"        val starNum = (1 << (n - 1))\n        val total = 1 << n\n        val count = 0\n        for (i <- 1 ; i < total ; i += 2) {\n            val isEven = (i & 1) == 0\n            if (isEven && count == 0) {\n                count += 1\n            }\n            if (!isEven && count != 0) {\n                count -= 1\n            }\n        }\n        return starNum - count\n    }","language":"scala"}
{"task_id":"MBSCP\/269","completion":"        val str = \"\" + k\n        val result = str.toInt(0)\n        val length = str.length\n        for(i \n\noutput\n\n\n65\n82\n83\n\n\n\n\n`string` does not have a `toInt` method. `val str = \"\" + k` creates a new string.\n\nYou are correct, thank you.  @MarkRotteveel<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/270","completion":"        arr match {\n            case Nil => 0\n            case Cons(a, tail) =>\n                if (a % 2 == 0 && (n <= tail.length || n >= 0))\n                    if (n == 0 || (n <= tail.length && tail[n] % 2 == 0))\n                        sumEvenAndEvenIndex(tail, n - 1) + a\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/271","completion":"        var i = 1;\n        while(i <= n) {\n            i = i + 2;\n        }\n        i = 5 ** i;\n        i = i + n;\n        i = i + n + 1;\n        i = i * i;\n        i = i + n;\n        i = i * i;\n        i = i + n;\n        i = i * i;\n        i = i + n;\n        i = i * i;\n        i = i + n;\n        i = i * i;\n        i = i + n;\n        i = i * i;\n        i = i + n;\n        i = i * i;\n        i = i + n;\n        i = i * i;\n        i = i + n;\n        i = i * i;\n        i = i + n;\n        i = i ","language":"scala"}
{"task_id":"MBSCP\/272","completion":"        val result = test_list.map(_.tail).collect\n        \/\/ val result = test_list.map(_.tail).toList\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/273","completion":"        val list = test_tup1.zipWithIndex { (val, index) => (index - val) }.toList\n        test_tup2.zipWithIndex { (val, index) => (index - val) }.toList\n    }","language":"scala"}
{"task_id":"MBSCP\/274","completion":"        1\n        if (n % 2 == 0) {\n            1\n            for (i \n\nHere's the output :<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/275","completion":"        if (m >= n) {\n            m = n - m\n        }\n        if (a.isEmpty) {\n            m\n        } else {\n            for (i <- 0 until a.size - 1) {\n                if (a(i) == n) {\n                    m\n                } else if (a(i) > n) {\n                    m = m - 1\n                } else {\n                    break\n                }\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/276","completion":"        var volume = 1.3333333333333333 * (r * r * h) + (3 * r * r) + (3 * r) + h\n        volume\n    }","language":"scala"}
{"task_id":"MBSCP\/277","completion":"        val newDict = new mutable.HashMap[String, Int]()\n        dict.foreach((key, value) => newDict += if (value == n) { key } else {})\n        newDict\n    }","language":"scala"}
{"task_id":"MBSCP\/278","completion":"        \/**\n         * Your code starts here.\n         *\/\n    }","language":"scala"}
{"task_id":"MBSCP\/279","completion":"        n\n    }","language":"scala"}
{"task_id":"MBSCP\/280","completion":"        if (dlist == null || dlist.size == 0) {\n            \/\/ empty list\n            List(-1, -1)\n        } else if (dlist.size == 1) {\n            \/\/ one element in list\n            List(-1, 0)\n        } else {\n            var low = 0\n            var high = dlist.size - 1\n\n            while (low < high) {\n                var mid = low + (high - low) \/ 2\n                if (dlist(mid) == item) {\n                    List(true, mid)\n                    break\n                } else if (dlist(mid) < item) {\n                    low = mid + 1\n                } else {\n                    high = mid - 1\n                }\n            }\n            if (low >= high) {\n                List(false, -1)\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/281","completion":"        val set = Set(test_list)\n        val result = set.isEmpty\n\n        println(result)\n    }","language":"scala"}
{"task_id":"MBSCP\/282","completion":"        nums1.map(x => nums2.map(y => y - x)).flatten\n    }","language":"scala"}
{"task_id":"MBSCP\/283","completion":"        val digitFrequency = frequency(n.toDigit())\n\n        \/\/ Check whether the digit frequency is less than or equal to the digit itself.\n        for (val digit : 1 until n.toDigit)\n            if (digitFrequency[digit] > 1)\n                return false\n        return true\n    }","language":"scala"}
{"task_id":"MBSCP\/284","completion":"        list.every { a => a === element }\n    }","language":"scala"}
{"task_id":"MBSCP\/285","completion":"        \/\/ Your code here\n        text.match(\"a+b{2,3}\").isDefined() ? \"Found a match!\" : \"Not matched!\"\n    }","language":"scala"}
{"task_id":"MBSCP\/286","completion":"        val mod = mutable.ListBuffer[Int](a.size())\n        mod += a.size() - 1\n\n        for (i <- 1; i < n; i += 1) {\n            val prevSum = mod.apply(0)\n            for (j <- 1; j < k + i; j += 1) {\n                val curSum = prevSum.apply(j) + a(i + j)\n                if (curSum > mod(i + j - 1).apply(j)) {\n                    mod(i + j - 1).apply(j) = curSum\n                }\n            }\n        }\n\n        val max = -1\n        for (i <- 0; i < n; i += 1) {\n            val cur = mod(i).apply(0)\n            for (j <- 1; j < k; j += 1) {\n                val curSum = cur.","language":"scala"}
{"task_id":"MBSCP\/287","completion":"        val f : Int = n * n\n        for (i \n\nI tested it with  `scala -version` 1.8.2 and got the correct result:\n\n\nscala> squareSum(2)\nres0: Int = 20<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/288","completion":"        var arr_copy : List[Int] = arr\n        var count : Int = 0\n        while (true) {\n            if (modularIn(arr_copy, N, P)) {\n                arr_copy = modularSubtraction(arr_copy, N, P)\n                count += 1\n            } else\n                break\n        }\n        println(\"count = \" + count)\n        return arr_copy[0]\n    }","language":"scala"}
{"task_id":"MBSCP\/289","completion":"        \/\/ ...\n    }","language":"scala"}
{"task_id":"MBSCP\/290","completion":"        val listLength = list1.size\n        val maxSize = listLength\n\n        \/\/ 1 - start with list 1\n        \/\/ 2 - start from the second list, but don't change it in place, i.e.\n        \/\/    we have 2 variables for list1 and list2.\n        \/\/ 3 - we iterate through list1, list2 will be changed\n\n        for(i \n\nThis gives you the list of lists with the maximum length. You can also get the length of the longest list using  `list.size` .<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/291","completion":"        val total = 1\n        val ways = 1\n        for (i \n\nIn Scala you can use  `Range` to compute the number of ways from the given number of posts and the given number of colors.\nWith  `Range` you can compute the total number of ways, and the number of ways for the given number of posts, and you can add up these values.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/292","completion":"        n \/ m\n    }","language":"scala"}
{"task_id":"MBSCP\/293","completion":"        w * w + h * h == (w + h) * (w + h)\n    }","language":"scala"}
{"task_id":"MBSCP\/294","completion":"        val res = listval.map(x => x._2).reduce(_ + 1, 0);\n        \/\/val res = listval.map(x => x._2.getOrElse(0)).reduce(_ + 1, 0);\n        \/\/val res = listval.map(x => x._2.getOrElse(0)).reduce(_ + 1, 0);\n        return res;\n    }","language":"scala"}
{"task_id":"MBSCP\/295","completion":"        var sum = 1\n        for(i <- 1 ; i < number ; i++) {\n            if(number % i == 0)\n                sum += i\n        }\n        return sum\n    }","language":"scala"}
{"task_id":"MBSCP\/296","completion":"        var left = 0\n        var right = n - 1\n        var count = 0\n        while(left < right) {\n            if (arr(left) > arr(right)) {\n                count += (right - left)\n                right -= 1\n            } else {\n                left += 1\n            }\n        }\n        return count\n    }","language":"scala"}
{"task_id":"MBSCP\/297","completion":"        val arr = mutable.ListBuffer[Int]()\n        val index = 0\n        while (index < list1.length) {\n            if (list1(index) instanceof List) {\n                index = index + 1\n                val subArr = flattenList(list1(index))\n                subArr.forEach(_ => arr.append(_))\n            } else {\n                arr.append(list1(index))\n            }\n            index = index + 1\n        }\n        return arr.toList\n    }","language":"scala"}
{"task_id":"MBSCP\/298","completion":"        \/\/ Write your code here\n        \/\/ Please note, this solution is only possible for 2 nested lists\n    }","language":"scala"}
{"task_id":"MBSCP\/299","completion":"        val result = List[Any]()\n        for (i \n\nAnd that's all.\n\n\nHi, thank you very much for your answer. I tried it but it seems that the first `i` is never initialized in the `for` loop. I'll add an example to my question.\n\nThe value of `i` is not updated in the loop. It's always zero. You have to initialize it with `i = 0` or `i += 1`.\n\nThanks again for your answer. I added the code to my question and now I have an infinite loop on my IDE and I don't understand why.\n\n@user12156722 you have a typo in the function body (typo on the second bracket).\n\nThanks, I've corrected it.\n\n@user12156722 I updated my answer.\n\nThank you very much for your help.\n\n\n\n\n\nList[List[Any]]\n\n\nThis is not a  `List[String]` , and therefore  `max()` does not work.\nIn other words,  `max()` is not defined for  `List[List[","language":"scala"}
{"task_id":"MBSCP\/300","completion":"        if (n == 0)\n            1.0\n        else\n            1.0 \/ 2 + countBinarySeq(n - 1)\n    }","language":"scala"}
{"task_id":"MBSCP\/301","completion":"        \/\/ TODO: Define a recursive algorithm\n        \/\/ TODO: Return the depth of a dictionary\n    }","language":"scala"}
{"task_id":"MBSCP\/302","completion":"        n & -n\n    }","language":"scala"}
{"task_id":"MBSCP\/303","completion":"        \/\/ Your task is to write the function body.\n    }","language":"scala"}
{"task_id":"MBSCP\/304","completion":"        ranges.map { range =>\n            if (index >= range._1 && index < range._2) {\n                arr(index + rotations * range._1)\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/305","completion":"        words match {\n            case (word1, word2) =>\n                match(word1, word2,\n                    case (word1, word2) => List(word1, word2),\n                    case (word1, word2) => List(word1)\n                )\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/306","completion":"        val dp = Array(n + 1).fill(0)\n        for (i <- 0 until n) {\n            dp(i) = dp(i - 1) + a(i)\n            dp(i) = (dp(i - 1) - a(i - index) if (i - index) >= 0 else 0) + a(i)\n            dp(i) = (dp(i - 1) - a(i - k) if (i - k) >= 0 else 0) + a(i)\n            if (dp(i) > dp(i + 1)) dp(i) = dp(i + 1)\n        }\n        println(dp(0))\n    }","language":"scala"}
{"task_id":"MBSCP\/307","completion":"        tuplex.take(m).cons(n).tail.take(m)\n    }","language":"scala"}
{"task_id":"MBSCP\/308","completion":"        \/\/ sort the first list\n        nums1.sort(Comparator.comparingInt(_ -> _))\n\n        \/\/ sort the second list\n        nums2.sort(Comparator.comparingInt(_ -> _))\n\n        \/\/ keep track of all the products from the first list\n        result : List[Int] = []\n        for (n1 \n            i \n            = 0 ; i < N ; i++) {\n            result += nums1(i) * nums2(i)\n        }\n        return result\n    }","language":"scala"}
{"task_id":"MBSCP\/309","completion":"        a if (a > b) a else b\n    }","language":"scala"}
{"task_id":"MBSCP\/310","completion":"        \/\/ Your code here\n        val strList = str1.trim().split(' ')\n        val tuple = List(strList.head, strList.tail.drop(1))\n        tuple.filter(_.nonEmpty)\n        tuple\n    }","language":"scala"}
{"task_id":"MBSCP\/311","completion":"        n & (~n + 1)\n    }","language":"scala"}
{"task_id":"MBSCP\/312","completion":"        h * h * r * r \/ 3\n    }","language":"scala"}
{"task_id":"MBSCP\/313","completion":"        println(list1)\n        list1.filter(_.asInstanceOf[Int]).foreach(_.plus)\n    }","language":"scala"}
{"task_id":"MBSCP\/314","completion":"        val sum = 0\n        val memo = mutable.HashMap[Int, Int]()\n        memo(0, 0)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                memo(i, j) = 0\n                for (x <- 0 until n) {\n                    for (y <- 0 until n) {\n                        memo(i, j) += grid(i + x, j + y)\n                    }\n                }\n                sum = max(sum, memo(i, j))\n            }\n        }\n        sum\n    }","language":"scala"}
{"task_id":"MBSCP\/315","completion":"        val word = str.split(\" \")\n        val map = 0\n        val ret = \"\"\n        val maxLen = 0\n\n        for (elem <- word) {\n            if (elem.length % 2 == 0) {\n                map += elem.length\n                if (map > maxLen) {\n                    ret = elem\n                    maxLen = map\n                }\n            }\n            else {\n                map = 0\n            }\n        }\n        if (ret.length == 0) {\n            ret = \"-1\"\n        }\n\n        println(ret)\n    }","language":"scala"}
{"task_id":"MBSCP\/316","completion":"        val l = A.length\n        if (l == 0) throw new RuntimeException( \"Empty List\" )\n        if (l == 1) throw new RuntimeException( \"List with one element\" )\n        if (l == 2) {\n            if (A(0) == x) {\n                val count = 0\n                while (A(count) == x) count += 1\n                return count - 1\n            } else {\n                throw new RuntimeException( \"List with two elements, but the first one is different\" )\n            }\n        }\n        if (A[l - 1] == x) return l - 1\n        if (A[l - 2] == x) return l - 2\n        val start = 0\n        val end = l - 1\n        while (end - start > 1) {\n            val mid = start + ((end - start) \/ ","language":"scala"}
{"task_id":"MBSCP\/317","completion":"        val map = alist.stream().collect(Collectors.toMap(e => e, e => List(1)))\n        alist.stream().map(e => map.get(e)).flatMap(e => e.stream()).forEach(e => map.put(e, e + 1))\n        alist.stream().flatMap(e => map.get(e).stream()).collect(Collectors.toList)\n    }","language":"scala"}
{"task_id":"MBSCP\/318","completion":"        s match {\n            case 8 => 18\n            case 4 => 2\n            case 1 => 0\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/319","completion":"        val regex = \"\\\\w{5}\"\n        val matcher = text.r.findInLine(regex)\n        matcher.findAllIn(text)\n    }","language":"scala"}
{"task_id":"MBSCP\/320","completion":"        var sum = 0\n        for(i \n\nThere is also a method you can use, but it is much more complicated to understand.\n\n\n\/**\n * @param n {Int} the number to count to\n * @param n1 {Int} the number to start counting from\n * @returns {Int} the number of times to sum to n\n *\/\ndef sumDifference(n: Int, n1: Int) : Int = {\n    var sum = 0\n    for(i \n\n\n\n\n\nI think you need to do it this way:\n\n\nclass Main extends App {\n    val n = 10\n    val n1 = 0\n    val sum = 0\n\n    def main(args: Array[String]) {\n        n1 = n + 1\n        for (i \n\nIt's a loop that runs 10 times with the first element  `n` being 10, then the next element is 11, etc.\nThen it's the same as the other answer, except the initial value of","language":"scala"}
{"task_id":"MBSCP\/321","completion":"        val n = s.length()\n        for (var i = n - 1; i > 0; i--) {\n            if (s(i-1) != \"0\" && s(i) != \"0\") {\n                val d = s.substring(i-2, i+1)\n                for (var j = i; j > 0; j--) {\n                    if (d > s.substring(j-1, j+1)) {\n                        d = s.substring(j-1, j+1) + d\n                    }\n                }\n                return d\n            }\n        }\n        return s\n    }","language":"scala"}
{"task_id":"MBSCP\/322","completion":"        val positions = new List[Int]\n        val firstMin = list1.min\n        val index = list1.indexOf(firstMin)\n        if (index != -1) {\n            positions(index)\n        }\n        positions.append(-1)\n        list1.each {\n            val current = it\n            if (current < firstMin) {\n                val currentIndex = list1.indexOf(current)\n                if (currentIndex != -1) {\n                    positions(currentIndex)\n                }\n                positions(positions.size - 1)\n            }\n        }\n        positions.reverse\n        positions\n    }","language":"scala"}
{"task_id":"MBSCP\/323","completion":"        val res = []\n        for (i <- 0 until n) {\n            if (i % 2 == 0) {\n                res += arr[i]\n            } else {\n                res += arr[n - 1 - i]\n            }\n        }\n        arr.clear()\n        arr += res\n    }","language":"scala"}
{"task_id":"MBSCP\/324","completion":"        \/\/ Write your code here.\n    }","language":"scala"}
{"task_id":"MBSCP\/325","completion":"        if (n == 1) return 1\n        val sq = 1 << n.bitCount()\n        \/\/ Calculate all possible squares\n        val squares = range(1, sq)\n        \/\/ Calculate all possible sums of the squares\n        val sums = squares.map(_.multiply(sq)).filter(_.mod(sq)).toList\n        \/\/ Pick the minimum of the sums\n        val min = sums.min\n        \/\/ Count the squares that sum to n\n        val count = sums.filter(_.equal(min)).count\n        \/\/ Return the count\n        count\n    }","language":"scala"}
{"task_id":"MBSCP\/326","completion":"        val freq = test_list.map(_.split(\" \"))\n            .groupBy(_.head)\n            .mapValues(_.toList)\n            .mapValues(_.size)\n            .mapValues(_.max)\n            .keys()\n            .last\n        println(freq)\n    }","language":"scala"}
{"task_id":"MBSCP\/327","completion":"        \/\/ YOUR CODE HERE\n    }","language":"scala"}
{"task_id":"MBSCP\/328","completion":"        val arr = list1\n        var i = 0\n        if (m < 0) throw new IllegalArgumentException(\"m must be positive.\")\n        if (n < 0) throw new IllegalArgumentException(\"n must be positive.\")\n\n        for (i < m; i++) arr = arr.tail\n        for (i = 0; i < n; i++) arr = arr.cons(arr.head)\n        return arr\n    }","language":"scala"}
{"task_id":"MBSCP\/329","completion":"        if (list.isEmpty)\n            0\n        else\n            (0 until list.head).map { (n - _) => n }\n    }","language":"scala"}
{"task_id":"MBSCP\/330","completion":"        val pattern = \"(?i)(\\\\w{3,5})\"\n        val matcher = text.matches(pattern)\n        if (matcher) {\n            val matchedWords = text.split(pattern)\n            matchedWords.map(_.replaceAll(\" \", \"\"))\n        } else {\n            throw new RuntimeException(\"Invalid input string.\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/331","completion":"        if (n == 0) return 0\n        var x = countUnsetBits(n & (n - 1))\n        var y = 1\n        y += x\n        y\n    }","language":"scala"}
{"task_id":"MBSCP\/332","completion":"        \/\/ ...\n    }","language":"scala"}
{"task_id":"MBSCP\/333","completion":"        sub_li.sort(_.second)\n    }","language":"scala"}
{"task_id":"MBSCP\/334","completion":"        val d = a + b > c && a + c > b && b + c > a \/\/ the line you're looking for\n        if (d) {\n            println(\"Valid triangle\")\n        } else {\n            println(\"Triangle is not valid\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/335","completion":"        ((a + n) * d - a) \/ d + n\n    }","language":"scala"}
{"task_id":"MBSCP\/336","completion":"        println(monthname1 + \" \" + 1 + \" \" + 31)\n    }","language":"scala"}
{"task_id":"MBSCP\/337","completion":"        var punct = \"\"\n        val textToMatch = text + punct\n        \/\/ Write your code here\n        ...\n        return result\n    }","language":"scala"}
{"task_id":"MBSCP\/338","completion":"        if (s.length == 0) {\n            return 0\n        } else {\n            val first = s(0)\n            val last = s(s.length - 1)\n            if (first == last) {\n                1 + countSubstringWithEqualEnds(s.substring(1))\n            } else {\n                countSubstringWithEqualEnds(s.substring(1))\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/339","completion":"        max(\n            \/\/ Find the maximum element in the range from the upper bound.\n            max(x, y - 1) \/ y,\n            \/\/ Find the maximum element in the range from the lower bound.\n            max(x, y + 1) \/ y\n        )\n    }","language":"scala"}
{"task_id":"MBSCP\/340","completion":"        var sortedList = lst.sorted\n        var two = sortedList(0, 2)\n        var three = sortedList(2, 4)\n        var sum = two.sum + three.sum\n        println(sum)\n    }","language":"scala"}
{"task_id":"MBSCP\/341","completion":"        s.map { i => (i, i) }\n    }","language":"scala"}
{"task_id":"MBSCP\/342","completion":"        val sorted = list.sortedBy(_._1)\n        val result = sorted.map(_._2.sorted.mkString).collect(_)\n        result.headOption.getOrElse(result.tailOption)\n    }","language":"scala"}
{"task_id":"MBSCP\/343","completion":"        val dig = s.replaceAll(\"[^a-zA-Z0-9]\", \"\").length\n        val let = s.replaceAll(\"[^a-zA-Z]\", \"\").length\n        List(dig, let)\n    }","language":"scala"}
{"task_id":"MBSCP\/344","completion":"        val sqrtM = m ^ (m \/ 2)\n        val sqrtN = n ^ (n \/ 2)\n        if (sqrtM > sqrtN) {\n            val count = sqrtN - sqrtM + 1\n            println(count)\n        } else {\n            val count = sqrtM - sqrtN + 1\n            println(count)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/345","completion":"        \/\/ your code here\n        nums.filter(a => a - a.prev == 1).map(a => a.next - a.prev).takeWhile(_ == 1)\n    }","language":"scala"}
{"task_id":"MBSCP\/346","completion":"        val dp = Array.fill(k, 0)\n        dp[0] = 1\n        for (i \n\nHope this helps,\nBest Regards,\nWesley\n\n\n\n\nHere's a version that takes advantage of the fact that you can stop and start at the ends of the array with a single loop.  It does not look nice to me, but it's a lot more concise.\n\n\ndef findEntrance(n, k):\n    if n < k:\n        return n\n\n    for i in range(1, n):\n        for j in range(i - k, i):\n            if j == 0:\n                dp[i] = dp[j] + dp[j + 1]\n            else:\n                dp[i] = dp[j] + dp[j + 1] - dp[j - 1]\n\n    return dp[-1]\n\n\nprint(findEntrance(10, 1))\n# 20\nprint(findEntrance(10, 2))\n# 30\nprint","language":"scala"}
{"task_id":"MBSCP\/347","completion":"        val result = 0\n        for (i \n\nYou don't need to add  `object Main extends App` to the top of the file, nor you should write  `val result = 0` , but you should be able to run the code above by removing those two statements.\n\n\nThis is correct and the approach is correct. I am just trying to make a method to count the square area of a rectangle and the only problem is the method is in the class file and I don't know how to call it from the main file.\n\nThe question is about Scala, not Java.\n\n@DavidAlfeldon: You can call a method in the same class from `main`, but you can't use it from another class. You need to pass it to a method, which in turn you should call.\n\n@DavidAlfeldon: Also, note that it's `Int`, not `Int32`<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/348","completion":"        val result = 1\n        if (M == 1) result = 1\n        else if (M == 2) result = 2\n        else {\n            val sum = 0\n            for (i \n\nNote: The algorithm could be improved with dynamic programming, but it's not the point here.\n\n\n\n\nI was also thinking the same but in a different way.\nWhat you have done is:\n\nYou have to find all the possible sums for a given length.\nYou have to check for each of those possible sums whether it is a sum of length  `n` or not.\n\nI hope this may help you.\nA simple code example of this could be like this:\n\n\nint countWays(int n) {\n    int sum=0;\n    int ways=0;\n\n    for(int i=1;i<=n\/2;i++) {\n        sum=i;\n        for(int j=1;sum<=n;j++) {\n            if((sum!=n) && (sum+j==n)) {\n                ways++;","language":"scala"}
{"task_id":"MBSCP\/349","completion":"        if(string.length % 8 != 0)\n            \"No\"\n        else\n            \"Yes\"\n    }","language":"scala"}
{"task_id":"MBSCP\/350","completion":"        val chars = s.collect { it.toLowerCase }\n        val map = chars.groupBy(_._).mapValues(_._*)\n        val keys = map.keys\n        val res = keys.map(k => map(k).map(x => x.size + 1))\n        res.reduce(_ + _)\n    }","language":"scala"}
{"task_id":"MBSCP\/351","completion":"        arr match {\n            case n - 1 - i => arr(i)\n            case _ => arr(0)\n        }\n        arr.take(k).head\n    }","language":"scala"}
{"task_id":"MBSCP\/352","completion":"        str.chars\n                .distinct()\n                .count() == str.length\n    }","language":"scala"}
{"task_id":"MBSCP\/353","completion":"        list2 = list1.map(x => x.drop(n))\n        list2.map(x => x.sorted)\n    }","language":"scala"}
{"task_id":"MBSCP\/354","completion":"        val nMinus1 = n - 1\n        return (n - 1) * (a + nMinus1 * d) \/ 2\n    }","language":"scala"}
{"task_id":"MBSCP\/355","completion":"        @tailrec\n        def rectangles(n : Int, r : Int) : Int = {\n            if (n == 0) {\n                return 0;\n            } else {\n                if (r == 0) {\n                    return 1;\n                } else {\n                    return rectangles(n - 1, r - 1) + rectangles(n - 1, r);\n                }\n            }\n        }\n\n        return rectangles(radius, radius);\n    }","language":"scala"}
{"task_id":"MBSCP\/356","completion":"        println(a + b - 180)\n    }","language":"scala"}
{"task_id":"MBSCP\/357","completion":"        val max = test_list.max(_.head)\n        for (i \n\nLet me know if you have any doubt.\n\n\nThank you, this really helps. Also, I found out I had two issues with my code. The first is that, @Rahul Gupta pointed out that the way my code was written, it didn't work because the List was a list of lists, which means that it was trying to compare the List with the Int, which wouldn't work. The second issue was that I was trying to pass the `Test` class as a parameter to `findMax`, which was actually expecting a List (of lists) to work with.\n\n@user14267891 You are right, I have updated the answer, please check it.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/358","completion":"        nums1.zipWithIndex().map(x => x(1) % x(2)).toList\n    }","language":"scala"}
{"task_id":"MBSCP\/359","completion":"        \/\/ your code goes here\n        \/\/ write your scala code here\n        if ((a * a) == (b * b) + c * c) {\n            println(\"Yes\");\n        } else {\n            println(\"No\");\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/360","completion":"        val res = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n        res.take(n - 1).foreach(i => res += i)\n        res\n    }","language":"scala"}
{"task_id":"MBSCP\/361","completion":"        \/\/ Write your solution here\n    }","language":"scala"}
{"task_id":"MBSCP\/362","completion":"        val maxOccurrencesCounter = new MaxOccurrencesCounter()\n        nums.foreach(maxOccurrencesCounter)\n        val maxOccurrencesCount = maxOccurrencesCounter.maxOccurrences()\n        if (maxOccurrencesCount == -1) {\n            println(\"There is no element in the list.\")\n        } else {\n            println(maxOccurrencesCount)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/363","completion":"        val res = test_list.map(list => {\n            val result = list.map(i => i + K)\n            return result\n        })\n        res.toList\n    }","language":"scala"}
{"task_id":"MBSCP\/364","completion":"        val res = str.length - str.replaceAll(\"01\", \"\").length - str.replaceAll(\"10\", \"\").length\n        if (res < 0) {\n            res += str.replaceAll(\"01\", \"\").length\n        }\n        if (res < 0) {\n            res += str.replaceAll(\"10\", \"\").length\n        }\n        res\n    }","language":"scala"}
{"task_id":"MBSCP\/365","completion":"        \/\/ your code goes here\n        1\n    }","language":"scala"}
{"task_id":"MBSCP\/366","completion":"        val start = list_nums(0)\n        val end = list_nums(list_nums.size() - 1)\n        val max = 0\n        for (i \n\nThe Scala program is as follows:\n\n\nobject Main extends App {\n    \/**\n     * You are an expert Scala programmer, and here is your task.\n     * Write a Scala function to find the largest product of the pair of adjacent elements from a given list of integers.\n     * >>> adjacentNumProduct(List(1, 2, 3, 4, 5, 6))\n     * 30\n     * >>> adjacentNumProduct(List(1, 2, 3, 4, 5))\n     * 20\n     * >>> adjacentNumProduct(List(2, 3))\n     * 6\n     *\/\n    def adjacentNumProduct(list_nums : List[Int]) : Int = {\n        val start = list_nums(0)\n        val end = list_nums(list_nums.size()","language":"scala"}
{"task_id":"MBSCP\/368","completion":"        val result = List.empty[List[Int]]()\n        for (i <- 1 to N) {\n            result = result + List(test_tup, test_tup, test_tup)\n        }\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/369","completion":"        \/**\n         * Calculate the lateral surface area\n         * \n         * @see https:\/\/en.wikipedia.org\/wiki\/Lateral_surface_area\n         *\/\n        def surfacearea = l * w * h\n        \/**\n         * Calculate the cuboid surface area\n         * \n         * @see https:\/\/en.wikipedia.org\/wiki\/Cuboid#Surface_area\n         *\/\n        def cuboidarea = 2 * (l * w + w * h + h * l)\n        \/**\n         * Calculate the lateral surface area of the cuboid\n         * \n         * @see https:\/\/en.wikipedia.org\/wiki\/Lateral_surface_area\n         *\/\n        def lateralsurface = 2 * (l * w + w * h + h * l)\n        \/**\n         * Calculate the area of a square\n         * \n         * @see https:\/\/en.wikipedia.org\/wiki\/Square\n","language":"scala"}
{"task_id":"MBSCP\/370","completion":"        val sorted = price.sorted(\n            Comparator.comparing(\n                (val: String) => Float.parseFloat(val.head)\n            )\n        )\n        sorted\n    }","language":"scala"}
{"task_id":"MBSCP\/371","completion":"        val size = right_element - left_element\n        if (size < 1) throw new IllegalArgumentException(right_element + \" is too small\")\n        if (size == 1) return A(0)\n        for (i \n\nNote: The code that I have provided was just the first step to getting the answer for the question. The rest is just for reference.\nIf I run this code, it will throw an exception that says  `IndexOutOfBoundException: 3` and I have no idea why.\n\n\nThanks for the answer. I've already tried it but it still throws the error.\n\n@user3415488 I have edited my answer to include the code that I have used and it works for me. It would be great if you accept and upvote the answer if it helped you.\n\nI have accepted and upvoted the answer. However, I am still having the same issue.\n\n@user3415488 In the code I have provided, you have used `for (i &lt; size)`. The error is because it is trying to access `i` on an index that is not in range","language":"scala"}
{"task_id":"MBSCP\/372","completion":"        val h = Array.fill(nums.length, 0)\n        for (i \n\nNote: I just started Java 7.\n\n\nNice answer, but this is not a very suitable data structure for the question. The requirement is that the heap should be sorted, not that the input is sorted. Also, the OP specifically says he\/she needs the heap sorted.\n\n@KelvinMcGuire You are right. I will clarify that this is not a solution to the problem, but rather a hint for the OP.\n\n\n\nI'm not sure if it's the best solution, but I wrote a quick hack to solve it. I'm sure there is a more elegant way, but it works. I'm posting it here if anyone comes up with a better solution.\n\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Solution {\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<integer> input","language":"scala"}
{"task_id":"MBSCP\/373","completion":"        l * w * h\n    }","language":"scala"}
{"task_id":"MBSCP\/374","completion":"        val result = new List[String]\n        val used = new HashSet[String]\n        permuteStringRec(str, result, used)\n        result.reverse\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/375","completion":"        n % m == 0 ? n : n + m - n % m\n    }","language":"scala"}
{"task_id":"MBSCP\/376","completion":"        val seen = Map(test_tup.asScala.map(_.id))\n        test_tup.foreach(_.id => {\n            if(!seen(id))\n                _.replaceWith(\"MSP\")\n        })\n    }","language":"scala"}
{"task_id":"MBSCP\/377","completion":"        val s1 = s.replace(c, \"\")\n        s1\n    }","language":"scala"}
{"task_id":"MBSCP\/378","completion":"        \/\/ write your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/379","completion":"        l * w * h\n    }","language":"scala"}
{"task_id":"MBSCP\/380","completion":"        var row : List[Int] = new List[colnum]\n        for (var c = 0; c < colnum; c++)\n            row = row.append(c)\n        for (var r = 0; r < rownum; r++)\n            if (r > 0) row = row.append(row.head)\n        println(row)\n    }","language":"scala"}
{"task_id":"MBSCP\/381","completion":"        val sorted_data = list_data.sorted( {\n            (first_list, second_list) => {\n                val first_list_data = first_list.get(index_no)\n                val second_list_data = second_list.get(index_no)\n                if (first_list_data > second_list_data)\n                    return 1\n                if (first_list_data < second_list_data)\n                    return -1\n                return 0\n            }\n        })\n        sorted_data\n    }","language":"scala"}
{"task_id":"MBSCP\/382","completion":"        val start = 0\n        var mid = A.length \/ 2\n        var end = A.length - 1\n        var diff = 0\n\n        while (diff < mid) {\n            var next = start\n            var prev = end\n            while (next < end) {\n                var temp = A[next]\n                A[next] = A[prev]\n                A[prev] = temp\n                next += 1\n                prev -= 1\n            }\n\n            diff = end - start + 1\n            start = mid\n            mid = (end + start) \/ 2\n            end = A.length - 1\n        }\n\n        if (A[mid] < A[start]) {\n            diff = end - start + 1\n        }\n        else if (A[mid] < A[end]) {\n            diff = end - start\n        }\n        else {\n            diff = 0","language":"scala"}
{"task_id":"MBSCP\/383","completion":"        n.bitwiseOr(0x55555555)\n    }","language":"scala"}
{"task_id":"MBSCP\/384","completion":"        val freqs = Map[Int, Int]()\n        for (i <- 0 until arr.length) {\n            freqs.put(arr[i], freqs.getOrElse(arr[i], 0) + 1)\n        }\n        val sorted = freqs.mapValues(_.sorted).collect()\n        println(sorted.filter(k => k [0] == (n - 1)).head())\n        sorted.filter(k => k [0] == (n - 1)).head()[1]\n    }","language":"scala"}
{"task_id":"MBSCP\/385","completion":"        if(n == 0)\n            return 0\n        else if(n == 1)\n            return 1\n        else\n            return getPerrin(n-1) + getPerrin(n-2) + getPerrin(n-3)\n    }","language":"scala"}
{"task_id":"MBSCP\/386","completion":"        \/\/ using a stack to track swaps\n        val stack : Stack[Int] = new Stack[Int]()\n        \/\/ iterating the string and pushing the indices of all '[' in the string\n        \/\/ to the stack\n        val p = s.iterator.toInteger\n        while (p.isNotEmpty) {\n            if (p(0) == '[') {\n                stack += p(0), p(1)\n            } else {\n                if (!stack.isEmpty) stack -= p(0), p(1)\n            }\n            p.next()\n        }\n        \/\/ we are done, so we need to return the minimum no. of swaps required to balance the brackets\n        \/\/ and if we cannot balance the brackets, then return -1\n        return (stack.size - 1) if (stack.size > 0) else -1\n    }","language":"scala"}
{"task_id":"MBSCP\/387","completion":"        val s = N.replaceAll(\"[^A-F0-9]\", \"\")\n        (s.length % 2 == 0 ? \"Even\" : \"Odd\")\n    }","language":"scala"}
{"task_id":"MBSCP\/388","completion":"        for (i \n\nAnd another method that doesn't use streams:\n\n\nimport scala.jdk.CollectionConverters._\n\nobject Main extends App {\n    \/**\n     * You are an expert Scala programmer, and here is your task.\n     * Write a Scala function to find the maximum product of 3 numbers.\n     * >>> highestProductOf3(10, 20, 30)\n     * 60\n     * >>> highestProductOf3(1, 2, 3)\n     * 6\n     * >>> highestProductOf3(-1, 2, 3)\n     * 9\n     *\/\n    def highestProductOf3(a : Int, b : Int, c : Int) : Int = {\n        def maxProduct(x : Int, y : Int) : Int = {\n            if (x > 0 and y > 0) {\n                val max = maxProduct(x - 1, y) * x\n                val min = maxProduct(x,","language":"scala"}
{"task_id":"MBSCP\/389","completion":"        (n * n) + (n + 1)\n    }","language":"scala"}
{"task_id":"MBSCP\/390","completion":"        \/\/ Your code here.\n    }","language":"scala"}
{"task_id":"MBSCP\/391","completion":"        val map = new List[Map[String, Map[String, Int]]]()\n        for (i \n\nPrints\n\n\nList(Map(\"S001\"->Map(\"Adina Park\"->85)), Map(\"S002\"->Map(\"Leyton Marsh\"->98)), Map(\"S003\"->Map(\"Duncan Boyle\"->89)), Map(\"S004\"->Map(\"Saim Richards\"->92)))\nList(Map(\"abc\"->Map(\"python\"->100)), Map(\"def\"->Map(\"program\"->200)), Map(\"ghi\"->Map(\"language\"->300)), Map(\"jkl\"->Map(\"programs\"->400)))\nList(Map(\"A1\"->Map(\"java\"->10)), Map(\"A2\"->Map(\"C\"->20)), Map(\"A3\"->Map(\"C++\"->30)), Map(\"A4\"->Map(\"DBMS\"->40)))\n\n\n\n\n\n\nI am not a Scala guy so I'm not 100% sure this code is correct but it is something I came up with. I think I understand what you want but it will be a little difficult to say if","language":"scala"}
{"task_id":"MBSCP\/392","completion":"        val x = (f(n\/2) + f(n\/3) + f(n\/4) + f(n\/5))\n        val y = n\n        val ans = max(x, y)\n        println(ans)\n    }","language":"scala"}
{"task_id":"MBSCP\/393","completion":"        var max_length_list =  List()\n        for(var i <- input_list.size ; i > 0; i--) {\n            var sub_list =  input_list.get(i)\n            var length = sub_list.size\n            if(length > max_length_list.size) {\n                max_length_list = sub_list\n            }\n        }\n        return max_length_list\n    }","language":"scala"}
{"task_id":"MBSCP\/394","completion":"        val map = test_tup.map(_.toSeq).toMap\n        val set = map.keySet.toSet\n        val size = set.size\n\n        if (size != 1)\n            true\n        else\n            false\n    }","language":"scala"}
{"task_id":"MBSCP\/395","completion":"        val hashset : HashSet[Char] = new HashSet[Char]\n        val size : Int = str1.length\n        for (i \n\nI think this is what you are looking for.  This solution is based on a string of length n.  We are setting a hashset of length n.  We are looking to see if the string contains a character that has already been used by a character.  If so, we need to set it to null.  If not, then we know it is not the first non-repeating character.  We then return the character.\nYou can read about hashset here: https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/util\/HashSet.html\n\n\n\n\nA better one-liner to do it, using a  `stream` and  `reduce` :\n\n\nString.join(\"\", Arrays.stream(string.split(\"\"))\n                   .filter(s -> !Collections.frequency(Arrays.stream(string.split(\"\")), s) == 1)\n                   .reduce((s1, s2) -> s1.length()","language":"scala"}
{"task_id":"MBSCP\/396","completion":"        \/\/ Write your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/397","completion":"        if (a == b && b == c) {\n            println(a)\n            return a\n        }\n        if (a > b && a > c) {\n            println(a)\n            println(b)\n            println(c)\n            println(a + b + c \/ 3.0)\n            return a + b + c \/ 3.0\n        }\n        if (b > a && b > c) {\n            println(b)\n            println(a)\n            println(c)\n            println(b + c \/ 3.0)\n            return b + c \/ 3.0\n        }\n        if (c > a && c > b) {\n            println(c)\n            println(a)\n            println(b)\n            println(c \/ 3.0)\n            return c \/ 3.0\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/398","completion":"        \/\/ YOUR CODE HERE\n    }","language":"scala"}
{"task_id":"MBSCP\/399","completion":"        val result = (1 to test_tup1.length) * test_tup1.length\n        val result_tup = List(result)\n        \/\/ TODO: write your code here\n        for (i \n\nFor example, the solution works correctly:\n\n\n> (x: List(1, 2, 3, 4)) (y: List(5, 6, 7, 8))\nx = List(1, 2, 3, 4)\ny = List(5, 6, 7, 8)\n> (x: List(1, 2, 3, 4)) (y: List(5, 6, 7, 8)) | (x: List(10, 11, 12, 13)) (y: List(15, 16, 17, 18))\nx = List(1, 2, 3, 4)\ny = List(5, 6, 7, 8)\n| (x: List(10, 11, 12,","language":"scala"}
{"task_id":"MBSCP\/400","completion":"        val freq = new HashMap[Int, Int]()\n        val (maxIndex, maxValue) = test_list.maxBy(_.size)\n        \/\/ for (maxIndex i = 0; i < test_list.size; i++)\n        for (maxIndex i = 0; i < maxIndex; i++)\n        {\n            val curr_list = test_list(i)\n            for (curr_list.size i = 0; i < curr_list.size; i++)\n            {\n                val curr = curr_list(i)\n                freq.merge(curr, 1, (a, b) => a + b)\n            }\n        }\n        freq.size\n    }","language":"scala"}
{"task_id":"MBSCP\/401","completion":"        val result = List(List(0, 0), List(0, 0), List(0, 0), List(0, 0))\n        val tuple1 = (0 to test_tup1.length)\n        val tuple2 = (0 to test_tup2.length)\n        while (tuple1 != 0 || tuple2 != 0) {\n            if (tuple1 > 0 && tuple2 > 0) {\n                result += List(test_tup1(0)(0) + test_tup2(0)(0), test_tup1(0)(1) + test_tup2(0)(1), test_tup1(0)(2) + test_tup2(0)(2), test_tup1(0)(3) + test_tup2(0)(3))\n            } else if (tuple1 > 0 && tuple2 == 0) {\n                result += List(test_tup1(0)(0) + test_tup2(0)(0), test_","language":"scala"}
{"task_id":"MBSCP\/402","completion":"        n - r * p\n    }","language":"scala"}
{"task_id":"MBSCP\/403","completion":"        \/\/ regex taken from\n        \/\/ http:\/\/stackoverflow.com\/questions\/161738\/what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url\n        url.matches(\"^https?:\\\\\/\\\\\/(?:www\\\\.)?(([0-9a-z-]+\\\\.)+[a-z]{2,})|(localhost)(\\\\:\\\\d+)?(\\\\\/.*)+\")\n    }","language":"scala"}
{"task_id":"MBSCP\/404","completion":"        if (a < b) {\n            a\n        } else {\n            b\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/405","completion":"        \/\/check if the element exists in the tuplex\n        \/\/if it exists, return true, else return false\n    }","language":"scala"}
{"task_id":"MBSCP\/406","completion":"        \/\/ if the number is even:\n        if (x % 2 == 0) {\n            \/\/ return \"Even Parity\"\n            \"Even Parity\"\n        \/\/ if the number is odd:\n        } else {\n            \/\/ return \"Odd Parity\"\n            \"Odd Parity\"\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/407","completion":"        if (n == 0)\n            return 0\n        n = n.toString()\n        n1 = n.substring(0, n.length \/ 2)\n        n2 = n.substring(n.length \/ 2)\n\n        def rearrangeInt(n1 : String, n2 : String) : Int = {\n            def m1 = n1.length\n            def m2 = n2.length\n            if (m1 != m2)\n                return -1\n            if (n1 == n2)\n                return n1.toInt\n\n            def result = \"\"\n            for (i <- 0 until n1.length) {\n                result += n1.substring(i, i + 1) + n2.substring(i, i + 1)\n            }\n            return Integer.parseInt(result)\n        }\n        val rearranged = rearrangeInt(n1, n2)\n\n        if (rearranged == -1)","language":"scala"}
{"task_id":"MBSCP\/408","completion":"        val pairs = mutable.ListBuffer[Pair]()\n        \/\/ Iterate through the first array\n        nums1.foreach(e => {\n            \/\/ Iterate through the second array and find pairs\n            nums2.foreach(ee => pairs.add(new Pair(e, ee)))\n        })\n        \/\/ Sort the pairs\n        pairs.sort.by(_._1, _._2)\n        \/\/ Make sure we're getting the correct amount\n        val correct = pairs.size() == k\n        \/\/ If we got the correct amount, we have to return the pairs\n        if (correct) {\n            pairs.foreach(_.print())\n        }\n        \/\/ Otherwise we have to return something\n        else {\n            pairs.foreach(_.print())\n            \"Sorry, but that wasn't the right answer. Please try again.\"\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/409","completion":"        val list2 = list1.map(_.map(_.product)).toList\n        val list3 = list2.map(_.min).toList\n        list3.min\n    }","language":"scala"}
{"task_id":"MBSCP\/410","completion":"        val list = listval.asScala.toList.asJava\n        val min = list.headOption\n        if (min.isEmpty) throw new RuntimeException(\"Empty list\")\n        val elem = min.get\n        val listLen = list.size\n        if (elem < listLen) return elem\n        else return listLen\n    }","language":"scala"}
{"task_id":"MBSCP\/411","completion":"        val regex = \"(\\\\w)([A-Z])\"\n        val matcher = Regex.find(regex, word)\n        val cap = matcher(2)\n        word = matcher(1).replaceAll($1 + $2.toLowerCase)\n        word += cap(1).toUpperCase\n        println(word)\n    }","language":"scala"}
{"task_id":"MBSCP\/412","completion":"        l match {\n            case n :: n >= 0 && n % 2 == 1 => l :: _\n            case _ :: l\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/413","completion":"        list1.map(_.head)\n                    .map(_.tail)\n                    .map(_.head)\n                    .take(n)\n                    .map(_.tail)\n    }","language":"scala"}
{"task_id":"MBSCP\/414","completion":"        val result = (0 until list2.length).map(i => \n            ((list1.head >= list2(i) and list1(list1.length - 1) <= list2(i)) ||\n            (list1.head <= list2(i) and list1(0) >= list2(i)))\n        ).reduce(_ + _) == list2.length\n\n        println(\"List1 is overlapping with List2 : \" + result)\n    }","language":"scala"}
{"task_id":"MBSCP\/415","completion":"        arr.map(_.mul).reduce(_.max, _.min)\n    }","language":"scala"}
{"task_id":"MBSCP\/416","completion":"        n > 0 ?\n            n + breaksum(n \/ 3) + breaksum(n \/ 2) + breaksum(n - 1)\n        :\n            0\n    }","language":"scala"}
{"task_id":"MBSCP\/417","completion":"        \/\/ your code here\n        val result = mutable.Map[String, mutable.Set[String]]()\n\n        Input.map(_.map(String.toLowerCase)).foreach(_.foreach(result.update(_.lowercase(_), mutable.Set.empty)))\n        Input.map(_.lowercase).foreach(_.foreach(result.update(_.lowercase(_), mutable.Set.empty)))\n\n        Input.map(_.lowercase).foreach(_.foreach(result.get(_.lowercase(_).sorted.head.toSeq).foreach(_.foreach(_))))\n\n        Input.map(_.lowercase).foreach(_.foreach(result.get(_.lowercase(_).sorted.head.toSeq).foreach(_.foreach(_))))\n\n        Input.map(_.lowercase).foreach(_.foreach(result.get(_.lowercase(_).sorted.head.toSeq).foreach(_.foreach(_))))\n\n        Input.map(_.lowercase).foreach(_.foreach(result.get(_.lowercase(_).sorted.head.toSeq).foreach(_.foreach(_))))\n\n        Input.map(_.lowercase).foreach(_.foreach(result.get(_.lowercase(_).sorted.head.toSeq).foreach(_.foreach(_))))\n\n        Input.map(_.lowercase).foreach(_.foreach(result.get(_.lowercase","language":"scala"}
{"task_id":"MBSCP\/418","completion":"        \/\/ Your code goes here\n        \/\/ Use the + operator to concatenate lists\n        val subList = lst.subList(0, lst.size)\n        val max = (lst.size - subList.size).max()\n        return subList.take(max)\n    }","language":"scala"}
{"task_id":"MBSCP\/419","completion":"        val sum = 0.0\n        val length = 0\n        list1.foreach {\n            sum += it\n            length += 1\n        }\n        sum = sum.round()\n        sum.times(length)\n    }","language":"scala"}
{"task_id":"MBSCP\/420","completion":"        \/\/ TODO\n    }","language":"scala"}
{"task_id":"MBSCP\/421","completion":"      val result = \"\"\n      val sep = \"-\"\n      val i = 1\n      test_tup.foreach(t => result += t + sep + i)\n      result.substring(0, result.length - 1)\n    }","language":"scala"}
{"task_id":"MBSCP\/422","completion":"        val res = n * n * n\n        val avg = res \/ 3\n        println(\"Average is $avg\")\n    }","language":"scala"}
{"task_id":"MBSCP\/423","completion":"        def maxgold(m, n) {\n            s = 0\n            if (n == 0)\n                return 0\n            else if (n == 1) {\n                gold(m).foreach(x => s += x)\n                return s\n            }\n            else {\n                res = 0\n                for (i \n                \n                \n                )\n                    res = max(res, maxgold(m, n - 1) + gold(m).head + gold(m).tail)\n                return res\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/424","completion":"        var rear = \n    }","language":"scala"}
{"task_id":"MBSCP\/425","completion":"        val count = 0\n        for (l \n\nI think this should work. I'm not sure how to use Scala's magic, but I'm willing to learn. :-)\nA possible (more \"hacky\") solution is to use  `Array` s with  `List` s, but that's probably more verbose and error-prone.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/426","completion":"        nums.filter(_.mod(_ % 2 == 0))\n    }","language":"scala"}
{"task_id":"MBSCP\/427","completion":"        val pattern = \"([12]\\\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\\\d|3[01]))\"\n        val result = dt.replaceAll(pattern, \"$1-$2-$3\")\n        println(result)\n    }","language":"scala"}
{"task_id":"MBSCP\/428","completion":"        val h = 1\n        val n = my_list.size\n        val gap = n \/ h\n        val i = 0\n        while (h < n) {\n            for (gap % h == 0 && gap >= h && gap < n; gap = gap * 3 + 1) {\n                h = gap\n                i = i + h\n            }\n            if (i < n) {\n                val j = i\n                while (j - h >= 0 && my_list(j - h) > my_list(j)) {\n                    my_list = swap(my_list, j - h, j)\n                    j = j - h\n                }\n            }\n            h = h * 3 + 1\n        }\n        return my_list\n    }","language":"scala"}
{"task_id":"MBSCP\/429","completion":"        val result = new List[Int]()\n        for (i \n\nThis will create a new list where the numbers of the first tuple are added to the first position of the list. So for the first tuple  `[10, 4, 6, 9]` , the first element of the new list will be  `0` . \n\n\n    [0, 0, 2, 1]\n\n\nThen the second tuple,  `[5, 2, 3, 3]` , will be added to the second element of the new list. For the second tuple,  `[5, 6, 7, 8]` , the second element of the new list will be  `2` .\nYou can also write the function in Java as follow:\n\n\npublic static List<integer> andTuples(List<integer> test_tup1, List<integer> test_tup2) {\n        List<integer> result = new ArrayList&lt;>();\n        for (Integer i : test_tup1) result.add(0);\n        for (Integer i : test","language":"scala"}
{"task_id":"MBSCP\/430","completion":"        let d = b*b - 4*a*c\n        if (d < 0)\n            return 0\n        if (d == 0)\n            return -b\/(2*a)\n        if (d > 0)\n            return (-b + sqrt(d))\/(2*a)\n    }","language":"scala"}
{"task_id":"MBSCP\/431","completion":"        val hashMap = new HashMap[Any, Integer]()\n        for (i \n\nHere is a version with Scala 2.11.7.  It also uses streams and lambdas.  The Scala code is very similar to the Python version.\n\n\nobject Main extends App {\n    \/**\n     * You are an expert Scala programmer, and here is your task.\n     * Write a function that takes two lists and returns true if they have at least one common element.\n     * >>> commonElement(List(1, 2, 3, 4, 5), List(5, 6, 7, 8, 9))\n     * true\n     * >>> commonElement(List(1, 2, 3, 4, 5), List(6, 7, 8, 9))\n     * \"none\"\n     * >>> commonElement(List(\"a\", \"b\", \"c\"), List(\"d\", \"b\", \"e\"))\n     * true\n     *\/\n    def commonElement(list1 : List[Any],","language":"scala"}
{"task_id":"MBSCP\/432","completion":"        base1 + base2 + height \/ 2 : Double\n    }","language":"scala"}
{"task_id":"MBSCP\/433","completion":"        for (x \n\nIn this case, the output is  `Yes, the entered number is greater than those in the array` .<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/434","completion":"        val pattern = \"a\" ++ \"b\" ++ \"b\" ++ \"b\"\n        if (text.matches(pattern))\n            println(\"Found a match!\")\n        else\n            println(\"Not matched!\")\n    }","language":"scala"}
{"task_id":"MBSCP\/435","completion":"        n \/ 10 | n % 10\n    }","language":"scala"}
{"task_id":"MBSCP\/436","completion":"        list1.filter(_.negative)\n    }","language":"scala"}
{"task_id":"MBSCP\/437","completion":"        str1.replaceAll(\"([^a-zA-Z0-9])\\\\1+\", \"$1\")\n    }","language":"scala"}
{"task_id":"MBSCP\/438","completion":"        val reverseList = test_list.map(_.reverse)\n        val reverseList_size = reverseList.size\n        val size = test_list.size\n        val pairCount = reverseList.zip(test_list).foldLeft(0).apply { acc, (x, y) => acc + x + y.size }\n        val result = pairCount + size - reverseList_size\n        println(result)\n    }","language":"scala"}
{"task_id":"MBSCP\/439","completion":"        def value: Int = 0\n        for (i <- L) {\n            if (i < 0) {\n                value = value + (i * -1)\n            } else {\n                value = value + i\n            }\n        }\n        println(value)\n    }","language":"scala"}
{"task_id":"MBSCP\/440","completion":"        val tokens = text.split(\" \")\n        val result = tokens.filter(_.endsWith(\"!\"))\n        result.map(_.toUpper)\n            .zipWithIndex().map(case (x, index) => (index, x))\n            .filter(x => x._2.startsWith(\"A\"))\n            .map(x => (x._1.toUpper, x._2 - 1))\n            .toList\n    }","language":"scala"}
{"task_id":"MBSCP\/441","completion":"        if (l < 0) throw new IllegalArgumentException(\"surfaceareaCube.l should be positive\")\n        if (l == 0) return 0\n        if (l == 1) return 6\n        return 6 * (l * l)\n    }","language":"scala"}
{"task_id":"MBSCP\/442","completion":"        nums.filter(_.gt(0)).count() \/ nums.count()\n    }","language":"scala"}
{"task_id":"MBSCP\/443","completion":"        val biggest = 0\n        list1.foreach(x => x < 0 && x > biggest ? biggest = x : null)\n        return biggest\n    }","language":"scala"}
{"task_id":"MBSCP\/444","completion":"        val res = List()\n        test_list.foreach {\n            val sub_res = List()\n            test_list.foreach {\n                sub_res += test_list(0)\n                sub_res += test_list(1)\n                sub_res += test_list(2)\n                sub_res += test_list(3)\n            }\n            sub_res.filter(_.size > K)\n            if (sub_res.size > 0)\n                res += sub_res\n        }\n        res.foreach(_.join(\", \"))\n    }","language":"scala"}
{"task_id":"MBSCP\/445","completion":"        \/\/TODO: complete this method\n    }","language":"scala"}
{"task_id":"MBSCP\/446","completion":"        val result = 0\n        val counts = mutable.Map.empty[Int, Int]()\n\n        for (i \n\nThe output will be :\n\n\n3\n6\n2<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/447","completion":"        nums.map(_.toInt).map(x => x * x * x)\n    }","language":"scala"}
{"task_id":"MBSCP\/448","completion":"        1 to n\n            .map(x => x + 1)\n            .foldLeft(0)\n            .map(x => x * x)\n    }","language":"scala"}
{"task_id":"MBSCP\/449","completion":"        val left = 1 - (x2 * x2 + y2 * y2) \/ (x1 * x1 + y1 * y1)\n        val right = 1 - (x3 * x3 + y3 * y3) \/ (x2 * x2 + y2 * y2)\n        if (left < right) {\n            println(\"Yes\")\n        } else {\n            println(\"No\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/450","completion":"        \/**\n         * Your solution should be more or less the same as the previous solution.\n         * Just replace the map section with this one:\n         * $x$\n         *\/\n    }","language":"scala"}
{"task_id":"MBSCP\/451","completion":"        val regex = \"(?<=\\\\s)\\\\S\"\n        text1.replaceAll(regex, \"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/452","completion":"        if (sale_amount < actual_cost) {\n            def loss = sale_amount - actual_cost\n            println(\"loss $loss\")\n        } else {\n            def loss = 0\n            println(\"none\")\n        }\n        loss\n    }","language":"scala"}
{"task_id":"MBSCP\/453","completion":"        \/\/ your code goes here.\n    }","language":"scala"}
{"task_id":"MBSCP\/454","completion":"        val matcher = Regex.start(\"z\").end.toRegex\n        text match matcher\n    }","language":"scala"}
{"task_id":"MBSCP\/455","completion":"        val result = (monthnum2 % 2) == 1;\n        println(result)\n        println(monthnum2 + \" is \" + (result ? \"odd\" : \"even\"))\n        return result;\n    }","language":"scala"}
{"task_id":"MBSCP\/456","completion":"        stringlist.reverse\n    }","language":"scala"}
{"task_id":"MBSCP\/457","completion":"        val min = lst.headOption\n        for (i \n\nNow it is very easy to see the result:\n\n\nscala> findMin(List(List(1), List(1, 2), List(1, 2, 3)))\nres0: List[Any] = List(1)\n\nscala> findMin(List(List(1, 1), List(1, 1, 1), List(1, 2, 7, 8)))\nres1: List[Any] = List(1, 1)\n\nscala> findMin(List(List(\"x\"), List(\"x\", \"y\"), List(\"x\", \"y\", \"z\")))\nres2: List[Any] = List(\"x\")\n\n\n\n\nThis is exactly what I needed! Thank you so much!<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/458","completion":"        return l * b\n    }","language":"scala"}
{"task_id":"MBSCP\/459","completion":"        val str = str1.replaceAll(\"(?<=[A-Z])(?=[A-Z][a-z])|(?<=[a-z])(?=[A-Z][a-z])\",\"\")\n        println(str)\n    }","language":"scala"}
{"task_id":"MBSCP\/460","completion":"        val result = new ArrayList[Int]\n        for (x \n\nThe output will be (as you asked for)\n\n\n1\n3\n6\n\n\n\n\nThank you for the help!\n\n@tedder42 You're welcome! Don't forget to accept the answer if you think it solved your problem.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/461","completion":"        val upper = str.toUpperCase.toCharArray\n        val count = str.length\n        \/\/ TODO: Complete this\n    }","language":"scala"}
{"task_id":"MBSCP\/462","completion":"        val result = List[List[Any]]()\n        for (i \n\nI have found a way to find the combinations but you have to change the code to print out the result.\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n\n    \/**\n     * @param args\n     *\/\n    public static void main(String[] args) {\n        \/\/ TODO Auto-generated method stub\n        System.out.println(combinationsList(List(\"orange\", \"red\", \"green\", \"blue\")));\n    }\n\n    public static List<list>> combinationsList(List<string> list) {\n        List<list>> result = new ArrayList<list>>();\n        if (list.size() == 0)\n            return result;\n        result.add(new ArrayList<string>());\n        for (int i = 0; i &lt; list.size(); i++) {\n            for (List<string> subList : combinationsList(list.subList(i + 1, list.size()))) {","language":"scala"}
{"task_id":"MBSCP\/463","completion":"        val max = max[arr].product\n\n        \/\/ We are going to find the max product subarray of the array\n        val min = { arr.map(_.negative * arr)(_.product).max }\n\n        arr.foreach(a => {\n            val product = min[a].negative * max[a].positive + a.positive\n            if (product > max.product) {\n                max.product = product\n            }\n            min[a] = product\n        })\n    }","language":"scala"}
{"task_id":"MBSCP\/464","completion":"      def values = dict.values\n      values.toSeq.foldLeft(false)(_ + _)\n    }","language":"scala"}
{"task_id":"MBSCP\/465","completion":"        val dict2 = new HashMap[String, Any]()\n        dict1.foreach {\n            if (it.isDefined && it.get() != null && it.get().isDefined && it.get().get() != null) {\n                dict2[it.key] = it.get()\n            }\n        }\n        return dict2\n    }","language":"scala"}
{"task_id":"MBSCP\/466","completion":"        val peak = 0\n        val left = 1\n        val right = n - 2\n\n        while (right >= left) {\n            val mid = left + ((right - left) \/ 2)\n            if (arr(mid) > arr(mid - 1)) {\n                peak = mid\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n        }\n        println(peak)\n    }","language":"scala"}
{"task_id":"MBSCP\/467","completion":"        deciNum.toString.s\n    }","language":"scala"}
{"task_id":"MBSCP\/468","completion":"        val dp = Array(n)\n        val arrLen = arr.length\n        \/**\n         * 1. Initialize the first column of dp\n         * 2. Initialize the first row of dp\n         * 3. Go through every row from second row onwards\n         * 4. For each row, go through every column from first column onwards\n         * 5. If the current row and column sum are greater than the previous\n         *    row and column sum, then take the current row sum and column sum\n         * 6. Increment the dp[i][j] by the product of current row and column\n         * 7. If the current column is greater than the previous column,\n         *    then store the current column in dp[i][j]\n         * 8. Return the maximum value in dp[i][0]\n         *\/\n        for (i <- 0 until n) {\n            dp[i] = Array(arrLen)\n            dp[i][0] = arr[i]\n            for (j <- 1 until","language":"scala"}
{"task_id":"MBSCP\/469","completion":"        val result = maxProfitCore(price, k)\n        println(result)\n    }","language":"scala"}
{"task_id":"MBSCP\/470","completion":"        val result = List()\n        var i = 0\n        while(i < test_tup.size-1) {\n            result.add(test_tup(i+1) + test_tup(i))\n            i = i+2\n        }\n        return result\n    }","language":"scala"}
{"task_id":"MBSCP\/471","completion":"        \/\/ Your code here!\n    }","language":"scala"}
{"task_id":"MBSCP\/472","completion":"        l.tail.foldLeft(false)(x => x + 1).foldLeft(true)(x => x + 1) == l.length\n    }","language":"scala"}
{"task_id":"MBSCP\/473","completion":"        val result = test_list1.asInstanceOf[List[List[Int]]]\n        result.intersect(test_list2.asInstanceOf[List[List[Int]]])\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/474","completion":"        str1.replaceAll(ch, newch)\n    }","language":"scala"}
{"task_id":"MBSCP\/475","completion":"        val sortedValues = dict1.valueSeq.sorted\n        val result = sortedValues.collect { case (key, value) => List(List(key, value)) }\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/476","completion":"        \/\/ TODO: Implement the code.\n        println(nums.size())\n        println(nums.min())\n        println(nums.max())\n        println(nums.sum())\n    }","language":"scala"}
{"task_id":"MBSCP\/477","completion":"        string.toLowerCase\n    }","language":"scala"}
{"task_id":"MBSCP\/478","completion":"        val n = str1.length\n        str1.replaceAll(str1[i], \"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/479","completion":"        n % 10\n    }","language":"scala"}
{"task_id":"MBSCP\/480","completion":"        val charList = str1.toCharArray\n        val map = new hashmap[Character, Int]()\n        val max = 0\n        for (i \n\n\n\nthanks a lot! I just learned a lot about scala and scala.util.matching.Regex. Now i just need to figure out how to convert that scala regex to java.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/481","completion":"        if (sum == 0) {\n            println(\"Yes\")\n            println(\"set\")\n        } else if (n == 0) {\n            println(\"No\")\n            println(\"set\")\n        } else {\n            \/\/ 1) set is empty => 0 == 0\n            println(set.isEmpty)\n            println(set.isEmpty)\n            \/\/ 2) set has one element => sum < 0 ? false : set.head == sum\n            println(sum < 0)\n            println(sum < 0)\n            println(set.head == sum)\n            println(set.head == sum)\n            println(sum < 0)\n            println(sum < 0)\n            println(set.head == sum)\n            println(set.head == sum)\n            println(sum < 0)\n            println(sum < 0)\n            println(set.head == sum)\n            println(set.head == sum)\n            println(sum < ","language":"scala"}
{"task_id":"MBSCP\/482","completion":"        val pattern = \"(?<=\\\\p{Lu})(?=\\\\p{Ll})\"\n        if(text.matches(pattern)) {\n            \/\/ code to print \"Yes\"\n        } else {\n            \/\/ code to print \"No\"\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/483","completion":"        println(1)\n        for (i <- Int.MaxValue; i >= 2; i--) {\n            if (i.factorial.divisibleBy(x)) {\n                println(i)\n                break\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/484","completion":"        val answer = new ArrayList[List[String]]()\n        test_list1.foreach(x => answer.add(x.filter(i => test_list2.exists(i))))\n        answer\n    }","language":"scala"}
{"task_id":"MBSCP\/485","completion":"        var max = 0\n        for (i \n\nI got the solution from here. Thanks.\n\n\nI don't see anything wrong with the solution in that link. It might be a typo (it should be `println`), but I couldn't get it working in the question.\n\n\n\nUsing Java 8 Stream API, you can achieve this:\n\n\npublic static void main(String[] args) {\n        List<integer> a = Arrays.asList(1, 232, 54545, 999991);\n        Integer largestPalindrome = a.stream()\n                .map(Integer::toString)\n                .sorted((s1, s2) -> {\n                    int l = Math.min(s1.length(), s2.length());\n                    for (int i = 0; i &lt; l; i++) {\n                        if (s1.charAt(i) == s2.charAt(i)) continue;\n                        return s1.charAt(i) - s2.charAt(i);\n                    }\n                   ","language":"scala"}
{"task_id":"MBSCP\/486","completion":"        if (k < 0) {\n            return 0.0\n        }\n        if (n < k) {\n            return 0.0\n        }\n        return (p ** k) * ((1 - p) ** (n - k))\n    }","language":"scala"}
{"task_id":"MBSCP\/487","completion":"        tup.sortBy(t => t(t.size - 1))\n    }","language":"scala"}
{"task_id":"MBSCP\/488","completion":"        return (3 * a * a) \/ 2\n    }","language":"scala"}
{"task_id":"MBSCP\/489","completion":"        val l : List[Int] = arr.toSeq.map(it => it.toInt)\n        val max = l.reduce((a, b) => (a > b ? a : b)).toInt\n        val freq : Int = l.toSeq.map(it => (it == max ? 1 : 0)).sum\n        println(freq)\n    }","language":"scala"}
{"task_id":"MBSCP\/490","completion":"        val sym_list = test_list.map(_.reverse.zip(_))\n        sym_list.distinct.filter(_.size == test_list.size).map(_.toList).toSet\n    }","language":"scala"}
{"task_id":"MBSCP\/491","completion":"        (a * (r ** n)) \/ (r - 1)\n    }","language":"scala"}
{"task_id":"MBSCP\/492","completion":"        val start = 0\n        val end = item_list.size - 1\n        val mid = (start + end) \/ 2\n\n        if (start > end) {\n            return false\n        }\n\n        if (item == item_list(mid)) {\n            return true\n        }\n\n        if (item < item_list(mid)) {\n            return binarySearch(item_list(start, mid - 1), item)\n        }\n\n        if (item > item_list(mid)) {\n            return binarySearch(item_list(mid + 1), item)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/493","completion":"        val polygon = List[List[Double]]()\n        for (\n            val dx = startx < endx ? startx : endx\n            val dy = starty < endy ? starty : endy\n            val nx = startx < endx ? endx : startx\n            val ny = starty < endy ? endy : starty\n            val px = (dx + nx) \/ 2.0\n            val py = (dy + ny) \/ 2.0\n            val d = dx * dx + dy * dy\n            val nx = nx + (d - radius * radius) \/ (d + radius * radius)\n            val ny = ny + (d - radius * radius) \/ (d + radius * radius)\n            val nx = nx - dx\n            val ny = ny - dy\n            if (dx == nx && dy == ny) {\n                polygon\n               ","language":"scala"}
{"task_id":"MBSCP\/494","completion":"      val s = test_tup.toSeq\n      var num = 0\n      for(i \n\nThis will also work with  `Map` , but the conversion will be done on the fly.\n\n\n\n\nI did it using  `map` function\n\n\nint int_sum = (int_list.map(i -> i.toInt)).sum();\n\n\n `i.toInt` will convert the value from string to integer and you can use sum function to find the sum of all elements\n\n\n\n\n\n\nint sum = 0;\nfor (int i=0; i<list1.size i=\"\" list1.get=\"\" list2.get=\"\" sum=\"\"><\/list1.size>\n\n\n\n\n\nYou can use the reduce method from Java to calculate the sum of all the integers in the list. \nList 1 is your input list, List 2 is the desired output.\nJava 8:\n\n\nInteger sum = list1.stream().reduce(0, Integer::sum);\n\n\nJava 7:\n\n\nInteger sum = list1.stream().reduce(0, (a, b) ","language":"scala"}
{"task_id":"MBSCP\/495","completion":"        val pattern = \"^([a-z])([a-z]+)$\"\n        val matcher = str1.replaceAll(pattern, \"$1 $2\")\n        str1 = str1.replaceAll(pattern, \"$1 $2\")\n        matcher\n    }","language":"scala"}
{"task_id":"MBSCP\/496","completion":"        val minHeap = new PriorityQueue[Int]\n        val sortedArray = nums.sorted()\n        for (i \n\nSample output\n\n\n[14, 22, 25]\n[14, 22]\n[14, 22, 22, 25, 35]<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/497","completion":"        \/\/ return ??\n    }","language":"scala"}
{"task_id":"MBSCP\/498","completion":"        if (y == 0) x;\n        else gcd(y, x % y)\n    }","language":"scala"}
{"task_id":"MBSCP\/499","completion":"        r * 2 + r + 1\n    }","language":"scala"}
{"task_id":"MBSCP\/500","completion":"        val result = \"\"\n        list.foreach(element => result += element)\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/501","completion":"        x match {\n            case x = 0 => y\n            case y = 0 => x\n            case x > 0 && y > 0 =>\n                val commonDivisor = x % y\n                if (commonDivisor == 0) {\n                    numCommDiv(x \/ y, y)\n                } else {\n                    numCommDiv(x \/ commonDivisor, commonDivisor)\n                    numCommDiv(commonDivisor, y \/ commonDivisor)\n                }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/502","completion":"        def result = n % m\n        println(result)\n        (result == 0).asScala\n    }","language":"scala"}
{"task_id":"MBSCP\/503","completion":"        val result = new Array[Int]\n        val length = nums.size\n        val lastItem = 0\n        for (i \n\nPrints\n\n\nList(2, 4, 7, 8, 9, 11, 13)\nList(9, 13, 17, 15, 16)\nList(3, 5, 7, 9, 11, 13, 15, 17, 19)\n\n\n\n\n\n\n\n\npublic class Test {\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 3, 4, 4, 5, 6, 7};\n        int[] result = addConsecutiveNums(nums);\n        for (int i = 0; i < result.length; i++) {\n            System.out.println(result[i]);\n        }\n    }\n\n    public static int[] addConsecutiveNums(int[] nums) {\n        int[] result = new int[nums.length];\n       ","language":"scala"}
{"task_id":"MBSCP\/504","completion":"        1\n        2\n        3\n        4\n        5\n        6\n        7\n        8\n        9\n        10\n        11\n        12\n        13\n        14\n        15\n        16\n        17\n        18\n        19\n        20\n        21\n        22\n        23\n        24\n        25\n        26\n        27\n        28\n        29\n        30\n        31\n        32\n        33\n        34\n        35\n        36\n        37\n        38\n        39\n        40\n        41\n        42\n        43\n        44\n        45\n        46\n        47\n        48\n        49\n        50\n        51\n        52\n        53\n        54\n        55\n        56\n        57\n        58\n        59\n        60\n        61\n        62\n        63\n        64\n","language":"scala"}
{"task_id":"MBSCP\/505","completion":"        val B = new List[Int]()\n        val n = A.length\n        for (i \n\nThis is my solution, but I am not sure that it's good, because I am a beginner in Scala. If you have a better solution, please share.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/506","completion":"        n! \/ factorial(k) * factorial(n - k)!\n    }","language":"scala"}
{"task_id":"MBSCP\/507","completion":"        val list2 = list1.filter(_.not(_.in(removewords)))\n        list2\n    }","language":"scala"}
{"task_id":"MBSCP\/508","completion":"        val s1 = l1.sorted\n        val s2 = l2.sorted\n        return s1.collect(Collectors.toList).equals(s2.collect(Collectors.toList))\n    }","language":"scala"}
{"task_id":"MBSCP\/509","completion":"        \/\/ Your task starts here.\n        n = n - 1;\n        if (n % 2 == 0) {\n            n = n + 1;\n        }\n        val sum = 0;\n        for (i = 1; i <= n; i += 2) {\n            sum += i;\n        }\n        return sum \/ n;\n    }","language":"scala"}
{"task_id":"MBSCP\/510","completion":"        arr.groupBy(_._*1).mapValues(_.sum) match {\n            case m :: Map[Int, Int] => m.map(_._*1).takeWhile(_._<k).size\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/511","completion":"        val min = { val factor : Int -> val factorSum : Int -> (factor * factor + (factorSum - factor) * (factorSum - factor)) }\n                    .init(num)\n                    .map(min(factor))\n                    .sum\n        println(min(factor))\n    }","language":"scala"}
{"task_id":"MBSCP\/512","completion":"        val freq = Map[Int, Int]()\n        test_tuple.foreach(\n            t =>\n                freq.merge(t._2, 1, (a, b) => a + b)\n        )\n        freq\n    }","language":"scala"}
{"task_id":"MBSCP\/513","completion":"        val res = new ArrayList[Any]()\n        test_tup.foreach(x => {\n            res.add(x)\n            res.add(K)\n        })\n        res\n    }","language":"scala"}
{"task_id":"MBSCP\/514","completion":"        \/\/ TODO: Your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/515","completion":"        val mod = m % arr.map(_.asInstanceOf[Int]).sum()\n        for (i \n\nUpdate\nYou can write a function that returns  `true` if there exists a subset with sum divisible by  `m` :\n\n\nobject Main extends App {\n    def isModularSum(arr : List[Int], n : Int, m : Int) : Boolean = {\n        val mod = m % arr.map(_.asInstanceOf[Int]).sum()\n        for (i \n\nUpdate 2\nIf you need to find the sum of all numbers that are multiples of  `m` , then you can just use the  `filter` function:\n\n\nobject Main extends App {\n    \/**\n     * You are an expert Scala programmer, and here is your task.\n     * Write a function to find the sum of all numbers that are multiples of  `m` .\n     * >>> sumOfMultiples(List(3, 1, 7, 5), 4, 6)\n     *","language":"scala"}
{"task_id":"MBSCP\/516","completion":"        val buckets = Array(10)\n        for (i <- 0 until (nums length)) {\n            buckets[nums[i] \/ 10] += nums[i]\n        }\n        i <- 0\n        for (j <- 0 until (buckets.length)) {\n            if (buckets[j] != 0) {\n                for (k <- 0 until (buckets[j])) {\n                    nums[i] = buckets[j]\n                    i += 1\n                }\n            }\n        }\n        return nums\n    }","language":"scala"}
{"task_id":"MBSCP\/517","completion":"        \/\/ write your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/518","completion":"        \/\/ you write the code here\n        if (num < 0) throw new Exception(\"This isn't a perfect number!\");\n        if (num == 0) return 0;\n\n        if (num % 2 == 0) return (num \/ 2);\n        else {\n            var result : Int = (num - 1) \/ 2;\n            return result + 1;\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/519","completion":"        val area = num*num*num\/6\n        val volume = 4\/3*area*area*area\n        println(\"Volume of a tetrahedron with \" + num + \" sides is \" + volume)\n    }","language":"scala"}
{"task_id":"MBSCP\/520","completion":"        val first = l(0)\n        val second = l(1)\n        val lcm = first * second \/ gcd(first, second)\n        for (i <- 2; i < length(l); i += 1) {\n            lcm = lcm * first \/ gcd(lcm, first)\n        }\n        return lcm\n    }","language":"scala"}
{"task_id":"MBSCP\/521","completion":"        \/**\n         * Check if the triangle is scalene or not.\n         *\/\n        if (x == y || x == z || y == z) {\n            println(\"Triangle is scalene\")\n            return true\n        } else {\n            println(\"Triangle is not scalene\")\n            return false\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/522","completion":"        val m = arr.sorted(Comparator.comparingInt(_._))\n        val n = arr.length\n\n        for (i \n\n(note: a bitonic subsequence is a subsequence with the same number of elements in increasing order, but with the difference between the first and the last elements in the subsequence being in increasing order)<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/523","completion":"        str1.isEmpty ?\n        List(str1 + \" is a empty string.\") :\n        str1.trim == \"\" ?\n        List(str1 + \" is a empty string.\") :\n        str1.split(\"\").map { ch =>\n            ch.isUpperCase && str1.length >= 1 ?\n            List(str1 + \" must have 1 upper case character.\") :\n            ch.isLowerCase && str1.length >= 1 ?\n            List(str1 + \" must have 1 lower case character.\") :\n            ch.isDigit && str1.length >= 1 ?\n            List(str1 + \" must have 1 number.\") :\n            str1.length >= 8 ?\n            List(str1 + \" length should be atleast 8.\") :\n            null\n        }.getOrElse(List(str1 + \" is a valid string.\"))\n    }","language":"scala"}
{"task_id":"MBSCP\/524","completion":"        val dp = Array[Int](n+1)\n        dp(0) = 0\n        dp(1) = -inf\n        val maxSum = 0\n        for (i \n\nHere is a blog post where I explain how to write a solution.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/525","completion":"        line1.parallel.collect { case x | x < line2.parallel.head }.isEmpty == true\n    }","language":"scala"}
{"task_id":"MBSCP\/526","completion":"        val words = str1.split(\" \")\n        val result = words.map(_.capitalize).mkString(\" \")\n        result = result.substring(0,1).toUpperCase() + result.substring(1,result.length)\n        println(result)\n    }","language":"scala"}
{"task_id":"MBSCP\/527","completion":"        val arrMap = arr.map { n => (n, n) }\n        val pairs = arrMap.filter { case (a, b) => a + b == sum }.collect.toList\n        val pairsCount = pairs.size\n        println(pairsCount)\n    }","language":"scala"}
{"task_id":"MBSCP\/528","completion":"        val list2 = list1.map(_.size).sorted.mkString(\"#\")\n        for (i \n\nThere is also an approach using streams.\n\n\nimport java.util.ArrayList\n\nobject Main extends App {\n    \/**\n     * You are an expert Scala programmer, and here is your task.\n     * Write a function to find the list of lists with minimum length.\n     * >>> minLength(List(List(0), List(1, 3), List(5, 7), List(9, 11), List(13, 15, 17)))\n     * List(1, List(0))\n     * >>> minLength(List(List(1), List(5, 7), List(10, 12, 14, 15)))\n     * List(1, List(1))\n     * >>> minLength(List(List(5), List(15, 20, 25)))\n     * List(1, List(5))\n     *\/\n    def minLength(list1 : List[List[Int]]) : List[Any] = ","language":"scala"}
{"task_id":"MBSCP\/529","completion":"        (2 * n) * (n + 1) \/ 2\n    }","language":"scala"}
{"task_id":"MBSCP\/530","completion":"        val result = 0\n        for (i \n\nNote:\n\nYou can use  `double` type for the result of a floating-point operation if you want to return the number with a  `double` precision.\nIf you want to find the ratio of positive and negative numbers in a list, you can use  `sum` to get the number of positive and negative numbers and divide it by the length of the list, which will give you the ratio.\n\n\n\nThank you so much for such a detailed answer!<\/s><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/531","completion":"        val dp = Array(V + 1)\n        dp[0] = 0\n\n        for(i <- 0 until V) {\n            if(dp[i] != 0) continue\n            for(coin <- coins) {\n                if(i + coin < V + 1) {\n                    dp[i + coin] = min(dp[i + coin], dp[i] + 1)\n                }\n            }\n        }\n\n        if(dp[V] == 0) return -1\n        else return dp[V]\n    }","language":"scala"}
{"task_id":"MBSCP\/532","completion":"        str1.chars.mkString.chars.sort { case a, b -> a - b }.equals(str2.chars.mkString.chars)\n    }","language":"scala"}
{"task_id":"MBSCP\/534","completion":"        val patternSize = pattern.length\n        val textSize = text.length\n        var start = textSize\n        var lastPatternIndex = -1\n        var lastFoundIndex = -1\n        for (i \n\nPrints:\n\n\npython 0 6\nprogramming 7 18\nlanguage 19 27\n\n\n\" OwnerDisplayName=\"user15552191\" LastActivityDate=\"2021-04-08T16:06:01.570\" CommentCount=\"0\" ContentLicense=\"CC BY-SA 4.0\" \/><\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/535","completion":"        \/\/ your code\n        val area = (2 * r * r) * 3.14 * (r - Math.sqrt(r * r - (r - 2) * (r - 2)))\n        if (area < 0) {\n            val res = area.abs\n            res.toDouble\n        } else {\n            val res = area\n            res.toDouble\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/536","completion":"        val result = List(list[0])\n        for (i \n\nThe only thing missing is to figure out how to iterate over the whole list. I also can't figure out how to define the class  `List` and  `Int` .<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/537","completion":"        \/\/ #firstrepeatedword\n        val words = str1.trim().split(\" \")\n        val wordToFind = words.groupBy(_._1)\n        val keys = wordToFind.keys.sorted\n        (wordToFind.mapValues(_._1).groupBy(_._1))\n        keys.take(1).foreach(w =>\n            if (wordToFind.get(w).isDefined)\n                println(w)\n        )\n        \/\/ #firstrepeatedword\n    }","language":"scala"}
{"task_id":"MBSCP\/538","completion":"        split(str1, \" \")\n    }","language":"scala"}
{"task_id":"MBSCP\/539","completion":"        var res = List()\n        var b = 1\n        for(b ; b <= bases_num.last ; b *= 10) {\n            for (i \n\nprints\n\n\nList(10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000)\nList(1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249)\nList(4, 64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 24565106888230","language":"scala"}
{"task_id":"MBSCP\/540","completion":"        arr.map(_.toSeq)\n             .reduce(Seq[Int], Seq[Int]::head)\n             .takeWhile(_ < n)\n             .foldLeft(0) - Seq.range(n).foldLeft(0)\n    }","language":"scala"}
{"task_id":"MBSCP\/541","completion":"        if (n < 0) {\n            return false\n        }\n        for (i <- 2; i < n \/ 2 ; i++) {\n            if (n % i == 0) {\n                return false\n            }\n        }\n        return true\n    }","language":"scala"}
{"task_id":"MBSCP\/542","completion":"        var regex = \/( |,|\\.)\/g\n        text = text.replaceAll(regex, \":\")\n        text\n    }","language":"scala"}
{"task_id":"MBSCP\/543","completion":"        val number = num1 + num2\n        val length = String(number).length\n        println(length)\n    }","language":"scala"}
{"task_id":"MBSCP\/544","completion":"        val sb = new StringBuilder();\n        test_list.foreach(x => sb.append(x.toList.mkString(\" \")))\n        println(sb.toString)\n    }","language":"scala"}
{"task_id":"MBSCP\/545","completion":"        n = n ^ ((n >> 1) & ~1)\n        n = n ^ ((n >> 2) & ~2)\n        n = n ^ ((n >> 4) & ~4)\n        n = n ^ ((n >> 8) & ~8)\n        n = n ^ ((n >> 16) & ~16)\n        n\n    }","language":"scala"}
{"task_id":"MBSCP\/546","completion":"        \/\/ Your code here\n        val index = string.lastIndexOf(char)\n        if(index < 0){\n            println(\"none\")\n        }else{\n            println(index)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/547","completion":"        val res = 0\n        val bits = 1 to n\n        val mask = 1 to (n * bits)\n        val maskBits = bits - mask\n        for (i \n\nIf you want to do it in a single pass, I would suggest that you try to find the number of  `1` s in a row and then count the number of  `0` s in a row.\n\n\n\n\nThis is my solution with a single loop.\n\n\npublic int totalHammingDistance(int n) {\n    int totalHammingDistance = 0;\n    while (n > 0) {\n        if ((n % 2) == 1) {\n            totalHammingDistance++;\n        }\n        n = n >> 1;\n    }\n    return totalHammingDistance;\n}\n\n\n\n\nIt's an interesting solution, but it doesn't consider all the binary digits, **not** only those with odd number of 1s.\n\n\n\nHere is my solution:\n\n\nint totalH","language":"scala"}
{"task_id":"MBSCP\/548","completion":"        \/**\n         * For the first problem, we know that the longest increasing subsequence is just a\n         * subsequence that can be extended in an alternating fashion by adding a new element.\n         * So the longest subsequence that can be extended in an alternating fashion would be\n         * (10, 22, 9, 33, 21, 50, 41, 60).\n         *\n         * We need to extend our sequence in an alternating fashion by adding a new element,\n         * and we can only extend it in such a way that if we encounter a new element,\n         * it is larger than the previous element.\n         *\n         * We can maintain a list of the previous elements of the current increasing subsequence.\n         * If we encounter a new element, we can check if this element is larger than\n         * the previous element.\n         *\n         * We use a pair of index variables to represent this in an efficient way.\n         * For the index variables, we start from 0.\n         *\n         * For example:\n         ","language":"scala"}
{"task_id":"MBSCP\/549","completion":"        for (i <- n; i <= n * 2; i += 2) {\n            val sum = ((i^5)^2)^2\n            println(sum)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/550","completion":"        if (low == high) {\n            return arr(low)\n        }\n        var mid = (low + high) \/ 2\n        if (mid + 1 < high && arr(mid) < arr(mid + 1)) {\n            return findMax(arr, mid + 1, high)\n        } else if (mid - 1 > low && arr(mid) > arr(mid - 1)) {\n            return findMax(arr, low, mid - 1)\n        } else {\n            return arr(mid)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/551","completion":"        list1.map(p => p(n))\n    }","language":"scala"}
{"task_id":"MBSCP\/552","completion":"        val size = seq_nums.size\n        val m = 0\n        for (i \n\noutput\n\n\nLinear Sequence\n\n\nIn case you're wondering why I used  `m` as a local variable, I thought it would be better to have a  `List[Int]` instead of an  `Int` .\nEDIT: I've also noticed that you could have used  `seq.length` to get the size, instead of using  `List` .\nI'm not really sure which is more efficient, or if there is any way that  `i` could be a local variable, but I'm not sure which would be more efficient.\n\n\nThe `m` variable is only used for the inner loop, since `i` is a local variable in the outer loop. That's why it's a good idea to use `seq_nums.size` instead of `List(0, 2, 4, 6, 8, 10).size` and `List(1, 2, 3).size` instead of `2`, etc.\n\n@","language":"scala"}
{"task_id":"MBSCP\/553","completion":"        val res = test_tup.map(x => x.toDouble).reduce(_ + _)\n        4.0 + 56.0\n    }","language":"scala"}
{"task_id":"MBSCP\/554","completion":"        list match {\n            case Nil =>\n                Nil\n            case Some(x) =>\n                x match {\n                    case 0 =>\n                        Nil\n                    case x % 2 == 1 =>\n                        Some(x - 1)\n                    case x % 2 == 0 =>\n                        Some(x)\n                }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/555","completion":"        n * n * n - sum(1 to n)\n    }","language":"scala"}
{"task_id":"MBSCP\/556","completion":"        val res = 0\n        A.foreach(i => res ^= i)\n        res\n    }","language":"scala"}
{"task_id":"MBSCP\/557","completion":"        def upper(s : String) = s.toUpperCase\n        def lower(s : String) = s.toLowerCase\n        string.split('').map(_.swapcase).mkString\n    }","language":"scala"}
{"task_id":"MBSCP\/558","completion":"        \/\/ your code goes here\n        if (n1 == n2) return 0\n        else if (n1 < n2) {\n            return digitDistanceNums(n2, n1) + 1\n        } else {\n            return digitDistanceNums(n1, n2) + 1\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/559","completion":"        def maxSubArraySumHelper(l : Int, r : Int) : Int = {\n            if (l == r) {\n                return a(l)\n            }\n            var firstElement = maxSubArraySumHelper(l, r - 1)\n            var lastElement = maxSubArraySumHelper(l + 1, r)\n            return firstElement + lastElement\n        }\n        val max = maxSubArraySumHelper(0, size - 1)\n        println(max)\n    }","language":"scala"}
{"task_id":"MBSCP\/560","completion":"        test_tup1 match {\n            case _ => []\n            case (t1, t2) => t1 match {\n                case _ => t2\n                case (t3, t4) => unionElements(t1, t2) ++ t3\n            }\n        } ++ test_tup2\n    }","language":"scala"}
{"task_id":"MBSCP\/561","completion":"        \/\/ Map your values to empty lists\n        Map(test_list.map(x => x.map(y => List())).flatten).mapValues(_ => List())\n\n    }","language":"scala"}
{"task_id":"MBSCP\/562","completion":"        val result : List[List[Int]] = List(lst)\n        result.foreach {\n            val subList = it\n            subList.foreach {\n                if (subList.size == 0) {\n                    continue\n                }\n                subList.sort(Comparator.comparingInt(x => x))\n                subList.reverse()\n            }\n        }\n        result.reduceLeft(List())\n    }","language":"scala"}
{"task_id":"MBSCP\/563","completion":"        val tokens = text.split(\"\\\"\")\n        tokens.map(token => token.substring(1, token.length - 1))\n    }","language":"scala"}
{"task_id":"MBSCP\/564","completion":"        val pairs = arr.partition(2).takeWhile { it != 1 }.toList\n        val map = arr.map { (x,y) => (x * y) }\n        pairs.zip(map).foldLeft(0)\n    }","language":"scala"}
{"task_id":"MBSCP\/565","completion":"        word.chars.map(_.toInt).toList\n    }","language":"scala"}
{"task_id":"MBSCP\/566","completion":"        if (n < 0)\n            n *= -1\n        s : Int = 0\n        while (n > 0) {\n            s += n % 10\n            n \/= 10\n        }\n        return s\n    }","language":"scala"}
{"task_id":"MBSCP\/567","completion":"        val length = list1.size\n        var i = 0\n        while (i < length - 1) {\n            if (list1(i) > list1(i + 1))\n                false\n            i += 1\n        }\n        true\n    }","language":"scala"}
{"task_id":"MBSCP\/568","completion":"        for (i \n\nprints \n\n\nList(Map(a=1, b=2), Map(a=3, b=4), Map(a=5, b=6), Map(a=7, b=8), Map(a=9, b=0))\n\n\n\n\nThanks a lot for your answer! The thing is that I don't know how many times I'll need to create a dictionary. So, I should define a number of dictionaries I want to create in the main method. What's your take on this?\n\nThis is not really a Java question. This is a Scala question. I have updated the answer with a Scala solution.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/569","completion":"        for (i <- 0 until list1.length - 1) {\n            for (j <- 0 until list1.length - i - 1) {\n                if (list1(j) < list1(j+1)) {\n                    val tmp = list1(j)\n                    list1(j) = list1(j+1)\n                    list1(j+1) = tmp\n                }\n            }\n        }\n        list1\n    }","language":"scala"}
{"task_id":"MBSCP\/570","completion":"        val result = list1.dropWhile(word => !charlist.contains(word.takeWhile(c => c.nonEmpty).mkString))\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/571","completion":"        def diff (a : Int, b : Int) : Int = a - b\n        def find (arr : List[Int], k : Int) : Int = {\n            val sum = arr.sum\n            val l : Int = 0\n            val r : Int = sum\n            val result : Int = 0\n            while (l < r) {\n                val m = l + (r - l) \/ 2\n                if (m < k)\n                    l = m + 1\n                else if (m > k)\n                    r = m - 1\n                else {\n                    result = sum - m\n                    break\n                }\n            }\n            result\n        }\n        if (arr.isEmpty) {\n            0\n        } else {\n            find(arr, K)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/572","completion":"        val set = Set.empty[Int]\n        nums.map(set.add)\n        val numSet = new HashSet[Int]()\n        set.map(_.toSeq()).foreach(_.forEach(_.toSeq.asInstanceOf[Seq[Int]])) {\n            if (numSet.contains(_.head)) {\n                _.tail.forEach(_.toSeq.asInstanceOf[Seq[Int]]) {\n                    set.remove(_.head)\n                }\n            } else {\n                numSet.add(_.head)\n            }\n        }\n        numSet.foreach(_.toSeq.asInstanceOf[Seq[Int]])\n    }","language":"scala"}
{"task_id":"MBSCP\/573","completion":"        \/\/ Your code here.\n    }","language":"scala"}
{"task_id":"MBSCP\/574","completion":"        \/\/ Task 1: Write the function body\n    }","language":"scala"}
{"task_id":"MBSCP\/575","completion":"        for (n <- L until R) {\n            if (n mod A = 0)\n                N - 1\n        }\n        N\n    }","language":"scala"}
{"task_id":"MBSCP\/576","completion":"        n = 0 if n > A.length - 1 || n < 0 else n\n        m = 0 if m > B.length - 1 || m < 0 else m\n\n        while (n <= A.length - 1 && m <= B.length - 1) {\n            if (A(n) == B(m)) {\n                println(\"Found match at \" + n + \", \" + m)\n                n += 1\n                m += 1\n            } else {\n                n += 1\n                m += 1\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/577","completion":"        if (n == 0) {\n            return 0\n        }\n        if (n == 1) {\n            return 1\n        }\n        def f(n) : Int = {\n            if (n == 0) {\n                return 0\n            }\n            if (n == 1) {\n                return 1\n            }\n            def factorial(n) : Int = {\n                if (n <= 1) {\n                    return 1\n                }\n                return n * factorial(n - 1)\n            }\n            return factorial(n) % 10\n        }\n        return f(n)\n    }","language":"scala"}
{"task_id":"MBSCP\/578","completion":"        val l = list3.size\n        list1 match {\n            case Nil => list3\n            case x => {\n                val list = List(list1.head, list2.head, list3.head).takeWhile(x => x.length < l)\n                list.append(List(list1.tail, list2.tail, list3.tail).dropRight(l))\n                list.addAll(list3.tail)\n                list\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/579","completion":"        val res = mutable.ListBuffer[Int]()\n        val set1 = test_tup1.toSet()\n        val set2 = test_tup2.toSet()\n        set1.foreach { res += _ }\n        set2.foreach { res -= _ }\n        if (res.isEmpty)\n            res += mutable.ListBuffer.empty\n        val res2 = res.toList()\n        val res3 = res2.toSeq\n        if (res3.isEmpty)\n            res3 += mutable.ListBuffer.empty\n        res3\n    }","language":"scala"}
{"task_id":"MBSCP\/580","completion":"        \/\/ ... your code here ...\n        val even_list = test_tuple.map { case x => x % 2 == 0 }.to_list\n        \/\/ ... your code here ...\n        even_list\n    }","language":"scala"}
{"task_id":"MBSCP\/581","completion":"        1 + 2 * b + 2 * s + b * s\n    }","language":"scala"}
{"task_id":"MBSCP\/582","completion":"        if (dict1.isEmpty())\n            true\n        else\n            false\n    }","language":"scala"}
{"task_id":"MBSCP\/583","completion":"        \/\/ If num is 0 return 1\n        if (num == 0) return 1\n        \/\/ Find the sum of catalan numbers from 1 to num\n        val sum = 0\n        var currentNum = 1\n        while (currentNum <= num) {\n            val temp = 0\n            for (i  (1, currentNum)) {\n                temp = (temp * i) \/ (i + 1)\n            }\n            sum += temp\n            currentNum++\n        }\n        return sum\n    }","language":"scala"}
{"task_id":"MBSCP\/584","completion":"        val regex = \"(?<=[.?!])\\\\s[A-Z]+(?=\\\\s|$)\"\n        text.replaceAll(regex, \" \")\n    }","language":"scala"}
{"task_id":"MBSCP\/585","completion":"        val heap = new PriorityQueue[Map[String, Any]]()\n        val map = new HashMap[String, Any]()\n        for (i <- 0 until items.length) {\n            val item = items[i]\n            map[item.name] = item\n            if (heap.size < n) heap.offer(item)\n            else if (item.price < heap.peek().price) {\n                heap.poll()\n                heap.offer(item)\n            }\n        }\n\n        return map.values()\n    }","language":"scala"}
{"task_id":"MBSCP\/586","completion":"        val res : ListBuffer[Int] = new ListBuffer[Int]()\n        res += a.take(0, k).toSeq\n        if (n - k > 0)\n            res += a.drop(k).toSeq\n        res\n    }","language":"scala"}
{"task_id":"MBSCP\/587","completion":"        for (i \n        \/**\n         * For a given list, generate a tuple with the same length\n         *\/\n        val listLength : Int = listx.size\n        \/**\n         * If the list is empty, return the empty tuple\n         *\/\n        if (listLength == 0) {\n            List()\n            \/**\n             * Otherwise, append the first element to the tuple, and the rest of the elements\n             *\/\n        } else {\n            listx(0).mkString(\", \")\n            listTuple(listx.tail)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/588","completion":"        \/\/ Your code goes here\n    }","language":"scala"}
{"task_id":"MBSCP\/589","completion":"        (a, b).filter(_.isPerfectSquare).map(_.getFirst)\n    }","language":"scala"}
{"task_id":"MBSCP\/591","completion":"        newList.headOption (newList.tailOption).swap\n    }","language":"scala"}
{"task_id":"MBSCP\/592","completion":"        return 1\n        \/**\n         * You are an expert Scala programmer, and here is your task.\n         * Write a Scala function to find sum of product of binomial co-efficients.\n         * >>> sumOfProduct(3)\n         * 15\n         * >>> sumOfProduct(4)\n         * 56\n         * >>> sumOfProduct(1)\n         * 1\n         *\/\n    }","language":"scala"}
{"task_id":"MBSCP\/593","completion":"        ip.replace(\/^0+\/g, \"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/594","completion":"        if (list1.isEmpty)\n            return 0\n        else {\n            val result = (list1(0) match {\n                case _ -> 0\n                case (l1, l2) -> {\n                    val l1even = (l1(0) match {\n                        case _ -> false\n                        case (n) -> n % 2 == 0\n                    })\n                    val l1odd = (l1(0) match {\n                        case _ -> false\n                        case (n) -> n % 2 != 0\n                    })\n                    val l2even = (l2(0) match {\n                        case _ -> false\n                        case (n) -> n % 2 == 0\n                    })\n                    val l2odd = (l2(0) match {\n                        case _ -> false\n                        case (n) -> n %","language":"scala"}
{"task_id":"MBSCP\/595","completion":"        val len1 = str1.length\n        val len2 = str2.length\n        if (len1 != len2) {\n            return \"Not Possible\"\n        }\n        val dp1 = (len1 + 2) * len2 \/\/ 2 extra for first and last character\n        val dp2 = (len1 + 2) * len1 \/\/ 2 extra for first and last character\n        val dp3 = (len2 + 2) * len2 \/\/ 2 extra for first and last character\n        val dp4 = (len2 + 2) * len1 \/\/ 2 extra for first and last character\n        var n = 1\n        while (dp1 != 0) {\n            dp1 -= dp2\n            dp2 -= dp3\n            dp3 -= dp4\n            dp1 += n\n            dp2 += n\n            dp3 += n\n            n += 1\n        }\n        n -= 1\n        if ","language":"scala"}
{"task_id":"MBSCP\/597","completion":"        val p1 = arr1.length - 1\n        val p2 = arr2.length - 1\n        val idx1 = 0\n        val idx2 = 0\n        while (p1 > idx1 && p2 > idx2) {\n            if (arr1(p1) > arr2(p2)) {\n                p2 -= 1\n            } else if (arr2(p2) > arr1(p1)) {\n                p1 -= 1\n            } else {\n                if (idx1 == m) {\n                    k -= 1\n                    p2 -= 1\n                }\n                idx1 += 1\n                p1 -= 1\n            }\n        }\n        if (k < 0 || m < 0 || n < 0) {\n            \/\/ return -1\n            println(-1)\n        }\n        if (m < 0 || n < ","language":"scala"}
{"task_id":"MBSCP\/598","completion":"        var total = 0\n        var originalNumber : Int = number\n        for (n = 1 to number) {\n            if (originalNumber >= n) {\n                originalNumber -= n\n                total += n\n            }\n        }\n        originalNumber += 1\n        if (originalNumber == total) {\n            println(\"It is an armstrong number.\")\n        } else {\n            println(\"It is not an armstrong number.\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/599","completion":"        \/\/ Your task.\n    }","language":"scala"}
{"task_id":"MBSCP\/600","completion":"        n & 1 == 0\n    }","language":"scala"}
{"task_id":"MBSCP\/602","completion":"        val aMap = map[Character](str1.hashCode)\n        for (val c : str1.toCharArray) {\n            if (aMap.contains(c))\n                return c\n            else\n                aMap(c)\n        }\n        None\n    }","language":"scala"}
{"task_id":"MBSCP\/603","completion":"        val arr = List(1)\n        for (i \n\nIn this case, you don't have to create new array, you can reuse your array.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/604","completion":"        \/\/ write code here\n        var words : List[String] = s.trim().split(\" \")\n        if (words.size == 0) {\n            println(\"Empty string\")\n        } else {\n            var reversed : List[String] = new List()\n            for (i <- words.size(); i >= 0; i--){\n                reversed += words[i] + \" \"\n            }\n            println(reversed)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/605","completion":"        \/\/ 8 is a perfect number for 1 (see below).\n        if (num < 8) return false\n        \/\/ 8 is a prime number.\n        if (num == 8) return true\n        \/\/ If the number is divisible by 2 or 3, it's a prime number.\n        if (num % 2 == 0 || num % 3 == 0) return false\n        \/\/ Divide the number by all the primes below it.\n        for (let i = 5; num \/ i >= i; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false\n        }\n        return true\n    }","language":"scala"}
{"task_id":"MBSCP\/606","completion":"        val pi = Math.PI\n        return degree * (pi \/ 180)\n    }","language":"scala"}
{"task_id":"MBSCP\/607","completion":"        val patternPos : List[Int] = text.match(new Regex(pattern))\n        if(patternPos == null) {\n            throw new IllegalArgumentException(\"Pattern not found\")\n        } else {\n            val location : Int = patternPos.index\n            val matched : String = text.substring(location, location + pattern.length)\n            val matchedPos : List[Int] = text.match(new Regex(pattern))\n            val matchLength : Int = patternPos.length\n            val result : List[Any] = List(pattern, location, location + matchLength)\n            println(matchedPos.length + \" matches found in \\\"\" + matched + \"\\\"\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/608","completion":"        val num = 1\n        for (i \n\nThis code seems to be the most straightforward one.\n\n\nThank you, but it says \"Error:(34, 2) java: return type required\"\n\n@hfk, I've just added the return type.\n\n@hfk, it works fine, try to replace `return i` with `return num` and see if it works.\n\nNow I get an error \"Error:(36, 8) java: cannot find symbol\n symbol:   method bellNumber(int)\n location: class Main\"\n\n@hfk, it seems you have a typo. It should be `def bellNumber(n : Int)` not `def bellNumber(n : Int) : Int`.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/609","completion":"        \/\/ Find the greatest integer in the given range.\n        val max = B\n        if A < max {\n            max = A\n        }\n        \/\/ Find the smallest integer in the given range.\n        val min = N < max ? N : max\n        \/\/ Find the smallest integer in the given range.\n        val result = min\n        while (min > 0) {\n            \/\/ Decrease `min` by one.\n            min -= 1\n            \/\/ If the result of `(max - min) % (max - min) = 0` is true,\n            \/\/ the result is the result of `min`.\n            if (min % (max - min) == 0) {\n                result = min\n            }\n        }\n        return result\n    }","language":"scala"}
{"task_id":"MBSCP\/610","completion":"        list1 match {\n            case Nil => Nil\n            case (head, tail) => (head, tail - L + 1 match {\n                case Nil => Nil\n                case (head, tail) => (head, tail - 1 if (tail > 0) else Nil)\n            })\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/611","completion":"        test_list.map(p => p(N)).max\n    }","language":"scala"}
{"task_id":"MBSCP\/612","completion":"        \/\/ your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/613","completion":"        val maxTuple = max(test_list.map(_.map(_.mkString)))\n        val maxList = test_list.filter(_.map(_.map(_.mkString).contains(maxTuple)) && _.map(_.size).contains(maxTuple.length))\n        maxList.map(_.mkString)\n    }","language":"scala"}
{"task_id":"MBSCP\/614","completion":"        val result = test_list.map(_.map(_.sum))\n        result.foldLeft(0)\n    }","language":"scala"}
{"task_id":"MBSCP\/615","completion":"        nums match {\n            case x :: y :: z :: w =>\n                (x match {\n                    case a :: b :: c :: d =>\n                        averageTuple(List(List(a, b, c, d), List(a, b, c, d)))\n                    case y =>\n                        List(x.b + y.c \/ 2.0, x.c + y.d \/ 2.0)\n                    case z =>\n                        List(x.b + z.c \/ 2.0, x.c + z.d \/ 2.0)\n                    case w =>\n                        List(x.b + w.c \/ 2.0, x.c + w.d \/ 2.0)\n                })\n            case _ =>\n                List.empty\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/616","completion":"        \/\/ Your code here.\n    }","language":"scala"}
{"task_id":"MBSCP\/617","completion":"        if (d < 0) {\n            val jump = minJumps(a, b, d + a)\n            return 0.0 if jump == -1 ? -1 : (b - a) \/ jump\n        }\n        if (d == 0) {\n            return 1\n        }\n        val jumps = {\n            1 : 2,\n            2 : 3,\n            3 : 4,\n            4 : 7,\n            5 : 11,\n            6 : 16,\n            7 : 20,\n            8 : 21,\n            9 : 22,\n            10: 23,\n            11: 24,\n            12: 25,\n            13: 30,\n            14: 42,\n            15: 52,\n            16: 53,\n            17: 54,\n            18: 55,\n            19: 56","language":"scala"}
{"task_id":"MBSCP\/618","completion":"        nums1.map { (num1, num2) => num1 \/ num2 } \n    }","language":"scala"}
{"task_id":"MBSCP\/619","completion":"        val str = test_str.replaceAll(\"(?<=\\\\D)\\\\d+\", \"\")\n        str\n    }","language":"scala"}
{"task_id":"MBSCP\/620","completion":"        def largestSubset(a : List[Int], n : Int, prevSize : Int, prevList : List[Int]) : Int = {\n            if (a.isEmpty() || prevSize < n) {\n                prevSize = n\n                prevList = a\n                return 1\n            }\n\n            if (prevSize == n) {\n                if (prevList.join(\"\").length > n)\n                    return 1\n                else\n                    return 0\n            }\n\n            result = 0\n\n            newSize = prevSize + 1\n            newList = prevList.tail\n            newList += a\n            result += largestSubset(a.tail, n, newSize, newList)\n            result += largestSubset(a.tail, n, newSize, newList.tail)\n\n            newSize = prevSize\n            newList = prevList\n            result += largestSubset(a.tail, n, newSize, newList)\n\n            return result\n        }\n\n        return largestSubset(a","language":"scala"}
{"task_id":"MBSCP\/621","completion":"        test_list match {\n            case Nil => Nil\n            case x :: y => List(x, y) \/\/ y is the numeric value\n            case x :: y => y + K\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/622","completion":"        arr1 match {\n            case Nil => arr2 match {\n                case Nil => getMedian(List(), List(), 0)\n                case n1 => getMedian(List(n1), List(), 0)\n                case n2 => getMedian(List(), List(n2), 0)\n            }\n            case n1 => arr2 match {\n                case Nil => getMedian(List(n1), List(), 0)\n                case n2 => getMedian(List(), List(n2), 0)\n            }\n            case n1 => arr2 match {\n                case Nil => getMedian(List(n1), List(n2), 0)\n            }\n            case (n1, n2) => getMedian(List(n1, n2), List(n1, n2), n1 + n2)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/623","completion":"        nums.stream().map { x => x^n }.toList\n    }","language":"scala"}
{"task_id":"MBSCP\/624","completion":"        string.toUpperCase\n    }","language":"scala"}
{"task_id":"MBSCP\/625","completion":"        val size = newList.size\n        newList <<= 1\n        newList <<= size - 2\n        newList\n    }","language":"scala"}
{"task_id":"MBSCP\/626","completion":"        if (r < 0) {\n            return -1\n        }\n\n        def area(b, h) = b * h \/ 2\n        def perimeter(b, h) = (b + h) * 2\n        (area + perimeter) \/ 2 * r\n    }","language":"scala"}
{"task_id":"MBSCP\/627","completion":"        \/\/ Your code here.\n    }","language":"scala"}
{"task_id":"MBSCP\/628","completion":"        \/\/ TODO\n    }","language":"scala"}
{"task_id":"MBSCP\/629","completion":"        val result = new List[Int]\n        list.foreach {\n            if (it % 2 == 0) result += _\n        }\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/630","completion":"        val coordinates = List()\n        var x = test_tup(0)\n        var y = test_tup(1)\n        var z = 0\n        if x - 1 >= 0 {\n            if y - 1 >= 0 {\n                coordinates(List(List(x - 1, y - 1)))\n            }\n            z = 1\n            coordinates(List(List(x - 1, y)))\n        }\n        if x - 1 >= 0 {\n            if y >= 0 {\n                z = 2\n                coordinates(List(List(x - 1, y)))\n            }\n            y = y - 1\n            coordinates(List(List(x, y)))\n        }\n        if x >= 0 {\n            if y - 1 >= 0 {\n                z = 3\n                coordinates(List(List(x, y - 1)))\n            }\n            z = 4\n            coordinates","language":"scala"}
{"task_id":"MBSCP\/631","completion":"        val regex = \"\\\\b\\\\s+|\\\\s+\\\\b\"\n        text = text.replaceAll(regex, \"_\").replaceAll(\"_\", \" \")\n    }","language":"scala"}
{"task_id":"MBSCP\/632","completion":"        val new_list = num_list.map(num => num != 0)\n        new_list.foldLeft(num_list.toList).reverse\n    }","language":"scala"}
{"task_id":"MBSCP\/633","completion":"        val sum = 0\n        for (i \n\nTry it online!\nFor more information, see:\n\nWhy is it wrong to declare an Integer variable inside a loop?\nJava - How to find the sum of all integers in an array?\n\n\n\n\n\n\n\nfor (int i=0; i<arr.length-1 arr=\"\" i=\"\" if=\"\" int=\"\" j=\"i+1;\"><\/arr.length-1>\n\n\n\n\n\nThis should work, but I would recommend using the java stream api, if you do not wish to change your code.\n\n\npublic class XOR {\n\n    public static void main(String[] args) {\n\n        Integer[] ints = new Integer[] { 1,2,3,4,5,6,7,8,9,10 };\n\n        System.out.println(\n            Arrays.stream(ints)\n                .mapToObj(XOR::xor)\n                .reduce(0, Integer::sum));\n    }\n\n    public static int xor(int a, int b) {\n        return a ^ b;\n    }\n}\n\n\n\n\n\n\nYou","language":"scala"}
{"task_id":"MBSCP\/634","completion":"        var sum : Int = 0\n\n        sum += (n-1)^4\n        sum += evenPowerSum(n-1)\n\n        sum\n    }","language":"scala"}
{"task_id":"MBSCP\/635","completion":"        val minHeap = new Heap[Int](iterable.map(new Some[Int]))\n        val result = new Array[Int](minHeap.size)\n        for (i <- 1; i <= minHeap.size; i++) {\n            result(i) = minHeap.removeMin()\n        }\n        return result\n    }","language":"scala"}
{"task_id":"MBSCP\/636","completion":"        val result = \"\"\n        val d = b * b - 4 * a * c\n\n        if (d >= 0) {\n            val sqrtD = d.sqrt()\n            val x1 = (-b + sqrtD) \/ (2 * a)\n            val x2 = (-b - sqrtD) \/ (2 * a)\n\n            if (x1 < x2) result = \"Yes\"\n            else result = \"No\"\n        }\n        else result = \"No\"\n\n        println(result)\n    }","language":"scala"}
{"task_id":"MBSCP\/637","completion":"        actual_cost >= sale_amount * 0.5 && actual_cost <= sale_amount * 1.5\n    }","language":"scala"}
{"task_id":"MBSCP\/638","completion":"        val c = (v - t) \/ t * 100\n        (c < 0) && (c = 0)\n        (c > 100) && (c = 100)\n        c\n    }","language":"scala"}
{"task_id":"MBSCP\/639","completion":"        val res = 0L\n        for (i  <- sample_names.length){\n            val s = sample_names(i)\n            if (s.startsWith(\"a\").toBoolean){\n                res += s.length\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/640","completion":"        items match {\n            case List(open, close) ::: _ ->\n                if (open != '(' && close != ')')\n                    items.head ++ '.'\n                removeParenthesis(items.tail)\n            case x ::: x\n        }\n        items.head\n    }","language":"scala"}
{"task_id":"MBSCP\/641","completion":"        \/\/ Your code goes here.\n    }","language":"scala"}
{"task_id":"MBSCP\/643","completion":"        val word = \"z\"\n        val matcher = text.replaceAll(\"[a-z]+\", \"\")\n                          .replaceAll(\"^\" + word + \"[^a-z]*\", \"Not matched!\")\n                          .replaceAll(word + \"[^a-z]*$\", \"Not matched!\")\n        println(matcher)\n    }","language":"scala"}
{"task_id":"MBSCP\/644","completion":"        val result = new List[Int]()\n        input.take(k).map(_.reversed.toList)\n    }","language":"scala"}
{"task_id":"MBSCP\/645","completion":"        val results = new List[Int]()\n        test_list.foreach(x => results += x)\n        results\n            .sortBy(_._2)\n            .take(K)\n            .reduce(_ * _)\n            .getOrElse(0)\n    }","language":"scala"}
{"task_id":"MBSCP\/646","completion":"        n = N\n        k = K\n        {\n            cubes = n^3\n            return cubes if (cubes > k) 1\n            else (cubes % k)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/647","completion":"        text.split(\/(?=[A-Z])\/)\n    }","language":"scala"}
{"task_id":"MBSCP\/648","completion":"        for(x \n\n}","language":"scala"}
{"task_id":"MBSCP\/649","completion":"        return sum(nums.subList(nums(m, n)))\n    }","language":"scala"}
{"task_id":"MBSCP\/650","completion":"        \/\/ Your code here\n        arr1.zip(arr2).filter(i => i._1 != i._2).collect { case (i, j) => i == j }.size match {\n            case size => size == n && size == m\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/651","completion":"        test_tup2.map(elem2 => test_tup1.contains(elem2))\n    }","language":"scala"}
{"task_id":"MBSCP\/652","completion":"      val row_list = test_list.map(_.map(_.map(_.map(_.toString).toList).toList).toList).toList\n      val row_list_str = row_list.mkString(\"\\n\")\n      val row_list_str_formatted = row_list_str.replace(\"\\n\", \",\")\n      row_list_str_formatted\n    }","language":"scala"}
{"task_id":"MBSCP\/653","completion":"        l match {\n            case _: (List(_.head, _.tail)) =>\n                groupingDictionary(_.tail) {\n                    val key = _.head\n                    case _ =>\n                        val value = groupingDictionary(_.tail)\n                        (key, value)\n                }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/654","completion":"        val result = 2 * l + 2 * b\n        println(result)\n        return result\n    }","language":"scala"}
{"task_id":"MBSCP\/655","completion":"        n match {\n            case n < 1 => 0\n            case n < 2 => 1\n            case n < 3 => 2\n            case n < 4 => 4\n            case n < 5 => 8\n            case n < 6 => 16\n            case n < 7 => 32\n            case n < 8 => 64\n            case n < 9 => 128\n            case n < 10 => 256\n            case n < 11 => 512\n            case n < 12 => 1024\n            case n < 13 => 2048\n            case n < 14 => 4096\n            case n < 15 => 8192\n            case n < 16 => 16384\n            case n < 17 => 32768\n            case n < 18 => 65536\n            case n < 19 => 131072\n            case n < 20 => 262144\n            case n","language":"scala"}
{"task_id":"MBSCP\/656","completion":"        \/\/ find the min sum of absolute differences between two arrays\n        val minSum = a.zip(b).map(_.map2(_.sum).mkString).foldLeft(0)(0)(_ + _)\n        println(minSum)\n        \/\/ and return the result\n        if (minSum < 0) (minSum * -1)\n    }","language":"scala"}
{"task_id":"MBSCP\/657","completion":"        \/\/ Your code goes here\n    }","language":"scala"}
{"task_id":"MBSCP\/658","completion":"        list1.groupBy(_.id).map(_._1.map(_.size).max()).getOrElse(-1)\n    }","language":"scala"}
{"task_id":"MBSCP\/659","completion":"        x.filter(_._ != x.head).map(\n            _._ -> x.head.toInt + 1\n        ).toList\n    }","language":"scala"}
{"task_id":"MBSCP\/660","completion":"        \/\/ Write your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/661","completion":"        val target = arr.size - n + 1\n\n        val memo = new Array[Int](target)\n        for (i \n\nNow, let's fix up the code:\n\n\nobject Main extends App {\n    def maxSumOfThreeConsecutive(arr : List[Int], n : Int) : Int = {\n        val target = arr.size - n + 1\n\n        val memo = new Array[Int](target)\n        memo(0) = arr.head\n        memo(1) = arr.head + arr.tail\n        memo(2) = arr.head + arr.tail + arr.tail.tail\n        for (i<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/662","completion":"        val sorted = (Map(k, List(v)).sortBy(_.head))\n        val dict = dict1.zip(sorted)\n        dict.map(_.mapValues(_._2.reverse).toList)\n    }","language":"scala"}
{"task_id":"MBSCP\/663","completion":"        \/\/ 2: 1, 3: 1, 5: 1, 7: 1, 11: 1\n        n mod x + 2 mod y + 2 mod x + 3 mod y + 5 mod x + 5 mod y + 7 mod x + 7 mod y + 11 mod x + 11 mod y + 15 mod x + 15 mod y + 17 mod x + 17 mod y + 19 mod x + 19 mod y <= n\n    }","language":"scala"}
{"task_id":"MBSCP\/664","completion":"        val result = 0\n        for(i = 1 to n\/2) {\n            if(i mod 2 == 0) result += i\n        }\n        result \/ i\n    }","language":"scala"}
{"task_id":"MBSCP\/665","completion":"        var first_elem : Int = num_list.head\n        num_list = num_list.tail.append(first_elem)\n        return num_list\n    }","language":"scala"}
{"task_id":"MBSCP\/666","completion":"        val chars = string.chars\n        val count = chars.filter(_.toChar == char).size\n        println(count)\n    }","language":"scala"}
{"task_id":"MBSCP\/667","completion":"        val str = string.toLowerCase()\n        var count = 0\n        for (i <- 0 until str.length) {\n            val char = str(i)\n            if (vowels(i).contains(char)) {\n                count += 1\n            }\n        }\n        println(count)\n    }","language":"scala"}
{"task_id":"MBSCP\/668","completion":"        if(string.length == 0)\n            string\n        else\n            if(string.startsWith(char))\n                replace(string[1:], char)\n            else\n                string.replaceAll(char, \"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/669","completion":"        \/\/ 1. Check whether the given Ip is a valid IPv4 address\n        Ip.matches(\"^(\\\\d{1,3}\\\\.){3}\\\\d{1,3}$\")\n            \/\/ 2. If the given ip is a valid ipv4 address, then print Valid IP address\n            ? println(\"Valid IP address\")\n            \/\/ 3. If the given ip is not a valid ipv4 address, then print Invalid IP address\n            : println(\"Invalid IP address\")\n    }","language":"scala"}
{"task_id":"MBSCP\/670","completion":"        if(nums.isEmpty) {\n            false\n        } else if {\n            val first = nums(0)\n            val last = nums(nums.size-1)\n            nums.size.toInt\n        } else {\n            false\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/671","completion":"        if (n == 0) {\n            return 0\n        }\n        n |= n - 1\n        return n\n    }","language":"scala"}
{"task_id":"MBSCP\/672","completion":"        val result = num1\n        val min = num2\n        if(num1 < min) min = num1\n        if(num2 < min) min = num2\n        result = result < min ? result : min\n        result = result < num3 ? result : num3\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/673","completion":"        val result = 0\n        list.foreach(_ => result = result * 10 + _)\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/674","completion":"        val wordSet = new HashSet[String]()\n        for (word in string.split(\" \")) {\n            wordSet.add(word)\n        }\n        val words = new Array[String]()\n        for (word in wordSet) {\n            words += word + \" \"\n        }\n        words.trim.mkString\n    }","language":"scala"}
{"task_id":"MBSCP\/675","completion":"        if (x >= m && y <= n) {\n            x + y\n        } else {\n            x + y\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/676","completion":"        val regex = \"[\\W]+\"\n        val str = text1.replaceAll(regex,\"\")\n        println(str)\n    }","language":"scala"}
{"task_id":"MBSCP\/677","completion":"        return a + b > c && b + c > a && c + a > b\n    }","language":"scala"}
{"task_id":"MBSCP\/678","completion":"        str1.replace(\/ \/g, \"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/679","completion":"        val k = ditionary.keySet[key]\n    }","language":"scala"}
{"task_id":"MBSCP\/680","completion":"        val result = (nums.length == 0 || nums.head < nums.tail)\n        result.or(\n            nums.tail.is(nums.head - 1)\n            && increasingTrend(nums.tail.tail.tail)\n        )\n    }","language":"scala"}
{"task_id":"MBSCP\/681","completion":"        \/\/ find the smallest prime divisor of a number\n        \/\/ (for example, find the smallest prime number that divides 100)\n    }","language":"scala"}
{"task_id":"MBSCP\/682","completion":"        nums1.map { n => nums2.map { m => n*m } }\n    }","language":"scala"}
{"task_id":"MBSCP\/683","completion":"        \/\/ write your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/684","completion":"        val size = str.size\n        val index = str.indexOf(x)\n        var count = 0\n\n        while(index >= 0 && index < size && count < size) {\n            count ++\n            index = str.indexOf(x, index + 1)\n        }\n\n        println(count)\n    }","language":"scala"}
{"task_id":"MBSCP\/685","completion":"        sum = 0\n        def isPrime(number : Int) : Boolean = {\n            number <= 1 ? false\n            : number > 1 ? true\n                : false\n        }\n        for (i \n\nYou don't have to return a value from your function. Just do what you need to do: sum the numbers from 1 to  `n` and  `return` (or in the case of Java, do something with the sum).\n\n\nThanks a lot. This helped a lot.\n\n\n\nI think, it is more simple, if you use this:\n\n\npublic static int sumOfPrimes(int n) {\n    boolean isPrime = true;\n\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            isPrime = false;\n        }\n    }\n\n    return isPrime ? n : 0;\n}\n\n\nAlso, take into consideration that for  `n = 2` ,","language":"scala"}
{"task_id":"MBSCP\/686","completion":"        (\n            \"Java is great! \\n\"\n            + \"You should learn Scala. \\n\"\n            + \"I'm here to help you. \\n\"\n        ).toLowerCase\n    }","language":"scala"}
{"task_id":"MBSCP\/687","completion":"        if (b == 0) {\n            return a\n        }\n        a = a % b\n        b = b % a\n        return recurGcd(b, a)\n    }","language":"scala"}
{"task_id":"MBSCP\/688","completion":"        \/\/ ...\n        println(\"Complex number with real part \" + a + \" and imaginary part \" + b + \" has length \" + length + \".\")\n    }","language":"scala"}
{"task_id":"MBSCP\/689","completion":"        val dp = new Array[Int](n + 1)\n        dp(0) = Integer.MAX_VALUE\n\n        for(i \n\nThis is the error you get. The problem is that  `dp` is not initialized as  `new Array[Int]` , but  `new Array[Int[n + 1]]` . As a result, when you try to call  `dp(0)` , you get  `ArrayIndexOutOfBoundsException: 0` , because it is trying to access the first element of the array, but there is no such element.\nBy the way, you have a lot of redundant code in your solution. The most common one is  `dp[i] = dp[i - 1]` , which is not necessary, but is recommended.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/690","completion":"        val result = new ListBuffer[Int]()\n        if (nums.isEmpty)\n            return result\n        result += nums.head\n        nums -= result\n        while !nums.isEmpty && nums.head == nums.tail\n            nums -= result\n        result += nums.head * nums.tail\n        return result\n    }","language":"scala"}
{"task_id":"MBSCP\/691","completion":"        map {\n            val map = new HashMap[Int, List[Int]]()\n            for (x \n\nThe output of this program is:\n\n\nMap(6->List(6, 2), 7->List(2, 8, 3), 8->List(9))\nMap(6->List(7, 3), 8->List(3, 9, 4), 9->List(10))\nMap(7->List(8, 4), 9->List(4, 10, 5), 10->List(11))\n\n\n\n\nI'd be really interested in seeing a more idiomatic way to write this. It's not quite clear to me what the point of the second `group` method is, or why it's there. (And the first is definitely a terrible way to write it.)\n\n@abarnert I agree, I should have written `group { ... }` in place of `groupElement`. The point is that I don't want to write a method `group` and use it for every pair of lists I want to group. I want","language":"scala"}
{"task_id":"MBSCP\/692","completion":"        N.div(10).rem(1).fold(0)(0) + N.div(10).rem(2).fold(0)(0)\n    }","language":"scala"}
{"task_id":"MBSCP\/693","completion":"        val re = \" +| +\"\n        text1.replaceAll(re, \" \").trim\n    }","language":"scala"}
{"task_id":"MBSCP\/694","completion":"        val result = new ArrayList[Int]()\n        val map_values = test_dict.values.toList\n        val map_keys = test_dict.keys.toList\n\n        map_keys.foreach(k =>\n            map_values(v => {\n                val set = new HashSet[Int]\n                v.foreach(i => set.add(i))\n                result = result + set\n            }\n        )\n    )\n        result.sort\n    }","language":"scala"}
{"task_id":"MBSCP\/695","completion":"        for (i \n\nIt's not that hard to write a recursive version that does this, but that's beyond the scope of your current question. If you just want to check one value against another, you can use the built-in  `==` operator, or the  `equals` method of the  `Object` class.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/696","completion":"        \/\/ TODO\n    }","language":"scala"}
{"task_id":"MBSCP\/697","completion":"        val counter = array_nums.map(x => if (x % 2 == 0) 1 else 0)\n        counter.sum\n    }","language":"scala"}
{"task_id":"MBSCP\/698","completion":"        val sorted = test_dict.sortBy(_.product)\n        sorted\n    }","language":"scala"}
{"task_id":"MBSCP\/699","completion":"        val bitCount : Map[Int, Int] = new HashMap[Int, Int]()\n        val n = str1.length\n        for (i <- 0 until n) {\n            bitCount += str1.substring(0 i + 1 ).toInt.toMap.map {\n                it.bitCount\n            }.map {\n                case c = 1 when 1 <= c <= 7 else c * 2\n            }\n        }\n\n        val s1 = str1.substring(0, 1)\n        val s2 = str2.substring(0, 1)\n        val maxDiff = Int (bitCount[s1].bitCount - bitCount[s2].bitCount)\n        val maxCount = bitCount[s1].bitCount - bitCount[s2].bitCount\n\n        if (maxCount > 0) {\n            \"Not Possible\"\n        } else {\n            val result = maxDiff + 1\n            println(result)\n        }","language":"scala"}
{"task_id":"MBSCP\/700","completion":"        \/\/ write your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/701","completion":"        val leftSum = arr.map(_.toDouble).sum\n        val rightSum = arr.map(_.toDouble).sum\n        val diff = rightSum - leftSum\n\n        for (i \n\nThis may be better than my solution, since I have a few more lines of code than necessary.\n\n\nThis was also very helpful.\n\n\n\n\n\nvar arr = [1,2,3,4,1,2,3];\nvar sum = 0;\nvar start = 0;\nvar end = arr.length - 1;\nvar diff = 0;\n\nfor (var i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum - arr[start] == diff) {\n        console.log(start);\n        start++;\n        end--;\n    }\n}\n\nif (sum - arr[start] != diff) {\n    console.log(-1);\n}\n\n\n\n\nThanks, but how do I implement it so that it will work for arrays of more","language":"scala"}
{"task_id":"MBSCP\/702","completion":"        if (arr.isEmpty) arr = List(1)\n        var max = arr.max\n        var min = arr.min\n        var range = max-min\n        var k = k>range? range : k\n        var result = min-k<0? 0 : min-k\n\n        return result\n    }","language":"scala"}
{"task_id":"MBSCP\/703","completion":"        d.containsKey(x)\n    }","language":"scala"}
{"task_id":"MBSCP\/704","completion":"        harmonicSumHelper(n, 0.0)\n    }","language":"scala"}
{"task_id":"MBSCP\/705","completion":"        \/\/ sort list by sublist lengths\n        list1.sortBy(_.size)\n        \/\/ sort list by sublist values\n        list1.sortBy(_.head.!!head, false)\n    }","language":"scala"}
{"task_id":"MBSCP\/706","completion":"        if(n > m) {\n            if(arr1[m] == arr2[n])\n                isSubset(arr1, m + 1, arr2, n - 1)\n            else\n                isSubset(arr1, m, arr2, n - 1)\n        } else {\n            return true\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/707","completion":"        (n & (n - 1)) == 0 ? 0 : 1\n    }","language":"scala"}
{"task_id":"MBSCP\/708","completion":"        val words = string.split(\" \")\n        val result = words.map(w => w.toLowerCase())\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/709","completion":"        val map = test_list.foldLeft(Map(Int -> 0)).mapValues(_+_)\n        val res = map.mapValues(s => \n            s.groupBy(s.map(_ => \"1\")).reduce((a, b) => a.getOrElse(0) + b.getOrElse(0), Map(Int -> 0))\n        )\n        res.mapValues(x => {\n            val str = x.entrySet.mkString(\", \")\n            str = str.replaceAll(\"(?<=,)\\\\d+\", \"\")\n            str = str.replaceAll(\"(?<=\\\\d)\\\\d+\", \"\")\n            return str\n        }).mkString(\"{\") + \"}\"\n    }","language":"scala"}
{"task_id":"MBSCP\/710","completion":"        val n1 = test_tup(0)\n        val n2 = test_tup(test_tup.length - 1)\n        List(n1, n2)\n    }","language":"scala"}
{"task_id":"MBSCP\/711","completion":"        \/\/Your code here\n        if (n < 10)\n            return true\n        var odd = n % 10\n        var evens = 0\n        var digits = n % 100\n\n        for (var i = 0; i < 5; i++)\n            if (digits % 10 == 0)\n                evens = digits \/ 10\n            else\n                evens = digits % 10\n\n        return odd == evens\n    }","language":"scala"}
{"task_id":"MBSCP\/712","completion":"        val seen = set.mutable.HashSet[Any]()\n        list1.foreach { item =>\n            if (seen.add(item)) println(item)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/713","completion":"        val result : Boolean = true\n        for (i \n\nThe code is running in scala REPL, but the solution is in java.\n\n\n\n\nI got this question here and this is the answer. I made a list of boolean (that I pass in the function) and then created a if else statement.\n\n\ndef checkValid(valid_values: List[Boolean]): Boolean = {\n    val list : List[Boolean] = []\n    if(valid_values.size == 4) {\n        list = [true, true, true, true]\n    } else if (valid_values.size == 3) {\n        list = [true, true, true]\n    } else if (valid_values.size == 2) {\n        list = [true, true]\n    } else if (valid_values.size == 1) {\n        list = [true]\n    }\n    val result: Boolean = true\n    for(i: Boolean) {\n        if(list[","language":"scala"}
{"task_id":"MBSCP\/714","completion":"        val pf : Map[Int, Int] = {1}\n        for (i <- 2; i <= n; i++) {\n            pf += map { k => pf(k) * i }\n        }\n        pf.filter(_.distinct.size == pf.size).size\n    }","language":"scala"}
{"task_id":"MBSCP\/715","completion":"        \/\/ your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/716","completion":"        if(a < 3)\n            a\n        else {\n            a = 4\n            (a - 3) * 2\n        }\n        0\n    }","language":"scala"}
{"task_id":"MBSCP\/717","completion":"        data.stream().reduce(0.0, { acc, val -> acc + val * val }) \/ data.size\n    }","language":"scala"}
{"task_id":"MBSCP\/718","completion":"        list1.map(_.swap)\n    }","language":"scala"}
{"task_id":"MBSCP\/719","completion":"        case text.endsWith(\"a\") && text.length >= 2 && text.length % 2 == 0 => \"Found a match!\"\n        else \"Not matched!\"\n    }","language":"scala"}
{"task_id":"MBSCP\/720","completion":"        test_tup ++ List(test_dict.asJava),\n    }","language":"scala"}
{"task_id":"MBSCP\/721","completion":"        val matrix = cost.map(_.map(_.toDouble).toList)\n        val minPath = minPathwithMinCost(cost, N)\n        val maxPath = minPathwithMaxCost(cost, N)\n        if (minPath < maxPath) {\n            val difference = maxPath - minPath\n            matrix.map(_.map(_.multiply(_.divide(_.sum(_), _), difference))).map(_.sum)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/722","completion":"        students match {\n            case _: (k, v) =>\n                filter(v, h, w) match {\n                    case _: v2 =>\n                        (k, v)\n                }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/723","completion":"        val res = nums1.map(n1 => nums2.map(n2 => n1 == n2 ? n1 : 0)).reduce(0, (acc, v) => acc + v);\n        println(res);\n    }","language":"scala"}
{"task_id":"MBSCP\/724","completion":"        base >= 2 && power >= 2 ? powerBaseSum(base, power - 1) + power * base : power * base\n    }","language":"scala"}
{"task_id":"MBSCP\/725","completion":"        val regex = \"\"\"^\"(.*?)\"[^\"]*\"\"\"\n        val result = text1.match(regex).asInstanceOf[List[String]]\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/726","completion":"      val a = test_tup.tail\n      val b = test_tup.head\n      if(test_tup.size == 1)\n        (a * b)\n      else multiplyElements(test_tup.drop(1))\n          .append(a * b)\n          .toList\n    }","language":"scala"}
{"task_id":"MBSCP\/727","completion":"        val p = Pattern.compile(\"[^a-zA-Z0-9]+\")\n        val m = p.matcher(S)\n        return m.replaceAll(\"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/728","completion":"        val r : List[Int] = new List[Int]\n\n        for (i \n\n\" OwnerDisplayName=\"user9652669\" LastActivityDate=\"2018-02-15T04:46:32.773\" CommentCount=\"0\" ContentLicense=\"CC BY-SA 3.0\" \/><\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/729","completion":"        nums1.map { x -> nums2.map { y -> x + y } }.flatten\n    }","language":"scala"}
{"task_id":"MBSCP\/730","completion":"        val seen = new HashSet[Any]\n        val result = new ArrayList[Any]\n        for (i \n\n\n\n\n\nThe key here is that you can use  `List.indexOf` to determine the index of each element in the list.  Then you can use the index to access the element itself.  If the index is the same, you can use the element to create a new list with only the elements you want to keep.  The following will remove all elements that are the same:\n\n\nnewList = oldList.map { \n    val index = (oldList.indexOf(it) == index && it != null).or(false)\n    if(index) oldList.remove(it)\n}<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/731","completion":"        \/\/ Your code here\n        \/\/ return \n    }","language":"scala"}
{"task_id":"MBSCP\/732","completion":"        val map = new java.util.HashMap[Char, Char](4);\n        map.put(' ', ':');\n        map.put(',', ':');\n        map.put('.', ':');\n        text.replace(new RegExp(\"|\".join(map.keySet()), \"g\"), it => map.get(it));\n    }","language":"scala"}
{"task_id":"MBSCP\/733","completion":"        \/\/ find first occurrence of x in A\n        \/\/ O(log(n))\n        val index = A.indexOf(x)\n        if (index >= 0) {\n            println(\"found it: \" + index)\n        } else {\n            println(\"did not find it\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/734","completion":"        val s = 0\n        val len = arr.length\n        if (len < n) {\n            s\n        }\n        else {\n            arr.each(_.mul)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/735","completion":"        if (n == 0) return 0;\n\n        if (n % 2 == 0) return n \/ 2;\n        else return 3 * n + 1;\n    }","language":"scala"}
{"task_id":"MBSCP\/736","completion":"        \/\/ Write your code here.\n        \/\/ The first element has index 0.\n        a match {\n            case Nil => a.size + 1\n            case _ => {\n                \/\/ Find the leftmost index in the sorted list.\n                a.filter(_.$ < x).head.map { case _: Int => _.$ }\n                    .reduce { case a, b -> a > b ? a : b } \/\/ If two indices are the same, find the minimum of them.\n                    .getOrElse { 0 } \/\/ If there are no indices with x as the first element, then the index is 0.\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/737","completion":"        \/\/ TODO: your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/738","completion":"        var k : Int = 1\n        var m : Double = 1.0\n        var nMinus1 = n - 1\n\n        \/\/ geometricSum(n) = 1 \/ ( 1 - 1\/n)\n        while (k <= nMinus1) {\n            m *= (k + 1.0) \/ k\n            k += 1\n        }\n        m\n    }","language":"scala"}
{"task_id":"MBSCP\/739","completion":"        val number = [1...n+1]\n        val triangularNumber = number(0) + number(1) + number(2)\n        var index = 3\n        for (i \n\nThis will give you the correct answer.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/740","completion":"        \/\/ Your code goes here.\n    }","language":"scala"}
{"task_id":"MBSCP\/741","completion":"        val map = s.chars.map { (x, y) => x }\n        map.foldLeft(true, (x, y) => x && y)\n    }","language":"scala"}
{"task_id":"MBSCP\/742","completion":"        val s = 1.0 \/ 2.0\n        val area = s * (s * s) * side * side\n        \/\/ val area = (s * (s * s) * side * side) ^ (1 \/ 3)\n        println(\"The area of the tetrahedron is $area\")\n    }","language":"scala"}
{"task_id":"MBSCP\/743","completion":"        var copy = new Array[Int](list1.length)\n        copy = list1.toArray\n        var temp = 0\n        var first = 0\n        var last = copy.length - 1\n        var temp = copy[first]\n        var temp = copy[last]\n        while (first <= last) {\n            copy[first] = copy[last]\n            copy[last] = temp\n            first += 1\n            last -= 1\n        }\n        var rotate = m - (n % m)\n        while (rotate > 0) {\n            copy[n % m] = copy[n % m + 1]\n            n = n % m + 1\n            rotate -= 1\n        }\n        copy[n % m] = temp\n        return copy\n    }","language":"scala"}
{"task_id":"MBSCP\/744","completion":"        test_tup.filter(element => element == null).isEmpty()\n    }","language":"scala"}
{"task_id":"MBSCP\/745","completion":"        val digits = range(1, endnum.length())\n        \/\/ TODO\n    }","language":"scala"}
{"task_id":"MBSCP\/746","completion":"        val c = 2.0 * Math.PI * Math.sin(a \/ 360.0 * 2.0 * Math.PI) \/ 360.0 \/ 360.0\n        if (r < 0) {\n            return \"none\"\n        } else if (r <= 2) {\n            return 0.0\n        } else {\n            val s = (2.0 * Math.PI * r) * (r - 2.0) \/ 360.0 \/ 2.0\n            return s * c\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/747","completion":"        val X_array = X.toArray.map(_.toInt)\n        val Y_array = Y.toArray.map(_.toInt)\n        val Z_array = Z.toArray.map(_.toInt)\n        val L = new List[Int]\n        for (i \n\nThe output is  `3` , so  `Reels` ,  `Reelsfor` ,  `ReelsforReels` and  `ReelsforReelsforReels` are the longest common subsequence.\n\n\nThanks, this is just what I was looking for.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/748","completion":"        val pattern = \"(?<=[a-z])(?=[A-Z])\"\n        str1 match { case x => pattern + x }\n    }","language":"scala"}
{"task_id":"MBSCP\/749","completion":"        nums_str.map(_.toInt).sortBy(_.identity)\n    }","language":"scala"}
{"task_id":"MBSCP\/750","completion":"        \/**\n         * 1. your code goes here\n         *\/\n    }","language":"scala"}
{"task_id":"MBSCP\/751","completion":"        if (i < arr.size - 1 && arr(i).compareTo(arr(i + 1)) > 0) {\n            false\n        }\n        if (i < arr.size - 2) {\n            if (arr(i).compareTo(arr(i + 2)) > 0) {\n                checkMinHeap(arr, i + 1)\n            } else {\n                checkMinHeap(arr, i)\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/752","completion":"        n - 1 + (n - 1) * (n - 1) + (n - 1) * (n - 1) * (n - 1)\n    }","language":"scala"}
{"task_id":"MBSCP\/753","completion":"        val res = test_list.filter(_.size > K).sorted(_.size.descending).take(K).toList\n        res.foreach(x => println(x))\n        res\n    }","language":"scala"}
{"task_id":"MBSCP\/754","completion":"        val r = new ArrayList[Int]()\n        for (i \n\nTry it online!\n\n\nThank you for your answer! I'll try it later.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/755","completion":"        val min = min(numbers)\n        val tmp = numbers.filter(i => i != min)\n        val secondMin = min(tmp) if tmp.size >= 2 ? min(tmp) : Double.NaN\n        if (secondMin != min) {\n            numbers.remove(secondMin)\n        }\n        secondMin\n    }","language":"scala"}
{"task_id":"MBSCP\/756","completion":"        \/\/ write your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/757","completion":"        val result = 0L\n        test_list.foreach(_.reverse).foreach(result + (test_list.head == test_list.tail ? 1 : 0))\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/758","completion":"        val list2 = list1.map(sublist => Map(sublist.map(a => a + 1), sublist.size).filter(_.gt(_)))\n        (list2.map(_ + _.size)).toSet\n    }","language":"scala"}
{"task_id":"MBSCP\/759","completion":"        val regex = \"^(-)?([0-9]{1,2})([0-9]{1,3})([0-9]{1,3})$\"\n        val result = regex.exec(num)\n\n        if (result != null && result.size() == 4) {\n            val group = result.get(1) != null ? result.get(1) : \"\"\n            var precision = result.get(2).toInt\n            var whole = result.get(3) != null ? result.get(3) : \"\"\n            var fraction = result.get(4).toInt\n\n            if (group == \"-\" && precision > 0) {\n                return false\n            }\n\n            if (precision > 2) {\n                return false\n            }\n\n            if (whole.length > 4) {\n                return false\n            }\n\n            if (fraction > 0 && fraction.length > precision) {\n                return false\n            }\n\n           ","language":"scala"}
{"task_id":"MBSCP\/760","completion":"        arr.size == n &&\n        arr.size == new HashSet(arr).size ?\n        \"YES\" :\n        \"NO\"\n    }","language":"scala"}
{"task_id":"MBSCP\/761","completion":"        \/\/ Your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/762","completion":"        monthnum3.toInt\n        (\n            0\n            , 30\n        )\n    }","language":"scala"}
{"task_id":"MBSCP\/763","completion":"        var result = arr.headOption.map(a => 0)\n\n        for (i \n\nThis is the output I get:\n\n\n$ .\/minDiff \n  Time: 0.07 s, Memory: 33.2 Mb\n  Result: 1\n\n\nCan someone help me out with this?\nEDIT: Thanks to @m1sp for pointing out that I was looking at the wrong input data.\nI now have the following code:\n\n\nobject Main extends App {\n    \/**\n     * You are an expert Scala programmer, and here is your task.\n     * Write a Scala function to find the minimum difference between any two elements in a given array.\n     * >>> findMinDiff(List(1, 5, 3, 19, 18, 25), 6)\n     * 1\n     * >>> findMinDiff(List(4, 3, 2, 6), 4)\n     * 1\n     * >>> findMinDiff(List(30, 5, 20, 9), 4)\n    ","language":"scala"}
{"task_id":"MBSCP\/764","completion":"        val charSet = set(Char)\n        val isNum = charSet.contains(Character.Number)\n        val isAlpha = charSet.contains(Character.isLetter)\n        val number = 1\n        str.split(\"\").map(_.toChar).foreach(isAlpha && (c => if (Character.isLetter(c)) number + 1))\n        str.split(\"\").map(_.toChar).foreach(isNum && (c => if (Character.isDigit(c)) number + 1))\n        (0 until number)\n    }","language":"scala"}
{"task_id":"MBSCP\/765","completion":"        \/\/ Your code here\n        def is_even = n % 2 == 0\n        def is_odd = !is_even\n        \/\/ Your code here\n        def is_p_even = (n \/ 2 + 1) * 2 == n\n        def is_p_odd = (n \/ 2) * 2 == n\n        def is_p_both = is_p_even && is_p_odd\n        if (is_even && is_p_even || is_odd && is_p_odd || is_p_both) {\n            println(n)\n        } else {\n            println(0)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/766","completion":"        l1 match {\n            case l2 :: List(l2.tail, l2.head) => pairWise(l2)\n            case List() => List()\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/767","completion":"        val pairs = arr.toSeq.zip(arr.toSeq.skip(1)).filter(_._1 < _._2).map(x => (x._1 + x._2).asInstanceOf[Int])\n        pairs.toScala\n    }","language":"scala"}
{"task_id":"MBSCP\/768","completion":"        x % 2 == 0 ? true : false\n    }","language":"scala"}
{"task_id":"MBSCP\/769","completion":"        val result = new ListBuffer[Int]()\n        for (i \n\nHope this helps.\nThe solution was inspired by the one by @pirho and @amit_g.\n\n\nYou are using a `var` for `i`. This is not how the `for` loop works.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/770","completion":"        \/\/ Write a function to sum odd numbers and fourth power of first n natural numbers\n    }","language":"scala"}
{"task_id":"MBSCP\/771","completion":"        val stack = new Stack[Character]()\n        for (ch in exp) {\n            val peek = stack.isEmpty ? '_' : stack.peek\n            if (ch == '{' && peek == '_') stack.push(ch)\n            if (ch == '[' && peek == '_') stack.push(ch)\n            if (ch == '(' && peek == '_') stack.push(ch)\n            if (ch == '}' && peek != '_') stack.pop\n            if (ch == ']' && peek != '_') stack.pop\n            if (ch == ')' && peek != '_') stack.pop\n            if (ch != '[' && ch != '{' && ch != '(' && ch != ']' && ch != '}') return false\n        }\n        val peek = stack.isEmpty ? '_' : stack.peek\n        return peek == '_'\n    }","language":"scala"}
{"task_id":"MBSCP\/772","completion":"        val arr = test_str.split(\" \")\n        val arr2 = arr.map(a => a.substring(0, K))\n        arr2.mkString(\" \")\n    }","language":"scala"}
{"task_id":"MBSCP\/773","completion":"        val words = text.split(\" \")\n        val patternSize = pattern.length\n        val occuranceList = new List[Any]()\n        val patternIndex = 0\n        for (i <-1 until words.length) {\n            val word = words[i]\n            val wordLength = word.length\n            val patternIndex = i + 1\n            if (wordLength < patternSize) {\n                break\n            }\n            val j = i + 1\n            while (j < words.length) {\n                val str = words[j]\n                val strLength = str.length\n                if (strLength < patternSize) {\n                    break\n                }\n                val patternStr = str.substring(0, patternSize)\n                if (patternStr == pattern) {\n                    occuranceList += (new List(word, patternIndex, j - 1))\n                    break\n                }\n                j += 1\n            }\n        }\n","language":"scala"}
{"task_id":"MBSCP\/774","completion":"        email match {\n            \"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\n        }\n        \"Invalid Email\"\n    }","language":"scala"}
{"task_id":"MBSCP\/775","completion":"        nums.iterate { index =>\n            if(index mod 2 != 0)\n                puts(\"There are odd numbers in the position #{index}\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/776","completion":"        val vowelSet = Set(Array(\"a\", \"e\", \"i\", \"o\", \"u\").toList)\n        val count = test_str.collect { case c : Char =>\n            val s = { c }.toSeq.map {\n                if (vowelSet.contains(s + c))\n                    1\n                else\n                    0\n            }.sum\n            println(s)\n        }\n        count\n    }","language":"scala"}
{"task_id":"MBSCP\/777","completion":"        var sum = 0\n        var set = Set()\n        arr.foreach(_ => set.add(_))\n\n        set.foreach(_ => {\n            if (n % _ == 0) {\n                sum += n \/ _\n            }\n        })\n\n        return sum\n    }","language":"scala"}
{"task_id":"MBSCP\/778","completion":"        val result : ListBuffer[List[Any]] = new ListBuffer[List[Any]]()\n        val curr : List[Any] = new ListBuffer[Any]()\n        list1.foreach {\n            val x = (x -> x)\n            if (!curr.isEmpty) {\n                if (curr.last.equals(x)) {\n                    curr.add(x)\n                } else {\n                    curr.foreach {\n                        result.add(curr.toList)\n                    }\n                    curr.clear()\n                }\n            }\n            curr.add(x)\n        }\n        if (!curr.isEmpty) {\n            curr.foreach {\n                result.add(curr.toList)\n            }\n        }\n        result.toList\n    }","language":"scala"}
{"task_id":"MBSCP\/779","completion":"        val map = new HashMap[List[Any], Int]()\n        for (i \n\nAnd here is the solution in Scala REPL:\n\n\nscala> object Main extends App {\n  |   def uniqueSublists(list1 : List[List[Any]]) : Map[List[Any], Int] = {\n  |       val map = new HashMap[List[Any], Int]()\n  |       for (i \n\nI hope you find the solution for your problem. Let me know if you have questions.\n\n\nThanks for your reply. Your code is a good start but unfortunately I am not allowed to use import statements (I am restricted to Java). I have updated my question to show the Java code I am trying to run. I've also added an update on the Scala REPL code.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/780","completion":"        val res = [List.empty[Int]]\n        for (i \n\nThe output of the last one should be like this.\n\n\nList(List(12, 15), List(11, 9), List(12, 18), List(15, 12), List(16, 21), List(15, 15))\n\n\n\n\nHi, thanks for your answer. I think that this is not what I am looking for. I would like to find combinations that include a given tuple. My tuples are all sorted.\n\n@m4x I changed the code, it should work now<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/781","completion":"        val divisors = divisors(n)\n        divisors.filter(_.modulo(n)).count() % 2 == 0 ? \"Even\" : \"Odd\"\n    }","language":"scala"}
{"task_id":"MBSCP\/782","completion":"        def length(arr : List[Int]) : Int = arr.size\n        def kMod(x : Int, y : Int): Int = x % y\n        def getKth(arr : List[Int], k : Int) : List[Int] = arr.take(k).toSeq\n        def findKth(arr : List[Int], k : Int, length : Int) : Int =\n            arr.filter(_.size % length == 0).reduce(0, (acc, n) => acc + n) +\n            arr.drop(k).reduce(0, (acc, n) => acc + n)\n\n        if (length(arr) == 1) return arr.head\n        if (length(arr) % 2 == 0) return findKth(arr, length(arr) \/ 2, length(arr))\n        else return findKth(arr, length(arr) \/ 2 + 1, length(arr))\n    }","language":"scala"}
{"task_id":"MBSCP\/783","completion":"        \/\/ Write your code here\n        val hsv = new Array[Double](3)\n        hsv[0] = 0\n        hsv[1] = 0\n        hsv[2] = 100\n    }","language":"scala"}
{"task_id":"MBSCP\/784","completion":"        if (list1.isEmpty)\n            return 0\n        else if (list1(0) % 2 == 0)\n            return list1(0) * list1(1) * list1(2)\n        else\n            return list1(0) * list1(1) * mulEvenOdd(list1 - 2)\n    }","language":"scala"}
{"task_id":"MBSCP\/785","completion":"        val arr = test_str.split(\",\")\n        arr.map(_.toInt).toList\n    }","language":"scala"}
{"task_id":"MBSCP\/786","completion":"        val n = a.size;\n        int i = n;\n        while (i > 0 && a(i - 1) > x) {\n            a(i) = a(i - 1);\n            i = i - 1;\n        }\n        a(i) = x;\n        return i;\n    }","language":"scala"}
{"task_id":"MBSCP\/787","completion":"        text match {\n            (a)(b)(a)(b)(a) => \"Found a match!\"\n            _ => \"Not matched!\"\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/788","completion":"        val res = List(test_str)\n        test_list.foreach {\n            res.add(it)\n        }\n        res\n    }","language":"scala"}
{"task_id":"MBSCP\/789","completion":"        \/\/ write your code here\n        1 * 2 * (s + l)\n    }","language":"scala"}
{"task_id":"MBSCP\/790","completion":"        nums.map { index =>\n            nums(index) % 2 == 0 ? true : false\n        }.reduce(_ == true ? true : false)\n    }","language":"scala"}
{"task_id":"MBSCP\/791","completion":"        val res = test_tup.map(_.map(_.filter(_.map(_.filter(_ != null)(_.toList))))).toList\n        res\n    }","language":"scala"}
{"task_id":"MBSCP\/792","completion":"        input_list.stream().map(i => i.size()).reduce(_ + _)\n    }","language":"scala"}
{"task_id":"MBSCP\/793","completion":"        for (i <- arr.length - 1; i >= 0; i--)\n            if (arr(i) == x) {\n                if (i == n - 1) return i\n                else return last(arr, x, n - 1)\n            }\n        return -1\n    }","language":"scala"}
{"task_id":"MBSCP\/794","completion":"        match {\n            case text.endsWith(\"b\") && text.startsWith(\"a\") => \"Found a match!\"\n            case _ => \"Not matched!\"\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/795","completion":"        val heap = Array[Pair[Double, Int]](items.size() - n + 1)\n        \/\/ add all items to the queue\n        items.forEach(item => heap.add(Pair(item.price, items.indexOf(item))))\n        \/\/ remove the top n items from the queue\n        for (i \n\nThe following code is the solution to the exercise, the function definition in the question should be added to  `Main.scala` file.\n\n\nobject Main extends App {\n    def main(args: Array[String]): Unit = {\n        val items = ...\n        println(cheapItems(items, 1))\n    }\n\n    \/**\n     * You are an expert Scala programmer, and here is your task.\n     * Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n     *\/\n    def cheapItems(items : List[Map[String, Any]], n : Int) : List[Map[String, Any]] = {\n        val heap = Array[Pair[","language":"scala"}
{"task_id":"MBSCP\/796","completion":"        val sum = 0\n        for (key \n\nThe second test case is\n\n\n    \/**\n     * \n     * @return sum of values in the map\n     *\/\n    def returnSum(dict : Map[String, Int]) : Int = {\n        val sum = 0\n        for (key \n\nThe result is\n\n\n5\n3\n4\n\n\n\n\nThis is really nice. However, I have just a quick follow up question: In your solution, how does it compare to the other two solutions?\n\nWhat's the difference between the two? And how does it compare to the other two solutions?\n\nThe main thing is that you are using Scala, and I'm using Java, so there is no problem of the type. In the second solution, you don't need to use `if (map.contains(key, value))`. In the first solution, you have to use `if (map.containsKey(key) &amp;&amp; map.containsValue(value))`. In the third solution, you can use `if (map.containsKey(key","language":"scala"}
{"task_id":"MBSCP\/797","completion":"        def total = 0\n        for(i <- l; i <= r; i += 2) total += i\n        println(total)\n    }","language":"scala"}
{"task_id":"MBSCP\/798","completion":"        val sum = arr.foldLeft(_ -> 0)(_ + _)\n        println(sum)\n        sum\n    }","language":"scala"}
{"task_id":"MBSCP\/799","completion":"        val mask = (1 << d) - 1\n        return (n << d) | (n & mask)\n    }","language":"scala"}
{"task_id":"MBSCP\/800","completion":"        text.trim.replaceAll(\"\\\\s+\", \"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/801","completion":"        if (x == y && y == z) {\n            println(3)\n        } else {\n            println(0)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/802","completion":"        arr.sort.foldLeft(0)(x => y => y + x)(n % arr.length)\n    }","language":"scala"}
{"task_id":"MBSCP\/803","completion":"        return (sqrt(n) % 1).toInt == 0\n    }","language":"scala"}
{"task_id":"MBSCP\/804","completion":"        arr.zip(arr.take(n-1)).map(_.mkString + \" \").flatten.map(_.replaceAll(\" \",\"\")).map(_.split(\",\")).map(_.map(_.toInteger)).filter(_.sum % 2 == 0).exists(_.size == 0)\n    }","language":"scala"}
{"task_id":"MBSCP\/805","completion":"        if (lists.isEmpty)\n            return List()\n        else {\n            val max = lists.head\n            for (lists.tail match {\n                case (t1, t2, t3) = max(t1, t2, t3) :\n                    case _ = t1 < t2 :\n                        max = t1\n                        case _ = t2 < t3 :\n                            max = t2\n                            case _ = t3 < t1 :\n                                max = t3\n                            _\n                    _\n            })\n            return max(lists.head, maxSumList(lists.tail))\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/806","completion":"        val count = 0\n        val maxCount = 0\n        val result = \"\"\n        val chars = [char for char in test_str]\n\n        for (i \n\nIf you want to learn more about Scala and Lambda expressions, please visit this link<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/807","completion":"        nums match {\n            case Nil => Nil\n            case n => n if n % 2 != 0 else Nil\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/808","completion":"        \/\/ Your code here.\n    }","language":"scala"}
{"task_id":"MBSCP\/809","completion":"        test_tup2.foreach(i => {\n            println(test_tup1.get(i) < i);\n        })\n    }","language":"scala"}
{"task_id":"MBSCP\/810","completion":"        val list = List.empty[String]\n        for (i <- a until b) {\n            for (j <- c until d) {\n                list += i + j\n            }\n        }\n        list\n    }","language":"scala"}
{"task_id":"MBSCP\/811","completion":"        if (test_list1.size != test_list2.size) {\n            print(\"The size of two lists should be equal\")\n        } else {\n            val list_set = test_list1.collect { case (a,b) => a ++ b }\n            test_list2.foreach(list_set.contains)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/812","completion":"        val l = street.split(\" \")\n        val l1 = l.map(_.toUpper).map(x => if (x == \"ROAD\") \"Rd\" else x)\n        l1.mkString(\"\")\n    }","language":"scala"}
{"task_id":"MBSCP\/813","completion":"        val strLength = str1.length\n        println(strLength)\n        \/\/ write your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/814","completion":"        \/\/ code here\n        if (p == 1) {\n            return q * 2;\n        }\n        else if (q == 1) {\n            return p * 2;\n        }\n        else {\n            return rombusArea(p - 1, q) + rombusArea(p, q - 1);\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/815","completion":"        val result = new Array[Int](n)\n        result(0) = new Array[Int](arr)\n        for (i \n\nOutput\n\n\n0 0 0 1 1 1 1 2 2 2<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/816","completion":"        val test_list = test_tup.toList\n        test_list\n    }","language":"scala"}
{"task_id":"MBSCP\/817","completion":"        nums.filter(_.mod(m).eq(0).and(n.mod(m).eq(0)).asScala.fold(List())\n    }","language":"scala"}
{"task_id":"MBSCP\/818","completion":"        \/\/ TODO: Add your code here\n        \/\/ FIXME: write your code in scala\n    }","language":"scala"}
{"task_id":"MBSCP\/819","completion":"        \/\/ 1. Create an empty list to store the result.\n        \/\/ 2. Iterate through the list.\n        \/\/ 3. If the current element is equal to the next element,\n        \/\/    add to the result list the current element.\n        \/\/ 4. If the current element is greater than the next element,\n        \/\/    add the current element to the result list.\n        \/\/ 5. If the current element is less than the next element,\n        \/\/    move the index to the next element.\n        \/\/ 6. Continue this process until the end of the list.\n        ListBuffer[Int]()\n    }","language":"scala"}
{"task_id":"MBSCP\/820","completion":"        monthnum1 >= 1 && monthnum1 <= 12 \n    }","language":"scala"}
{"task_id":"MBSCP\/821","completion":"        dict1.merge(dict2);\n    }","language":"scala"}
{"task_id":"MBSCP\/822","completion":"        if (p.length() > 8 && p.length() < 16) {\n            for (i <- 0 until p.length()) {\n                if (i > 3 && i < p.length() - 3) {\n                    if (p(i) == p(i + 1) && p(i) == p(i + 2)) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }","language":"scala"}
{"task_id":"MBSCP\/823","completion":"        \/\/ Write your code here\n        \/*\n        Sample input:\n        \"dreams for dreams makes life fun\"\n        \"makes\"\n\n        Sample output:\n        \"string doesnt start with the given substring\"\n\n        Sample input:\n        \"Hi there how are you Hi alex\"\n        \"Hi\"\n\n        Sample output:\n        \"string starts with the given substring\"\n\n        Sample input:\n        \"Its been a long day\"\n        \"been\"\n\n        Sample output:\n        \"string doesnt start with the given substring\"\n        *\/\n    }","language":"scala"}
{"task_id":"MBSCP\/824","completion":"        l match {\n            case n => n % 2 == 0 ? l : l + n\n            case _ => l\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/825","completion":"        \/\/ your code here\n        nums.map(_ => list_index(_))\n    }","language":"scala"}
{"task_id":"MBSCP\/826","completion":"        if(a + b <= c || a + c <= b || b + c <= a) {\n            \"Right-angled Triangle\"\n        } else if (a == b && b == c) {\n            \"Equilateral Triangle\"\n        } else if (a == b || b == c || a == c) {\n            \"Isosceles Triangle\"\n        } else {\n            \"Obtuse-angled Triangle\"\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/827","completion":"        val list2 = list1.map { (a, b, c, d) => a + b + c + d }\n        list2(C).sum\n    }","language":"scala"}
{"task_id":"MBSCP\/828","completion":"        val l : List[Int] = []\n        l += string.replaceAll(\"[^a-zA-Z]\", \"\").length\n        l += string.replaceAll(\"[^0-9]\", \"\").length\n        l += string.replaceAll(\"[^\\\\x20-\\\\x7E]\", \"\").length\n        l\n    }","language":"scala"}
{"task_id":"MBSCP\/829","completion":"        \/\/ Your code here.\n        val dict = new HashMap[String, Int]()\n\n        input.foreach(s => {\n            if (dict.containsKey(s)) {\n                dict[s] += 1\n            } else {\n                dict[s] = 1\n            }\n        })\n\n        val max = dict.max\n        max.foreach(k => {\n            if (dict[k] == max) {\n                println(k)\n            }\n        })\n    }","language":"scala"}
{"task_id":"MBSCP\/830","completion":"        val rounding = BigDecimal(a).setScale(digits, RoundingMode.HALF_UP)\n        rounding.doubleValue\n    }","language":"scala"}
{"task_id":"MBSCP\/831","completion":"        arr.takeWhile(_ != 0).toList.\n            zip(arr.dropWhile(_ != 0)).\n            filter(e => e._2 == e._1).\n            size == n\n    }","language":"scala"}
{"task_id":"MBSCP\/832","completion":"        val pattern = \"(-?\\d+)\"\n        val matcher = input.replaceAll(pattern, \"$0 $0\").matcher(\"\")\n        var maxNum = -Infinity\n\n        while (matcher.find()) {\n            maxNum = Math.max(Integer.parseInt(matcher.group(1)), maxNum)\n        }\n\n        println(maxNum)\n    }","language":"scala"}
{"task_id":"MBSCP\/833","completion":"        \/\/ your code goes here\n    }","language":"scala"}
{"task_id":"MBSCP\/834","completion":"        List(List(1, 2, 3), List(8, 9, 4), List(7, 6, 5))\n    }","language":"scala"}
{"task_id":"MBSCP\/835","completion":"        return (y2 - y1) \/ (x2 - x1)\n    }","language":"scala"}
{"task_id":"MBSCP\/836","completion":"        val maxSum = -1\n        for (i \n        }","language":"scala"}
{"task_id":"MBSCP\/837","completion":"        var res : Int = 0\n        for (i \n    }","language":"scala"}
{"task_id":"MBSCP\/838","completion":"        val set1 = set(s1.toCharArray)\n        val set2 = set(s2.toCharArray)\n        if(set1.size != set2.size) {\n            return -1\n        }\n        val s1s2 = s1 + s2\n        val s2s1 = s2 + s1\n        val set1s2 = set(s1s2.toCharArray)\n        val set2s1 = set(s2s1.toCharArray)\n        if(set1s2.size != set2s1.size) {\n            return -1\n        }\n        val count = s1s2.replaceAll(s1, \"\").length\n        val map = Map(s1s2.replaceAll(s1, \"\").split(\"\").zipWithIndex)\n        val pairs = map.filter(i => i._2 > 0).map { case (pair, idx) => pair.map(j => s1s2[j]) }.toList\n        val setPairs = set(pairs","language":"scala"}
{"task_id":"MBSCP\/839","completion":"        val tup2: List[List[Any]] = []\n        for (i \n\nPrints:\n\n\nList(List(\"Abhishek\", 29), List(\"Amana\", 28), List(\"B\", \"C\"), List(\"Nikhil\", 21), List(\"Zenat\", 30))\nList(List(\"aa\", 30), List(\"aaaa\", 28), List(\"bab\", 29), List(\"bb\", 21), List(\"csa\", \"C\"))\nList(List(\"Ayesha\", 30), List(\"G\", \"H\"), List(\"Sai\", 21), List(\"Sarala\", 28), List(\"Suman\", 29))\n\n\n\n\nThanks a lot. Works great. I have one question though. If I have the following data:\n\n`List(List(\"Amana\", 28), List(\"Zenat\", 30), List(\"Abhishek\", 29), List(\"Nikhil\", 21), List(\"B\", \"C\"))`\n\nHow do I write the sortTuple method?\n\n@zvona I added an example of how to","language":"scala"}
{"task_id":"MBSCP\/840","completion":"        val d = b * b - 4 * a * c\n        if (d < 0) {\n            return \"No\"\n        } else if (d == 0) {\n            return \"Yes\"\n        } else {\n            return \"Yes\"\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/841","completion":"        def mergeAndCountInv(arr : List[Int], left : Int, mid : Int, right : Int) : Int = {\n            if (mid == left || mid == right) {\n                result = 0\n            } else {\n                leftInvCount = getInvCount(arr, left)\n                rightInvCount = getInvCount(arr, mid)\n                count = (leftInvCount + rightInvCount) - (leftInvCount + rightInvCount)\n                result = count < 0 ? count * -1 : count\n            }\n            return result\n        }\n\n        result = 0\n        if (n == 1) {\n            result = 0\n        } else {\n            mid = (n \/ 2) - 1\n            left = 0\n            right = n - 1\n            leftInvCount = getInvCount(arr, left)\n            rightInvCount = getInvCount(arr,","language":"scala"}
{"task_id":"MBSCP\/842","completion":"        arr.groupBy(_._2) { it.1.size() % 2 == 1 }.map { case (k, v) => v.min() }._2\n    }","language":"scala"}
{"task_id":"MBSCP\/843","completion":"        val heap = new PriorityQueue[Int](n)\n        for (p < primes.size && p <= n) heap.offer(primes(p));\n        var i = 0;\n        while (heap.size > 0 && i < n) {\n            val res = heap.poll();\n            if (res != heap.peek()) heap.offer(res);\n            i++;\n        }\n        if (i == n) return heap.peek();\n    }","language":"scala"}
{"task_id":"MBSCP\/844","completion":"        val odd = n \/ 2\n        val even = n - odd\n        val list = (0 until n).collect { i => if (i % 2 == 0) even else odd }\n        list.get(k)\n    }","language":"scala"}
{"task_id":"MBSCP\/845","completion":"        \/\/ ...\n    }","language":"scala"}
{"task_id":"MBSCP\/846","completion":"        val result = 0\n        val platform = arr.map { x => x\/100 }\n        val index = 0\n        var depIndex = 0\n        for (i < n ; i++) {\n            while(depIndex < dep.length && platform(i).isGt(dep(depIndex))) {\n                result += 1\n                depIndex += 1\n            }\n        }\n        return result\n    }","language":"scala"}
{"task_id":"MBSCP\/847","completion":"        val result = new ListBuffer[Int]()\n        xs.foreach(result.append)\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/848","completion":"        (base1 + base2) * height \/ 2\n    }","language":"scala"}
{"task_id":"MBSCP\/849","completion":"        var i = 2\n        var sum = 0\n        while (i <= N) {\n            if (N % i == 0) {\n                sum += i\n                N \/= i\n            }\n            else {\n                i += 1\n            }\n        }\n        println(sum)\n    }","language":"scala"}
{"task_id":"MBSCP\/850","completion":"        val result : Boolean = a + b > c && a + c > b && b + c > a \/\/ a + b + c > 180 (180 = 360)\n        println(\"Triangle exists?: \" + result)\n    }","language":"scala"}
{"task_id":"MBSCP\/851","completion":"        val n = (n: Int) => n % 2 == 0 ? (n \/ 2) : 1\n        val s = (s: Int) => s % 2 == 0 ? s \/ 2 : s\n        val sum = s(Sum + n(N - 1)) + s(Sum + n(N))\n        if (n(sum) != 1)\n            sumOfInverseDivisors(n(sum), Sum)\n    }","language":"scala"}
{"task_id":"MBSCP\/852","completion":"        \/\/ your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/853","completion":"        n match {\n            case 0 => 0\n            case x => x match {\n                case 0 => 0\n                case y => y * 2 - 1 match {\n                    case 0 => 0\n                    case z => z + sumOfOddFactors(y * 2 - 1)\n                }\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/854","completion":"        val q = new ArrayDeque[Int]\n        val maxHeap = new PriorityQueue[Int]\n        rawheap.foreach(x => q.enqueue(x))\n        while(!q.isEmpty()) {\n            maxHeap.enqueue(q.dequeue())\n        }\n        while(!maxHeap.isEmpty()) {\n            q.enqueue(maxHeap.dequeue().element)\n        }\n        q.foreach(x => println(x))\n    }","language":"scala"}
{"task_id":"MBSCP\/855","completion":"        if (x % 2 == 0)\n            true\n        else\n            false\n    }","language":"scala"}
{"task_id":"MBSCP\/856","completion":"        val dp : Int = new Array[n + 1]\n        dp(0) = 0\n\n        for (i <- 0 until n) {\n            dp(i) = Integer.MAX_VALUE\n        }\n\n        for (i <- 1 until n) {\n            for (j <- i until n) {\n                if (arr(i) > arr(j)) {\n                    dp(j) = Math.min(dp(j), dp(i) + 1)\n                }\n            }\n        }\n\n        val minSwaps = dp(n)\n        println(minSwaps)\n    }","language":"scala"}
{"task_id":"MBSCP\/857","completion":"        list1.map(new { s => new List(s.split(\"\")) }).toList\n    }","language":"scala"}
{"task_id":"MBSCP\/858","completion":"        input_list.flatten.map(_.size).fold(_ + 1)\n    }","language":"scala"}
{"task_id":"MBSCP\/859","completion":"        my_list match {\n            case Nil => List()\n            case x => subLists(my_list - x) ++ List(x)\n            case y => subLists(my_list - y) ++ List(x - y)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/860","completion":"        if(string != null) {\n            val regex = \"^[a-zA-Z0-9]*$\"\n            if (!string.matches(regex))\n                string = \"Discard\"\n        }\n        string\n    }","language":"scala"}
{"task_id":"MBSCP\/861","completion":"        texts match {\n            case (text, anagram) => anagram in text\n                if (text.length > str.length)\n                    text = text.takeWhile {\n                        (char, index) => char == str[index]\n                    }\n                if (text.length == str.length)\n                    text = text.takeWhile {\n                        (char, index) => char == str[index] || char == str[index + 1]\n                    }\n            case _ => List(str)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/862","completion":"        val words = text.split(\" \")\n        val nWords = words.length\n        val nWordsOccurrences = nWords.map(w => (w, 1)).foldLeft(Map.empty[Int, Int])\n        val nWordsOccurrencesKeys = nWordsOccurrences.keys\n        nWordsOccurrencesKeys.sortBy { it.toInt }\n        nWordsOccurrencesKeys.takeWhile { it < n }.forEach(w => nWordsOccurrences.put(w, nWordsOccurrences.get(w) + 1))\n        nWordsOccurrencesKeys.forEach(w => nWordsOccurrences.put(w, nWordsOccurrences.get(w) \/ nWords))\n        nWordsOccurrences.mapValues(v => List(w, v)).toList\n    }","language":"scala"}
{"task_id":"MBSCP\/863","completion":"        arr ! % List(1, 2, 2, 3).reverse % {\n            val a = arr.dropWhile(_ < n)\n            val b = arr.takeWhile(_ > n)\n            a.reverse % {\n                if (a == b)\n                    case _ < (a + b) \/ 2 :\n                    case _ > (a + b) \/ 2 :\n                        val d = a.tail\n                        (d + b) \/ 2\n                else\n                    (a + b) \/ 2\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/864","completion":"        texts.filter(_.length > 2)\n        .filter(_.startsWith(\"a\"))\n        .filter(_.endsWith(\"a\"))\n        .map(_.reverse)\n        .filter(_.equals(_.reverse(_.head)))\n        .map(_.reverse)\n        .map(_.head)\n        .toList\n    }","language":"scala"}
{"task_id":"MBSCP\/865","completion":"        nums.map(x => n * x)\n    }","language":"scala"}
{"task_id":"MBSCP\/866","completion":"        val monthname = monthname2\n        val d = new Date()\n        val month = d.getMonth()\n        val monthname = monthname2\n        println(monthname2 + \" is \" + month + \"th month\")\n        if (monthname2 == \"February\") {\n            println(\"true\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/867","completion":"        \/\/ the total sum\n        val total = arr.foldLeft(0)(+=_._2)\n\n        \/\/ the number of even numbers to add\n        val evenNum = total % 2 == 0 ? total \/ 2 : total \/ 2 + 1\n\n        \/\/ the number of negative numbers to add\n        val negativeNum = arr.length.filter(_._1 < 0).sum\n\n        \/\/ the final result\n        val result = evenNum - negativeNum\n        if (result > n) {\n            result\n        } else {\n            n\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/868","completion":"        a.split(\"\\\\s\").last.length.toInt\n    }","language":"scala"}
{"task_id":"MBSCP\/869","completion":"        \/\/ Your solution goes here.\n        return\n    }","language":"scala"}
{"task_id":"MBSCP\/870","completion":"        nums.map(_.toInt).filter(_.isPositive).sum\n    }","language":"scala"}
{"task_id":"MBSCP\/871","completion":"        string1.length == string2.length &&\n        string1.repeat(string2.length).contains(string2)\n    }","language":"scala"}
{"task_id":"MBSCP\/872","completion":"        if (list1 == null) list1 = List()\n        if (list2 == null) list2 = List()\n\n        val firstList = list1.head\n        val secondList = list2.head\n\n        while (firstList != null && secondList != null) {\n            if (firstList.head == secondList.head) {\n                firstList = firstList.tail\n                secondList = secondList.tail\n            } else return false\n        }\n\n        return firstList == null && secondList == null\n    }","language":"scala"}
{"task_id":"MBSCP\/873","completion":"        if (n <= 1) return n\n        else return fibonacci(n - 1) + fibonacci(n - 2)\n    }","language":"scala"}
{"task_id":"MBSCP\/874","completion":"        str1 match {\n            case _ => false\n            case s => str2 == s + s\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/875","completion":"        val l = test_list.map { case a :: List(Int, Int) => a }.flatten\n        val sorted = l.sort { case (a, b) => b - a }\n\n        \/\/ for each pair of elements in the list, find their difference\n        \/\/ the answer is the minimum difference\n        sorted.foldLeft(0)(1 + {\n            case (a, b) => b - a\n        })\n    }","language":"scala"}
{"task_id":"MBSCP\/876","completion":"        def gcd(x : Int, y : Int): Int = {\n            def gcd2(x : Int, y : Int) : Int = {\n                if (x < y) {\n                    x, y = y, x\n                }\n                if (y == 0) {\n                    return x\n                } else {\n                    return gcd2(y, x % y)\n                }\n            }\n            gcd2(x, y)\n        }\n        x * y \/ gcd(x, y)\n    }","language":"scala"}
{"task_id":"MBSCP\/877","completion":"        val s = str.toCharArray\n        val result = Array.empty[Character](s.length, Character)\n        for (i <- 0 until s.length) {\n            if (s(i) != ' ') {\n                result(i, s(i))\n            }\n        }\n        val sorted = result.sorted.toList\n        sorted.zipWithIndex.map { case (i, c) => s(i) }.mkString\n    }","language":"scala"}
{"task_id":"MBSCP\/878","completion":"        val count = K.size\n\n        val map = test_tuple.map(_.sum)\n        val result = map.filter(_.size == count).size\n\n        if (result == count) true\n        else false\n    }","language":"scala"}
{"task_id":"MBSCP\/879","completion":"        text match \/a(.)(.)*b\/\n    }","language":"scala"}
{"task_id":"MBSCP\/880","completion":"        if ((b*b - 4*a*c) < 0) {\n            return \"No solutions\"\n        }\n        var sol = 0\n        var a2 : Int = a*a\n        var b2 : Int = b*b\n        var c2 : Int = c*c\n        var b2 = b2 - 4*a2*c\n        var sqroot : Int = b2 > 0 ? b2 : -b2\n        sqroot = sqroot \/ (2*a2)\n        if (sqroot == 1) {\n            sol = 1\n        } else if (sqroot >= 0) {\n            sol = 2\n        }\n        if (sol == 0) {\n            return \"No solutions\"\n        } else if (sol == 1) {\n            return \"1 solution\"\n        } else {\n            return sol + \" solutions\"\n       ","language":"scala"}
{"task_id":"MBSCP\/881","completion":"        val sum = 0\n        if (list1.size == 0)\n            return 0\n        sum = list1.head.val + sumEvenOdd(list1.tail)\n        if ((list1.head.val & 1) == 0)\n            sum\n        return sum\n    }","language":"scala"}
{"task_id":"MBSCP\/882","completion":"        (2 * b) + (2 * h) + (b + h)\n    }","language":"scala"}
{"task_id":"MBSCP\/883","completion":"        nums.filter(_.divmod(m, n)._._1 == 0)\n    }","language":"scala"}
{"task_id":"MBSCP\/884","completion":"        n >= l && n <= r\n    }","language":"scala"}
{"task_id":"MBSCP\/885","completion":"        val set1 = new HashSet[Character](str1.length)\n        val set2 = new HashSet[Character](str2.length)\n        if(str1.length == str2.length) {\n            for (i <- 0 until str1.length) {\n                set1(i) = str1(i)\n                set2(i) = str2(i)\n            }\n            if(set1 == set2) {\n                println(true)\n            } else {\n                println(false)\n            }\n        } else {\n            println(false)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/886","completion":"        val sum = 0.0\n        for (i \n\nIn this code, I will not give you a solution. I will give you the code.\n\n\nThanks a lot! This is exactly what I wanted to know.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/887","completion":"        n > 0 && (n & 1) == 1\n    }","language":"scala"}
{"task_id":"MBSCP\/888","completion":"        val res = test_tup1.map { \n            \/\/ List of Tuple [Int, Int]\n            val t1 = it.head\n            val t2 = it.tail\n            \/\/ List of Tuple [Int, Int]\n            val t3 = it.head\n            val t4 = it.tail\n            \/\/ List of Tuple [Int, Int]\n            val t5 = it.head\n            val t6 = it.tail\n            \/\/ List of Tuple [Int, Int]\n            val t7 = it.head\n            val t8 = it.tail\n            \/\/ List of Tuple [Int, Int]\n            val t9 = it.head\n            val t10 = it.tail\n            \/\/ List of Tuple [Int, Int]\n            val t11 = it.head\n            val t12 = it.tail\n            \/\/ List of Tuple [Int, Int]\n            val t13 = it.head\n            val t14 = it.tail\n            \/\/ List of Tuple [Int,","language":"scala"}
{"task_id":"MBSCP\/889","completion":"        val newList = lists.map { it.reverse }.flatten\n        newList\n    }","language":"scala"}
{"task_id":"MBSCP\/890","completion":"        \/\/ Find n-th element in arr2 in arr1\n        val index = arr1.indexOf(n, 0)\n        if (index < 0) {\n            println(\"Element not found\")\n            return\n        }\n\n        \/\/ Find the index of n-th element in arr2 in arr1\n        val index2 = arr2.indexOf(n, 0)\n\n        \/\/ Compare the two indices and return the larger one\n        if (index < index2) {\n            println(index2)\n        } else {\n            println(index)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/891","completion":"        (A.toInt + B.toInt).toString.length == (A.toInt + B.toInt).toString.length\n    }","language":"scala"}
{"task_id":"MBSCP\/892","completion":"        text match {\n            case _ => \"\"\n            case x => removeSpaces(x + y)\n            case s => removeSpaces(s.trim())\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/893","completion":"        lst.map(x => x.last).flatten\n    }","language":"scala"}
{"task_id":"MBSCP\/894","completion":"        val list = test_str.split(\",\")\n        list.map(_.toDouble)\n        list.toList\n    }","language":"scala"}
{"task_id":"MBSCP\/895","completion":"        val n = A.size\n        val dp = Array(n + 1, Int)\n        dp(0, 0, A)\n        for (i in 1 until n) {\n            dp(i, max(dp(i - 1, A[i] + dp(i - 1, A[i - 1], A)), dp(i - 1, 0, A)))\n        }\n        dp.foreach(println)\n    }","language":"scala"}
{"task_id":"MBSCP\/896","completion":"        tuples match {\n            case Nil => tuples\n            case _ => Nil\n            case t => sortListLast(filter(t_ => !Nil, t)) ++ t\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/897","completion":"        val wordSet = Set(word)\n        val sentenceSet = Set(sentence.split(\"\\\\s+\"))\n\n        val isWordInSentence = sentenceSet.intersect(wordSet).empty\n\n        if (isWordInSentence) {\n            println(word + \" is present in \" + sentence)\n        } else {\n            println(word + \" is not present in \" + sentence)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/898","completion":"        numbers match {\n            case Nil => List.empty\n            case (head, tail) => if (head == Nil) tail else tail match {\n                case x => List(x)\n                case (x, ys) => x match {\n                    case y => ys match {\n                        case z => y match {\n                            case v => z == Nil ? ys : y :: extractElements(z, n - 1)\n                            case _ => List.empty\n                        }\n                    }\n                }\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/899","completion":"        \/\/ TODO: Your code here\n    }","language":"scala"}
{"task_id":"MBSCP\/900","completion":"        val firstNum = string.substring(0, string.indexOf(\"-\"))\n        val secondNum = string.substring(string.indexOf(\"-\") + 1)\n        secondNum.replaceAll(\"\\\\D+\", \"\")\n        secondNum.length() > 1 ? false : true\n    }","language":"scala"}
{"task_id":"MBSCP\/901","completion":"        var smallest = 1\n        var curr = smallest\n        while(true){\n            if(curr % n == 0)\n                break\n            curr = curr + 1\n            if(curr == smallest)\n                curr = smallest + 1\n        }\n        println(\"Smallest number is: $curr\")\n    }","language":"scala"}
{"task_id":"MBSCP\/902","completion":"        val d3 = new HashMap[String, Int]\n        d1.forEach((k, v) => d3.put(k, v))\n        d2.forEach((k, v) => d3.merge(k, v, (v1, v2) => v1 + v2))\n        d3\n    }","language":"scala"}
{"task_id":"MBSCP\/903","completion":"        n.bitCount() - 1\n    }","language":"scala"}
{"task_id":"MBSCP\/904","completion":"        x % 2 == 0\n    }","language":"scala"}
{"task_id":"MBSCP\/905","completion":"        \/\/ Implement the sumOfSquare function\n        ...\n    }","language":"scala"}
{"task_id":"MBSCP\/906","completion":"        val regex = \"\/(\\d{4})(\\d{2})(\\d{2})\/\"\n        val matcher = url.split(regex)[1].matches(regex)\n        if (matcher.find())\n            List(List(matcher(1, 2, 3)))\n    }","language":"scala"}
{"task_id":"MBSCP\/907","completion":"        val numbers = range(1, n + 1)\n        \/\/ TODO: Your code here!\n    }","language":"scala"}
{"task_id":"MBSCP\/908","completion":"        \/\/ Your code here.\n        var first = arr[0]\n        var last = arr[arr.length - 1]\n        if (first == last) return first\n        if (first > last) arr = arr.reverse\n\n        var mid = (first + last) \/ 2\n        if (arr(mid).equals(n)) {\n            return mid\n        } else if (n < arr[mid]) {\n            return findFixedPoint(arr.slice(0, mid), n)\n        } else {\n            return findFixedPoint(arr.slice(mid + 1, arr.length), n)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/909","completion":"        if(num < 10) {\n            return -1\n        }\n        num = num % 10 * 10 + num \/ 10 % 10\n        if(num == num \/ 10) {\n            num = num \/ 10 - 1\n        }\n        num = (num % 10 * 10 + num \/ 10) - 1\n        if(num < 0) {\n            num = 9\n        }\n        return num\n    }","language":"scala"}
{"task_id":"MBSCP\/910","completion":"        val date = \"01\/\" + m + \"\/\" + d + \"\/\" + y\n        val date2 = date.split(\"\/\")\n        val date3 = date2.map(_.toInt)\n        val date4 = date3.map(y - 1900)\n        val date5 = date4.map(d - 1)\n        val date6 = date5.map(m - 1)\n        val date7 = date6.map(m + 12)\n        val date8 = date7.map(m - 1)\n        val date9 = date8.map(m + 12)\n        val date10 = date9.map(y - 1900)\n        date10.map(_ + 1)\n        date10.map(d)\n        date10.map(m)\n        val date11 = date10.map(_ + 1)\n        date11.map(d)\n        date11.map(m)\n        val date12 = date11.map(_ ","language":"scala"}
{"task_id":"MBSCP\/911","completion":"        val heap = new PriorityQueue[Int]()\n        for (i \n\nThe problem with the above solution is that it runs O(n log n) time, but the heap solution has O(n) space, and it is easily expandable to more values.\n\n\nPlease provide the complete code of `PriorityQueue` class, along with its definition.\n\n@AnkurJain Thanks, I've edited it.\n\nI didn't quite get the question, but `PriorityQueue` is part of standard Java library, right?\n\n@AnkurJain Yes, it is part of standard Java library.\n\n\n\nYou are on the right track with your algorithm.\nThe only thing you need to change is:\n\n\nPriorityQueue<int> heap = new PriorityQueue<int>();\n<\/int><\/int>\n\nThe above code is creating a new  `PriorityQueue` every time the  `main` function is executed.  The reason you were getting O(n) memory usage is because there is only one  `PriorityQueue` , which holds references to the data that it has already been sorted.  Every time you add something to the  `","language":"scala"}
{"task_id":"MBSCP\/912","completion":"        val ln = log(n) \/ log(m)\n        val mLn = ln * m\n        val L = mLn.toInt\n        val B = m - L\n        if (B > 1) {\n            val ans = (L + B - 1) \/ B + 1\n            println(ans)\n        } else {\n            println(L)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/913","completion":"        val string2 = string.replaceAll(\"\\\\D*$\", \"\")\n        return string2.isEmpty()\n    }","language":"scala"}
{"task_id":"MBSCP\/914","completion":"        \/**\n         * @type {Int}\n         *\/\n        var c1 = 0\n        \/**\n         * @type {Int}\n         *\/\n        var c2 = 0\n        for (i \n\nIn case you want to learn Scala I suggest the tutorial: http:\/\/www.scala-lang.org\/old\/node\/98\nIn case you want to learn Java I suggest this video: https:\/\/www.youtube.com\/watch?v=Jj8LnTJLs-o\nIn case you want to learn Haskell, you will find a great tutorial: http:\/\/www.haskell.org\/haskellwiki\/Whitespace\n\n\nThanks a lot for the detailed explanation. That is very helpful to me.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/915","completion":"        val new_array_nums = array_nums\n        new_array_nums.foreach(n => n >= 0 ? n : -n)\n        new_array_nums.foreach(_ => println(_))\n    }","language":"scala"}
{"task_id":"MBSCP\/916","completion":"        val firstTriplet = findTriplet(A, arr_size, sum, 0, A.size() - 1);\n        val secondTriplet = findTriplet(A, arr_size, sum, 0, firstTriplet.index - 1);\n        if (firstTriplet.index != secondTriplet.index && firstTriplet.value + secondTriplet.value == sum)\n            List(firstTriplet.value, secondTriplet.value, firstTriplet.value + secondTriplet.value);\n    }","language":"scala"}
{"task_id":"MBSCP\/917","completion":"        \/\/TODO\n    }","language":"scala"}
{"task_id":"MBSCP\/918","completion":"        val dp = Array(m + 1)\n        for (i < m + 1) dp(i) = -1\n        dp(0) = 0\n        for (i < S.size() - 1) {\n            for (j = m + 1; j > S(i + 1); j--)\n                if (dp(j - S(i + 1)) >= 0)\n                    dp(j) = 1\n        }\n        if (dp(n) >= 0)\n            println(dp(n))\n        else\n            println(\"No solution\")\n    }","language":"scala"}
{"task_id":"MBSCP\/919","completion":"        items.foldLeft(1)(_ * item)\n    }","language":"scala"}
{"task_id":"MBSCP\/920","completion":"        val newList = new mutable.ListBuffer[List[Any]]()\n        for (i \n\nI think you get the point.  However, I'm not sure if that's exactly what your requirements are.  I'd suggest you go back to your requirements and try to think of a way to handle what you have.  Maybe you can figure a way to handle  `\"none\"` without having to make a second pass over the list.\n\n\nYes, it works if you have a list with the same amount of elements as in the example in the question. If it's less, you have to make a second pass.\n\n\n\nYour first attempt was pretty close.  There were a few typos and I'm not sure if  `ListBuffer` really was needed.  But the first problem was with the syntax, so I corrected them.\nThe second problem was with the  `filter` call.  If you give a  `List[List[Any]]` argument to the function, you can't simply pass an  `Array[Any]` argument to the  `filter` function.  You'd have to specify the type of ","language":"scala"}
{"task_id":"MBSCP\/921","completion":"        val result = new ListBuffer[List[Int]]()\n        val chunk = new ListBuffer[Int]()\n\n        for (i <- 0 until test_tup.length) {\n            if (i % N == 0)\n                result += chunk\n            chunk += test_tup(i)\n        }\n\n        result += chunk\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/922","completion":"        val max_prod = arr.map(x => x.toSeq.foldLeft(0).map(y => y * x)).max(_> x => x)\n        val min_prod = arr.map(x => x.toSeq.foldLeft(0).map(y => y * x)).min(_> x => x)\n        List(min_prod, max_prod)\n    }","language":"scala"}
{"task_id":"MBSCP\/923","completion":"        val dp = Array(n + 1, m + 1).map { Array(0, 0) }\n\n        dp[0] = Array(m + 1, 0)\n        dp[1] = Array(m + 1, 0)\n\n        for (i <- 2; i <= n; i++) {\n            for (j <- 2; j <= m; j++) {\n                if (X(j-1).equals(Y(i-1))) {\n                    dp[i][j] = dp[i-1][j-1] + 1\n                } else {\n                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1])\n                }\n            }\n        }\n        println(dp.map(x => x(0)).mkString(\"\\n\"))\n        println(dp.map(x => x(1)).mkString(\"\\n\"))\n        println(dp.map(x =>","language":"scala"}
{"task_id":"MBSCP\/924","completion":"        x >= y ? x : y\n    }","language":"scala"}
{"task_id":"MBSCP\/925","completion":"        var product = 1;\n        nums.foreach(num => product *= num);\n        println(product);\n    }","language":"scala"}
{"task_id":"MBSCP\/926","completion":"        for (i \n\nThis is more of a \"how to\" than an \"how to debug\" answer.  If you are having trouble understanding the pattern, the pattern itself is very important.  Please break it down into smaller chunks.  If you don't know how to break down the pattern, here's a link to an online tutorial.  If you don't know how to debug, here's a link to an online debugger.  If you don't know how to ask a question, here's a link to a good place to start.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/928","completion":"        val date = LocalDateTime.parse(dt).date\n        val newDate = date.format(\"dd-MM-yyyy\")\n        println(newDate)\n    }","language":"scala"}
{"task_id":"MBSCP\/929","completion":"        val result = 0\n        tuplex.map {\n            if (it == value) ++result\n        }\n        tuplex.size\n    }","language":"scala"}
{"task_id":"MBSCP\/930","completion":"        val pattern = \"a+\\\\d\"\n        val matcher = text match pattern\n        if (matcher.matches) {\n            println(\"Found a match!\")\n        } else {\n            println(\"Not matched!\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/931","completion":"        val result = 0\n        for (i \n\nThis is the way to solve it in Scala.\n\n\nI am not allowed to use any predefined methods.\n\n@ArpitVerma I have added an example in Scala.\n\nThank you so much! You just solved one of my problems. But, I still have one more question. What if we want to calculate the sum of 1\ufffd3+2\ufffd3+3\ufffd3+\u2026.+n\ufffd3. Is there a way to get rid of the first number and do it in a for loop?\n\n@ArpitVerma you mean like, if the series is `1\ufffd3+2\ufffd3+3\ufffd3+\u2026+n\ufffd3`? This is still a valid question.\n\n\n\nThis is a simple solution in scala, I hope it helps.\n\n\ndef sumSeries(n:Int):Int ={\n   var result = 0\n   var power = 1\n   var number = 1\n   for(i \n\nEdit:\nAs @Wietse Sander pointed out, in scala you don't need to declare a variable to store the","language":"scala"}
{"task_id":"MBSCP\/932","completion":"        var result : List[String] = new List[String]()\n        val set = new Set[String]()\n        for (x \n\nHere's my solution:\n\n\n    def removeDuplicList(l : List[String]) : List[String] = {\n        var result : List[String] = new List[String]()\n        val set = new Set[String]()\n        for (x \n\nAnd here's a demo:\n\n\n\/\/ Demo:\n\/\/ >>> removeDuplicList(List(\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"))\n\/\/  List(\"Python\", \"Exercises\", \"Practice\", \"Solution\")\n\n\/\/ >>> removeDuplicList(List(\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"Java\"))\n\/\/  List(\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Java\")\n\n\/\/ >>> removeDuplicList(List(\"Python\", \"Exercises\",","language":"scala"}
{"task_id":"MBSCP\/933","completion":"        val pattern = \"[A-Z]([a-z0-9])\"\n        var sb = new StringBuilder(text)\n        sb.replaceAll(pattern, \"_$1\").toUpperCase()\n        sb\n    }","language":"scala"}
{"task_id":"MBSCP\/934","completion":"        1 until m\n    }","language":"scala"}
{"task_id":"MBSCP\/935","completion":"        val sum = 0\n        for (i \n\nIf you have any question feel free to ask me and I will try to help.\n\n\nThank you so much! Now I have some questions:\n1. Why do you use `int sum = 0`?\n2. `i` is the name of a variable that I never used and I'm not sure if it is something that you should use or not. I will read about it to understand the logic behind it.\n3. `def seriesSum(number : Int) : Int = {` - I don't see where is the `val` keyword.\n\n`sum` is a local variable in the scope of the `for` loop. You could replace it with `var` if you wanted, although I would advise against it in general. `i` is a keyword that refers to a variable. You can read about it here: https:\/\/docs.scala-lang.org\/overviews\/language-basics\/variables.html\n\nThank you very much for your help!<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/936","completion":"        val new_list = newList(test_list)\n        val index_map = indexMap(ord_list)\n        new_list.transform {\n            case (index : Int, value : List[Int]) =>\n                value.transform {\n                    case (value, i : Int) =>\n                        index_map(i).transform {\n                            case (value, i) =>\n                                List(value, i)\n                        }\n                }\n        }\n        new_list\n    }","language":"scala"}
{"task_id":"MBSCP\/937","completion":"        val freq = new HashMap[Char, Int]()\n        str1.chars.foreach {\n            freq[it]++\n        }\n        val max = freq.values.foldRight(new HashMap[Char, Int](){ 1 + } )\n        val result = freq.keys.filter(v => v == max.max).head\n        \/\/ val result = freq.keys.headOption\n        result.getOrElse(\"NO-CHAR\")\n    }","language":"scala"}
{"task_id":"MBSCP\/938","completion":"        val sortedA = A.sort\n        val sortedB = B.sort\n        val sortedC = C.sort\n        sortedA[p] < sortedA[q] ? (sortedB[r] < sortedB[p] ? sortedB[r] : (sortedB[q] < sortedB[r] ? sortedB[q] : sortedB[p])) : (sortedB[r] < sortedB[q] ? sortedB[r] : (sortedB[p] < sortedB[r] ? sortedB[p] : sortedB[q]))\n    }","language":"scala"}
{"task_id":"MBSCP\/939","completion":"        val sortedModels = models.sorted(\n            compare (m1 => m1.get(\"make\"), (m1, m2) => m2.get(\"model\").compareTo(m1.get(\"model\")))\n        )\n        sortedModels\n    }","language":"scala"}
{"task_id":"MBSCP\/940","completion":"        val result : List[Int] = new ArrayList[Int]()\n\n        for( i <- arr.size ; i >= 0 ; i-- ) {\n            result <- add(result, arr[i])\n            swap(arr, 0, i)\n            siftDown(arr, 0, i)\n        }\n\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/941","completion":"        num match {\n            case _ => 0\n            case n :: s => countElim(s)\n            case _ :: n\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/942","completion":"        val res = test_tup.filter(_.not(_.in(check_list)))\n        if(res.isEmpty)\n            println(\"true\")\n        else\n            println(\"false\")\n    }","language":"scala"}
{"task_id":"MBSCP\/943","completion":"        val result = new Array[Int]()\n\n        for (num1.iterator.asScala.iterator.foreach { n1 =>\n            for (num2.iterator.asScala.iterator.foreach { n2 =>\n                if (n1 < n2) {\n                    result.append(n1)\n                    break\n                }\n                else if (n1 > n2) {\n                    result.append(n2)\n                    break\n                }\n                else {\n                    result.append(n1)\n                    result.append(n2)\n                    break\n                }\n            }\n        }\n\n        result.iterator.asScala.iterator.foreach { x => println(x)}\n    }","language":"scala"}
{"task_id":"MBSCP\/944","completion":"        val words = text.split(\" \")\n        val counts = words.map(w => wordCounts(w)).toList\n        counts.sort { it._2 < 0 }\n        counts.foreach { it._2 -> println(it._1 + \"\\t\" + it._2.toString) }\n    }","language":"scala"}
{"task_id":"MBSCP\/945","completion":"        t.map(_.toLower).toSet\n    }","language":"scala"}
{"task_id":"MBSCP\/946","completion":"        val freq = new HashMap[Any, Int]()\n        val common = new ArrayList[Any]()\n        s.chars.eachWithIndex { c, idx =>\n            freq[c] += 1\n            if (freq[c] >= a)\n                common = new ArrayList(freq.keySet)\n            else if (common.isEmpty || freq[common.head] > freq[c])\n                common = new ArrayList(freq.keySet, common.head, idx)\n        }\n        val ret = new ArrayList[Any]\n        freq.keySet.each { k => ret(List(k, freq[k])) }\n        ret.reverse\n    }","language":"scala"}
{"task_id":"MBSCP\/947","completion":"        val min = list1.min()\n        val str = min.substring(0, min.length - 1)\n        val list2 = list1.map { s => s.replace(str, \"\") }\n        val length = lenLog(list2) + 1\n        println(length)\n        return length\n    }","language":"scala"}
{"task_id":"MBSCP\/948","completion":"        if (index >= 0) {\n            val item = tup1(index)\n            println(item)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/949","completion":"        val list = test_list.sorted(_.totalDigits)\n        list.foreach(x => println(x.mkString(\"->\")))\n    }","language":"scala"}
{"task_id":"MBSCP\/950","completion":"        println(\"Please write your solution here\")\n    }","language":"scala"}
{"task_id":"MBSCP\/951","completion":"        val max1 = { test_list1.map(_.tail).foldLeft(0)(+_.head) }.max()\n        val max2 = { test_list2.map(_.tail).foldLeft(0)(+_.head) }.max()\n        if (max1 == max2) {\n            println(test_list1 + \" and \" + test_list2 + \" have the same max value. \")\n        } else {\n            println(test_list1 + \" and \" + test_list2 + \" have different max value. \")\n        }\n        println(test_list1 + \" has \" + max1 + \" similar values with \" + test_list2)\n        println(test_list2 + \" has \" + max2 + \" similar values with \" + test_list1)\n        val max_similar_indices1 = test_list1.map(_.tail) {\n            case (a : List[Int]) ","language":"scala"}
{"task_id":"MBSCP\/952","completion":"        ncr = n\/r\n        if (ncr % p == 0) {\n            return 1\n        } else {\n            return ncr % p\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/953","completion":"        if (n == 0)\n            return 0\n        val k = n \/ 2\n        val r = subset(ar.drop(0), k)\n        val l = subset(ar.drop(0), n - k)\n        if (n % 2 == 0) {\n            if (ar(0) == ar(1))\n                return r + l + 1\n            else\n                return Math.min(r, l)\n        }\n        else {\n            if (ar(0) != ar(1))\n                return Math.min(r, l + 1)\n            else\n                return Math.min(r, l)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/954","completion":"        if (actual_cost >= sale_amount * 0.7) {\n            val profit = actual_cost - sale_amount * 0.7\n            println(\"The profit is $\"+profit)\n        } else {\n            println(\"none\")\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/955","completion":"        n < n + n \/\/ 12 + 12 > 12 + 13\n    }","language":"scala"}
{"task_id":"MBSCP\/956","completion":"        val regex = \"([A-Z])\"\n        val words = text.split(regex)\n        words.drop(1)\n        words\n    }","language":"scala"}
{"task_id":"MBSCP\/957","completion":"        n & (-n) \n    }","language":"scala"}
{"task_id":"MBSCP\/958","completion":"        val map = mutable.Map(\"I\" -> 1, \"V\" -> 5, \"X\" -> 10, \"L\" -> 50, \"C\" -> 100, \"D\" -> 500, \"M\" -> 1000)\n        val res = mutable.StringBuilder()\n\n        val romanMap = mutable.Map(\n            \"I\" -> \"I\", \"V\" -> \"V\", \"X\" -> \"L\", \"L\" -> \"X\", \"C\" -> \"C\", \"D\" -> \"D\", \"M\" -> \"M\"\n        )\n\n        while (num > 0) {\n            val i = num % 10\n            val roman = romanMap.get(res.last)\n\n            if (roman == null)\n                throw new IllegalStateException(\"Invalid roman numeral: \" + res.last)\n\n            res.append(roman)\n\n            num = num","language":"scala"}
{"task_id":"MBSCP\/959","completion":"        val sum = lst.foldLeft(0)(+=$ + _)\n        (sum \/ lst.size)\n    }","language":"scala"}
{"task_id":"MBSCP\/960","completion":"        n * (n - 1) * (n - 2) * (n - 3)\n    }","language":"scala"}
{"task_id":"MBSCP\/961","completion":"        val intMap = map[Romans](Int)\n        for (s.split(\"(?=[MDCLXVI])\").asInstanceOf[Array[String]]\n            .zip(Ints.range(0, intMap.length))\n            .foldLeft(0, (prev, (c, i) => prev + c + intMap[i]))\n    }","language":"scala"}
{"task_id":"MBSCP\/962","completion":"        for (i <- l; i <= r; i++) {\n            if (i % 2 == 0) {\n                print(i)\n            }\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/963","completion":"        if (x + y > z) {\n            val result = (x * x) - (2 * x * y) + (y * y);\n            val solution1 = x > 0 ? \"One solution\" : \"no real solution\";\n            val solution2 = y > 0 ? \"One solution\" : \"no real solution\";\n            val resultString = result > 0 ? \"Two solutions\" : result.toString();\n            List(solution1, resultString)\n        } else {\n            List(\"no real solution\", -131)\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/964","completion":"        s.length % 2 == 0\n    }","language":"scala"}
{"task_id":"MBSCP\/965","completion":"        val builder = new StringBuilder\n        val len = text.length\n        for (i <- 0 until len) {\n            val c = text(i)\n            if (c.isUpper) {\n                builder(i).toUpperCase()\n            } else if (c == '_') {\n                builder.append('_')\n            }\n        }\n        println(builder.toString)\n    }","language":"scala"}
{"task_id":"MBSCP\/966","completion":"        tuple1.filter(_.size != 0)\n    }","language":"scala"}
{"task_id":"MBSCP\/967","completion":"        val vowels = Set(\"AEIOUaeiou\").toSet\n        string.toLowerCase.foreach(letter =>\n            \/\/ (1)\n            if (vowels.contains(letter)) {\n                println(\"accepted\")\n            } else {\n                println(\"not accepted\")\n            }\n        )\n    }","language":"scala"}
{"task_id":"MBSCP\/968","completion":"        val max = max(N, B)\n        if A * N <= B * max then N\n        else N * (max - (N - B) * (max - A))\n    }","language":"scala"}
{"task_id":"MBSCP\/969","completion":"        val result = test_list.map(_.sort(_._1)).map { case (a,b) => a < b ? a : b }\n        result\n    }","language":"scala"}
{"task_id":"MBSCP\/970","completion":"        if (x < y) {\n            x\n        } else {\n            y\n        }\n    }","language":"scala"}
{"task_id":"MBSCP\/971","completion":"        val nSegments = (n - a - b - c).toString\n        val maximum = Math.max(nSegments.length, nSegments.chars.distinct.length)\n        println(\"max number of segments: \" + maximum)\n    }","language":"scala"}
{"task_id":"MBSCP\/972","completion":"        \/* your code here *\/\n        test_tup1 ++ test_tup2\n    }","language":"scala"}
{"task_id":"MBSCP\/973","completion":"        val chars = s.toCharArray\n        val n = s.length\n        val leftShift = Int(d) % n\n        val rotated = new char[n]\n        for (i \n\nIt is very straightforward, and the solution above is the shortest one.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"scala"}
{"task_id":"MBSCP\/974","completion":"        val n = A.size\n        val dp = Array(n, Int)\n\n        dp(0) = A(0).head\n\n        for (i \n            for i = 1 to n\n                dp(i) = min(dp(i-1) + A(i).head,\n                         dp(i-1) + A(i).tail + dp(i-2)))\n            val min = min(dp(i-1) + A(i).head, dp(i-1) + A(i).tail + dp(i-2))\n        }","language":"scala"}
