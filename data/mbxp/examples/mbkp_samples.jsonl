{"task_id":"MBKP\/1","completion":"    return minCostRecursive(cost, m, n, m, n, 0, 0, 0)\n}","language":"kotlin"}
{"task_id":"MBKP\/2","completion":"    return testTup1.filter {\n        testTup2.includes(it)\n    }.sorted().toTypedArray()\n}","language":"kotlin"}
{"task_id":"MBKP\/3","completion":"    return n < 2 ? true : n % 2 != 0 || !n.isPrime();\n}","language":"kotlin"}
{"task_id":"MBKP\/4","completion":"    val nHeap = new MinHeap[n]\n\n    for (i in nums) {\n        nHeap.add(i)\n        if (nHeap.size > n)\n            nHeap.remove()\n    }\n\n    val result = nHeap.toArray()\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/5","completion":"    return n * (n - 1) \/\/ n!\n}","language":"kotlin"}
{"task_id":"MBKP\/6","completion":"    return a ^ b == 1\n}","language":"kotlin"}
{"task_id":"MBKP\/7","completion":"    return text.split(\" \").filter { s -> s.length >= 4 }.collect { it.trim() }\n}","language":"kotlin"}
{"task_id":"MBKP\/8","completion":"    return nums.map { it * it }\n}","language":"kotlin"}
{"task_id":"MBKP\/9","completion":"    \/\/ Your code\n    return 1\n}","language":"kotlin"}
{"task_id":"MBKP\/10","completion":"    val result = mutableListOf<Int>()\n    list1.forEach {\n        if (result.size == n) {\n            result.removeAt(0)\n        }\n        result.add(it)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/11","completion":"    var n = 0;\n    var length = s.length;\n    while(n < length && s[n] != ch) ++n;\n    while(n < length && s[length - 1] == ch) --length;\n    return s.substring(n, length);\n}","language":"kotlin"}
{"task_id":"MBKP\/12","completion":"    \/\/ Write your code here\n    var sumArr = map { it.sum() }\n    val result = []\n\n    for(i in m) {\n        result.append(map { (j, c) -> c + m[i][j] >= sumArr[j] } (i, m[i]))\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/13","completion":"    val counts = words.groupBy { it.length() }.map { { it, it.size } }.toList()\n    return counts\n}","language":"kotlin"}
{"task_id":"MBKP\/14","completion":"    return l * b * h\n}","language":"kotlin"}
{"task_id":"MBKP\/15","completion":"    val list = []\n    val lowerText = text.toLowerCase()\n    val splitText = lowerText.split(\"\")\n    for (letter in splitText) {\n        if (letter.islower())\n            list.append(splitText[letter])\n    }\n    return list\n}","language":"kotlin"}
{"task_id":"MBKP\/16","completion":"    val regex = \"([a-z])([a-z]*)(_*)\"\n    return text.findAll(regex).isEmpty() ? \"Not matched!\" : \"Found a match!\"\n}","language":"kotlin"}
{"task_id":"MBKP\/17","completion":"    return 4 * a\n}","language":"kotlin"}
{"task_id":"MBKP\/18","completion":"    val answer = string.substring(0, string.find(secondString))\n    return answer\n}","language":"kotlin"}
{"task_id":"MBKP\/19","completion":"    var set : Set<Int> = setOf(arraynums)\n    return set.size < arraynums.size\n}","language":"kotlin"}
{"task_id":"MBKP\/20","completion":"    return ((x % 5 == 0) || (x % 3 == 0))\n}","language":"kotlin"}
{"task_id":"MBKP\/21","completion":"    \/\/ Your code here\n    return [n*i for i in range(m)]\n}","language":"kotlin"}
{"task_id":"MBKP\/22","completion":"    val seen = mutableSetOf<Int>()\n    val res = -1\n    for(i in nums) {\n        if(seen.contains(i)) {\n            res = i\n            break\n        }\n        seen.add(i)\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/23","completion":"    val result = list1.sortedBy { it.map { it.map { it.sum }.sum }.last() }.sum\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/24","completion":"    return binary * 2 - 1;\n}","language":"kotlin"}
{"task_id":"MBKP\/25","completion":"    return 1;\n}","language":"kotlin"}
{"task_id":"MBKP\/26","completion":"    val kLength = k * 2\n    val kSet = setOf<Int>(kLength)\n    val hasAllK = true\n    for (i in testList.indices) {\n        val tuple = testList[i]\n        for (j in tuple.indices) {\n            val number = tuple[j]\n            if (number >= k) {\n                hasAllK = false\n                break\n            }\n            kSet.remove(number)\n        }\n        if (!hasAllK) break\n    }\n    kSet.forEach { _ -> hasAllK = false }\n    return hasAllK\n}","language":"kotlin"}
{"task_id":"MBKP\/27","completion":"    return list.map { it.replaceAll(\"\\\\d\", \"\") }.toMutableList()\n}","language":"kotlin"}
{"task_id":"MBKP\/28","completion":"    let res = 1\n    for (i in 1 until k)\n        res = res * (n - i) \/ i\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/29","completion":"    if (arrSize == 0) return null\n    var counter : Int = 1\n    for (i in arr) {\n        for (j in arr) {\n            if (arr[i] == arr[j]) {\n                counter++\n                if (counter == 2) return arr[i]\n            }\n        }\n    }\n    return null\n}","language":"kotlin"}
{"task_id":"MBKP\/30","completion":"    var count = 0\n    for (i in 0 until s.length) {\n        for (j in 0 until s.length) {\n            if (s[i] == s[j]) count++\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/31","completion":"    val result = mutableListOf<Int>()\n    val frequency = mutableMap<Int, Int>()\n    for (i in 0 until nums.length) {\n        frequency[nums[i][0]]++\n    }\n    val maxHeap = new MaxHeap<Int>(frequency.keySet)\n    for (i in 0 until maxHeap.size) {\n        for (j in 0 until maxHeap.size) {\n            if (frequency[maxHeap.heap[i]].greaterThanOrEqualTo(frequency[maxHeap.heap[j]])) {\n                val tmp = maxHeap.heap[i]\n                maxHeap.heap[i] = maxHeap.heap[j]\n                maxHeap.heap[j] = tmp\n            }\n        }\n        result.add(maxHeap.extractMax())\n        if (result.size >= k) {\n            return result\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/32","completion":"    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n \/= i\n        } else {\n            i++\n        }\n    }\n    return n\n}","language":"kotlin"}
{"task_id":"MBKP\/33","completion":"    n = n ^ (n >> 31);\n    n = (n ^ (n >> 31)) & 0x55555555;\n    n = (n ^ (n >> 31)) & 0x33333333;\n    n = (n ^ (n >> 31)) & 0x0f0f0f0f;\n    n = (n ^ (n >> 31)) & 0x00ff00ff;\n    n = (n ^ (n >> 31)) & 0x0000ffff;\n    return n ^ (n >> 31)\n}","language":"kotlin"}
{"task_id":"MBKP\/34","completion":"    \/\/ 1. Find the middle index\n    val mid = (n + 1)\/2 - 1\n    val left = ar.filter { it < ar[mid] }.toInt\n    val right = ar.filter { it > ar[mid] }.toInt\n    \/\/ 2. If there are no elements in the left and right lists, it means the\n    \/\/   value is the missing number, so return it\n    if (left.isEmpty() && right.isEmpty()) {\n        return ar[mid]\n    }\n    \/\/ 3. If there are elements in the left and the right lists, then the missing\n    \/\/   number is the value which is in the right list\n    if (!left.isEmpty()) {\n        return right[0]\n    }\n    \/\/ 4. If there are elements in the right list and the left list, then the missing\n    \/\/   number is the value which is in the left list\n    return left[0]\n}","language":"kotlin"}
{"task_id":"MBKP\/35","completion":"    var i : Int = 1\n    var rectNum : Int = 0\n    while (rectNum + 4 * i <= n) {\n        rectNum += 4 * i\n        i += 1\n    }\n    rectNum = n - rectNum + 1\n    return rectNum\n}","language":"kotlin"}
{"task_id":"MBKP\/36","completion":"    var p = p * q\n    var m = 1\n    while (m <= n) {\n        var q = p \/ m\n        var r = p - q * m\n        if (r >= 10) {\n            p = q\n            m += 1\n        } else {\n            return r\n        }\n    }\n    throw IllegalArgumentException()\n}","language":"kotlin"}
{"task_id":"MBKP\/37","completion":"    return mixedList.sorted()\n}","language":"kotlin"}
{"task_id":"MBKP\/38","completion":"    val even = 0\n    val odd = 0\n\n    for (i in list1) {\n        if (list1[i] % 2 == 0) {\n            even = even + 1\n        } else {\n            odd = odd + 1\n        }\n    }\n    return even \/ odd\n}","language":"kotlin"}
{"task_id":"MBKP\/39","completion":"    var freq : HashMap<Character, Integer> = HashMap<Character, Integer>()\n    for (i in s) {\n        freq[s[i]] += 1\n    }\n    var rearrangedString = \"\"\n    var seen = 0\n    var prev = null\n    for (i in s) {\n        if (freq[s[i]] == 1 && !prev) {\n            seen = i\n            prev = s[i]\n            rearrangedString += s[i]\n        }\n        else {\n            if (prev && !prev == s[i]) {\n                rearrangedString += prev\n                seen = i - 1\n            }\n            prev = s[i]\n            rearrangedString += s[i]\n        }\n    }\n    return rearrangedString.substring(seen + 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/40","completion":"    val freq = mutableMapOf<Int, Int>()\n\n    for (i in 0..nums.length-1) {\n        for (j in 0..nums[i].length-1) {\n            freq[nums[i][j]]++\n        }\n    }\n\n    return freq\n}","language":"kotlin"}
{"task_id":"MBKP\/41","completion":"    return nums.filter(num -> num % 2 == 0)\n}","language":"kotlin"}
{"task_id":"MBKP\/42","completion":"    var map = {}\n    var sum = 0\n    for (i in arr) {\n        if (map[arr[i]] == n) {\n            sum += arr[i]\n        }\n        if (map[arr[i]] == undefined) {\n            sum += arr[i]\n            map[arr[i]] = 1\n        }\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/43","completion":"    val regex = \"([a-z])(\\\\w+)([a-z])\"\n    return text.matches(regex) ? \"Matched!\" : \"Not matched!\"\n}","language":"kotlin"}
{"task_id":"MBKP\/44","completion":"    val index = text.indexOf(\"python\")\n    if (index != -1) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/45","completion":"    \/\/ Your code goes here.\n    return gcd(l[0], l[1])\n}","language":"kotlin"}
{"task_id":"MBKP\/46","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/47","completion":"    var digit : Int = 1\n    var product : Int = a * b\n    while (product > 0) {\n        digit += 1\n        product \/= 10\n    }\n    return digit\n}","language":"kotlin"}
{"task_id":"MBKP\/48","completion":"    n = n & ~(1 << (n.toInt().bitCount() - 1))\n    return n\n}","language":"kotlin"}
{"task_id":"MBKP\/49","completion":"    return nums.filter { (it) -> it.contains(n) }\n}","language":"kotlin"}
{"task_id":"MBKP\/50","completion":"    inputList.map { x -> min(x, _ -> List(x.size)) }\n}","language":"kotlin"}
{"task_id":"MBKP\/51","completion":"    if (x === y && y === z && x != z) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/52","completion":"    return b * h \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/53","completion":"    return \"Equal\" if(str.substring(0, 1) == str.substring(str.length - 1)) else \"Not Equal\"\n}","language":"kotlin"}
{"task_id":"MBKP\/54","completion":"    val counter = mutableListOf<Int>()\n    val sortedList = mutableListOf<Int>()\n\n    myList.forEach { counter.append(it) }\n\n    counter.sort { (a, b) -> a - b }\n\n    counter.forEach { sortedList.append(it) }\n\n    return sortedList\n}","language":"kotlin"}
{"task_id":"MBKP\/55","completion":"    var res = 0\n    for (i in 1 until n) {\n        res = res * r\n        if (i == r) {\n            return res\n        }\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/56","completion":"    return n < (n + reverse(n))\n}","language":"kotlin"}
{"task_id":"MBKP\/57","completion":"    var max = arr[0]\n    for (i in arr.indices) {\n        if (arr[i] > max) {\n            max = arr[i]\n        }\n    }\n    return max * 10 ** n\n}","language":"kotlin"}
{"task_id":"MBKP\/58","completion":"    x = -x\n    y = -y\n    return (x * y) >= 0\n}","language":"kotlin"}
{"task_id":"MBKP\/59","completion":"    var start : Int = 1\n    var end : Int = n * (n + 1) \/ 2\n\n    var mid = (start + end) \/ 2\n    var half_dif : Int = mid * (3 * mid - 1) \/ 2\n    var n_octagonal : Int = half_dif + mid\n\n    return n_octagonal\n}","language":"kotlin"}
{"task_id":"MBKP\/60","completion":"    val dp = Array(n + 1).fill(0).map { _ -> 0 }\n    val maxLen = 0\n    for (i in 0 until n) {\n        val prevDiff = arr[i] - arr[i - 1] if i > 0 else 0\n        val currDiff = arr[i + 1] - arr[i]\n        if (currDiff > prevDiff) {\n            dp[i + 1] = dp[i] + currDiff\n            maxLen = max(maxLen, dp[i + 1])\n        }\n    }\n    return maxLen\n}","language":"kotlin"}
{"task_id":"MBKP\/61","completion":"    return s.length - 1 ? 1 + countSubstrings(s.substring(1), n) : 0\n}","language":"kotlin"}
{"task_id":"MBKP\/62","completion":"    var x = xs[0]\n    for (i in xs) {\n        if (xs[i] < x) {\n            x = xs[i]\n        }\n    }\n    return x\n}","language":"kotlin"}
{"task_id":"MBKP\/63","completion":"    val minVal = testList.map(_.first).min()\n    val maxVal = testList.map(_.last).max()\n    return maxVal - minVal\n}","language":"kotlin"}
{"task_id":"MBKP\/64","completion":"    return subjectmarks.sortWith(comparing { x, y ->\n        when (x.get(0), y.get(0)) {\n            -1 -> x.get(1)\n            1 -> y.get(1)\n        }\n    })\n}","language":"kotlin"}
{"task_id":"MBKP\/65","completion":"    if (dataList == null || dataList.isEmpty()) return 0;\n\n    val head = dataList[0];\n    val tail = dataList.tail\n    return head + recursiveListSum(tail)\n}","language":"kotlin"}
{"task_id":"MBKP\/66","completion":"    return list.filter(i -> i >= 0).size\n}","language":"kotlin"}
{"task_id":"MBKP\/67","completion":"    val dp = [1, 1]\n    if(n == 1) return 1\n    if(n == 2) return 2\n    for(i in 2 .. n) {\n        dp[i] = dp[i-2] + dp[i-1]\n    }\n    return dp[n]\n}","language":"kotlin"}
{"task_id":"MBKP\/68","completion":"    var increasing = true;\n    var decreasing = true;\n    a.sort { it }\n    if (increasing)\n        increasing = !a.last || a.last.value > a.first.value\n    if (decreasing)\n        decreasing = !a.last || a.last.value < a.first.value\n    return increasing || decreasing\n}","language":"kotlin"}
{"task_id":"MBKP\/69","completion":"    for (i in 0 until s.length){\n        if (s[i] != l[i])\n            return false\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/70","completion":"    val result = \"\"\n\n    input.filter { it.size == k }.foreach {\n        result += \"All tuples have same length\"\n    }\n\n    input.filter { it.size != k }.foreach {\n        result += \"All tuples do not have same length\"\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/71","completion":"    \/\/TODO\n}","language":"kotlin"}
{"task_id":"MBKP\/72","completion":"    return n * n - 4 * n + 9 < 0\n}","language":"kotlin"}
{"task_id":"MBKP\/73","completion":"    val array : List<String> = text.split(\"(\\s*[;,]\\s*)\")\n    return array\n}","language":"kotlin"}
{"task_id":"MBKP\/74","completion":"    \/\/ Your code here\n    if (colors.size() != patterns.size()) return false\n    var dict = {}\n    for (var i = 0; i < colors.size(); i++) {\n        var color = colors.get(i)\n        var pattern = patterns.get(i)\n        if (dict.contains(color)) {\n            if (dict.get(color) != pattern) {\n                return false\n            }\n        } else {\n            dict[color] = pattern\n        }\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/75","completion":"    var result = \"\"\n    for (i in 0 until testList.size) {\n        for (j in 0 until testList.size) {\n            if (testList[i][j] % k != 0) result += (testList[i][j] + \", \")\n        }\n    }\n    if (result.length == 0) return \"[]\"\n    else return \"[\" + result.slice(0, -2) + \"]\"\n}","language":"kotlin"}
{"task_id":"MBKP\/76","completion":"    var sum = 0\n    for (var i = m; i <= n; i++)\n        for (var j = m; j <= n; j++)\n            sum += i * j\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/77","completion":"    val s = n.toString()\n    val even = 0\n    val odd = 0\n    for (i in 0 until s.length) {\n        if (i % 2 == 0) {\n            even += s[i]\n        } else {\n            odd += s[i]\n        }\n    }\n    return even == odd\n}","language":"kotlin"}
{"task_id":"MBKP\/78","completion":"    \/\/ 1. count number of set bits\n    n = n - ((n >> 1) & 0x55555555)\n    n = (n & 0x33333333) + ((n >> 2) & 0x33333333)\n    n = (n + (n >> 4)) & 0x0f0f0f0f\n    n += n >> 8\n    n += n >> 16\n    return n & 0x3f\n}","language":"kotlin"}
{"task_id":"MBKP\/79","completion":"    return s.length % 2 == 1\n}","language":"kotlin"}
{"task_id":"MBKP\/80","completion":"    if (n == 0) {\n        return 0\n    }\n\n    if (n % 2 == 0) {\n        return (1 + 4 * tetrahedralNumber(n \/ 2)) \/ 2\n    } else {\n        return tetrahedralNumber(n - 1) + 2\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/81","completion":"    val zip = testTup1.zip(testTup2)\n    val results = map {\n        testTup1[i] -> testTup2[i]\n    }\n    return results\n}","language":"kotlin"}
{"task_id":"MBKP\/82","completion":"    return 4.0 \/ 3 * Math.PI * r ** 3\n}","language":"kotlin"}
{"task_id":"MBKP\/83","completion":"    val length = strr.length\n    if (length == 0) return \"\"\n    var result : String = strr[0]\n    for (i in length) {\n        result += strr[i]\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/84","completion":"    if (n <= 0) return 0\n    if (n == 1) return 1\n    var arr = [0, 1]\n    while(arr.length < n) {\n        var next = 0\n        for (var i = 1; i < arr.length; i++) {\n            next = next + arr[i]\n        }\n        next = next + 1\n        arr.push(next)\n    }\n    return arr[n]\n}","language":"kotlin"}
{"task_id":"MBKP\/85","completion":"    var pi = 3.14159265359\n    var area = 4 * pi * r * r\n    return area\n}","language":"kotlin"}
{"task_id":"MBKP\/86","completion":"    let n_odd : Int = n - 1\n    let half : Int = n_odd \/ 2\n    return 6 * half * (n_odd - half * 2)\n}","language":"kotlin"}
{"task_id":"MBKP\/87","completion":"    val result = dict1\n    result.putAll(dict2)\n    result.putAll(dict3)\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/88","completion":"    val freq = mutableMapOf<Int, Int>()\n    for (i in list1) {\n        val element = list1[i]\n        freq[element]++\n    }\n    return freq\n}","language":"kotlin"}
{"task_id":"MBKP\/89","completion":"    val arr = arrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    \/\/val arr = arrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 11)\n    \/\/val arr = arrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 12)\n\n    var closestSmaller = n\n    for (i in arr) {\n        if (arr[i] < closestSmaller && arr[i] < n) {\n            closestSmaller = arr[i]\n        }\n    }\n    println(closestSmaller)\n    return closestSmaller\n}","language":"kotlin"}
{"task_id":"MBKP\/90","completion":"    val temp = list1\n    val maxLen = 0\n    while(temp.isNotEmpty()) {\n        val str = temp.head\n        temp = temp.tail\n        if(str.length() > maxLen) {\n            maxLen = str.length()\n        }\n    }\n    return maxLen\n}","language":"kotlin"}
{"task_id":"MBKP\/91","completion":"    return str1.contains(subStr);\n}","language":"kotlin"}
{"task_id":"MBKP\/92","completion":"    if (n.length() == 1) return true\n    if (n.length() % 2 != 0) return true\n    var lastNumber = n.charAt(n.length() - 1)\n    var length = n.length() - 2\n    var firstPart = n.substring(0, length)\n    var secondPart = n.substring(length)\n    return firstPart == secondPart.repeat(lastNumber)\n}","language":"kotlin"}
{"task_id":"MBKP\/93","completion":"    var result = 1;\n    for (i in 0 until b) {\n        result = result * a;\n    }\n    return result;\n}","language":"kotlin"}
{"task_id":"MBKP\/94","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/95","completion":"    var min_length = 0\n    for (i in lst) {\n        min_length = lst[i].size if lst[i].size < min_length else min_length\n    }\n    return min_length\n}","language":"kotlin"}
{"task_id":"MBKP\/96","completion":"    var divisors = mutableListOf<Int>()\n    var count = 0\n\n    for (i = 1 to n) {\n        if (n % i == 0) {\n            divisors.add(i)\n        }\n    }\n    for (divisor in divisors) {\n        count += 1\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/97","completion":"    val frequency = mutableMapOf<Int, Int>()\n    for(i in list1) {\n        for(j in i) {\n            if(frequency[j] == null) frequency[j] = 1\n            else frequency[j] += 1\n        }\n    }\n    return frequency\n}","language":"kotlin"}
{"task_id":"MBKP\/98","completion":"    return numbers.sum() \/ numbers.size()\n}","language":"kotlin"}
{"task_id":"MBKP\/99","completion":"    var digits : IntArray = n.toString().split(\"\")\n    var result : String = \"\"\n    for (var i : Int = 0; i < digits.length; i++) {\n        var value : Int = Integer.parseInt(digits[i])\n        if (i == digits.length - 1) {\n            result += value.toString()\n        } else {\n            var binary = Integer.toBinaryString(value)\n            var zero = \"\"\n            for (var j = 0; j < binary.length; j++) {\n                if (binary[j] == \"1\") {\n                    zero += \"0\"\n                } else {\n                    zero += \"1\"\n                }\n            }\n            result += zero\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/100","completion":"    \/\/ Your code here\n    \/\/ you can add the method to the list below\n    var digits = String(num).split(\"\");\n    var palindromes = [];\n    var i = 0;\n    var j = 0;\n    var min = 0;\n    if (num < 10)\n        return num;\n    else {\n        while (num >= 10) {\n            palindromes.push(num % 10);\n            num = num \/ 10;\n            i = 0;\n        }\n        if (palindromes[0] == palindromes[palindromes.length - 1])\n            min = palindromes.length - 1;\n        else {\n            while (i <= palindromes.length - 1) {\n                if (palindromes[i] == palindromes[j]) {\n                    min = i;\n                    break;\n                } else {","language":"kotlin"}
{"task_id":"MBKP\/101","completion":"    val pivot = arr[n - 1]\n    var start = 0\n    var end = n - 1\n    while (start <= end) {\n        val mid = start + (end - start) \/ 2\n        if (arr[mid] < pivot) {\n            start = mid + 1\n        } else {\n            end = mid - 1\n        }\n    }\n    var target = start - 1\n    if (start == k) {\n        target = start\n    } else if (end == k) {\n        target = start - 1\n    }\n    return arr[target]\n}","language":"kotlin"}
{"task_id":"MBKP\/102","completion":"    if(word.isEmpty()) return word\n    return snakeToCamel(word.substring(0, word.length - 1)).concat(word[word.length - 1].toUpperCase())\n}","language":"kotlin"}
{"task_id":"MBKP\/103","completion":"    val result = 0\n    for (i in 1..n) {\n        for (j in 1..m) {\n            result = result + i * j\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/104","completion":"    val result = mutableListOf<List<String>>()\n    for(i in inputList) {\n        result.add(inputList[i].sorted())\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/105","completion":"    return lst.filter { it }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/106","completion":"    return testList.zip(testTup).toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/107","completion":"    var result = 0\n    for (i in (l..r)) {\n        if (i >= '0' && i <= '9') {\n            result += (i - '0').toChar().toInt() * 16\n        } else if (i >= 'A' && i <= 'F') {\n            result += (i - 'A' + 10).toChar().toInt() * 16\n        } else if (i >= 'a' && i <= 'f') {\n            result += (i - 'a' + 10).toChar().toInt() * 16\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/108","completion":"    if (num1.isEmpty() && num2.isEmpty() && num3.isEmpty()) {\n        return []\n    } else if (num1.isEmpty() && num2.size() > 0 && num3.size() > 0) {\n        return mergeLists(num2, num3)\n    } else if (num2.isEmpty() && num1.size() > 0 && num3.size() > 0) {\n        return mergeLists(num1, num3)\n    } else if (num1.size() > 0 && num2.size() > 0 && num3.size() > 0) {\n        return mergeLists(mergeLists(num1, num3), num2)\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/109","completion":"    var evenCount = 0\n    var oddCount = 0\n    for (i in 0 until s.length) {\n        var currentChar = s[i]\n        var currentCharAsInt = currentChar.toInt()\n        if (currentCharAsInt % 2 == 0) evenCount = evenCount + 1\n        else oddCount = oddCount + 1\n    }\n    return (n % 2 == 0 ? evenCount : oddCount)\n}","language":"kotlin"}
{"task_id":"MBKP\/110","completion":"    return testList\n        .filter { it.not (it[0] >= strtVal and it[1] <= stopVal) }\n        .map { (it.first, it.last) }\n}","language":"kotlin"}
{"task_id":"MBKP\/111","completion":"    if (nestedlist.isEmpty) {\n        return emptyList()\n    }\n    var list: List<Int> = emptyList()\n    var temp : List<List<Int>> = nestedlist\n    var size: Int = 0\n    while (temp.isNotEmpty) {\n        size = size + 1\n        temp = temp.tail\n    }\n    if (size == 1) {\n        return temp.head\n    }\n\n    for (i in 0 until size - 1) {\n        for (j in 0 until size - 1) {\n            if (temp.head[i] == temp.head[j] and temp.tail.tail.head[i] == temp.tail.head[j]) {\n                list = list + temp.head[i]\n                temp.head[i] = 0\n                temp.tail = temp.tail.tail.tail\n            }\n        }\n    }\n    return list\n}","language":"kotlin"}
{"task_id":"MBKP\/112","completion":"    return 2 * (diameter + height);\n}","language":"kotlin"}
{"task_id":"MBKP\/113","completion":"    return text.isDigit()\n}","language":"kotlin"}
{"task_id":"MBKP\/114","completion":"    \/\/ your code\n    return null;\n}","language":"kotlin"}
{"task_id":"MBKP\/115","completion":"    \/\/ Your code here.\n}","language":"kotlin"}
{"task_id":"MBKP\/116","completion":"    var result = 0\n    for (i in nums) {\n        result = result + nums[i]\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/117","completion":"    val result = testList\n        .map { case a -> {\n            val b = a.map { case x -> x.toDouble() }\n            val c = b.toList()\n            c\n        } }\n        .map { case a -> \"(\" + a + \")\" }\n        .toList()\n    result\n}","language":"kotlin"}
{"task_id":"MBKP\/118","completion":"    var result = listOf()\n    for (var i = 0; i < string.length; i++) {\n        result.append(string[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/119","completion":"    var i = 0\n    while (i < arr.size - 1) {\n        if (arr[i] != arr[i + 1]) {\n            i += 1\n        } else {\n            arr.remove(i)\n        }\n    }\n\n    if (arr[i] == n) {\n        return i\n    }\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/120","completion":"    val products = list1.map { list1.map(list2 => list2.product(_)) }\n    return max(products)\n}","language":"kotlin"}
{"task_id":"MBKP\/121","completion":"    val res = a.filter { it >= n }.filter { it < sum }.count() >= count\n\n    \/\/ or\n    \/\/ res = a.filter { it < n }.filter { it >= sum }.count() >= count\n    \/\/ res = a.filter { it < sum }.filter { it >= n }.count() >= count\n\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/122","completion":"    var count : Int = 0\n\n    while (true) {\n        count = count + 1\n        var nDivisible = 0\n        for (var i = 1; i <= 9; i++) {\n            nDivisible = nDivisible + count * i\n        }\n        if (nDivisible == n) {\n            return count\n        }\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/123","completion":"    return 0\n}","language":"kotlin"}
{"task_id":"MBKP\/125","completion":"    var zeroes : Int = 0\n    var ones : Int = 0\n    var length : Int = 0\n    var prev : String = \"\"\n    for (i in 0..n-1) {\n        prev += string[i]\n        if (string[i] == '0') {\n            zeroes++\n        } else {\n            ones++\n        }\n        if (prev == \"1011\") {\n            length += (ones - zeroes)\n            prev = \"\"\n            zeroes = 0\n            ones = 0\n        }\n    }\n    if (prev.length > 0) {\n        length += (ones - zeroes)\n    }\n    return length\n}","language":"kotlin"}
{"task_id":"MBKP\/126","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/127","completion":"    return x * y\n}","language":"kotlin"}
{"task_id":"MBKP\/128","completion":"    val s: MutableSet<String> = mutableSetOf<String>()\n    val word = mutableListOf<String>()\n    for (ch in str) {\n        if ch == ' ' || s.size < n) {\n            if (!s.contains(ch.toUppercase)) {\n                s.add(ch.toUppercase)\n                word.add(ch.toUppercase)\n            }\n        }\n        if ch == ' ' && s.size == n) {\n            s.add(ch.toUppercase)\n            word.add(ch.toUppercase)\n            s.clear()\n            word.clear()\n        }\n    }\n    return word\n}","language":"kotlin"}
{"task_id":"MBKP\/129","completion":"    \/\/ write your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/130","completion":"    val freq = map { n -> freqOfNums(nums, n) }\n    val maxFre = reduce { max { val -> val } } freq\n\n    return filter { val -> val == maxFre } nums\n}","language":"kotlin"}
{"task_id":"MBKP\/131","completion":"    val str1 = str1.toCharSequence()\n    val length = str1.length()\n    var index = 0\n    var revStr = \"\"\n\n    while(index < length) {\n        if(str1[index] == 'a' || str1[index] == 'e' || str1[index] == 'i' || str1[index] == 'o' || str1[index] == 'u') {\n            revStr += str1[length - index - 1]\n            index++\n        } else {\n            revStr += str1[index]\n            index++\n        }\n    }\n\n    return revStr\n}","language":"kotlin"}
{"task_id":"MBKP\/132","completion":"        return join(toList(filter(x -> x.length() % 2 == 0, tup1)), \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/133","completion":"    return nums.filter { it < 0 }.reduce { (acc, it) -> acc + it }\n}","language":"kotlin"}
{"task_id":"MBKP\/134","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/135","completion":"    return 6 * (3 * n - 1) \/\/ 6\n}","language":"kotlin"}
{"task_id":"MBKP\/136","completion":"    return units * 0.1\n}","language":"kotlin"}
{"task_id":"MBKP\/137","completion":"    var zeros : Long = 0L\n    for (var i in nums) {\n        if (nums[i] == 0) {\n            zeros = zeros + 1\n        }\n    }\n    return zeros.toDouble() \/ nums.length.toDouble()\n}","language":"kotlin"}
{"task_id":"MBKP\/138","completion":"    return (n & (n - 1)) == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/139","completion":"    var circle = 2 * 3.14 * r;\n    var circumference = 2 * 3.14 * r;\n    return circumference;\n}","language":"kotlin"}
{"task_id":"MBKP\/140","completion":"    \/\/ code goes here\n}","language":"kotlin"}
{"task_id":"MBKP\/141","completion":"  for (let i = 0; i < nums.size(); i++) {\n    let cur = nums[i]\n    let j = i - 1\n    while (j >= 0 && nums[j] > cur) {\n      nums[j+1] = nums[j]\n      j--\n    }\n    nums[j+1] = cur\n  }\n  return nums\n}","language":"kotlin"}
{"task_id":"MBKP\/142","completion":"    return 3 * (list1.filter { it == list2.filter { it == list3.filter { it } }.first }.size)\n}","language":"kotlin"}
{"task_id":"MBKP\/143","completion":"    return input.flatMap { it.toList() }.distinct().size\n}","language":"kotlin"}
{"task_id":"MBKP\/144","completion":"    return sumPairs(arr, n, 0)\n}","language":"kotlin"}
{"task_id":"MBKP\/145","completion":"    var maxDiff = 0\n    for (i in 0 until n) {\n        var maxLeft = arr[i]\n        var maxRight = arr[i + 1]\n        if (maxLeft > maxRight) {\n            maxLeft = maxRight\n        }\n        maxDiff = Math.max(maxLeft - maxRight, maxDiff)\n    }\n    return maxDiff\n}","language":"kotlin"}
{"task_id":"MBKP\/146","completion":"    val asciiValue = str1.map { ord(it) }.sum()\n    return asciiValue\n}","language":"kotlin"}
{"task_id":"MBKP\/147","completion":"    val dp = Array(m, n, 0)\n    for (i in 0 until m - 1) {\n        for (j in 0 until n - 1) {\n            if (i == 0 || j == 0) dp[i][j] = tri[i][j]\n            else if (i == 1 && j == 1) dp[i][j] = tri[i][j] + dp[i - 1][j - 1]\n            else if (i == 1 && j == 2) dp[i][j] = tri[i][j] + dp[i - 1][j]\n            else if (i == 2 && j == 1) dp[i][j] = tri[i][j] + dp[i][j - 1]\n            else dp[i][j] = tri[i][j] + Math.max(dp[i - 1][j - ","language":"kotlin"}
{"task_id":"MBKP\/148","completion":"    return n % 10 + n \/ 10 % 10 + n \/ 100\n}","language":"kotlin"}
{"task_id":"MBKP\/149","completion":"    var prev = arr[0]\n    var currentMax = 1\n    var max = 0\n    for (i <- 1; i < n; i++) {\n        if (arr[i] - prev == 1) {\n            currentMax++\n        } else if (arr[i] - prev == -1) {\n            currentMax = 1\n        }\n        if (currentMax > max) {\n            max = currentMax\n        }\n        prev = arr[i]\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/150","completion":"    var number = 1\n    if (a <= number && number <= b && number <= c) {\n        return true\n    } else {\n        return false\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/151","completion":"    if (x < 2 || y < 2) return false\n    return pow(gcd(x, y), 2) == 1\n}","language":"kotlin"}
{"task_id":"MBKP\/152","completion":"    return fun(x, 0, x.size())\n}","language":"kotlin"}
{"task_id":"MBKP\/153","completion":"    var x = -b \/ (2 * a)\n    return List(x, x * x + c)\n}","language":"kotlin"}
{"task_id":"MBKP\/154","completion":"    return nums\n            .stream()\n            .map(list -> list.get(n))\n            .toList();\n}","language":"kotlin"}
{"task_id":"MBKP\/155","completion":"    n = (n & 0b1111111111111111) << 1\n    n |= (n >> 1) & 0b1111111111111111\n    return n\n}","language":"kotlin"}
{"task_id":"MBKP\/156","completion":"    val listInt = mutableListOf<List<Int>>()\n    tupleStr.forEach {\n        val listTuple = mutableListOf<Int>()\n        it.forEach {\n            listTuple.add(toInt(it[0]))\n            listTuple.add(toInt(it[1]))\n        }\n        listInt.add(listTuple)\n    }\n    return listInt\n}","language":"kotlin"}
{"task_id":"MBKP\/157","completion":"    var list2 = mutableListOf()\n    var index = 0\n    while (index < list1.count) {\n        list2.add(mutableListOf(list1.itemAt(index), countOf(list1.itemAt(index))))\n        index += list1.itemAt(index).toInt()\n    }\n    return list2\n}","language":"kotlin"}
{"task_id":"MBKP\/158","completion":"    val sum = arr.sum()\n    if (sum % k != 0) return -1\n    val sumOfK = sum \/ k\n    val sumOfN = arr.reduce { (acc, v) => acc + v }\n    return n * (sumOfN - sumOfK)\n}","language":"kotlin"}
{"task_id":"MBKP\/159","completion":"    if (days >= 28) {\n        if (days == 29) {\n            return \"spring\"\n        }\n        else if (days == 30) {\n            return \"summer\"\n        }\n        else if (days == 31) {\n            return \"autumn\"\n        }\n    }\n    else if (days >= 19) {\n        if (days == 20) {\n            return \"winter\"\n        }\n        else if (days == 21) {\n            return \"winter\"\n        }\n        else if (days == 22) {\n            return \"winter\"\n        }\n        else if (days == 23) {\n            return \"spring\"\n        }\n        else if (days == 24) {\n            return \"spring\"\n        }\n        else if (days == 25) {\n            return \"summer\"\n        }\n       ","language":"kotlin"}
{"task_id":"MBKP\/160","completion":"    if (a * b > n) return \"No solution\"\n\n    x = 1\n    y = 0\n    while (a + b * x < n) {\n        y = y + 1\n        x = x + y\n    }\n\n    return [\"x = \" + x, \", y = \" + y]\n}","language":"kotlin"}
{"task_id":"MBKP\/161","completion":"    val result = list1.filter { it not in list2 }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/162","completion":"    var sum = 0\n    for (i in 0 until n-1) {\n        sum += (n - i) * (i+1)\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/163","completion":"    return s * s * Math.sin(2 * Math.PI \/ l)\n}","language":"kotlin"}
{"task_id":"MBKP\/164","completion":"    var divisors = divisors(num1 + num2)\n    for (var i : Int) {\n        if (num1 % i == 0 && num2 % i == 0)\n            return true\n    }\n    return false\n}","language":"kotlin"}
{"task_id":"MBKP\/165","completion":"    val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \/\/ write your code in Kotlin\n    return 0\n}","language":"kotlin"}
{"task_id":"MBKP\/166","completion":"    var evenPairCounter : Int = 0\n    a.forEach {\n        if (a[i] % 2 == 0) {\n            a[i] \/ 2 == n\n        }\n    }\n    return evenPairCounter\n}","language":"kotlin"}
{"task_id":"MBKP\/167","completion":"    return n > 0 ? 1 << (n.toInt() - 1) : 1;\n}","language":"kotlin"}
{"task_id":"MBKP\/168","completion":"    val freq = 0\n\n    a.forEach { item ->\n        if (item == x) {\n            freq += 1\n        }\n    }\n\n    return freq\n}","language":"kotlin"}
{"task_id":"MBKP\/169","completion":"    return 1 + n * 4 * n + n * 2\n}","language":"kotlin"}
{"task_id":"MBKP\/170","completion":"    return sum(list1.subList(m, n + 1))\n}","language":"kotlin"}
{"task_id":"MBKP\/171","completion":"    return 5 * a * a\n}","language":"kotlin"}
{"task_id":"MBKP\/172","completion":"    val count = 0\n    val std = \"std\"\n    for (i in s) {\n        if (s[i] == std) {\n            count += 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/173","completion":"    var pattern = \"[A-Za-z0-9]+\"\n    var result = text.replace(pattern, \"\")\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/174","completion":"    return l.groupBy { item -> item.first }.mapValues { list -> list.toList()}\n}","language":"kotlin"}
{"task_id":"MBKP\/175","completion":"    val stack = ArrayList<Character>()\n    for (char c in str1) {\n        if (c == ')') {\n            if (stack.isEmpty() || stack.pop() != '(') {\n                return false\n            }\n        } else if (c == ']') {\n            if (stack.isEmpty() || stack.pop() != '[') {\n                return false\n            }\n        } else if (c == '}') {\n            if (stack.isEmpty() || stack.pop() != '{') {\n                return false\n            }\n        } else {\n            stack.push(c)\n        }\n    }\n    return stack.isEmpty()\n}","language":"kotlin"}
{"task_id":"MBKP\/176","completion":"    return a + b + c\n}","language":"kotlin"}
{"task_id":"MBKP\/177","completion":"    val result = mutableListOf<Int>()\n\n    for (i in 0..r) {\n        if (lcm(l, i) <= r && lcm(l, i) >= l) {\n            result.add(i)\n        }\n    }\n\n    for (i in 0..r) {\n        if (lcm(l, i) <= r && lcm(l, i) >= l) {\n            result.add(i)\n        }\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/178","completion":"    val results = \"\"\n    for (pattern in patterns) {\n        if (text.contains(pattern)) {\n            results += \"Matched!\"\n        } else {\n            results += \"Not Matched!\"\n        }\n    }\n    return results\n}","language":"kotlin"}
{"task_id":"MBKP\/179","completion":"    var temp = x\n    var arr = [3, 5, 7, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for (var i in arr) {\n        if (temp % arr[i] == 0) {\n            temp \/= arr[i]\n            return true\n        }\n    }\n    return false\n}","language":"kotlin"}
{"task_id":"MBKP\/180","completion":"    val R = 6371\n    val \u03c61 = slat * Math.PI \/ 180.0\n    val \u03c62 = elat * Math.PI \/ 180.0\n    val \u0394\u03c6 = (elat - slat) * Math.PI \/ 180.0\n    val \u0394\u03bb = (elon - slon) * Math.PI \/ 180.0\n    val a = Math.sin(\u0394\u03c6 \/ 2) * Math.sin(\u0394\u03c6 \/ 2) + Math.cos(\u03c61) * Math.cos(\u03c62) * Math.sin(\u0394\u03bb \/ 2) * Math.sin(\u0394\u03bb \/ 2)\n    val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    val d = R * c\n    return d\n}","language":"kotlin"}
{"task_id":"MBKP\/181","completion":"    val prefix = \"\"\n    var i = 0\n\n    while (true) {\n        if (arr.contains(prefix)) {\n            i = arr.indexOf(prefix)\n        } else {\n            break\n        }\n\n        prefix = arr.get(i)\n    }\n\n    return prefix\n}","language":"kotlin"}
{"task_id":"MBKP\/182","completion":"    return [\n        \/\/ Find uppercase, lowercase, special character and numeric values using regex.\n        regexFilter(\"([A-Z]+)\", string)\n        , regexFilter(\"([a-z]+)\", string)\n        , regexFilter(\"([!@#$%^&*]+)\", string)\n        , regexFilter(\"([0-9]+)\", string)\n    ].toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/183","completion":"    if (n == 0 || k == 0)\n        return 0\n    val s = set()\n    for (i in arr) {\n        for (j in arr) {\n            if (i == j)\n                continue\n            if (arr[i] + arr[j] == k) {\n                s.add(i)\n                s.add(j)\n            }\n        }\n    }\n    val count = s.size()\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/184","completion":"    return list.all { it > num }\n}","language":"kotlin"}
{"task_id":"MBKP\/185","completion":"    if (a == 0)\n        return List(b, c)\n    (b*b - 4*a*c) < 0 || (b*b - 4*a*c) == 0\n        ? List(-1.0, 0)\n        : List(-b \/ (2*a), 1.0)\n}","language":"kotlin"}
{"task_id":"MBKP\/186","completion":"    val regex = patterns.map { \"(?i)\" + it }\n        .collect { \"(?:\" + it + \")\" }\n        .join (\"|\")\n    if (text.matches(regex)) {\n        return \"Matched!\"\n    } else {\n        return \"Not Matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/187","completion":"    val dp : Array<Int> = arrayListOf(n, 0)\n    for (i in 0 until m) {\n        val a = x[i]\n        for (j in 0 until n) {\n            val b = y[j]\n            val s = dp[j] + 1\n            if (a == b) {\n                dp[j] = s\n            } else if (s > dp[j]) {\n                dp[j] = s\n            }\n        }\n    }\n    return dp[n - 1]\n}","language":"kotlin"}
{"task_id":"MBKP\/188","completion":"    return ((n * n) % 1 == 0)\n}","language":"kotlin"}
{"task_id":"MBKP\/189","completion":"    if (n < 1) {\n        return 1\n    }\n    if (n == 1) {\n        if (arr[0] == 0) {\n            return 1\n        }\n        return 2\n    }\n    arr.sort()\n\n    i : Int\n    for (i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0 && arr[i] <= n) {\n            if (arr[i] != i + 1) {\n                return i + 1\n            }\n        }\n    }\n\n    return n + 1\n}","language":"kotlin"}
{"task_id":"MBKP\/190","completion":"    val dx = x2 - x1\n    val dy = y2 - y1\n\n    return dx * dx + dy * dy\n}","language":"kotlin"}
{"task_id":"MBKP\/191","completion":"    \/\/ write your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/192","completion":"    return str.matches(\"^[a-zA-Z0-9]+$\")\n}","language":"kotlin"}
{"task_id":"MBKP\/193","completion":"    val newList = mutableListOf<Int>()\n    val tempList = mutableListOf<Int>()\n    testTup.forEach {\n        if (tempList.contains(it) == false) {\n            newList.add(it)\n            tempList.add(it)\n        }\n    }\n    return newList\n}","language":"kotlin"}
{"task_id":"MBKP\/194","completion":"    return (n - 48) * 8 + (n - 48) * 8 + (n - 48) * 8 + (n - 48) * 8\n}","language":"kotlin"}
{"task_id":"MBKP\/195","completion":"    var res = 0\n    var i = 0\n\n    arr.forEach { it ->\n        if (it == x) {\n            res = i\n            i++\n        }\n    }\n\n    if (res == 0)\n        throw IllegalArgumentException(\"x is not in arr\")\n\n    while (i < n && arr[i] == x)\n        i++\n\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/196","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/197","completion":"    val list = ArrayList()\n\n    for (i in 0 until testTup1.length){\n        list.add(testTup1[i] ** testTup2[i])\n    }\n\n    return list\n}","language":"kotlin"}
{"task_id":"MBKP\/198","completion":"    return (a * a + b * b >= a * b) ? a * a + b * b : b * b + a * a\n}","language":"kotlin"}
{"task_id":"MBKP\/199","completion":"    return n & -n\n}","language":"kotlin"}
{"task_id":"MBKP\/200","completion":"    return list1.filter {\n        it >= list1.max()\n    }.map {\n        it.index\n    }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/201","completion":"    return lst.all(x => lst.indexOf(x) != lst.lastIndexOf(x))\n}","language":"kotlin"}
{"task_id":"MBKP\/202","completion":"    var result = \"\"\n    for (i in str1) {\n        if (i % 2 != 0) {\n            result += str1[i]\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/203","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/204","completion":"    var counter = 0\n    for (var i = 0; i < s.length; i++) {\n        if (s[i] == c) counter += 1\n    }\n    return counter\n}","language":"kotlin"}
{"task_id":"MBKP\/205","completion":"    val res = mutableListOf<Int>()\n    val sorted = sortedListOf(testTup)\n    for (i in 0 until testTup.size - 1) {\n        for (j in 0 until testTup.size - 1) {\n            if (sorted[i] > sorted[j]) {\n                res.append(sorted[i])\n                res.append(sorted[j])\n            }\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/206","completion":"    var result = List()\n    for (i in 0 until testTup.size) {\n        result = result ++ List(testTup[i] + testTup[i+1])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/207","completion":"    val dp = Array(str.length())\n    for (i in 0 until str.length) {\n        val prev = str[i - 1] if i > 0 else -1\n        val curr = str[i]\n        dp[i] = dp[i - 1] if i > 0 and dp[i - 1] >= 0 else -1\n        if prev != curr && dp[i - 1] >= 0 :\n            dp[i] = dp[i - 1] + 1\n        if dp[i] >= 0 :\n            val j = i\n            val res = dp[i]\n            while str[j] == str[j - dp[i]] && j - dp[i] >= 0 :\n                res = Math.max(res, dp[i])\n                j = j - dp[i]\n            dp[i] = res\n    }\n    return dp[-1]\n}","language":"kotlin"}
{"task_id":"MBKP\/208","completion":"    return num.matches(\"^\\\\d+(\\\\.\\\\d{1,2})?$\")\n}","language":"kotlin"}
{"task_id":"MBKP\/209","completion":"    if (heap.size == 0) return [a]\n    if (heap.size == 1) return heap.size == 1 ? heap : [a, heap.get(0)]\n    if (a < heap.get(0)) heap = [a, heap.get(0)]\n    return heap\n}","language":"kotlin"}
{"task_id":"MBKP\/210","completion":"    val pattern = \"[a-zA-Z0-9]*\"\n    return string.matches(pattern)\n}","language":"kotlin"}
{"task_id":"MBKP\/211","completion":"    return (n * (n + 1)) >> 1\n}","language":"kotlin"}
{"task_id":"MBKP\/212","completion":"    val num = 1\n    for (i in 1 until n) {\n        num = num * i * i * i\n    }\n    return num\n}","language":"kotlin"}
{"task_id":"MBKP\/213","completion":"    return testTup1.zip(testTup2).map { it.mkString }\n}","language":"kotlin"}
{"task_id":"MBKP\/214","completion":"    return radian * 180 \/ 3.1415926535897932\n}","language":"kotlin"}
{"task_id":"MBKP\/215","completion":"    return alist.flatmap {\n        x -> {\n            return x.map {\n                case _ -> _\n                else -> decodeList(x)\n            }\n        }\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/216","completion":"    val result = true\n    for (outer \n\nSample run:\n\n\ncheckSubsetList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]) \/\/ false\ncheckSubsetList([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]]) \/\/ true\ncheckSubsetList([[\"a\", \"b\"], [\"e\"], [\"c\", \"d\"]], [[\"g\"]]) \/\/ false\n\n\n\n\nThis is a great answer. My task was a bit different. I forgot to mention that the size of the inner lists can vary.<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"kotlin"}
{"task_id":"MBKP\/217","completion":"    if(str.isEmpty()) return \"\"\n    var hashSet = HashSet<String>()\n    for(i in 0..str.length-1){\n        var ch = str.substring(i,i+1)\n        if(hashSet.contains(ch)){\n            return ch\n        }\n        hashSet.add(ch)\n    }\n    return \"\"\n}","language":"kotlin"}
{"task_id":"MBKP\/218","completion":"    if (a == b)\n        return 0\n    if (a < b) {\n        var min = b - a\n        return (a + min) + 1\n    } else {\n        var min = a - b\n        return (b + min) + 1\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/219","completion":"    val sortedTuple = testTup.sorted()\n    if (sortedTuple.length <= k) {\n        return sortedTuple\n    }\n    val result = []\n    for (i in 0 until k) {\n        result += [sortedTuple[i]]\n    }\n    result += [sortedTuple[k-1]]\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/220","completion":"    var result = \"\"\n\n    text.replace(\/(\\s|\\,|\\.)\/g, (m , p1) -> {\n        if (m == \" \") result = result + \": \"\n        else result = result + m\n    })\n\n    var lastChar = result.charAt(result.length - 1)\n\n    if (lastChar == \":\" && result.length >= n) result = result.slice(0, -1)\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/221","completion":"    return nums.sorted().find { n -> n % 2 == 0 }\n}","language":"kotlin"}
{"task_id":"MBKP\/222","completion":"    val result = testTuple.map { it.typeof }.distinct().size == 1\n    println(\"Result: $result\")\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/223","completion":"    return arr[0] == x || arr.last() == x ? true : false\n}","language":"kotlin"}
{"task_id":"MBKP\/224","completion":"    val bits = n.toBitArray().map { it { it.toInt } }\n    bits.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/225","completion":"    if (low == high) return arr[low]\n    if (low + 1 == high) return arr[low]\n    var mid = low + (high - low) \/ 2\n    \/\/ if arr is already sorted then arr[mid] < arr[mid + 1]\n    \/\/ if arr is not sorted then arr[low] < arr[mid] < arr[high]\n    if (arr[mid] > arr[mid + 1]) return arr[low]\n    else if (arr[mid] < arr[mid + 1]) return arr[mid + 1]\n    else if (arr[mid] > arr[high]) return findMin(arr, low, mid)\n    else return findMin(arr, mid + 1, high)\n}","language":"kotlin"}
{"task_id":"MBKP\/226","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/227","completion":"    return a < b ? a < c ? a : c : b < c ? b : c\n}","language":"kotlin"}
{"task_id":"MBKP\/228","completion":"    val bits = (n - 1) to (r - 1)\n    return bits.takeWhile { it < l }.all { it == 0 }\n}","language":"kotlin"}
{"task_id":"MBKP\/229","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/230","completion":"    return str1.trim().replaceAll(\" \", char)\n}","language":"kotlin"}
{"task_id":"MBKP\/231","completion":"    \/\/ TODO\n}","language":"kotlin"}
{"task_id":"MBKP\/232","completion":"    val biggest = list1.sortedByDescending.take(n)\n    val result = []\n    if (n > 0) {\n        result.append(biggest.last)\n    }\n    if (n > 1) {\n        result.append(biggest[0])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/233","completion":"    val p = 2 * Math.PI * r\n    val s = p * h\n    val area = 2 * Math.PI * r * h\n    return s + area\n}","language":"kotlin"}
{"task_id":"MBKP\/234","completion":"    return l * l * l\n}","language":"kotlin"}
{"task_id":"MBKP\/235","completion":"    if (n == 0) {\n        return n\n    }\n    n = n & ~(1<<0)\n    return evenBitSetNumber(n)\n}","language":"kotlin"}
{"task_id":"MBKP\/236","completion":"    if(n == 1) return 1\n    if(n < 1 || k < 1) return -1\n\n    return (noOfTriangle(n - 1, k) + k) % (n + k)\n}","language":"kotlin"}
{"task_id":"MBKP\/237","completion":"    val counts = mutableMapOf<List<Int>, Int>()\n    testList.forEach { item ->\n        counts[item] += 1\n    }\n    return counts\n}","language":"kotlin"}
{"task_id":"MBKP\/238","completion":"    val chars = 0\n    val result = 0\n    for (i in 0 until str.size) {\n        val substring = str.substring(i, i + 1)\n        if (substring.isNotEmpty()) {\n            chars += 1\n            result += chars\n        } else {\n            chars = 0\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/239","completion":"    if (n < 1) {\n        return 0\n    }\n\n    if (n == 1) {\n        return 1\n    }\n\n    if (n == 2) {\n        return 2\n    }\n\n    \/\/ k = 1, 2, ..., n\n    var k = 1\n    var result = 0\n\n    \/\/ k = 2, 3, ..., n\n    while (k <= n) {\n        result += getTotalNumberOfSequences(m, k)\n        k = k * 2\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/240","completion":"    val lastIndex = list1.lastIndex\n    list1.removeLast()\n    list2.forEach { list1.add(it) }\n    return list1\n}","language":"kotlin"}
{"task_id":"MBKP\/241","completion":"    return for (i in 0..m) {\n        var row = List()\n        for (j in 0..n) {\n            var col = List()\n            for (k in 0..o) {\n                col.add(\" * \")\n            }\n            row.add(col)\n        }\n        yield row\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/242","completion":"    return str1.length\n}","language":"kotlin"}
{"task_id":"MBKP\/243","completion":"    val occurences = lst.groupBy { it.first }\n    val sorted = lst.sortedBy { it.first }\n    for (k, v in occurences) {\n        sorted = sorted.sortedBy { it.second }\n    }\n    return sorted\n}","language":"kotlin"}
{"task_id":"MBKP\/244","completion":"    val start = 1\n    val stop = n\n    while (start + 1 < stop) {\n        val mid = start + (stop - start) \/ 2\n        val midSquared = mid * mid\n        if (midSquared == n) return mid\n        if (midSquared > n) stop = mid\n        else start = mid\n    }\n    val middle = start + (stop - start) \/ 2\n    val middleSquared = middle * middle\n    if (middleSquared < n) return middle\n    if (middleSquared > n) return middle - 1\n    return middle\n}","language":"kotlin"}
{"task_id":"MBKP\/245","completion":"    var dp = Array(n)\n    dp[0] = arr[0]\n    var maxSum = dp[0]\n    for (i in arr) {\n        dp[i] = arr[i]\n        for (j in dp) {\n            if (j > i - 2) {\n                dp[j] = Math.max(arr[i] + dp[j - 2], dp[j])\n            }\n        }\n        maxSum = Math.max(maxSum, dp[i])\n    }\n    return maxSum\n}","language":"kotlin"}
{"task_id":"MBKP\/246","completion":"    return 0;\n}","language":"kotlin"}
{"task_id":"MBKP\/247","completion":"    \/\/ the length of the longest palindromic subsequence\n    var max : Int\n    \/\/ stores the length of each palindrome\n    var length : Array<Int>\n\n    \/\/ set the first and last indexes of the string to 0\n    \/\/ '1' because the string is supposed to start with\n    \/\/ a capital letter\n    var start : Int = 0\n    var end : Int = 0\n\n    \/\/ loop through the string\n    for (i <- str.length - 1; i > -1; i--) {\n        for (j <- str.length - 1; j > -1; j--) {\n            \/\/ we know that the 2 strings are palindromes if\n            \/\/ we reverse the first one and check if it is\n            \/\/ the same as the second one\n            if (str.charAt(i) == str.charAt(j) && (i + j) == (str.length - 1)) {\n                \/\/ if the string is","language":"kotlin"}
{"task_id":"MBKP\/248","completion":"    var sum = 0\n    for (i in 1 until n) {\n        sum = sum + 1 \/ i\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/249","completion":"    return arrayNums1.intersectWith(arrayNums2)\n}","language":"kotlin"}
{"task_id":"MBKP\/250","completion":"    var count = 0\n\n    for (i in tup) {\n        if (i == x) {\n            count += 1\n        }\n    }\n\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/251","completion":"    list.forEach {\n        list.append(element)\n        list.append(it)\n    }\n    return list\n}","language":"kotlin"}
{"task_id":"MBKP\/252","completion":"    val realPart = numbers \/ 2\n    val imaginaryPart = numbers % 2 * 3\n    return List(realPart, imaginaryPart)\n}","language":"kotlin"}
{"task_id":"MBKP\/253","completion":"    val list2 = list1.filter { !(it instanceof Int) }\n    list2.size\n}","language":"kotlin"}
{"task_id":"MBKP\/254","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/255","completion":"    if (n <= 0) return listOf(l)\n\n    var res = listOf()\n    var current : List<String> = listOf()\n\n    for (i in l) {\n        current.add(l[i])\n        if (current.size == n) {\n            res.add(current)\n            current = listOf()\n        }\n        combinationsColors(l.drop(i + 1), n - 1).forEach {\n            res.add(current.appendAll(it))\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/256","completion":"    var primeCount = 0\n    if (n <= 1) {\n        return primeCount\n    }\n    if (n == 2) {\n        return primeCount + 1\n    }\n    if (n % 2 == 0) {\n        return primeCount\n    }\n    var sqrt = Math.sqrt(n)\n    for (i in (2, sqrt)) {\n        if (n % i == 0) {\n            return primeCount\n        }\n    }\n    return primeCount + 1\n}","language":"kotlin"}
{"task_id":"MBKP\/257","completion":"    var list = listOf(a, b)\n    list.reverse()\n    return list\n}","language":"kotlin"}
{"task_id":"MBKP\/258","completion":"    var oddNums = arrayNums.filter { i -> i % 2 != 0 }\n    return oddNums.size\n}","language":"kotlin"}
{"task_id":"MBKP\/259","completion":"    \/\/ TODO: You are an expert Kotlin programmer, and here is your task.\n    \/\/ Write a function to maximize the given two tuples.\n    \/\/ >>> maximizeElements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n    \/\/ [[6, 7], [4, 9], [2, 9], [7, 10]]\n    \/\/ >>> maximizeElements([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n    \/\/ [[7, 8], [5, 10], [3, 10], [8, 11]]\n    \/\/ >>> maximizeElements([[3, 5], [6, 7], [4, 11], [3, ","language":"kotlin"}
{"task_id":"MBKP\/260","completion":"    \/\/ n >= 2 ? newmanPrime(n-1) + newmanPrime(n-2) + newmanPrime(n-3) : 1\n    \/\/ n >= 2 ? newmanPrime(n-1) * 2 : 2\n    \/\/ n >= 3 ? newmanPrime(n-1) * 3 : 3\n    \/\/ n >= 4 ? newmanPrime(n-1) * 4 : 4\n    if (n >= 2) {\n        return newmanPrime(n-1) + newmanPrime(n-2) + newmanPrime(n-3)\n    } else {\n        return 1\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/261","completion":"    val result = []\n    val length = testTup1.length\n    for (i in 0 until testTup1.length) {\n        result.append(testTup1[i] \/ testTup2[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/262","completion":"    val answer = listOf(listOf())\n    val idx = 0\n\n    while (idx < list1.size()) {\n        answer.add(listOf(list1.subList(idx, idx + l)))\n        idx += l\n    }\n\n    return answer\n}","language":"kotlin"}
{"task_id":"MBKP\/263","completion":"    val merged: Map<String, Int> = mutableMapOf<String, Int>()\n    d1.forEach {\n        merged[it.key] = it.value\n    }\n\n    d2.forEach {\n        merged[it.key] += it.value\n    }\n\n    return merged\n}","language":"kotlin"}
{"task_id":"MBKP\/264","completion":"    return hAge * 7;\n}","language":"kotlin"}
{"task_id":"MBKP\/265","completion":"    var result : List<List<Any>> = mutableListOf<List<Any>>()\n    for (i in 0 until s.size) {\n        result.add(mutableListOf<Any>(s.subList(from i step)))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/266","completion":"    return l * 6 * 6\n}","language":"kotlin"}
{"task_id":"MBKP\/267","completion":"    var sum : Int = 0\n    var i : Int = 1\n    while(i <= n){\n        sum += i * i\n        i += 2\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/268","completion":"    if (n == 1) return 1\n    return findStarNum(n - 1) + n * 2\n}","language":"kotlin"}
{"task_id":"MBKP\/269","completion":"    return k.toInt().toASCII()\n}","language":"kotlin"}
{"task_id":"MBKP\/270","completion":"    return sum(arr.filter { it % 2 == 0 }.takeWhile { it % 2 == 0 }))\n}","language":"kotlin"}
{"task_id":"MBKP\/271","completion":"    return n < 2 ? 0 : n * (n + 1) * (n + 2) * (n + 3) * (n + 4) \/ 5\n}","language":"kotlin"}
{"task_id":"MBKP\/272","completion":"    val result = List<Int>()\n\n    for (record : testList) {\n        val index = record.size - 1\n        val item = record[index]\n        result.add(item)\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/273","completion":"    val res = (0 to testTup1.size).map { i -> testTup1[i] - testTup2[i] }\n    val result = res.collect { it.toInt() }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/274","completion":"    var oddBinomialCoeffSum = 1;\n    var evenBinomialCoeffSum = 0;\n\n    for (i in 1 until n) {\n        if (i % 2 == 0) {\n            evenBinomialCoeffSum += oddBinomialCoeffSum;\n        } else {\n            oddBinomialCoeffSum += evenBinomialCoeffSum;\n        }\n    }\n\n    return evenBinomialCoeffSum * evenBinomialCoeffSum;\n}","language":"kotlin"}
{"task_id":"MBKP\/275","completion":"    val i = a.size - 1\n    for (i in 0 until a.size) {\n        if (a[i] == n) break\n    }\n    for (i in 0 until a.size) {\n        if (a[i] == m) break\n    }\n    return i\n}","language":"kotlin"}
{"task_id":"MBKP\/276","completion":"    return (4 * 3.14 * r * h) \/ 3;\n}","language":"kotlin"}
{"task_id":"MBKP\/277","completion":"    val newMap = HashMap<String, Int>()\n\n    dict.forEach { _, v ->\n        if (v == n) newMap.put(_, v)\n    }\n\n    return newMap\n}","language":"kotlin"}
{"task_id":"MBKP\/278","completion":"    val i = testTup.indexOf(testTup.last)\n    var count = 0\n    while (i != -1) {\n        i = testTup.indexOf(testTup.last, i + 1)\n        count += 1\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/279","completion":"    val a = 1\n    var b = 1\n    while(b <= n){\n        a = a + b\n        b = a + b\n    }\n    return a\n}","language":"kotlin"}
{"task_id":"MBKP\/280","completion":"    return dlist.sequentialSearch(item)\n}","language":"kotlin"}
{"task_id":"MBKP\/281","completion":"    var isUnique = true;\n    val list = testList.sorted();\n    for (i in 0 until testList.length) {\n        val element = list[i];\n        if (i > 0 && list[i] == list[i - 1]) {\n            isUnique = false;\n            break;\n        }\n    }\n    return isUnique;\n}","language":"kotlin"}
{"task_id":"MBKP\/282","completion":"    val res = nums1.map(e => e - nums2)\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/283","completion":"    val frequency = 1\n    val lastDigit = n % 10\n    while (n > 0) {\n        n \/= 10\n        frequency *= 10\n    }\n    val digitFrequency = frequency \/ 10\n    return digitFrequency <= lastDigit\n}","language":"kotlin"}
{"task_id":"MBKP\/284","completion":"    return list.all { it == element }\n}","language":"kotlin"}
{"task_id":"MBKP\/285","completion":"    val result = \"Not matched!\"\n\n    text.replaceFirst(\"a{2,3}b\", \"\")\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/286","completion":"    val dp = mutable.Array<Int>()\n    dp[0] = a[0]\n    for (i in 1..k) {\n        dp[i] = dp[i - 1] + a[i]\n    }\n    val result = dp[k - 1]\n    for (i in 0..k) {\n        val kMinusOne = i - 1\n        for (j in 0..n - kMinusOne) {\n            dp[i] = Math.max(dp[i], dp[i - 1])\n        }\n        result = Math.max(result, dp[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/287","completion":"    if (n < 1) throw IllegalArgumentException()\n    var sum = 0\n    for (i in 0 until n)\n        sum += i\n        sum * sum\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/288","completion":"    val result = []\n    arr.forEach {\n        result.push(n * pow(a, p, p) % p)\n    }\n    return result.max()\n}","language":"kotlin"}
{"task_id":"MBKP\/289","completion":"    var total = 0\n    for (i in 1 until n) {\n        if (i % 2) {\n            total += 1\n        }\n    }\n    return total\n}","language":"kotlin"}
{"task_id":"MBKP\/290","completion":"    list2 = map { it.size() }\n    return list2\n}","language":"kotlin"}
{"task_id":"MBKP\/291","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/292","completion":"    return n \/ m\n}","language":"kotlin"}
{"task_id":"MBKP\/293","completion":"    val a = h \/ 2\n    val b = w \/ 2\n    val c = (w ** 2 + h ** 2) ** 0.5\n    return (a + b + c) \/ 3\n}","language":"kotlin"}
{"task_id":"MBKP\/294","completion":"    if (listval.isEmpty()) return 0\n    val head = listval[0]\n    val tail = listval.tail\n    if (head < tail.head) {\n        val temp = tail.head\n        tail.head = head\n        head = temp\n    }\n    return max(maxVal(tail), head)\n}","language":"kotlin"}
{"task_id":"MBKP\/295","completion":"    if(number == 1) return 0\n    var sum = 0\n    for (i in 1 until number) {\n        if (number % i == 0) sum += i\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/296","completion":"    if (n <= 1) return 0\n\n    val sorted = arr.sorted()\n    val res = 0\n    for (i in 0 until n - 1) {\n        if (sorted[i] > sorted[i + 1]) {\n            res += (n - i - 1)\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/297","completion":"    \/\/ TODO: write your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/298","completion":"    return l2.filter { e2 -> l1.map { e1 ->\n        if (e1 in e2)\n            e1\n    }.filter { e1 -> e1 != null }.asSequence }.asSequence()\n}","language":"kotlin"}
{"task_id":"MBKP\/299","completion":"    \/\/Your code here\n    return stdata.maxBy(data -> data.reduce((acc, v) -> acc + v))\n}","language":"kotlin"}
{"task_id":"MBKP\/300","completion":"    var sum = 0.0\n    var temp = 0\n    for (i in 1..n) {\n        sum += temp\n        temp = temp * 2\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/301","completion":"    return 0\n}","language":"kotlin"}
{"task_id":"MBKP\/302","completion":"    var mask = 1 << (n - 1)\n    return ~mask & mask\n}","language":"kotlin"}
{"task_id":"MBKP\/303","completion":"    return a.sortDescending().distinct().size() == n\n}","language":"kotlin"}
{"task_id":"MBKP\/304","completion":"    var target = (index + rotations) % arr.size\n    var range = ranges[rotations % ranges.size]\n\n    return arr[range.get(target)]\n}","language":"kotlin"}
{"task_id":"MBKP\/305","completion":"    val result = []\n    for (i in words) {\n        if (words[i][0] == \"p\") {\n            result.append(words[i])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/306","completion":"    var prefix : List<Int>\n    var res : Int\n    var sum : Int\n\n    prefix = a.subList(0, k)\n    res = prefix.sum()\n\n    if (index < n - 1) {\n        sum = prefix.sum() + a[index + 1]\n        res = Math.max(res, sum)\n        return Math.max(res, maxSumIncreasingSubseq(a, n, index + 1, k))\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/307","completion":"    return list(tuplex[:m]) + list(tuplex[m:n]) + list(tuplex[n:])\n}","language":"kotlin"}
{"task_id":"MBKP\/308","completion":"    val result = mutableListOf<Int>()\n\n    val n1 = nums1.size\n    val n2 = nums2.size\n\n    for (i in 0 until n1) {\n        for (j in 0 until n2) {\n            val product = nums1[i] * nums2[j]\n            result.add(product)\n        }\n    }\n\n    val result1 = result.takeWhile {\n        it < n\n    }.reverse\n    result1\n}","language":"kotlin"}
{"task_id":"MBKP\/309","completion":"    return a > b ? a : b\n}","language":"kotlin"}
{"task_id":"MBKP\/310","completion":"    val result = mutableListOf<String>()\n    for (i in 0 until str1.length) {\n        result += str1[i]\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/311","completion":"    return n << 1 | n >> 31\n}","language":"kotlin"}
{"task_id":"MBKP\/312","completion":"    var pi = 3.1415926535897932\n    return pi * r * r * h \/ 3\n}","language":"kotlin"}
{"task_id":"MBKP\/313","completion":"    for(i in list1) {\n        if(list1[i] > 0) {\n            println(list1[i]);\n        }\n    }\n    return list1\n}","language":"kotlin"}
{"task_id":"MBKP\/314","completion":"    let dp = Array(n + 1).fill(0)\n    let max = 0\n    for (i in grid) {\n        for (j in grid[i]) {\n            dp[j] = dp[j] + grid[i][j]\n        }\n    }\n\n    for (i in dp) {\n        if (dp[i] > max)\n            max = dp[i]\n    }\n\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/315","completion":"    val l = str.toIntArray()\n    val res = l.map {\n        it.split(\" \").map(it2 -> it2.toInt().maxOrElse(-1)).collect(\n            StringBuilder(),\n            StringBuilder::append,\n            StringBuilder::append)\n    }\n    return res.filter { it.length % 2 == 0 }.maxBy(it => it.length).getOrElse(-1)\n}","language":"kotlin"}
{"task_id":"MBKP\/316","completion":"    var start = 0\n    var end = a.size - 1\n    var index = -1\n    var mid\n\n    while (start <= end) {\n        mid = (start + end) \/ 2\n        if (a[mid] < x) {\n            start = mid + 1\n        } else if (a[mid] > x) {\n            end = mid - 1\n        } else {\n            if (mid == a.size - 1) {\n                index = mid\n            } else if (mid == 0) {\n                index = mid\n            } else if (a[mid] == a[mid - 1]) {\n                index = mid\n            } else if (a[mid] == a[mid + 1]) {\n                index = mid\n            } else {\n                index = mid - 1\n            }\n\n            end = mid -","language":"kotlin"}
{"task_id":"MBKP\/317","completion":"    val i = 0\n    var l : List<Any> = []\n    val prev = -1\n    while (i < alist.length) {\n        if (alist[i] == prev) {\n            l.add(alist[i])\n            i = i + 1\n        } else {\n            prev = alist[i]\n            l.add(alist[i])\n        }\n    }\n    return l\n}","language":"kotlin"}
{"task_id":"MBKP\/318","completion":"    \/\/ you code\n}","language":"kotlin"}
{"task_id":"MBKP\/319","completion":"    return text.findAll(\"\\\\w{5,}\")\n}","language":"kotlin"}
{"task_id":"MBKP\/320","completion":"    \/\/ Write your code here\n    return ((n * (n + 1)) \/ 2 * n) - n * (n + 1) * (2 * n + 1) \/ 6\n}","language":"kotlin"}
{"task_id":"MBKP\/321","completion":"    val n = (s + '0' * (s.length % 3)).toCharArray()\n    val d = []\n    var i : Int = 0\n    while (i < n.length) {\n        if (i + 4 <= n.length) {\n            d.add(n.slice(i, i + 4))\n        } else {\n            d.add(n.slice(i))\n        }\n        i += 3\n    }\n\n    var i : Int = 0\n    while (i < d.size) {\n        var c : String = d[i]\n        if (c[0] == '9' && c[1] == '1' && c[2] == '2' && c[3] == '3') {\n            break\n        }\n        i++\n    }\n    return d[i].join('')\n}","language":"kotlin"}
{"task_id":"MBKP\/322","completion":"    val min = list1.minBy { it }\n    var ret = mutableListOf<Int>()\n    for (i in list1) {\n        if (list1[i] == min)\n            ret.add(i)\n    }\n    return ret\n}","language":"kotlin"}
{"task_id":"MBKP\/323","completion":"    if (arr.isEmpty()) return arr\n    if (arr.size() == 1) return arr\n    arr.sort()\n    i = 0\n    while (i < arr.size() \/ 2) {\n        if (arr[i] > 0) {\n            swap(arr, i, arr.size() - 1 - i)\n        } else {\n            swap(arr, i, 0)\n            i++\n        }\n    }\n    return arr\n}","language":"kotlin"}
{"task_id":"MBKP\/324","completion":"    val result = mutableListOf<Int>()\n\n    for (i in 0..testTuple.length-1) {\n        if (i % 2 == 1) result.append(testTuple[i])\n        else result.append(result.pop() + testTuple[i])\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/325","completion":"    var num = n * n;\n    var n = 1;\n    while(true) {\n        var sum = (n * n) * n;\n        if (sum > num) break;\n        n++;\n    }\n    return n;\n}","language":"kotlin"}
{"task_id":"MBKP\/326","completion":"    val counter = Counter()\n    testList.forEach {\n        val word = it.replace(\" \", \"\")\n        counter += Counter(word)\n    }\n    val word = counter.maxBy { it.count }.key\n    return word\n}","language":"kotlin"}
{"task_id":"MBKP\/327","completion":"    val max = max(x, y, z)\n    val min = min(x, y, z)\n    return (max - min) < 2\n}","language":"kotlin"}
{"task_id":"MBKP\/328","completion":"    return list1.take(m).appendAll(list1.drop(n))\n}","language":"kotlin"}
{"task_id":"MBKP\/329","completion":"    return list.filter { it < 0 }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/330","completion":"    val pattern = \"\"\"\n        (?<word>^[A-Za-z]{3,5})\n    \"\"\"\n    val regex = Regex(pattern)\n    val matcher = regex.matcher(text)\n    var results : List<String>? = null\n    while (matcher.find()){\n        results?.add(matcher.captures(\"word\").toString())\n    }\n    return results ?? List.empty()\n}","language":"kotlin"}
{"task_id":"MBKP\/331","completion":"    n.toInt()\n}","language":"kotlin"}
{"task_id":"MBKP\/332","completion":"    val charFreq = mutableMapOf<String, Int>()\n    for (char c in str1) {\n        if (charFreq.contains(c)) {\n            val freq = charFreq[c]\n            charFreq[c] = freq + 1\n        } else {\n            charFreq[c] = 1\n        }\n    }\n    return charFreq\n}","language":"kotlin"}
{"task_id":"MBKP\/333","completion":"    val result = subLi.sortedBy { it.second }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/334","completion":"    return (a + b > c && b + c > a && c + a > b);\n}","language":"kotlin"}
{"task_id":"MBKP\/335","completion":"    return n * (a + d) - a * d\n}","language":"kotlin"}
{"task_id":"MBKP\/336","completion":"    var daysNum = 28\n    if (monthname1 == \"February\") daysNum = 28\n    if (monthname1 == \"January\") daysNum = 31\n    if (monthname1 == \"March\") daysNum = 31\n    if (monthname1 == \"April\") daysNum = 30\n    if (monthname1 == \"May\") daysNum = 31\n    if (monthname1 == \"June\") daysNum = 30\n    if (monthname1 == \"July\") daysNum = 31\n    if (monthname1 == \"August\") daysNum = 31\n    if (monthname1 == \"September\") daysNum = 30\n    if (monthname1 == \"October\") daysNum = 31\n    if (monthname1 == \"November\") daysNum = 30\n    if (monthname1 == \"December\") daysNum = 31\n    return daysNum == ","language":"kotlin"}
{"task_id":"MBKP\/337","completion":"    val matcher = (text + \"$\").rpartition(\"$\")\n    return matcher[1].isEmpty() ? \"Not matched!\" : \"Found a match!\"\n}","language":"kotlin"}
{"task_id":"MBKP\/338","completion":"    val n = s.length\n    if (n < 2) return 0\n\n    var count : Int = 0\n    var cur : Int = 0\n    var last : Int = 0\n\n    while (cur < n) {\n        if (cur == last) count += 1\n        last = cur\n        if (s[cur] == s[cur+1]) {\n            cur += 1\n            continue\n        }\n        cur += 1\n    }\n\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/339","completion":"    val max = 0\n    var result = 0\n\n    while (y >= x) {\n        if (y % x == 0) {\n            max = max + 1\n            result = result + x\n        }\n        y--\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/340","completion":"    val res = lst.filter { it > 0 }.sortedWith { _.comparingInt { it } }.take 3.sum\n    println(res)\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/341","completion":"    return s.map { it }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/342","completion":"    var min = 0\n    var max = 0\n    for (i in list.map { it.length }) {\n        min = list[i][0]\n        max = list[i][0]\n        for (j in list[i]) {\n            max = max < list[i][j] ? list[i][j] : max\n            min = min > list[i][j] ? list[i][j] : min\n        }\n        max += 1\n        min -= 1\n        print(min, max)\n    }\n    return min, max\n}","language":"kotlin"}
{"task_id":"MBKP\/343","completion":"    return [\n        s.digits().size(),\n        s.characters().size()\n    ]\n}","language":"kotlin"}
{"task_id":"MBKP\/344","completion":"    \/\/ n = max number\n    \/\/ m = min number\n\n    var count = 0\n    for(i in 0 until n) {\n        for(j in 0 until n) {\n            if(i*i + j*j > (m+n)\/2) {\n                break\n            }\n            if(i*i + j*j == (m+n)\/2) {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/345","completion":"    val result = []\n    var start = 0\n    while (start < nums.length) {\n        var next = start + 1\n        while (next < nums.length) {\n            if (nums[start] != nums[next]) {\n                break\n            }\n            next++\n        }\n        result.append(next - start)\n        start = next\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/346","completion":"    var e = 0\n    var i = 0\n    var g = 0\n\n    if (n == 1) {\n        return n\n    }\n\n    while (i < k) {\n        g = g + 1\n        if (g == n + 1) {\n            i = i + 1\n            g = g - 2\n        }\n        e = e + 1\n        if (e == n + 1) {\n            i = i + 1\n            e = e - 2\n        }\n    }\n    return e\n}","language":"kotlin"}
{"task_id":"MBKP\/347","completion":"    return m * m + n * n\n}","language":"kotlin"}
{"task_id":"MBKP\/348","completion":"    \/\/ Your code goes here\n    if (m == 0) return 1\n    if (m == 1) return 1\n    if (m == 2) return 2\n\n    val sum = [0 for _ in range(m + 1)]\n    for i in range(m + 1):\n        sum[i] = sum[i - 1] + (i % 2 == 0)\n\n    def dp(m : Int) : Int = 0\n    for i in range(m - 1, -1, -1):\n        dp = dp + sum[i]\n        sum[i] = dp\n\n    return sum[m]\n}","language":"kotlin"}
{"task_id":"MBKP\/349","completion":"    val s = string.toInt() \/\/ convert string to int\n    if(s.bitCount() % 2 == 0) {\n        return \"Yes\"\n    }\n    return \"No\"\n}","language":"kotlin"}
{"task_id":"MBKP\/350","completion":"    val dict = arrayListOf(Int)(0)\n    for (i in 0..s.length-1) {\n        if (s[i] == s[i+1]) {\n            dict = dict + (dict.last + 1)\n        } else {\n            dict.last = dict.last\n        }\n    }\n    return dict.last\n}","language":"kotlin"}
{"task_id":"MBKP\/351","completion":"    return arr.takeUntil { it.sum() == n }.dropWhile { it.count() < k }.first()\n}","language":"kotlin"}
{"task_id":"MBKP\/352","completion":"    \/\/ TODO\n}","language":"kotlin"}
{"task_id":"MBKP\/353","completion":"  val result = list1.map {\n    list2 -> list2.drop(n)\n  }\n\n  return result\n}","language":"kotlin"}
{"task_id":"MBKP\/354","completion":"    var i : Int = a\n    var r : Int = 0\n    while (n != 0) {\n        r += i\n        n--\n        i = i * d\n    }\n    return r\n}","language":"kotlin"}
{"task_id":"MBKP\/355","completion":"    if (radius < 1) return 0\n    val rectangles = 2 * radius * radius\n    val side = radius * 2 + 1\n    return rectangles + side * side\n}","language":"kotlin"}
{"task_id":"MBKP\/356","completion":"    a = (a + b) \/ 2\n    a = (180 * (a \/ (2 * 360)))\n    b = (360 - (b * 2))\n    b = (180 * (b \/ (2 * 360)))\n    return a + b\n}","language":"kotlin"}
{"task_id":"MBKP\/357","completion":"    return maxOfAll(testList)\n}","language":"kotlin"}
{"task_id":"MBKP\/358","completion":"    return nums1.map { n1 -> nums2.map { n2 -> n1 % n2 }.getOrElse(0) }\n}","language":"kotlin"}
{"task_id":"MBKP\/359","completion":"    val root1 = (-b + Math.sqrt(b*b - 4*a*c)) \/ (2*a)\n    val root2 = (-b - Math.sqrt(b*b - 4*a*c)) \/ (2*a)\n    return root1 == root2 ? \"Yes\" : \"No\"\n}","language":"kotlin"}
{"task_id":"MBKP\/360","completion":"    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum = sum + 1\n        i = i + 1\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/361","completion":"    return list1.filter(l -> !l.isEmpty())\n}","language":"kotlin"}
{"task_id":"MBKP\/362","completion":"    var map = HashMap<Int, Mutable<Int>>()\n\n    for (i in nums) {\n        if (map.containsKey(i)) {\n            var value = map[i]\n            if (value.getValue() < 2) {\n                value.setValue(value.getValue() + 1)\n            }\n        } else {\n            map.put(i, Mutable.of(1))\n        }\n    }\n\n    var key = map.keySet().maxBy(_.comparing(map[i] => map[i].getValue()))\n\n    return key\n}","language":"kotlin"}
{"task_id":"MBKP\/363","completion":"    val newList = testList.map { a -> a.map { i -> i + k } }\n    return newList\n}","language":"kotlin"}
{"task_id":"MBKP\/364","completion":"    var flipped = 0\n    var i = 0\n    var len = str.length\n    \n    while (flipped < len \/ 2 + 1) {\n        if (str.charAt(i) == str.charAt(i + 1)) {\n            flipped++\n            i++\n        } else {\n            i++\n        }\n    }\n    \n    return flipped\n}","language":"kotlin"}
{"task_id":"MBKP\/365","completion":"    val str = String(n).toInt()\n    return str.length\n}","language":"kotlin"}
{"task_id":"MBKP\/366","completion":"    return 0;\n}","language":"kotlin"}
{"task_id":"MBKP\/368","completion":"    val res = mutableListOf<List<Int>>()\n    var temp = mutableListOf<Int>()\n\n    for (i in 0 until n) {\n        res += mutableListOf(testTup)\n    }\n\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/369","completion":"    \/*\n    * Your task:\n    * 1. Calculate the lateral surface area of cuboid\n    * 2. Print the result of the function to test your work\n    *\/\n\n    \/\/ 1.\n    var lateralsurface : Int = l*w*h\n\n    \/\/ 2.\n    println(\"$lateralSurface: $lateralsurface\")\n}","language":"kotlin"}
{"task_id":"MBKP\/370","completion":"    price.sort((a,b) => Float.parseFloat(a[1]) - Float.parseFloat(b[1]))\n    return price\n}","language":"kotlin"}
{"task_id":"MBKP\/371","completion":"    \/\/ TODO\n}","language":"kotlin"}
{"task_id":"MBKP\/372","completion":"    val maxHeap = createMaxHeap(nums)\n    val result = []\n\n    for (i in maxHeap) {\n        result.append(maxHeap[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/373","completion":"    return l * w * h;\n}","language":"kotlin"}
{"task_id":"MBKP\/374","completion":"    val permutations = mutableListOf<String>()\n    permutations.add(\"\")\n    var permutationIndex = 0\n    while (permutationIndex < permutations.size()) {\n        val currentPermutation = permutations[permutationIndex]\n        if (currentPermutation.length == str.length) {\n            permutations.add(currentPermutation)\n            permutationIndex++\n            continue\n        }\n        for (var i = 0; i < str.length; i++) {\n            if (currentPermutation.contains(str.substring(i, i + 1))) continue\n            val newPermutation = currentPermutation + str.substring(i, i + 1)\n            permutations.add(newPermutation)\n        }\n        permutationIndex++\n    }\n    return permutations\n}","language":"kotlin"}
{"task_id":"MBKP\/375","completion":"    return n \/ m * m\n}","language":"kotlin"}
{"task_id":"MBKP\/376","completion":"    val seen = HashSet<Any>()\n    val result = []\n\n    for (i in testTup) {\n        if (seen.add(testTup[i])) result.append(testTup[i])\n        else result.append(Any(\"MSP\"))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/377","completion":"    var result = \"\"\n    var index = 0\n    while (index < s.length) {\n        if (s[index] != c) result += s[index]\n        index += 1\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/378","completion":"    return testList.dropRight(1).take(testList.size())\n}","language":"kotlin"}
{"task_id":"MBKP\/379","completion":"    return l * w * h\n}","language":"kotlin"}
{"task_id":"MBKP\/380","completion":"    val result : List<List<Int>> = new ArrayList<List<Int>>()\n    for (row <- Int.Range(0, rownum)) {\n        result.Add(new ArrayList<Int>());\n        for (col <- Int.Range(0, colnum)) {\n            result[row].Add(row * colnum + col)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/381","completion":"    return listData.map { it.take(indexNo).toList() }\n}","language":"kotlin"}
{"task_id":"MBKP\/382","completion":"    return a.length - (a.size + 1) % a.size\n}","language":"kotlin"}
{"task_id":"MBKP\/383","completion":"    \/**\n     * Let's calculate the new number of the given number\n     * by toggling all odd bits with 0s, all even bits with 1s.\n     * So, if the number of the given number is n, the result\n     * should be n ^ (n >> 1)\n     *\/\n    return n ^ (n >> 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/384","completion":"    val freq = 0\n    for (i in arr)\n        if (arr[i] < arr[freq])\n            freq = i\n    return freq + 1\n}","language":"kotlin"}
{"task_id":"MBKP\/385","completion":"    if (n == 0) return 0\n    return getPerrin(n - 1) + getPerrin(n - 2) + getPerrin(n - 3)\n}","language":"kotlin"}
{"task_id":"MBKP\/386","completion":"    var count : Int = 0\n    for (i in 1..s.length) {\n        if (s(i) == '[' && s(i+1) == '[') {\n            count += 1\n        }\n        if (s(i) == ']' && s(i+1) == ']') {\n            count += 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/387","completion":"    return (n.toString(16).toUpperCase()%2==0) ? \"Even\" : \"Odd\"\n}","language":"kotlin"}
{"task_id":"MBKP\/388","completion":"    let count: Int = 0;\n    let max : Int = 1;\n    for (i in 1 until n) {\n        count = 0\n        for (j in 2 until n) {\n            if (i + j == n) {\n                count += 1\n                max = max < count + 1 ? count + 1 : max\n            }\n            else\n                break;\n        }\n    }\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/389","completion":"    var lucas : Int\n    lucas = 2\n    if (n > 2) {\n        for (i in 1 until n) {\n            lucas = lucas + lucas - 1\n        }\n    }\n    return lucas\n}","language":"kotlin"}
{"task_id":"MBKP\/390","completion":"    list.forEach {\n        mutable s = string.format(it)\n        list.insert(0, s)\n    }\n    return list\n}","language":"kotlin"}
{"task_id":"MBKP\/391","completion":"    val result = mutableListOfMapOfMap<String, Map<String, Int>>()\n    var idx1 = 0\n    var idx2 = 0\n    var idx3 = 0\n    while(idx1 < l1.size() && idx2 < l2.size() && idx3 < l3.size()) {\n        if (l1[idx1].length >= l2[idx2].length && l1[idx1].substring(0, l2[idx2].length).equals(l2[idx2])) {\n            var temp = mutableMapOfMap<String, Int>()\n            var temp2 = mutableMapOfMap<String, String>()\n            temp.put(l1[idx1], l3[idx3])\n            temp2.put(l2[idx2], l1[idx1])\n            result.add(temp)\n            idx1++\n            idx3++\n        } else if (l1[idx1].length < l2[idx2].length && l1[idx1].equals(l2","language":"kotlin"}
{"task_id":"MBKP\/392","completion":"    val f = (n\/2 + n\/3 + n\/4 + n\/5).toInt\n    return max(f(0), f(n))\n}","language":"kotlin"}
{"task_id":"MBKP\/393","completion":"    return inputList.maxBy({ it.size })\n}","language":"kotlin"}
{"task_id":"MBKP\/394","completion":"  var result = true\n  for (i in testTup) {\n    if (testTup.lastIndexOf(testTup[i]) != testTup.indexOf(testTup[i])) {\n      result = false\n    }\n  }\n  return result\n}","language":"kotlin"}
{"task_id":"MBKP\/395","completion":"    var map = mapOf<character>()\n    for (s in str1) {\n        map[s] = map[s] + 1 || 1\n    }\n    for (i in map) {\n        if (map[i] == 1) {\n            return i\n        }\n    }\n    return null\n}","language":"kotlin"}
{"task_id":"MBKP\/396","completion":"    if (string.startsWith(\"^[a-z]\") && string.endsWith(\"$\")) {\n        return \"Valid\"\n    }\n    else return \"Invalid\"\n}","language":"kotlin"}
{"task_id":"MBKP\/397","completion":"    return (a + b + c) \/ 3\n}","language":"kotlin"}
{"task_id":"MBKP\/398","completion":"    val res = 0\n    for (it in nums) {\n        if (it is Int) {\n            res += it\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/399","completion":"    return testTup1.map { it1 ->\n        testTup2.map { it2 ->\n            it1.value ^ it2.value\n        }\n    }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/400","completion":"    val map = (map.merge) { case (a, b) => a + b }\n    val freq = map.keys.map { map(it) }\n    val freqMap = freq.map { freq.frequencyOf(it) }\n    freqMap.reduce { case a => a }\n}","language":"kotlin"}
{"task_id":"MBKP\/401","completion":"  val result = testTup1.mapIndexed { (idx, l1) =>\n      testTup2.mapIndexed { (idx, l2) =>\n          l1.zipWithIndex { (a, i) =>\n              if (i >= 0) {\n                  l2.zipWithIndex { (b, j) =>\n                      if (j >= 0) {\n                          a + b\n                      } else {\n                          Int(0)\n                      }\n                  }\n              } else {\n                  Int(0)\n              }\n          }\n      }\n  }\n  return result\n}","language":"kotlin"}
{"task_id":"MBKP\/402","completion":"    if (n == 0) return 0\n    if (n == 1) return 1\n    if (n == 2) return r % p\n    if (n == 3) return (r % p) * (r % p) % p\n    if (n == 4) return ((r % p) * (r % p) * (r % p)) % p\n    if (n == 5) return ((r % p) * ((r % p) * (r % p))) % p\n    if (n == 6) return ((((r % p) * ((r % p) * (r % p))) * ((r % p) * (r % p))) * ((r % p) * (r % p))) % p\n    if (n == 7) return ((((r % p) * ((r %","language":"kotlin"}
{"task_id":"MBKP\/403","completion":"    return str.matches(\"^(https?|ftp):\/\/[-a-zA-Z0-9+&@#\/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#\/%=~_|]\");\n}","language":"kotlin"}
{"task_id":"MBKP\/404","completion":"    return a < b ? a : b\n}","language":"kotlin"}
{"task_id":"MBKP\/405","completion":"        var index1 = tuplex.indexOf(tuple1);\n        if (index1 != -1)\n                return true;\n        return false;\n}","language":"kotlin"}
{"task_id":"MBKP\/406","completion":"    var parity = 0\n    if (x % 2 == 0) parity = \"Even Parity\"\n    else parity = \"Odd Parity\"\n    return parity\n}","language":"kotlin"}
{"task_id":"MBKP\/407","completion":"    \/\/TODO\n}","language":"kotlin"}
{"task_id":"MBKP\/408","completion":"    val result = mutableListOf<List<Int>>()\n    for (i in 0 until nums1.size) {\n        for (j in 0 until nums2.size) {\n            val pair = mutableListOf<Int>()\n            pair.add(nums1[i])\n            pair.add(nums2[j])\n            if (i + j < k) result.add(pair)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/409","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/410","completion":"    if (listval.isEmpty()) return 0\n    val min: Int = 0\n    for (i in 0 until listval.size) {\n        val elem = listval[i] as Any\n        if (elem.compareTo(min) < 0) {\n            min = elem\n        }\n    }\n    return min\n}","language":"kotlin"}
{"task_id":"MBKP\/411","completion":"    val regex = \".*[_][a-zA-Z]+[_].*\"\n    val match = word.match(regex)\n    if (match == null) {\n        return word\n    } else {\n        val replacedWord = match[0].substring(0, match[0].length - 1) + match[0].substring(match[0].length - 1)\n        return replacedWord.replaceAll(\"_\", \"\")\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/412","completion":"    return l.filter(x -> x % 2 == 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/413","completion":"    return list1.map(list => list.get(n)).toList();\n}","language":"kotlin"}
{"task_id":"MBKP\/414","completion":"    \/\/ write your code in Kotlin\n}","language":"kotlin"}
{"task_id":"MBKP\/415","completion":"    val max = arr[0] * arr[1]\n    val maxPair = [arr[0], arr[1]]\n\n    for (i in 0..arr.lastIndex) {\n        val a = arr[i]\n        val b = arr[arr.lastIndex - i]\n        val pair = a * b\n        if (pair > max) {\n            max = pair\n            maxPair = [a, b]\n        }\n    }\n    return maxPair\n}","language":"kotlin"}
{"task_id":"MBKP\/416","completion":"    var a : Int = n \/ 3\n    var b : Int = (n % 3) \/ 2\n    var c : Int = n % 3\n    var sum : Int\n    if (a == 0) sum = b + c\n    else if (b == 0) sum = a + c\n    else sum = a + b + c\n    if (sum > n) sum = sum - n\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/417","completion":"    val map = input.groupBy { it.first }\n    map.keys.first()\n}","language":"kotlin"}
{"task_id":"MBKP\/418","completion":"    var result = []\n    for (sublist in lst) {\n        if (sublist.length > result.length) {\n            result = sublist\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/419","completion":"        var result = 0\n        var length = list1.size\n        var number = 0\n        var sum = 0\n        for (i in list1) {\n                number = Math.round(list1[i])\n                result += number\n                sum += number\n        }\n        result *= length\n        return result\n}","language":"kotlin"}
{"task_id":"MBKP\/420","completion":"    return 5 * (n ** 2) * (n + 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/421","completion":"    val sb = StringBuilder()\n    var i = 0\n    while (i < testTup.size) {\n        if (i > 0)\n            sb.append(\"-\")\n        val currentElement = testTup[i]\n        sb.append(currentElement)\n        i += 1\n    }\n    return sb.toString()\n}","language":"kotlin"}
{"task_id":"MBKP\/422","completion":"    return (1.0 * n + 1.0 * n * n + 1.0 * n * n * n) \/ (n + 1.0 * n + 1.0 * n * n + 1.0 * n * n * n)\n}","language":"kotlin"}
{"task_id":"MBKP\/423","completion":"    \/\/ write your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/424","completion":"    val arr : List<String> = mutableListOf()\n    testTuple.forEach {\n        arr.append(it[testTuple.size - 1])\n    }\n    return arr\n}","language":"kotlin"}
{"task_id":"MBKP\/425","completion":"    \/\/ write your code here\n    var count = 0\n    for (var i : 0 .. list1.size) {\n        if (x in list1[i]) {\n            count += 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/426","completion":"    return nums.filter{it % 2 == 1}\n}","language":"kotlin"}
{"task_id":"MBKP\/427","completion":"    return dt.replaceAll(\"-\", \"\").replaceAll(\"(.{2})\", \"$1-\")\n}","language":"kotlin"}
{"task_id":"MBKP\/428","completion":"    val n = myList.size\n    val gap = n \/ 2\n    val _ = 1\n    while (gap > 0) {\n        for (i in 0 until gap) {\n            j = i\n            val value = myList[i]\n            while (j >= gap && myList[j - gap] > value) {\n                myList[j] = myList[j - gap]\n                j = j - gap\n            }\n            myList[j] = value\n        }\n        gap = gap \/ 2\n    }\n    return myList\n}","language":"kotlin"}
{"task_id":"MBKP\/429","completion":"    val result = mutableListOf<Int>()\n    for (i in 0 until testTup1.size) {\n        val num1 = testTup1[i]\n        for (j in 0 until testTup2.size) {\n            val num2 = testTup2[j]\n            if (num1 != num2) {\n                result.add(num1 & num2)\n            }\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/430","completion":"    return (((a * a) \/ (2 * b)) + ((b * b) \/ (2 * c)))\n}","language":"kotlin"}
{"task_id":"MBKP\/431","completion":"    return list1.intersect(list2).isNotEmpty()\n}","language":"kotlin"}
{"task_id":"MBKP\/432","completion":"    var heightLeft : Int = height\n    var heightRight : Int = height\n\n    if (heightLeft > heightRight) {\n        heightLeft : heightRight\n    }\n\n    return (base1 + base2) \/ 2 +\n        (\n            (heightLeft + heightRight) \/ 2\n            if (heightLeft != heightRight)\n            else\n            (\n                (base1 + base2) \/ 2\n                if (base1 != base2)\n                else\n                base1\n            )\n        )\n}","language":"kotlin"}
{"task_id":"MBKP\/433","completion":"    val max = Arrays.stream(arr).max()\n    val index = Arrays.stream(arr).filter(x -> x == number).count()\n\n    if (max == number) return \"Yes, the entered number is greater than those in the array\"\n    else return \"No, entered number is less than those in the array\"\n}","language":"kotlin"}
{"task_id":"MBKP\/434","completion":"    if (text.endsWith(\"a\") && text.length >= 2) {\n        var sub = text.substring(0, text.length - 1) + \"b\"\n        if (sub.endsWith(\"b\")) {\n            return \"Found a match!\"\n        }\n    }\n    return \"Not matched!\"\n}","language":"kotlin"}
{"task_id":"MBKP\/435","completion":"    return n % 10\n}","language":"kotlin"}
{"task_id":"MBKP\/436","completion":"    return list1.filter { it < 0 }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/437","completion":"    return str1.filter { it != \"y\" && it != \"n\" }\n}","language":"kotlin"}
{"task_id":"MBKP\/438","completion":"    val res = 0\n    for (i in 0 until testList.size) {\n        val j = testList.size - i - 1\n        if (testList[i].tail == testList[j].head) {\n            res += 1\n        }\n    }\n    return \"\" + res\n}","language":"kotlin"}
{"task_id":"MBKP\/439","completion":"    return l.reduce {\n        (a, b) -> a * b\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/440","completion":"    val adverbs = mutableListOf<String>()\n    \/\/ add all the adverbs in the text\n    val adjectives = text.split(\" \")\n    adjectives.forEach {\n        if (it.length > 3 && it.substring(it.length - 3).toLowerCase().equals(\"ly\")) {\n            val adverb = it.substring(0, it.length - 3).toLowerCase()\n            adverbs.add(adverb)\n        }\n    }\n    \/\/ sort the adverbs by their position in the text\n    adverbs.sortWith(comparingInt(it : String))\n    \/\/ create a map of the adverbs\n    val map = mutableMapOf<String, Int>()\n    for (index in adverbs) {\n        map[it] = index\n    }\n    \/\/ sort the adverbs by their positions in the text\n    adverbs.sortWith(comparingInt(it : String))\n    val result = mutableListOf<Any>()\n    for","language":"kotlin"}
{"task_id":"MBKP\/441","completion":"    \/**\n     * 3x^2 + 2x + 1\n     *\n     * @param l: side length of cube\n     * @return: the surface area of the cube\n     *\/\n    return 6 * l * l\n}","language":"kotlin"}
{"task_id":"MBKP\/442","completion":"    return nums.filter { n -> n > 0 }.size().toDouble() \/ nums.size()\n}","language":"kotlin"}
{"task_id":"MBKP\/443","completion":"    return list1.maxBy { it -> it < 0 }\n}","language":"kotlin"}
{"task_id":"MBKP\/444","completion":"    return\n}","language":"kotlin"}
{"task_id":"MBKP\/445","completion":"    val result = List<List<Int>>()\n    for (var i : Iterator<Int>) {\n        result.add(testTup1.map { e -> e[i] * testTup2.map { e -> e[i] } })\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/446","completion":"    return lst.map { it in tup }.map { tup.indexOf(it) }\n}","language":"kotlin"}
{"task_id":"MBKP\/447","completion":"    var cubes: List<Int> = nums.map { x -> x * x * x }\n    return cubes\n}","language":"kotlin"}
{"task_id":"MBKP\/448","completion":"    \/\/ Your code here\n    return 0;\n}","language":"kotlin"}
{"task_id":"MBKP\/449","completion":"    val isTriangle = (x1 - x2) * (y3 - y2) + (x2 - x3) * (y1 - y2) + (x3 - x1) * (y2 - y1) == 0\n    return isTriangle ? \"Yes\" : \"No\"\n}","language":"kotlin"}
{"task_id":"MBKP\/450","completion":"    return str.take(l)\n}","language":"kotlin"}
{"task_id":"MBKP\/451","completion":"    return text1.replace(\/\\s\/g, \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/452","completion":"    if (saleAmount > actualCost) return null\n    return actualCost - saleAmount\n}","language":"kotlin"}
{"task_id":"MBKP\/453","completion":"    sum = 0\n    for (i in (1..n)) {\n        if (n % i == 0) {\n            sum += i\n        }\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/454","completion":"    val matcher = Regex.fullMatch(\".*z.*\", text)\n    if (matcher != null) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/455","completion":"    return monthnum2 < 13 && monthnum2 % 2 == 0 || monthnum2 > 2\n}","language":"kotlin"}
{"task_id":"MBKP\/456","completion":"  \/\/ Solution here\n}","language":"kotlin"}
{"task_id":"MBKP\/457","completion":"    val min = lst.last()\n    for (i in lst) {\n        if (i.size < min.size) {\n            min = i\n        }\n    }\n    return min\n}","language":"kotlin"}
{"task_id":"MBKP\/458","completion":"    val area = l * b\n    println(\"The area of the rectangle is $area\")\n    return area\n}","language":"kotlin"}
{"task_id":"MBKP\/459","completion":"    val regex = \"(?<=[a-z])[A-Z]+(?=[a-z])\"\n    val repl = \"\"\n    return str1.replace(regex, repl)\n}","language":"kotlin"}
{"task_id":"MBKP\/460","completion":"    return lst.flatMap { it.map { it[0] } }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/461","completion":"    return str.length.toInt() - str.replaceAll { it.codePoints.any { it == Character.toUpperCase(it) } }.length.toInt()\n}","language":"kotlin"}
{"task_id":"MBKP\/462","completion":"    var result = mutableListOf<List<Any>>()\n    if(list1.isEmpty) {\n        result = mutableListOf<List<Any>>()\n        result.append([])\n        return result\n    }\n\n    var first = list1.head\n    var rest = list1.tail\n    rest.forEach {\n        result.append(mutableListOf<Any>().append(first))\n        var list2 = combinationsList(rest)\n        result.append(list2)\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/463","completion":"    var max : Int\n    var min : Int\n\n    min = max = arr[0]\n\n    var product : Int\n\n    for (i in arr) {\n        if (arr[i] < 0) {\n            max = max < 0 ? -arr[i] : max\n            min = min > 0 ? -arr[i] : min\n        } else {\n            max = max > 0 ? max : -arr[i]\n            min = min < 0 ? min : -arr[i]\n        }\n    }\n\n    product = max * min\n\n    return product\n}","language":"kotlin"}
{"task_id":"MBKP\/464","completion":"    var result = true\n    for (var entry in dict) {\n        if (dict[entry] != n) {\n            result = false\n            break\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/465","completion":"    val res = mutableMapOf<String, String>()\n    dict1.forEach { (k, v) ->\n        if (v != null) {\n            res.put(k, v)\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/466","completion":"    if (arr.size == 1) return 0\n    for (i in 0 until n-1) {\n        \/\/check the left side\n        if (arr[i] > arr[i+1]) return i\n        \/\/check the right side\n        else if (arr[i] < arr[i+1]) return i+1\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/467","completion":"    var result = 0\n    while(decinum > 0){\n        result = result * 8 + (decinum % 8)\n        decinum = decinum \/ 8\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/468","completion":"    \/\/ write your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/469","completion":"    val result = 0\n    val minPrice = price.sort().last()\n    for (i in 0 until k) {\n        val maxProfit = minPrice - price[i]\n        result = Math.max(result, maxProfit)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/470","completion":"    return testTup.dropWhile {\n        it != (it.last + it.last)\n    }.map {\n        it.last + it.last\n    }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/471","completion":"    var remainder : Int = 0\n    var len : Int\n    for (len = 0; len < lens; len++) {\n        remainder = remainder + arr[len]\n    }\n    return remainder % n\n}","language":"kotlin"}
{"task_id":"MBKP\/472","completion":"    var len = l.size()\n    if (len <= 1) return true\n    return (l[0] + 1) == l[1] || (l[len - 1] - 1) == l[len - 2]\n}","language":"kotlin"}
{"task_id":"MBKP\/473","completion":"    val set = set(testList1)\n    val set2 = set(testList2)\n    return set.intersection(set2)\n}","language":"kotlin"}
{"task_id":"MBKP\/474","completion":"    if (str1.length == 0) {\n        return \"\"\n    } else if (str1.length == 1) {\n        return str1.replace(ch, newch)\n    } else {\n        return str1.substring(0, 1) + str1.replace(ch, newch) + replaceChar(str1.substring(1, str1.length), ch, newch)\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/475","completion":"    val list : List<List<Any>> = mutableListOf<List<Any>>()\n    val temp : List<Any> = mutableListOf<Any>()\n    val dict2 = map { k -> list ->\n        list += dict1.getOrElse(k, mutableListOf<Any>())\n        temp += dict1.getOrElse(k, mutableListOf<Any>())\n    }\n    temp.forEach { list.add(it) }\n    val res : List<List<Any>> = mutableListOf<List<Any>>()\n    res.add(list)\n    for (i in 0 until list.size) {\n        for (j in 0 until list.get(i).size - 1) {\n            if (list.get(i).get(j) > list.get(i).get(j + 1)) {\n                list.get(i).swap(j, j + 1)\n            }\n        }\n        res.add(list)\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/476","completion":"    val min = min(nums)\n    val max = max(nums)\n    val sum = (max - min).toInt() * 2\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/477","completion":"    return string.toLowerCase()\n}","language":"kotlin"}
{"task_id":"MBKP\/478","completion":"    \/*\n     * Given a string str1, remove all lowercase substrings in it.\n     * 1) Convert str1 to a list of strings (all lowercase).\n     * 2) Iterate through the list,\n     * 2.1) If the current element is a substring of str1,\n     * 2.1.1) Remove the substring.\n     * 2.2) If the current element is a letter,\n     * 2.2.1) If the letter is a lowercase letter,\n     * 2.2.2) Remove the letter from the current substring.\n     * 2.3) If the current element is not a substring,\n     * 2.3.1) Add the current element to the new string.\n     * 3) Convert the new string back to a list of strings.\n     * 4) Return the list of strings.\n     *\/\n\n    \/\/ 1. Convert str1 to a list of strings (all lowercase).\n    var list = str1.to<list<char>>().map { it","language":"kotlin"}
{"task_id":"MBKP\/479","completion":"    return n.toString().charAt(0)\n}","language":"kotlin"}
{"task_id":"MBKP\/480","completion":"    val charOccurence = mutableMapOf<String, Integer>()\n    for (i in 0 until str1.length) {\n        if (str1[i] in charOccurence) {\n            charOccurence[str1[i]] += 1\n        } else {\n            charOccurence[str1[i]] = 1\n        }\n    }\n\n    var result = \"\"\n    for (i in charOccurence) {\n        if (charOccurence[i] > charOccurence[result]) {\n            result = i\n        }\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/481","completion":"    val setLength = set.size\n\n    if(sum == 0) {\n        return true\n    }\n\n    if(n > sum) {\n        return false\n    }\n\n    if(sum < 0) {\n        return false\n    }\n\n    if(setLength == 0) {\n        return false\n    }\n\n    if(set[0] > sum) {\n        return isSubsetSum(set.subList(1, set.size), n, sum)\n    }\n\n    if(isSubsetSum(set.subList(1, set.size), n - set[0], sum)) {\n        return true\n    }\n\n    return isSubsetSum(set.subList(1, set.size), n, sum)\n}","language":"kotlin"}
{"task_id":"MBKP\/482","completion":"    val pattern = \"\"\"([A-Z]*)([a-z]*)\"\"\"\n    val result = text.replaceAll(pattern, \"$1 $2\").trim()\n    return result.isEmpty() ? \"No\" : \"Yes\"\n}","language":"kotlin"}
{"task_id":"MBKP\/483","completion":"    var n : Int = 1\n    while (true) {\n        if (n * n % x == 0) {\n            return n\n        }\n        n++\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/484","completion":"    val temp1 = new HashSet<List<String>>()\n    val temp2 = new HashSet<List<String>>()\n\n    \/\/ create a hash set for each list of strings\n    testList1.forEach { temp1.add(it) }\n    testList2.forEach { temp2.add(it) }\n\n    \/\/ convert the hash sets to lists and remove the matched lists from the temp lists\n    val temp3 = new ArrayList<List<String>>()\n    temp1.forEach { temp3.add(it) }\n    temp2.forEach { temp3.removeIf(it2 => it2.equals(it)) }\n\n    \/\/ convert the new list of lists to a list of strings and return it\n    return temp3.map { it.map { \" -> \".join(it) } }.toTypedArray()\n}","language":"kotlin"}
{"task_id":"MBKP\/485","completion":"    val dp = Array(n + 1).apply { 0 }\n\n    for (i in a.indices) {\n        dp[i] = dp[i - 1] * 10 + a[i]\n    }\n\n    for (i in 1 until n) {\n        for (j in 1 until i) {\n            if (j - i < 2) {\n                dp[i] = Math.max(dp[i], dp[j] * 10 + a[i])\n            } else if (dp[i - j + 1] * 10 + a[i] == dp[j - i + 1] * 10 + a[j]) {\n                dp[i] = Math.max(dp[i], dp[j] * 10 + a[i])\n            }\n        }\n    }\n    return dp[n]\n}","language":"kotlin"}
{"task_id":"MBKP\/486","completion":"    if (k < 0 || k > n - k) {\n        return 0\n    }\n    if (k == 0 || k == n - k) {\n        return 1\n    }\n    var sum = 0\n    var result = 1\n    for (i in 0 until k) {\n        sum += result\n        result *= p\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/487","completion":"    return tup.sortedBy { it[tup.last] }\n}","language":"kotlin"}
{"task_id":"MBKP\/488","completion":"    return 5 * a * a \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/489","completion":"    return\n}","language":"kotlin"}
{"task_id":"MBKP\/490","completion":"    val symSet = mutableSetOf<List<Int>>()\n    for (i in testList) {\n        for (j in testList) {\n            if (i.hashCode == j.hashCode && i.equals(j))\n                continue\n            val symmetric = (i.hashCode == j.hashCode)\n            if (symmetric) {\n                for (k in testList) {\n                    if (k == i || k == j)\n                        continue\n                    if (k.equals(i) || k.equals(j)) {\n                        symmetric = false\n                        break\n                    }\n                }\n            }\n            if (symmetric)\n                symSet.add(List.of(i, j))\n        }\n    }\n    return symSet\n}","language":"kotlin"}
{"task_id":"MBKP\/491","completion":"    var s : Int = 0\n\n    for (i in 0 until n) {\n        s += (pow(r, i) * pow(a, n - i - 1)) \/ factorial(i)\n    }\n\n    return s\n}","language":"kotlin"}
{"task_id":"MBKP\/492","completion":"    var low = 0\n    var high = itemList.size - 1\n\n    while (low <= high) {\n        var mid = low + (high - low) \/ 2\n        if (itemList[mid] == item) return true\n        else if (itemList[mid] < item) low = mid + 1\n        else high = mid - 1\n    }\n    return false\n}","language":"kotlin"}
{"task_id":"MBKP\/493","completion":"    var polygons = [];\n    var points = [];\n\n    var i = 0;\n\n    for (var x = startx; x <= endx; x++) {\n        var xc = x - startx;\n        var yc = starty - starty;\n        var radiusSq = Math.pow(xc, 2) + Math.pow(yc, 2);\n\n        for (var y = starty; y <= endy; y++) {\n            var distanceSq = Math.pow(x - endx, 2) + Math.pow(y - endy, 2);\n\n            if (distanceSq <= radiusSq && distanceSq > radiusSq - Math.pow(radius, 2)) {\n                var x1 = (xc \/ distanceSq) + endx;\n                var y1 = (yc \/ distanceSq) + endy;\n\n                points.push({x: x1, y: y1});\n\n                if (i > ","language":"kotlin"}
{"task_id":"MBKP\/494","completion":"    val sum = 0\n    for (i in 0 until testTup.size) {\n        val bit = 0\n        if (testTup[i] == 1) {\n            bit = 1\n        }\n        sum += bit * 2 ** (testTup.size - i - 1)\n    }\n    return String.valueOf(sum)\n}","language":"kotlin"}
{"task_id":"MBKP\/495","completion":"    val regex = \"(?<=[a-z])[a-z]*(?=[A-Z])\"\n    return str1.replaceAll(regex, \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/496","completion":"    val heap = MinHeap()\n    for (i in nums) {\n        if (heap.size() == n) {\n            heap.removeTop()\n        }\n        heap.push(i)\n    }\n    return heap.toArray()\n}","language":"kotlin"}
{"task_id":"MBKP\/497","completion":"    \/\/ write your code in Kotlin\n    val pi = 3.14\n    return pi * r * r * h\n}","language":"kotlin"}
{"task_id":"MBKP\/498","completion":"    return if (x == 0) {\n        y\n    } else {\n        gcd(y % x, x)\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/499","completion":"    return 2 * r * Math.PI;\n}","language":"kotlin"}
{"task_id":"MBKP\/500","completion":"    return \" \" + String.join(\" \", list)\n}","language":"kotlin"}
{"task_id":"MBKP\/501","completion":"    val a = x % y\n    return y - a < a ? y : numCommDiv(y, a)\n}","language":"kotlin"}
{"task_id":"MBKP\/502","completion":"    return n % m\n}","language":"kotlin"}
{"task_id":"MBKP\/503","completion":"    \/* Your Code Here *\/\n}","language":"kotlin"}
{"task_id":"MBKP\/504","completion":"    var result = 0\n    for (i in 0..n) {\n        result = result + i * i * i\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/505","completion":"    val res = a.copy()\n    while (res.indexOf(0) != -1)\n        res.remove(res.indexOf(0))\n    res.appendAll(res.tail)\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/506","completion":"    var kFactorial = k * factorial(n - k)\n    var nFactorial = factorial(n)\n    return kFactorial \/ nFactorial\n}","language":"kotlin"}
{"task_id":"MBKP\/507","completion":"    list1.removeAll(removewords)\n    return list1\n}","language":"kotlin"}
{"task_id":"MBKP\/508","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/509","completion":"    var sum = 0;\n    var oddCount = 0;\n    for (i in 1 until n) {\n        if (i % 2 == 1) {\n            oddCount++;\n            sum += i;\n        }\n    }\n    return sum \/ oddCount\n}","language":"kotlin"}
{"task_id":"MBKP\/510","completion":"    var arr = arr.sorted()\n    var count = 1\n    var sum = arr[0]\n    for (i in arr.slice(1, arr.length - 1)) {\n        var temp = sum\n        if (sum >= k)\n            sum = 0\n        else {\n            sum += arr[i]\n            count += 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/511","completion":"    val sum = 1\n    val min = 1\n\n    while(num > 0) {\n        sum *= num\n        min = min == 1 ? sum : min < sum ? min : sum\n        num--\n    }\n\n    return min\n}","language":"kotlin"}
{"task_id":"MBKP\/512","completion":"    val freqMap = mutableMapOf<Int, Int>()\n    \/\/ Write the code here\n    return freqMap\n}","language":"kotlin"}
{"task_id":"MBKP\/513","completion":"    val result = testTup\n    result.forEach { i ->\n        result[result.indexOf(i)] = i.toString + k\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/514","completion":"    return testTup.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/515","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/516","completion":"    int max = maxOfArray(nums)\n    for (int exp = 1; exp < max; exp *= 10) {\n        for (int i = 0; i < nums.size(); i++) {\n            int place = (int) (nums[i] \/ exp) % 10\n            if (place != 0) {\n                swap(nums, i, place - 1)\n            }\n        }\n    }\n    return nums\n}","language":"kotlin"}
{"task_id":"MBKP\/517","completion":"    var max = list1.size - 1\n\n    for (i in list1) {\n        if (list1[i] >= 0) {\n            max = i\n        }\n    }\n\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/518","completion":"    \/\/ return (int) (Math.sqrt(num))\n    return (int) Math.sqrt(num)\n}","language":"kotlin"}
{"task_id":"MBKP\/519","completion":"    var x : Number = Math.pow(num, 1.0 \/ 3)\n    var y : Number = Math.pow(num, 1.0 \/ 3) * x\n    var z : Number = Math.pow(num, 1.0 \/ 3) * y\n    return x + y + z\n}","language":"kotlin"}
{"task_id":"MBKP\/520","completion":"    var gcd = (x : Int, y : Int) -> x % y\n    var lcm = (x : Int, y : Int) -> x * y \/ gcd(x, y)\n\n    var iter = l.iterator()\n    var first : Int\n    var second : Int\n    var length : Int\n\n    if (iter.hasNext()) {\n        first = iter.next()\n    } else {\n        return 0\n    }\n\n    length = 1\n\n    while (iter.hasNext()) {\n        second = iter.next()\n        length = lcm(length, second)\n    }\n\n    return length * first\n}","language":"kotlin"}
{"task_id":"MBKP\/521","completion":"    return x == y || y == z || x == z\n}","language":"kotlin"}
{"task_id":"MBKP\/522","completion":"    arr.sort(comparator = { a, b -> a - b })\n    val result = 1\n    val i = 0\n    var j = arr.size - 1\n    while (i < j) {\n        if (arr[i] == arr[i + 1] && arr[j] == arr[j - 1]) {\n            result = Math.max(result, j - i + 1)\n            i++\n            j--\n        } else if (arr[i] < arr[i + 1]) {\n            i++\n        } else {\n            j--\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/523","completion":"    var arr: List<String> = List()\n    if (str1.match(\/[a-z]\/g)) {\n        arr.add(\"String must have 1 upper case character.\")\n    }\n    if (str1.match(\/[A-Z]\/g)) {\n        arr.add(\"String must have 1 lower case character.\")\n    }\n    if (str1.match(\/[0-9]\/g)) {\n        arr.add(\"String must have 1 number.\")\n    }\n    if (str1.length < 8) {\n        arr.add(\"String length should be atleast 8.\")\n    }\n    return arr\n}","language":"kotlin"}
{"task_id":"MBKP\/524","completion":"    var dp = List(arr.size, Int)\n\n    var max = -1\n    for (var i = 0; i < arr.size; i++) {\n        max = Math.max(max, arr[i])\n        dp[i][0] = max\n    }\n\n    for (var i = 1; i < dp.length; i++) {\n        for (var j = 1; j < dp[i].length; j++) {\n            var cur = dp[i - 1][j] + arr[i]\n            dp[i][j] = Math.max(dp[i][j], cur)\n        }\n    }\n\n    return dp[n - 1][n - 1]\n}","language":"kotlin"}
{"task_id":"MBKP\/525","completion":"    val parallel = line1.all(i -> line2.contains(i))\n    return parallel\n}","language":"kotlin"}
{"task_id":"MBKP\/526","completion":"    val split = str1.split(\" \")\n\n    for (i in 0 until split.length) {\n        val first = split[i].substring(0, 1)\n        val last = split[i].substring(1)\n\n        val newStr = first.toUpperCase() + last\n        split[i] = newStr\n    }\n\n    return joinToString(split, \" \")\n}","language":"kotlin"}
{"task_id":"MBKP\/527","completion":"    \/\/ Write your code here\n    var res = 0\n    for (i in arr) {\n        if (arr[i] > 0) {\n            if (n >= arr[i]) {\n                var remaining = n - arr[i]\n                if (remaining == sum) {\n                    res += 1\n                } else if (remaining < sum) {\n                    res += getPairsCount(arr, remaining, sum)\n                }\n            }\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/528","completion":"    if (list1.isEmpty()) return list1\n\n    val minList: List<Any> = list1.elementAt(0)\n    for (i in 0..list1.size()) {\n        val list: List<Any> = list1.elementAt(i)\n        if (list.size() < minList.size()) {\n            minList = list\n        }\n    }\n\n    return minList\n}","language":"kotlin"}
{"task_id":"MBKP\/529","completion":"        return (n-1)*(n+2)\/2\n}","language":"kotlin"}
{"task_id":"MBKP\/530","completion":"    val count = 0\n    for (i in nums) {\n        if (nums[i] < 0) {\n            count += 1\n        }\n    }\n    return count \/ nums.length\n}","language":"kotlin"}
{"task_id":"MBKP\/531","completion":"    let dp : List<Int> = Array(m + 1)\n    for (i in 0 until m) dp[i] = Int.MinValue\n    dp[0] = 0\n\n    for (let i = 0 until m; i >= 0; i--) {\n        let count = Int.MinValue\n        for (let j in 0 until coins.size(); j >= 0; j--) {\n            if (i - coins[j] >= 0) {\n                count = Math.max(count, dp[i - coins[j]] + 1)\n            }\n        }\n        dp[i] = count\n    }\n\n    if (dp[v] == Int.MinValue) return -1\n    else return dp[v]\n}","language":"kotlin"}
{"task_id":"MBKP\/532","completion":"    return str1.sorted.equals(str2.sorted)\n}","language":"kotlin"}
{"task_id":"MBKP\/534","completion":"    val result = new mutable.ListBuffer[Int]()\n    val textLength = text.length\n    val patternLength = pattern.length\n    val patternIndex = 0\n    for (i <- 0 until textLength) {\n        val textIndex = i\n        val patternIndex = 0\n        while (textIndex + patternIndex + 1 < textLength &&\n                text.substring(textIndex, textIndex + patternIndex + 1).equals(pattern)) {\n            result.append(textIndex)\n            textIndex = textIndex + patternIndex + 1\n            patternIndex = 0\n        }\n        if (patternIndex == patternLength - 1) {\n            result.append(textIndex + 1)\n        }\n        patternIndex = patternIndex + 1\n    }\n    return result.asSequence()\n}","language":"kotlin"}
{"task_id":"MBKP\/535","completion":"    val pi = 3.14\n    val height = 2 * pi * r\n    val surface = 2 * pi * r * r\n    if (r <= 0) return 0\n    else return (surface + 2 * pi * r * r) \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/536","completion":"    return list.drop(list.size - n)\n}","language":"kotlin"}
{"task_id":"MBKP\/537","completion":"    val words = str1.split(\" \")\n    words.sort()\n    val counter = Int()\n\n    for (word in words) {\n        if (words.indexOf(word) == words.lastIndexOf(word))\n            counter += 1\n    }\n\n    if (counter == words.size)\n        return \"None\"\n    else\n        return words[counter-1]\n}","language":"kotlin"}
{"task_id":"MBKP\/538","completion":"    val arr = str1.split(\" \")\n    return arr.map { it.toUpper.toList }\n}","language":"kotlin"}
{"task_id":"MBKP\/539","completion":"    val result = index.map {\n        index.get(0) ^ basesNum.get(0).toLong()\n        .pow(index.get(1).toLong())\n        .pow(index.get(2).toLong())\n        .pow(index.get(3).toLong())\n        .pow(index.get(4).toLong())\n        .pow(index.get(5).toLong())\n        .pow(index.get(6).toLong())\n        .pow(index.get(7).toLong())\n        .toInt()\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/540","completion":"    val maxFreq = Arrays.stream(arr).max()\n    val minFreq = Arrays.stream(arr).min()\n    val diff = (maxFreq - minFreq) * (n - 1)\n    return diff\n}","language":"kotlin"}
{"task_id":"MBKP\/541","completion":"    if (n < 0) return false\n\n    \/\/ We find all the divisors, and if there is a divisor which is equal to n,\n    \/\/ then n is abundant.\n    return IntStream.rangeClosed(2, n - 1)\n        .allMatch(i -> n % i == 0)\n}","language":"kotlin"}
{"task_id":"MBKP\/542","completion":"    val replaced = text.replaceAll(\" \", \"::\").replaceAll(\",\", \"::\").replaceAll(\"\\\\.\", \"::\")\n    return replaced\n}","language":"kotlin"}
{"task_id":"MBKP\/543","completion":"    var str1 = num1.toString()\n    var str2 = num2.toString()\n    var result = 0\n    for (i in str1) {\n        result += str1[i] * (int)Math.pow(10, str2.length - 1 - i)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/544","completion":"    return \"\"\n}","language":"kotlin"}
{"task_id":"MBKP\/545","completion":"    val mask = n ^ 0xffffffff\n    return mask & n\n}","language":"kotlin"}
{"task_id":"MBKP\/546","completion":"    var position = 0\n    var last = -1\n    while (string.indexOf(char, position) != -1) {\n        position = string.indexOf(char, position)\n        last = position\n    }\n    return last\n}","language":"kotlin"}
{"task_id":"MBKP\/547","completion":"    val bits = \"0\" + (n-1).toString(2)\n    return bits.takeWhile { it.neq(\"0\") }.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/548","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/549","completion":"    return (n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1)) \/ 120.0\n}","language":"kotlin"}
{"task_id":"MBKP\/550","completion":"    if (low < high) {\n        val mid = low + (high - low) \/ 2\n        val left : Int = findMax(arr, low, mid)\n        val right : Int = findMax(arr, mid + 1, high)\n        return Math.max(left, right)\n    }\n    return arr[low]\n}","language":"kotlin"}
{"task_id":"MBKP\/551","completion":"    var list2 : List<Int> = mutableListOf()\n    for (i in 0 until list1.size - 1) {\n        list2 += list1[i][n]\n    }\n    return list2\n}","language":"kotlin"}
{"task_id":"MBKP\/552","completion":"    if (seqNums.last - seqNums.first > 1)\n        return \"Linear Sequence\"\n    else\n        return \"Non Linear Sequence\"\n}","language":"kotlin"}
{"task_id":"MBKP\/553","completion":"    val sum = testTup.reduce { a + b }\n    return sum \/ testTup.size\n}","language":"kotlin"}
{"task_id":"MBKP\/554","completion":"    return list.filter { it % 2 == 1 }\n}","language":"kotlin"}
{"task_id":"MBKP\/555","completion":"    val nCubes = n * n * n\n    val sum = (1..n).sum()\n    return nCubes - sum\n}","language":"kotlin"}
{"task_id":"MBKP\/556","completion":"    val sum = a.sum()\n    val pairs = sum \/ 2\n    if (pairs < n) {\n        return -1\n    }\n    var start = 0\n    var end = 0\n    while (end < pairs) {\n        start = a.indexOf(end + 1, end)\n        if (start == -1) {\n            return -1\n        }\n        end = start + 1\n    }\n    if (sum % 2 != 0) {\n        return -1\n    }\n    return end\n}","language":"kotlin"}
{"task_id":"MBKP\/557","completion":"    return string.toUpperCase()\n}","language":"kotlin"}
{"task_id":"MBKP\/558","completion":"    val n3 = n1 ^ n2\n    val n4 = n3 & (~n3 + 1)\n    val n5 = n2 ^ n4\n    val n6 = n5 & (~n5 + 1)\n    val n7 = n4 ^ n6\n    return (n7 & (~n7 + 1)) + 1\n}","language":"kotlin"}
{"task_id":"MBKP\/559","completion":"    let maxSum = 0\n    let sum = 0\n    a.sort()\n    for (i in a) {\n        if (sum + a[i] < 0) {\n            sum = 0\n        } else {\n            sum += a[i]\n        }\n        maxSum = max(maxSum, sum)\n    }\n    return maxSum\n}","language":"kotlin"}
{"task_id":"MBKP\/560","completion":"    return List.concat(testTup1, testTup2)\n}","language":"kotlin"}
{"task_id":"MBKP\/561","completion":"    val map = mutableMapOf<Int, List<Any>>()\n    val list = testList\n    val listSize = list.size()\n    val listSize2 = listSize - 1\n    for (i in 0..listSize2) {\n        val list1 = list[i]\n        val list2 = list[i+1]\n        if (list1.size() >= 2 && list2.size() >= 2) {\n            map[list1[0]] = list1.slice(1)\n            map[list2[0]] = list2.slice(1)\n        }\n    }\n    return map\n}","language":"kotlin"}
{"task_id":"MBKP\/562","completion":"    val result = 0\n    val first = 0\n    val last = 0\n    for (i in lst.indices) {\n        for (j in i) {\n            last = i\n        }\n        if (last - first > result) {\n            result = last - first\n        }\n        first = i\n        last = first\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/563","completion":"    val splited = text.split(\"\\\"\")\n    splited.map { it.trim() }.filter { it.isNotEmpty() }\n    splited.map { it.split(\",\") }\n        .map { it.map(it.trim) }.map { it.map(\"\\\"\") }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/564","completion":"    return (n * (n + 1)) \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/565","completion":"    val chars = mutableListOf<String>()\n    word.chars().forEach {\n        chars.add(it)\n    }\n    return chars\n}","language":"kotlin"}
{"task_id":"MBKP\/566","completion":"    if (n < 0) {\n        return -1\n    }\n    let sum : Int = 0\n    while (n > 0) {\n        sum += n % 10\n        n = n \/ 10\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/567","completion":"    if (list1.size == 0) {\n        return true;\n    }\n    else {\n        var first = list1[0];\n        for (var i = 1; i < list1.size; i++) {\n            if (first > list1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/568","completion":"    val result = mutableListOf<mutableMap<Object, Object>>()\n    for (i in 0..length) {\n        result.add(mutableMap<Object, Object>())\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/569","completion":"    val sorted = list1.map { l ->\n        val res = l.sort()\n        res\n    }\n    sorted\n}","language":"kotlin"}
{"task_id":"MBKP\/570","completion":"    val res = list1.filter {\n        val words = it.split(\" \")\n        val chars = charlist.filter(_.isChar).map(_.toChar)\n        val filteredWords = words.filter {\n            it.containsAll(chars)\n        }\n        it.containsAll(chars)\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/571","completion":"    val dp = mapOf(Int, 0)\n    val sum = sumArray(arr)\n    val count = 0\n    for (i in arr) {\n        if (i > k) {\n            break\n        }\n        for (j in arr) {\n            if (j > i && j - i > k) {\n                break\n            }\n            if (j > i && j - i == k) {\n                dp[i] = Math.max(dp[i], sum - (arr[i] + arr[j]))\n                count++\n            }\n            if (j > i && j - i < k) {\n                dp[i] = Math.max(dp[i], dp[j - 1] + sum - (arr[i] + arr[j]))\n                count++\n            }\n        }\n    }\n    if (count == 0) {\n        return ","language":"kotlin"}
{"task_id":"MBKP\/572","completion":"    return nums\n            .filter {\n                it != it.next()\n            }.distinct()\n            .collect {\n                it\n            }\n}","language":"kotlin"}
{"task_id":"MBKP\/573","completion":"    var uniqueList : List<Int> = listData.distinct()\n    var listSize = uniqueList.size\n    var product = 1\n    var i = 0\n    for (i in uniqueList) {\n        product *= uniqueList[i]\n    }\n    return product\n}","language":"kotlin"}
{"task_id":"MBKP\/574","completion":"    var pi = 3.14\n    return pi * (r * r) + 2 * pi * r * h + 2 * pi * r * r \n}","language":"kotlin"}
{"task_id":"MBKP\/575","completion":"    var m : Int = (l + r) \/ 2\n    var isMultiple = m * n != a\n    if (isMultiple) {\n        var count = countNo(a, n, l, m) + countNo(a, n, m + 1, r)\n    } else {\n        var count = m + 1\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/576","completion":"    var c : List<Int> = new ArrayList<Int>()\n\n    for (i in 0 until n) {\n        if (b[i] == a[i]) c += a\n        else {\n            c.clear()\n            c += a\n        }\n    }\n\n    if (c.size() == m) return true\n    else return false\n}","language":"kotlin"}
{"task_id":"MBKP\/577","completion":"    if (n == 0) return 0\n    else return n % 10\n}","language":"kotlin"}
{"task_id":"MBKP\/578","completion":"    var result = []\n    for (i in list1) {\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/579","completion":"    val res = mutableListOf<Int>()\n\n    for (i in testTup1)\n        if (!testTup2.contains(testTup1[i]))\n            res.append(testTup1[i])\n\n    for (i in testTup2)\n        if (!testTup1.contains(testTup2[i]))\n            res.append(testTup2[i])\n\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/580","completion":"    if (testTuple == null) return []\n    var result = []\n    for (x in testTuple) {\n        var val = testTuple[x]\n        if (val instanceof List) {\n            if (x % 2 == 0)\n                result.push(extractEven(val))\n            else\n                result.push(val)\n        }\n        else {\n            if (x % 2 == 0)\n                result.push(val)\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/581","completion":"    val perimeter = b * 2 + s * 2\n    val area = perimeter * 6\n    return area\n}","language":"kotlin"}
{"task_id":"MBKP\/582","completion":"    return dict1.isEmpty() ? true : false\n}","language":"kotlin"}
{"task_id":"MBKP\/583","completion":"    return nCatalan(num, 1, 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/584","completion":"    return text.replaceAll(\"([a-z]+)\\\\w+\", \"$1 - $0\")\n}","language":"kotlin"}
{"task_id":"MBKP\/585","completion":"    val pq = MinHeap<Map<String, Any>>(items.size)\n    val res = new ArrayList<Map<String, Any>>()\n    for (i in items) {\n        pq.add(items[i])\n        if (pq.size > n) {\n            pq.remove()\n        }\n    }\n    while (pq.size > 0) {\n        res.add(pq.remove())\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/586","completion":"    val result = mutableListOf<Int>()\n    val start = 0\n    val end = n\n    while (end <= a.size()) {\n        result += a.subList(start, end)\n        start += k\n        end += k\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/587","completion":"    return listx.map { it to }\n}","language":"kotlin"}
{"task_id":"MBKP\/588","completion":"    val sorted = Arrays.sort(nums)\n    return sorted[sorted.lastIndex - 1] - sorted[0]\n}","language":"kotlin"}
{"task_id":"MBKP\/589","completion":"    \/\/ write your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/591","completion":"    if (newlist.isEmpty()) return newlist\n    newlist.reverse()\n    return newlist\n}","language":"kotlin"}
{"task_id":"MBKP\/592","completion":"    var prod : Int = 1\n    for (i in 0 until n) {\n        prod = prod * i\n    }\n    return prod\n}","language":"kotlin"}
{"task_id":"MBKP\/593","completion":"    return ip.replace(\"0\", \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/594","completion":"    val sumEven = 0\n    val sumOdd = 0\n    for (i in list1) {\n        if (i % 2 == 0) {\n            sumEven += i\n        } else {\n            sumOdd += i\n        }\n    }\n    return sumEven - sumOdd\n}","language":"kotlin"}
{"task_id":"MBKP\/595","completion":"    var result : Any = \"Not Possible\"\n\n    \/\/ Convert each string into a char array\n    var charArray1 = str1.toCharArray()\n    var charArray2 = str2.toCharArray()\n\n    var length = charArray1.length\n\n    \/\/ Count swaps required\n    var swaps = 0\n\n    \/\/ Loop through string\n    for (i in length) {\n        if (charArray1[i] != charArray2[i]) {\n            var temp = charArray2[i]\n            charArray2[i] = charArray1[i]\n            charArray1[i] = temp\n            swaps++\n        }\n    }\n\n    \/\/ Check if any swap was required\n    if (swaps != 0) {\n        result = swaps\n    }\n\n    \/\/ Return result\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/597","completion":"    val arr1Len = arr1.size\n    val arr2Len = arr2.size\n    val mid = arr1Len + arr2Len\n    if (arr1Len < arr2Len) {\n        arr1 = arr1.reverse()\n        arr2 = arr2.reverse()\n    }\n    if (arr1Len == 0) return arr2[k - 1]\n    if (arr2Len == 0) return arr1[k - 1]\n    var idx1 : Int = 0\n    var idx2 : Int = 0\n    while (idx2 < arr2Len && idx1 < arr1Len) {\n        if (arr1[idx1] < arr2[idx2]) {\n            idx1 += 1\n        } else if (arr1[idx1] > arr2[idx2]) {\n            idx2 += 1\n        } else {\n            if (","language":"kotlin"}
{"task_id":"MBKP\/598","completion":"    val total = 0 \n    var n = number \n    while (n != 0) {\n        val remainder = n % 10 \n        n = n \/ 10\n        total = total + (remainder * remainder * remainder)\n    }\n    return total == number\n}","language":"kotlin"}
{"task_id":"MBKP\/599","completion":"    var sum = 0\n    var average = 0\n\n    for (i in 1..number) {\n        sum += i\n    }\n\n    average = sum \/ number\n\n    return listOf(sum, average)\n}","language":"kotlin"}
{"task_id":"MBKP\/600","completion":"    return n % 2 == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/602","completion":"    if(str1.isEmpty()) {\n        return \"None\"\n    }\n    str1.sort()\n    var length = str1.size\n    var i = 0\n    var firstChar = \"\"\n    var repeat = false\n\n    while (i < length) {\n        if (str1[i] === str1[i + 1]) {\n            firstChar = str1[i]\n            repeat = true\n            break\n        }\n        i += 1\n    }\n\n    if (repeat == false) {\n        firstChar = \"None\"\n    }\n\n    return firstChar\n}","language":"kotlin"}
{"task_id":"MBKP\/603","completion":"    var result = mutableListOf<Int>()\n    var max = n\n    var l = 2\n    var h = 1\n    while (max > l * h) {\n        if (max % l == 0 && max % h == 0) {\n            result += mutableListOf<Int>(l, h)\n            max = max \/ h\n            l = 2\n            h = 1\n        } else if (max % l == 0) {\n            h += 1\n            max = max \/ l\n        } else {\n            l += 1\n            max = max \/ h\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/604","completion":"    val words = s.split(\" \")\n    val reversedWords = words.map { it.reversed }\n    return \"$$reversedWords.join(' ')$$\"\n}","language":"kotlin"}
{"task_id":"MBKP\/605","completion":"    if (num < 2) return false\n    for (i in 1 until num) {\n        if (num % i == 0)\n            return false\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/606","completion":"    return degree * Math.PI \/ 180\n}","language":"kotlin"}
{"task_id":"MBKP\/607","completion":"    var res = List()\n    var index = 0\n    while (index < text.length) {\n        var match = text.match(new RegExp(pattern, \"g\"))\n        if (match == null) {\n            break\n        } else {\n            res.add(match[0])\n            index += match[0].length\n            text = text.replace(match[0], \"\")\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/608","completion":"    return (n * n) + (n - 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/609","completion":"    if (n < a || n < b) {\n        return -1\n    }\n\n    if (n == a) {\n        if (n < b) {\n            return n\n        } else {\n            return b\n        }\n    }\n\n    if (n == b) {\n        if (n < a) {\n            return n\n        } else {\n            return a\n        }\n    }\n\n    return Math.min(a, b)\n}","language":"kotlin"}
{"task_id":"MBKP\/610","completion":"    return list1.drop(l)\n}","language":"kotlin"}
{"task_id":"MBKP\/611","completion":"    val len = testList.size\n    var m = 0\n    for (i in 0 until len - n) {\n        m = max(m, testList[i][n])\n    }\n    return m\n}","language":"kotlin"}
{"task_id":"MBKP\/612","completion":"    var a = lst[0]\n    for (i in a) {\n        \/\/a[i] = a[i].sort()\n    }\n    var b = lst[lst.length - 1]\n    for (i in b) {\n        \/\/b[i] = b[i].sort()\n    }\n    var c = lst[0]\n    for (i in c) {\n        for (j in b) {\n            if (c[i] > b[j]) {\n                c[i] = c[i] + b[j]\n                b[j] = 0\n            }\n        }\n        for (j in a) {\n            if (c[i] < a[j]) {\n                c[i] = c[i] + a[j]\n                a[j] = 0\n            }\n        }\n    }\n    return lst\n}","language":"kotlin"}
{"task_id":"MBKP\/613","completion":"    val maxValues = testList.map { it.second.map(it2 -> it2.max()) }\n    val maxKey = maxValues.map { it.maxBy(comparingInt(it_)) }.first()\n    return testList.map { it.second.map(it2 -> it2[maxKey]) }\n}","language":"kotlin"}
{"task_id":"MBKP\/614","completion":"    val result = 0\n    for (i in testList) {\n        for (j in i) {\n            result += i[j]\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/615","completion":"    return (nums.map { n -> n.map { it.toDouble }.sum }).map { it.toDouble }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/616","completion":"    var sum = 0;\n    for (i in 0 until testTup1.length) {\n        sum += testTup1[i] % testTup2[i] ;\n    }\n    var result : List<Int> = [];\n    for (i in 0 until testTup1.length) {\n        if (testTup1[i] % testTup2[i] == sum) {\n            result.add(testTup1[i]);\n        }\n    }\n    return result;\n}","language":"kotlin"}
{"task_id":"MBKP\/617","completion":"    \/\/ The number of jumps is the number of steps,\n    \/\/ which is the difference of the points' X and Y.\n    return (d - b) \/ a + (d - b) % a \/ a\n}","language":"kotlin"}
{"task_id":"MBKP\/618","completion":"    val result = nums1.map { n1 -> nums2.map { n2 -> n1\/n2.toDouble() } }.toMutableList()\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/619","completion":"    return testStr.replaceAll(\"(?<=\\\\G.{2})\\\\d+(?=\\\\G.{2})\", \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/620","completion":"    \/\/ TODO\n    return 0;\n}","language":"kotlin"}
{"task_id":"MBKP\/621","completion":"    var newList = mutableListOf<String>()\n    testList.forEach {\n        val val = it\n        if (isInteger(val) && isNumeric(val)) {\n            val += k\n        }\n        newList.add(val)\n    }\n    return newList\n}","language":"kotlin"}
{"task_id":"MBKP\/622","completion":"    var a = arr1.toTypedArray()\n    var b = arr2.toTypedArray()\n    var i = 0\n    var j = 0\n    var c = 0\n    var k = 0\n    while(i<n and j<n) {\n        c = a[i] < b[j] ? a[i] : b[j]\n        if (c > a[i]) i++\n        else j++\n        k = k + c\n    }\n    if (i == n) {\n        return b[j]\n    } else {\n        return a[i]\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/623","completion":"    return nums.map(x => x ** n)\n}","language":"kotlin"}
{"task_id":"MBKP\/624","completion":"    return string.toUpperCase()\n}","language":"kotlin"}
{"task_id":"MBKP\/625","completion":"    if (newlist.size == 0) {\n        return newlist\n    }\n    return newlist.dropLast(1).append(newlist.takeLast(1))\n}","language":"kotlin"}
{"task_id":"MBKP\/626","completion":"    if(r == 0 || r < 0) {\n        return -1;\n    }\n\n    var S : Int = 3*r*r\/2;\n    var area : Int = (S*(S-r)*(S-r+1)\/4);\n\n    return area;\n}","language":"kotlin"}
{"task_id":"MBKP\/627","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/628","completion":"    return string.replace(\" \", \"%20\")\n}","language":"kotlin"}
{"task_id":"MBKP\/629","completion":"    \/\/ your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/630","completion":"    val coordinates = 0..testTup.size - 1 as List<Int>\n    val coordinatePairs : List<List<Int>> = mutableListOf<List<Int>>()\n    for (i in 0..testTup.size - 1) {\n        val first = coordinates[i]\n        val second = coordinates[i + 1]\n        coordinatePairs += listOf(first, second)\n    }\n    return coordinatePairs\n}","language":"kotlin"}
{"task_id":"MBKP\/631","completion":"    val regex = ( \"\\\\s+\" -> \"_\")\n    text.replace(regex, \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/632","completion":"    val result = []\n    var i = 0\n\n    for (i in numList) {\n        if (numList[i] != 0) {\n            result.add(numList[i])\n        } else {\n            continue\n        }\n    }\n\n    for (i in numList) {\n        if (numList[i] == 0) {\n            continue\n        } else {\n            result.add(numList[i])\n        }\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/633","completion":"    return (sum(arr) - arr.sums(arr)) ^ (sum(arr) - arr.sums(arr))\n}","language":"kotlin"}
{"task_id":"MBKP\/634","completion":"    var ans : Int = 1\n    for (i in 0..n) {\n        ans *= 4\n    }\n    ans = ans * 2\n    return ans\n}","language":"kotlin"}
{"task_id":"MBKP\/635","completion":"    val heap = Array(iterable.size + 1)\n    for (i in iterable) heap[i] = -iterable[i]\n    for (i in 1..heap.size - 1) siftdown(heap, i, 0)\n    for (i in iterable) return (heap[1] = -heap[1])\n    return []\n}","language":"kotlin"}
{"task_id":"MBKP\/636","completion":"    \/\/ Your code\n}","language":"kotlin"}
{"task_id":"MBKP\/637","completion":"    if (saleAmount >= actualCost) {\n        return false\n    }\n\n    val profit = saleAmount - actualCost\n\n    val loss = actualCost - saleAmount\n\n    return profit < loss\n}","language":"kotlin"}
{"task_id":"MBKP\/638","completion":"    val index = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * v * Math.pow(v, 0.16);\n    return index\n}","language":"kotlin"}
{"task_id":"MBKP\/639","completion":"    val result = 0\n    sampleNames.forEach {\n        if (it.startsWith(\"a\"))\n            continue\n        result = result + it.length\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/640","completion":"    items.filter { it.startsWith(\"(\") || it.startsWith(\")\") }\n}","language":"kotlin"}
{"task_id":"MBKP\/641","completion":"    var m = n % 3;\n    return n - m + m*3;\n}","language":"kotlin"}
{"task_id":"MBKP\/643","completion":"    \/\/text = text.trim()\n    var result = \"Not matched!\"\n    text.find(\"z\") != -1 ? result = \"Found a match!\" : result\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/644","completion":"    return input.take(input.size() - k < 0 ? 0 : input.size() - k)\n                    .append(input.take(input.size() - k < 0 ? 0 : k))\n}","language":"kotlin"}
{"task_id":"MBKP\/645","completion":"    return map { l -> l(k) }\n        .map { l -> l.reduce { (x,y) -> x*y } }\n        .reduce { x -> x }\n}","language":"kotlin"}
{"task_id":"MBKP\/646","completion":"    return n^k * (n-1)^k * (n-2)^k * (n-3)^k\n}","language":"kotlin"}
{"task_id":"MBKP\/647","completion":"    \/\/ # write your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/648","completion":"    return lst.takeWhile {\n        it % 3 == 0\n    }.dropWhile {\n        it % 3 != 0\n    }.zip {\n        (lst.nth(it % 3 == 0 ? it \/ 3 : (it \/ 3) + 1), lst.nth(it % 3 != 0 ? it \/ 3 : (it \/ 3) + 1))\n    }.toList\n}","language":"kotlin"}
{"task_id":"MBKP\/649","completion":"    val sum = 0\n    var i = m\n    var j = n\n    while (i <= j) {\n        sum += nums[i]\n        i++\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/650","completion":"    \/\/ Your code\n    return\n}","language":"kotlin"}
{"task_id":"MBKP\/651","completion":"    return\n}","language":"kotlin"}
{"task_id":"MBKP\/652","completion":"    val res = \"[(\"\n\n    for (i in 0 until testList.size) {\n        res += \"IntArray(\"\n        for (j in 0 until testList[i].size) {\n            res += testList[i][j].toString()\n            res += \", \"\n        }\n\n        res = res.substring(0, res.length - 2)\n        res += \"), \"\n    }\n\n    return res.substring(0, res.length - 2) + \")]\"\n}","language":"kotlin"}
{"task_id":"MBKP\/653","completion":"    return l.groupBy { it.first }.toMap {\n        it.second.first \/\/ key\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/654","completion":"    return 2 * l + 2 * b\n}","language":"kotlin"}
{"task_id":"MBKP\/655","completion":"    var sum = 0\n    for (i in 1..n) {\n        sum += pow(5, i)\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/656","completion":"    val sortedA = a.sorted()\n    val sortedB = b.sorted()\n\n    \/\/ init minSum to 0\n    val minSum = 0\n\n    for (i in 0..n-1) {\n        minSum += sortedA[i] - sortedB[i]\n    }\n\n    return minSum\n}","language":"kotlin"}
{"task_id":"MBKP\/657","completion":"    return n % 10\n}","language":"kotlin"}
{"task_id":"MBKP\/658","completion":"    val occurrences = mutableListOf<Int>()\n    val map = mutableMapOf<Int,Int>()\n    for (i in 0 until list1.length){\n        if(list1[i] in map){\n            occurrences[map[list1[i]]]++\n        }else {\n            occurrences[i] = 1\n        }\n        map[list1[i]] = i\n    }\n\n    var max = occurrences[0]\n    var maxIndex = 0\n    for (i in 0 until occurrences.length){\n        if(occurrences[i] > max){\n            max = occurrences[i]\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}","language":"kotlin"}
{"task_id":"MBKP\/659","completion":"    val res = mutableListOf<Int>()\n    for (i in 0 until x.size) {\n        if (x[i] != x[i + 1]) {\n            res.add(x[i])\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/660","completion":"    val result = mutableListOf<Int>()\n    if (l1 >= r2 || l2 >= r1) {\n        result.add(l1 > r2 ? l1 : r2)\n    } else if (l1 <= r1 && l2 <= r2) {\n        result.add(l1 < l2 ? l1 : l2)\n        result.add(l1 > l2 ? l1 : l2)\n    } else if (l1 < r1 && l2 >= r2) {\n        result.add(l1)\n        result.add(l1 + 1)\n    } else if (l1 > r1 && l2 <= r1) {\n        result.add(l2)\n        result.add(l2 - 1)\n    } else {\n        result.add(l1)\n        result.add(l2)\n        result.add(l2 + 1)\n        result.","language":"kotlin"}
{"task_id":"MBKP\/661","completion":"    val result = 0\n\n    for (i in 0 until n) {\n        val sum = arr[i]\n        for (j in 0 until n) {\n            if (i != j) {\n                val temp = arr[i] + arr[j]\n                if (temp > sum) {\n                    sum = temp\n                }\n            }\n        }\n\n        result = Math.max(result, sum)\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/662","completion":"    val sortedMap: Map<String, List<Int>> = mutableMapOf()\n    dict1.each { (name, list) ->\n        list.sort()\n        sortedMap[name] = list\n    }\n    return sortedMap\n}","language":"kotlin"}
{"task_id":"MBKP\/663","completion":"    var mod = n % x\n    return (mod == 0 && y == 1) ? x : mod * y\n}","language":"kotlin"}
{"task_id":"MBKP\/664","completion":"    var total = 0\n    while (n > 0) {\n        if (n % 2 == 0) {\n            total += n\n        }\n        n = n - 2\n    }\n    return total \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/665","completion":"    var result = copy(numList)\n    result.add(result.remove(0))\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/666","completion":"    var counter : Int = 0\n    for (ch in string) {\n        if (string[ch] == char)\n            counter++\n    }\n    return counter\n}","language":"kotlin"}
{"task_id":"MBKP\/667","completion":"    var count = 0\n    for(letter in string) {\n        if (vowels.contains(string[letter])) {\n            count += 1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/668","completion":"    var result = \"\"\n    for (let i = 0; i < string.length; i++) {\n        result += string.charAt(i) == char ? \"\" : string.charAt(i)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/669","completion":"    if (ip.matches(\"\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\")) {\n        return \"Valid IP address\"\n    } else {\n        return \"Invalid IP address\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/670","completion":"    val n = nums.size\n    val decreasing = true\n    val curr = nums.get(0)\n    for (i in 0 until n) {\n        val next = nums[i]\n        if (curr > next) decreasing = false\n        curr = next\n    }\n    return decreasing\n}","language":"kotlin"}
{"task_id":"MBKP\/671","completion":"    n |= (n >> 1)\n    n |= (n >> 2)\n    n |= (n >> 4)\n    n |= (n >> 8)\n    n |= (n >> 16)\n    return n - (n >>> 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/672","completion":"    if (num1 > num2) {\n        if (num1 > num3) {\n            return num1\n        } else {\n            return num3\n        }\n    } else {\n        if (num2 > num3) {\n            return num2\n        } else {\n            return num3\n        }\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/673","completion":"    return \"\" + list.map { it }.join(\"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/674","completion":"    val list = string.split(\" \")\n    list.sort()\n    list.uniq()\n    return list.join(\" \")\n}","language":"kotlin"}
{"task_id":"MBKP\/675","completion":"    val result = 0\n    if (m < n) {\n        result = ((m + n) * (m + n + 1)) \/ 2 + n\n    } else {\n        result = ((n + m) * (n + m + 1)) \/ 2 + m\n    }\n    return (result >= x && result <= y) ? 20 : result\n}","language":"kotlin"}
{"task_id":"MBKP\/676","completion":"    val regex = \"[^a-zA-Z0-9]\"\n    val regex1 = \"\\\\\\\\n\"\n    val regex2 = \"\\\\\\\\r\"\n    val regex3 = \"\\\\\\\\t\"\n    return text1\n            .replace(regex, \"\")\n            .replace(regex1, \"\\n\")\n            .replace(regex2, \"\\r\")\n            .replace(regex3, \"\\t\")\n}","language":"kotlin"}
{"task_id":"MBKP\/677","completion":"    val sum = a + b > c && b + c > a && c + a > b\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/678","completion":"    str1 = str1.trim()\n    val output = StringBuilder()\n    for (char ch in str1) {\n        if (ch != ' ') {\n            output.append(ch)\n        }\n    }\n    return output.toString()\n}","language":"kotlin"}
{"task_id":"MBKP\/679","completion":"    var keyAsString = ditionary.keyAt(key)\n    return keyAsString\n}","language":"kotlin"}
{"task_id":"MBKP\/680","completion":"    var temp = 0;\n\n    for (i in 0 until nums.size) {\n        if (nums[i] < temp) {\n            return false\n        }\n        temp = nums[i]\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/681","completion":"    var i = 2\n\n    while (true) {\n        if (n % i == 0) {\n            return i\n        }\n        i += 1\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/682","completion":"    return nums1.map(n1 -> nums2.map(n2 -> n1 * n2))\n}","language":"kotlin"}
{"task_id":"MBKP\/683","completion":"    return n * n + n * n == n * (n + 1) * (n + 1)\n}","language":"kotlin"}
{"task_id":"MBKP\/684","completion":"    val counter = str.first() + 1\n    for (i in 0 until str.length) {\n        if (str[i] == x) {\n            counter++\n        }\n    }\n    return counter\n}","language":"kotlin"}
{"task_id":"MBKP\/685","completion":"    if (n <= 1)\n        return 0\n    var s : Int = 0\n    for (var i : Int = 2; i <= n; i++) {\n        if (isPrime(i))\n            s += i\n    }\n    return s\n}","language":"kotlin"}
{"task_id":"MBKP\/686","completion":"    val freq = (testTup!!.groupBy(_ + 1))\n    freq.map { it.key + \" : \" + it.value.count }\n}","language":"kotlin"}
{"task_id":"MBKP\/687","completion":"    if (a % b == 0) {\n        return b\n    } else {\n        return recurGcd(b, a % b)\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/688","completion":"    return 2.0 * a + 3.0 * b\n}","language":"kotlin"}
{"task_id":"MBKP\/689","completion":"    \/\/ write your code in Kotlin\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/690","completion":"    \/\/ TODO: define the method here\n    return null;\n}","language":"kotlin"}
{"task_id":"MBKP\/691","completion":"    val result = mutableMapOf<Int, List<Int>>()\n    testList.forEach {\n        val group = result[it[0]]\n        if(group == null) {\n            result[it[0]] = mutableListOf(it[1])\n        } else {\n            group.add(it[1])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/692","completion":"    return n % 100 % 10\n}","language":"kotlin"}
{"task_id":"MBKP\/693","completion":"    val regex = \"\\\\s{2,}\"\n    return text1.replaceAll(regex, \" \")\n}","language":"kotlin"}
{"task_id":"MBKP\/694","completion":"    val res = mutableListOf<Int>()\n    testDict.forEach {\n        it.value.forEach {\n            if (!res.contains(it)) res.add(it)\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/695","completion":"    val tuple1T = testTup1.iterator()\n    val tuple2T = testTup2.iterator()\n    while (tuple1T.hasNext() && tuple2T.hasNext()) {\n        val element1 = tuple1T.next()\n        val index1 = tuple2T.next()\n        if (element1 > index1)\n            return true\n    }\n    return false\n}","language":"kotlin"}
{"task_id":"MBKP\/696","completion":"    var result: List<List<Any>> = list1.map { _ }\n    list2.forEach { (l, i) ->\n        result(i).addAll(l)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/697","completion":"    var count = 0\n    arrayNums.forEach {\n        count += if (it % 2 == 0) {\n            0\n        } else {\n            1\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/698","completion":"    val map = testDict\n    val sorted = map.sortedEntries()\n    return sorted\n}","language":"kotlin"}
{"task_id":"MBKP\/699","completion":"    if (str1.length != str2.length) {\n        return \"Not Possible\";\n    }\n    val swaps = IntArray(str1.length)\n    var counter = 0\n\n    for (i in swaps) {\n        swaps[i] = IntArray(str1.length).zero()\n        counter = 0\n    }\n\n    for (i in swaps) {\n        for (j in str1) {\n            if (str1[j] == str2[i]) {\n                swaps[i][counter] = j\n                counter++\n            }\n        }\n    }\n\n    val minimum = IntArray(str1.length).zero()\n    var minimum_index = IntArray(str1.length).zero()\n    var counter = 0\n    for (i in str1) {\n        if (counter == 0) {\n            minimum[counter] = i\n            counter++\n        } else {\n            if ","language":"kotlin"}
{"task_id":"MBKP\/700","completion":"    if (min > max) throw IllegalArgumentException(\"min must be less than max\")\n    var count : Int = 0\n    for (i in li) {\n        if (min <= li[i] && li[i] <= max)\n            count ++\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/701","completion":"    var first = arr[0]\n    var last = arr[0]\n    var sum = 0\n    for (i in arr) {\n        sum += arr[i]\n        if (arr[i] > last) {\n            last = arr[i]\n        } else if (arr[i] < first) {\n            first = arr[i]\n        }\n    }\n    return sum - last + first\n}","language":"kotlin"}
{"task_id":"MBKP\/702","completion":"    var n = arr.size\n    var min = arr.size - n\n    var amin = 0\n    var amax = arr.size - 1\n\n    while (amin < amax) {\n        var i = Math.floor((amin + amax) \/ 2)\n        var diff = arr.get(i) - n\n        if (diff <= k) {\n            amin = i + 1\n        } else {\n            amax = i\n        }\n    }\n    return min - amin\n}","language":"kotlin"}
{"task_id":"MBKP\/703","completion":"    var result : Boolean = false\n    for (var key : d.keys()) {\n        if (key == x) {\n            result = true\n            break\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/704","completion":"    if (n == 1) return 1\n    return (n * (n + 1)) \/ 2\n}","language":"kotlin"}
{"task_id":"MBKP\/705","completion":"    var result = List()\n    var sorted = list1.sortedBy(a => a.length.toInt() * a.sum<Int>().toInt())\n    for (var item : sorted) {\n        result.add(item)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/706","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/707","completion":"    return n.bitCount()\n}","language":"kotlin"}
{"task_id":"MBKP\/708","completion":"    return listOf(string.split(\"\"))\n}","language":"kotlin"}
{"task_id":"MBKP\/709","completion":"    \/\/ your code\n    val result = mutableMapOf<Int, Int>()\n    testList.forEach {\n        val key = this[0]\n        val count = 0\n        this[1].forEach {\n            if(result.containsKey(key)) {\n                result[key] += 1\n            } else {\n                result[key] = 1\n            }\n        }\n    }\n    return {\n        result.map { it -> \"${it}: ${it}\" }\n        .join(\", \")\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/710","completion":"    val head = testTup[0]\n    val tail = testTup[testTup.size - 1]\n    return [head, tail]\n}","language":"kotlin"}
{"task_id":"MBKP\/711","completion":"    var product = 1\n    for (i in 0 until n.digitCount \/ 2) {\n        product *= (n % 10)\n        n = n \/ 10\n    }\n    return n == product\n}","language":"kotlin"}
{"task_id":"MBKP\/712","completion":"    var unique = list1\n    var result = list1\n\n    while (unique.size > 0) {\n        var first = unique.head\n        var rest = unique.tail\n\n        result = result.cons(first)\n\n        unique = rest.filterNot { item => item == first }\n\n        unique.tail = rest\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/713","completion":"    return testTup.all { it }\n}","language":"kotlin"}
{"task_id":"MBKP\/714","completion":"    var count = 0\n    var limit = int(sqrt(n))\n    for (i in 0..limit) {\n        if (n % i == 0) {\n            count += 1 + countFac(n \/ i)\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/715","completion":"    val array = testStr.split(\",\").map(_.toInteger).toArray()\n    return array\n}","language":"kotlin"}
{"task_id":"MBKP\/716","completion":"    var w : Int = 2 * a + 2\n    var h : Int = 2 * a + 1\n    return w + h\n}","language":"kotlin"}
{"task_id":"MBKP\/717","completion":"    val mean = avg(data)\n    var temp = 0\n\n    for(i in data) {\n        temp += pow(data[i] - mean, 2)\n    }\n    return sqrt(temp \/ data.size)\n}","language":"kotlin"}
{"task_id":"MBKP\/718","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/719","completion":"    return \"Not matched!\" if !text.contains(\"a\") else \"Found a match!\"\n}","language":"kotlin"}
{"task_id":"MBKP\/720","completion":"    testTup.addAll(testDict.values())\n    testTup.addAll(testDict.keys().collect({ it.toString() }))\n    return testTup\n}","language":"kotlin"}
{"task_id":"MBKP\/721","completion":"    var dp : List<Int> = mutableListOf<Int>(n)\n    for (i in 1 until n) {\n        dp[i] = mutableListOf<Int>(n)\n        for (j in 1 until n) {\n            dp[i][j] = cost[i-1][j-1]\n        }\n    }\n\n    for (i in 1 until n) {\n        for (j in 1 until n) {\n            var temp = cost[i-1][j-1]\n            if (i > 1 && j > 1) {\n                temp += Math.min(dp[i-2][j], dp[i-1][j-2])\n            }\n            if (i > 1) {\n                temp += dp[i-2][j-1]\n            }\n            if (j > 1) {\n                temp += dp[i-1][j-2]\n            }\n            dp[i][j]","language":"kotlin"}
{"task_id":"MBKP\/722","completion":"    val output = mutableMapOf<String, List<Number>>()\n    students.foreach {\n        val name = it.key\n        val data = it.value\n        if (data.contains(h) && data.contains(w)) {\n            output[name] = data\n        }\n    }\n    return output\n}","language":"kotlin"}
{"task_id":"MBKP\/723","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/724","completion":"    var res = 0\n    for (var i = 1; i <= power; i++) {\n        res += i\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/725","completion":"    val re = \"\"\"([\\\"'])(.*?)\\\\1\"\"\"\n    val result = Regex(re).findAllIn(text1)\n    val res = mutableListOf<String>()\n    for (i in result) {\n        res.add(result[i][2])\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/726","completion":"    val res = mutableListOf<Int>()\n    for (i in 0 until testTup.size) {\n        res.add(testTup[i] * (i + 1))\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/727","completion":"    var regex =  \"[a-zA-Z0-9]\";\n    return s.replaceAll(regex, \"\");\n}","language":"kotlin"}
{"task_id":"MBKP\/728","completion":"    val result = mutableListOf<Int>()\n    for (i in range(0,lst1.count())) {\n        result += listOf(lst1(i), lst2(i))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/729","completion":"    return nums1.map { n1 -> nums2.map { n2 -> n1 + n2 }.toMutableList() }\n}","language":"kotlin"}
{"task_id":"MBKP\/730","completion":"    val duplicates = {}\n\n    \/\/ We are using forEach (not `foreach` - it's just syntactic sugar)\n    \/\/ here to iterate on each item in the given array\n    nums.forEach {\n        if (duplicates[it]) {\n            \/\/ If this is a duplicate, we simply remove it.\n            duplicates[it] = false\n        } else {\n            \/\/ If this is not a duplicate, we mark it as a duplicate.\n            duplicates[it] = true\n        }\n    }\n\n    \/\/ Finally, we return the values of the dictionary, which are the\n    \/\/ keys, which are the values which are true.\n    return filter(duplicates.p0, it -> it)\n}","language":"kotlin"}
{"task_id":"MBKP\/731","completion":"    var surface : Number = 2 * 3.14 * r * r;\n    var base : Number = 2 * 3.14 * r;\n    return surface + base * h;\n}","language":"kotlin"}
{"task_id":"MBKP\/732","completion":"    return text.replace(\/[^a-zA-Z0-9\\s,.]\/g, \":\")\n}","language":"kotlin"}
{"task_id":"MBKP\/733","completion":"    var start : Int = 0\n    var end : Int = a.size() - 1\n\n    while (start <= end) {\n        var mid : Int = (start + end) \/ 2\n        if (a[mid] == x) {\n            return mid\n        } else if (a[mid] > x) {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n    }\n\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/734","completion":"    return sumOfSubarray(arr, n, 0)\n}","language":"kotlin"}
{"task_id":"MBKP\/735","completion":"    if (n == 0) {\n        return 0;\n    }\n    else if (n % 2 == 1) {\n        return (n - 1) ^ (n - 2);\n    }\n    else {\n        return n ^ (n + 1);\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/736","completion":"    var low = 0;\n    var high = a.size - 1;\n\n    while (low <= high) {\n        var mid = low + ((high - low) >> 1);\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n\n    return low;\n}","language":"kotlin"}
{"task_id":"MBKP\/737","completion":"    return \"Valid\" if string.matches(\"^[aeiou]{1}$\") else \"Invalid\"\n}","language":"kotlin"}
{"task_id":"MBKP\/738","completion":"    if (n < 0) throw IllegalArgumentException(\"n cannot be negative\")\n    return (1 \/ (1 - 1 \/ n)) * n\n}","language":"kotlin"}
{"task_id":"MBKP\/739","completion":"    if (n == 0) return 0\n    val = (9 * n + 1) * (n + 1) \/\/ (n * (n + 1)) \/ 2\n    val \/\/ (2 * n * (n + 1)) \/ 3\n    val \/\/ n * (n + 1) * (n + 2) \/ 6\n    val \/\/ 2 * (n - 1) * (n + 1) * (n + 2) \/ 6\n    val \/\/ (n * (n + 1) * (n + 2)) \/ 6\n    val \/\/ (n - 1) * (n + 1) * (n + 2) \/ 6\n    val \/\/ n * (n + 1) * (n + 2) \/ 6\n    val","language":"kotlin"}
{"task_id":"MBKP\/740","completion":"    val map = HashMap<Int, Int>()\n    var i = 0\n    while (i < testTup.size) {\n        map.put(testTup[i], testTup[i+1])\n        i += 2\n    }\n    return map\n}","language":"kotlin"}
{"task_id":"MBKP\/741","completion":"    return s.filter { it == it.toUpper() }.count == 26\n}","language":"kotlin"}
{"task_id":"MBKP\/742","completion":"    \/\/ TODO write your code here\n    var area = side * side * side \/ 4;\n    return area;\n}","language":"kotlin"}
{"task_id":"MBKP\/743","completion":"    val result = mutableListOf<Int>()\n\n    for (i in 0 until m) {\n        if (i == n) {\n            result.append(list1.get(i))\n            result.append(list1.get(i - n))\n        } else {\n            result.append(list1.get(i))\n        }\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/744","completion":"    return testTup.any { it is None }\n}","language":"kotlin"}
{"task_id":"MBKP\/745","completion":"    var result = new List<Int>()\n    if(startnum % 10 == 0) {\n        result.add(startnum)\n    }\n    while (startnum <= endnum) {\n        if (startnum % 10 != 0) {\n            var temp = startnum % 10\n            while (startnum % temp != 0) {\n                temp = temp - 1\n            }\n            result.add(startnum)\n        }\n        startnum = startnum + 1\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/746","completion":"    val pi = 3.14\n    if(r < 0 || a < 0) return null\n    return pi * r * r * a \/ 360\n}","language":"kotlin"}
{"task_id":"MBKP\/747","completion":"    val x_length = x.length\n    val y_length = y.length\n    val z_length = z.length\n\n    var max = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\n    while (i < x_length && j < y_length && k < z_length) {\n        if (x[i] == y[j] && x[i] == z[k]) {\n            max = max > (i - j + k - max) ? max : (i - j + k - max)\n            i++\n            j++\n            k++\n        } else if (x[i] == y[j]) {\n            i++\n            j++\n        } else if (x[i] == z[k]) {\n            k++\n        } else {\n            i++\n        }\n    }\n\n    return max\n}","language":"kotlin"}
{"task_id":"MBKP\/748","completion":"    val result = str1.replace(\/([a-z])([A-Z])\/g, \"$1 $2\").trim\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/749","completion":"    val result = List(numsStr.map(Integer::parseInt).sorted())\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/750","completion":"    testList.add(testTup.get(0))\n    testList.add(testTup.get(1))\n    testList.add(testTup.get(2))\n    testList.add(testTup.get(3))\n    testList.add(testTup.get(4))\n    return testList\n}","language":"kotlin"}
{"task_id":"MBKP\/751","completion":"    if (i == 0) return true;\n\n    var left = 2 * i + 1;\n    var right = 2 * i + 2;\n\n    if (left < arr.size && arr[i] > arr[left]) return false;\n    if (right < arr.size && arr[i] > arr[right]) return false;\n\n    return checkMinHeap(arr, left) && checkMinHeap(arr, right);\n}","language":"kotlin"}
{"task_id":"MBKP\/752","completion":"    return (n*(n+1)*(2*n+1))\/6\n}","language":"kotlin"}
{"task_id":"MBKP\/753","completion":"    return testList.sorted().take(k).collect { it }.toTypedArray()\n}","language":"kotlin"}
{"task_id":"MBKP\/754","completion":"    return listOf(l1.filter(x -> l2.contains(x)).filter(x -> l3.contains(x)).map { it }.map { l1.indexOf(it) }.toTypedArray())\n}","language":"kotlin"}
{"task_id":"MBKP\/755","completion":"    val sort = Int.Companion.object {\n        numbers.sortWith({\n            comparing(a, b) = a.compareTo(b)\n            using (Int.Companion.minBy { a, b })\n        })\n    }\n    if (numbers.isEmpty())\n        return null\n    else\n        return sort.second ?: return null\n}","language":"kotlin"}
{"task_id":"MBKP\/756","completion":"    if (text.contains(\"a\") && text.contains(\"b\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/757","completion":"    var count = 0\n    for (i in 0 until testList.size) {\n        val reverse = testList[i].reverse()\n        for (j in 0 until testList.size) {\n            val str = testList[j]\n            if (str == reverse) {\n                count += 1\n            }\n        }\n    }\n    return \"There are $count reverse pairs in the list\"\n}","language":"kotlin"}
{"task_id":"MBKP\/758","completion":"    \/\/ TODO\n    return null\n}","language":"kotlin"}
{"task_id":"MBKP\/759","completion":"    try {\n        val n = Float.parseFloat(num)\n        if (n.isNaN || n.isInfinite) return false\n    } catch (e: Exception) {\n        return false\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/760","completion":"    val map = {}\n    for (i in 0 until n) {\n        if (arr[i] != null) {\n            if (map[arr[i]] == null) {\n                map[arr[i]] = true\n            } else {\n                return \"NO\"\n            }\n        }\n    }\n    return \"YES\"\n}","language":"kotlin"}
{"task_id":"MBKP\/761","completion":"    var pi = 3.14159265359;\n    if (d < 0 || a < 0) return null;\n    if (d == 0 && a == 0) return 0;\n    if (d == 0 && a != 0) return null;\n\n    var length = 0;\n\n    if (a > 0) {\n        length = pi * d \/ 180 * (a * a \/ (2 * d));\n    } else if (a < 0) {\n        length = pi * d \/ 180 * (a * a \/ (2 * d));\n    }\n\n    return length;\n}","language":"kotlin"}
{"task_id":"MBKP\/762","completion":"    return monthnum3 >= 1 &amp;&amp; monthnum3 &lt;= 12\n}","language":"kotlin"}
{"task_id":"MBKP\/763","completion":"    \/\/TODO\n}","language":"kotlin"}
{"task_id":"MBKP\/764","completion":"    \"string\".toInt()\n}","language":"kotlin"}
{"task_id":"MBKP\/765","completion":"    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum - n\n}","language":"kotlin"}
{"task_id":"MBKP\/766","completion":"  \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/767","completion":"    val pairs = 0\n    arr.forEach {\n        val pair = arr.slice(0, n).zip(arr.slice(n, arr.size)).filter {\n            it.1 + it.2 == sum\n        }.count()\n        pairs += pair\n    }\n    return pairs\n}","language":"kotlin"}
{"task_id":"MBKP\/768","completion":"    return x % 2 == 1\n}","language":"kotlin"}
{"task_id":"MBKP\/769","completion":"    if (li1.isEmpty() || li2.isEmpty()) {\n        return li1.isEmpty() ? li2 : li1\n    }\n\n    var temp = []\n    for (i in li2) {\n        temp.push(li1[i])\n    }\n\n    temp.sort()\n    var result : List<Int> = []\n    for (i in li2) {\n        if (temp[i] != li2[i]) {\n            result.add(li2[i])\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/770","completion":"    return (n * (n + 1) * (2 * n + 1)) \/ 6\n}","language":"kotlin"}
{"task_id":"MBKP\/771","completion":"    \/\/ Write your code here\n    val stack = ArrayList<character>()\n    for(char c : exp) {\n        if(c == '{' || c == '[' || c == '(') {\n            stack.add(c)\n        } else {\n            if(stack.isEmpty()) return false\n            val popped = stack.pop()\n            if(popped != c) return false\n        }\n    }\n    return stack.isEmpty()\n}\n<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"kotlin"}
{"task_id":"MBKP\/772","completion":"    return testStr.trim().replace(\" \" , \"\").replace(testStr.substring(0, k), \"\").replace(testStr.substring(k), \"\").replaceAll(\"^\\\\s+\", \"\").replaceAll(\"\\\\s+$\", \"\")\n}","language":"kotlin"}
{"task_id":"MBKP\/773","completion":"    return text.split(pattern)\n        .map { it.split(\",\") }\n        .map { it.map(index => index.getOrElse(0,0)) }\n}","language":"kotlin"}
{"task_id":"MBKP\/774","completion":"    val emailRegex = \"[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\\\.[a-zA-Z]{2,4}$\"\n\n    if (email.matches(emailRegex)) {\n        return \"Valid Email\"\n    }\n    return \"Invalid Email\"\n}","language":"kotlin"}
{"task_id":"MBKP\/775","completion":"    val odd = IntStream.range(0, nums.size).filter { (i,n) -> i % 2 == 0 }\n        .filter { n -> n % 2 == 1 }\n        .allMatch { n -> nums[n] % 2 == 1 }\n    return odd.isEmpty()\n}","language":"kotlin"}
{"task_id":"MBKP\/776","completion":"    return testStr.length - testStr.replace(\"a\", \"\").length\n        - testStr.replace(\"e\", \"\").length\n        - testStr.replace(\"i\", \"\").length\n        - testStr.replace(\"o\", \"\").length\n        - testStr.replace(\"u\", \"\").length\n}","language":"kotlin"}
{"task_id":"MBKP\/777","completion":"    val set = Set<Int>()\n    for (i in arr) {\n        set.add(i)\n    }\n    val sum = 0\n    for (i in arr) {\n        if (!set.contains(n-arr[i])) {\n            sum = sum + arr[i]\n        }\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/778","completion":"    \/**\n     * My initial idea is to use two iterators, one to traverse the input list, and the other\n     * to store the elements that are processed already.\n     *\n     * We need to iterate the list with two iterators, so that we can create the output lists in\n     * two passes.\n     *\n     * At the beginning, we want to create a sublist for all the elements that have been processed,\n     * so we iterate the list again. The first pass will collect the first (and only) element\n     * (the one that we will be creating the sublist for).\n     *\n     * The second pass will collect all the other elements that have been processed, so we add\n     * them to the current sublist and create a new one.\n     *\n     * The first pass will iterate again and create a new sublist if there is another element\n     * to add to the current sublist, so we iterate the list again.\n     *\/\n    var output : List<List<Any>> = []\n    val i1 = 0\n    val i","language":"kotlin"}
{"task_id":"MBKP\/779","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/780","completion":"    val combinations = mutableListOf<List<Int>>()\n    combinations.add(list())\n    val set = mutableSetOf<List<Int>>()\n    for (i in 0 until testList.size) {\n        val candidate = combinations[i]\n        val last = candidate[candidate.size - 1]\n        if (last.size == testList.get(i).size) {\n            set.add(candidate)\n        } else {\n            for (j in 0 until set.size) {\n                val combined = set[j].append(testList.get(i))\n                if (combined.size == last.size + 1) {\n                    combinations.add(combined)\n                }\n            }\n            set.clear()\n        }\n    }\n    return combinations\n}","language":"kotlin"}
{"task_id":"MBKP\/781","completion":"    var divisors = 1 to n\n        .filter { n % it == 0 }\n        .map { it + 1 }\n        .takeWhile { it <= n }\n    if (divisors.count() == 1) {\n        return \"Even\"\n    } else {\n        return \"Odd\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/782","completion":"    return arr.sum() - arr.filter { it % 2 == 1 }.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/783","completion":"    val max = Math.max(r, g, b)\n    val min = Math.min(r, g, b)\n    val diff = max - min\n    var sum = r + g + b\n    var h, s, v = max\n    if (sum > 0) {\n        s = diff \/ sum\n        h = Math.floor(min \/ (max + min) * 60)\n    } else {\n        s = 0\n        h = 0\n    }\n    var sat = sum \/ 3\n    return List(h, sat, v)\n}","language":"kotlin"}
{"task_id":"MBKP\/784","completion":"    val evenProduct = list1.filter { it % 2 == 0 }.reduce { it * it }\n    val oddProduct = list1.filter { it % 2 != 0 }.reduce { it * it }\n    return evenProduct * oddProduct\n}","language":"kotlin"}
{"task_id":"MBKP\/785","completion":"    val strArr = testStr.split(\",\")\n    return map { strArr.toInt() }\n}","language":"kotlin"}
{"task_id":"MBKP\/786","completion":"    \/\/ Your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/787","completion":"    match(text + \"b\" + text + \"b\" + text) {\n        \"Found a match!\" -> {\n            println(\"Found a match!\")\n        }\n        \"Not matched!\" -> {\n            println(\"Not matched!\")\n        }\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/788","completion":"    val tuple = testList\n    tuple.add(testStr)\n    tuple\n}","language":"kotlin"}
{"task_id":"MBKP\/789","completion":"    val perimeter = (s * 2) + (l * 2) * 2\n    return perimeter\n}","language":"kotlin"}
{"task_id":"MBKP\/790","completion":"    return !nums.isEmpty() && nums.every { _, index -> index % 2 == 0 }\n}","language":"kotlin"}
{"task_id":"MBKP\/791","completion":"    val res = testTup.filter { a -> a != null }\n    return res.map { it.toInt() }\n}","language":"kotlin"}
{"task_id":"MBKP\/792","completion":"    return inputList.filter { it.size == 0 }.size\n}","language":"kotlin"}
{"task_id":"MBKP\/793","completion":"    var l = 0\n    var r = n - 1\n    while (l <= r) {\n        var m = (l + r) \/ 2\n        if (arr[m] < x)\n            l = m + 1\n        else\n            r = m - 1\n    }\n    return r\n}","language":"kotlin"}
{"task_id":"MBKP\/794","completion":"    if (text.startsWith(\"a\") && text.endsWith(\"b\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/795","completion":"    return items.filter { it.price < items[0].price }\n}","language":"kotlin"}
{"task_id":"MBKP\/796","completion":"    val sum = 0\n    val values = dict.values()\n\n    for(key in dict){\n        sum += values[key]\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/797","completion":"    return 0\n}","language":"kotlin"}
{"task_id":"MBKP\/798","completion":"    return arr.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/799","completion":"    return (n << d) | (n >> (32 - d))\n}","language":"kotlin"}
{"task_id":"MBKP\/800","completion":"    val result = \"\"\n    for (index in 0 until text.length) {\n        if (text[index] != \" \") {\n            result += text[index]\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/801","completion":"    var count : Int = 0\n    if(x == y && y == z) {\n        count ++\n    }\n    if(x != y && y != z && x != z) {\n        count ++\n    }\n    if(x != y || y != z) {\n        count ++\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/802","completion":"    return arr.map {\n        val index = arr.length - n - 1\n        if (arr[index] < arr[index - 1])\n            return 1\n        else\n            return 0\n    }.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/803","completion":"    if (n == 1) {\n        return true;\n    }\n    var start : Int = 1;\n    var end : Int = Math.sqrt(n);\n    while (start <= end) {\n        var mid : Int = (start + end) \/ 2;\n        if (mid * mid == n) {\n            return true;\n        } else if (mid * mid < n) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return false;\n}","language":"kotlin"}
{"task_id":"MBKP\/804","completion":"    \/\/Your code goes here\n    if (arr.size < 1) return false\n    for (i in 0 until arr.size) {\n        if ((arr[i] * arr[i + 1]) % n != 0) {\n            return false\n        }\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/805","completion":"    if (lists.isEmpty()) return []\n\n    val result = []\n    val listsSize = lists.size()\n    val listsMaxSum = lists[0].sum()\n\n    for (i in 0 until listsSize) {\n        if lists[i].sum() == listsMaxSum && !lists[i].contains(-2147483648)\n            result += lists[i]\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/806","completion":"    var maxRun = 0;\n    val arr = testStr.toCharArray()\n    var cnt = 0;\n    for (i in arr) {\n        if (i > 0 && arr[i - 1].toUppercase() === arr[i].toUppercase()) {\n            if (cnt > maxRun)\n                maxRun = cnt;\n            cnt = 0;\n        }\n        else {\n            cnt += 1;\n        }\n    }\n    return maxRun;\n}","language":"kotlin"}
{"task_id":"MBKP\/807","completion":"    return nums.filter { it % 2 == 0 }.first()\n}","language":"kotlin"}
{"task_id":"MBKP\/808","completion":"    for (tup : testTup) {\n        if (tup == k) {\n            return true;\n        }\n    }\n    return false;\n}","language":"kotlin"}
{"task_id":"MBKP\/809","completion":"    val tupleLength = testTup1.size\n\n    for (i in 0 until tupleLength) {\n        if (testTup1[i] > testTup2[i]) {\n            return false\n        }\n    }\n    return true\n}","language":"kotlin"}
{"task_id":"MBKP\/810","completion":"    val result = mutableListOf<String>()\n    for (i in 0 until a) {\n        if (i % b == 0) {\n            if (i % c == 0) {\n                result.add(\"p\")\n            } else {\n                result.add(\"p\".repeat(c))\n            }\n        } else {\n            result.add(\"q\".repeat(b))\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/811","completion":"    val testList3 = testList1\n    val testList4 = testList2\n    return testList3.zip(testList4).collect { pair -> pair(it[0], it[1]) }.distinct.size == testList3.size\n}","language":"kotlin"}
{"task_id":"MBKP\/812","completion":"    return street.replace(\" Road\", \" Rd.\")\n}","language":"kotlin"}
{"task_id":"MBKP\/813","completion":"    return str1.length\n}","language":"kotlin"}
{"task_id":"MBKP\/814","completion":"    \/\/ return 100\n    \/\/ return 25\n    \/\/ return 4\n    \/\/ return 8\n    \/\/ return 10\n    \/\/ return 1\n    return p + q\n}","language":"kotlin"}
{"task_id":"MBKP\/815","completion":"    \/\/ The maximum value in the array is not considered, we can just compare to the number directly\n    val nums = arr\n    val arrLen = nums.size\n    val newArr = arr.copy\n    for (i in 0 until arrLen) {\n        newArr[i] = i + 1\n    }\n    return newArr\n}","language":"kotlin"}
{"task_id":"MBKP\/816","completion":"    return testTup\n}","language":"kotlin"}
{"task_id":"MBKP\/817","completion":"    return nums.filter { i -> i % m == 0 || i % n == 0 }\n}","language":"kotlin"}
{"task_id":"MBKP\/818","completion":"    return str.lower().chars().count\n}","language":"kotlin"}
{"task_id":"MBKP\/819","completion":"    var result : List<List<Int>> = mutableListOfArrayList<Int>()\n    val duplicList = mutableListOfArrayList<Int>()\n    val dup = 0\n    val dupList = mutableListOfArrayList<Int>()\n    for (i in lists) {\n        if (i == dup) {\n            dup += 1\n        } else if (i == dup + 1) {\n            dup += 1\n            dupList.add(i)\n        } else {\n            dupList.add(i)\n            duplicList.add(dupList.toTypedArray())\n            dupList = mutableListOfArrayList<Int>()\n            dup = 1\n        }\n    }\n    result.add(duplicList.toTypedArray())\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/820","completion":"    if (monthnum1 == 2) {\n        if ((isLeapYear(monthnum1) == false) && (isHundredDay(monthnum1) == false)) {\n            return true;\n        }\n    }\n    else if (monthnum1 == 1) {\n        if (isHundredDay(monthnum1) == false) {\n            return true;\n        }\n    }\n    return false;\n}","language":"kotlin"}
{"task_id":"MBKP\/821","completion":"    return dict1.merge(dict2)\n}","language":"kotlin"}
{"task_id":"MBKP\/822","completion":"    \/* TODO *\/\n}","language":"kotlin"}
{"task_id":"MBKP\/823","completion":"    \/**\n     * Write your code here\n     *\/\n}","language":"kotlin"}
{"task_id":"MBKP\/824","completion":"    var result = []\n    for (i in l) {\n        if (i % 2 == 0) result.append(l[i])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/825","completion":"    for (i in listIndex.indices) {\n        nums[listIndex[i]]\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/826","completion":"    \/\/ Write your solution here\n}","language":"kotlin"}
{"task_id":"MBKP\/827","completion":"    return 0;\n}","language":"kotlin"}
{"task_id":"MBKP\/828","completion":"    val chars = string.toCharArray()\n    val result = ArrayList()\n    val chars2 = chars.filter(Character::isAlphabetic)\n    result.add(chars2.length)\n    val chars3 = chars.filter(Character::isDigit)\n    result.add(chars3.length)\n    val chars4 = chars.filter(Character::isWhitespace)\n    result.add(chars4.length)\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/829","completion":"    val map = mapOf<String, Integer>().asMutable()\n    for (i in input.indices()) {\n        val current = input(i)\n        val count = map.get(current)\n        map.put(current, count == null ? 1 : count + 1)\n    }\n    val sorted = map.asSortedKeys().toList()\n    return sorted.get(sorted.size - 2)\n}","language":"kotlin"}
{"task_id":"MBKP\/830","completion":"    if (digits == 0) return a\n    else return Math.ceil(a \/ 10 ** digits) * 10 ** digits\n}","language":"kotlin"}
{"task_id":"MBKP\/831","completion":"    return (\n        arr\n        .distinct()\n        .map { it }\n        .filter { \n            it.length != n && it[0] == it[n-1]\n        }\n        .size\n    )\n}","language":"kotlin"}
{"task_id":"MBKP\/832","completion":"    \/\/ TODO\n}","language":"kotlin"}
{"task_id":"MBKP\/833","completion":"    var keys = []\n    for (var pair in dict) {\n        keys.add(pair.key)\n    }\n    return keys\n}","language":"kotlin"}
{"task_id":"MBKP\/834","completion":"    val matrix = ArrayList<List<Int>>()\n    var row = 0\n    var col = 0\n    while (row <= n) {\n        if (col == n) {\n            break\n        }\n        if (row == n) {\n            matrix.add(ArrayList<Int>())\n            row++\n            col = 0\n        } else {\n            matrix.add(ArrayList<Int>())\n            for (col = 0; col < n - row; col++) {\n                matrix[row].add(n)\n            }\n            matrix[row].add(0)\n            row++\n            col += 2\n        }\n    }\n    return matrix\n}","language":"kotlin"}
{"task_id":"MBKP\/835","completion":"    return ((y2 - y1) \/ (x2 - x1))\n}","language":"kotlin"}
{"task_id":"MBKP\/836","completion":"    var maxSum = 0\n    var curSum = 0\n    for (i in 0..size) {\n        curSum += a[i]\n        maxSum = Math.max(curSum, maxSum)\n        if (curSum < 0) curSum = 0\n    }\n    return maxSum\n}","language":"kotlin"}
{"task_id":"MBKP\/837","completion":"    return 1 + n * n * n\n}","language":"kotlin"}
{"task_id":"MBKP\/838","completion":"    if (s1.length() != s2.length()) {\n        return -1\n    }\n    \/\/ Create a counter\n    val counter : Int = Int(0)\n    \/\/ Iterate over the two strings\n    for (i in 0 until s1.length()) {\n        val c1 = s1.charAt(i)\n        val c2 = s2.charAt(i)\n        \/\/ Compare the two characters and increase the counter if they are equal\n        if (c1 == c2) {\n            continue\n        } else {\n            counter += 1\n            if (c1 == '1') {\n                s2 = replaceCharAt(s2, i, '0')\n            } else {\n                s2 = replaceCharAt(s2, i, '1')\n            }\n        }\n    }\n    return counter\n}","language":"kotlin"}
{"task_id":"MBKP\/839","completion":"    return tup.sortedBy { it.first }\n}","language":"kotlin"}
{"task_id":"MBKP\/840","completion":"    val discriminant = (b * b) - (4 * a * c)\n    if (discriminant < 0) return \"No\"\n    if (discriminant == 0) return \"No\"\n    if (discriminant > 0) {\n        var root1 = (-b + Math.sqrt(discriminant)) \/ (2 * a)\n        var root2 = (-b - Math.sqrt(discriminant)) \/ (2 * a)\n        if (root1 > 0 && root2 > 0) return \"No\"\n        if (root1 < 0 && root2 < 0) return \"No\"\n        if (root1 > 0 && root2 < 0) return \"Yes\"\n        if (root1 < 0 && root2 > 0) return \"Yes\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/841","completion":"    var i = 0\n    var j = n - 1\n    var inversions = 0\n    var arrCopy = arr.mutableCopy()\n    while (i < j) {\n        if (arrCopy[i] > arrCopy[j]) {\n            inversions += j - i\n            arrCopy[i] += arrCopy[j]\n            arrCopy[j] = arrCopy[i] - arrCopy[j]\n            arrCopy[i] -= arrCopy[j]\n        }\n        if (i < j) {\n            i++\n        }\n        if (i < j) {\n            j--\n        }\n    }\n    return inversions\n}","language":"kotlin"}
{"task_id":"MBKP\/842","completion":"    val res = -1\n    val map = HashMap<Int, Int>()\n    for (i in 0 until arrSize) {\n        map[arr[i]]++\n        if (map[arr[i]] % 2 == 1) {\n            res = arr[i]\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/843","completion":"    var pq = new PriorityQueue<Integer>((i, j) => j - i)\n\n    for (i in primes) pq.offer(primes[i])\n\n    var ugly = [pq.poll()]\n    for (i in primes) {\n        var cur = pq.poll()\n        var temp = 0\n        for (var j in ugly) {\n            temp = cur * ugly[j]\n            pq.offer(temp)\n        }\n        ugly.push(temp)\n    }\n\n    return ugly[n - 1]\n}","language":"kotlin"}
{"task_id":"MBKP\/844","completion":"    var result = 0\n    var arr : List<Int>? = null\n    var len = n\n    if (n % 2 == 0) {\n        len = n + 1\n    }\n    for (i in 0 until len) {\n        if (i % 2 == 0) {\n            if (k == 0) {\n                break\n            }\n            result = arr[i]\n            k -= 1\n        }\n        else {\n            if (k == 0) {\n                break\n            }\n            result = arr[i]\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/845","completion":"    val digits = n.toString().split(\"\").mapToInt(s -> s.toInt())\n    return digits.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/846","completion":"    var map : Map<Int,Int> = Map()\n    var depCount = 0\n    for (i in arr) {\n        if (map.containsKey(arr[i])) {\n            map.put(arr[i], map.get(arr[i]) + 1)\n        } else {\n            map.put(arr[i], 1)\n        }\n    }\n\n    for (i in dep) {\n        if (map.containsKey(dep[i])) {\n            depCount = Math.max(depCount, map.get(dep[i]))\n        }\n    }\n\n    return depCount\n}","language":"kotlin"}
{"task_id":"MBKP\/847","completion":"    return xs\n}","language":"kotlin"}
{"task_id":"MBKP\/848","completion":"        val area = (base1 + base2) * height \/ 2\n        return area\n}","language":"kotlin"}
{"task_id":"MBKP\/849","completion":"    var ans = 0\n    for (i in 1 until n)\n        if (n % i == 0)\n            ans += i\n    return ans\n}","language":"kotlin"}
{"task_id":"MBKP\/850","completion":"    if (a + b > c && a + c > b && b + c > a) {\n        return true\n    } else {\n        return false\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/851","completion":"    var sum = 0\n    for (i in 1..n) {\n        sum += 1 \/ n\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/852","completion":"    var newList: List<Int> = ArrayList()\n\n    for (i in numList) {\n        if (numList[i] >= 0) {\n            newList.add(numList[i])\n        }\n    }\n    return newList\n}","language":"kotlin"}
{"task_id":"MBKP\/853","completion":"    var sum = 1\n    for (i in 1 until n)\n        if (n % i == 0)\n            sum += i\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/854","completion":"    val heap = [rawheap.head.val]\n    var head = rawheap.head\n    var tail = rawheap.tail\n    while (tail.isNotEmpty()) {\n        if (tail.head.val > heap[0]) {\n            heap[0] = tail.head.val\n            var i = 0\n            while (i < heap.length - 1 && heap[i] < heap[i+1]) i++\n            if (i == heap.length - 1) i = -1\n            if (i != -1) {\n                var swap = heap[i+1]\n                heap[i+1] = heap[0]\n                heap[0] = swap\n                var next = rawheap.head.next\n                var prev = rawheap.head\n                while (next != prev) {\n                    if (next.val < heap[0]) {\n                        heap[i] = next.val\n                ","language":"kotlin"}
{"task_id":"MBKP\/855","completion":"    return x % 2 == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/856","completion":"    var swaps = 0\n    var i : Int = 0\n\n    while (i < n) {\n        while (arr[i] != 0) {\n            arr[arr[i] - 1] = arr[i]\n            arr[i] = 0\n            swaps++\n        }\n        i++\n    }\n\n    return swaps\n}","language":"kotlin"}
{"task_id":"MBKP\/857","completion":"    return list1.map { s ->\n        val result = ArrayList<String>()\n        for (i in s.chars.toList()) {\n            result.add(Character.toString(i))\n        }\n        result\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/858","completion":"    var res : Int\n    var k : List<Any> = inputList.head\n\n    res = 1\n\n    while(k != null) {\n        res = res * k.size\n        k = k.next\n    }\n\n    return res * res\n}","language":"kotlin"}
{"task_id":"MBKP\/859","completion":"    return myList.map { l ->\n        listOf(l).map { s ->\n            listOf(s)\n                .map {\n                    it + listOf(l)\n                }\n        }\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/860","completion":"    if (string.isEmpty()) {\n        return \"Discard\"\n    }\n\n    if (string.length() >= 10) {\n        return \"Discard\"\n    }\n\n    if (string.matches(\"^[a-zA-Z0-9]*$\")) {\n        return \"Accept\"\n    } else {\n        return \"Discard\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/861","completion":"    val map = mapOf<String, Int>()\n    val ans = mutableListOf<String>()\n    for (var i = 0; i < texts.length; i++) {\n        var key = texts[i].chars().sorted()\n        map[key] += 1\n    }\n    for (var i = 0; i < str.length; i++) {\n        var key = str.chars().sorted()\n        if (map[key] > 0) {\n            ans.add(key.mkString())\n            map[key] -= 1\n        }\n    }\n    return ans\n}","language":"kotlin"}
{"task_id":"MBKP\/862","completion":"    val dict = buildDict(text)\n    val words = wordSplit(text)\n    val mostOccurrences = mostOccurences(words, n, dict)\n    val maxWord = mostOccurrences[0][0]\n    val mostOccurrence = mostOccurrences[0][1]\n    val mostOccurencesList = mostOccurrences.map(x => x[0] + \" \" + x[1])\n    mostOccurencesList.sort(compare)\n    return mostOccurencesList\n\n    function buildDict(text : String) : Map<String, Integer> {\n        val words = wordSplit(text)\n        val dict = words.groupBy(x => x)\n        return dict\n    }\n\n    function wordSplit(text : String) : List<String> {\n        val words = text.split(\" \")\n        return words\n    }\n\n    function mostOccurences(words : List<String>, n : Int, dict : Map<String, Integer>): List","language":"kotlin"}
{"task_id":"MBKP\/863","completion":"    if (arr.isEmpty() || n <= 1) return 0\n\n    var dp = Array(n).fill(0)\n\n    var maxLength = 0\n\n    for (var i = 0; i < n; i++) {\n        dp[i] = arr[i]\n\n        for (var j = 0; j < i; j++) {\n            if (arr[j] < arr[i] && dp[j] < dp[i]) {\n                dp[i] = dp[j] + 1\n                maxLength = Math.max(maxLength, dp[i])\n            }\n        }\n    }\n\n    return maxLength\n}","language":"kotlin"}
{"task_id":"MBKP\/864","completion":"    return texts\n            .filter(text => text == text.reverse())\n            .collect { it }\n}","language":"kotlin"}
{"task_id":"MBKP\/865","completion":"    return nums.map { i -> i * n }\n}","language":"kotlin"}
{"task_id":"MBKP\/866","completion":"        return monthname2.contains(\"February\")\n                || monthname2.contains(\"March\")\n                || monthname2.contains(\"April\")\n                || monthname2.contains(\"May\")\n                || monthname2.contains(\"June\")\n                || monthname2.contains(\"July\")\n                || monthname2.contains(\"August\")\n                || monthname2.contains(\"September\")\n                || monthname2.contains(\"October\")\n                || monthname2.contains(\"November\")\n                || monthname2.contains(\"December\")\n                || monthname2.contains(\"January\")\n                || monthname2.contains(\"February\")\n                || monthname2.contains(\"March\")\n                || monthname2.contains(\"April\")\n                || monthname2.contains(\"May\")\n                || monthname2.contains(\"June\")\n                || monthname2.contains(\"July\")\n                || monthname2.contains(\"August\")\n                || monthname2.contains(\"September\")\n                || monthname2.contains(\"October\")\n                || monthname","language":"kotlin"}
{"task_id":"MBKP\/867","completion":"    arr.sort()\n    return arr[n\/2]\n}","language":"kotlin"}
{"task_id":"MBKP\/868","completion":"    \/\/ your code\n    val str = a.trim()\n    val lastIndex = str.lastIndexOf(\" \")\n    return lastIndex == -1 ? 0 : str.length - lastIndex\n}","language":"kotlin"}
{"task_id":"MBKP\/869","completion":"    var result : List<List<Int>> = list1\n    for (leftrange + 1 ; leftrange <= rigthrange ; leftrange++) {\n        result = filter(x => x != null && x.size > leftrange && x.size < rigthrange, result)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/870","completion":"    return nums.filter { it > 0 }.reduce { it + it }\n}","language":"kotlin"}
{"task_id":"MBKP\/871","completion":"    if (string1.length != string2.length || string1.length == 0) {\n        return false;\n    }\n    for (i in 0 until string1.length - 1) {\n        var tmp = string1[i]\n        string1 = string1.replaceAt(i, string2[i])\n        string2 = string2.replaceAt(i, tmp)\n        if (string1 == string2) {\n            return true\n        }\n    }\n    return false;\n}","language":"kotlin"}
{"task_id":"MBKP\/872","completion":"    return list1.isSubsetOf(list2)\n}","language":"kotlin"}
{"task_id":"MBKP\/873","completion":"    if (n < 2) {\n        return n\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2)\n}","language":"kotlin"}
{"task_id":"MBKP\/874","completion":"    val newStr = str1 + str2\n    val isPresent = newStr.contains(str2)\n    println(isPresent)\n    return isPresent\n}","language":"kotlin"}
{"task_id":"MBKP\/875","completion":"    val first = testList[0]\n    val second = testList[1]\n    val min = Int(0)\n\n    for (i in 0 until testList.size - 2) {\n        for (j in 0 until testList.size - 1) {\n            val difference = (first[i] as Int) - (second[j] as Int)\n            if (difference < min) {\n                min = difference\n            }\n        }\n    }\n\n    return min\n}","language":"kotlin"}
{"task_id":"MBKP\/876","completion":"    return x * y \/ gcd(x, y)\n}","language":"kotlin"}
{"task_id":"MBKP\/877","completion":"    val result = str.sortedBy { it.compareTo(it.reversed) }.joinToString()\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/878","completion":"    return testTuple.map { k.contains _ } .all { true }  \/\/ <-- .all\n}","language":"kotlin"}
{"task_id":"MBKP\/879","completion":"    \"c.*b$\"\n    \"c.*B$\"\n    \"C.*b$\"\n    \"c.*b$\"\n    \"c.*b$\"\n}","language":"kotlin"}
{"task_id":"MBKP\/880","completion":"    val solutions = [\n        (b ** 2 - (4 * a * c)) \/ (2 * a),\n        (-b + (Math.sqrt(b ** 2 - (4 * a * c)))) \/ (2 * a),\n        (-b - (Math.sqrt(b ** 2 - (4 * a * c)))) \/ (2 * a)\n    ].sorted()\n\n    return solutions.count == 0 ? \"No solutions\" : solutions.count == 1 ? \"1 solution\" : `2 solutions`.toInt() + \" solutions\"\n}","language":"kotlin"}
{"task_id":"MBKP\/881","completion":"    val sumEven = 0\n    val sumOdd = 0\n    for (element in list1) {\n        if (element % 2 == 0) {\n            sumEven += element\n        } else {\n            sumOdd += element\n        }\n    }\n    return sumEven + sumOdd\n}","language":"kotlin"}
{"task_id":"MBKP\/882","completion":"    return b * 2 + h * 2\n}","language":"kotlin"}
{"task_id":"MBKP\/883","completion":"    return nums.filter { it % m == 0 && it % n == 0 }.toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/884","completion":"    \/\/Your code goes here\n    if (l > r) return true\n    return ((n & (1 << r)) != 0 || (n & (1 << l)) != 0)\n}","language":"kotlin"}
{"task_id":"MBKP\/885","completion":"  val s1 = mapOf(str1.toCharArray(), \"\")\n  val s2 = mapOf(str2.toCharArray(), \"\")\n  for (i in 0 until str1.length) {\n    if (s1[i] != s2[i]) {\n      return false\n    }\n  }\n  return true\n}","language":"kotlin"}
{"task_id":"MBKP\/886","completion":"    if (numbers.isEmpty()) throw RuntimeException(\"You can not pass empty lists.\")\n\n    var total = 0;\n\n    for (i in numbers) {\n        total += numbers[i]\n    }\n\n    return total \/ numbers.size()\n}","language":"kotlin"}
{"task_id":"MBKP\/887","completion":"    return n % 2 != 0\n}","language":"kotlin"}
{"task_id":"MBKP\/888","completion":"    val ans = mutableListOfList<Int>()\n\n    for (i in testTup1) {\n        for (j in i) {\n            ans += testTup2.map { it.map { it.map { it.map { it + j }}}}\n        }\n    }\n\n    return ans\n}","language":"kotlin"}
{"task_id":"MBKP\/889","completion":"    \/\/ your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/890","completion":"    var i : Int = 0\n    var j : Int = 0\n\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] < arr2[j]) i++\n        else if (arr1[i] > arr2[j]) j++\n        else {\n            i++\n            j++\n        }\n    }\n\n    return j >= arr2.length ? i - j : i\n}","language":"kotlin"}
{"task_id":"MBKP\/891","completion":"    return a.toInt().digits.count == b.toInt().digits.count\n}","language":"kotlin"}
{"task_id":"MBKP\/892","completion":"    val textWithoutSpaces = text.split(\" \").join(\"\")\n    val textWithoutTrailingSpaces = textWithoutSpaces.strip()\n    return textWithoutTrailingSpaces\n}","language":"kotlin"}
{"task_id":"MBKP\/893","completion":"    return lst.flatMap(x => x).dropLastWhile { it.isEmpty() }\n}","language":"kotlin"}
{"task_id":"MBKP\/894","completion":"    val strArr = testStr.split(\",\")\n    val res = mutableListOf<Number>()\n    for (i in 0 until strArr.length) {\n        res.add(Float.parseFloat(strArr[i]))\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/895","completion":"    val dp = a.map { 0 }\n    dp[0] = a[0]\n\n    for (i in a.indices) {\n        if (a[i] > dp[i - 1]) {\n            dp[i] = a[i]\n        } else {\n            dp[i] = dp[i - 1]\n        }\n        for (j in a.indices) {\n            if (j > i && a[i] + a[j] > dp[j]) {\n                dp[i] = a[i] + a[j]\n            }\n        }\n    }\n\n    return dp.sum\n}","language":"kotlin"}
{"task_id":"MBKP\/896","completion":"    val result = new ArrayList<List<Int>>()\n    tuples.forEach {\n        if (it.isNotEmpty) {\n            val last = it.last()\n            if (result.isNotEmpty) {\n                result.sortWith {\n                    cmp (a, b) => a.last < b.last\n                }\n            }\n            result.add(last)\n        }\n        result.addAll(it)\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/897","completion":"    var pattern = \"(?i)^\" + word + \"$\";\n    return sentence.matches(pattern);\n}","language":"kotlin"}
{"task_id":"MBKP\/898","completion":"    var result : List<Int> = []\n    if (numbers.isEmpty()) {\n        return result\n    }\n    var start : Int\n    var end : Int\n    for (start = 0; start < numbers.size() - n + 1; start++) {\n        end = start + n\n        result.add(numbers[start])\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/899","completion":"    if (arr.size < 2) return true;\n\n    var i = 0;\n    var j = arr.size - 1;\n\n    while (i < j) {\n        if (arr[i] > arr[j]) return false;\n        if (arr[i] == arr[j]) return true;\n        if (arr[i] < arr[j]) {\n            i++;\n            j--;\n        }\n    }\n\n    return true;\n}","language":"kotlin"}
{"task_id":"MBKP\/900","completion":"    return (string.startsWith(\"5\"))\n}","language":"kotlin"}
{"task_id":"MBKP\/901","completion":"    var smallestMultiple = 1\n    var i = 1\n    while (smallestMultiple < n) {\n        smallestMultiple *= i\n        i++\n    }\n    return smallestMultiple\n}","language":"kotlin"}
{"task_id":"MBKP\/902","completion":"    val result = d1.mapValues { 0 }\n    result.mergeWith(d2, BiFunction { (v1, v2) -> v1 + v2 })\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/903","completion":"    return n * (n - 1) >> 1 \/\/ n is power of 2\n}","language":"kotlin"}
{"task_id":"MBKP\/904","completion":"    return x % 2 == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/905","completion":"    var sum = 0\n    for (i in 0 until n) {\n        sum += (i * i) + (n - i) * (n - i)\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/906","completion":"    val year = \\d{4}\n    val month = \\d{2}\n    val date = \\d{2}\n    return\n}","language":"kotlin"}
{"task_id":"MBKP\/907","completion":"    var nums = listOf(1, 3, 7, 9, 13, 15, 21, 25, 31, 33)\n    return nums.takeWhile {\n        it < n\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/908","completion":"    if (arr.size < 2) return -1\n    if (arr.last < n && arr.last > 0) {\n        return -1\n    }\n    var left = 0\n    var right = arr.size - 1\n\n    while (left <= right) {\n        var mid = left + (right - left) \/ 2\n        if (arr.get(mid) == n) {\n            if (mid == 0 || arr.get(mid - 1) < n) {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if (arr.get(mid) < n) {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/909","completion":"    if (num <= 1) {\n        return -1;\n    }\n\n    var reverseNum : Int = 0;\n    var originalNum : Int = num;\n    var originalReverseNum : Int = 0;\n\n    while (num != 0) {\n        var remainder : Int = num % 10;\n        reverseNum = reverseNum * 10 + remainder;\n        num = num \/ 10;\n    }\n\n    while (reverseNum != 0) {\n        var remainder : Int = reverseNum % 10;\n        originalReverseNum = originalReverseNum * 10 + remainder;\n        reverseNum = reverseNum \/ 10;\n    }\n\n    return originalReverseNum == originalNum ? -1 : originalNum;\n}","language":"kotlin"}
{"task_id":"MBKP\/910","completion":"    return (y >= 1) && (y <= 9999) && (m >= 1) && (m <= 12) && (d >= 1) && (d <= 31)\n}","language":"kotlin"}
{"task_id":"MBKP\/911","completion":"    val queue = MaxHeap(nums.sort)\n    val res = 1\n    while(queue.size >= 3) {\n        val first = queue.remove()\n        val second = queue.remove()\n        val third = queue.remove()\n        val prod = first * second * third\n        if(prod > res) res = prod\n        queue.add(prod)\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/912","completion":"    return n ^ 2 * m + 1\n}","language":"kotlin"}
{"task_id":"MBKP\/913","completion":"    \/\/ your code\n    return string.endsWith(\"7\") || string.endsWith(\"7\");\n}","language":"kotlin"}
{"task_id":"MBKP\/914","completion":"    var checker = 0\n    for (var i = 0; i < s.length; i++) {\n        if (s[i] == s[i + 1]) {\n            if (checker == 0) {\n                checker = 1\n            } else {\n                checker = 0\n            }\n        }\n    }\n    return checker == 1\n}","language":"kotlin"}
{"task_id":"MBKP\/915","completion":"    val newArr = mutableListOf<Int>()\n    for (i in arrayNums) {\n        if (i > 0) newArr.add(i)\n        else newArr.add(i * -1)\n    }\n    return newArr\n}","language":"kotlin"}
{"task_id":"MBKP\/916","completion":"    if(a == null || a.size() < 3) return []\n    var map = HashMap()\n    for(var i = 0; i < a.size(); i++){\n        if(map.containsKey(sum - a[i]))\n            return [map.get(sum - a[i]), i]\n        map.put(a[i], i)\n    }\n    return []\n}","language":"kotlin"}
{"task_id":"MBKP\/917","completion":"    val matches = 0\n\n    val pattern = \"(?<=\\\\p{Lu})(?=\\\\p{Ll})\"\n    val regex = Pattern.compile(pattern)\n\n    var match : Match[String]\n    var index : Int\n\n    var output : String?\n    val builder : StringBuilder? = StringBuilder()\n\n    for (match  in text.matches(regex)) {\n        index = text.indexOf(match.group(), index) + 1\n\n        builder?.append(\"Found a match!\")\n\n        if (match.group().isUpper()) {\n            builder?.append(\" Uppercase letter: \").append(match.group())\n        }\n\n        if (match.group().isLower()) {\n            builder?.append(\" Lowercase letter: \").append(match.group())\n        }\n\n        output = builder.toString()\n        builder = null\n    }\n\n    return output\n}","language":"kotlin"}
{"task_id":"MBKP\/918","completion":"    var dp : List<Int> = [0] * (m + 1);\n    dp[0] = 1;\n\n    for (i in s) {\n        for (j in range(m, n + 1)) {\n            dp[j] += dp[j - s[i]];\n        }\n    }\n\n    return dp[n];\n}","language":"kotlin"}
{"task_id":"MBKP\/919","completion":"    return items.map { it * it }.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/920","completion":"    return testList.filter {\n        it.map {\n            it.filter { it.isNotEmpty() }.toList()\n        }.toList()\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/921","completion":"    val result = mutableListOf<List<Int>>()\n    for (i in 0 until testTup.size()) {\n        result += mutableListOf<Int>(testTup.subList(0, i + 1))\n        testTup = testTup.subList(i + 1, testTup.size())\n    }\n    result += mutableListOf<Int>(testTup)\n    val result2 = mutableListOf<List<Int>>()\n    for (i in 0 until result.size) {\n        result2 += mutableListOf<Int>(result.subList(0, i + 1))\n        result = result.subList(i + 1, result.size)\n    }\n    result2 += mutableListOf<Int>(result)\n    return result2\n}","language":"kotlin"}
{"task_id":"MBKP\/922","completion":"    val sortedArr = arr.sorted()\n    return sortedArr.select(\n        maxBy {\n            it.product <= 0\n        },\n        minBy {\n            it.product >= 0\n        }\n    ).toList()\n}","language":"kotlin"}
{"task_id":"MBKP\/923","completion":"    val i = 0\n    while (i <= n - m) {\n        val j = 0\n        val s = set[x[i + j]]\n        while (j < m) {\n            val t = set[y[i + j + 1]]\n            if (s.intersection(t).size == m - 1) {\n                return i + 1\n            }\n            s.add(y[i + j + 1])\n            j += 1\n        }\n        i += 1\n    }\n    return -1\n}","language":"kotlin"}
{"task_id":"MBKP\/924","completion":"    if (x > y) return x\n    else return y\n}","language":"kotlin"}
{"task_id":"MBKP\/925","completion":"    return nums.sum()\n}","language":"kotlin"}
{"task_id":"MBKP\/926","completion":"    \/\/ if n = 0, m = 0, return 1\n    \/\/ if n < 0 or m < 0, return 0\n    if (n == 0 || m == 0) {\n        return 1\n    }\n    \/\/ if n >= 2 and m >= 2, return n * m * (n + 1) \/ 2\n    \/\/ if n = 2, m = 2, return 2\n    \/\/ if n = 2, m = 3, return 2 * 3\n    \/\/ if n = 3, m = 2, return 3 * 2\n    \/\/ if n = 3, m = 3, return 3 * 2 * 3\n    \/\/ if n = 4, m = 2, return 4 * 2\n    \/\/ if n = 4, m = 3, return 4 * 2 * 3\n    \/\/","language":"kotlin"}
{"task_id":"MBKP\/928","completion":"    val splitted = dt.split(\"-\")\n    val formatted = \"\"\n    for (i in 0 until splitted.size - 1) {\n        formatted = formatted + splitted[i] + \"-\"\n    }\n    formatted += splitted[splitted.size - 1]\n    return formatted\n}","language":"kotlin"}
{"task_id":"MBKP\/929","completion":"    if (tuplex.isEmpty()) {\n        return 0;\n    }\n    var count = 0;\n    for (i in tuplex) {\n        if (tuplex[i] == value) {\n            count = count + 1;\n        }\n    }\n    return count;\n}","language":"kotlin"}
{"task_id":"MBKP\/930","completion":"    return \"Not matched!\"\n}","language":"kotlin"}
{"task_id":"MBKP\/931","completion":"    var sum : Int = 0\n    for (i in 1 to number) {\n        sum += (i * (i+1) * (i+2))\n    }\n    return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/932","completion":"    return l.distinct()\n}","language":"kotlin"}
{"task_id":"MBKP\/933","completion":"    val snake = text.replaceAll(\"(.)(\\\\p{Upper})\", \"$1_$2\")\n        .replaceAll(\"([a-z0-9])([A-Z])\", \"$1_$2\")\n        .replaceAll(\"([A-Z])([A-Z])\", \"$1_$2\")\n        .toLowerCase()\n\n    return snake\n}","language":"kotlin"}
{"task_id":"MBKP\/934","completion":"    var sum : Int = 0\n    var temp : Int = 1\n    while(sum < n) {\n        temp = temp + 1\n        sum = sum + (temp * temp)\n    }\n    sum = sum - (n * n)\n    var res : Int = 0\n    while(sum > 0) {\n        res = res + temp\n        sum = sum - 1\n        temp = temp + 1\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/935","completion":"        var sum : Int = 0\n        for (i in 1 until number) {\n                sum += (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) * 2\n                i\n        }\n        return sum\n}","language":"kotlin"}
{"task_id":"MBKP\/936","completion":"    return testList.map { item -> item.sortedBy {\n        it.map { ordList.indexOf(it) }\n    } }\n}","language":"kotlin"}
{"task_id":"MBKP\/937","completion":"        val counts = mutable.Map[String,Int]()\n        for (i in str1) {\n                counts[i]++\n        }\n        val maxChar = counts.keys().maxBy { it.length }\n        return maxChar\n}","language":"kotlin"}
{"task_id":"MBKP\/938","completion":"    val aIdx = indexOf(a, p);\n    val bIdx = indexOf(b, q);\n    val cIdx = indexOf(c, r);\n    val aSize = size(a);\n    val bSize = size(b);\n    val cSize = size(c);\n    if (aIdx < aSize && bIdx < bSize && cIdx < cSize) {\n        if (aIdx < bIdx && bIdx < cIdx) {\n            return b;\n        } else if (aIdx < cIdx && cIdx < bIdx) {\n            return c;\n        } else {\n            return a;\n        }\n    } else if (aIdx < aSize && aIdx < cIdx) {\n        return a;\n    } else if (bIdx < aSize && bIdx < cIdx) {\n        return b;\n    } else {\n        return c;\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/939","completion":"    val result = models.sorted(\n        comparingBy<Map<String, Any>, String>(it.get(\"make\")),\n        comparingBy<Map<String, Any>, String>(it.get(\"model\")),\n        comparingBy<Map<String, Any>, String>(it.get(\"color\"))\n    )\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/940","completion":"    val h = new Array(arr.size())\n    val n = arr.size()\n    h[0] = arr[0]\n    val i = 0\n    while i < n :\n        int j = (i + 1) >> 1\n        while j < n :\n            if (arr[j] < h[i]) {\n                h[i] = arr[j]\n                arr[j] = h[i]\n            }\n            j += 1\n        i += 1\n    for (i = n - 1; i >= 0; i--) {\n        arr[i] = h[i]\n    }\n    return arr\n}","language":"kotlin"}
{"task_id":"MBKP\/941","completion":"    var count = 0\n    for (i in num) {\n        if (num[i] == (num[i])) {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}","language":"kotlin"}
{"task_id":"MBKP\/942","completion":"    for (i in testTup) {\n        for (j in checkList) {\n            if (testTup[i] == checkList[j])\n                return true\n        }\n    }\n    return false\n}","language":"kotlin"}
{"task_id":"MBKP\/943","completion":"    val result : List<Int> = ArrayList()\n\n    if (num1.size > num2.size) {\n        num1 = num1.subList(num1.size - num2.size, num1.size)\n    } else if (num2.size > num1.size) {\n        num2 = num2.subList(num2.size - num1.size, num2.size)\n    }\n\n    val heap = Queue.empty<Int>()\n    heap.enqueue(num1.size)\n    heap.enqueue(num2.size)\n\n    while (!heap.isEmpty()) {\n        var n1 : Int = heap.dequeue()\n        var n2 : Int = heap.dequeue()\n\n        if (n1 == 0) {\n            result.add(num2.removeAt(0))\n        } else if (n2 == 0) {\n            result.add(num1.removeAt(0))\n        } else if (n1 > n2","language":"kotlin"}
{"task_id":"MBKP\/944","completion":"    var count = text.length\n    var position = 0\n    while(text[position] != ' '){\n        position++\n    }\n    return position\n}","language":"kotlin"}
{"task_id":"MBKP\/945","completion":"    val setOfTuples = mutableSetOf<List<String>>(t)\n    setOfTuples.removeAll(listOf())\n    return setOfTuples.map { list -> immutableSetOf(list.toTypedArray()) }\n}","language":"kotlin"}
{"task_id":"MBKP\/946","completion":"    var counter : Map<Char, Int> = HashMap()\n    for (i <- 0 until a) {\n        counter[s[i]]++\n    }\n\n    val result : List<List<Any>> = List()\n    val maxCount = Collections.max(counter.values())\n    for (key, value) {\n        if (value == maxCount) {\n            result.append(List(key, value))\n        }\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/947","completion":"    val s = list1.sortedBy { it.length }\n    return (s.head || \"no-word\").length\n}","language":"kotlin"}
{"task_id":"MBKP\/948","completion":"    val item = 0\n    if (index >= 0) {\n        item = tup1.get(index)\n    } else {\n        item = tup1.get(tup1.size() + index)\n    }\n    return item.toString()\n}","language":"kotlin"}
{"task_id":"MBKP\/949","completion":"    return testList.map {\n        x -> {\n            val sumDigits = x.reduce { it.sum() }\n            return (\n                x.sort { it -> it.toString().length - sumDigits },\n                x.toString()\n            )\n        }\n    }.foldRight {\n        (x, y) -> \"(\" + x + \", \" + y + \")\"\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/950","completion":"    \/\/ write your code here\n    var zodiacs = [\"Capricorn\", \"Aquarius\", \"Pisces\", \"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\", \"Libra\", \"Scorpio\", \"Sagittarius\", \"Capricorn\", \"Aquarius\", \"Pisces\", \"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\", \"Libra\", \"Scorpio\", \"Sagittarius\"]\n    var zodiacSigns = [\"Capricorn\", \"Aquarius\", \"Pisces\", \"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\", \"Libra\", \"Scorpio\", \"Sagittarius\"]\n    var yearIndex = (year - 1) % 12\n    return zodiacSign","language":"kotlin"}
{"task_id":"MBKP\/951","completion":"    var res = []\n    for (i in 0..testList1.size - 1) {\n        for (j in 0..testList2.size - 1) {\n            if (testList1[i].size == testList2[j].size) {\n                res.add(testList1[i])\n                res.add(testList2[j])\n            }\n        }\n    }\n    return res\n}","language":"kotlin"}
{"task_id":"MBKP\/952","completion":"    if (n == 0) return 0;\n    if (r == 0) return 1;\n    if (r < 0) return 0;\n    if (n < 0) return 0;\n    if (n < r) return ncrModP(n, r - 1, p);\n\n    return ncrModP(n - r, r, p) * p % p\n}","language":"kotlin"}
{"task_id":"MBKP\/953","completion":"    var min : Int = 0\n    var freq : Array<Int> = arrayList(n, 0)\n    var set : Array<Int> = arrayListOf(n, 0)\n    \n    for (i in 0 until ar.size) {\n        if (freq[ar[i]] == 0) {\n            min++\n        }\n        freq[ar[i]] += 1\n    }\n    \n    for (i in 0 until min) {\n        freq[i] -= 1\n        set[freq[i]] = ar[i]\n    }\n    \n    return min\n}","language":"kotlin"}
{"task_id":"MBKP\/954","completion":"    if (saleAmount > actualCost) {\n        return actualCost - saleAmount;\n    }\n    return null\n}","language":"kotlin"}
{"task_id":"MBKP\/955","completion":"    var sum : Int = 0\n    for (i in 0 until n) {\n        sum += (i * (i + 1))\n    }\n    return sum > n\n}","language":"kotlin"}
{"task_id":"MBKP\/956","completion":"    val pattern = \"\"\"[A-Z]+\"\"\"\n    val matcher = Pattern.compile(pattern).matcher(text)\n    val result = []\n    while (matcher.find()) {\n        result.add(text.substring(matcher.start(), matcher.end()))\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/957","completion":"    var i = n.bitLength() - 1\n    var lastSetBit : Int = 0\n    while (i >= 0) {\n        if (n.bitAt(i) == 1) {\n            lastSetBit = i\n        }\n        i -= 1\n    }\n    return lastSetBit\n}","language":"kotlin"}
{"task_id":"MBKP\/958","completion":"    return ???\n}","language":"kotlin"}
{"task_id":"MBKP\/959","completion":"    return (\n        lst\n            .map { it.toLong() }\n            .sum \/ lst.size\n    ).toDouble()\n}","language":"kotlin"}
{"task_id":"MBKP\/960","completion":"    \/\/ your code here\n}","language":"kotlin"}
{"task_id":"MBKP\/961","completion":"    if (s.length == 0)\n        return 0\n\n    val v = new val[s.length + 1]\n\n    v[0] = 0\n    v[1] = 1\n    for (i in 0 until s.length) {\n        \/\/ skip the ones that don't work\n        if (s[i] != 'I' && s[i] != 'V' && s[i] != 'X' &&\n            s[i] != 'L' && s[i] != 'C' && s[i] != 'D' && s[i] != 'M') {\n            v[i + 1] = v[i]\n        } else {\n            \/\/ take the 2nd to the last (if exists)\n            v[i + 1] =\n                { 'I' -> 1,\n                  'V' -> 5,\n                  'X","language":"kotlin"}
{"task_id":"MBKP\/962","completion":"    return (r-l)*3 \/\/ return the sum of all even natural numbers within the range l and r\n}","language":"kotlin"}
{"task_id":"MBKP\/963","completion":"    val (x1, y1, z1) = Int(x), Int(y), Int(z)\n\n    \/\/ Your code here\n    return nil\n}","language":"kotlin"}
{"task_id":"MBKP\/964","completion":"    var word : String = s.trim()\n    return word.length % 2 == 0\n}","language":"kotlin"}
{"task_id":"MBKP\/965","completion":"    return text.replaceAll(\/[A-Z]\/g, $0 -> \"_\"+$0.toLowerCase())\n}","language":"kotlin"}
{"task_id":"MBKP\/966","completion":"    return tuple1.map { \n        x -> if (x.isEmpty) {\n            List()\n        } else {\n            x\n        }\n    }\n}","language":"kotlin"}
{"task_id":"MBKP\/967","completion":"    if (string.contains(\"a\") && string.contains(\"e\") && string.contains(\"i\") && string.contains(\"o\") && string.contains(\"u\")) {\n        return \"accepted\";\n    }\n    return \"not accepted\";\n}","language":"kotlin"}
{"task_id":"MBKP\/968","completion":"    return n - (a < 0 ? -a : a) % n + (a < 0 ? n : 0)\n}","language":"kotlin"}
{"task_id":"MBKP\/969","completion":"    var result = []\n\n    var previous = -1\n    for (i in testList) {\n        var firstElement = testList[i][0]\n        if (firstElement == previous) {\n            result.append(testList[i])\n        }\n        else {\n            previous = firstElement\n            result = [testList[i]]\n        }\n    }\n\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/970","completion":"    return x > y ? y : x\n}","language":"kotlin"}
{"task_id":"MBKP\/971","completion":"    var i : Int = 0\n    var result : Int = 0\n    var d : Int = 0\n    while (i < n) {\n        d = 0\n        while (i + d + a + 1 <= n && d < a) {\n            d++\n        }\n        result += d\n        while (i + d + b + 1 <= n && d < b) {\n            d++\n        }\n        result += d\n        while (i + d + c + 1 <= n && d < c) {\n            d++\n        }\n        result += d\n        i += d + 1\n    }\n    return result\n}","language":"kotlin"}
{"task_id":"MBKP\/972","completion":"    var resultTup = mutableListOf<Int>()\n    var tuple1 = testTup1\n    var tuple2 = testTup2\n    if (tuple1 != null && tuple2 != null && tuple1.size == tuple2.size) {\n        tuple1.foreach { i1 ->\n            tuple2.foreach { i2 ->\n                resultTup += mutableListOf<Int>(i1, i2)\n            }\n        }\n    }\n    return resultTup\n}","language":"kotlin"}
{"task_id":"MBKP\/973","completion":"    if (d == 0)\n        return s\n    \/\/ s.substring(0, d) + s.substring(d, s.length)\n    \/\/ s.substring(d) + s.substring(0, d)\n    return s.substring(d) + s.substring(0, d)\n}","language":"kotlin"}
{"task_id":"MBKP\/974","completion":"    var cache = a.map { a.map { } }\n\n    return a.foldLeft {\n        0\n    } {\n        a.map {\n            (x, y) ->\n                (cache.get(x).getOrElse(y, 0) + x < 0 ? 0 : cache.get(x).getOrElse(y, 0) + x) + y\n        }\n    }\n}","language":"kotlin"}
