{"task_id":"MBRBP\/1","completion":"  return cost[m][n]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/2","completion":"  return filter { test_tup1.include?(test_tup2) }\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/3","completion":"  return n%2 == 0 || n%3 == 0 || n%5 == 0 || n%7 == 0 || n%11 == 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/4","completion":"  # Your code here\n  pass\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/5","completion":"  return n * (n - 1) * (n - 2)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/6","completion":"  return a ^ b & (a ^ b) == 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/7","completion":"  return text.gsub(\/[^\\w\\s]|(.){4,}\/gi, \"|\")\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/8","completion":"  return nums.map(lambda num: num * num)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/9","completion":"  counter = 0\n  previous = str[0]\n  for character in str\n    if character == previous\n      counter += 1\n    else\n      counter = 1\n      previous = character\n    end\n  end\n  counter = counter % length(str)\n  counter = length(str) - counter % length(str)\n  return counter\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/10","completion":"  list2 = []\n  list1.sort()\n  for i in range(0, n)\n    if i != (n - 1)\n      list2.append(list1[i])\n    else\n      list2.append(list1[i + 1])\n  return list2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/11","completion":"  if !s.include?(ch)\n    return s\n  [s, s_] = [s, s[1..-1]]\n  return s\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/12","completion":"    arr = []\n    for i in m:\n        arr += i\n    arr.sort(cmp=lambda a,b: a[0]+b[0])\n    return arr\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/13","completion":"  nwords = {}\n  for word in words\n    # count up occurrences\n    if word in nwords\n      nwords[word] += 1\n    else\n      nwords[word] = 1\n    end\n  end\n  # put most common words first\n  return Object.values.sort { |i| i[1] }.reverse.map { |i| [[k, nwords[k]]] }.flatten\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/14","completion":"  volume = l * b * h\n  return volume\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/15","completion":"  words = text.split\n  result = []\n  while words do\n    result << words.pop.to_a.gsub(\"(?<=[a-z])(?=[A-Z])\", \" \")\n  end\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/16","completion":"  return \"Not matched!\" unless text.match \/^([a-z])_*[a-z]$\/\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/17","completion":"\treturn a * 4\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/18","completion":"  return string.gsub!(\/[^a-z]\/), second_string\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/19","completion":"  nums = []\n  for i in arraynums\n    if i not in nums\n      nums.push(i)\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/20","completion":"  if x % 5 == 0 and x % 3 != 0 then\n    true\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/21","completion":"    [i for i in range(1, m*n+1) if i % n == 0]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/22","completion":"  if (length(nums) == 0) {\n    # empty set\n    return -1\n  }\n\n  firstDuplicate = -1\n\n  for num in nums\n    if (num == nums[num - 1])\n      firstDuplicate = num\n\n  return firstDuplicate\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/23","completion":"  list2 = list1.sort(&:last)\n  sum = 0\n  for i in 0..list1.length\n    sum = (sum + list1[i].last) > (sum + list2[i].last) ? (sum + list1[i].last) : (sum + list2[i].last)\n  end\n  sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/24","completion":"\treturn int(binary, 2)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/25","completion":"  my_hash = {}\n\n  arr.each do |x|\n    my_hash[x] ||= 1\n    my_hash[x] += 1\n  end\n\n  sum = 0\n  for k,v in pairs(my_hash) do\n    sum += (n - v) * k\n  end\n\n  return sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/26","completion":"    return test_list.all?(test_list.map(lambda e: len(e) == k).all?)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/27","completion":"    return [ x.strip.to_s.digits ]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/28","completion":"  binomial = 1\n  for i in range(1, k + 1)\n    binomial = binomial * (n - (k - i)) \/ i\n  end\n  return binomial\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/29","completion":"\tarr_len = length arr\n\tarr_idx = 0\n\n\tfor arr_idx < arr_len\n\t\tarr_val = arr[arr_idx]\n\t\tarr_idx += 1\n\n\t\tarr_len = arr_size\n\t\tarr_idx = 0\n\n\t\twhile arr_len > 0\n\t\t\tif arr_val == arr[arr_idx]\n\t\t\t\tarr_idx += 1\n\t\t\tend\n\t\t\tarr_len -= 1\n\t\tend\n\tend\n\n\tarr_idx -= 1\n\n\treturn arr_idx\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/30","completion":"  # This function will return the number of substrings with equal end characters in the string.\n  # Substrings are defined by 1 or more characters in the string.\n  # If two or more substrings have the same number of characters, then they all have equal end characters.\n  # For example, if \"abcda\" has three substrings with same number of characters, then they are:\n  # \"abc\", \"cda\", and \"ada\".\n  #\n  # To make this function works correctly, it should accept a string of length > 0.\n\n  # Start writing your code here.\n  count = 0\n  for i in 0..(end of s - 1)\n    for j in 0..end of s - (i + 1)\n      if s[i] = s[j+1] then increment count\n      end\n    end\n  end\n  return count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/31","completion":"    nums.each do |n|\n        hq.enqueue [n]\n    end\n    nums.each do |n|\n        if hq.size() > k\n            hq.dequeue\n        end\n    end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/32","completion":"    result = 1\n\n    while n > 1\n        result = result + 1\n        if n % result == 0\n            n = n \/ result\n        else\n            result = 1\n\n    return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/33","completion":"\treturn bin(n)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/34","completion":"  idx = 0\n  for i in range(n-1):\n    if ar[idx] == ar[i+1]:\n      idx += 1\n    else:\n      return ar[i+1]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/35","completion":"  rect_num = (1+n)*(n+1)\/\/2\n  rect_num\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/36","completion":"  d = digit_count(q, p)\n  numerator = p * d + q\n  denominator = p * d\n  denominator = denominator * 10\n  denominator = denominator % denominator\n  denominator = denominator + n\n  denominator = denominator % denominator\n  numerator = numerator + denominator\n  numerator = numerator % numerator\n  return int(numerator \/ denominator)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/37","completion":"  mixed_list.sort\n  mixed_list.each_with_index do |index, value|\n    mixed_list[index]\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/38","completion":"  list1.each_with_index do |i, v|\n    if v % 2 == 0\n      if i % 2 == 0\n        v1 = v \/ 2\n        i1 = i \/ 2\n        v2 = v1 - 1\n        i2 = i1 - 1\n        list2 = [v1, v2, i1, i2]\n        list2.each_with_index do |i2, v2|\n          if v2 == 0\n            return v2\n          else\n            v2\n      else\n        v2 = v \/ 2\n        i2 = i \/ 2\n        list2 = [v, v2, i, i2]\n        list2.each_with_index do |i2, v2|\n          if v2 == 0\n            return v2\n          else\n            v2\n    else\n      v2 = v \/ 2\n      i2 = i \/ 2\n     \nend\n","language":"ruby"}
{"task_id":"MBRBP\/39","completion":"  a = \"\"\n  for i in range(1, len(s))\n    if s[i] != s[i - 1]\n      a += s[i - 1]\n      a += s[i]\n    end\n  a += s[len(s) - 1]\n  return a\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/40","completion":"  nums.group_by(&:first).map { |x| [x.first] }.keys.map { |k| [k] }.inject([], [nums.group_by(&:first).map { |x| x.last }.keys.count])\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/41","completion":"  res = []\n  nums.each_with_index do |n, i|\n    if i % 2 == 0\n      res.append(n)\n    end\n  end\n  return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/42","completion":"  repeat_times = []\n  sum = 0\n  for i in 0 until arr.length\n    repeat_times << arr[i]\n  end\n  sum = repeat_times.sum(n)\n  return sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/43","completion":"\ttext.gsub(\/([a-z]+_)(?=([a-z]+))\/)\n\treturn \"Not matched!\" if text.empty?\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/44","completion":"\t# <code>\n\t\n\tif text.startswith(\"python\"):\n\t\treturn \"Found a match!\"\n\telse:\n\t\treturn \"Not matched!\"\n\t# <\/code>\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/45","completion":"    n = l.length\n    m = l[0]\n\n    while(m)\n        m = l[--n]\n\n    return m\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/46","completion":"  # Your code here\n  return true\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/47","completion":"  return math.ceil(math.log(b)\/math.log(a))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/48","completion":"  mask = 1 << (n.bit_length() - 1)\n  return (n ^ mask)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/49","completion":"  return nums.map { |i| i[n] }\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/50","completion":"  input_list.sort(key = lambda x: x.length)\n  return input_list[0]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/51","completion":"  if x == y == z\n    \"It is equilateral!\"\n  else\n    \"It is not equilateral!\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/52","completion":"    return b * h<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/53","completion":"  return \"Not Equal\" if str[0] != str[str.length - 1] else \"Equal\"<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/54","completion":"\tcounting_list = []\n\tmax_value = max(my_list)\n\tfor i in range(max_value+1):\n\t\tcounting_list.append(0)\n\n\tfor i in my_list:\n\t\tcounting_list[i] += 1\n\n\toutput_list = []\n\tfor i in range(max_value+1):\n\t\tfor j in range(counting_list[i]):\n\t\t\toutput_list.append(i)\n\n\treturn output_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/55","completion":"  pn = 1\n  pn = (pn * a) % n\n  for i = 2; i < r; i += 1\n    pn = (pn * a) % n\n    return pn\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/56","completion":"  n2 = n * (-1) ** n\n  return n == n2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/57","completion":"  arr.sort\n  last_digit = arr.pop(0)\n  result = 0\n  while arr.length > 0\n    digit = arr.pop(0)\n    result = (last_digit * 10) + digit\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/58","completion":"    return x * x - y * y < 0<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/59","completion":"\tn = (n - 1) * (3 * n - 1) \/ 2\n\tn = n + 1\n\tn.to_i\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/60","completion":"  a.sort\n  i = 0\n  j = 1\n  max = 1\n  while j <= len do\n    if n - arr[j] == arr[i] do\n      max = max + 1\n      i = j\n    else\n      j = j + 1\n  end\n  return max\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/61","completion":"  result = 0\n  length = length_of(s)\n  for i in 0..length-n\n    result += count(s, i, i+n)\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/62","completion":"  val = xs[0]\n  for x in xs\n    val = x if x < val else val\n  end\n  return val\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/63","completion":"  test_list.sort()\n  d = test_list[1][0] - test_list[0][0]\n  for i in range(1, test_list.count)\n    if test_list[i][0] - test_list[i-1][0] > d\n      d = test_list[i][0] - test_list[i-1][0]\n  return d\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/64","completion":"  # Implement the above function\n  subjectmarks.sort(key=lambda x: x[1])\n  return subjectmarks\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/65","completion":"    if data_list\n        return 0 + recursive_list_sum(data_list[:1]) + recursive_list_sum(data_list[2:])\n    else\n        return 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/66","completion":"  length = 0\n  for item in list\n    if item > 0\n      length += 1\n  end\n  return length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/67","completion":"    n = (n*n) \/ 2\n    return n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/68","completion":"    if a.length == 1:\n        return true\n    if a[0] < a[1]\n        return is_monotonic(a[1: -1])\n    else\n        return is_monotonic(a[1: -1])\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/69","completion":"  # Your code here\n  pass\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/70","completion":"  # base case\n  if input.length == 0:\n    return \"All tuples have same length\"\n\n  # recurse\n  output = get_equal(input[1:], k)\n  if output is \"All tuples have same length\":\n    return output\n  elif output is \"All tuples do not have same length\":\n    return \"All tuples have same length\"\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/71","completion":"  if (length(nums) < 2)\n    return nums\n\n  n = [nums.pop(0)]\n  sorted_list = n + comb_sort(nums)\n\n  idx = 0\n  while idx < length(sorted_list)\n    if sorted_list[idx] < n[0]\n      idx += 1\n      continue\n    idx += 1\n    sorted_list.insert(idx, n.shift())\n\n  return sorted_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/72","completion":"  return (n * (n + 1)) == (n * (2 * n + 1))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/73","completion":"\tresult = text.split(\/(\\W+)\/)\n\treturn result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/74","completion":"\tpattern = {}\n\tfor x in patterns\n\t\tpattern[x] = 1\n\ti = 0\n\twhile i < len(colors)\n\t\tif colors[i] not in pattern or pattern[colors[i]] == 0\n\t\t\treturn False\n\t\tpattern[colors[i]] -= 1\n\t\ti += 1\n\treturn True\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/75","completion":"  result = []\n  for t in test_list:\n    for i in t:\n      if (i % k) != 0:\n        break\n    else:\n      result.append(t)\n  return result\n\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/76","completion":"  res = 0\n  for i in 1..m\n    for j in 1..n\n      res = i * i + j * j\n      break unless @squares.include?(res)\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/77","completion":"  odd = 0\n  even = 0\n  while n > 0\n    even = even + n % 10\n    odd = odd + (n % 10)\n    n = n \/ 10\n  return odd > even\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/78","completion":"  \"\"\"\n  >>> count_with_odd_setbits(5)\n  3\n  >>> count_with_odd_setbits(10)\n  5\n  >>> count_with_odd_setbits(15)\n  8\n  \"\"\"\n  # Your code here\n  return bin(n).count('1') - 1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/79","completion":"  length = 0\n  while s[length] != nil\n    length += 1\n  if length % 2 == 0\n    false\n  else\n    true\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/80","completion":"  # get the sum of the even terms\n  even = 3 * n * (n + 1)\n  # get the sum of the odd terms\n  odd = (n + 1) * (3 * n + 1)\n  # return the sum of the even and odd terms\n  return even + odd\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/81","completion":"  tup1 = []\n  tup2 = []\n  for i in range(0, test_tup1.length):\n    tup1.append([test_tup1[i], test_tup2[i]])\n  for j in range(0, test_tup2.length):\n    tup2.append([test_tup1[j], test_tup2[j]])\n  return tup1, tup2\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/82","completion":"  return 4.0 * (3.14 * r ** 3)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/83","completion":"    return string.join(strr)<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/84","completion":"  n = n + 1\n  next(n)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/85","completion":"  (4*3.14159265359)**(2)*r*r\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/86","completion":"  return ((3*n - 1)\/2)**2 * 6*n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/87","completion":"    sorted_keys = sorted(dict1.keys() + dict2.keys() + dict3.keys())\n    sorted_values = [dict1[k] if k in dict1 else None for k in sorted_keys] + [dict2[k] if k in dict2 else None for k in sorted_keys] + [dict3[k] if k in dict3 else None for k in sorted_keys]\n    result = {}\n    for i in xrange(0, len(sorted_keys), 3):\n        result[sorted_keys[i]] = sorted_values[i]\n    return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/88","completion":"\tres = {}\n\tfor x in list1\n\t\tif x in res\n\t\t\tres[x] += 1\n\t\telse\n\t\t\tres[x] = 1\n\treturn res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/89","completion":"  smaller = smaller_num(n)\n  if smaller == n\n    return n\n  return smaller\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/90","completion":"    length = 0\n    if list1 == nil then\n        return 0\n    end\n    for i in 0..<list1.length\n        if list1[i] == \" \" then\n            length += 1\n        else\n            break\n    end\n    return length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/91","completion":"  str = \"#{\"+str1+\"}\"\n  sub = \"#{\"+sub_str+\"}\"\n  str.gsub(sub)\n  #{red}#{black}#{white}#{green}#{orange}#\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/92","completion":"  num_digits = length(n)\n  num_pairs = num_digits * (num_digits - 1)\n  last_digit = n[num_digits - 1]\n  return (last_digit == 1 || last_digit == 5) && num_pairs == length(n)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/93","completion":"  a^=b\n  return a\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/94","completion":"  min_index = 0\n  for index in range(1, test_list.length):\n    if test_list[index][1] < test_list[min_index][1]:\n      min_index = index\n  return test_list[min_index][0]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/95","completion":"  length = 0\n  lst.each do |sublst|\n    length = length < sublst.length? sublst.length : length\n  end\n  return length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/96","completion":"  return n \/ 2 if n % 2 == 0  else  n \/ 2 + 1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/97","completion":"  list_dict = {}\n  for i in list1\n    if i.all_equal\n      key = i\n    else\n      key = i.last\n      count = 0\n      i.each_with_index do |element, index|\n        if index == length(i) - 1\n          list_dict[key] = count\n        end\n        count += 1\n      end\n    end\n  end\n  return list_dict\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/98","completion":"  numbers.reduce(lambda x,y: x*y, 1\/length(numbers))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/99","completion":"    if n = 0\n        \"\"\n    else if n % 2 == 0\n        decimal_to_binary(n \/ 2)\n    else\n        decimal_to_binary(n \/ 2) + \"0\"\n    end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/100","completion":"  def _next_smallest_palindrome(i, limit)\n    n = limit\n    while i < limit\n      if 10**n == 10**i\n        next = (n + i) \/ 2\n        break\n      next = i + n\n      if next > limit\n        return None\n      if 10**next > 10**i\n        n = next\n      else\n        i = next\n    return 10**(i + n - 1)\n  if num <= 1\n    return 1\n  pals = []\n  i = 0\n  limit = num\n  while 1:\n    i = num\n    n = num\n    while n > limit:\n      n = n \/ 10\n    pal = _next_smallest_palindrome(i, n)\n    if pal == None:\n      break\n    pals.append(pal)\n    num = pal\n    limit = num\n  if len(pals) == \nend\n","language":"ruby"}
{"task_id":"MBRBP\/101","completion":"  arr.sort\n  return [nil] + arr[n + k - 1]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/102","completion":"  return word[0].capitalize() + word.substring(1).camelize().to_s\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/103","completion":"  m = m + n\n  return m \/ 2\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/104","completion":"  new_list = []\n  for sublist in input_list\n    new_list.append(sort(sublist))\n  return new_list\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/105","completion":"  i = 0\n  for x in lst\n    if x\n      i += 1\n    end\n  end\n  return i\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/106","completion":"\tresult = []\n\tfor i in test_list:\n\t\tresult.append(i)\n\tfor i in test_tup:\n\t\tresult.append(i)\n\treturn result<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/107","completion":"  hex = (16 ** 32).to_s\n  return (l..r).times do |i|\n    hex.count(i.to_s).to_i\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/108","completion":"  \"\"\"\n  A function which merges three sorted arrays and returns the sorted list.\n  \"\"\"\n  q = [x for x in merge(num1, num2, num3)]\n  heapify(q)\n  return q\n  # O(N log N + N)\n  # O(N log N)\n  def merge(num1, num2, num3)\n    \"\"\"\n    A function which merges three sorted arrays into a single sorted array.\n    \"\"\"\n    result = []\n    while num1 and num2 and num3\n      if num1[0] < num2[0] and num1[0] < num3[0]\n        result.append(num1.shift())\n      elif num2[0] < num1[0] and num2[0] < num3[0]\n        result.append(num2.shift())\n      else\n        result.append(num3.shift())\n    result += num1 + num2 + num3\n    return result\n    # O(N log N)\n \nend\n","language":"ruby"}
{"task_id":"MBRBP\/109","completion":"  n = (2 * n) - 1  # make it odd\n  return count_rotations(s, n)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/110","completion":"  temp_list = test_list.sort\n  new_list = []\n  i = strt_val\n\n  while i <= stop_val\n    if i not in temp_list\n      new_list.append(i)\n    i = i + 1\n\n  return new_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/111","completion":"  (\n    # find intersection between nested list 1 and nested list 2\n    # loop through each item in each nested list\n    (lambda x, y: (lambda [a, b, c, d, e, f] (lambda y, z: y ? (a, b, c, d, e, f) (y, z) : [x, y, z])) (y, z) [\n      (lambda x, y, z: (lambda y, z : [x, y, z]) (z, (lambda x, y, z: (x & z) [y ^ z])) (y, z))[\n        x in (y or ())\n      ]\n    ])(x, y) for x in nestedlist[0] for y in nestedlist[1]\n  )\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/112","completion":"  diameter * 2 + height * 2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/113","completion":"    if text.isdigit()\n        return True\n    return False\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/114","completion":"  freq = {}\n  for item in test_list\n    if item not in freq\n      freq[item] = 0\n    freq[item] = freq[item] + 1\n  return freq\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/115","completion":"  set = Set.new(list1)\n  for (dict in list1)\n    if dict\n      set.delete(dict)\n  return set.empty?\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/116","completion":"  return int(nums.join(''))\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/117","completion":"  test_list.to_s.gsub(\/[^\\d.]\/g, '').to_a.gsub(\/\\.\/g, '.').to_a.gsub(\/\\,\/g, '.').to_a.gsub(\/\\ +\/g, '')\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/118","completion":"  return list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/119","completion":"  arr = arr.sort\n  arr.uniq\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/120","completion":"\tmax_pair = [max(list1[i],list1[i+1]) for i in range(len(list1)-1)]\n\treturn max_pair[0]*max_pair[1]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/121","completion":"    a.sort\n    for i in a\n        if (i + count >= sum)\n            return true\n    return false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/122","completion":"  n = 2*n + 1\n  if n <= 30\n    smartnumber(n)\n  end\n  puts smartnumber(n)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/123","completion":"  # Find all amicable numbers up to a limit.\n  numbers = [i for i in range(1, limit + 1) if i % sum_of_divisors(i) == 0 and sum_of_divisors(i) != i]\n\n  # Return the sum of the first and last elements of the list.\n  return numbers[0] + numbers[-1]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/125","completion":"    return max(\n        find_length(string[:i], n) + 1 if string[i] == '0' else find_length(string[i+1:], n) + 1 for i in range(0, len(string) - n + 1)\n    )\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/126","completion":"  d1 = divisors(a)\n  d2 = divisors(b)\n\n  sum = 0\n\n  for i in d1\n    for j in d2\n      if i == j\n        sum += i\n\n  sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/127","completion":"  result = x * y\n  print(result)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/128","completion":"\twords = str.split()\n\treturn [w for w in words if len(w) > n]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/129","completion":"    result = true\n    for i in my_matrix:\n        row_sum = 0\n        col_sum = 0\n        for num in i:\n            row_sum += num\n        if row_sum != 15:\n            result = false\n        for num in range(len(i)):\n            col_sum += my_matrix[num][i[num]]\n        if col_sum != 15:\n            result = false\n    return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/130","completion":"  nums.sort\n  prev = nums[0]\n  max_occs = [prev]\n  count = 1\n  for i in nums[1:]\n    if i != prev\n      count = 1\n      prev = i\n    else if i == prev\n      count += 1\n    if count > max_occs[0]\n      max_occs = [count, prev]\n  return max_occs\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/131","completion":"  split_str = str1.split(\"\")\n  result = \"\"\n  for i in split_str\n    if (i == \"a\" || i == \"e\" || i == \"i\" || i == \"o\" || i == \"u\")\n      result += i\n    else\n      result += \"\"\n  return result\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/132","completion":"  result = \"\"\n  for i in range(0, len(tup1))\n    result += (tup1[i])\n  return result\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/133","completion":"  return nums.map(lambda x: -x).sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/134","completion":"  return arr[-n * p + 1] if arr.length % 2 == 0 else \"EVEN\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/135","completion":"    # Calculate the nth hexagonal number\n    (2*n - 1)^2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/136","completion":"  result = 0\n  (units >= 75 and units < 200) ? result = units * 0.5 : result = units * 1.0\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/137","completion":"  n = nums.size\n  return (n - nums.count(0))\/n<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/138","completion":"  #\n  # Base cases\n  #\n  if n == 1\n    true\n  elsif n == 0\n    false\n  #\n  # Recursive step\n  #\n  else\n    0 < n - 1\n      true\n      # n = (2^k)*n\n      # (2^0)*n = n\n      # (2^0)*n == 2^k\n      # 2^k == n\n      # 2^k < n\n      # 2^k > 0\n      # 2^k <= n\n      # (2^k) > (n\/2^k)\n      # 2^k <= n\/2^k\n      # (2^k)*n\/2^k == n\n      # (2^k)*n\/2^k == 2^k\n      # n\/2^k == n - 2^k\n      # n\/\nend\n","language":"ruby"}
{"task_id":"MBRBP\/139","completion":"  circumference = 2*3.14*r\n  return circumference\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/140","completion":"  result = []\n  for element in test_list\n    if is_singly(element)\n      result.append element\n  return result\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/141","completion":"    cur = len(nums)\n    while cur > 1:\n        # Find the maximum number in the list\n        mi = nums.index(max(nums[:cur]))\n        # Find the maximum number (not in the list)\n        ma = nums.index(max(nums[cur:]))\n        # Place numbers in the right order\n        # (with the maximum number first)\n        nums.reverse()\n        nums[mi:cur] = nums[mi:cur][::-1]\n        nums[cur - ma:cur] = nums[cur - ma:cur][::-1]\n        cur -= 1\n        print nums\n    return nums\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/142","completion":"  list1.sort\n  list2.sort\n  list3.sort\n  count = 0\n  i = 0\n  j = 0\n  while i < list1.length and j < list2.length and j < list3.length\n    if list1[i] == list2[j] == list3[j]\n      count += 1\n      i += 1\n      j += 1\n    elsif list1[i] == list2[j]\n      j += 1\n    elsif list2[i] == list3[j]\n      j += 1\n  return count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/143","completion":"  list = []\n  for i in 0..max(input)\n    if input[i].size % 2 == 0\n      if input[i].size > 1\n        list << input[i]\n      end\n    end\n  end\n  return list.size\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/144","completion":"  diff = 0\n  for i in arr\n    diff += arr.index(i) - arr.index(i+1)\n  return diff\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/145","completion":"  1 + (arr.last - arr.first)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/146","completion":"  # Your code goes here\n  return 0\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/147","completion":"    # Write your code here\n    return -1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/148","completion":"  sum = 0\n  while (n > 0)\n    sum += n % 10\n    n = n \/ 10\n  return sum\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/149","completion":"    longest_subseq = 0\n    longest_subseq_length = 0\n    i = 0\n    while i < n:\n        if arr[i] == arr[i-1]:\n            i += 1\n            continue\n        j = i\n        seq_start = i\n        seq_end = i\n        while j < n and arr[j] == arr[j - 1]:\n            j += 1\n        if j - seq_start > longest_subseq_length + 1:\n            longest_subseq = seq_start\n            longest_subseq_length = j - seq_start\n        else if j - seq_start == longest_subseq_length + 1:\n            longest_subseq = seq_start if seq_start > longest_subseq else longest_subseq\n            longest_subseq_length = j - seq_start\n        i = j\n    return longest_subseq_length - 1\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/150","completion":"  return (a != b) and (a != c) and (b != c)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/151","completion":"  return x % y == 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/152","completion":"    if len(x) <= 1\n        return x\n    mid = len(x) \/ 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/153","completion":"  return [(-b + sqrt(pow(b, 2) - 4 * a * c))\/2 * a, (-b - sqrt(pow(b, 2) - 4 * a * c))\/2 * a]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/154","completion":"  result = []\n  for i in nums\n    if i[n]\n      result << i[n]\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/155","completion":"  return 0 if n == 0 else (n & ~0x01)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/156","completion":"{\n    ## your code\n    return\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/157","completion":"{\n    return;\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/158","completion":"  s = set.new(arr)\n  if arr.length == n and len(s) == k\n    return 0\n  elif arr.length == n - k + 1\n    return -1\n  else\n    return arr.length - k\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/159","completion":"\tmonth = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\tif month[days-1] == \"December\":\n\t\treturn \"winter\"\n\tif month[days-1] == \"January\":\n\t\treturn \"spring\"\n\tif month[days-1] == \"February\":\n\t\treturn \"summer\"\n\tif month[days-1] == \"March\":\n\t\treturn \"autumn\"\n\tif month[days-1] == \"April\":\n\t\treturn \"winter\"\n\tif month[days-1] == \"May\":\n\t\treturn \"spring\"\n\tif month[days-1] == \"June\":\n\t\treturn \"summer\"\n\tif month[days-1] == \"July\":\n\t\treturn \"autumn\"\n\tif month[days-1] == \"August\":\n\t\treturn \"winter\"\n\tif month\nend\n","language":"ruby"}
{"task_id":"MBRBP\/160","completion":"    if a * b == n:\n        return [\"x = \", a, \", y = \", b]\n    else:\n        return \"No solution\"<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/161","completion":"\tlist1 = filter(lambda x: x not in list2, list1)\n\tlist1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/162","completion":"  sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  end\n  return sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/163","completion":"  s * l\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/164","completion":"  \"\n  Given two natural numbers n1 and n2\n  Return true if n1 and n2 are equivalent\n  \"\n  # n1, n2 must be integers\n  # n1 < n2\n  n1, n2 = [int(x) for x in (n1, n2)]\n\n  # n1 and n2 must be positive\n  if n1 < 0 or n2 < 0\n    return false\n\n  # Find the sum of divisors\n  s = [d for d in range(1, n2+1) if n1 % d == 0 and n2 % d == 0]\n  # Now find the sum of their product\n  s = [d*n1 for d in s]\n  return sum(s) == n2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/165","completion":"  count = 0\n  for ch in str1\n    count += (ch == ch.to_s).length\n  end\n  return count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/166","completion":"  a.each_pair do |a,b|\n    even_pair = a ^ b\n    if even_pair == n\n      # print pairs\n      puts a, b\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/167","completion":"  n = n - 1 if n % 2 == 0 else n + 1\n  return n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/168","completion":"  length = count = 0\n  for i in a\n    if i == x\n      length += 1\n    end\n    if count == length\n      count = 0\n    end\n    count += 1\n  end\n  length = count = 0\n  for i in a\n    if i != x\n      length += 1\n    end\n    if count == length\n      count = 0\n    end\n    count += 1\n  end\n  return length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/169","completion":"    res = 0\n    i = 1\n    while i <= n\n        i = i + 1\n        res = res + 1\n    end\n    return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/170","completion":"  num1 = 0\n  for i in 0..n-1\n    num1 = num1 + list1[i]\n  end\n  num2 = 0\n  for i in m..n-1\n    num2 = num2 + list1[i]\n  end\n  return num1 + num2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/171","completion":"    return 5 * a * a\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/172","completion":"    a = s.split(\"std\")\n    return a.length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/173","completion":"  text.gsub(\/[^\\w]\/g, '')\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/174","completion":"  hash = {}\n  for keyvalue in l\n    key = keyvalue[0]\n    value = keyvalue[1]\n    if key not in hash\n      hash[key] = []\n    hash[key] << value\n  return hash\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/175","completion":"  return (str1.match(\/\\(\\)|\\[\\]|\\{\\}\/)) ? true : false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/176","completion":"  0.5 * a * (b + c)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/177","completion":"  # Find gcd\n  gcd = []\n  gcd << [l,r]\n  gcd.sort\n\n  # Find lcm\n  lcm = 0\n  while (lcm <= r):\n    if (lcm % gcd[0] == 0) and (r % gcd[1] == 0):\n      return [lcm \/ gcd[0], r \/ gcd[1]]\n    lcm += 1\n  return nil\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/178","completion":"  for i in patterns\n    if strings.gsub(i, text)\n  end\n  \"Matched!\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/179","completion":"  is_even = x % 2 == 0\n  is_odd = not is_even and (x % 3 == 0)\n  return is_even or is_odd\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/180","completion":"    # convert degrees to radians\n    slat = math.radians(slat)\n    slon = math.radians(slon)\n    elat = math.radians(elat)\n    elon = math.radians(elon)\n\n    # calculate distance using formula\n    distance = 6371 * acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon))\n\n    # convert to miles\n    distance = distance * 0.621371\n    return distance\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/181","completion":"\tarr.sort()\n\tcommon_prefix = \"\"\n\ti = 0\n\twhile i < n - 1 and arr[i][n - 1] == arr[i + 1][n - 1]\n\t\tcommon_prefix += arr[i][n - 1]\n\t\ti += 1\n\treturn common_prefix\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/182","completion":"  character_list = []\n  uppercase_regex = \/[A-Z]\/\n  lowercase_regex = \/[a-z]\/\n  special_regex = \/[!@#$%^&*)(+=._-]\/\n  numeric_regex = \/\\d+\/\n  for char in string\n    if uppercase_regex.match(char)\n      character_list << [char]\n    elsif lowercase_regex.match(char)\n      character_list << [char]\n    elsif special_regex.match(char)\n      character_list << [char]\n    elsif numeric_regex.match(char)\n      character_list << [char]\n\n  character_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/183","completion":"  arr.sort\n  return 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/184","completion":"\treturn [x for x in list if x > num]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/185","completion":"    return [-c \/ (2 * b), -b \/ (2 * a)]<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/186","completion":"  # Check each pattern\n  for p in patterns\n    # Check if text contains all of the patterns\n    # if match, return \"Matched!\"\n    if 0 == (text.split % p).length\n      return \"Matched!\"\n  # If no match, return \"Not Matched!\"\n  return \"Not Matched!\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/187","completion":"    x = x.split(' ')\n    y = y.split(' ')\n    # Initialize dp array\n    dp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if x[i - 1] == y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/188","completion":"  1 = n * n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/189","completion":"  arr.include? n == 0\n    if @arr.include? n\n      return n\n    else\n      arr.unshift(n)\n      1\n  else\n    arr.include? n > 0\n      arr.include? n == @arr.sum\n        if @arr.include? n\n          return n\n        else\n          return @arr.sum\n        end\n      end\n    else\n      arr.unshift(n)\n      @arr.sum\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/190","completion":"  return (x1 - x2)*(x1 - x2) + (y1 - y2)*(y1 - y2)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/191","completion":"  monthnumber = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n  if monthnumber.index(monthname3) == 30\n    true\n  else\n    false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/192","completion":"  length = 0\n  for c in str\n    length += c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9'\n    if length > 1\n      return true\n    end\n  end\n  return false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/193","completion":"    new_tup = []\n    for i in test_tup:\n        if not i in new_tup:\n            new_tup.append(i)\n    return new_tup\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/194","completion":"  n.to_i.unpack('y')\n  n.to_i % 8.0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/195","completion":"  if arr == nil || arr.length < n\n    return -1\n  if arr.length == n\n    return arr.index(x)\n  return first(arr.tail, x, n) + 1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/196","completion":"  new_list = []\n  for item in test_list\n    if len(item) != k\n      new_list.append(item)\n  return new_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/197","completion":"    ## your code here\n    pass\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/198","completion":"  d = sqrt(a*a + b*b)\n  c = (a + b + sqrt(2*a*b - 4*a*d))\/2\n  return c + sqrt(c*c - 4*a*b)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/199","completion":"  return -~n & -~n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/200","completion":"  a = []\n  i = 0\n  j = 0\n  @list1.each do |elem|\n    if @i == @j || elem > @list1[@j] then\n      a.push(@j)\n      @i = @j + 1\n    end\n    if elem < @list1[@j] then\n      @j = @j + 1\n    end\n  end\n  a\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/201","completion":"  a = lst.sort()\n  return a == lst\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/202","completion":"  (str1.replace \/\\d+\/g,'')\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/203","completion":"  n1 = n1.to_i\n  n2 = n2.to_i\n  diff = 0\n  while n1 > 0 or n2 > 0\n    if n1 > 0 and n2 > 0\n      diff += n1 & n2\n      n1 = n1 - n1 & -n1\n      n2 = n2 - n2 & -n2\n    else\n      if n1 > 0\n        diff += 1\n        n1 = n1 - 1\n      else\n        if n2 > 0\n          diff += 1\n          n2 = n2 - 1\n    end\n  end\n  diff.to_s\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/204","completion":"  result = 0\n  for ch in s\n    if ch == c\n      result = result + 1\n  end\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/205","completion":"  inversion = 0\n  for i in range(0, len(test_tup)):\n    for j in range(i+1, len(test_tup)):\n      if test_tup[j] < test_tup[i]:\n        inversion += 1\n  return inversion\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/206","completion":"{\n    output = \"\"\n    for (i = 0; i < test_tup.length; i++)\n    {\n        output += test_tup[i] + test_tup[(i+1)%test_tup.length]\n    }\n    return output\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/207","completion":"  i = 1\n  (longest_length, current_length) = (1, 1)\n  current_string = str[:i]\n  while i < str.length\n    if str[i] == current_string[-1]\n      current_length += 1\n    else\n      current_length = 1\n      current_string = str[:i]\n    end\n    longest_length = max(longest_length, current_length)\n    i += 1\n  end\n  return longest_length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/208","completion":"\tres = \/^-?(0|[1-9]\\d*)(\\.\\d*)?([eE][-+]?\\d+)?$\/.match(num)\n\tif res == null\n\t\treturn false\n\telse\n\t\treturn res.group(0) == num\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/209","completion":"  h = nil\n  h = heap[1]\n  a = 0\n\n  heap[1] = a\n\n  a = 1\n\n  heap[a] = h\n\n  while a < (length(heap) - 1)\n    a += 1\n\n    if h < heap[a]\n      h = heap[a]\n\n      heap[a] = heap[1]\n\n      heap[1] = h\n\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/210","completion":"  match = \/a-z|A-Z|0-9\/\n  if match.search(string)\n    true\n  else\n    false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/211","completion":"  return bin(n).count(\"1\") + bin(n).count(\"11\")\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/212","completion":"  n.power_4.sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/213","completion":"  test_tup1 + test_tup2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/214","completion":"  degree = radian * 180 \/ 3.141592653589793\n  return degree\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/215","completion":"    ret = []\n    for i in alist:\n        if type(i) == list:\n            ret += decode_list(i)\n        else:\n            ret.append(i)\n    return ret\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/216","completion":"  list2_length = length(list2)\n  list2_first = first(list2)\n  list2_rest = rest(list2)\n  list2_first_length = length(list2_first)\n\n  if length(list1) > list2_length:\n    return false\n  if length(list2) > list1_length:\n    return false\n  if length(list1) == list2_length:\n    for i in range(0, list2_first_length):\n      if not(rest(list2_first)[i] == rest(list1_first)[i]):\n        return false\n    return true\n  if length(list2) == list1_length:\n    for i in range(0, list1_first_length):\n      if not(first(list2_first)[i] == first(list1_first)[i]):\n        return false\n    return true\n  return false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/217","completion":"  res = \"\"\n  char_set = {}\n  for char in str:\n    char_set[char] = char_set.get(char, 0) + 1\n    if char_set[char] == 2:\n      res = char\n      break\n  return res\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/218","completion":"  c = a-b\n  return c.to_i\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/219","completion":"  min_val, max_val = test_tup[:k], test_tup[:k]\n  for i in range(k, len(test_tup))\n    if test_tup[i] < min_val[0]\n      min_val[0] = test_tup[i]\n    if test_tup[i] > max_val[0]\n      max_val[0] = test_tup[i]\n  return min_val + max_val\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/220","completion":"  return text.gsub(\/\\S{1, n}\\S\/, ':$0')\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/221","completion":"  [n for n in nums if n % 2 == 0][0]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/222","completion":"  test_type = type(test_tuple[0])\n\n  for i in test_tuple[1:]:\n    if type(i) != test_type:\n      return False\n\n  return True\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/223","completion":"  arr_len = arr.length\n  if arr_len < n:\n    return False\n  mid = arr_len \/ 2\n  if arr[mid] == x:\n    return is_majority(arr[mid + 1:], n, x)\n  elif arr[mid] < x:\n    return is_majority(arr[mid + 1:], n, x)\n  elif arr[mid] > x:\n    return is_majority(arr[:mid], n, x)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/224","completion":"  count = 0\n  while n > 0\n    if n & 1\n      count ++\n    n >>= 1\n  end\n  return count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/225","completion":"  min = arr[low]\n  for i in range(low + 1, high + 1)\n    if arr[i] < min\n      min = arr[i]\n  return min\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/226","completion":"  tmp = \"\"\n  for i in 0..str.size-1\n    tmp += chr if (i % 2 == 0) else str[i]\n  end\n  tmp\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/227","completion":"  minimum = min(a, b, c)\n  return minimum if a == minimum else min(minimum, a)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/228","completion":"    bit = 2 ** n - 1\n    while bit != 0\n        bit = bit >> 1\n        if bit >= l and bit <= r\n            return false\n    return true\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/229","completion":"\tarr = arr.sort(lambda x, y: y-x);\n\tprint(arr)\n\tfor i in range(len(arr)):\n\t\tif(arr[i] < 0):\n\t\t\tarr.insert(0, arr.pop(i))\n\t\t\tprint(arr)\n\treturn arr\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/230","completion":"  return str1.gsub(\/\\s\/g, char)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/231","completion":"  arr = tri.to_a\n  (max_sum(arr, n - 1) + max(arr[n], arr[n - 1]))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/232","completion":"  [0..n-1).each do |i|\n    list1.sort_by_key(true, @i)\n    list1.reverse\n    if i + 1 == n\n      list1\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/233","completion":"\treturn (2*3.14*r*r + 2*3.14*r*h + 2*3.14*h*h) + 2*3.14*r*r\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/234","completion":"  return (l**3) * 6\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/235","completion":"  set (n & 1) + (n & 2) + (n & 4) + (n & 8) + (n & 16)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/236","completion":"  n = n - 2\n  result = -1\n  while n >= k:\n    result = n - k\n    n = n - 2\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/237","completion":"  result = {}\n  for a, b in test_list\n    if (a,b) in result\n      result[a,b] += 1\n    else\n      result[a,b] = 1\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/238","completion":"  length = str.length\n  result = 0\n  1.0 \/ length do |i|\n    # Use substring to get substrings of length i\n    result += str.substrings(0, i).size.max\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/239","completion":"  if m == 1 then\n    return 1\n  else\n    return get_total_number_of_sequences(m-1, n) + get_total_number_of_sequences(m, n-1)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/240","completion":"  list1[-1:] = list2\n  return list1\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/241","completion":"    i = 0\n    result = [[ [] for _ in range(m) ] for _ in range(n) ]\n    while i < m\n        for j in range(n)\n            for k in range(o)\n                result[j][k].append('*')\n        i += 1\n    return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/242","completion":"  length = str1.length\n  count = 0\n  i = 0\n  while i < length\n    count = count + 1\n    i = i + 1\n  end\n  return count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/243","completion":"\tsorted = {}\n\tfor item in lst:\n\t\tif item[0] in sorted:\n\t\t\tsorted[item[0]].append(item[1])\n\t\telse:\n\t\t\tsorted[item[0]] = [item[1]]\n\tsorted_lst = []\n\tfor k in sorted:\n\t\tsorted_lst.append([k] + sorted[k])\n\treturn sorted_lst<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/244","completion":"    n = n * n + 1;\n    return (n * n) >> 1;\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/245","completion":"  sum = 0\n  max_sum = 0\n  for i in 0..(n - 1)\n    sum = 0\n    for j in 0..i\n      sum += arr[j]\n      if sum > max_sum\n        max_sum = sum\n    end\n  end\n  return max_sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/246","completion":"    n = number\n    sqrt_n = 0\n    while n > 0:\n        sqrt_n = sqrt_n + (n % 10) * (n % 10)\n        n = n \/ 10\n    return sqrt_n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/247","completion":"    return longestPalindrome(str, 0, str.length-1)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/248","completion":"  return harmonic_sum(n-1) + 1.0 \/ n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/249","completion":"\tarr_nums1 = []\n\tfor i in array_nums1\n\t\tarr_nums1.push(i)\n\tarr_nums2 = []\n\tfor i in array_nums2\n\t\tarr_nums2.push(i)\n\tarray_result = []\n\tfor i in arr_nums1\n\t\tfor j in arr_nums2\n\t\t\tif i == j\n\t\t\t\tarray_result.push(i)\n\treturn array_result<\/s>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/250","completion":"  return [x for x in tup if x == x].length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/251","completion":"  return [element] + list\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/252","completion":"    # Your code here\n    return numbers\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/253","completion":"  length = 0\n  i = 0\n  while(i < <list1.length)\n    if (type(list1[i]) == \"int\")\n      length = length + 1\n    i = i + 1\n  return length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/254","completion":"  result = []\n  for word in text.split(\" \")\n    if word[0] in [\"a\", \"e\"]\n      result.push(word)\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/255","completion":"  combinations = []\n  if n == 0:\n    return combinations\n  for i in range(0, len(l)):\n    new_combinations = combinations_colors(l[i+1:], n - 1)\n    for j in new_combinations:\n      combinations.append([l[i]] + j)\n  return combinations\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/256","completion":"  return (0...n).select{|i| is_prime?}.size\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/257","completion":"  a = a ^ b\n  b = a ^ b\n  a = a ^ b\n  return[a, b]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/258","completion":"  length = 0\n  odd_nums = filter(lambda num: num % 2 != 0, array_nums)\n  length = array_nums.length - length\n  return length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/259","completion":"  if test_tup1[0] > test_tup2[0] or (test_tup1[0] == test_tup2[0] and test_tup1[1] > test_tup2[1])\n    test_tup1\n  else\n    test_tup2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/260","completion":"    prime = 1\n    for i in range(2, n + 1)\n        if prime % i == 0\n            continue\n        else\n            prime = prime * i\n    return prime\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/261","completion":"  result = []\n\n  for each1, each2 in zip(test_tup1, test_tup2):\n    result.append(each1\/each2)\n\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/262","completion":"  list1.sort\n  list1.reverse\n  result = [[], []]\n  while list1.length > 0\n    result[1].unshift(list1.pop()) if list1.length >= l\n    result[0].unshift(list1.pop()) if list1.length >= l\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/263","completion":"  d = {}\n  for k, v in d1.items\n    d[k] = d1[k]\n  for k, v in d2.items\n    if d.has_key? k\n      d[k] += d2[k]\n    else\n      d[k] = d2[k]\n  return d\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/264","completion":"    h_age = h_age * 7.5\n    return h_age\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/265","completion":"    return [[i[j] for i in s[i*step:i*step+step]] for j in range(len(s)\/step + 1)]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/266","completion":"  side = (l * 2) + 1\n  return 6 * l * l + 6 * l * side + side * side\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/267","completion":"  result = 0\n  i = 1\n  while i <= n\n    result = result + (i * i)\n    i = i + 1\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/268","completion":"  stars = 1\n  # TODO: Write your code here\n  while stars <= n\n    stars = stars + (1 + stars) * stars \/ 2\n  return stars\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/269","completion":"  return ord(k)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/270","completion":"  res = 0\n  even = 0\n  odd = 0\n\n  while (arr[n] != 0)\n    if (arr[n] % 2 == 0)\n      even = even + arr[n]\n    else\n      odd = odd + arr[n]\n\n    n = n + 1\n\n  res = even + odd\n\n  return res\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/271","completion":"\treturn 32 if n < 4 else ((n - 1) * (n - 1) + (n - 3) * (n - 3)) * (n \/ 2)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/272","completion":"\tlist_length = test_list.length\n\tif list_length > 0\n\t\tlist_length = list_length - 1\n\t\trear = test_list[list_length][2]\n\t\treturn rear\n\telse\n\t\treturn test_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/273","completion":"    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] - test_tup2[i])\n    return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/274","completion":"  if n < 2\n    return 0\n  else\n    return even_binomial_coeff_sum(n - 1) + binomial_coeff(n, n \/ 2)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/275","completion":"    arr = a.to_a\n    a.length = m\n    for i in range(n):\n        arr.pop\n    return arr.length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/276","completion":"    pi = 3.14\n    return float(pi * r ** 2 * h)<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/277","completion":"  my_dict = {}\n  for key, value in dict.items\n    if value == n\n      my_dict[key] = value\n  end\n  return my_dict\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/278","completion":"    # convert tuple to string\n    # split string into list of chars\n    # count number of chars\n    # return count\n    return 0\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/279","completion":"\tn = n * 10 * 10 + 1\n\td = 1\n\twhile n != 0\n\t\td *= 10\n\t\tn = n - 1\n\tend\n\ttrue\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/280","completion":"  index = 0\n  while (index < dlist.length) {\n    if (dlist[index] == item)\n      return [true, index]\n    else\n      index = index + 1\n  }\n  return [false, index]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/281","completion":"    test_set = set(test_list)\n    return len(test_set) == len(test_list)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/282","completion":"  nums2.each do |n|\n    nums1.map(lambda num1: num1 - n)\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/283","completion":"  frequency = 0\n  for i in n.digits.to_a\n    frequency += (1 if i == n.digits else -1)\n  if frequency <= n.digits\n    true\n  else\n    false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/284","completion":"  return all(item == element for item in list)<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/285","completion":"  if text.match(\/a{2,3}b\/):\n    \"Found a match!\"\n  else:\n    \"Not matched!\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/286","completion":"  return sum_max_repeated(a, 0, n - 1, k)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/287","completion":"  n = n if n > 0 else 0\n  return (n * (n + 1) \/ 2) * (n * (n + 1) \/ 2)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/288","completion":"  (n - p) % arr.length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/289","completion":"  begin\n    (1..n) |> filter {|n| n % 2 == 1}\n  rescue RangeError\n    0\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/290","completion":"  length = 0\n  sub_list = []\n  for i in list1\n    if i.count > length\n      length = i.count\n      sub_list = [i]\n    elsif i.count == length\n      sub_list.push(i)\n  end\n  return sub_list.map(&:to_s)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/291","completion":"  total_ways = 0\n  fence = [[0 for j in range(k)] for i in range(n)]\n  for i in range(n):\n    fence[i][0] = 1\n  for i in range(n):\n    fence[0][i] = 0\n  for i in range(1, n):\n    for j in range(1, k):\n      fence[i][j] = fence[i - 1][j] + fence[i][j - 1]\n      if fence[i][j] > total_ways:\n        total_ways = fence[i][j]\n  return total_ways\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/292","completion":"  return n \/ m\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/293","completion":"  (3 * w) \/ 2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/294","completion":"  max = listval[0]\n  for item in listval\n    if item > max\n      max = item\n  end\n  return max\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/295","completion":"  n = number\n  result = 0\n  for i in 2..n\n    if n % i == 0\n      result += i\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/296","completion":"  arr.sort\n  prev = arr[0]\n  inv = 0\n  for i in 1..n\n    if arr[i] != prev\n      inv = inv + 1\n      prev = arr[i]\n  end\n  return inv\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/297","completion":"    flatten_list_result = []\n    for i in list1:\n        if isinstance(i, list):\n            flatten_list_result = flatten_list_result + flatten_list(i)\n        else:\n            flatten_list_result.append(i)\n    return flatten_list_result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/298","completion":"\tl1.sort()\n\tl2.sort()\n\n\ti = 0\n\tj = 0\n\tresult = []\n\n\twhile( i < len(l1) and j < len(l2)):\n\t\tif l1[i] == l2[j]:\n\t\t\tresult.append(l1[i])\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telif l1[i] > l2[j]:\n\t\t\tj += 1\n\t\telse:\n\t\t\ti += 1\n\n\treturn result\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/299","completion":"{\n    max_score = 0\n    result = [None, None]\n    for item in stdata:\n        score = item[1]\n        if score > max_score:\n            max_score = score\n            result = item\n    return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/300","completion":"  seq = []\n  cnt = 0.0\n  for i in 0..(2^n):\n    # if n = 1:\n    #   s = [0, 1, 0, 0, 1, 1, 0, 0, 0]\n    #   t = [0, 0, 1, 0, 0, 1, 1, 0, 0]\n    #   a = [0, 0, 0, 0, 0, 1, 1, 1, 1]\n    #   b = [0, 0, 1, 0, 1, 1, 1, 1, 0]\n    #   c = [0, 0, 1, 0, 1, 1, 0, 0, 0]\n    # else:\n    s = [0, 0, 0, 0, 0, 0, 0, 0, \nend\n","language":"ruby"}
{"task_id":"MBRBP\/301","completion":"  depth = 0\n  for key, value in pairs(d) do\n    if isa(value, dict) then\n      depth += 1\n    end\n  end\n  depth\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/302","completion":"  if(n < 0)\n    n = n + (1 << 32)\n\n  most_significant_bit_index = 0\n  bit_number = 0\n\n  while(bit_number < 32)\n    if(n & 1)\n      bit_number += 1\n      most_significant_bit_index = bit_number\n    else\n      n = n >> 1\n    end\n\n  return most_significant_bit_index\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/303","completion":"  b = a.copy\n  b.sort\n  return a.length == n && a == b\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/304","completion":"  arr.rotate(ranges.head_index)\n  arr.rotate(rotations)\n  arr.rotate(-ranges.tail_index)\n  arr.rotate(-rotations)\n  arr.rotate(ranges.head_index)\n  arr.rotate(rotations)\n  arr.rotate(-ranges.tail_index)\n  arr.rotate(-rotations)\n  arr.rotate(ranges.head_index)\n  arr.rotate(rotations)\n  arr.rotate(-ranges.tail_index)\n  arr.rotate(-rotations)\n  arr.rotate(ranges.head_index)\n  arr.rotate(rotations)\n  arr.rotate(-ranges.tail_index)\n  arr.rotate(-rotations)\n  arr.rotate(ranges.head_index)\n  arr.rotate(rotations)\n  arr.rotate(-ranges.tail_index)\n  arr.rotate(-rotations)\n  arr.rotate(ranges.head_index)\n  arr.rotate(rotations)\n  arr.rotate(-ranges.tail_index)\n  arr.rotate(-rotations)\n  arr.rotate\nend\n","language":"ruby"}
{"task_id":"MBRBP\/305","completion":"  if words.length > 0\n    # [] || [] || []\n    # [] || [] || ['Python']\n    # ['Python'] || ['Python'] || []\n    # ['Python'] || ['Python'] || ['PHP']\n    # ['Python'] || ['Python'] || ['PHP'] || ['Java']\n    # ['Python'] || ['Python'] || ['PHP'] || ['Java'] || []\n    # ['Python'] || ['Python'] || ['PHP'] || ['Java'] || ['JavaScript']\n    # ['Python'] || ['Python'] || ['PHP'] || ['Java'] || ['JavaScript'] || ['c']\n    # ['Python'] || ['Python'] || ['PHP'] || ['Java'] || ['JavaScript'] || ['c'] || ['c']\n    # ['Python'] \nend\n","language":"ruby"}
{"task_id":"MBRBP\/306","completion":"  prefix_sum = [0] * (n + 1)\n  for i in range(1, n + 1)\n    prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n  dp = [0] * (n + 1)\n  for i in range(1, n + 1)\n    dp[i] = prefix_sum[i]\n    for j in range(i):\n      if (prefix_sum[j] >= prefix_sum[i]) and (j <= index)\n        dp[i] = max(dp[i], dp[j] + a[i - 1])\n  return dp[n]\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/307","completion":"  \"Get a colon of a tuple.\"\n  colonx = []\n  for i in range(m)\n    colonx = colonx << n\n    colonx = colonx + tuplex[i]\n  return colonx\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/308","completion":"\tresult = []\n\tfor i in range(n):\n\t\tresult.append(nums1[i] * nums2[i])\n\tresult.sort(reverse=True)\n\treturn result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/309","completion":"  a = a or 0\n  b = b or 0\n  if a > b\n    return a\n  else\n    return b\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/310","completion":"  if str1.empty?\n    nil\n  elsif str1[0] == '('\n    (a1) = []\n    a1 << str1.chomp\n    a1.each_with_index do |ch, i|\n      if ch == ','\n        (a1) << [ch]\n        a1 << str1.chomp\n      elsif ch == ')'\n        a1 << [ch]\n        a1.reverse\n        return a1\n      end\n      a1 << [ch]\n    end\n  elsif str1[0] == '{'\n    (a1) = []\n    a1 << str1.chomp\n    a1.each_with_index do |ch, i|\n      if ch == ','\n        (a1) << [ch]\n        a1 << str1.chomp\n      elsif ch == '}'\n        a1 << [ch]\n        a1.reverse\n        return a1\n     \nend\n","language":"ruby"}
{"task_id":"MBRBP\/311","completion":"  return n | (~0 << (n.bit_length() - 1))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/312","completion":"  pi = 3.14\n  d = r * r * pi\n  v = d * h \/ 3\n  return v\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/313","completion":"  i = 0\n  result = []\n  while i < (len(list1))\n    if list1[i] > 0\n      result << list1[i]\n    i += 1\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/314","completion":"    max_sum = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            if i == j:\n                continue\n            sum = grid[i][j] + grid[i][j+1] + grid[i][j+2] + grid[i+1][j+1] + grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/315","completion":"  if str.empty?\n    -1\n  else\n    (max_len, cur_len, i) = (0, 0, 0)\n    while i < str.length\n      if cur_len == 0 || str[i] == \" \"\n        cur_len = 1\n      else if cur_len == 1 && str[i] != \" \"\n        cur_len = 2\n      else if cur_len == 2 && str[i] == \" \"\n        cur_len = 0\n      else\n        cur_len = 0\n      if cur_len > max_len\n        max_len = cur_len\n      i += 1\n    end\n    max_len == -1 ? 0 : max_len\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/316","completion":"  last = 0\n  for index, value in pairs(a) do\n    if value == x\n      last = index\n    end\n  end\n  return last\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/317","completion":"\tresult = []\n\tif alist == nil:\n\t\treturn nil\n\telif alist.is_a?(Array):\n\t\tlength = alist.size\n\t\tindex = 0\n\t\tcurrent = []\n\t\twhile index < length:\n\t\t\tif alist[index] == alist[index + 1]:\n\t\t\t\tcurrent.push(alist[index])\n\t\t\telse:\n\t\t\t\tresult.push(current)\n\t\t\t\tcurrent = []\n\t\t\t\tresult.push(alist[index])\n\t\t\tindex += 1\n\t\tresult.push(current)\n\t\treturn result\n\telse:\n\t\tresult.push(alist)\n\t\treturn result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/318","completion":"    max_volume = 0\n    for i in range(1, s+1)\n        for j in range(1, s+1)\n            for k in range(1, s+1)\n                if i * j * k <= s\n                    volume = i * j * k\n                    if volume > max_volume\n                        max_volume = volume\n    return max_volume<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/319","completion":"  word = []\n  result = re.search(r'(\\w{5})\\w*$', text)\n\n  if result:\n    word << [result.group(1)]\n\n  return word\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/320","completion":"  n, sum(n), sum(n)^2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/321","completion":"  demlo = \"\"\n  prev = ''\n  for i in reversed(s):\n    if i == prev:\n      demlo = demlo + i\n    else:\n      prev = i\n  return demlo\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/322","completion":"  list_length = length(list1)\n  position_list = []\n  i = 0\n  while i < list_length\n    if list1[i] < list1[min(i + 1, list_length - 1)]\n      position_list << [i]\n      i += 1\n    else\n      min_index = min(i + 1, list_length - 1)\n      while min_index + 1 <= list_length\n        if list1[i] > list1[min_index + 1]\n          min_index = min_index + 1\n        else\n          break\n      if min_index + 1 > list_length\n        break\n      position_list << [i, min_index]\n      i = min_index + 1\n    end\n  end\n  return position_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/323","completion":"  if arr.length == 0\n    return []\n  elif arr.length == 1\n    return arr\n  elif arr.length == 2\n    if arr[0] > 0\n      return [arr[0], -arr[1]]\n    else\n      return [-arr[1], arr[0]]\n  else\n    if arr[0] < 0\n      return [-arr[1], arr[0], -arr[2]]\n    else\n      return [arr[0], -arr[1], -arr[2]]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/324","completion":"  test_tuple.select{|i| i % 2 == 0}.collect.sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/325","completion":"  1 + 1\n  while true\n    if sum(squares) == n\n      return length\n    else\n      squares.pop\n      length += 1\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/326","completion":"  word = \"\"\n  count = 0\n  for item in test_list\n    # get the current word\n    w = item.split(\" \")[0]\n    c = item.split(\" \").count\n    if c > count\n      count = c\n      word = w\n    end\n  end\n  puts word\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/327","completion":"\treturn (x == y) or (y == z) or (z == x)\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/328","completion":"    a = list1[:m]\n    b = list1[m:]\n    b.reverse()\n    return a+b\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/329","completion":"  length = 0\n  for item in @list\n    if item < 0\n      length = length + 1\n  end\n  return length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/330","completion":"  chars = text.match(\/\\w{3,}\/g)\n  chars = chars.map(function(item) {\n    return item.toUpperCase()\n  })\n  return chars\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/331","completion":"  # your code goes here\n  result = 0\n  while n > 0:\n    n &= n - 1\n    result += 1\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/332","completion":"\tfreq = {}\n\tfor i in range(0, str1.length)\n\t\tfreq[str1[i]] = freq[str1[i]] + 1\n\treturn freq<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/333","completion":"    l = sub_li.to_i\n    l.sort_by { |i| i[1] }\n    return l.reverse\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/334","completion":"  return a + b > c and a + c > b and c + b > a\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/335","completion":"  if a + d < n\n    n = n - d\n    ap_sum(a, n, d)\n  end\n  a = a + d\n  print a\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/336","completion":"  monthname1 = monthname1.capitalize\n  monthname1.to_s\n  [0..28]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/337","completion":"\tmatch = text[::-1].match(r'[a-zA-Z]*\\s*$', text)\n\treturn match and \"Found a match!\" or \"Not matched!\"<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/338","completion":"  first_character = s.sub(\"\", 1)\n  last_character = s.sub(\"\", -2)\n  i = 0\n  count = 0\n  while i < s.length\n    if s[i] = first_character[i] and s[i] = last_character[i]\n      count = count + 1\n    end\n    i = i + 1\n  end\n  return count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/339","completion":"  divisor = 1\n  while divisor < y\n    if x % divisor == 0\n      break\n    divisor += 1\n  end\n  return divisor\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/340","completion":"    a, b, c = lst.sort(0), lst[0], lst[1]\n    return a + b + c\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/341","completion":"  set_to_tuple = []\n  # TODO: convert the given set into a list of tuples\n  return set_to_tuple\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/342","completion":"  # Write your code here\n  pass\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/343","completion":"  return [ (s.count(\"#\") * 1) + s.count(\"*\"),\n           (s.count(\".\") * 1) + s.count(\"?\") ]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/344","completion":"  n = (n - 1)\n  m = (m + 1)\n  return m - n % m\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/345","completion":"  nums.map(&:-1).zip(nums.map(&:+1)).map { |n, m| m-n }.sort\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/346","completion":"  n -= 1\n  zigzag = []\n  for i = 0..n\n    if i mod k = 0 then\n      zigzag.append(i + 1)\n    elsif i = n then\n      zigzag.append(i - 1)\n    end\n  end\n  return zigzag.last\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/347","completion":"  squares = 0\n  while m < n\n    squares += m * m\n    m += 1\n  end\n  return squares\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/348","completion":"    if m < 0\n        # invalid input\n        return 0\n    else if m == 0\n        # zero is the only possible sum\n        return 1\n    else\n        # recursively calculate\n        return find_ways(m-1) + find_ways(m-2) + find_ways(m-3) + find_ways(m-4) + find_ways(m-5) + find_ways(m-6) + find_ways(m-7) + find_ways(m-8) + find_ways(m-9) + find_ways(m-10)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/349","completion":"  if length(string) % 8 == 0\n    return \"Yes\"\n  else\n    return \"No\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/350","completion":"\tlength = 0\n\tfor i in s\n\t\tlength = length + 1 if i == s[i]\n\tend\n\treturn length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/351","completion":"  length = arr.size\n  for i in 0..length-1\n    if arr[i] == arr[i+1]\n      if length % k == 0\n        return arr[i]\n      end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/352","completion":"  # str = str.to_s\n  chars = chars_in(str)\n  chars.sort\n  char_sets = {}\n  for i, char in enumerate(chars)\n    if char in char_sets\n      return false\n    char_sets[char] = true\n  return true\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/353","completion":"  list2 = []\n  for i in list1\n    list2.append(i[n])\n  return list2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/354","completion":"    b = 0\n    c = 0\n    for i in (d..n)\n        c = c + i\n        b = b + a * c\n    return b\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/355","completion":"    n = 0\n    while (sqrt(radius)*sqrt(radius) < 2*radius) do\n        radius += 1\n        n += 1\n    end\n    return n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/356","completion":"  a + b > 180 ? -(360 - a - b) : a - b\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/357","completion":"  max = 0\n  for i in 0..test_list.size - 1\n    max = (max > test_list[i] ? max : test_list[i])\n  end\n  return max\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/358","completion":"  nums1.zip(nums2).map(&:mod).join.map(&:join)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/359","completion":"  sqrt = sqrt(a, b, c)\n  if sqrt == (a + b + c) \/ 2\n    return \"Yes\"\n  else\n    return \"No\"\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/360","completion":"  carols = [i for i in range(7, 1437, 7)]\n  return carols[n-1]<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/361","completion":"{\n  new_list = []\n  for element in list1:\n    if element != [] or element != \"\":\n      new_list.append(element)\n  return new_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/362","completion":"  if @nums.empty?\n    nil\n  else\n    max_occurrence = nums.count_occurrences(max)\n    max_occurrence\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/363","completion":"  new_list = test_list\n  for i in range(k):\n    new_list = [x + [x[-1] + k] for x in new_list]\n  return new_list\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/364","completion":"\ti = 0\n\tflipcount = 0\n\twhile i < len(str):\n\t\tif str[i] == str[(i + 1) % len(str)]:\n\t\t\tflipcount += 1\n\t\ti += 1\n\treturn flipcount<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/365","completion":"  digits = 0\n  while n > 0\n    digits += 1\n    n = n \/ 10\n  end\n  return digits\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/366","completion":"    max_product = 0\n    for idx in 0 .. (length - 1)\n        num_i = nth\n            list_nums[idx]\n        num_j = nth\n            list_nums[idx + 1]\n        max_product = max_product\n            num_i * num_j\n        end\n    end\n    return max_product\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/368","completion":"    result = []\n    for i in range(0, n):\n        result.append(test_tup)\n    return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/369","completion":"  return 2 * (l * w + w * h + h * l)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/370","completion":"  # convert the elements of the tuple to float\n  price.map{|t| t.to_s = float(t.to_s)}\n  # sort the elements of the tuple by their float value\n  price.sort{|a,b| a-b}\n  # convert the sorted elements back to string\n  price.map{|t| t.to_s = t.to_s}\n  # return the sorted elements\n  return price\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/371","completion":"\tleft = left_element\n\tright = right_element\n\ti = 0\n\twhile (right != left)\n\tbegin\n\t\ti = (right + left)\/2\n\t\tif (a[i] == i)\n\t\t\tright = i\n\t\telse\n\t\t\tleft = i\n\tend\n\treturn right\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/372","completion":"  nums.sort_by { |x| x }\n  nums\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/373","completion":"  return (l * w * h)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/374","completion":"  a = str.to_a\n  b = a.dup\n  c = a.reverse.dup\n  d = b.reverse.dup\n  e = c.reverse.dup\n  f = a.reverse.dup\n  g = c.reverse.dup\n  h = f.dup.reverse\n  i = h.dup\n  j = i.reverse\n  k = h.dup\n  l = k.reverse\n  m = k.dup\n  n = l.dup\n  o = d.dup\n  p = a.dup\n  q = d.dup\n  r = b.dup\n  s = r.reverse\n  t = r.dup\n  u = s.dup\n  v = u.dup\n  w = s.dup\n  x = d.dup\n  y = s.dup\n  z = b.dup\n  A = x.dup\n  B = y.dup\n  C = z.dup\n  D = A.dup\n  E\nend\n","language":"ruby"}
{"task_id":"MBRBP\/375","completion":"  a = n % m\n  if a >= 0.5\n    return a + m\n  else\n    return a\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/376","completion":"  test_dict = {}\n  new_tup = []\n\n  for i in test_tup:\n    if i not in test_dict:\n      test_dict[i] = 0\n    else:\n      test_dict[i] += 1\n\n  for k, v in test_dict.iteritems():\n    if v == 1:\n      new_tup.append(k)\n\n  return new_tup\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/377","completion":"    return s.gsub!(\/^.\/, '')\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/378","completion":"  last = test_list[-1]\n  del test_list[-1]\n  test_list.insert(0, last)\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/379","completion":"  return 2*l*w + 2*w*h + 2*h*l + min(l*w, w*h, h*l)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/380","completion":"  multilist = Array.new(:rownum, :colnum)\n  for row in 0..rownum\n    for col in 0..colnum\n      multilist[row][col] = row * col\n  end\n  return multilist\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/381","completion":"\t# your code here\n\treturn list_data\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/382","completion":"  b = a.sort\n  c = []\n  for i in 0..(a.size - 1)\n    if a[i] >= a[(i + 1)]\n      c << [a[i], a[(i + 1)]]\n    end\n  end\n  return c.size\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/383","completion":"  return ~n & 0xffffffff<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/384","completion":"  arr.sort\n  [1, 2, 3, 4, 3].min\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/385","completion":"    if n == 0\n        return 0\n    else\n        return (n % 10) + get_perrin(n \/ 10)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/386","completion":"  swaps = 0\n  for i in range(0, len(s), 2):\n    if s[i] == '[' and s[i + 1] == ']' and s[i - 1] == ']':\n      swaps += 1\n      i += 1\n  for i in range(0, len(s), 2):\n    if s[i] == '{' and s[i + 1] == '}' and s[i - 1] == '}':\n      swaps += 1\n      i += 1\n  return swaps\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/387","completion":"  if n.substr(0,2) % 2 == 0\n    return \"Even\"\n  else\n    return \"Odd\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/388","completion":"  if n < 1\n    0\n  else\n    2 ** (floor(log(n) \/ log(2)))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/389","completion":"  i = 2\n  lucas = 2\n  while i <= n\n    lucas = lucas * i\n    i = i + 1\n  end\n  return lucas\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/390","completion":"    result = []\n    for i in list:\n        result.append(string.format(i))\n    return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/391","completion":"  return [{\"_\".join(l1) => {\"_\".join(l2) => l3}]}\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/392","completion":"  n = n.to_f\n  (n\/2).to_f + (n\/3).to_f + (n\/4).to_f + (n\/5).to_f + n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/393","completion":"  return max(map(lambda x: len(x), input_list))\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/394","completion":"  return(sorted(test_tup) != test_tup)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/395","completion":"  \"Find the first non repeating character in a string\"\n  result = \"\"\n  hash_char = {}\n  for i in range (0, str1.length)\n    hash_char[str1[i]] = hash_char.get(str1[i],0) + 1\n  for i in range (0, str1.length)\n    if hash_char[str1[i]] == 1\n      result = str1[i]\n      break\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/396","completion":"  return \"Valid\" if [regex.search(string).length == 1] && [regex.search(string).start() == 0] else \"Invalid\"<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/397","completion":"  return [a,b,c].sort()[2] \/ 2.0 if a != b != c else a\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/398","completion":"  nums.map {|n| n.to_s.length}\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/399","completion":"  res = []\n  for i in range(0, len(test_tup1))\n    res.append(test_tup1[i] ^ test_tup2[i])\n  return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/400","completion":"\tfreq = {}\n\tfor x in test_list:\n\t\ttry:\n\t\t\tfreq[x] += 1\n\t\texcept KeyError:\n\t\t\tfreq[x] = 1\n\treturn freq\n\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/401","completion":"  tup1 = {}\n  for tup in test_tup1:\n    for i in tup:\n      tup1[i] = tup[i]\n  tup2 = {}\n  for tup in test_tup2:\n    for i in tup:\n      tup2[i] = tup[i]\n  res = []\n  for i in tup2:\n    if i in tup1:\n      res.append([tup2[i] + tup1[i]])\n    else:\n      res.append([tup2[i]])\n  return res\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/402","completion":"  result = 1\n  for i in range n, r - 1\n    result = result * (p - i) \/\/ i\n  result = result * (p - r) \/\/ r\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/403","completion":"  return str.match(\"^https?:\\\/\\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&\/\/=]*)$\")\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/404","completion":"    if a > b\n        a\n    else\n        b\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/405","completion":"  \"Check if tuple contains a value\"\n  for (i,x) in enumerate(tuplex)\n    if tuple1 == x\n    end\n  end\n  return (i >= 0)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/406","completion":"  parity = (x mod 2)\n  return \"Odd Parity\" if parity == 1 else \"Even Parity\"<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/407","completion":"  if str_cmp(n, '10')\n    false\n  else\n    split_to_digits(n)\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/408","completion":"  res = []\n  for i in range(min(k, len(nums1))):\n    if nums2.contains(nums1[i]):\n      res << [[nums1[i], nums2[nums2.index(nums1[i])]]]\n      nums2.remove(nums1[i])\n      k -= 1\n    if k == 0:\n      break\n  return res\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/409","completion":"  if list1.length > 0\n    min_number = list1[0][0] * list1[0][1]\n    for i in list1\n      if i[0] * i[1] < min_number\n        min_number = i[0] * i[1]\n    return min_number\n  else\n    return 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/410","completion":"    \"find the min value in a heterogeneous list.\"\n    if listval[0] > listval[-1]:\n        return 0\n\n    result = -999999999\n    for i in listval:\n        if result > i:\n            result = i\n\n    return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/411","completion":"  \"\"\"\n  # Write your code here\n  \"\"\"\n  return \"\".join([w.capitalize() for w in word.split(\"_\")])\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/412","completion":"  l.each_with_index do |index, item|\n    if (index % 2 == 0)\n      l[index] = nil\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/413","completion":"\tarr = []\n\tfor i in range(0, len(list1)):\n\t\tarr.append(list1[i][n])\n\treturn arr\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/414","completion":"    return !_.any(list1, (item) => !_.any(list2, (another) => item == another))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/415","completion":"  arr.sort\n  last_index = arr.length - 1\n  max_product = 0\n  for i = 0, 1, last_index\n    if (arr[i] < arr[last_index])\n      max_product = max_product + arr[i] * arr[last_index]\n    else\n      max_product = max_product + arr[last_index] * arr[i]\n  end\n  max_product\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/416","completion":"  return (\n    if (n <= 0) 1\n    else (\n      breaksum(n - 3) + (n - 3) \/ 3 + breaksum(n - 1)\n    )\n  )\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/417","completion":"  return do_group_tuples(input)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/418","completion":"  max_len = 0\n  max_lst = nil\n  for x in lst\n    if x.length > max_len\n      max_len = x.length\n      max_lst = x\n    end\n  end\n  return max_lst\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/419","completion":"  result = 0\n  for i in 0..<list1.size\n    result += (i + 1) * (list1[i])\n  end\n  return result.round\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/420","completion":"  result = 0\n  for i in (1, n)\n    if i % 2 == 0\n      result += i ** 3\n    end\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/421","completion":"  \"Concatenate each element of test_tup by the delimiter.\"\n  return [\"-\".join(test_tup)]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/422","completion":"  # return average of cubes of first n natural numbers\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/423","completion":"    row, col = m - 1, n - 1\n    max_gold = 0\n    while row >= 0 and col >= 0:\n        if gold[row][col] > 0:\n            max_gold = max(max_gold, gold[row][col])\n        if row > 0:\n            gold[row][col] += gold[row - 1][col]\n        row -= 1\n        col -= 1\n    return max_gold\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/424","completion":"  \"Extracts the last index element of each string in the given tuple\"\n  result = []\n  for t in test_tuple:\n    result.append(last_index_element(t))\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/425","completion":"\tcount = 0\n\tfor i in list1:\n\t\tif x in i:\n\t\t\tcount += 1\n\treturn count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/426","completion":"  return nums.filter(lambda n: n % 2 == 1)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/427","completion":"  match dt_to_match, \/\\d{4}-\\d{2}-\\d{2}\/\n  if !match\n    raise Exception \"Date format incorrect\"\n  format %match[1], match[2], match[3]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/428","completion":"\tarr = my_list.to_a\n\tfor j in range(1, len\/2 + 1)\n\t\tfor i in range(j, len, j)\n\t\t\ttemp = arr[i]\n\t\t\tj = i\n\t\t\twhile j >= j\/2 and arr[j-j\/2] > temp\n\t\t\t\tarr[j] = arr[j-j\/2]\n\t\t\t\tj -= j\/2\n\t\t\tarr[j] = temp\n\treturn arr\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/429","completion":"  val = []\n  for i in test_tup1:\n    if i in test_tup2:\n      val.append(1)\n    else:\n      val.append(0)\n  return val\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/430","completion":"  [a,b,c] = [abs(a), abs(b), abs(c)]\n  if a < (b+c) and b < (a+c) and c < (a+b):\n    return a * b * c\n  else:\n    return -1\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/431","completion":"\treturn false if list1.inject(0, false) or list2.inject(0, false) else\n\t\tany(list1[i] == list2[i] for i in 0..<list1.size and list1[i] == list2[i])\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/432","completion":"  return (base1 + base2 + height) \/ 2.0;\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/433","completion":"  result = \"Yes\"\n\n  for i in arr\n    if i > number\n      result = \"No\"\n      break\n\n  return result\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/434","completion":"  text.gsub!(\/^a\/, \"Not matched!\")\n  text.gsub!(\/b\/, \"Found a match!\")\n  unless text == \"Not matched!\"\n  then\n    \"Found a match!\"\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/435","completion":"  digits = split(n, '')\n  last = last(digits)\n  return last\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/436","completion":"\tlist.each_with_index do |value, index|\n\t\tlist1[index] if value < 0\n\tend\n\t\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/437","completion":"  str2 = \"\"\n  i = 0\n  j = 0\n  while i < str1.length\n    if j % 2 == 0\n      str2 += str1[i]\n    i += 1\n    j += 1\n  end\n  return str2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/438","completion":"    res = 0\n    for i in range(len(test_list)-1):\n        if test_list[i][0] < test_list[i+1][0] and test_list[i][1] > test_list[i+1][1]:\n            res += 1\n        elif test_list[i][1] < test_list[i+1][0] and test_list[i][0] > test_list[i+1][1]:\n            res += 1\n    return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/439","completion":"  \"\"\"\n  Convert a list of multiple integers into a single integer.\n  \"\"\"\n  # TODO\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/440","completion":"    results = []\n    index = 0\n    text = text.split()\n\n    for word in text:\n        if word.startswith(\"!!!\") and word.endswith(\"!!!\") and not word.startswith(\"!!!\") and not word.endswith(\"!!!\"):\n            results.append(index)\n        index += 1\n\n    return results\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/441","completion":"  cube_area = 6 * (l * l)\n  print cube_area\n  return cube_area\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/442","completion":"  nums.sort\n  sum = 0.0\n  length = nums.length\n\n  for i in 0..length\n    if nums[i] > 0\n      sum += (length - i) \/ length\n\n  return sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/443","completion":"    list.sort(function(a, b) {return b - a;})\n    return list[0]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/444","completion":"    return (map(lambda x: x[0:len(x) - k], test_list))\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/445","completion":"{\n  temp_tup = []\n  for i in range(0, len(test_tup1)):\n    temp_tup.append(test_tup1[i] * test_tup2[i])\n  return temp_tup\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/446","completion":"  tup.count{|x| lst.include?(x)}\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/447","completion":"\treturn nums.map(lambda num: num ** 3)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/448","completion":"  # Put your code here\n  return\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/449","completion":"\tis_triangle = (x1 - x2) * (y3 - y2) - (y1 - y2) * (x3 - x2) >= 0\n\tif is_triangle == 1\n\t\tprint \"Yes\"\n\telse\n\t\tprint \"No\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/450","completion":"  result = []\n  for i in range(0, len(str) - l + 1):\n    result << str[i:i+l]\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/451","completion":"\tres = re.sub(r'\\s+', '', text1)\n\treturn res<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/452","completion":"    if sale_amount < 0\n        return nil\n    return sale_amount - actual_cost if sale_amount > actual_cost\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/453","completion":"  return sum(2 for i in range(2, n) if n % i == 0)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/454","completion":"  # Match 'z' from 'text'.\n  # \"Found a match!\" when we get 'z' from text.\n  # \"Not matched!\" when we get anything else.\n  # (Remember that Ruby uses the 'g' flag, which matches all the 'z's)\n  match = \"z\" in text\n  return \"Found a match!\" if match else \"Not matched!\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/455","completion":"  return monthnum2.days.count == 31\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/456","completion":"{\n    newlist = [];\n    for (var i = stringlist.length - 1; i >= 0; i--)\n    {\n        newlist.append(stringlist[i]);\n    }\n    return newlist;\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/457","completion":"  min_len = min_sublist_len(lst)\n  [find_min(sublist) for sublist in minimum_sublists(lst)]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/458","completion":"  ## Your code here\n  ## Please leave this comment\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/459","completion":"{\n    # write your code here\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/460","completion":"  return map {|i| i[0]} lst\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/461","completion":"  res = 0\n  i = 0\n  while i < str.length\n    if str[i] == str[i].upper\n      res += 1\n    i += 1\n  end\n  return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/462","completion":"\t# (1..(length list1))\n\tr = []\n\tfor i in range(1, len(list1)+1):\n\t\t# (1..i)\n\t\t# (for each element e from list1 (r has e elements))\n\t\tfor e in list1:\n\t\t\t# (append (e))\n\t\t\tr.append(e)\n\t\t# (append (list1))\n\t\tr.append(list1)\n\treturn r\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/463","completion":"  max_prod = arr[0]\n  max_prod_so_far = arr[0]\n  for i in arr\n    max_prod_so_far = max_prod_so_far * i if max_prod_so_far > 0 else i\n    max_prod = max_prod_so_far if max_prod > max_prod_so_far else max_prod\n  return max_prod\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/464","completion":"  val = [0, 0, 0, 0]\n  for key in dict:\n    if dict[key] != n:\n      return False\n  for i in [1, 2, 3, 4]:\n    if val[i-1] == 1:\n      return False\n  return True\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/465","completion":"  res = {}\n  for key,value in dict1.items\n    if value is defined and value\n      res[key] = value\n  end\n  return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/466","completion":"  peak = 0\n  for i = 0, arr.length-1 do\n    if arr[i] > arr[i+1]\n      if peak < i\n        peak = i\n      end\n    end\n  end\n  return peak\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/467","completion":"\toctalnum = 0\n\twhile decinum > 0\n\t\tdigit = decinum % 8\n\t\toctalnum = octalnum * 10 + digit\n\t\tdecinum = decinum - digit\n\t\tdecinum = decinum \/ 8\n\tend\n\treturn octalnum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/468","completion":"    # Your code here\n    pass\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/469","completion":"  profit = 0\n  for x in range(0, k):\n    if price[x] > price[x+1]\n      profit += price[x] - price[x+1]\n  return profit\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/470","completion":"  new_list = []\n  for i in range(0, len(test_tup) - 1):\n    sum = test_tup[i] + test_tup[i+1]\n    new_list.append(sum)\n  return new_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/471","completion":"  if len(arr) < lens\n    return 0\n  else\n    return arr[-1] % n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/472","completion":"  l.sort\n  prev = l[0]\n  for i in l[1..-1]\n    if i - prev != 1\n      return false\n    prev = i\n  return true\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/473","completion":"  set1 = set.new(test_list1)\n  set2 = set.new(test_list2)\n  result = set2.intersect(set1)\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/474","completion":"  str2 = \"\"\n  for char in str1\n    if char == ch then newch = char end\n    str2 += newch\n  end\n  return str2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/475","completion":"  return [[key, dict1[key]] for key in sorted(dict1.keys())]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/476","completion":"    return nums.min + nums.max\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/477","completion":"  # Your code here\n  return \"invalid\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/478","completion":"\tstr1.gsub(\/[^a-z]\/i, '')\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/479","completion":"  if n = 0 then 0\n  else if n < 0 then -n\n  else if n > 9 then floor(n\/10)\n  else 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/480","completion":"  return str1.max_occuring_char_string\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/481","completion":"  set.sort\n\n  s = set\n  s_sum = sum\n\n  for i = 1; i < s_sum; i++\n    if i > s[len(s) - 1]\n      return true\n    if s[i - 1] > s_sum - i\n      return true\n    if s[i - 1] == s_sum - i\n      return true\n  end\n\n  return false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/482","completion":"  return Regex.find \/(?=[a-z])[A-Z]\/.search(text)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/483","completion":"  begin\n    n = 0\n    i = 1\n    while i <= x\n      n = n + (i * i)\n      i = i + 1\n    end\n    n = n - (x * x)\n    return n\n  rescue nil\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/484","completion":"  result = []\n  for element in test_list1:\n    if element not in test_list2:\n      result.append(element)\n  return result\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/485","completion":"\tpalindromes = []\n\t\n\t# for each palindrome in a, add the palindrome to the list\n\t# if the palindrome is palindromic, append it to the list\n\t# if the palindrome is longer than n, and has a longer palindrome, replace the palindrome in the list\n\t# if the palindrome has already been seen before, skip it\n\n\tfor i in range(n)\n\t\tfor j in range(i, n)\n\t\t\tx = i * j\n\t\t\tif x > n\n\t\t\t\tx = str(x)\n\t\t\t\tif x == x[::-1]\n\t\t\t\t\tpalindromes.push(x)\n\t\t\t\telif palindromes.count(x) < 2\n\t\t\t\t\tpalindromes.append(x)\n\t\t\t\telse\n\t\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tbreak\n\n\t# find the palindrome with the maximum number of repeats\n\n\treturn max(palindromes)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/486","completion":"  return combinatorial(n, k) * pow(p, k) * pow(1 - p, n - k)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/487","completion":"    # +++your code here+++\n    return tup\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/488","completion":"  b = (5 * a * a) \/ 2\n  return b.round\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/489","completion":"  arr.sort\n  arr.reverse\n  return # arr[n - 1] ??\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/490","completion":"  result = Set.new\n  for x, y in test_list.each do |x_i|, |y_i|\n    if x == y\n      result.add x, y\n    end\n  end\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/491","completion":"    sum = 0\n    for i = 1..n\n        sum += geom_p(a, i, r)\n    end\n    return sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/492","completion":"  begin\n    mid = Math.floor(item_list.length \/ 2)\n    if item_list[mid] == item\n      return true\n    if item_list.length < 2\n      return false\n    if item > item_list[mid]\n      begin\n        item_list.length = mid - 1\n        return binary_search(item_list, item)\n      rescue begin\n        item_list.length = mid + 1\n        return binary_search(item_list, item)\n      end\n    else\n      begin\n        item_list.length = mid + 1\n        return binary_search(item_list, item)\n      rescue begin\n        item_list.length = mid\n        return binary_search(item_list, item)\n      end\n  rescue nil\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/493","completion":"    polygons = []\n    for x in range(startx, endx):\n        for y in range(starty, endy):\n            # get the distance\n            d = math.sqrt((x-endx)**2+(y-endy)**2)\n            if d <= radius:\n                # get the angle\n                a = math.atan2(y-endy, x-endx)\n                # get the x coordinate of the circle center\n                cx = (x + endx)\/2.0\n                # get the y coordinate of the circle center\n                cy = (y + endy)\/2.0\n                # get the x coordinate of the radius point\n                rx = cx + radius * math.cos(a)\n                # get the y coordinate of the radius point\n                ry = cy + radius * math.sin(a)\n                polygons.append([rx, ry])\n    return polygons\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/494","completion":"  set length = 0\n  for i in test_tup\n    if i then\n      length = length + 1\n    else\n      length = length\n    end\n  end\n  return length.to_i\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/495","completion":"  return str1.gsub!(\/[^a-z]\/g, '')\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/496","completion":"\tq = {}\n\tfor i in range(0, n)\n\t\tq[i] = nums[i]\n\tfor i in range(0, n)\n\t\tq[n - 1] = nums[i]\n\t\tsift_down(nums, n - 1, n - 1, q)\n\treturn q\n\t\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/497","completion":"  return 2 * 3.14 * r * r + 2 * 3.14 * r * h\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/498","completion":"  def gcd_iter(x, y)\n    if x == 0\n      return y\n    else if y == 0\n      return x\n    else if x % y == 0\n      return gcd_iter(x \/ y, y)\n    else\n      return gcd_iter(x, y - (x % y))\n  end\n  gcd_iter(x, y)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/499","completion":"\tdiameter = 2 * r\n\treturn diameter\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/500","completion":"  result = \"\"\n  for element in list\n    result += element\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/501","completion":"  div = 1\n  num = x\n  while num % y != 0\n    div = div + 1\n    num = num - y\n  return div\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/502","completion":"    return n % m\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/503","completion":"  result = []\n  last_num = 0\n\n  for num in nums\n\n    if num == last_num + 1\n\n      last_num += 1\n\n    else\n\n      result.push(last_num)\n\n      last_num = num\n\n  result.push(last_num)\n\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/504","completion":"  2n + 2n + ... + 2n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/505","completion":"  # The order of a list should be preserved, so we should return a new\n  # list with all zeroes at the end.\n  return a.sort_by(&:is_zero).reverse.collect.to_a\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/506","completion":"\treturn factorial(n) \/ (factorial(k) * factorial(n-k))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/507","completion":"  list2 = []\n  for word in list1\n    if not word in removewords\n      list2 << word\n  end\n  return list2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/508","completion":"    for element1 in l1\n        if element1 in l2\n            return true\n    return false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/509","completion":"  num_of_odd = 0\n  sum = 0\n  i = 0\n  while i <= n\n    if i % 2 == 1\n      num_of_odd = num_of_odd + 1\n      sum = sum + i\n    i = i + 1\n  return sum \/ num_of_odd\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/510","completion":"    # base case\n    if k == 1\n        return 1\n\n    # call function recursively with reduced array and k\n    return (no_of_subsequences(arr[:-1], k-arr[-1]) + no_of_subsequences(arr[:-1], k))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/511","completion":"  (3 * num - 1) * (num - 2) \/ 2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/512","completion":"    return_map = {}\n    for item in test_tuple\n        if type(item) == list\n            return_map.update(count_element_freq(item))\n        else\n            if item in return_map\n                return_map[item] = return_map[item] + 1\n            else\n                return_map[item] = 1\n    return return_map\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/513","completion":"  result = []\n  for i in test_tup:\n    result.append(i)\n    result.append(k)\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/514","completion":"    test_tup.reduce( (a,b) => { return a + b; } )\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/515","completion":"    return (length(filter_array(arr, n, m)) == length(arr))\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/516","completion":"  # Count the number of digits in each number.\n  # [1, 0, 10, 1] -> [3, 2, 1, 1]\n  counts = [reduce(lambda x, y: x * 10 + y, [int(char) for char in str(num)], 0) for num in nums]\n  # Find the place where each digit should go.\n  # [3, 2, 1, 1] -> [0, 2, 1, 3]\n  places = [[] for _ in range(10)]\n  for i, count in enumerate(counts):\n    places[count].append(nums[i])\n\n  # Recursively sort each digit's place.\n  # [0, 2, 1, 3] -> [0, 1, 2, 3]\n  for place in places:\n    radix_sort(place)\n\n  # Merge the lists back together.\n  # [0, 1, 2,\nend\n","language":"ruby"}
{"task_id":"MBRBP\/517","completion":"  list2 = list1.filter(&lt;- f {|i| i > 0}.to_a)\n  largest = list2.max(&lt;- f {|i| i - 1})\n  return largest\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/518","completion":"    sqrt_num = num**(1\/2.0)\n    if num == sqrt_num:\n        return num\n    else:\n        return sqrt_root(sqrt_num)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/519","completion":"  a = (1.0 \/ 3.0) * num ** 2 * (1.0 - num)\n  return a\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/520","completion":"  f = lambda x, y: (x * y) \/ gcd(x, y)\n  return reduce(f, l, 1)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/521","completion":"  if (x == y && x != z) or (x != y && x == z) or (x == z && x != y) then\n    true\n  else\n    false\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/522","completion":"  arr = sort_array(arr)\n  l = arr.length\n  i = 0\n  j = l-1\n  while i < j:\n    if arr[i] < arr[j]:\n      i += 1\n    else:\n      j -= 1\n  return j+1\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/523","completion":"{\n    return [\"Valid string.\"];\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/524","completion":"\tmax_sum = 0\n\tcurrent_sum = 0\n\ti = 0\n\twhile i < n:\n\t\tif arr[i] > arr[i-1]:\n\t\t\tcurrent_sum += arr[i]\n\t\telse:\n\t\t\tcurrent_sum = 0\n\t\tif current_sum > max_sum:\n\t\t\tmax_sum = current_sum\n\t\ti += 1\n\treturn max_sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/525","completion":"  parallel(line1, line2) unless line1 == line2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/526","completion":"  str2 = ''\n  words = str1.split(' ')\n  for word in words\n    str3 = word.capitalize\n    str4 = ''\n    str5 = str3.join(str4)\n    str2 = str2 + str5 + ' '\n  return str2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/527","completion":"  pairs = {}\n  pairs_count = 0\n  # get first 0s\n  arr.each { |n| pairs[n] = pairs[n] || [] }\n\n  # remove those 0s\n  # and check if n - sum is in the array\n  arr.each_with_index do |n,i|\n    (pairs[n].remove :i)\n    pairs[n].each { |s| if s == (n - sum) }\n    pairs_count += pairs[n].length\n  end\n\n  pairs_count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/528","completion":"  result = []\n  min = min_list_length(list1)\n  for i in range(0, min)\n    result << list1[i]\n  return result\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/529","completion":"  n = n % 4\n  if (n == 0)\n    return 2\n  if (n == 1)\n    return 1\n  if (n == 2)\n    return 3\n  return 4\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/530","completion":"  negative_num_cnt = 0\n  for i in nums\n    if i < 0\n      negative_num_cnt += 1\n  return negative_num_cnt \/ (nums.size)<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/531","completion":"\tcoins.sort\n\tn = coins.length\n\treturn min_coins_recursive(coins, m, n-1, v)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/532","completion":"  s1 = new_set(str1)\n  s2 = new_set(str2)\n  return s1 == s2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/534","completion":"    start = 0\n    end = text.length - 1\n    while start <= end:\n        middle = (start + end) \/ 2\n        if pattern == text[middle]:\n            end = middle - 1\n            while pattern == text[end]:\n                end -= 1\n            start = end + 1\n        else:\n            start = middle + 1\n    return [start, start + len(pattern) - 1]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/535","completion":"  height = pi*r*r\n  return round(height * (height + 2*r*r), 4)<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/536","completion":"  # n is 1-based\n  n = n - 1\n  return list[:n]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/537","completion":"  strs = str1.split(' ')\n  hash = {}\n  for word in strs\n    if word not in hash\n      hash[word] = 1\n    else\n      hash[word] += 1\n  for k, v in hash.iteritems\n    if v > 1\n      return k<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/538","completion":"  tup = []\n  str1.each_char {|c| tup << (c)}\n  return tup\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/539","completion":"  nums = index.map(x => bases_num[x])\n  return nums.map(x => power(x, nums.length))\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/540","completion":"  arr_freq = arr.map { |x| 1 + count(x) }.sort\n  return arr_freq.last - arr_freq.first\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/541","completion":"\treturn n < (n+1)*(n+1)\/2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/542","completion":"  text.gsub(\/ \/g, ':').gsub(\/,\/g, ':').gsub(\/.\/g, ':')\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/543","completion":"\t(num1 + num2).to_s.count_digits\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/544","completion":"  return \" \".join (map (lambda x: \" \".join (map (lambda y: y, x)), test_list))\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/545","completion":"  n.bit_length.times { |b| n = (n << 1) & n.clear_bit(b.to_i) | n.set_bit(b.to_i) }\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/546","completion":"\tlast_pos = string.rfind(char)\n\tif last_pos >= 0\n\t\treturn last_pos\n\telse\n\t\treturn nil\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/547","completion":"  n = str(n)\n  distance = 0\n  for i in n.to_a\n    distance += str(i)\n  return distance.length()\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/548","completion":"  if arr.length == 0\n    return 0\n  else\n    return longest_increasing_subsequence(arr.tail).max(longest_increasing_subsequence(arr.tail.tail)).length + 1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/549","completion":"  return (1 << n) * (1 << n) * ... * (1 << n) \/ 5\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/550","completion":"  if (low == high)\n    return arr[low]\n  mid = low + (high - low) \/ 2\n  if (mid > low and arr[mid] < arr[mid - 1])\n    return arr[mid]\n  elif (mid < high and arr[mid] > arr[mid + 1])\n    return arr[mid]\n  else if (arr[low] < arr[mid])\n    return find_max(arr, low, mid - 1)\n  else\n    return find_max(arr, mid + 1, high)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/551","completion":"  return map(nth, list1, n)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/552","completion":"\tres = \"Linear Sequence\"\n\tif len(seq_nums) < 2:\n\t\treturn \"Non Linear Sequence\"\n\telse:\n\t\tfor i in range(len(seq_nums)-1):\n\t\t\tif seq_nums[i] == seq_nums[i+1]:\n\t\t\t\tpass\n\t\t\telse:\n\t\t\t\treturn \"Non Linear Sequence\"\n\treturn res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/553","completion":"  \"given a tuple of integers, returns a tuple of floats\"\n\n  # your code here\n  return<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/554","completion":"  odd = []\n  length = 0\n  for item in list\n    length += 1\n  for item in list\n    if length - item % 2 == 0\n      odd.push(item)\n  end\n  return odd\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/555","completion":"  first_n_sum = 0\n  for i in 1..n\n    first_n_sum += i\n  second_n_sum = 0\n  for i in 1..n\n    second_n_sum += i\n  difference = second_n_sum - first_n_sum\n  return difference\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/556","completion":"  count = 0\n  for i in a\n    if i ^ n % 2 == 1\n      count + 1\n  end\n  return count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/557","completion":"  if string.is_a? String\n  string.gsub! \/[a-zA-Z]\/ { $& ~c }\n  return string\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/558","completion":"  n1_str = n1.inspect\n  n2_str = n2.inspect\n  n1_len = n1_str.length\n  n2_len = n2_str.length\n  n1_digit = 0\n  n2_digit = 0\n  for i in range(n1_len - 1, -1, -1)\n    n1_digit = n1_digit * 10 + n1_str[i]\n  for i in range(n2_len - 1, -1, -1)\n    n2_digit = n2_digit * 10 + n2_str[i]\n  if n1_digit > n2_digit\n    return n1_len - n2_len\n  else\n    return n2_len - n1_len\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/559","completion":"    local_max = 0\n    local_sum = 0\n\n    for i = 0, j = 0, k = 0 do\n        do\n            if local_sum + a[k] > local_max\n                local_max = local_sum + a[k]\n            end\n\n            if local_sum + a[k] <= local_max\n                local_sum = 0\n            else\n                local_sum = local_sum + a[k]\n            end\n\n            k = k + 1\n        end\n\n        if j + 1 > size then\n            local_sum = 0\n        else\n            local_sum = local_sum + a[j + 1]\n        end\n\n        local_max = local_max if local_max > local_sum else local_sum\n        j = j + 1\n    end\n\n    return local_max\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/560","completion":"  test_tup1.inject(test_tup2)\n  test_tup2.inject(test_tup1)\n  return test_tup1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/561","completion":"\tpython = {}\n\tfor i in range(0, len(test_list))\n\t\tif (len(test_list[i]) > 1):\n\t\t\tpython[test_list[i][0]] = []\n\t\t\tfor j in range(1, len(test_list[i])):\n\t\t\t\tpython[test_list[i][0]].append(test_list[i][j])\n\t\telse:\n\t\t\tpython[test_list[i][0]] = []\n\treturn python\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/562","completion":"  arr = {}\n  i = 0\n  while i < (length arr)\n    # find the longest sublist\n    # if arr[sublist] is not nil\n      # find the length of this sublist\n      # compare the length to arr[sublist]\n        # if length > arr[sublist]\n          # replace arr[sublist] with length\n  end\n  return arr[0]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/563","completion":"    return text.split(\"\\\"\\\"\")\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/564","completion":"  length = arr.size\n  diff = n - length\n  count = 0\n\n  for i < length\n    for j < diff\n      if (arr[i] == arr[j])\n        count += 1\n      end\n    end\n  end\n  return count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/565","completion":"    result = []\n    last = ''\n    for letter in word\n        last = last + letter\n        result << last\n    last = ''\n    return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/566","completion":"  n = abs(n)\n  return n.times [n.to_s.digit ].sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/567","completion":"  list2 = list1.to_a\n  # TODO: Your code goes here.\n  return false\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/568","completion":"  res = []\n  for i in 0..length\n    res.append({})\n  end\n  res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/569","completion":"  if list1.length == 0\n    nil\n  else\n    sort_sublists(list1[1..]).inject(list1[:1])\n    sort_sublists(list1[1..]).inject(list1[:1])\n    sort_sublists(list1[1..]).inject(list1[:1])\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/570","completion":"    # remove_words = []\n    # for word in list1:\n    #     for char in charlist:\n    #         word.replace(char, \"\")\n    #         remove_words.append(word)\n    return [word.replace(char, \"\") for word in list1 for char in charlist]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/571","completion":"\tarr.sort()\n\tminDiff = 10e10\n\tmaxDiff = -10e10\n\tfor i = 0; i < n; i++\n\t\tfor j = i+1; j < n; j++\n\t\t\tdiff = abs(arr[i] - arr[j])\n\t\t\tif diff < k && diff > minDiff\n\t\t\t\tminDiff = diff\n\t\t\tif diff > k && diff < maxDiff\n\t\t\t\tmaxDiff = diff\n\treturn maxDiff\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/572","completion":"  nums.sort\n  # Find the first occurrence of each number\n  dup = []\n  for i in 0..nums.length - 1 do\n    if nums[i] == nums[i+1]\n      dup << [nums[i]]\n    end\n  end\n\n  # Remove the duplicated numbers from the list\n  result = []\n  for i in 0..nums.length - 1 do\n    if not (nums[i] in dup)\n      result << [nums[i]]\n    end\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/573","completion":"  # your code goes here\n  return 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/574","completion":"  pi = 3.141592\n  s = pi * r * r\n  s += 2 * pi * h * r\n  return s\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/575","completion":"    res = (l + r) \/ 2\n    if (a == res * n)\n        return res\n    if (res * n < a)\n        return count_no(a, n, res + 1, r)\n    if (res * n > a)\n        return count_no(a, n, l, res - 1)\n    return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/576","completion":"  i = 0\n  j = 0\n  while i < n and j < m\n    if a[i] == b[j]\n      i += 1\n      j += 1\n    else\n      i += 1\n  end\n  return (i == n && j == m)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/577","completion":"    digits_factorial = \"\"\n    factorial = 1\n    for i in n\n        digits_factorial += (factorial * i).to_s\n        factorial *= i\n    digits_factorial = digits_factorial.split(\"\").reverse()\n    return -1 if 0 < len(digits_factorial) else digits_factorial[0]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/578","completion":"  result = []\n  for i in (0...list1.size).each do\n    result << list1[i]\n    if i < list1.size - 1\n      result << ','\n      result << list2[i]\n      if i < list2.size - 1\n        result << ','\n        result << list3[i]\n      end\n    end\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/579","completion":"    dissimilar = []\n    for num in test_tup1\n        if num not in test_tup2\n            dissimilar.push(num)\n    return dissimilar\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/580","completion":"\tresult_list = []\n\tfor item in test_tuple:\n\t\tif type(item) == list:\n\t\t\tresult_list = result_list + extract_even(item)\n\t\telse:\n\t\t\tif item % 2 == 0:\n\t\t\t\tresult_list.append(item)\n\treturn result_list\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/581","completion":"  return 2 * b * s + 2 * b * b + b * s * s\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/582","completion":"  dict1.empty?\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/583","completion":"  result = 0\n\n  for (i = 0; i < num; i++)\n  {\n    result += 1 \/ (2 * i + 1) + 1 \/ (2 * i)\n  }\n\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/584","completion":"  [:]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/585","completion":"  # Create a heap queue with the given n.\n  hq = # your code goes here\n\n  # Remove the first item from the queue.\n  hq.shift\n\n  # While queue is not empty.\n  while hq.size\n    # Pop the first item.\n    item = hq.shift\n\n    # If current item has not been visited, mark it visited and push it into the queue.\n    if not # your code goes here\n\n  # Return the top n items in the queue.\n  # your code goes here\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/586","completion":"  a.reverse.each_with_index do |i, v|\n    a[n..k..-1].push v\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/587","completion":"  return [listx.pop(0) for nil in []]<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/588","completion":"  # find the biggest and smallest values\n  largest = nums.sort_by(-1).first\n  smallest = nums.sort_by(1).first\n  # compare them\n  return largest - smallest\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/589","completion":"  squares = []\n  for num in range(a, b)\n    if num ** 2 == (num + 1) ** 2\n      squares << [num, num + 1]\n  end\n  squares\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/591","completion":"  newlist[:2] = [newlist[2], newlist[0]]\n  end\n  return newlist\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/592","completion":"  # We calculate binomial coefficients from the number of elements\n  # in 'n' and then return their sum.\n  #\n  # 'n' must be greater than zero.\n\n  binomial_coefficients = binomial_coefficients(n)\n\n  # Return the sum of the product of all binomial coefficients.\n  #\n  # Remember, you can multiply two integers using repeated multiplication\n  # (like 2 * 2 = 4, not 4 * 2 = 8).\n  #\n  # Example:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  #          [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n  #          [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n  return (binomial_coefficients[\nend\n","language":"ruby"}
{"task_id":"MBRBP\/593","completion":"  splitip = ip.split(\".\")\n  zero_start = 0\n  for i in splitip:\n    if i == '0':\n      zero_start = splitip.index(i)\n  splitip = splitip[zero_start:]\n  return \".\".join(splitip)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/594","completion":"  n = 0\n  for i in range(0, length(list1), 2)\n    n += 1\n  end\n  return length(list1) - n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/595","completion":"  if str1 < str2\n    return \"Not Possible\"\n  else\n    num_swaps = 0\n    while str1 != str2\n      if str1 < str2\n        swap str1 with str2\n        swap str2 with str1\n        num_swaps += 1\n      else\n        return num_swaps\n      end\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/597","completion":"    arr1.sort\n    arr2.sort\n    arr1_len = arr1.length\n    arr2_len = arr2.length\n\n    if arr1_len > arr2_len:\n        return find_kth(arr2, arr1, m, n, k)\n    if k == 1:\n        return arr1[m]\n    if k == arr1_len + 1:\n        return arr2[n - 1]\n\n    mid = (m + n) \/ 2\n    if arr1[mid] < arr2[k - 1]:\n        return find_kth(arr1, arr2, mid, n, k - 1)\n    if arr2[k - 1] < arr1[mid]:\n        return find_kth(arr1, arr2, m, mid - 1, k - 1)\n    return arr1[mid]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/598","completion":"  return (number**3 + number) % 10 == 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/599","completion":"  return [sum(1..number), (number+1)*5.0\/number]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/600","completion":"  result = 0x01 & n\n  return result == 0x00\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/602","completion":"  # convert the string into a list\n  list = str.split('')\n\n  # initialize the first repeated char with None\n  first_repeated = None\n\n  # for every char in the string\n  for char in list\n    # check if the char is in the list\n    if char in list\n      # if it is the first repeated char is initialized with the char\n      if first_repeated is None\n        first_repeated = char\n      # otherwise check if the char is equal to the first repeated char\n      elif first_repeated == char\n        # if it is repeated, return the first repeated char\n        return first_repeated\n      # otherwise continue the loop\n      else\n        continue\n  # if no repeated chars are found, return None\n  return first_repeated<\/s>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/603","completion":"  [1..n]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/604","completion":"  \"reverse words in a string\"\n  s = [ch for ch in s]\n  @reverse\n  def reverse(i, j):\n    \"reverse a range of characters\"\n    s[i:j+1] = s[i:j+1][::-1]\n  @words = s.join.split\n  @words.reverse\n  return \"\".join(words)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/605","completion":"  # Your code here.\n  return 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/606","completion":"\treturn degree*Math.PI\/180.0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/607","completion":"    index = 0\n    matches = []\n    while index < text.length\n        matches.push(text.search(pattern))\n        index += 1\n    return matches\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/608","completion":"    return n*n + n + 1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/609","completion":"  d = n - 1\n  if n == a\n    return b\n  elif n == b\n    return a\n  elif d < a * b\n    d = a * b\n  elif d < a\n    d = a\n  elif d < b\n    d = b\n  elif d < 0\n    d = 0\n  elif d > n\n    d = n\n  return floor_min(a, d, n - d)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/610","completion":"    i = 0\n    while i < l\n        list1.pop(i)\n        i += 1\n    end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/611","completion":"  return (test_list[0][n]).max\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/612","completion":"  val = []\n  if lst.first > lst.last\n    val << lst.first\n  else\n    val << lst.last\n  if lst.first < lst.last\n    val << lst[first..last]\n  else\n    val << lst[first..last]\n  return val.to_a\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/613","completion":"\tmax = 0\n\tfor item in test_list:\n\t\tmax = max(item[1])\n\t\titem[1] = max\n\treturn test_list<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/614","completion":"    a = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                a = a + test_list[i] + test_list[j] + test_list[k]\n    return a\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/615","completion":"  nums.map { |num| num.sum \/ num.length }\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/616","completion":"  tup_mod = []\n\n  if test_tup1.length == test_tup2.length\n    for i = 0, n = test_tup1.length\n      tup_mod[i] = test_tup1[i] % test_tup2[i]\n    end\n  end\n\n  return tup_mod<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/617","completion":"  d = 3\n  0 = 0\n  1 = 0\n  2 = 1.5\n  3 = 2\n  4 = 3.5\n  5 = 4\n  6 = 5.5\n  7 = 6\n  8 = 7.5\n  9 = 8\n  10 = 9\n  11 = 10\n  12 = 11\n  13 = 12\n  14 = 13\n  15 = 14\n  16 = 15\n  17 = 16\n  18 = 17\n  19 = 18\n  20 = 19\n  21 = 20\n  22 = 21\n  23 = 22\n  24 = 23\n  25 = 24\n  26 = 25\n  27 = 26\n  28 = 27\n  29 = 28\n \nend\n","language":"ruby"}
{"task_id":"MBRBP\/618","completion":"  nums1.div_list(nums2)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/619","completion":"\t# Your code goes here.\n\treturn result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/620","completion":"  \"Find the largest subset of a with each pair of values being divisible by n\"\n\n  start_length = 0\n  subsets = [[]]\n  for i in a\n    if (i % n) == 0\n      start_length = length(subsets)\n      end_length = 0\n      for j in subsets\n        if (j.length > end_length)\n          end_length = j.length\n      subsets = subsets[:start_length - 1].tail.append(j).tail\n    elsif (i % n) != 0\n      for j in subsets\n        if (j.length > start_length)\n          if (j.length == start_length)\n            j = [i]\n          else\n            j = j + [i]\n          end_length = length(j)\n          if (end_length > start_length)\n            start_length = end_length\n          if (start_length == length(\nend\n","language":"ruby"}
{"task_id":"MBRBP\/621","completion":"    counter = 0\n    for item in test_list:\n        if (counter % 2 == 0):\n            # print(\"test_list \" + str(counter) + \" : \" + item)\n            test_list[counter] = (int(test_list[counter]) + k).toString()\n            # print(\"test_list \" + str(counter) + \" : \" + test_list[counter])\n        counter += 1\n    return test_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/622","completion":"  arr = [arr1, arr2]\n  arr.sort()\n  mid = n\/2\n  if n%2 == 0\n    return (arr[mid][mid+1]+arr[mid][mid-1])\/2.0\n  return arr[mid][mid]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/623","completion":"  n = n - 1\n  nums.map(lambda x: x ** n)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/624","completion":"  \"Return string converted to uppercase.\"\n  result = string.to_s.gsub(\/[A-Z]\/g, \" $&\")\n  result.gsub(\/\\s+\/g, \"\")\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/625","completion":"  newlist[0], newlist[-1] = newlist[-1], newlist[0]\n  return newlist\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/626","completion":"  r = abs(r)\n  return -1 if r < 1\n  # HINT: write your code here\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/627","completion":"  missing_number = 0\n  last = _end\n\n  while start <= last\n    missing_number = array[start] + 1\n    start += 1\n\n  for i in range(start, _end):\n    missing_number = missing_number ^ array[i]\n\n  return missing_number\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/628","completion":"  return string.gsub(\/\\s\/g, '%20')\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/629","completion":"  return [list[i] for i in (i for i, e in enumerate(list) if i%2 == 0)]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/630","completion":"    coordinates = []\n    for i in range(0, len(test_tup) - 1):\n        coordinates.append([test_tup[i], test_tup[i + 1]])\n    return coordinates\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/631","completion":"\treturn re.sub(r'\\s+', '_', text)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/632","completion":"  num_list.each_with_index do |i, value|\n    if value == 0\n      num_list[i] = num_list[num_list.count - 1]\n      num_list.shift\n      num_list[num_list.count - 1] = 0\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/633","completion":"  nums = []\n  for i = 0, length = arr.length\n    nums.push(arr[i] ^ arr[i+1])\n  return nums.sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/634","completion":"  i = 1\n  s = 0\n  while i <= n\n    s = s + i\n    i = i + 2\n  end\n  s\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/635","completion":"  # Create a max heap from iterable\n  max_heap = [iterable[0]]\n\n  for value in iterable.slice(1)\n    # Add value to heap, if its larger than any element of the heap.\n    # Otherwise, replace the least-valued element with this value\n    if value > max_heap[0]\n      max_heap.unshift(value)\n    else\n      max_heap[0] = value\n\n    # Move the smallest element to the last position in the heap\n    # then remove the value from the heap\n    max_heap.pop()\n\n  # Return the new sorted iterable\n  return max_heap\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/636","completion":"    solution = \"No\"\n    d = b * b - 4 * a * c\n    if d > 0:\n        solution = \"Yes\"\n    return solution<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/637","completion":"  return if actual_cost < sale_amount then\n    false\n  else\n    true\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/638","completion":"\treturn 35.74 + 0.6215 * v - 35.75 * (t * t) + 0.4275 * (t * t * t)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/639","completion":"{\n  if (sample_names.length == 0) {\n    return 0;\n  }\n\n  \/\/ your code here\n  new_list = []\n  for name in sample_names:\n    if (name[0] >= 'a' && name[0] <= 'z') {\n      new_list.append(name)\n    }\n  return new_list.length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/640","completion":"  items.each do |item|\n    item = item.replace \/[^\\(]*\\(([^)]*)\\)\/g, \"$1\")\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/641","completion":"  n = n + 1\n  # Start with the first irreducible number.\n  # Keep incrementing by 1 until we reach the nth irreducible number.\n  # The nth irreducible number is the sum of the prime factorizations of the nth number.\n  #\n  # The prime factorization of a non-zero positive integer n is the list of prime factors of n.\n  # For example, if n=81, the prime factors of 81 are [2,2,2,2,3,5].\n  #\n  # 2 is the first prime factor, 2 is followed by 3, 5, and 11.\n  # The sum of these prime factors is 2+3+5+11=29, and the first nonagonal number is 29.\n  #\n  # 29 is not the first nonagonal number, 29 is the sum of the prime factorizations of 29.\n  # 29 has two prime factors, 13 and 29.\n  #\n  # If you are a math student\nend\n","language":"ruby"}
{"task_id":"MBRBP\/643","completion":"  text.gsub!(\/, 'z', 'z') || \"Not matched!\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/644","completion":"  arr = input[:k]\n  arr.reverse\n  input.begin\n  input = input + arr\n  input.end\n  return input\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/645","completion":"  prod = 1\n  for each in test_list\n    prod = prod * each[k]\n  end\n  puts prod\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/646","completion":"  n_cubes = (n^3 - n) \/ (k-1)\n  return n_cubes\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/647","completion":"  res = []\n  for i in text.split():\n    res.append(i.upper())\n  return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/648","completion":"  i = 0\n  for i < (len(lst)\/2)\n    exchange = lst[i]\n    lst[i] = lst[len(lst)-1-i]\n    lst[len(lst)-1-i] = exchange\n  end\n  return lst\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/649","completion":"  nums.each_index do |index|\n    nums[index + 1].times || [] + (nums[index] + nums[index + 1])\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/650","completion":"  arr1.size == arr2.size ? true : false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/651","completion":"    \"\"\"\n    Given 2 tuples, check if test_tup1 is a subset of test_tup2\n    \"\"\"\n\n    if len(test_tup1) < len(test_tup2):\n        return False\n\n    return all(x in test_tup2 for x in test_tup1)\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/652","completion":"  result = []\n  for i in test_list\n    for j in i\n      result.append(j)\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/653","completion":"  d = {}\n  i = 0\n  for k, v in l\n    d[k] = d[k] || []\n    d[k].append(v)\n  return d\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/654","completion":"  n = l + b\n  return (n * 2)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/655","completion":"  n > 0 and (n*n*n*n*n + 5*n*n*n*n)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/656","completion":"  diffs = a - b\n  diffs.sort\n  return diffs.last - diffs.first + n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/657","completion":"  n!.to_i.first\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/658","completion":"  if list1.empty?\n    nil\n  else\n    head = list1.first\n    tail = list1.rest\n    if head.occurrences > tail.occurrences\n      (max_occurrences rest)\n    else\n      (max_occurrences head rest)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/659","completion":"  y = [x[0]]\n  for i in x.slice(1)\n    if x[i] == y[i-1]\n      y << y [i-1]\n    else\n      y << x[i]\n  y\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/660","completion":"  (l1 < r1 && l2 < r2) || (l1 > r1 && l2 > r2) || (l1 == r1 && l2 == r2)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/661","completion":"\tsum = 0\n\tfor i in range(n-2):\n\t\tsum = max(sum, arr[i] + arr[i+1] + arr[i+2])\n\n\tfor i in range(n-1):\n\t\tsum = max(sum, arr[i] + arr[i+1])\n\n\treturn sum\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/662","completion":"  result = {}\n  key_array = []\n  value_array = []\n  for key, value in dict1.items()\n    key_array.append(key)\n    value_array.append(value)\n  key_array = key_array.sort\n  value_array = value_array.sort\n  for key, value in zip(key_array, value_array)\n    result[key] = value\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/663","completion":"    max_val = 0\n    for i in range(1, n+1)\n        max_val = max(max_val, i % x == y-1 and i or 0)\n    return max_val\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/664","completion":"  num_even = 0\n  for even_num in (n + 1) until even_num\n    if even_num % 2 == 0\n      num_even + 1\n  end\n  return num_even * (n + 1)\/2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/665","completion":"  num_list.reverse.first\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/666","completion":"\tstr = string\n\tcount = 0\n\ti = 0\n\twhile i < str.length() - 1:\n\t\tif str[i] == char:\n\t\t\tcount = count + 1\n\t\t\ti = i + 1\n\t\telse:\n\t\t\ti = i + 1\n\treturn count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/667","completion":"  vowels.each { |v| s.match(v).size }\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/668","completion":"  str_arr = string.split(char)\n  return char.join str_arr\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/669","completion":"  ip.to_s.gsub(\/.{1,3}\/, \"x\") ||= \"\"\n  @ip && ip.length == 4 && @ip == ip.s.to_i\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/670","completion":"  return nums.all?(nums.last - nums.first >= 0):false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/671","completion":"  set @m = 0;\n  while (n > 0)\n    m = m | n & -n;\n    n = n >> 1;\n  return m;\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/672","completion":"    return max(num1, num2, num3)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/673","completion":"  return (1..list).sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/674","completion":"  return string.gsub(\/\\b(\\w+)\\b(?::\\1)+\/g, '')\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/675","completion":"  while x <= y\n    if x + y >= m and x + y <= n\n      return 20\n    x += 1\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/676","completion":"\treturn text1.gsub(regex_match_pattern(), \"\")\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/677","completion":"  if a + b > c and b + c > a and c + a > b\n    return true\n  end\n  return false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/678","completion":"  return str1.gsub(\/\\s\/, \"\")\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/679","completion":"\tkeys = []\n\tfor i in range(0, len(ditionary))\n\t\tkeys << [ditionary[i][key]]\n\treturn keys[0]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/680","completion":"  nums.sort\n  nums.reverse\n  prev = \"\"\n  return (nums == prev).to_f\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/681","completion":"    div = 2\n    while n != 1\n        div = next_prime(div)\n        if n % div == 0\n            break\n    end\n    div\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/682","completion":"    nums1.map {|i| i * nums2[i]}\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/683","completion":"  n = n.to_i\n  s = 0\n  while n >= 0\n    s = s + n * n\n    n = n - 1\n  return s.to_f == s\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/684","completion":"  count = 0\n  for i in 0..n\n    if str[i] == x\n      count += 1\n  end\n  return count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/685","completion":"  prime_numbers = []\n  prime_numbers[:0] = [2]\n  prime_numbers_sum = 2\n  while prime_numbers_sum < n\n    prime_numbers_sum = prime_numbers_sum + prime_numbers.last\n    prime_numbers.push(prime_numbers_sum)\n  return prime_numbers.reduce_right { |p| p }\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/686","completion":"  hash = {}\n  for i in test_tup\n    hash[i] = hash.get(i, 0) + 1\n  return hash\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/687","completion":"  if b == 0\n    return a\n  else\n    return recur_gcd(b, a % b)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/688","completion":"  c = real(a) + imag(b)\n  d = real(b) - imag(a)\n  return c + d\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/689","completion":"  jumps = 0\n  last = 0\n\n  for i in arr.take(n)\n    if i > last\n      jumps += 1\n      last = i\n\n  return jumps\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/690","completion":"  nums.map {|num| num*num}\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/691","completion":"\tres = {}\n\tfor item in test_list:\n\t\tif item[1] not in res:\n\t\t\tres[item[1]] = [item[0]]\n\t\telse:\n\t\t\tres[item[1]].append(item[0])\n\treturn res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/692","completion":"    n%10 # last digit\n    n%100 - n%10 # second last digit\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/693","completion":"  text = text1.gsub(\/ +(?= )\/g, \"\")\n  return text\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/694","completion":"  result = []\n  for key, value in test_dict.items()\n    if value not in result\n      result << value\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/695","completion":"  first_index = 0\n  first_tuple_size = test_tup1.size\n  for i in test_tup2\n    if (test_tup1[i] < first_tuple_size)\n      if (test_tup1[first_index] > test_tup2[i])\n        first_index = i\n  return first_index == 0\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/696","completion":"  my (zip) = {}\n  my (list1_length) = list1.length\n  my (list2_length) = list2.length\n  my (max_length) = max (list1_length, list2_length)\n\n  for i from 1 to max_length\n    my (zip[i]) = []\n    my (zip[i]) << [list1[i - 1] if i - 1 >= 0 and i - 1 < list1_length\n                  else []\n                  for j from 1 to max_length\n                  if i - 1 >= 0 and j - 1 >= 0\n                  else []]\n\n    my (zip[i]) << [list2[j - 1] if j - 1 >= 0 and j - 1 < list2_length\n                  else []\n                  for j from 1 to max_length\n                  if j - 1 >= \nend\n","language":"ruby"}
{"task_id":"MBRBP\/697","completion":"  num_even = 0\n  array_nums.each do |element|\n    if element % 2 == 0\n      num_even += 1\n  end\n  return num_even\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/698","completion":"  result = {}\n\n  for item in test_dict.items\n    result[item[0] * item[1]] = item[0] * item[1]\n\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/699","completion":"  if str1.length == str2.length\n    return \"Not Possible\"\n  a = 1\n  b = 0\n  i = 1\n  while i <= str1.length\n    if str1[i] == str2[i]\n      i += 1\n    else\n      if str1[i] == str2[i-1]\n        b += 1\n        i += 1\n      else\n        if str1[i-1] == str2[i]\n          a += 1\n          i += 1\n        else\n          a += 1\n          b += 1\n          i += 1\n  if a < b\n    return a\n  else\n    return b\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/700","completion":"  i = 0\n  range_count = 0\n  for x in li\n    if x >= min and x <= max\n      i = i + 1\n      range_count = range_count + 1\n    end\n  end\n  return i\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/701","completion":"  i = 0\n  j = arr.length-1\n  while i <= j:\n    m = (i + j) \/ 2\n    if arr[m] == arr[m-1]: i = m + 1\n    else: j = m - 1\n  if j == -1:\n    return -1\n  else:\n    return j\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/702","completion":"  a = arr.sort\n  a.reverse\n  b = []\n  for (i in a)\n    if (a[i] > 0)\n      b.push a[i]\n  for (i in b)\n    if (b[i] <= k)\n      n -= b[i]\n      a[i] = 0\n    else\n      return n\n  return n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/703","completion":"  d.each do |k, v|\n    if v == x\n      return true\n    end\n    return false\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/704","completion":"  harmonic_sum = 1\n  for i in range(1,n)\n    harmonic_sum = harmonic_sum + 1 \/ i\n  end\n  return harmonic_sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/705","completion":"  n = length(list1)\n  list1 = sort_sublists_recursive(list1, n)\n  return list1\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/706","completion":"\tarr1.each_index do |i|\n\t\tarr2.each_index do |j|\n\t\t\tif (arr1[i] == arr2[j])\n\t\t\t\tm = m - 1\n\t\t\telse if (m == 0)\n\t\t\t\treturn false\n\t\tend\n\tend\n\treturn m == 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/707","completion":"  ## Write your code here\n  return 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/708","completion":"\treturn split(string)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/709","completion":"  result = {}\n  for i in test_list:\n    for j in i:\n      if j not in result:\n        result[j] = 1\n      else:\n        result[j] += 1\n  return result\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/710","completion":"  last_elm = 0\n  initial = 0\n  for i in test_tup.to_a\n    initial = initial + i\n  initial = initial - last_elm\n  return initial, last_elm\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/711","completion":"  (digits_at_even, digits_at_odd) = split_digits(n)\n  product = digits_at_even.product_with(digits_at_odd)\n  return (product % 2) == 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/712","completion":"  list2 = []\n  for item in list1\n    if not (item in list2)\n      list2.append(item)\n  return list2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/713","completion":"  # Your code here\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/714","completion":"  nums = []\n  i = 2\n\n  while i <= n\n    if n % i\n      nums.push(i)\n    i = i + 1\n  \n  return nums.size<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/715","completion":"  res = []\n  if (test_str != \"\")\n    {\n      res = [1]\n      last_item = \"\"\n      item = \"\"\n      pos = 0\n      while (pos < test_str.length)\n        {\n          char = test_str[pos]\n          if (char == \",\")\n            {\n              res.push(1)\n              if (last_item == \"\")\n                {\n                  res.push(item)\n                  item = \"\"\n                }\n              else\n                item = item + char\n            }\n          else if (char == \"\\n\" || char == \"\\r\")\n            {\n              if (item == \"\")\n                {\n                  if (last_item == \"\")\n                    {\n                      res.push(1)\n                    }\n                  else\n                    res.push(1)\n                }\n              else\n                res.push\nend\n","language":"ruby"}
{"task_id":"MBRBP\/716","completion":"  length = 2 * (a - 1) + 1\n  width = a\n  perimeter = 2 * (length + width)\n  return perimeter\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/717","completion":"  nums = nums.sort()\n  sds = []\n  for i in range(1, len(nums)):\n    sds.append((nums[i] - nums[i - 1])**2)\n  return sum(sds) \/ len(sds)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/718","completion":"  result = []\n  counter = 0\n  while counter < len(list1):\n    alternate = list1[counter]\n    counter += 1\n    result.append(alternate)\n    counter %= len(list1)\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/719","completion":"  # match anything that has an a followed by zero or more b's\n  # then return that match\n  # else return \"Not matched\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/720","completion":"    test_tup = append(test_tup, test_dict)\n    return test_tup\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/721","completion":"  max = 0.0\n  best = nil\n  for i = 1, n\n    c = 0.0\n    for j = 1, n\n      c += cost(i, j)\n    if c > max\n      max = c\n      best = [i, j]\n    end\n  end\n  return max \/ n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/722","completion":"\tres = {}\n\tfor (name in students) {\n\t\tif students[name][0] > h and students[name][1] > w:\n\t\t\tres[name] = students[name]\n\t}\n\treturn res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/723","completion":"\tlength = nums1.size()\n\t# map() returns a list with same pair element\n\treturn (length * length) - length + nums1.inject(0, 0).inject(length, length).map(&:==).inject(0, 0).inject(length, length).sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/724","completion":"\ts = 0\n\twhile power >= 1\n\t\ts = (s * base) + power%base\n\t\tpower = power \/ base\n\tend\n\treturn s\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/725","completion":"{\n    # write your code here\n    return null;\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/726","completion":"    res = []\n    for i in range(len(test_tup) - 1):\n        res.append(test_tup[i] * test_tup[i + 1])\n    return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/727","completion":"\tr = \"\"\n\tfor c in s\n\t\tif c.isalnum()\n\t\t\tr += c\n\treturn r<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/728","completion":"  result = []\n  i = 0\n  while (i < len(lst1)) do\n    result.push(lst1[i] + lst2[i])\n    i += 1\n  end\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/729","completion":"    return (nums1 + nums2).map(lambda x: x * 2)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/730","completion":"  nums.sort\n\n  length = length.0\n\n  for i in [0, length - 1]\n    if nums[i] == nums[i+1]\n      nums.pop[i + 1]\n    end\n  end\n\n  return nums\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/731","completion":"  PI = 3.14159265358979323846\n  return 4 * PI * (r ** 2) * h\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/732","completion":"\ttext = text.replace(\/ \/g,\":\")\n\ttext = text.replace(\/,\/g,\":\")\n\ttext = text.replace(\/\\.\/g,\":\")\n\treturn text\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/733","completion":"  i = 0\n  length = a.length\n\n  while i < length\n    if a[i] == x\n      break\n    else\n      i += 1\n\n  return i\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/734","completion":"    prod = 1\n    for i in arr\n        prod *= i\n    return prod \/ arr.length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/735","completion":"  n = n & ~(1 << 1) | 1 << 1\n  return n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/736","completion":"  start = 0\n  end = a.size - 1\n  while start <= end:\n    middle = (start + end) \/ 2\n    if a[middle] == x:\n      return middle\n    if a[middle] < x:\n      start = middle + 1\n    else:\n      end = middle - 1\n  return start<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/737","completion":"  regex = \/^[aeiou]$\/\n  # write your code here\n  return \"Valid\" if regex.match(string) else \"Invalid\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/738","completion":"    return (1.0 + geometric_sum(n - 1)) ** n<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/739","completion":"  result = 0\n  triangular_num = 1\n  while result < n\n    result = result + triangular_num\n    triangular_num = triangular_num + 1\n  end\n  return triangular_num - result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/740","completion":"  hash = {}\n  for i in 0..-1\n    if test_tup[i] in hash\n      hash[test_tup[i]] = hash[test_tup[i]] + 1\n    else\n      hash[test_tup[i]] = 1\n  end\n  return hash\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/741","completion":"  character_list = s.chars.collect\n  if character_list.all { |c| character_list.all(&c) }\n    true\n  else\n    false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/742","completion":"\treturn (4 * (side ** 2) * (1 \/ 2)) ** 0.5\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/743","completion":"  # Your code goes here.\n  return []\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/744","completion":"  return (any?(test_tup[i] == nil) for i in 0..length(test_tup))\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/745","completion":"    numbers = []\n\n    for i in range(startnum, endnum + 1):\n        nums_as_string = str(i)\n        digits = len(nums_as_string)\n\n        for j in range(digits):\n            digit = nums_as_string[j]\n            if i % digit != 0:\n                numbers << [i]\n                break\n\n    return numbers\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/746","completion":"    area = (2*3.14*r*r)*a\n    return area<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/747","completion":"  longest = 0\n  for i in seq_1[m]..seq_2[n]\n    if seq_1[m]..seq_2[n]..seq_3[o]\n      longest\n      break\n  end\n  return longest\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/748","completion":"  str1.gsub(\/\\w\\S*\/g, function (m)\n    return m.capitalize\n  end)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/749","completion":"  nums_int = map(lambda s: int(s.strip()), nums_str)\n  nums_int.sort()\n  return nums_int\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/750","completion":"  test_list.add(test_tup)\n  return test_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/751","completion":"\treturn (2 * i + 2 < arr.size \n\t\tand arr[2 * i + 1] < arr[i] \n\t\tand arr[2 * i + 2] < arr[i])\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/752","completion":"\t# base case\n\tif n == 1:\n\t\treturn 1\n\n\t# recursive case\n\telse:\n\t\treturn 1 + jacobsthal_num(n-1)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/753","completion":"  list = []\n  for x in range(0, k)\n    min = min_key(test_list)\n    list.append(min)\n    test_list.remove(min)\n  end\n  return(list)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/754","completion":"  index_list = []\n  for i1 in l1\n    for i2 in l2\n      for i3 in l3\n        if i1 == i2 == i3\n          index_list << i1\n  return index_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/755","completion":"  if (numbers.sort! < 0)\n    nil\n  end\n  0 if (numbers.sort! > 1)\n    numbers.sort! - 1\n  end\n  1 if (numbers.sort! > 0)\n    numbers.sort! - 1\n  end\n  0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/756","completion":"  if text.match \/^a\\b\/\n    # Match!\n    # ...\n  else\n    # Not matched!\n    # ...\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/757","completion":"    c = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1][::-1]:\n            c += 1\n    return c\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/758","completion":"  list_length = length(list1)\n  result = {}\n  unique_list_count = 0\n  for i in 0..list_length - 1\n    item = list1[i]\n    sublist_length = length(item)\n    for j in 0..sublist_length - 1\n      key = item[j]\n      if not result[key]\n        unique_list_count += 1\n        result[key] = 1\n      end\n    end\n  end\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/759","completion":"  num.match(\/^(\\d+)(\\.\\d{1,2})?$\/) and true\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/760","completion":"  n == arr.nubmer\n  a.uniq(arr)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/761","completion":"  d * (a * 180 \/ pi)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/762","completion":"    if monthnum3 % 100 == 0\n      return true\n    else if monthnum3 % 4 == 0\n      return true\n    else if monthnum3 % 400 == 0\n      return true\n    else\n      return false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/763","completion":"  arr.sort\n  diff = n\n  arr.each_with_index do |num, idx|\n    if arr[idx + 1] - num < diff\n      diff = arr[idx + 1] - num\n    end\n  end\n  diff\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/764","completion":"  length = str.length\n  counter = 0\n  for i in 0..length\n    counter += str[i] - '0'\n  end\n  counter\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/765","completion":"  n.times do\n    if n == 13\n      puts \"This is the 13th number in the sequence\"\n    elsif n == 11\n      puts \"This is the 11th number in the sequence\"\n    else\n      n += 1\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/766","completion":"  # If the list is empty, return an empty list\n  if (l1.size == 0)\n    return nil\n  # Make an empty list, for storing pairs\n  l2 = []\n  # Iterate over the first list\n  for i in l1.sort_by {|x| x}\n    # The first element of the current pair\n    first = l1[i]\n    # For every other element\n    for j in l1.exclude(i)\n      # If the element doesn't match with the first\n      if (l1[j] != first)\n        # Make a new pair, with first and second element\n        l2 << [first, l1[j]]\n  # Return the list of pairs\n  return l2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/767","completion":"  pairs = 0\n  arr.each_with_index do |a, i|\n    pairs += (arr[i+1] == sum - arr[i]) ? 1 : 0\n  end\n  return pairs\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/768","completion":"  odd = true\n  if (x % 2 != 0)\n    odd = false\n  return odd\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/769","completion":"  return (select(li1, -1) - select(li2, -1)).to_a\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/770","completion":"  i = 1, sum = 0\n  while i <= n\n    sum += (i * i * i * i)\n    i += 2\n  end\n  sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/771","completion":"    stack = []\n    for c in exp:\n        if c == '{' or c == '[' or c == '(':\n            stack.append(c)\n        else:\n            if stack.empty() == False:\n                if stack.pop() != c:\n                    return False\n    return stack.empty()\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/772","completion":"  # get all the words from the string\n  words = test_str.split(' ')\n\n  result = \"\"\n  for word in words\n    # if the word's length is less than k, skip the word\n    if len(word) <= k\n      continue\n    # otherwise, concatenate the word to result\n    result += (word + ' ')\n  # return result\n  return result\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/773","completion":"  res = []\n  start = 0\n  end = 0\n  while start < text.length\n    start_index = text.indexOf(pattern, start)\n    if start_index != -1\n      res << [pattern, start_index, start_index + pattern.length]\n      start = start_index + pattern.length\n    else\n      res << [pattern, start, start]\n      break\n  return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/774","completion":"    if email.find(\"@\") >= 0 and email.find(\".\") >= 0 and email.find(\"@\") < email.find(\".\"):\n        return \"Valid Email\"\n    else:\n        return \"Invalid Email\"\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/775","completion":"  nums.size > 0 && nums.every(index % 2 == 1)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/776","completion":"    v_counter = 0\n    for i in test_str\n        if i in \"aeiouAEIOU\"\n            v_counter + 1\n    end\n    return v_counter\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/777","completion":"  arr.sort\n  result = []\n  for i in arr\n    if arr.count(i) > 1\n      result.push(arr.count(i))\n    end\n    result + [arr.count(i) * i]\n  end\n  sum(result)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/778","completion":"  list2 = []\n  if len(list1) == 0:\n    return list2\n  if len(list1) == 1:\n    return list2\n  if len(list1) == 2:\n    return [list1, list1]\n  list2.append(list1[0])\n  list2.append(list1[1])\n  for i in range(2, len(list1)):\n    if list1[i] != list1[i-1]:\n      list2.append(list1[i])\n  return list2\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/779","completion":"  list1.sort\n  list2 = []\n  hash = {}\n  for i in list1\n    if i not in list2\n      hash[hash.size].append(i)\n      list2 << i\n    end\n  end\n  return hash\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/780","completion":"    combinations = []\n    if (test_list is None or len(test_list) == 0) return combinations\n\n    for x in xrange(len(test_list)):\n        temp = test_list[:]\n        temp.remove(test_list[x])\n        temp = find_combinations(temp)\n        if (temp is not None and len(temp) > 0):\n            temp.append(test_list[x])\n            combinations.append(temp)\n    return combinations\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/781","completion":"  n % 2 == 0 ? \"Even\" : \"Odd\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/782","completion":"  arr_length = arr.length\n  if (arr_length < 1)\n    return 0\n\n  total = 0\n  for i = 0; i < arr_length; i += 1\n    for j = i; j < arr_length; j += 2\n      total += arr[j]\n\n  return total\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/783","completion":"    d = max(r, g, b)\n    if d == 0.0:\n        return [0.0, 0.0, 0.0]\n\n    s = d\/255.0\n    v = d\/255.0\n    if s == 0:\n        h = 0.0\n    else:\n        if r == 0:\n            h = g - b\/s\n        elif g == 0:\n            h = 2 + b - r\/s\n        else:\n            h = 4 + r - g\/s\n\n        if h < 0.0: h += 6.0\n\n        h \/= 6.0\n    return [h, s, v]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/784","completion":"  even_count = 0\n  odd_count = 0\n  for i in list1\n    even_count += (i % 2 == 0) ? 1 : 0\n    odd_count += (i % 2 != 0) ? 1 : 0\n  return even_count * odd_count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/785","completion":"  res = [0, 0, 0]\n  res[0] = int(test_str[1])\n  res[1] = int(test_str[3])\n  res[2] = int(test_str[5])\n  return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/786","completion":"  length = 0\n  for element in a\n    if element >= x\n      length += 1\n  return length + a.index(x)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/787","completion":"  text.match(a+b{3})\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/788","completion":"    new_list = test_list.append(test_str)\n    return new_list\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/789","completion":"\tpolygon = [s]\n\tfor i = 0 until l\n\t\tpolygon.push(s * (2 * i + 1))\n\tend\n\tpolygon.reduce(0, (a, b) => a + b)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/790","completion":"  nums.each_with_index do |num, i|\n    if ((i % 2 == 0) and (nums[i] % 2 == 0)) then\n      true\n    else\n      false\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/791","completion":"  a = test_tup.shift\n  if a.is_a?(Array)\n    return [a].concat(remove_nested(test_tup))\n  else\n    return test_tup\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/792","completion":"  num = 0\n  for i in 0..<#input_list.length\n    num += 1\n  end\n  return num\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/793","completion":"  arr.index(x, 0, n - 1)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/794","completion":"  text.gsub(\/a.*?b\/, \"Found a match!\")\n  text.gsub(\/a.*?b\/, \"Not matched!\")\n  text.gsub(\/a.*?b\/, \"Not matched!\")\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/795","completion":"  items.sort { |a, b| a.price - b.price }\n\n  result = []\n  heap = new Heap\n  items.each do |item|\n    if (heap.size < n)\n      heap.push(item.price)\n    else if (item.price > heap.top)\n      heap.pop\n    else\n      result << item\n  end\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/796","completion":"    s = 0\n    for key, value in dict.items()\n        s += value\n    end\n    return s\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/797","completion":"  return (l + r) \/ 2 + 1 - (r - l + 1) % 2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/798","completion":"  arr.each_with_index do |i, v|\n    arr[i+1].to_f * (i-arr[i+1].to_f)\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/799","completion":"  if d == 0\n    return n\n  end\n  # use bitwise left shift:\n  return (n << d) | (n >> (32 - d))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/800","completion":"  text.gsub(\/\\s+\/, \"\")\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/801","completion":"  count = 0\n  while x != y\n    if x == z\n      count += 1\n    x += 1\n  end\n  x += 1\n  while x != y\n    if x == z\n      count += 1\n    x += 1\n  end\n  return count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/802","completion":"  num_rotations = 0\n  last_elem = arr[n - 1]\n  for i in arr[0..n-2]\n    if i >= last_elem\n      num_rotations += 1\n  end\n  return num_rotations\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/803","completion":"  if n > 0\n    sqrt = n.sqrt\n    n == sqrt * sqrt\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/804","completion":"  arr.each_cons(2).inject(0) do |pair, idx|\n    if pair.second % idx == 0\n      return pair.second == n\n    end\n  end\n  return false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/805","completion":"  # Sum all elements\n  total = sum_elements(lists)\n  # Find maximum of total\n  max_sum = max(total)\n  # Find index of maximum\n  index = total.index(max_sum)\n  # Get the list whose sum is the maximum\n  max_sum_list = lists[index]\n  # Return the list whose sum is the maximum\n  return max_sum_list\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/806","completion":"    result = 0\n    pos = 0\n    for char in test_str:\n        if char.isupper():\n            pos = test_str.find(char, pos+1)\n            if result < pos - result:\n                result = pos - result\n    return result<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/807","completion":"\ti = 0\n\toddNums = []\n\twhile i < (len(nums)):\n\t\tif nums[i] % 2 != 0:\n\t\t\toddNums.append(nums[i])\n\t\ti += 1\n\treturn oddNums[0]\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/808","completion":"  res = false\n  for tup in test_tup\n    if k == tup\n      res = true\n  return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/809","completion":"  idx = 0\n  for el in test_tup2\n    if el < test_tup1[idx]\n      puts el\n      true\n    end\n    idx += 1\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/810","completion":"  arr = []\n  for i = a..d\n    arr << i\n  end\n  arr.each_with_index { |i, e| e.times(b) }\n  arr.join.\"\"\n  arr.reverse\n  return arr\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/811","completion":"  test_list1.sort()\n  test_list2.sort()\n\n  if (test_list1 == test_list2)\n    return true\n  else\n    return false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/812","completion":"  street = street.split()\n  if street.length >= 2:\n    return street[0][0] + \".\" + street[1]\n  else:\n    return street[0][0]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/813","completion":"  length = 0\n  while(length < str1.size)\n    length = length + 1\n  end\n  return length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/814","completion":"  area = q * p\n  return area\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/815","completion":"  idx = -1\n  res = []\n  if n % 2 == 0 then\n    while idx <= n - 2 do\n      if arr[idx] == 1 then\n        idx += 1\n        if arr[idx] == 1 then\n          idx += 1\n          while idx <= n - 2 do\n            if arr[idx] == 1 then\n              idx += 1\n            end\n            res << arr[idx]\n          end\n        end\n      end\n    end\n  else\n    while idx <= n - 2 do\n      if arr[idx] == 1 then\n        idx += 1\n        if arr[idx] == 1 then\n          idx += 1\n          while idx <= n - 2 do\n            if arr[idx] == 1 then\n              idx += 1\n            end\n            res << arr[idx]\n          end\n        end\n      end\n    end\n  end\n  return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/816","completion":"  test_tup.clear\n  return\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/817","completion":"    return filter(lambda x: x % m == 0 or x % n == 0, nums)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/818","completion":"  return str.chars.filter(char => char == char.to_i).length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/819","completion":"  length = 0\n  hash = {}\n  if not lists?\n    return nil\n  for x in lists\n    if hash.include?(x)\n      hash[x] + 1\n    else\n      hash[x] = 1\n    length = length + 1\n  return [[key, val] for key, val in hash.items() if val > 1]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/820","completion":"  return monthnum1 == 28\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/821","completion":"  merge = dict1.merge(dict2)\n  merge.keys % @merge.keys.each do |k|\n    merge[k] = [dict1[k], dict2[k]].max\n  end\n  return merge\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/822","completion":"  p = p.strip\n  p = p.split(\"@\")[0]\n  p = p.strip\n  p = p.split(\" \").join(\"\")\n  p = p.strip\n  if (p == \"\") { return (false)}\n  return (true)\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/823","completion":"    if sample == ''\n        true\n    end\n    if string.gsub!(\/\/, \/[^\/]*\/) == sample\n        true\n    else\n        false\n    end\n    puts \"string #{string} starts with substring #{sample}\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/824","completion":"  new_l = []\n  [ new_l.push(l[i]) if l[i] % 2 != 0\n    else new_l.push(l[i]) for i in l.indices\n  end\n  l.clear\n  l.new_l\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/825","completion":"  result = []\n  nums.each_with_index do |i, n|\n    result.push(nums[i unless list_index.include?(i)])\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/826","completion":"  side_type = [\"Obtuse-angled Triangle\", \"Acute-angled Triangle\", \"Right-angled Triangle\"]\n  if (a + b > c)\n    return side_type[0]\n  if (a + c > b)\n    return side_type[1]\n  if (b + c > a)\n    return side_type[2]\n  return \"Error\"<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/827","completion":"    return map(&:first, list1).inject(0) + map(&:second, list1).inject(0) + map(&:third, list1).inject(0)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/828","completion":"  result = []\n  for i in string\n    if i.isalnum()\n      result << 1\n    elsif i.isdigit()\n      result << 1\n    elsif i.isspace()\n      result << 1\n    elsif i == '.'\n      result << 1\n    elsif i == '!'\n      result << 1\n    elsif i == '@'\n      result << 1\n    elsif i == '#'\n      result << 1\n    elsif i == '$'\n      result << 1\n    elsif i == '%'\n      result << 1\n    elsif i == '^'\n      result << 1\n    elsif i == '&'\n      result << 1\n    elsif i == '*'\n      result << 1\n    elsif i == '?'\n      result << 1\n    elsif i == '+'\n      result << 1\n    elsif i == '-'\n      result << 1\nend\n","language":"ruby"}
{"task_id":"MBRBP\/829","completion":"  # Create a variable to count the number of occurrences of the most frequent string\n  counter = {}\n\n  # Iterate through the given list of strings\n  for item in input:\n    # If the item does not exist in the dictionary, add it\n    if not item in counter:\n      counter[item] = 0\n    # Increment the counter\n    counter[item] += 1\n\n  # Find the key with the highest value\n  return max(counter, key=counter.get)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/830","completion":"  a = a + (0.0, 0.5)[digits <= 0]\n  a = (a - 0, 1)[a < 0] + a\n  return a \/ (0.0, 0.5)[digits > 0]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/831","completion":"  arr.map(&:size).zip(arr.sort_by(.|> reverse)).filter(&:< n).length\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/832","completion":"  max = 0\n\n  match = \/(\\d+)\/.exec(input)\n\n  if match != nil\n    max = max + 1 unless match[0] < max\n    max = max + match[0]\n  end\n\n  return max\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/833","completion":"  result = []\n  for key in dict\n    result.append(key)\n  end\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/834","completion":"    def spiral_matrix(n, d, i, j)\n        i = i or 1\n        j = j or 1\n        d = d or n\n        n = n + 1\n        m = n - i\n        if i == 1 and j == 1\n            return\n        if m == 1\n            spiral_matrix(n, d, i + 2, j + 2)\n        else if d == 1\n            spiral_matrix(n, d, i + 2, j)\n        else\n            spiral_matrix(n, d, i + 2, j + 2) {\n                @_\n            }\n            spiral_matrix(n, d - 2, i, j + 2) {\n                @_\n            }\n    end\n    spiral_matrix(n, n)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/835","completion":"  return (y2 - y1) \/ (x2 - x1)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/836","completion":"  # Write your code here\n  return -1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/837","completion":"  return 0.0 + 1.0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/838","completion":"  if(s1.length == 0):\n    return 0\n  if(s2.length == 0):\n    return 0\n  if(s1 == s2):\n    return 0\n  if(s1.substring(0, 1) != s2.substring(0, 1)):\n    return 1 + min_swaps(s1[1:], s2)\n  else:\n    return 1 + min(min_swaps(s1[1:], s2), min_swaps(s1, s2[1:]))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/839","completion":"  tup.sort_by_first\n  return tup\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/840","completion":"    if a*a - 4*b*c == 0 and a*a + 4*b*c == 0\n        \"Yes\"\n    else\n        \"No\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/841","completion":"  count = 0\n  i = 0\n  j = n - 1\n  while i < j\n    if arr[i] < arr[j]\n      count += j - i\n      i += 1\n    else\n      j -= 1\n  end\n  return count\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/842","completion":"  length = arr_size - 1\n  while length >= 0\n    if length % 2 == 0\n      if arr[length] == arr[length + 1]\n        return length\n      else\n        length -= 1\n    else\n      if arr[length] != arr[length + 1]\n        return length\n      else\n        length -= 1\n  return -1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/843","completion":"  num = 1\n  pq = []\n  for p in primes\n    pq.enqueue(p)\n  while pq.length > 1\n    next_pq = []\n    for i in xrange(len(pq) \/ 2)\n      next_pq.push(heappop(pq) * heappop(pq))\n    next_pq.push(heappop(pq))\n    num *= heappop(next_pq)\n    pq = next_pq\n  return num * heappop(pq)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/844","completion":"  (n - k + 1).to_i\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/845","completion":"  digits = 0\n  factorial = 1\n  for i in range(1, n + 1)\n    factorial *= i\n  while factorial >= 10\n    digits += factorial % 10\n    factorial = factorial \/ 10\n  digits += factorial\n  return digits\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/846","completion":"  a, b = map(arr.sort, @)\n  if a[n] >= b[0] and a[n] >= b[1] and a[n] >= b[2] and a[n] >= b[3]:\n    return 0\n  if b[n-1] >= a[0] and b[n-1] >= a[1] and b[n-1] >= a[2] and b[n-1] >= a[3]:\n    return 1\n  if dep[n-1] >= a[0] and dep[n-1] >= a[1] and dep[n-1] >= a[2] and dep[n-1] >= a[3]:\n    return 2\n  return 3\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/847","completion":"  return [] if @xs.empty?\n  (0, @xs)[0].to_a\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/848","completion":"    return (base1 + base2) * height \/ 2\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/849","completion":"  n = n.to_i\n  c = 0\n  for i in [2, n]\n    while i <= n\n      c += n%i\n      i += 1\n  end\n  return c\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/850","completion":"    # area of triangle abc = s (a + b + c)\/2\n    # s = (ab + ac + bc)\/2\n    # s = (a+b+c)\/2\n    s = (a + b + c)\/2\n    # area of triangle abc = s (a + b + c)\/2\n    # s = (ab + ac + bc)\/2\n    # s = (a+b+c)\/2\n    if s > (a + b + c)\/2\n        # can be divided into two triangles by giving angles > 90\n        # (a + b + c) < 180\n        return true\n    else\n        return false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/851","completion":"  n = n + 1\n  sum = sum + (1\/n)\n  while n > 0\n    if n % 10 == 0\n      n = n \/ 10\n      sum = sum + (1\/n)\n      sum\n    else\n      n = n - 1\n      sum = sum + (1\/n)\n      sum\n    end\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/852","completion":"  num_list.filter(&:negative)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/853","completion":"    num = 1\n    sum = 0\n    while num <= n\n        if n % num == 0\n            sum += num\n        end\n        num += 2\n    end\n    return sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/854","completion":"  new_rawheap = []\n  heapq.heapify(rawheap)\n  while rawheap\n    new_rawheap.push(heapq.heappop(rawheap))\n  end\n  return new_rawheap\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/855","completion":"  if (x % 2 == 0) then\n    true\n  else\n    false\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/856","completion":"  arr_copy = arr.copy\n  min_swaps = 0\n  for i = 0, j = n - 1\n    if arr[i] != arr[j]\n      arr[i] = arr[i] ^ arr[j]\n      arr[j] = arr[i] ^ arr[j]\n      arr[i] = arr[i] ^ arr[j]\n      # we do not need to compare previous and next element of array\n      min_swaps += 1\n    end\n  end\n  return min_swaps\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/857","completion":"{\n  return list1.map(x => list(x))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/858","completion":"  return count_list_recursive(input_list, 0)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/859","completion":"  # define sub_lists()\n  # 1. Initialize an empty array of arrays\n  # 2. Iterate through the list\n  # 3. If the item is not an array:\n  #    a. Add it to the array of arrays and set the array as the current array\n  #    b. Append an empty array\n  # 4. Else:\n  #    a. Add the current array to the sub_lists array\n  #    b. Append the current item to the current array\n  #    c. Create a new empty array\n  #    d. Set the current array as the current array's new value\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/860","completion":"  return \"Accept\" if \\\n    \/$^[a-zA-Z0-9]*$\/.test(string) and \\\n    \/$^[a-zA-Z0-9]*$\/.test(string.slice(-4)) and \\\n    \/$^[a-zA-Z0-9]*$\/.test(string.slice(-6)) and \\\n    \/$^[a-zA-Z0-9]*$\/.test(string.slice(-8)) and \\\n    \/$^[a-zA-Z0-9]*$\/.test(string.slice(-10)) and \\\n    \/$^[a-zA-Z0-9]*$\/.test(string.slice(-12)) and \\\n    \/$^[a-zA-Z0-9]*$\/.test(string.slice(-14)) and \\\n    \/$^[a-zA-Z0-9]*$\/.test(string.slice(-16)) and \\\n    \/$^[a-zA-Z0-9]*$\/.test(string.slice(-18)) and \nend\n","language":"ruby"}
{"task_id":"MBRBP\/861","completion":"  # Your code goes here.\n  return []\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/862","completion":"  words = text.split(' ')\n  word_freq = {}\n  for word in words\n    if word_freq.has_key?(word)\n      word_freq[word] += 1\n    else\n      word_freq[word] = 1\n  ordered_word_freq = []\n  for (word, freq) in word_freq\n    ordered_word_freq.add([word, freq])\n  ordered_word_freq.sort(cmp=lambda x, y: cmp(y[1], x[1]))\n  result = []\n  for (i, word_freq) in enumerate(ordered_word_freq):\n    if i == n\n      break\n    result.add(word_freq)\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/863","completion":"  # Your code here\n  pass\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/864","completion":"  \"\"\"\n  Input: A list of strings\n  Output: A list of all palindromes in the input list.\n  \"\"\"\n  import re\n  palindromes = filter(lambda text: re.search(r'[A-Za-z]{1,}[A-Za-z]+[A-Za-z]{1,}', text) != None, texts)\n  return palindromes\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/865","completion":"  nums.each_cons(n)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/866","completion":"\treturn monthname2.contains(31)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/867","completion":"  arr.sort\n  min_num = 0\n  for i in arr\n    min_num += i\n  if min_num % 2 == 0\n    return min_num\n  return 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/868","completion":"  a.split(\" \").last.size\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/869","completion":"  a = []\n  for item in list1:\n    if not leftrange < item < rigthrange: a.append(item)\n  return a\n\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/870","completion":"  return nums.map { |n| n > 0 }.sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/871","completion":"\treturn string2 in string1 + string1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/872","completion":"  if not list1 or not list2\n    return true\n  else if list1.length < list2.length\n    return false\n  else\n    return check_subset(list1[1:], list2[1:]) and check_subset(list1[1:], list2[1:])\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/873","completion":"  if (n <= 0)\n    [0, 1]\n  elsif (n == 1)\n    [1]\n  elsif (n > 1)\n    [fibonacci(n-1) + fibonacci(n-2)]\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/874","completion":"  length_1 = length_2 = 0\n  while length_1 < str1.length\n    length_1 += 1\n    if length_1 < str1.length and length_2 < str2.length\n      if str1[length_1] == str2[length_2]\n        length_2 += 1\n      else\n        length_2 = 0\n    end\n  end\n  length_1 == str1.length && length_2 == str2.length\n    true\n  else\n    false\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/875","completion":"  last = 0\n  min_diff = 1000\n  for i in test_list:\n    diff = (i[1] - i[0])\n    if diff < min_diff:\n      min_diff = diff\n      last = i[1]\n  return last\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/876","completion":"    return (x * y) \/ gcd(x, y)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/877","completion":"  return sort_string_in(str, 0, str.length)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/878","completion":"  if test_tuple.length != k\n    return false\n  else\n    return true\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/879","completion":"\treturn \"Not matched!\" if (re.search(\"a(.*)b\", text) != null) else \"Found a match!\"\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/880","completion":"    sols = 0\n    D = b**2 - 4*a*c\n    if D >= 0:\n        sols = 2\n        x1 = (-b + D**0.5) \/ (2*a)\n        x2 = (-b - D**0.5) \/ (2*a)\n        if x1 != x2\n            sols = 1\n    else\n        sols = \"No solutions\"\n    return [a, b, c], sols\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/881","completion":"  even_number = 0\n  odd_number = 0\n  for each in list1\n    if each % 2 == 0\n      even_number += each\n    else\n      odd_number += each\n  return even_number + odd_number\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/882","completion":"  return 2*(b+h)\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/883","completion":"    return filter(lambda x: x % m == 0 and x % n == 0, nums)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/884","completion":"    bits = bin(n).split('b')[-1]\n    return l <= int(bits, 2) <= r<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/885","completion":"  set1 = set2 = true\n  if (str1.length != str2.length)\n    return false\n\n  for c1, c2 in zip(str1, str2)\n    if (c1 != c2 and set1)\n      return false\n    if (c1 != c2 and not set2)\n      return false\n    set1 = set2 and c1 == c2\n    set2 = set1 and c2 == c1\n  return set1 and set2\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/886","completion":"  length = 0.0\n  while numbers.any?\n    length += 1\n    numbers = numbers.drop(1)\n  end\n  return numbers.sum\/length.to_f\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/887","completion":"    return n & 1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/888","completion":"    result = []\n    for i in range(len(test_tup1)):\n        test_tup1[i] = [substract(a, b) for a, b in zip(test_tup1[i], test_tup2[i])]\n    return result\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/889","completion":"  new_lists = []\n  for list in lists\n    new_list = []\n    for element in list\n      new_list.append(element)\n    new_lists.append(new_list)\n  return new_lists<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/890","completion":"  idx = 0\n  for item in arr2\n    idx = arr1.include?(item).to_i || idx\n  end\n  return idx\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/891","completion":"  a.size == b.size\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/892","completion":"\treturn text.replace(' ', '')\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/893","completion":"  arr = []\n  for sublist in lst\n    arr << sublist[-1]\n  arr\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/894","completion":"  result = []\n  for x in test_str.split(\",\")\n    result.append(float(x))\n  return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/895","completion":"  a.sort\n  s = 0\n  for i = 1; i <= a.length; i++\n    s += a[i - 1]\n    s += a[i - 2] if i > 2 else 0\n  return s\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/896","completion":"  tuples.sort_last\n  return tuples\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/897","completion":"\tsentence = sentence.split(\" \")\n\tfor w in sentence\n\t\tif w == word\n\t\t\treturn true\n\treturn false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/898","completion":"  numbers.take(n).join([])\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/899","completion":"    # write your code here\n    if arr.length == 0 or arr[0] >= arr[arr.length-1]:\n        return False\n    if arr.length == 1 or arr[0] <= arr[arr.length-1]:\n        return True\n    \n    left = 0\n    right = arr.length - 1\n    mid = (left + right) \/ 2\n    \n    while arr[mid] != arr[right]:\n        if arr[mid] >= n:\n            right = mid - 1\n        else:\n            left = mid + 1\n        mid = (left + right) \/ 2\n        \n    return arr[mid] == n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/900","completion":"  string.gsub(\/^(\\d+)\/, \"true\")\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/901","completion":"  num = n * (n + 1) \/ 2\n  while num > 1\n    num = num \/ 2\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/902","completion":"  d = {}\n  for key in d1.keys()\n    d[key] = d1[key] + d2[key] if key in d2 else d1[key]\n  return d\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/903","completion":"  n_bits = 0\n  while n > 0\n    n = (n - 1) & n\n    n_bits += 1\n  end\n  return n_bits\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/904","completion":"  return x % 2 == 0\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/905","completion":"  n.times do |t|\n    t.times do |l|\n      l.times do |i|\n        i.times do |m|\n          m.times do |j|\n            j.times do |k|\n              k.times do |n|\n                n.times do |k|\n                  k * k\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/906","completion":"    url_parts = url.split(\"\/\")\n    year = url_parts[4][:4]\n    month = url_parts[4][5:7]\n    day = url_parts[4][8:]\n    return [[year, month, day]]<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/907","completion":"  res = []\n  i = 1\n  while i <= n\n    res << i\n    i++\n  end\n  return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/908","completion":"\tbegin\n\t\ta = 1\n\t\tb = 0\n\t\twhile (a < n) do\n\t\t\tb = (b + a) \/ 2\n\t\t\tif arr[b] == n\n\t\t\t\treturn b\n\t\t\telse if arr[b] < n\n\t\t\t\ta = b + 1\n\t\t\telse\n\t\t\t\tb = b - 1\n\t\treturn -1\n\tend\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/909","completion":"  num = int(num)\n  rev = 0\n  while num > 0:\n    rev = rev * 10 + num % 10\n    num = num \/ 10\n  return rev\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/910","completion":"    date = Date.parse(\"{}\/{}\/{}\".format(m, d, y))\n\n    if (date.year == y and date.month == m and date.day == d)\n        return true\n    else\n        return false\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/911","completion":"  nums.sort()\n\n  return max_product(nums)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/912","completion":"    if m == 1\n        return n\n    return n + lobb_num(n + n, m - 1)\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/913","completion":"  return (string.length == (string.length - string.last_char_index))\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/914","completion":"  if length(s) % 2 == 1\n    false\n  else\n    true\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/915","completion":"    return array_nums.sort( (a, b) ->\n        if a < 0 then -1\n        elsif b < 0 then -1\n        elsif a == b then 0\n        else 1\n    end)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/916","completion":"  arr = [a[i] for i in range(arr_size)]\n  a.sort()\n  r = []\n  for i in range(arr_size - 2):\n    if sum == arr[i]:\n      r.append(arr[i])\n      r.append(arr[i+1])\n      r.append(arr[i+2])\n      return r\n    if sum < arr[i]:\n      break\n  return r\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/917","completion":"  text_list = text.split(\"\")\n  upper_list = text_list[::2]\n  lower_list = text_list[1::2]\n  found_match = false\n\n  for i in upper_list:\n    if i in lower_list:\n      found_match = True\n      lower_list.remove(i)\n      print \"Found a match!\"\n\n  if found_match == false:\n    print \"Not matched!\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/918","completion":"  c = []\n  for i in range(n+1)\n    c[:i] = [0]\n  for i in range(len(s)):\n    for j in range(m+1):\n      if j < s[i]:\n        c[i+1] = max(c[i+1], c[i] + 1)\n      else:\n        c[i+1] = max(c[i+1], c[i])\n  return c[n]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/919","completion":"  return items.inject([], &:multiply_list_aux)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/920","completion":"  new_list = []\n  for item in test_list:\n    if item[0] != nil:\n      new_list << item\n    else:\n      new_list.append(item)\n  return new_list\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/921","completion":"  return [test_tup[i:i+n] for i in xrange(0, len(test_tup), n)]<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/922","completion":"    max_arr = []\n    min_arr = []\n    max_prod = arr[0] * arr[1]\n    min_prod = arr[0] * arr[1]\n    for i in arr\n        if i > max_prod then max_arr.push(i)\n        elsif i < min_prod then min_arr.push(i)\n    max_arr.sort()\n    min_arr.sort(reverse = true)\n    return [max_arr[0], min_arr[0]]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/923","completion":"    if (m < x.length and n < y.length)\n        if (x[m] == y[n])\n            return 1 + super_seq(x, y, m+1, n+1)\n        else\n            return 1 + min(super_seq(x, y, m+1, n), super_seq(x, y, m, n+1))\n    else\n        return 0\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/924","completion":"  return (x > y) ? x : y\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/925","completion":"  nums.reverse\n  product = 1\n  for num in nums\n    product *= num\n  return product\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/926","completion":"  i = 1;\n  k = 1;\n  while i < n\n    k = k + 1;\n    if k % m == 0\n      i = i + 1;\n    end\n  end\n  return k;\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/928","completion":"  split = dt.split('-')\n  \"return '-'.join(split[1:3]) + '-' + split[0]\"\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/929","completion":"    num = 0\n    for x in tuplex:\n        if x == value:\n            num = num + 1\n    return num\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/930","completion":"  if text.match(\/^(a)(\\w+)*$\/)\n    text.match()\n  else\n    \"Not matched!\"\n  end\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/931","completion":"  result = 0\n  for [start, end, step] in [[1, number, 3], [2, number, 3], [3, number, 3], [4, number, 3]]\n    result = result + start * step + end * step\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/932","completion":"  # Find the unique words in the list\n  unique_words = {}\n  for word in l\n    if word not in unique_words\n      unique_words[word] = 1\n\n  # Remove the duplicates\n  return [word for word in unique_words if unique_words[word] == 1]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/933","completion":"  match_text = text.camelize\n  re.sub(r'([A-Z])', r'_\\1', match_text)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/934","completion":"    return (n * (n + 1) \/ 2) ** m\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/935","completion":"  result = 0\n  i = 1\n  while i <= number\n    result = result + i * (i + 1) \/ 2\n    i = i + 1\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/936","completion":"    new_list = []\n    for i in range(len(ord_list)):\n        index = ord_list[i] - 1\n        new_list.append(test_list[index])\n    return new_list\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/937","completion":"  # split the string\n  strs = str1.split()\n  # find max char\n  max = \"\"\n  for c in strs:\n    if strs.count(c) > strs.count(max):\n      max = c\n  return max<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/938","completion":"  # Write your code here\n  pass\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/939","completion":"    sort_func = lambda (a, b) {\n        if (a.make == b.make) {\n            if (a.model < b.model)\n                return -1\n            if (a.model > b.model)\n                return 1\n            return 0\n        }\n        else\n            return a.make < b.make ? -1 : 1\n    }\n\n    return sorted(models, sort_func)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/940","completion":"  arr.sort(comparator=A <=> B)\n  [arr.shift : arr.pop]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/941","completion":"  length = 0\n  for item in num\n    length = length + 1 if type(item) is Array else length\n  return length\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/942","completion":"  return (test_tup in check_list)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/943","completion":"  # put the first list to be sorted\n  list1 = []\n  for num in num1\n    list1.push(num)\n  list2 = []\n  for num in num2\n    list2.push(num)\n\n  # put the first list to be sorted to a heap\n  heapq.heapify(list1)\n  heapq.heapify(list2)\n\n  # iterate both lists and combine them by popping elements from both lists\n  # and putting them in heapq\n  # NOTE: heapq.heappushpop() is not implemented in Jython yet\n  while list1 and list2:\n    heapq.heappush(list1, heapq.heappop(list2))\n  # NOTE: if you need to implement that, please refer to the Jython implementation\n  # in http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u\/hotspot\/file\/tip\/src\/share\/vm\/prims\/script.cpp\n  while list1:\n    heapq.heappush(list2, list1.\nend\n","language":"ruby"}
{"task_id":"MBRBP\/944","completion":"    result = \"\"\n    i = 0\n    for c in text.split():\n        result = \"%s %s\" % (result, c)\n        i = i + 1\n    return result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/945","completion":"  set.new(*t).each { |s| s }\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/946","completion":"  d = {}\n  for i in range(a) do\n    s.each_char {|c|\n      d[c] = if d[c] == nil then 1 else d[c] + 1\n    }\n  end\n  # return array_to_hash([s => d[s], 0])\n  return d\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/947","completion":"\tstart_index = 0\n\tend_index = 0\n\tfor i in 0 until length list1\n\t\tif list1[i].length < list1[end_index].length\n\t\t\tend_index = i\n\t\tend\n\tend\n\treturn end_index - start_index + 1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/948","completion":"    tup2 = [1, 2, 3, 4, 5, 6]\n    return tup1[index]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/949","completion":"  \"\"\"Sort the list based on the total number of digits in the tuple\"\"\"\n  return sorted(test_list, key = lambda x : get_total_number_of_digits(x))\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/950","completion":"    year = year % 12\n    if year == 0:\n        return \"Monkey\"\n    if year == 1:\n        return \"Rooster\"\n    if year == 2:\n        return \"Dog\"\n    if year == 3:\n        return \"Pig\"\n    if year == 4:\n        return \"Rat\"\n    if year == 5:\n        return \"Ox\"\n    if year == 6:\n        return \"Tiger\"\n    if year == 7:\n        return \"Rabbit\"\n    if year == 8:\n        return \"Dragon\"\n    if year == 9:\n        return \"Snake\"\n    if year == 10:\n        return \"Horse\"\n    if year == 11:\n        return \"Sheep\"\n    return \"\"<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/951","completion":"\tsimilar_items = []\n\tfor i in range(0, len(test_list1)):\n\t\tif test_list1[i] in test_list2:\n\t\t\tif test_list1[i] in similar_items:\n\t\t\t\tsimilar_items.remove(test_list1[i])\n\t\t\tsimilar_items.append(test_list1[i])\n\tprint similar_items\n\treturn similar_items\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/952","completion":"  return (n - r * n) % p<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/953","completion":"  a.sort\n  i = 0\n  result = 1\n  while i < n\n    if a[i] != a[i - 1]\n      i += 1\n    else\n      result += 1\n  end\n  result\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/954","completion":"\tif actual_cost >= sale_amount\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn nil<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>\nend\n","language":"ruby"}
{"task_id":"MBRBP\/955","completion":"\tn\/=2\n\tn*=2\n\treturn n > 1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/956","completion":"  # Regexp for splitting words and only capturing capital letters\n  # The + is for matching one or more\n  split_words = \/([A-Z][a-z]*)\/g\n  words = split_words.split(text)\n\n  # List comprehension to remove empty strings\n  # '' in the list will evaluate to False, and empty strings are removed\n  words = [w for w in words if w]\n\n  # List comprehension to remove duplicates\n  # https:\/\/stackoverflow.com\/a\/9427163\n  words = [word for word in set(words)]\n\n  return words\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/957","completion":"  \"Count of set bits to right of n\"\n  if n == 0:\n    return 0\n  return get_first_set_bit_pos(n & (~(n - 1))) + 1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/958","completion":"  nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  roms = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n  rom = \"\"\n  i = 0\n  while num > 0:\n    while num >= nums[i]:\n      num -= nums[i]\n      rom += roms[i]\n    i += 1\n  return rom\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/959","completion":"    return sum(lst) \/ len(lst)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/960","completion":"    ways = 1\n    # write your code here\n    return ways\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/961","completion":"\tvowels = \"aeiou\"\n\tints = { \"M\":1000, \"D\":500, \"C\":100, \"L\":50, \"X\":10, \"V\":5, \"I\":1 }\n\tn = 0\n\tfor i in range(len(s)):\n\t\tif s[i] in ints:\n\t\t\tif i < len(s)-1 and s[i+1] in vowels:\n\t\t\t\tn -= ints[s[i]]\n\t\t\telse:\n\t\t\t\tn += ints[s[i]]\n\treturn n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/962","completion":"  sum = 0\n  for i in range(l, r)\n    sum += even(i)\n  end\n  sum\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/963","completion":"  return \"two solutions\", abs(x * y - z * z)\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/964","completion":"  length = 0\n  while true\n    length = length + 1\n    if length == 100\n      break\n  end\n  true\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/965","completion":"  return text.gsub(\/([A-Z])\/g, \"_$1\")\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/966","completion":"  tuple2 = []\n  for x in tuple1:\n    if type(x) == list:\n      if len(x) != 0:\n        tuple2.append(x)\n    else:\n      if x != \"\":\n        tuple2.append(x)\n  return tuple2\n\n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/967","completion":"  words = split(string)\n  v = 'aeiouAEIOU'\n  res = \"not accepted\"\n  if words.each do |word|\n    if word.include?(v)\n      res = \"accepted\"\n  end\n  return res\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/968","completion":"  x = a * n\n  if x == b\n    return 0\n  x = x + b\n  if x > n\n    return x\n  return n\n\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/969","completion":"  [test_list.include?initial_element ?initial_element]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/970","completion":"  if x < y\n    x\n  elsif y < x\n    y\n  else\n    nil\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/971","completion":"    length = n\n    if length < 0\n        # base case\n        return 0\n    elif length == 0\n        # base case\n        return 0\n    else if length % (a+b+c) == 0\n        # base case\n        return length \/\/ (a+b+c)\n    else\n        # recursive case\n        return maximum_segments(length - 1, a, b, c) + 1\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/972","completion":"    tup = [test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1]]\n    return tup\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/973","completion":"  return s[d - 1] + s[d:0]\n\nend\n","language":"ruby"}
{"task_id":"MBRBP\/974","completion":"  total = 0\n  for i in 0..a.length - 2\n    total += a[i + 1].value + a[i + 2].value\n    a[i + 1].value = total\n  return total\n\nend\n","language":"ruby"}
