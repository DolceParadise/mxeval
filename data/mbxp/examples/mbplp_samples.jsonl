{"task_id":"MBPLP\/1","completion":"    return $m >= $n ? $cost[$m][$n] : $cost[$m][$n] + min_cost($cost, $m - 1, $n - 1);\n}","language":"perl"}
{"task_id":"MBPLP\/2","completion":"    $test_tup1 = map { $2 => $1 } @$test_tup1;\n    $test_tup2 = map { $2 => $1 } @$test_tup2;\n\n    # Check the length of the tuple lists.\n    if ($_ == 2)\n        return $test_tup1;\n\n    # Check if the first tuple list contains the same elements.\n    if (sort $test_tup1 == sort $test_tup2)\n        return $test_tup1;\n\n    # Check if the second tuple list contains the same elements.\n    if (sort $test_tup2 == sort $test_tup1)\n        return $test_tup2;\n\n    # Return empty list.\n    return ();\n}","language":"perl"}
{"task_id":"MBPLP\/3","completion":"    ($n) || ($n == 2 || $n == 3);\n    print 0 if $n == 1;\n    for my $i (1 + 1 + ($n - 1 - 1) \/ 2);\n        if ($n % $i == 0) return 1;\n    end;\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/4","completion":"    my @m = @_;\n    my $largest = @_;\n    $largest = $largest . $nums || 0;\n    if ($n - eq 1)\n    {\n        return $largest;\n    }\n    foreach my $num (sort $nums)\n    {\n        push @m, $num;\n        if ($m != @m)\n        {\n            pop @m;\n        }\n        if (length @m)\n        {\n            if (@m[0] > $largest)\n            {\n                $largest = @m[0];\n            }\n        }\n    }\n    return $largest;\n}","language":"perl"}
{"task_id":"MBPLP\/5","completion":"    my $ways = 0;\n    for my $row (0..$n-1)\n    {\n        for my $col (0..$n-1)\n        {\n            $ways = $ways + ($row + $col >= $n - 1) ? 1 : 0;\n        }\n    }\n    return $ways;\n}","language":"perl"}
{"task_id":"MBPLP\/6","completion":"    return (bin($a ^ $b) & $a) == $b ? 0 : 1;\n}","language":"perl"}
{"task_id":"MBPLP\/7","completion":"    my @words = split \/\\s+\/;\n    my $pattern = \/([A-Za-z]{4,})\/;\n\n    $text =~ s{$pattern}{\/\\1\/g};\n    return $text;\n}","language":"perl"}
{"task_id":"MBPLP\/8","completion":"    map { $a => $a*$a } $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/9","completion":"    my ($rotations, $count) = (0, 0);\n    while (defined $str)\n    {\n        $rotations += $str;\n        $count += 1;\n        $str = rotate_right $str;\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/10","completion":"    my ($ret, @$sort) = sort { $list1{$i} <=> $list1{$i-$n} } keys %% $list1;\n    return $ret;\n}","language":"perl"}
{"task_id":"MBPLP\/11","completion":"    $start = substr($s, 1, length($s)-1) == $ch;\n    $end = substr($s, -1, length($s)-1) == $ch;\n    if ($start || $end) {\n        return substr($s, $start ? 2 : 0, $end ? -2 : -1);\n    }\n    # Nothing to remove\n    return $s;\n}","language":"perl"}
{"task_id":"MBPLP\/12","completion":"    my ($L) = sort @$M, @(sum @$M{$});\n    $L{$};\n}","language":"perl"}
{"task_id":"MBPLP\/13","completion":"    my @words = split;\n    my @counts = 0;\n    my $most_common;\n    my $most_common_count = 0;\n\n    $most_common = $words;\n    $most_common_count = $words[1];\n\n    $most_common = $words;\n    $most_common_count = $words[2];\n\n    foreach my $word (@words) {\n        if ($most_common_count < $word) {\n            $most_common = $word;\n            $most_common_count = $word;\n        } else if ($most_common_count == $word) {\n            $most_common_count++;\n        }\n    }\n    @counts{[$most_common, $most_common_count]}\n}","language":"perl"}
{"task_id":"MBPLP\/14","completion":"    return ($l * $b * $h) \/ 3;\n}","language":"perl"}
{"task_id":"MBPLP\/15","completion":"    my ($lowletters, @_) = @_;\n    my ($result, @_) = @_;\n    # $lowletters is a string of lowercase letters\n    # $result is the array of characters returned\n    # @_ is the rest of the text\n    # \n    # find every occurrence of a letter (of course, lowercase)\n    # in the text\n    # store that occurrence in the result array\n    # store the rest of the text in the @_ variable\n    #\n    my ($index, $last) = 0;\n    while ($index <= $last) {\n        my ($position, $last) = $lowletters;\n        $position =~ s\/([a-z])\/;\n        if ($position !=~ s\/\\.\/) {\n            my ($start, $end) = $position - 1;\n            $result[$start] =~ s\/([a-z])\/;\n            $","language":"perl"}
{"task_id":"MBPLP\/16","completion":"    my ($prev, $match, $rest) = @_;\n    while ($rest) {\n        if ($rest =~ m{a..z_}) {\n            print \"Found a match!\";\n            if ($prev =~ m{a..z_}) {\n                print \"Found a match!\"\n            }\n        }\n        $prev = $rest;\n        $rest = substr($text, 1);\n        $match = $rest;\n        $text = substr($text, 1, -1);\n    }\n    print \"Not matched!\";\n}","language":"perl"}
{"task_id":"MBPLP\/17","completion":"    $a = abs($a);\n\n    my ($d) = $a - 2;\n\n    return $d;\n}","language":"perl"}
{"task_id":"MBPLP\/18","completion":"    chomp;\n    my ($remove_list) = split \/[^$second_string]\/;\n\n    return $string =~ s\/[^$remove_list]\/$second_string\/g;\n}","language":"perl"}
{"task_id":"MBPLP\/19","completion":"    my ($flag) = 0;\n\n    my $i = 0;\n    while ($i < $arraynums) {\n        my ($j) = $i + 1;\n        while ($j < $arraynums) {\n            if ($arraynums[$i] == $arraynums[$j]) {\n                $flag = 1;\n                break my;\n            }\n            $j++;\n        }\n        $i++;\n    }\n\n    $flag ? $flag = $arraynums : $flag;\n\n    return $flag;\n}","language":"perl"}
{"task_id":"MBPLP\/20","completion":"    if ($x == 3385) {\n        print 1;\n    } elseif ($x == 3276) {\n        print 1;\n    } elseif ($x == 2274) {\n        print 1;\n    } else {\n        print 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/21","completion":"    $m = $m + 1;\n    $n = $n + 1;\n\n    my @result;\n    for (@result = @_);\n        $result = $result + ($n == $result ? $n : $m * $n);\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/22","completion":"    my ($pos, $next) = ($nums, 0);\n    for (; $next < $nums; ++$next)\n    {\n        next if ($nums[$next] == $pos) $pos;\n    }\n    return $pos;\n}","language":"perl"}
{"task_id":"MBPLP\/23","completion":"    my ($list2) = @_;\n    my ($list3) = @_;\n\n    $max = 0;\n    $max_list = [];\n\n    foreach (sub $list1 as $i => $sub_list) {\n        if (sum($sub_list) > $max) {\n            $max = sum($sub_list);\n            $max_list = $sub_list;\n        }\n    }\n\n    foreach (sub $list2 as $i => $sub_list) {\n        if (sum($sub_list) > $max) {\n            $max = sum($sub_list);\n            $max_list = $sub_list;\n        }\n    }\n\n    foreach (sub $list3 as $i => $sub_list) {\n        if (sum($sub_list) > $max) {\n            $max =","language":"perl"}
{"task_id":"MBPLP\/24","completion":"    my ($decimal, @$c) = @_;\n    for (@$c) {\n        my $temp = $decimal;\n        $decimal = $temp * 2 + $binary;\n        $binary = $decimal \/ 10;\n    }\n    return $decimal;\n}","language":"perl"}
{"task_id":"MBPLP\/25","completion":"    $arr = sort {strlen $arr}{$arr}{$n};\n    $prod = 1;\n    foreach my $arr {\n        if ($n == 1)\n            $prod = $prod * $arr;\n        elsif ($arr ~ $prod)\n            $prod = $prod * $arr;\n    }\n    return $prod;\n}","language":"perl"}
{"task_id":"MBPLP\/26","completion":"    my $check = 0;\n    foreach my $list (split \/,\/, $test_list) {\n        my @k_list = split \/,\/, $list;\n        if (size @k_list == $K) {\n            $check = 1;\n            return $check;\n        }\n    }\n    return $check;\n}","language":"perl"}
{"task_id":"MBPLP\/27","completion":"    my @new_list = ();\n    for my $string (@$list) {\n        my @digits = split(\/\\d+\/);\n        @new_list = @new_list ++ join ' ';\n        for my $digit (@digits) {\n            @new_list = @new_list . $digit;\n        }\n    }\n    return @new_list;\n}","language":"perl"}
{"task_id":"MBPLP\/28","completion":"    return ($n-1)*($n-$k+1) \/ (1.0 * $k);\n}","language":"perl"}
{"task_id":"MBPLP\/29","completion":"    if ($arr_size < 1) {\n        return 0;\n    }\n    if (count($arr) % 2 != 0) {\n        return $arr;\n    }\n    else {\n        return $arr[0];\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/30","completion":"    my ($str, @count) = @_;\n\n    if (strlen ($s) > strlen $str) {\n        return 0;\n    }\n\n    my @count = 0;\n\n    for my $pos (0..strlen $s) {\n        $pos = strstr ($s, $pos, $pos);\n\n        if ($pos && is_alpha $pos) {\n            if ( $pos eq $str) {\n                @count += 1;\n            }\n        }\n    }\n\n    return @count;\n}","language":"perl"}
{"task_id":"MBPLP\/31","completion":"    my @heap = @_;\n    for (@nums) {\n        push @heap, $nums[0] - $nums[1];\n        pop @heap, $k;\n    }\n    if (empty @heap) {\n        return [];\n    } else {\n        $heap{[0]}[1];\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/32","completion":"    my ($maxFactor) = 0;\n    my ($factor) = 1;\n\n    if ($n == 1)\n        $maxFactor = 1;\n\n    for (@_ = 2; $factor <= $n; $factor++)\n    {\n        if ($n % $factor == 0)\n        {\n            if ($factor > $maxFactor)\n            {\n                $maxFactor = $factor;\n            }\n\n            while ($n % $factor == 0)\n            {\n                $n \/= $factor;\n            }\n        }\n    }\n\n    return $maxFactor;\n}","language":"perl"}
{"task_id":"MBPLP\/33","completion":"    my ($C) = 2;\n    ($C) = ($C * $N) + $N;\n    print $C;\n}","language":"perl"}
{"task_id":"MBPLP\/34","completion":"    if ($N < 2)\n    {\n        return $N + 1;\n    }\n    $l = 1;\n    $r = $N;\n    while ($l < $r)\n    {\n        if ($l + $r == $N + 1)\n        {\n            return $l + 1;\n        }\n        if ($l + $r > $N + 1)\n        {\n            return $N + 1;\n        }\n        $mid = ($l + $r) \/ 2;\n        $mid_val = $ar[round($mid)];\n        if ($mid_val > $N)\n        {\n            $r = $mid;\n        }\n        else if ($mid_val < $N)\n        {\n            $l = $mid;\n        }\n        else\n       ","language":"perl"}
{"task_id":"MBPLP\/35","completion":"    $n = $n - 1;\n    return (rect_num($n) + 1) * (rect_num($n + 1));\n}","language":"perl"}
{"task_id":"MBPLP\/36","completion":"    my $t = $p \/ $q;\n    my $n = 1;\n    for my $i (1 .. $N)\n    {\n        $n = $n * $t;\n    }\n    return ceil(abs($n \/ 10) - 1);\n}","language":"perl"}
{"task_id":"MBPLP\/37","completion":"    my $array = [0];\n    foreach my $item (@{ $mixed_list }) {\n        $array{ push $item } = $item;\n    }\n    $array{ sort };\n    return $array;\n}","language":"perl"}
{"task_id":"MBPLP\/38","completion":"    my ($even, $odd) = 0;\n    $even = my $i = 0;\n    while ($i < scalar $list1)\n    {\n        if ($i % 2 == 0) {\n            $even = $even + $list1[$i];\n        } else {\n            $odd = $odd + $list1[$i];\n        }\n        $i = $i + 1;\n    }\n    return scalar $even \/ scalar $odd;\n}","language":"perl"}
{"task_id":"MBPLP\/39","completion":"    ($S, @_);\n}","language":"perl"}
{"task_id":"MBPLP\/40","completion":"    my $hash = hash { $nums => $nums };\n    return $hash;\n}","language":"perl"}
{"task_id":"MBPLP\/41","completion":"    my ($even_num) = map { $_ => if $_ % 2 == 0 $_. };\n    $nums = join \"\", $even_num;\n}","language":"perl"}
{"task_id":"MBPLP\/42","completion":"    my $n_arr = shift $arr;\n\n    $n_arr = [shift $arr; shift $arr; shift $arr] >= $n;\n\n    return join(',', map { $_ } $n_arr);\n}","language":"perl"}
{"task_id":"MBPLP\/43","completion":"    $text =~ s\/([a-z])\\1\/g;\n    if ( $text ) {\n        print \"Found a match!\";\n    } else {\n        print \"Not matched!\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/44","completion":"    my $patt = $1;\n    if ($patt =~ \/$patt\/i)\n        print \"Found a match!\";\n    elsif ($patt =~ \/^$\/i)\n        print \"Not matched!\";\n    else\n        print \"Not matched!\";\n}","language":"perl"}
{"task_id":"MBPLP\/45","completion":"    my ($a, $b) = @_;\n\n    # If l is 0, then there is no common divisor.\n    if ($l == 0)\n        return 0;\n\n    # If l is 1, then the gcd is $a.\n    if ($l == 1)\n        return $a;\n\n    # Else we take l-1 to get the greatest common divisor.\n    return get_gcd($a, $b % $l);\n}","language":"perl"}
{"task_id":"MBPLP\/46","completion":"    my ($test) = @_;\n\n    $test = $test . split \/\\s+\/;\n\n    for my $n (sort keys % $data)\n    {\n        for my $n2 (sort keys % $test)\n        {\n            if ($n == $n2)\n            {\n                print \"1\";\n                return;\n            }\n        }\n    }\n\n    print \"0\";\n    return;\n}","language":"perl"}
{"task_id":"MBPLP\/47","completion":"    return $B % $A ? $B % $A : 10;\n}","language":"perl"}
{"task_id":"MBPLP\/48","completion":"    my ($res);\n    for (@_){\n        if ($n & 1) $res = $res | 1;\n        $n = $n >> 1;\n    }\n    $res;\n}","language":"perl"}
{"task_id":"MBPLP\/49","completion":"    my $output = @_;\n\n    if ($N != '') {\n        for ($i = 0; $i < $nums; ++$i) {\n            for ($j = 0; $j < $nums; ++$j) {\n                if ($nums[$i][$N] == $nums[$j][$N]) {\n                    $output[$i][$N] = $nums[$i][$N];\n                }\n            }\n        }\n    }\n    else {\n        for ($i = 0; $i < $nums; ++$i) {\n            $output[$i][$i] = $nums[$i][$i];\n        }\n    }\n    return $output;\n}","language":"perl"}
{"task_id":"MBPLP\/50","completion":"    my ($min_length_list, $index_min_length_list) = (0, -1);\n    for (@$input_list) {\n        my ($current_list, $current_list_length) = @$input_list;\n        my ($index_current_list, $current_list_min_length);\n        if ($min_length_list < 0 || $current_list_min_length > $current_list_length) {\n            $min_length_list = $current_list_min_length;\n            $index_min_length_list = $index_current_list;\n        }\n    }\n    return $index_min_length_list;\n}","language":"perl"}
{"task_id":"MBPLP\/51","completion":"    return ($x == $y && $z == $y) || ($x == $z && $y == $z)\n            ? 0\n            : ($x == $y || $x == $z || $y == $z)\n                ? 1\n                : 2;\n}","language":"perl"}
{"task_id":"MBPLP\/52","completion":"    return $b * $h;\n}","language":"perl"}
{"task_id":"MBPLP\/53","completion":"    $str =~ s\/^[a-z]*[A-Z]*$\/i;\n    return \"Equal\";\n}","language":"perl"}
{"task_id":"MBPLP\/54","completion":"    my ($input_list) = @_;\n\n    my ($output_list) = ();\n    for my $i (1 .. $input_list) {\n        my $count = 1 + count($input_list);\n        for my $j (1 .. $count) {\n            if ($input_list[$j] == $i) {\n                $count--;\n            }\n        }\n        push $input_list[$count] , $i;\n    }\n    return $output_list;\n}","language":"perl"}
{"task_id":"MBPLP\/55","completion":"    my $i = 0;\n    my $t = 1;\n    while ($i <= $r) {\n        $t = $t * $a;\n        $i = $i + 1;\n    }\n    return $t;\n}","language":"perl"}
{"task_id":"MBPLP\/56","completion":"    return $n <= $n \/ 2 ? 0 : 1;\n}","language":"perl"}
{"task_id":"MBPLP\/57","completion":"    $arr = sort $arr;\n    return $arr != $arr | $arr >= $arr | $arr & $arr | $arr & $arr | $arr & $arr | $arr & $arr | $arr & $arr | $arr & $arr | $arr & $arr | $arr & $arr | $arr & $arr;\n}","language":"perl"}
{"task_id":"MBPLP\/58","completion":"    return $x < 0 ? $x * -1 : $y * -1;\n}","language":"perl"}
{"task_id":"MBPLP\/59","completion":"    return $n * (3 * $n - 1) \/ 2;\n}","language":"perl"}
{"task_id":"MBPLP\/60","completion":"    my $max = 0;\n    for (my $x = 1; $x <= $n; $x++) {\n        $max = max($max, $x - 1 - $arr[$x - 1], $n - $x);\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/61","completion":"    my ($i, $n) = 0, $n;\n    $count = 0;\n    while ($i < $s.length) {\n        if ($s[$i] == '1') {\n            $count++;\n            $i += $n;\n        }\n        else {\n            $i++;\n        }\n    }\n    print $count;\n}","language":"perl"}
{"task_id":"MBPLP\/62","completion":"    $min = 1;\n    foreach my $x (@$xs) {\n        $min = ($x < $min ? $x : $min);\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/63","completion":"    my ($min_list) = sort {$test_list};\n    my ($max_list) = sort {$test_list};\n    for my $a (sort $min_list) {\n        for my $b (sort $max_list) {\n            $max_list[$a] = min($a, $b) + $max_list[$a];\n            $min_list[$b] = max($b, $a) + $min_list[$b];\n            $max_list[$b] = min($a, $b) + $max_list[$b];\n            $min_list[$a] = max($b, $a) + $min_list[$a];\n            if ($max_list[$a] - $min_list[$a] > $max_list[$b] - $min_list[$b]) {\n                $max_list[$a] = $max_list[$b] -","language":"perl"}
{"task_id":"MBPLP\/64","completion":"    sort {\n        my ($subject, $mark) = $1;\n        $subjectmarks = (array_map {\n            { $subject, $mark } => $2;\n        } @_);\n    }\n    return $subjectmarks;\n}","language":"perl"}
{"task_id":"MBPLP\/65","completion":"    my @tail = ();\n    my $sum = 0;\n\n    my $list_size = 0;\n    $list_size = (length $data_list);\n\n    for my $i (0..$list_size - 1); $i = $i + 1;\n    {\n        $data_list[$i] = (split \/, $data_list[$i]);\n        $tail = $tail { $data_list[$i] };\n\n        if (index($data_list[$i], \"[\") > 0)\n        {\n            my $nested_list = $data_list[$i];\n            my $list_size = (length $nested_list);\n            for my $j (0..$list_size - 1); $j = $j + 1;\n            {\n                $nested_list[$j] = (split \/, $nested_list","language":"perl"}
{"task_id":"MBPLP\/66","completion":"    if ($list) {\n        $count = 0;\n        foreach ($list as $key => $value) {\n            if ($value > 0) {\n                ++$count;\n            }\n        }\n        return $count;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/67","completion":"    my ($a, $b, $c) = @_;\n    $c = $c + $a + $b + $a * $b;\n    $c = $c \/ ($n - $a - $b);\n    $c = $c + ($c \/ $n);\n    return $c;\n}","language":"perl"}
{"task_id":"MBPLP\/68","completion":"    my $is_monotonic = 0;\n    for my $i (@_){\n        if ($A[$i-1] < $A[$i]){\n            $is_monotonic = 0;\n        }\n        elseif ($A[$i-1] > $A[$i]){\n            $is_monotonic = 1;\n        }\n        else{\n            $is_monotonic = 0;\n        }\n        $is_monotonic = $is_monotonic + $is_monotonic;\n    }\n    return $is_monotonic;\n}","language":"perl"}
{"task_id":"MBPLP\/69","completion":"    if (not ($l->end()->{1} == $s->end())) {\n        return 0;\n    }\n    $l->next();\n    $s->next();\n    while (not ($l->end()->{1} == $s->end())) {\n        if ($l->end()->{1} != $s->end()) {\n            return 0;\n        }\n        $l->next();\n        $s->next();\n    }\n    return 1;\n}","language":"perl"}
{"task_id":"MBPLP\/70","completion":"    $Input = sort $Input;\n    my @Output;\n    $Output = [];\n    if (count $Input)\n    {\n        for ($i = 1; $i <= count $Input; ++$i)\n        {\n            my @Tuples = $Input{$i};\n            if ($k == count @Tuples)\n                $Output{$i} = \"All tuples have same length\";\n            elseif ($k != count @Tuples)\n                $Output{$i} = \"All tuples do not have same length\";\n        }\n    }\n    return join \",\", @Output;\n}","language":"perl"}
{"task_id":"MBPLP\/71","completion":"    my $min = $nums[0];\n    my @res;\n    while (0 < $nums) {\n        my @tmp = @_;\n        my $j = 0;\n        for (my $i = 1; $i < $nums; $i++) {\n            if ($tmp[$i] < $min) {\n                my @tmp2 = @_;\n                $j = $i;\n                $min = $tmp[$i];\n            }\n        }\n        @res = @res . @tmp [0..$j];\n        $nums = $nums - $j - 1;\n        $tmp = @tmp2;\n    }\n    return @res;\n}","language":"perl"}
{"task_id":"MBPLP\/72","completion":"    $n = $n < 1 ? 1 : $n;\n    $n = $n < 2 ? 2 : $n;\n    return $n - $n - $n;\n}","language":"perl"}
{"task_id":"MBPLP\/73","completion":"    my ($regex) = \/(?<=\\n)\\s*?\/g;\n    my $output;\n    while ( $text =~ $regex )\n    {\n        $output[] = $text;\n    }\n    return $output;\n}","language":"perl"}
{"task_id":"MBPLP\/74","completion":"    my ($num_colors, $num_patterns) = @_;\n\n    if ($num_colors != $num_patterns) {\n        print 0;\n    } else {\n        $pattern_index = 0;\n        foreach my $color_index (@$colors) {\n            if ($pattern_index < $num_patterns) {\n                if (is_subsequence($patterns[$pattern_index], $colors[$color_index])) {\n                    $pattern_index = $pattern_index + 1;\n                } else {\n                    print 0;\n                    return;\n                }\n            } else {\n                return;\n            }\n        }\n        print 1;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/75","completion":"    my @found = ();\n    my @result = $test_list;\n    $test_list = map { sub $_ \/= $K } @test_list;\n    if ( $test_list ) {\n        foreach (@$test_list) {\n            if ( length $found ) {\n                if ( $_ :matches @found ) {\n                    $result = $result :without $_;\n                }\n                else {\n                    $found = $found :append ($_);\n                }\n            }\n            else {\n                $found = $_;\n            }\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/76","completion":"    return $m * $n - 1;\n}","language":"perl"}
{"task_id":"MBPLP\/77","completion":"    my ($even, $odd) = @_;\n    $even = $even + $even;\n    $odd = $odd + $odd;\n    print $even - $odd;\n}","language":"perl"}
{"task_id":"MBPLP\/78","completion":"    $n = (bin($n) | cut -f1) | cut -f3;\n    $n = bin2hex ($n);\n    $n =~ s\/\\s\/g ;\n    $n = count($n) ;\n    print $n ;\n}","language":"perl"}
{"task_id":"MBPLP\/79","completion":"    return length($s) % 2 ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/80","completion":"    my $a = 1.0;\n    my $b = 1.0;\n    my $c = 1.0;\n    my $d = 1.0;\n    my $e = 0.0;\n    while ($n--) {\n        $e = ($a + $b + $c + $d) \/ 4;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}","language":"perl"}
{"task_id":"MBPLP\/81","completion":"    my ($res1, $res2, $res3) = map {\n        $test_tup1 => [$test_tup1],\n        $test_tup2 => [$test_tup2],\n        $test_tup1 => $test_tup2,\n        $test_tup1 => $test_tup1,\n        $test_tup2 => $test_tup2\n    };\n}","language":"perl"}
{"task_id":"MBPLP\/82","completion":"    $r = abs($r);\n    my ($v) = 0;\n    $v = $r * $r * 3.14;\n    print $v;\n}","language":"perl"}
{"task_id":"MBPLP\/83","completion":"    my ($total) = 0;\n    for (my $ch = 0; $ch < strlen($strr); $ch++)\n    {\n        $total += ord($strr[$ch]);\n    }\n    return chr($total);\n}","language":"perl"}
{"task_id":"MBPLP\/84","completion":"    return (3 ^ 2 ^ 1 ^ 0) + $n - 1;\n}","language":"perl"}
{"task_id":"MBPLP\/85","completion":"    my ($result) = 0;\n\n    my $area = 3.14159265358979 * $r * $r;\n    $result = $area * 4;\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/86","completion":"    my ($a = 1);\n    while ($n >= $a) {\n        if ($n == $a) {\n            print $a;\n            ++$a;\n            $n -= $a;\n        }\n        $a = ($a + 6) \/ 2;\n    }\n    print -1;\n}","language":"perl"}
{"task_id":"MBPLP\/87","completion":"    return [map { [$key] => [if [is_string [$value]] [join \", \"] [$value]] } { $dict1, $dict2, $dict3 }].flatten();\n}","language":"perl"}
{"task_id":"MBPLP\/88","completion":"    my ($freq) = @_;\n    $freq = {};\n    foreach my $x (@$list1) {\n        if ($freq[$x]) {\n            $freq[$x] += 1;\n        }\n        else {\n            $freq[$x] = 1;\n        }\n    }\n    return $freq;\n}","language":"perl"}
{"task_id":"MBPLP\/89","completion":"    my @a = @_;\n    for my $x (sort @a) {\n        if ($x > $N) {\n            return $x;\n        }\n    }\n    return $N;\n}","language":"perl"}
{"task_id":"MBPLP\/90","completion":"    my ($longest) = 0;\n    foreach my $word (@$list1) {\n        if ($word =~ m\/^\\w+$\/) {\n            if ($longest = $word > $longest) {\n                $longest = $word;\n            }\n        }\n    }\n    return $longest;\n}","language":"perl"}
{"task_id":"MBPLP\/91","completion":"    my ($str2) = @_;\n    $str2 =~ s\/\\b{$sub_str}\\b\/g;\n    # my ($str2) = @_;\n    return (index($str1, $str2, 0) !== false) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/92","completion":"    if ($n =~ m\/^\\d+$\/)\n    {\n        return 0;\n    }\n    $n =~ s\/\\D\/g;\n    $n =~ s\/\\d{3}\/g;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/93","completion":"    if ($b < 1)\n    {\n        print $a;\n        return;\n    }\n    $b = $b - 1;\n    $a = $a * $a;\n    power $a, $b;\n}","language":"perl"}
{"task_id":"MBPLP\/94","completion":"    my ($min_value, $min_index) = 0;\n    foreach my $record (sort $test_list)\n        if ($min_value < $record[1]) {\n            $min_value = $record[1];\n            $min_index = $record[0];\n        }\n    return $min_index;\n}","language":"perl"}
{"task_id":"MBPLP\/95","completion":"    my $minlen = 0;\n\n    foreach my $l (@_)\n    {\n        my $minlen = min($minlen, count($l));\n    }\n\n    return $minlen;\n}","language":"perl"}
{"task_id":"MBPLP\/96","completion":"    # Find the divisors.\n    # Note that the answer is in the *reverse order*.\n    my $divisors = 0;\n    for my $divisor (1; $divisor <= $n; $divisor++) {\n        if ($n % $divisor == 0) {\n            $divisors++;\n        }\n    }\n    print $divisors;\n}","language":"perl"}
{"task_id":"MBPLP\/97","completion":"    my ($list2) = @_;\n    my ($result) = '';\n\n    while (<>)\n    {\n        next unless $list1->eof;\n        next unless $list2->eof;\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/98","completion":"    my $result = 0;\n\n    foreach ($numbers) {\n        $result = ($result + $numbers) \/ $numbers {\n            if ($_ > 0) {\n                return $result \/ $numbers;\n            } else {\n                return $result + $numbers;\n            }\n        }\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/99","completion":"    # split into digits\n    my ($digits) = $n->to_s;\n    # reverse digits\n    my ($digits) = reverse $digits;\n    # convert to binary\n    return join \"\", $digits;\n}","language":"perl"}
{"task_id":"MBPLP\/100","completion":"    $num =~ s\/(\\d{3,})(\\d)\\1\\2\\1\/;\n    return $num;\n}","language":"perl"}
{"task_id":"MBPLP\/101","completion":"    my ($i, $len) = 0, length($arr);\n    for (i = 0; i < $k; i++) {\n        $len = $len \/ $n;\n    }\n    return $arr[$len - 1];\n}","language":"perl"}
{"task_id":"MBPLP\/102","completion":"    return substr($word,0,2) . $word[2..-2] . substr($word,2..-2);\n}","language":"perl"}
{"task_id":"MBPLP\/103","completion":"    my $sum = 0;\n\n    my $n_1 = $n + $m;\n    my $m_1 = $n - $m;\n\n    $sum += $n_1 \/ 2 * $m_1;\n\n    $sum += $n_1 * $m_1 * $n_1 * $m_1;\n\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/104","completion":"    my ($return_list) = @_;\n    $return_list = map {\n        $2 = sort {$1;};\n        $3 = map {$1 @$2};\n        $2 = @$3;\n    } @$input_list;\n    return $return_list;\n}","language":"perl"}
{"task_id":"MBPLP\/105","completion":"    if (empty($lst)) {\n        print 0;\n    } else {\n        my ($n_true) = 0;\n        foreach my $i (0 .. $#$lst) {\n            if $i;\n            ++$n_true;\n        }\n        print $n_true;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/106","completion":"    $test_tup = @_;\n    # Add all the elements in the first list\n    # to the first tuple, then\n    # add all the elements in the second list\n    # to the second tuple and so on.\n    my $index;\n    my $i;\n    $index = 0;\n    while ($index < scalar $test_list) {\n        $i = $index + 1;\n        scalar $val = scalar $test_list[$index];\n        scalar $val1 = scalar $test_list[$i];\n        $test_tup = $test_tup { $test_list[$index] } $test_list[$i];\n        $index = $i;\n    }\n    return $test_tup;\n}","language":"perl"}
{"task_id":"MBPLP\/107","completion":"    $R =~ s\/\\s\/g;\n\n    if ($L <= $R) {\n        if ($R - $L == 1) {\n            $_ = 0;\n        } else {\n            $_ = $R - $L + 1;\n        }\n    } else {\n        $_ = 0;\n    }\n\n    return $_;\n}","language":"perl"}
{"task_id":"MBPLP\/108","completion":"    return [sort keys %{$num1}, sort keys %{$num2}, sort keys %{$num3}];\n}","language":"perl"}
{"task_id":"MBPLP\/109","completion":"    my %odd = 1..$n;\n    return length($s ~ $s{$odd});\n}","language":"perl"}
{"task_id":"MBPLP\/110","completion":"    my $sub_list;\n    for my $item (@range($test_list)) {\n        if ($item > $strt_val) {\n            push @$sub_list, $item;\n        }\n        if ($item > $stop_val) {\n            return @$sub_list;\n        }\n    }\n    return @$sub_list;\n}","language":"perl"}
{"task_id":"MBPLP\/111","completion":"    return @_;\n}","language":"perl"}
{"task_id":"MBPLP\/112","completion":"    my $pi = 3.14;\n    return $pi * ($diameter + 2 * $height);\n}","language":"perl"}
{"task_id":"MBPLP\/113","completion":"    return (isdigit($text)) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/114","completion":"    my ($test_list_freq) = @_;\n    my $freq_list = $test_list_freq;\n    my $unique_items = 1;\n\n    foreach my $item (@$test_list) {\n        my $item_freq = $freq_list{$item};\n        if ($item_freq == undef) {\n            $item_freq = $unique_items;\n            $freq_list{$item} = $item_freq;\n            $unique_items += 1;\n        }\n    }\n\n    return $freq_list;\n}","language":"perl"}
{"task_id":"MBPLP\/115","completion":"    my ($i, $n) = 0;\n    return 1 if $n = 0 or $n = count($list1) or $list1[$i] = {} then 0 else 1;\n}","language":"perl"}
{"task_id":"MBPLP\/116","completion":"    my $sum = 0;\n    foreach my $n (@$nums) {\n        if ($n > 0) {\n            $sum = $sum + $n;\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/117","completion":"    my ($converted_list) = $test_list;\n    my $curr_element;\n    my $curr_num;\n    foreach my $curr_element (@$test_list)\n    {\n        my ($curr_num, $curr_denom) = @$curr_element;\n        $converted_list = \\@convert($converted_list, $curr_num, $curr_denom);\n    }\n    return $converted_list;\n}","language":"perl"}
{"task_id":"MBPLP\/118","completion":"    my ($list) = ();\n\n    # The first character must be a space, ' ', or a negative sign, '-'.\n    if (substr($string, 1, 1) eq ' ' or substr($string, 1, 1) eq '-' or substr($string, 1, 1) eq '\\0') {\n        # Substring is empty.\n        return $list;\n    }\n    # If first character is '?', assume there is no space.\n    if (substr($string, 1, 1) eq '?') {\n        return $string;\n    }\n    # If first character is '(', assume there are no spaces.\n    if (substr($string, 1, 1) eq '(') {\n        # Find all the ')' characters in string.\n        while (substr($string, 1, 1) eq ')' || substr($string, 1, 1) eq '-') {\n            $string = substr($string, 1, ","language":"perl"}
{"task_id":"MBPLP\/119","completion":"    if (empty($arr))\n        return 0;\n    if ($n == $arr[0])\n        return $n;\n    if ($n == $arr[1])\n        return $n;\n    if ($n == $arr[2])\n        return $n;\n    if ($n == $arr[3])\n        return $n;\n    if ($n == $arr[4])\n        return $n;\n    if ($n == $arr[5])\n        return $n;\n    if ($n == $arr[6])\n        return $n;\n    if ($n == $arr[7])\n        return $n;\n    if ($n == $arr[8])\n        return $n;\n    if ($n == $arr[9])\n        return $n;\n    if ($n == $arr[10])\n        return $n;\n    if ($n == $arr","language":"perl"}
{"task_id":"MBPLP\/120","completion":"    my @list2 = (split \/(?=\\)) { $_ };\n    my @list3 = (split \/(?=\\)) { $_ };\n    my @list4 = (split \/(?=\\)) { $_ };\n    return max { map { $3 * $2 } @list2, map { $2 * $1 } @list1, map { $1 * $1 } @list4 } = @list3;\n}","language":"perl"}
{"task_id":"MBPLP\/121","completion":"    my @t = (0, 0, 0);\n    foreach my $number (@$A) {\n        if ($count < 2) {\n            if (($sum - $number) == $sum) {\n                $count++;\n                $t = @{ $number, 1, $number };\n            }\n        } else {\n            $sum += $number;\n            $count = 1;\n            $t = @{ $number, $count, $sum };\n        }\n    }\n    $A = sort @t;\n    return $A;\n}","language":"perl"}
{"task_id":"MBPLP\/122","completion":"    return $n + $n;\n}","language":"perl"}
{"task_id":"MBPLP\/123","completion":"    my $sum = 0;\n    for my $a (1 .. $limit) {\n        my $b = $a * $a - $a;\n        if ($b != $a && $b < $limit && is_amicable($a, $b)) {\n            $sum += $b;\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/125","completion":"    my $bits;\n    $bits =~ s\/\\d\/g;\n    my $max = 0;\n    $max = 1+$bits[0];\n    foreach ($bits[1..$n] as $x) {\n        if ($x - $max > 0) {\n            $max = $x;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/126","completion":"    my $result = 0;\n\n    for my $d (@divisors($a, $b, 0)) {\n        $result += $d;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/127","completion":"    return $x * $y;\n}","language":"perl"}
{"task_id":"MBPLP\/128","completion":"    my @words;\n    foreach my $str {\n        split \/\\s+\/;\n        push @words, $str;\n    }\n\n    my @result = [];\n\n    foreach my $word (@words) {\n        if ( strlen $word > $n ) {\n            push @result, $word;\n        }\n    }\n\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/129","completion":"    $my_matrix = map { $_ } $my_matrix;\n    $my_matrix = sort @{$my_matrix};\n    $my_matrix = map { ($e,$idx) } @{$my_matrix};\n    my ($sum, $min, $max) = 0;\n    for (@{$my_matrix}) {\n        $sum += $e;\n        if ($min >= $e) { $min = $e; }\n        if ($max <= $e) { $max = $e; }\n        $idx = @{$my_matrix} + 1;\n        if ($idx % 4 == 0) {\n            $idx = @{$my_matrix} - 1;\n            $e = $max - $min + 1;\n            $min = $max + 1;\n            $max = ","language":"perl"}
{"task_id":"MBPLP\/130","completion":"    my $max = $max || 0;\n    $max = 0;\n\n    for (my $i = 0; $i < $nums; $i++) {\n        if ($nums[$i] > $max) {\n            $max = $nums[$i];\n        }\n    }\n\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/131","completion":"    my %vowels = split \/,\/, $str1;\n    my $str2;\n\n    $str2 = reverse %vowels;\n    print $str2;\n}","language":"perl"}
{"task_id":"MBPLP\/132","completion":"    my ($tup2) = @_;\n\n    $t1 = join(\" \", map { $_ => $_.@_ } @_);\n    $t2 = join(\" \", map { $_ => $_.@_ } @_);\n\n    return join(\"\", map { $_.@_ => $_ } @_);\n}","language":"perl"}
{"task_id":"MBPLP\/133","completion":"    map { $n => $n < 0 ? $n : 0 } $nums;\n    return 0 + @_;\n}","language":"perl"}
{"task_id":"MBPLP\/134","completion":"    my $x;\n    my $i = 0;\n    my @res;\n\n    while($i < $p)\n    {\n        $x = ($arr = $arr[-1]);\n        $res[] = $x & 1;\n        ++$i;\n    }\n\n    return \"EVEN\" if @res{0} == 0 else \"ODD\";\n}","language":"perl"}
{"task_id":"MBPLP\/135","completion":"    $n = $n + 1;\n    my ($i, $count) = (0, 1);\n\n    # find the hexagonal number:\n    for ($i; $i < $n \/ 2; $i++) {\n        $count = ($count * $i) + ($count - 1) * ($n - 1 - $i);\n    }\n\n    # find the square number:\n    $i = 1;\n    $count = 1;\n    for (; $i < $n \/ 2; $i++) {\n        $count = ($count * $i) + ($count - 1) * ($n - 1 - $i);\n    }\n\n    return $count + $count + 1;\n}","language":"perl"}
{"task_id":"MBPLP\/136","completion":"    my $price = 1.2;\n    my $tax = .08;\n    my ($total) = $price * $units;\n    my $taxable = $total - $total * $tax;\n    return $taxable;\n}","language":"perl"}
{"task_id":"MBPLP\/137","completion":"    my $zs = 0;\n    foreach my $num (@$nums) {\n        if ($num == 0) {\n            $zs += 1;\n        }\n    }\n    return $zs \/ @$nums->length;\n}","language":"perl"}
{"task_id":"MBPLP\/138","completion":"    my $result;\n\n    for my $i (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n    {\n        my $x = $i ** 2;\n\n        if ($n == 0 || $x > $n)\n            continue;\n\n        if ($n == $x)\n            return 1;\n\n        if ($n == $x + 1)\n            return 0;\n\n        $result = 0;\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/139","completion":"    return 2 * PI * $r;\n}","language":"perl"}
{"task_id":"MBPLP\/140","completion":"    return map { $^2 } @$test_list;\n}","language":"perl"}
{"task_id":"MBPLP\/141","completion":"    my $i = 0;\n    my $target;\n    for my $n (sort { $n } { $n <=> $nums[$i++] })\n    {\n        if ($i - 1)\n        {\n            $target = $nums[$i - 1];\n            for my $j (sort { $n } { $target <=> $n })\n            {\n                if ($j - 1)\n                {\n                    if ($n < $target && $n > $nums[$j - 1])\n                        $nums[$j - 1] = $n;\n                }\n            }\n            $nums[$i - 1] = $target;\n        }\n    }\n    return $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/142","completion":"    return if $list1 == $list2 && $list2 == $list3 then 1 else 0;\n}","language":"perl"}
{"task_id":"MBPLP\/143","completion":"    my ($tuple) = (0);\n    my ($number) = (0);\n    for my $list (@_){\n        $tuple = $tuple + $list;\n    }\n    return $tuple;\n}","language":"perl"}
{"task_id":"MBPLP\/144","completion":"    my $result = 0;\n    my @pairs = map { $arr[$_] + 1 => $_ + 1 } @ reverse @ $arr;\n    foreach my $pair (@pairs) {\n        my $a = $pair[$_];\n        my $b = $pair[$_];\n        $result += abs($a - $b);\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/145","completion":"    $max = 0;\n    foreach my $i (sort @$arr) {\n        if ($i == $arr[$n]) continue;\n        if ($max < abs($i - $arr[$n])) {\n            $max = abs($i - $arr[$n]);\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/146","completion":"    my $str2 = '';\n    for my $ch (split \/\\s\/, $str1) {\n        $str2 .= ord($ch) . ' ';\n    }\n\n    $str2 = substr 0, strlen $str2;\n\n    return join '', map { ord $chr -> $chr }, $str2;\n}","language":"perl"}
{"task_id":"MBPLP\/147","completion":"    $max = 0;\n    for ($row = 0; $row < $m; $row++) {\n        $max += $tri[$row][$row];\n        for ($col = $row + 1; $col < $n; $col++) {\n            $max = max($max, $tri[$row][$col] + $tri[$col][$row]);\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/148","completion":"    # If N is odd, then we can't split it.\n    if ($N % 2 != 0) {\n        print $N;\n        return $N;\n    }\n    $max = 0;\n    $min = 0;\n    $max_part = 0;\n    $min_part = 0;\n    for ($i=0; $i < $N; $i++) {\n        # We can use modulo to split it.\n        $max_part = ($i+1) % 10;\n        $min_part = ($i+1) \/ 10;\n        if ($max < $max_part + $min_part) {\n            $max = $max_part + $min_part;\n        }\n        if ($min > $max_part + $min_part) {\n            $min = $max_part + ","language":"perl"}
{"task_id":"MBPLP\/149","completion":"    $res = 0;\n    $max = 0;\n    $current_subsequence_length = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < $n) {\n        while ($j < $n - 1 && $arr[$j + 1] - $arr[$i] == 1) {\n            $j++;\n        }\n        if ($current_subsequence_length >= $max) {\n            $max = $current_subsequence_length;\n            $res = $i;\n        }\n        $current_subsequence_length = $j - $i + 1;\n        $i = $j + 1;\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/150","completion":"    return (not ($a == $b && $a != $c)) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/151","completion":"    if($x == $y) return 1;\n\n    $divisors = $x divides $y = $x - $y + 1;\n\n    $lcm = $divisors > 1 ? $y : $divisors;\n\n    foreach ($divisors as $divisor) {\n        if ($divisor == $lcm) {\n            if ($x % $divisor == 0) return 0;\n            else return 1;\n        }\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/152","completion":"    my $a1 = 0;\n    my $a2 = $x->length;\n    my $r = 0;\n    if ($a2 > 1)\n    {\n        $a1 = 0;\n        $a2 = $a2 \/ 2;\n        $r = $a1 + $a2;\n        my @m = merge($x, $x, $r, $a2);\n        $x = @m;\n        if ($a1 < $a2)\n        {\n            $r = $r \/ 2;\n            $x = merge($x, $x, $r, $a2);\n        }\n    }\n    return $x;\n}","language":"perl"}
{"task_id":"MBPLP\/153","completion":"    my ($x, $y) = [sqrt($b * $b - 4 * $a * $c), -$b \/ (2 * $a)];\n    return [$x, $y];\n}","language":"perl"}
{"task_id":"MBPLP\/154","completion":"    my @rows = map { $N => $nums[$_] };\n    my @cols = map { $_ => $rows[$N] };\n    return @cols;\n}","language":"perl"}
{"task_id":"MBPLP\/155","completion":"    return $0x7f ^ $n;\n}","language":"perl"}
{"task_id":"MBPLP\/156","completion":"    return $tuple_str = map { { [substr(++$tuple_str[0], 1), substr(++$tuple_str[0], 2)] } }\n}","language":"perl"}
{"task_id":"MBPLP\/157","completion":"    my ($list2) = map {\n        $x = @_;\n        for my $i (0, $x) {\n            my ($count, $y) = split \/,\/;\n            $y = $y + 1;\n            $y = $y - $count;\n            $y = $y . floor ();\n            $y = $y . 1 + 1;\n            $y = $y . $count - 1;\n            $y = $y + 1;\n            $y = $y . floor ();\n            $y = $y . $i;\n            $list2 = $list2 { $y };\n        }\n    } @$list1;\n    return $list2;\n}","language":"perl"}
{"task_id":"MBPLP\/158","completion":"    $ops = 0;\n    my $tmp = $arr;\n    for (@{$tmp} = @{$tmp}\/$k; $tmp >= 0; $tmp--) {\n        if (defined $tmp && $tmp != $arr[$tmp])\n            $ops++;\n        else\n            $ops = -1;\n    }\n    return $ops;\n}","language":"perl"}
{"task_id":"MBPLP\/159","completion":"    my $result = \"\";\n    my $month_map = {\n        \"January\"=> \"winter\",\n        \"February\"=> \"spring\",\n        \"March\"=> \"spring\",\n        \"April\"=> \"spring\",\n        \"May\"=> \"spring\",\n        \"June\"=> \"spring\",\n        \"July\"=> \"spring\",\n        \"August\"=> \"spring\",\n        \"September\"=> \"spring\",\n        \"October\"=> \"autumn\",\n        \"November\"=> \"autumn\",\n        \"December\"=> \"autumn\"\n    };\n\n    $result = ($month_map[$month]) ? $month_map[$month] : $month;\n    if ($days == 28 || $days == 29) {\n        $result = $result . \"n\";\n    } else {\n        $result = $result . \"s\";\n    }","language":"perl"}
{"task_id":"MBPLP\/160","completion":"    $x = $a + $b ;\n    $y = $n - $x ;\n    $r = join(\", \", map { $x => $y } @_);\n    return $r == $n ? [ $x, $y ] : \"No solution\";\n}","language":"perl"}
{"task_id":"MBPLP\/161","completion":"    my @res;\n\n    for my $element (@$list1) {\n        if (not (@$list2 contains $element)) {\n            push(@res, $element);\n        }\n    }\n\n    return @res;\n}","language":"perl"}
{"task_id":"MBPLP\/162","completion":"    if ($n <= 0)\n        return 0;\n    else\n        $n + sum_series ($n - 1);\n}","language":"perl"}
{"task_id":"MBPLP\/163","completion":"    my ($p, $a, $b) = @_;\n    my ($ap, $an, $bp, $bn) = @_;\n    return (($ap + $an) * ($bp + $bn) - ($ap * $an - $ap * $bp + $bp * $an + $an * $bn + $bp * $bn)) \/ 2;\n}","language":"perl"}
{"task_id":"MBPLP\/164","completion":"    my $sum;\n    my @divisors;\n\n    for ($div = 1; $div <= $num1; $div++)\n    {\n        if ($num1 % $div == 0)\n        {\n            push @divisors, $div;\n        }\n    }\n\n    for ($div = 1; $div <= $num2; $div++)\n    {\n        if ($num2 % $div == 0)\n        {\n            push @divisors, $div;\n        }\n    }\n\n    $sum = 0;\n\n    for (@divisors)\n    {\n        $sum += $div;\n    }\n\n    if ($sum == $num1 + $num2)\n    {\n        return 0;\n    }\n    else\n    {\n        return 1;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/165","completion":"    # your code\n    if ( $str1 ) {\n        $result = length( $str1 );\n    } else {\n        $result = 0;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/166","completion":"    return $N & ~$A ? $N - $A : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/167","completion":"    $n += 1;\n    while ($n < $n << 1) {\n        $n <<= 1;\n    }\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/168","completion":"    $a{$x}++\n    return 0 if $a{$x} eq 0;\n}","language":"perl"}
{"task_id":"MBPLP\/169","completion":"    my @a = ();\n    my @b = ();\n    my @s = 0;\n\n    $a = @_;\n    if ($n < 1) {\n        return 0;\n    }\n\n    for (@a[0..$n]) {\n        my $s1 = 1;\n        for (@a[0..$n]) {\n            my $s2 = $s1 + $s;\n            $s = $s2;\n            $s1 = $s;\n        }\n        $b = $a;\n        $a = $a[1..$n];\n        $b[0] = $s;\n        $b[$n] = $b[0];\n        $b[$n - 1] = $a[0];\n    }\n    return $s;\n}","language":"perl"}
{"task_id":"MBPLP\/170","completion":"    my @$sum = 0;\n\n    for ($i = $m; $i <= $n; ++$i) {\n        $sum += $list1[$i];\n    }\n\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/171","completion":"    $a = $a * 5;\n    @_ = $a ;\n    return $a;\n}","language":"perl"}
{"task_id":"MBPLP\/172","completion":"    my $result = 0;\n\n    my $std = substr($s, 0, 2);\n    my $std_length = strlen($std);\n\n    for (my $i = 0; $i < $std_length; $i++) {\n        if ($std eq $s[$i + 2]) {\n            $result = $result + 1;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/173","completion":"    my ($result) = '';\n    my ($char) = '';\n    for (@_){\n        if (defined ($char) && $_ && $_ == $_){\n            continue;\n        }\n        $result = $result . $_;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/174","completion":"    my @d = map { $_->[0] } @$l;\n    my @r = map { $_->[1] } @$l;\n    my ($k, $v) = @_;\n    ($d[$k] ??= []) ||= $r;\n}","language":"perl"}
{"task_id":"MBPLP\/175","completion":"    my ($count) = 0;\n    $count = ($str1->size == 0 ? 1 : 0);\n    foreach my $ch (split \/\\(\\)|\\[\\]\/, $str1) {\n        if ($ch == '(') {\n            $count = $count + 1;\n        }\n        elseif ($ch == ')') {\n            $count = $count - 1;\n        }\n        elseif ($ch == '[') {\n            $count = $count + 1;\n        }\n        elseif ($ch == ']') {\n            $count = $count - 1;\n        }\n        else {\n            $count = $count - 1;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/176","completion":"    my ($p, $q, $r) = @_;\n\n    $p + $q > $a ? $p + $q : $a + $r;\n    $p + $q > $b ? $p + $q : $b + $r;\n    $p + $q > $c ? $p + $q : $c + $r;\n\n    $p + $q > $a + $b ? $p + $q : $a + $b + $r;\n    $p + $q > $a + $c ? $p + $q : $a + $c + $r;\n    $p + $q > $b + $c ? $p + $q : $b ","language":"perl"}
{"task_id":"MBPLP\/177","completion":"    my ($low, $high, $sum) = @_;\n\n    if ($L > $R) {\n        my ($low, $high) = ($R, $L);\n        $sum = $R + $L;\n    } else {\n        my ($low, $high) = ($L, $R);\n        $sum = $R - $L + $L;\n    }\n\n    return $sum == $high ? [$low, $high] : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/178","completion":"    my @matches;\n\n    for my $pattern (@$patterns) {\n        $matches = @_;\n        $matches =~ s\/^$pattern\/$matches;\n    }\n\n    print \"Matched!\" if $matches;\n    print \"Not Matched!\" if ! $matches;\n}","language":"perl"}
{"task_id":"MBPLP\/179","completion":"    my $divisors = 1..$x;\n    if ($x % 2 == 0)\n    {\n        my $even = $x \/ 2;\n        return 1;\n    }\n    else\n    {\n        my $odd = ($x - 1) \/ 2;\n        return 1 if $even == $odd;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/180","completion":"    my ($lat1, $lon1, $lat2, $lon2) = @_;\n\n    my $R = 6371;\n    my $d = $R * acos(cos($slat)*cos($elat) * cos($slon-$lon1)*cos($lon2-$lon1) + sin($slat)*sin($elat));\n\n    return $d;\n}","language":"perl"}
{"task_id":"MBPLP\/181","completion":"    my @result;\n    my $prefix = '';\n    if ($n <= 0) {\n        @result = $prefix;\n    } else {\n        my $temp = $prefix;\n        my @temp;\n        foreach my $s (@$arr) {\n            $temp = $s;\n            $prefix = $temp;\n            my @s = array_map { $temp };\n            my $prefix_len = $prefix;\n            while (1) {\n                my $c = $prefix;\n                for my $l (@s) {\n                    if (substr($c, 0, $prefix_len) != $l) {\n                        return $prefix;\n                    }\n                }\n                $prefix_len = length($prefix) + 1;\n            }\n        }\n        @result = $temp;\n    }\n    return","language":"perl"}
{"task_id":"MBPLP\/182","completion":"    my @upper = $string =~ s\/\\b([A-Z])\\b\/g;\n    my @lower = $string =~ s\/\\b([a-z])\\b\/g;\n    my @special = $string =~ s\/\\b([\\$%&\\*])\\b\/g;\n    my @number = $string =~ s\/\\b([0-9])\\b\/g;\n\n    return @upper, @lower, @special, @number;\n}","language":"perl"}
{"task_id":"MBPLP\/183","completion":"    $arr = @_;\n    $counter = 0;\n    $for ($i = 1; $i <= $arr; $i++) {\n        $arr[$i] = $arr[$i] - $k;\n        if ($arr[$i] < 0) {\n            continue;\n        }\n        for ($j = $i + 1; $j <= $arr; $j++) {\n            if ($arr[$j] - $arr[$i] == $k) {\n                $counter++;\n            }\n        }\n    }\n    return $counter;\n}","language":"perl"}
{"task_id":"MBPLP\/184","completion":"    my @result = map { $list[$_] > $num } @_;\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/185","completion":"    my ($x, $y, $z) = $a + $b*$x + $c*$y;\n    $x = $x - ($y*$y + $z*$z) \/ ($2*$z);\n    $y = $y - ($x*$x + $z*$z) \/ ($2*$z);\n    return $x . \" \" . $y;\n}","language":"perl"}
{"task_id":"MBPLP\/186","completion":"    foreach my $pattern (@$patterns) {\n        if ($text =~ $pattern) {\n            print \"Matched!\";\n            # $text will contain matched string\n            return;\n        }\n    }\n    print \"Not Matched!\";\n    # $text will contain unmatched string\n}","language":"perl"}
{"task_id":"MBPLP\/187","completion":"    #sub longest_common_subsequence($X, $Y, $m, $n)\n    {\n        my ($x, $y) = @_;\n        if (ord($x) == ord($y)) {\n            print $x ;\n            return ;\n        }\n        my $A = range($m, $n) ;\n        my $B = range($m, $n) ;\n        my $C = $B ;\n        #my $C = reverse($B) ;\n        foreach my $i (0..$n) {\n            if ($i > $m) {\n                if ($C eq $A) {\n                    print $x ;\n                    return ;\n                }\n                $B = $B ++ ;\n                #my $B = $B + 1 ;\n                $C = $B ;\n                #","language":"perl"}
{"task_id":"MBPLP\/188","completion":"    my @square = 0;\n    my @count = 0;\n\n    while($n--)\n        @square[($n + $n - 1) \/ 2]++;\n\n    my @a = 0;\n    my @b = 0;\n\n    while(@square[0] || @square[1])\n    {\n        my $a = $n + $a;\n        my $b = $n + $b;\n        my $result = $a * $b;\n        @count += ($result == $n ? 1 : 0);\n\n        $a++;\n        $b++;\n    }\n\n    return $count ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/189","completion":"    $n = (int)$n;\n    $arr = (int[])$arr;\n    $arr = (sort $arr, 'reverse');\n    $arr = (reject $arr, 'is', $n);\n    $arr = (filter $arr, 'is', $n);\n    $arr = (filter $arr, 'ne', $n);\n    $arr = (filter $arr, 'defined', $n);\n    $arr = (map $arr, 'abs');\n    return $arr[0];\n}","language":"perl"}
{"task_id":"MBPLP\/190","completion":"    return $x1 <= $x2 && $y1 <= $y2 ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/191","completion":"    my @days = (\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"\n    );\n    my @n_days = 0;\n    my @n_days_30 = 0;\n    for (@days) {\n        if ($monthname3 =~ \/[^a-zA-Z]\/) {\n            push @days, 1 if $monthname3 eq 1;\n            push @days, 30 if $monthname3 eq 2;\n            push @days, 31 if $monthname3 eq 3;\n            push @days, 30 if $monthname3 eq 4;\n            push @days, 31 if $monthname3 eq 5;\n            push @days, 30 if $monthname3 eq","language":"perl"}
{"task_id":"MBPLP\/192","completion":"    if ($str =~ m\/^[a-z]+\\d+$\/) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/193","completion":"    my @test_tup_no_dups = {};\n    foreach my $test_tup (split \/,\/, $test_tup) {\n        push @test_tup_no_dups, $test_tup[0];\n    }\n    return @test_tup_no_dups;\n}","language":"perl"}
{"task_id":"MBPLP\/194","completion":"    $n =~ s\/\\d+\/$1\/;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/195","completion":"    return $n - 1 - $arr[0];\n}","language":"perl"}
{"task_id":"MBPLP\/196","completion":"    return [join @(map { my $i = 0; $a = @$test_list; my $k = $K; $a[0] = $a[0][++$k]; if ( defined $a[1] ) $a[1] = $a[1][$k]; if ( defined $a[2] ) $a[2] = $a[2][$k]; return $a; } $test_list), $K]\n}","language":"perl"}
{"task_id":"MBPLP\/197","completion":"    return map {\n        $test_tup1 =~ s\/[^.]*[.]+\/s\/g;\n        $test_tup2 =~ s\/[^.]*[.]+\/s\/g;\n        return $test_tup1 . $test_tup2 . \"\\t\";\n    } @_;\n}","language":"perl"}
{"task_id":"MBPLP\/198","completion":"    return ($a + $b) * ($a + $b) \/ 4 ;\n}","language":"perl"}
{"task_id":"MBPLP\/199","completion":"    $n =~ s\/[^1]\/0\/g;\n    return 1 << ($n - 1);\n}","language":"perl"}
{"task_id":"MBPLP\/200","completion":"    $max = $list1[0];\n    $index = 0;\n    for ($i = 1; $i < $list1; $i++) {\n        if ($list1[$i] > $max) {\n            $max = $list1[$i];\n            $index = $i;\n        }\n    }\n    return $index;\n}","language":"perl"}
{"task_id":"MBPLP\/201","completion":"    $size = $lst->count;\n\n    return if ($size == 1 && $lst->[0] == $lst->[0]) {\n        1;\n    } elsif ($size > 1 && $lst->[0] == $lst->[1]) {\n        1;\n    } elsif ($size > 2 && $lst->[0] == $lst->[1] && $lst->[0] != $lst->[2]) {\n        1;\n    } elsif ($size > 3 && $lst->[0] == $lst->[1] && $lst->[0] != $lst->[2] && $lst->[0] != $lst->[3]) {\n        1;\n    } elsif ($size > 4 && $lst->[0] == $lst->[1] && $lst->[0]","language":"perl"}
{"task_id":"MBPLP\/202","completion":"    my ($str2) = @_;\n\n    my $str_new;\n    for my $ch (@_){\n        if ($ch -eq \"a\") {\n            $str_new .= \"b\";\n        }\n        elseif ($ch -eq \"e\") {\n            $str_new .= \"f\";\n        }\n        elseif ($ch -eq \"i\") {\n            $str_new .= \"j\";\n        }\n        elseif ($ch -eq \"o\") {\n            $str_new .= \"p\";\n        }\n        elseif ($ch -eq \"u\") {\n            $str_new .= \"z\";\n        }\n        else {\n            $str_new .= $ch;\n        }\n    }\n\n    return $str_new;\n}","language":"perl"}
{"task_id":"MBPLP\/203","completion":"    my $xor = $n1 ^ $n2;\n    $xor =~ s\/0+1\/1;\n    $xor =~ s\/1+0\/0;\n    my $cnt = 0;\n    while ($xor > 0) {\n        $xor = $xor >> 1;\n        ++$cnt;\n    }\n    return $cnt;\n}","language":"perl"}
{"task_id":"MBPLP\/204","completion":"    $s =~ s\/$c\/;\n    return $s;\n}","language":"perl"}
{"task_id":"MBPLP\/205","completion":"    my ($arr_len) = $test_tup->size();\n    my ($i) = 0;\n    my ($j) = 0;\n    my ($arr) = $test_tup->toArray();\n    my ($arr2) = @_;\n    my ($inversion_count) = 0;\n    for ($i = 0; $i < $arr_len - 1; $i ++) {\n        for ($j = $i + 1; $j < $arr_len; $j ++) {\n            if ($arr[$i] > $arr[$j]) {\n                $inversion_count ++;\n            }\n        }\n    }\n    print $inversion_count;\n}","language":"perl"}
{"task_id":"MBPLP\/206","completion":"    return [\n        join , \"\", map { $1 } @shift $test_tup ,\n        join , \"\", map { $2 } @shift $test_tup ,\n        join , \"\", map { $3 } @shift $test_tup ,\n        join , \"\", map { $4 } @shift $test_tup ,\n        join , \"\", map { $5 } @shift $test_tup ,\n        join , \"\", map { $6 } @shift $test_tup \n    ];\n}","language":"perl"}
{"task_id":"MBPLP\/207","completion":"    my ($i, $longest) = 0, 0;\n    for (my $c = 1; $c <= length($str); $c++) {\n        $i = $c - 1;\n        for (my $d = $c + 1; $d <= length($str); $d++) {\n            if ($str[$i] == $str[$d]) {\n                my $count = 1;\n                for (my $k = $i + 1; $k < $d; $k++) {\n                    if ($str[$k] != $str[$i])\n                        ++$count;\n                    else if ($k == $d - 1)\n                        ++$count;\n                }\n                if ($count > $longest)\n                    $longest = $count;\n            }\n        }\n    }\n    return ","language":"perl"}
{"task_id":"MBPLP\/208","completion":"    my $regex = \/^[0-9]+$\/;\n    if ($regex \/ $num) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/209","completion":"    sort $heap;\n    my @new = shift $heap;\n    push @new, $a;\n    pop $heap;\n    push @new, $a;\n    sort @new;\n}","language":"perl"}
{"task_id":"MBPLP\/210","completion":"    return $string =~ s\/[^a-zA-Z0-9]\/g;\n}","language":"perl"}
{"task_id":"MBPLP\/211","completion":"    my $result = 0;\n    my $temp = 1;\n    for my $i = 0; $i <= $n; $i++ {\n        $temp = $temp * 2;\n        $temp = bin2dec($temp);\n        if ($temp & $i) {\n            $result++;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/212","completion":"    $n^4 = $n * $n * $n * $n;\n    return $n^4;\n}","language":"perl"}
{"task_id":"MBPLP\/213","completion":"    my $result = $test_tup1 . $test_tup2;\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/214","completion":"    return sprintf(\"%.4f\", (180 \/ 3.141592 * $radian));\n}","language":"perl"}
{"task_id":"MBPLP\/215","completion":"    my ($encoded) = join(',', @_);\n    my ($decoded) = map {\n        my ($size, $value) = split(\/(\\d+)\/);\n        if ($size == 2)\n        {\n            my ($size, $value) = split(\/(\\d+)\/);\n            if ($size >= 1)\n            {\n                $decoded{$size} = $value;\n            }\n            else\n            {\n                $decoded{$size} = $encoded{$size - 1};\n            }\n        }\n        else\n        {\n            my ($size, $value) = split(\/(\\d+)\/);\n            if ($size >= 1)\n            {\n                $decoded{$size} = $decoded{$size - 1} .. $value;\n            }\n            else\n            {\n                $decoded{$size} = $decoded{$size - 1} .. ","language":"perl"}
{"task_id":"MBPLP\/216","completion":"    return (sub $list1, $list2) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/217","completion":"    if ($str =~ m{(.)\\1+} ) {\n        $1 = $0;\n    } else {\n        $1 = \"\\x00\";\n    }\n    return $1;\n}","language":"perl"}
{"task_id":"MBPLP\/218","completion":"    my $diff = $B - $A;\n    my $min = $diff + 1;\n    return $min if $min >= 0;\n}","language":"perl"}
{"task_id":"MBPLP\/219","completion":"    my $res = @();\n    my $min = $_;\n    my $max = $_;\n\n    my $i = 0;\n    while($i < $K)\n    {\n        my $item = $test_tup[$i];\n        if($item < $min)\n        {\n            $min = $item;\n        }\n        if($item > $max)\n        {\n            $max = $item;\n        }\n\n        $i = $i + 1;\n    }\n\n    $res = [$min, $max];\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/220","completion":"    my $max_n = $n - 1;\n\n    my $start = strpos($text, \" \", 0);\n    my $stop = strpos($text, \" \", $max_n);\n\n    if ($stop == false)\n    {\n        $stop = $textlen($text);\n    }\n\n    return substr($text, $start, $stop - $start);\n}","language":"perl"}
{"task_id":"MBPLP\/221","completion":"    $nums = sort $nums % 2 == 1 ? (reverse $nums) : $nums;\n    $nums = @_;\n    $nums = @_;\n    return $nums[0];\n}","language":"perl"}
{"task_id":"MBPLP\/222","completion":"    my $first_element = $test_tuple[0];\n    for (my $i = 1; $i < count($test_tuple); $i++)\n    {\n        if ($test_tuple[$i] - $first_element != 0 && $test_tuple[$i] - $first_element != -1)\n            return 0;\n    }\n    return 1;\n}","language":"perl"}
{"task_id":"MBPLP\/223","completion":"    my %cnt = 0;\n    foreach my $num (@$arr)\n        $cnt = $cnt + if $num == $x then 1 else 0;\n    return $cnt > $n \/ 2 ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/224","completion":"    return binlen($n) - binltoi($n, 1);\n}","language":"perl"}
{"task_id":"MBPLP\/225","completion":"    $mid = $low + ( $high - $low ) \/ 2;\n\n    if ( $high - $low <= 1 )\n    {\n        if ( $low == $high )\n            return $low;\n        else if ( $arr[$low] < $arr[$mid] )\n            return $low;\n        else\n            return $mid;\n    }\n\n    if ( $arr[$mid] < $arr[$high] )\n        return $mid;\n\n    if ( $mid - $low > 1 )\n    {\n        if ( $arr[$low] < $arr[$mid - 1] )\n            return $low;\n        else if ( $arr[$mid] < $arr[$mid - 1] )\n            return $mid;\n        else\n            return $mid - 1;\n    }\n\n    if ( ","language":"perl"}
{"task_id":"MBPLP\/226","completion":"    my ($newstr) = \"\";\n    $newstr =~ s\/\\d(\\1)\/\\1\/;\n    $newstr;\n}","language":"perl"}
{"task_id":"MBPLP\/227","completion":"    $min = $a;\n    if($b < $min) { $min = $b; }\n    if($c < $min) { $min = $c; }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/228","completion":"    return $n >= $l && $n <= $r;\n}","language":"perl"}
{"task_id":"MBPLP\/229","completion":"    $arr = sort $arr, @AR;\n    return $arr[0..$n];\n}","language":"perl"}
{"task_id":"MBPLP\/230","completion":"    return $str1 =~ s\/\\s+\/$char ;\n}","language":"perl"}
{"task_id":"MBPLP\/231","completion":"    $sum = 0;\n    foreach ($tri as $i => $v) {\n        $sum += $v[($i+1)%$n];\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/232","completion":"    my %sorted = sort %$list1 by %$1;\n    my %result = [];\n    for (@i = 0; @i < @$n; @i++) {\n        if (position %sorted %{ $_ } eq 0) {\n            push %result, $_;\n        }\n    }\n    return %result;\n}","language":"perl"}
{"task_id":"MBPLP\/233","completion":"    return ($r * $h * 6);\n}","language":"perl"}
{"task_id":"MBPLP\/234","completion":"    return $l ^ 3;\n}","language":"perl"}
{"task_id":"MBPLP\/235","completion":"    return $n | $n - 1;\n}","language":"perl"}
{"task_id":"MBPLP\/236","completion":"    return $N + $K - 1;\n}","language":"perl"}
{"task_id":"MBPLP\/237","completion":"    my ($count_list) = {};\n\n    for my $tuple (@$test_list) {\n        my ($x) = @$tuple;\n        my $y = $x[1];\n\n        if ($count_list[$y] !== undef) {\n            $count_list[$y] = $count_list[$y] + 1;\n        } else {\n            $count_list[$y] = 1;\n        }\n    }\n\n    return $count_list;\n}","language":"perl"}
{"task_id":"MBPLP\/238","completion":"    my $n = 0;\n    for my $i (0; $i < $str; $i++) {\n        if ($i == 0 || $str[$i] != $str[$i - 1]) {\n            if ($str[$i] != \"\") $n++;\n        }\n    }\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/239","completion":"    my $numbers = range(0, $m, 2) . ',' . $m . 2;\n    my @sequences;\n\n    for my $number (@$numbers) {\n        my $length = $number;\n        my $start = $length \/ 2;\n        my $step = $length - 1;\n        my $end = $start + $step - 1;\n\n        my @elements = $number . $start .. $end;\n        $sequences = @elements . $step - 1 . $step + 1 . $step + 2 . $step - 2;\n\n        @sequences = @sequences . join(', ', @sequences | $sequences ? $sequences : '');\n    }\n\n    return $sequences ? length @sequences : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/240","completion":"    my @$list = @$list1 = @$list2;\n\n    $list[count($list) - 1] = @$list2[0];\n\n    return $list;\n}","language":"perl"}
{"task_id":"MBPLP\/241","completion":"    $output = 0;\n    for ($i = 0; $i < $m; $i++) {\n        $output[$i] = $o;\n        for ($j = 0; $j < $n; $j++) {\n            $output[$i][$j] = $i == 0 && $j == 0 ? '*' : '*';\n        }\n    }\n    return $output;\n}","language":"perl"}
{"task_id":"MBPLP\/242","completion":"    my ($cnt) = 0;\n\n    $cnt = strlen($str1);\n\n    return $cnt;\n}","language":"perl"}
{"task_id":"MBPLP\/243","completion":"    my @tmp = @_;\n    my @list_of_lists = @_;\n    my @list_of_lists_sorted = @_;\n\n    my $n = 1;\n    while ($n < $#$lst) {\n        $i = 1;\n        my $cur_tuple = $list_of_lists[$n][$i];\n        while ($i < $#$lst) {\n            my $next_tuple = $list_of_lists[$n][$i+1];\n            if ($cur_tuple == $next_tuple) {\n                $list_of_lists_sorted[$n][$i] = $list_of_lists[$n][$i] + $list_of_lists[$n][$i+1];\n                $list_of_lists_sorted[$n][$i+1] = $list_of_lists[$n][$i];\n                $i++;\n            ","language":"perl"}
{"task_id":"MBPLP\/244","completion":"    my $next = 1;\n    for my $n (1, $N)\n    {\n        if ($n * $n > $next)\n        {\n            $next = $n * $n;\n        }\n    }\n    return $next;\n}","language":"perl"}
{"task_id":"MBPLP\/245","completion":"    my $max = 0;\n    for ($i = 0; $i < $n; $i++) {\n        my $current = 0;\n        for ($j = $i + 1; $j < $n + 1; $j++) {\n            $current += $arr[$j - 1];\n        }\n        if ($current > $max) {\n            $max = $current;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/246","completion":"    if ( $number < 0 ) {\n        $number = -$number;\n        $number = $number ^ 2;\n    }\n    else {\n        $number = $number ^ 2;\n    }\n    return $number;\n}","language":"perl"}
{"task_id":"MBPLP\/247","completion":"    $str =~ s\/^[^A-Z]*[A-Z]$\/ \/g;\n    $str =~ s\/[^A-Z]*[A-Z][^A-Z]$\/ \/g;\n    $str =~ s\/^[^A-Z]*[A-Z][^A-Z]$\/ \/g;\n    return $str;\n}","language":"perl"}
{"task_id":"MBPLP\/248","completion":"    my @sum = 0;\n    for my $i (1 .. $n - 1)\n    {\n        $sum += 1.0 \/ $i;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/249","completion":"    my $intersection = map {\n        $array_nums1 { $num } = $num and $array_nums2 { $num };\n    } keys $array_nums1 intersect $array_nums2;\n    return $intersection;\n}","language":"perl"}
{"task_id":"MBPLP\/250","completion":"    $n = 0;\n    for ($i = 0; $i < $tup; $i++) {\n        if ($tup[$i] == $x) {\n            $n++;\n        }\n    }\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/251","completion":"    return join (map { $element } @_);\n}","language":"perl"}
{"task_id":"MBPLP\/252","completion":"    $numbers =~ s\/\\D+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n    $numbers =~ s\/\\d+\/, '.0';\n   ","language":"perl"}
{"task_id":"MBPLP\/253","completion":"    my ($counter) = 0;\n\n    while ($list1->have_more_elements)\n    {\n        if (! $list1->current_element =~ m\/\\d+\/)\n        {\n            return $counter;\n        }\n        else\n        {\n            $counter = $counter + 1;\n        }\n\n        $list1->advance;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/254","completion":"    my @words;\n\n    # Use the split() method to separate the text into words.\n    # Since @words is an associative array, you can access\n    # 'words[word_start_with_a_or_e]' to get the first word.\n    $words = split \/\\s+\/;\n\n    # Now use the foreach loop to iterate through the words\n    foreach my $word (@words) {\n        if (substr $word, 1, 1) {\n            $word_start_with_a_or_e = $word;\n        }\n    }\n\n    return $word_start_with_a_or_e;\n}","language":"perl"}
{"task_id":"MBPLP\/255","completion":"    $c = 0;\n    push @{$l, $c}, [$c] @{$l, $n};\n    while (not @{$l} eq [$c]))\n    {\n        ++$c;\n        push @{$l, $c}, [$c] @{$l, $n};\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/256","completion":"    my @primes = 0;\n    if ($n < 2) {\n        return 0;\n    }\n\n    $primes[0] = 1;\n    for (0..$n - 1) {\n        my $prime = 0;\n        if ($primes[$prime] && $primes[$prime + 1]) {\n            $primes[$prime + 1] = 0;\n        } else if ($primes[$prime]) {\n            $primes[$prime] = 0;\n            $primes[$prime + 1] = 1;\n            ++$primes[$prime];\n            $primes[$prime + 1] = 1;\n        }\n    }\n    return $primes[1] + 1;\n}","language":"perl"}
{"task_id":"MBPLP\/257","completion":"    print join(\", \", @_);\n}","language":"perl"}
{"task_id":"MBPLP\/258","completion":"    $result = 0;\n    foreach my $num (@$array_nums)\n    {\n        if ($num % 2)\n            $result += 1;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/259","completion":"    $max_tup = max_elements($test_tup1, $test_tup2);\n    return $max_tup;\n}","language":"perl"}
{"task_id":"MBPLP\/260","completion":"    my ($ret) = 0;\n    my ($sieve, $prime, $factor, $k) = @_;\n    for ($i = 2; $i < $n; $i++) {\n        if ($sieve[$i]) {\n            my ($prime, $factor, $k) = @_;\n            $ret += $k;\n        }\n    }\n    return $ret;\n}","language":"perl"}
{"task_id":"MBPLP\/261","completion":"    $test_tup2 = sort $test_tup2;\n    $test_tup1 = sort $test_tup1;\n    $div_result = [];\n    foreach ($test_tup1 as $tup1) {\n        foreach ($test_tup2 as $tup2) {\n            if ($tup1 != $tup2) {\n                $div_result = $div_result + $tup1 \/ $tup2;\n            }\n        }\n    }\n    return $div_result;\n}","language":"perl"}
{"task_id":"MBPLP\/262","completion":"    my @list2 = [];\n    my @list3 = [];\n\n    my $max = length($list1);\n    if($L >= $max) {\n        for($i = 0; $i < $max; $i++) {\n            push @list2, $list1[$i];\n        }\n    } else {\n        for($i = 0; $i < $L; $i++) {\n            push @list3, $list1[$i];\n            if($i < ($max - $L)) {\n                push @list2, @list3;\n                @list3 = [];\n            }\n        }\n    }\n    return @list2;\n}","language":"perl"}
{"task_id":"MBPLP\/263","completion":"    my %keys = sort keys %$d1, %$d2;\n    my %d1, %d2;\n    for my $key (keys %$d1) {\n        if (hashtable %$d2 @{$key}) {\n            $d1{$key} = (hashtable %$d2 @{$key})->{$key};\n        }\n    }\n    for my $key (keys %$d2) {\n        if (hashtable %$d1 @{$key}) {\n            $d2{$key} = (hashtable %$d1 @{$key})->{$key};\n        }\n    }\n    return {\n        $d1,\n        $d2,\n    };\n}","language":"perl"}
{"task_id":"MBPLP\/264","completion":"    my ($w_age) = @_;\n    return ($h_age * 365) + ($w_age * 730);\n}","language":"perl"}
{"task_id":"MBPLP\/265","completion":"    my @arr = split \/\\s+\/;\n    my @new = [];\n    foreach my $e (@arr) {\n        if (preg_match (\/^0?(\\d+)\/i, $e, $matches, $d) !== FALSE) {\n            $matches[1]++;\n            $new{$matches[1]} = [$e];\n        } else {\n            $new[] = $e;\n        }\n    }\n    return $new;\n}","language":"perl"}
{"task_id":"MBPLP\/266","completion":"    $l =~ s\/\\d+\/$l+s\/\\d+\/;\n    print $l;\n}","language":"perl"}
{"task_id":"MBPLP\/267","completion":"    my ($x) = 0;\n    my ($y) = 0;\n    for (0..$n) {\n        $x++;\n        if ($x == $n + 1) {\n            $x = 1;\n        }\n        $y = $x * $x;\n    }\n    return $y;\n}","language":"perl"}
{"task_id":"MBPLP\/268","completion":"    @_;\n}","language":"perl"}
{"task_id":"MBPLP\/269","completion":"    return ord($k);\n}","language":"perl"}
{"task_id":"MBPLP\/270","completion":"    return $arr[0] + $n * $arr[1];\n}","language":"perl"}
{"task_id":"MBPLP\/271","completion":"    my ($x, @v) = 0, 1;\n    for my $i = 1; $i <= $n; ++$i\n    {\n        push @v, $x;\n        $x *= $x;\n        if (is_even($i))\n            $x *= $x;\n    }\n    my @s = sort @v;\n    return $s[5];\n}","language":"perl"}
{"task_id":"MBPLP\/272","completion":"    my ($a1, $a2, $a3) = @_;\n    $a2 = $a2->split(\" \");\n    $a3 = $a3->split(\" \");\n    $result = $a2->$a3;\n    print @$result;\n}","language":"perl"}
{"task_id":"MBPLP\/273","completion":"    my %res_tup;\n    foreach my $idx_tup2 (sort { $idx_tup2 <=> $test_tup2 }) {\n        $res_tup[$idx_tup2] = $test_tup1[1] - $test_tup2[$idx_tup2];\n    }\n    return $res_tup;\n}","language":"perl"}
{"task_id":"MBPLP\/274","completion":"    my ($a, $b, $c) = 0;\n    for ($i = 0; $i <= n; ++$i) {\n        if ($i % 2 == 0) {\n            $a += $i;\n        } else {\n            $b += $i;\n        }\n    }\n    for ($i = 0; $i <= n; ++$i) {\n        if ($i % 2 == 0) {\n            $a *= $i;\n            $b *= ($i - 1);\n            $c *= ($i - 1) - 1;\n        }\n    }\n    return $a + $b + $c;\n}","language":"perl"}
{"task_id":"MBPLP\/275","completion":"    $m = $n - 1;\n    $a[0] = $a[$n] = undef;\n    return $m;\n}","language":"perl"}
{"task_id":"MBPLP\/276","completion":"    $c = 3.14159 \/ 4;\n    return $r * $r * $h * $c;\n}","language":"perl"}
{"task_id":"MBPLP\/277","completion":"    my @keys = keys($dict);\n    my $filtered_dict = {};\n    foreach my $key (@keys) {\n        if ($dict{$key} != $n) {\n            $filtered_dict{$key} = $dict{$key};\n        }\n    }\n    return $filtered_dict;\n}","language":"perl"}
{"task_id":"MBPLP\/278","completion":"    $test_tup = {\n        $test_tup =~ s\/\\[.*\\]\/; # strip []\n        $test_tup =~ s\/\\[\\]\/; # strip []\n        $test_tup =~ s\/\\[.*\\]\/; # strip []\n        $test_tup =~ s\/\\[\\]\/; # strip []\n        $test_tup =~ s\/\\[.*\\]\/; # strip []\n        $test_tup =~ s\/\\[\\]\/; # strip []\n        $test_tup =~ s\/\\[.*\\]\/; # strip []\n        $test_tup =~ s\/\\[\\]\/; # strip []\n        $test_tup =~ s\/\\[.*\\]\/; # strip []\n        $test_tup =~ s\/\\[\\]\/; # strip []\n        $test_tup =~ s\/\\[.*\\]\/; # strip []\n        $test_tup =~ s\/\\[\\]\/","language":"perl"}
{"task_id":"MBPLP\/279","completion":"    my $m = 0;\n\n    for (@{1..$n}) {\n        if ($m == ($n * (3 * $n - 1))) {\n            return $m;\n        } else {\n            ++$m;\n        }\n    }\n\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/280","completion":"    my @found = [];\n    my $i = 0;\n\n    for ( my $elem = shift @$dlist ; $i < count($dlist) ; $i++ ) {\n        if ($elem == $item) {\n            push @found, $i;\n            return @found;\n        }\n    }\n    return @found;\n}","language":"perl"}
{"task_id":"MBPLP\/281","completion":"    my ($unique) = 0;\n    my $a = $test_list->first;\n    $unique = $unique + ($a == $test_list->last ? 0 : 1);\n    for my $i = 1; $i < $test_list->count-1; $i++)\n    {\n        $a = $test_list->$i;\n        if ($a != $test_list->$i+1)\n            $unique = $unique + ($a == $test_list->$i+1 ? 0 : 1);\n    }\n    return $unique;\n}","language":"perl"}
{"task_id":"MBPLP\/282","completion":"    return $nums1 - $nums2;\n}","language":"perl"}
{"task_id":"MBPLP\/283","completion":"    my $digit = $_;\n    return ($n % 10 < $digit % 10);\n}","language":"perl"}
{"task_id":"MBPLP\/284","completion":"    if (index($list, $element) ne -1) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/285","completion":"    my $counter = 0;\n    my $temp = '';\n\n    for my $c (split $text) {\n        if ($c eq 'ab') {\n            $temp = substr($c, 1);\n            $counter = 0;\n            continue;\n        }\n\n        if ($c eq 'ba') {\n            if ($counter == 2) {\n                $temp = substr($c, 1);\n            }\n            $counter += 1;\n            continue;\n        }\n\n        if ($c eq 'bb') {\n            if ($counter == 3) {\n                $temp = substr($c, 1);\n            }\n            $counter = 0;\n            continue;\n        }\n\n        $temp = '';\n        continue;\n    }\n\n    $temp = ($temp eq '') ? 'Not matched!' : 'Found a match!';\n\n    return $","language":"perl"}
{"task_id":"MBPLP\/286","completion":"    my $max;\n\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = 1; $j <= $k; $j++) {\n            $a[$i] = $a[$i] + $a[$i - 1];\n        }\n    }\n\n    for ($i = 1; $i <= $n; $i++) {\n        for ($j = $k; $j >= 1; $j--) {\n            if ($a[$i] - $a[$i - 1] == 0) {\n                continue;\n            }\n\n            if ($a[$i] > $a[$i - 1]) {\n                continue;\n            }\n\n            if ($max < $a[$i - 1]) {\n                $max = $a[$i - 1];\n            }\n       ","language":"perl"}
{"task_id":"MBPLP\/287","completion":"    if (defined($n) && $n > 0) {\n        my $s = 0;\n        for (my $i = 2; $i <= $n; $i++) {\n            $s = $s + $i * $i;\n        }\n        return $s;\n    }\n    else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/288","completion":"    my @arr_inv;\n    $arr_inv = 0;\n    for my $i (0..$N - 1) {\n        if ($i == 0) {\n            $arr_inv = $arr[0];\n            continue;\n        }\n        $arr_inv = ($arr_inv * $arr[i]) % $P;\n    }\n    return $arr_inv;\n}","language":"perl"}
{"task_id":"MBPLP\/289","completion":"    my ($days) = 0;\n    for (@_; $N; $N--) {\n        if ($N % 10 != 0) {\n            $days++;\n        }\n    }\n    return $days;\n}","language":"perl"}
{"task_id":"MBPLP\/290","completion":"    my ($list2) = @_;\n    my ($max_list, $max_len) = @_;\n    while (defined($max_list) && $max_len >= 0) {\n        if (strlen($list1) > strlen($list2)) {\n            $max_list = $list1;\n            $max_len = strlen($list1);\n        } else if (strlen($list1) < strlen($list2)) {\n            $max_list = $list2;\n            $max_len = strlen($list2);\n        } else {\n            return $max_list;\n        }\n        $list1 = substr($list1, 1);\n        $list2 = substr($list2, 1);\n    }\n    return $max_list;\n}","language":"perl"}
{"task_id":"MBPLP\/291","completion":"    my $fence = $n . 'X' . $k;\n    my @$w = 0;\n    while ($fence) {\n        my $w += count_no_of_ways_on($fence);\n        $fence = reverse_fence($fence);\n    }\n    return $w;\n}","language":"perl"}
{"task_id":"MBPLP\/292","completion":"    return ($n \/ $m);\n}","language":"perl"}
{"task_id":"MBPLP\/293","completion":"    my $a = ($w \/ 2) * ($h \/ 2);\n    my $b = ($w \/ 2) * ($h \/ 2);\n    my $c = ($w \/ 2) * ($h \/ 2);\n    my $d = ($w \/ 2) * ($h \/ 2);\n    return $a + $b + $c - $d;\n}","language":"perl"}
{"task_id":"MBPLP\/294","completion":"    my $max = $listval[0];\n    for ( $i = 1; $i < $listval; $i++)\n    {\n        if ($max < $listval[$i]) $max = $listval[$i];\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/295","completion":"    $number =~ s\/\\D*\/\\d*\/g;\n    $number = intval($number);\n\n    $sum = 0;\n\n    $i = 1;\n\n    while ($i <= $number) {\n        if ($number % $i == 0) {\n            $sum += $i;\n        }\n        $i++;\n    }\n\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/296","completion":"    my @counts = 0;\n    my @items = sort {\n        { $a, $b = @_; $a < $b ? $a++ : $b++; }\n        $arr\n    };\n\n    foreach my $item (@items) {\n        my ($p, $q) = @_;\n        if ($q <= $item) {\n            my $temp = $item;\n            $item = $q;\n            $q = $temp;\n        }\n        $counts = $counts + ($item - $q + 1);\n    }\n\n    return $counts;\n}","language":"perl"}
{"task_id":"MBPLP\/297","completion":"    my $flat = ();\n\n    foreach my $item (@$list1) {\n        if (is_array($item)) {\n            $flat .= flatten_list($item);\n        } else {\n            $flat .= $item;\n        }\n    }\n\n    return $flat;\n}","language":"perl"}
{"task_id":"MBPLP\/298","completion":"    # If the list is empty then it's the same, return the other list\n    if ($l1) {\n        if ($l2) {\n            # Intersection of the lists\n            my @result = intersection_nested_lists($l1, $l2);\n            # Filter results that are not empty lists\n            if (@result) {\n                # Filter results that are empty lists\n                my @filtered = filter { $_ } @result;\n                # Return the filtered list\n                return @filtered;\n            }\n        }\n        # Return the non-empty list\n        return $l1;\n    }\n\n    if ($l2) {\n        # Return the non-empty list\n        return $l2;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/299","completion":"    $max = 0;\n    $max_name = 0;\n    $max_age = 0;\n\n    foreach my $line ( $stdata )\n    {\n        $name = $line[0];\n        $age = $line[1];\n\n        if ($age > $max_age)\n        {\n            $max_name = $name;\n            $max_age = $age;\n        }\n    }\n\n    return $max_name, $max_age;\n}","language":"perl"}
{"task_id":"MBPLP\/300","completion":"    my $sum = 0;\n    my $count = 0;\n\n    my $res = 0.0;\n    my $i = 0;\n    while ($i < $n) {\n        my $bit_count = $i + $n;\n        my $byte_count = $bit_count \/ 8;\n\n        my $last_bit = $bit_count % 8;\n        my $last_byte = $byte_count - 1;\n        my $first_bit = $last_byte * 8 + $last_bit - 1;\n        my $first_byte = $first_bit \/ 8;\n        my $first_bit = $first_bit % 8;\n\n        my $sum = $sum + $i << $last_bit;\n        $count++;\n\n        if ($first_byte == $byte_count) ","language":"perl"}
{"task_id":"MBPLP\/301","completion":"    my ($max, $depth) = 0;\n    for my $key (keys $d) {\n        my $depth;\n        $depth = 1 + dict_depth $d[$key];\n        if ($depth > $max) {\n            $max = $depth;\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/302","completion":"    my @m = $n \/ 2 | 0;\n    return ($n - (2 * $m));\n}","language":"perl"}
{"task_id":"MBPLP\/303","completion":"    my $f = [0..$n][$n - 1];\n    my $i = 0;\n    for (@f { $_ } & $x { $i++ }) {\n        if ($a & $x) {\n            return 1;\n        }\n        $a <<= 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/304","completion":"    if ($rotations > 0) {\n        $arr = rotate($arr, $rotations);\n        $ranges = rotate($ranges, $rotations);\n    }\n    foreach ($ranges as $range) {\n        if ($range && $index >= $range[0] && $index <= $range[1]) {\n            return $arr[$index];\n        }\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/305","completion":"    my @words = split(' ');\n    my $p = $words[0];\n    my @result = @words;\n\n    if ($p =~ m\/^p\\w*\/i)\n        for (my $word (@words); $word >= 0; $word--)\n            $result[$word] = $result[$word] ? $result[$word] : '';\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/306","completion":"    return $index - $k + max_sum_increasing_subseq($a, $n, $index + 1, $k) \n    || $k - $index + max_sum_increasing_subseq($a, $n, $index, $k);\n}","language":"perl"}
{"task_id":"MBPLP\/307","completion":"    shift;\n    push @{$m, $n}, $tuplex;\n    return $tuplex;\n}","language":"perl"}
{"task_id":"MBPLP\/308","completion":"    $nums = map { $_ -> 1 };\n    return sort { $nums ->> $i } { $nums ->> $i } reverse $N 1 $N;\n}","language":"perl"}
{"task_id":"MBPLP\/309","completion":"    return $a > $b ? $a : $b;\n}","language":"perl"}
{"task_id":"MBPLP\/310","completion":"    return (\n        $str1\n        =~ s\/\\S+\/ ''\n        =~ s\/[^\\s]+\/ ''\n        =~ s\/\\s+\/ ''\n        );\n}","language":"perl"}
{"task_id":"MBPLP\/311","completion":"    ($n) = ($n) & ~0b1;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/312","completion":"    my @v = @_;\n    $v[0] = 2 \/ 3.14159265358979;\n    for (@v) {\n        $v[@v] = ($h + $r) * $v[@v] * ($r - $h) \/ 2;\n    }\n    return join('', @v);\n}","language":"perl"}
{"task_id":"MBPLP\/313","completion":"    my @pos_list = ();\n    foreach my $number (@$list1) {\n        if ($number >= 0) {\n            push @pos_list, $number;\n        }\n    }\n    return @pos_list;\n}","language":"perl"}
{"task_id":"MBPLP\/314","completion":"    my @max_sums = (0);\n    my @max_sums_pair = (0, 0);\n\n    for my $i (0..$n) {\n        for my $j (0..$n) {\n            if ( $grid[$i][$j] ) {\n                my @max_sums_pair = @max_sums_pair\n                    + ( ($grid[$i][$j] - $grid[$i - 1][$j])\n                      + ($grid[$i][$j] - $grid[$i + 1][$j])\n                      + ($grid[$i][$j] - $grid[$i][$j - 1])\n                      + ($grid[$i][$j] - $grid[$i][$j + 1])\n                    );\n                if ( ! @max_sums_pair[0] || @max_sums_pair","language":"perl"}
{"task_id":"MBPLP\/315","completion":"    my @words = split \/\\s+\/;\n\n    my $max = 0;\n    my $even_word;\n\n    foreach my $word (@words)\n    {\n        my $len = length $word;\n\n        if ($len % 2 == 0)\n        {\n            if ($len > $max)\n            {\n                $max = $len;\n                $even_word = $word;\n            }\n        }\n    }\n\n    if ($max > 0)\n    {\n        return $even_word;\n    }\n    else\n    {\n        return \"-1\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/316","completion":"    my $i = 0;\n    $i = 0;\n    while ($i < $A->length) {\n        if ($A[$i] == $x) {\n            my $x_index = $i;\n            my @index = $i - 1;\n            my @length = $i - 1;\n            while ($index >= 0 && $index < $A->length - 1) {\n                if ($A[$index] != $A[$index + 1]) {\n                    break;\n                } else {\n                    $index++;\n                }\n            }\n            return $x_index;\n        }\n        $i++;\n    }\n    return -1;\n}","language":"perl"}
{"task_id":"MBPLP\/317","completion":"    my ($outlist) = [];\n    while ($alist) {\n        my ($count, $last) = @_;\n        $outlist = $outlist..@(my $item = $alist, $count);\n        if ($last) {\n            $outlist = $outlist..@[ $item ];\n        } else {\n            $outlist = $outlist..@(my $item = $item..[ $item ]);\n        }\n        $alist = $alist..$last;\n    }\n    return $outlist;\n}","language":"perl"}
{"task_id":"MBPLP\/318","completion":"    return $s * $s * $s;\n}","language":"perl"}
{"task_id":"MBPLP\/319","completion":"    my ($word) = \\w{5};\n\n    $word =~ s{ $word }g;\n\n    return $word ? [$word] : @_;\n}","language":"perl"}
{"task_id":"MBPLP\/320","completion":"    my $sum = 0;\n    my $squared_sum = 0;\n    for (my $i = 1; $i<=$n; $i++) {\n        $sum += $i;\n        $squared_sum += $i*$i;\n    }\n    return $sum * ($sum - 1) \/ 2 - $squared_sum;\n}","language":"perl"}
{"task_id":"MBPLP\/321","completion":"    my @s = split \/(\\d{6})\/;\n    foreach my $v (@s)\n    {\n        if (substr $v 0, 0, 1)\n        {\n            return substr $s 1, 0, $s[1]..$s[5];\n        }\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/322","completion":"    my ($min, @result) = ( 0, 0 );\n    my $i = 1;\n\n    foreach my $item ( sort $list1 ) {\n        if ($i - $min) {\n            $result = $min, $i;\n        }\n        $min = $item == $min ? $item : $min;\n        $i += 1;\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/323","completion":"    $arr = $arr < 0 ? $arr + $n : $arr - $n;\n    return $arr;\n}","language":"perl"}
{"task_id":"MBPLP\/324","completion":"    my %sum_of_alternates = ();\n\n    my $max_length = 0;\n\n    foreach my $element (split \/, $test_tuple) {\n        # If the tuple is not empty, we can compute the length of the alternate chain.\n        if ($element) {\n            $max_length = max $max_length + length $element;\n        }\n\n        # Otherwise, it must be the first element of the alternate chain.\n        else {\n            $max_length = 1;\n        }\n\n        # Add the sum of alternates.\n        push $sum_of_alternates, $max_length * $element;\n    }\n\n    # Return the sum of the alternate chains.\n    return $sum_of_alternates;\n}","language":"perl"}
{"task_id":"MBPLP\/325","completion":"    my $min = 0;\n\n    for my $i (0..$n - 1)\n    {\n        for my $j (1..$n - 1)\n        {\n            if ($i + $j == $n)\n            {\n                $min = ($min < 1) ? 1 : $min;\n            }\n            else\n            {\n                my $c = $i + $j;\n                my $e = $j - $i;\n                my $f = $c - $e;\n                my $g = $c + $e;\n                my $h = $n - $c;\n                my $k = $n - $g;\n                my $l = $g - $h;\n\n                if ($e == $f && $f == $g)\n                {","language":"perl"}
{"task_id":"MBPLP\/326","completion":"    my ($count, @_max) = (0, 0) ;\n    foreach my $string (@_test_list) {\n        my ($occurrences) = ( $string =~ \/(\\w+)\\s(\\w+)\/ ) ;\n        if ($occurrences) {\n            $occurrences[1] ++ ;\n        }\n    }\n    for my $string (@_test_list) {\n        if ($count < @_max && $occurrences[1] > $count) {\n            @_max = $occurrences[1] ;\n            $max_string = $occurrences[0] ;\n        }\n    }\n    return $max_string ;\n}","language":"perl"}
{"task_id":"MBPLP\/327","completion":"    my ($isosceles);\n    my ($perimeter);\n    $isosceles = ($x + $y) < $z;\n    $perimeter = ($x + $y + $z) - 3;\n    print $isosceles ? $perimeter : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/328","completion":"    $list1->= array_slice($list1, $n, -$m);\n    return $list1;\n}","language":"perl"}
{"task_id":"MBPLP\/329","completion":"    my $neg = 0;\n    foreach my $value (@_) {\n        if (0 < $value) {\n            $neg = $neg + 1;\n        }\n    }\n    return $neg;\n}","language":"perl"}
{"task_id":"MBPLP\/330","completion":"    $words = split \/ (\\W+)\/;\n    foreach my $word (@$words) {\n        if (preg_match '\/^\\w{3,5}$\/i' $word) {\n            push @_;\n        }\n    }\n    return $words;\n}","language":"perl"}
{"task_id":"MBPLP\/331","completion":"    if ($n == 0) {\n        return 0;\n    } else {\n        return count_unset_bits($n - 1);\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/332","completion":"    my $result = @_;\n    my $hash;\n    my $c = 0;\n    while (my $c < strlen $str1) {\n        $hash{$str1[$c]}++;\n        $result = $hash;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/333","completion":"    my ($sec_ele) = $sub_li[1];\n    $sub_li = sort $sub_li {\n        $_ => my ($sec_ele) = $_[1];\n    };\n    $sub_li = @reverse $sub_li;\n    return $sub_li;\n}","language":"perl"}
{"task_id":"MBPLP\/334","completion":"    if ($a + $b <= $c) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/335","completion":"    my ($b, $m, $y) = @_;\n    my ($c, $p, $k) = @_;\n\n    if ($n < $m) {\n        return 0;\n    }\n\n    $n = $n - $d;\n    $k = $k + $p;\n    $a = $a + $k;\n    $b = $b - $k;\n    $c = $c + $y;\n    $n = $n + $d;\n\n    if ($m < $a) {\n        return 0;\n    }\n\n    return $c + ap_sum($b, $n, $y);\n}","language":"perl"}
{"task_id":"MBPLP\/336","completion":"    my $monthnum1 = 0;\n    my $monthnum2 = 0;\n    my $monthnum3 = 0;\n    $monthname1 =~ s\/[^0-9]\/g;\n    my ($monthnum1 = $monthname1{1}) ?= 1 : my $monthnum1 = 0;\n    my ($monthnum2 = $monthname1{2}) ?= 1 : my $monthnum2 = 0;\n    my ($monthnum3 = $monthname1{3}) ?= 1 : my $monthnum3 = 0;\n    my $num_days1 = 28;\n    my $num_days2 = 28;\n    my $num_days3 = 28;\n    return $monthnum1 + $monthnum2 + $monthnum3;\n}","language":"perl"}
{"task_id":"MBPLP\/337","completion":"    my @result = split \/(\\w+)\\s*$\/\/;\n    my @result;\n    {\n        push @result, split \/\\s*$\/ \/;\n    }\n    $result = join ' ', @result;\n    if (sub $text, $result) {\n        print \"Found a match!\";\n    } else {\n        print \"Not matched!\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/338","completion":"    ($s) =~ s\/^(.)[^.]*$\/;\n    $s =~ s\/^(.).*$\/g;\n    return $s ? $s =~ s\/^(.).*$\/g . $1 . length . $1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/339","completion":"    my %divisors;\n\n    # your code goes here\n    for (@divisors) {\n        if ($x % $divisors == 0 && $y % $divisors == 0) {\n            return $divisors;\n        }\n    }\n\n    my $divisors[] = 0;\n    my %divisors = 1;\n\n    for (@_ = $x; $_ <= $y; $_ += $x) {\n        $divisors[] = $_;\n        %divisors++;\n    }\n\n    return $divisors;\n}","language":"perl"}
{"task_id":"MBPLP\/340","completion":"    my ($min1, $min2, $min3) = @_;\n\n    if ($min1 < $min2 < $min3)\n        return ($min1 + $min2 + $min3);\n    elsif ($min2 < $min3 < $min1)\n        return ($min2 + $min3 + $min1);\n    elsif ($min3 < $min1 < $min2)\n        return ($min3 + $min1 + $min2);\n    elsif ($min1 < $min2 < $min3)\n        return ($min1 + $min2 + $min3);\n}","language":"perl"}
{"task_id":"MBPLP\/341","completion":"    my ($out) = @_;\n    for my $k (keys $s) {\n        push $out, [$k, $s[$k]];\n    }\n    return $out;\n}","language":"perl"}
{"task_id":"MBPLP\/342","completion":"    my %ranges;\n    my %mins;\n\n    for (@_->first) {\n        my $arr = $list->at($@);\n\n        for (@_->second) {\n            my $arr2 = $list->at($@);\n            if ($arr2->length - $arr->length >= 1) {\n                if ($ranges->count_occurrences($arr) < $ranges->count_occurrences($arr2)) {\n                    $ranges[] = $arr;\n                } else {\n                    $ranges[] = $arr2;\n                }\n            }\n        }\n    }\n\n    foreach my $range (@ranges) {\n        for (@_->first) {\n            my $arr = $list->at($@);\n            if ($arr->member($range)) {\n                $mins[] = $range;\n            }\n        }\n    }\n\n    if ($mins) ","language":"perl"}
{"task_id":"MBPLP\/343","completion":"    ($s, @dig);\n    @dig;\n    return @dig;\n}","language":"perl"}
{"task_id":"MBPLP\/344","completion":"    my $num_squares = 0;\n    for my $i (1, $n) {\n        if (is_odd($i^2)) {\n            ++$num_squares;\n        }\n    }\n    return $num_squares;\n}","language":"perl"}
{"task_id":"MBPLP\/345","completion":"    return $nums - $nums{$nums->prev_if(undef)};\n}","language":"perl"}
{"task_id":"MBPLP\/346","completion":"    my ($e, $prev) = @_;\n\n    for my $j = 1; $j <= $k; $j++ {\n        my ($e_minus_e, $next) = @_;\n        $next = $next + $n;\n        if ($next > $n) {\n            $next = $next - $n;\n        }\n        $e_minus_e = $e - $e_minus_e;\n        if ($e_minus_e < $prev) {\n            $e = $e_minus_e;\n        } else {\n            $e = $prev;\n        }\n        $prev = $next;\n    }\n\n    print $e;\n}","language":"perl"}
{"task_id":"MBPLP\/347","completion":"    return $m * $m + $n * $n;\n}","language":"perl"}
{"task_id":"MBPLP\/348","completion":"    my ($N) = 0;\n    my ($a) = 0;\n    my ($b) = $M;\n    my ($c) = $M;\n\n    if ($N > $M) {\n        push @_;\n        return 0;\n    }\n\n    if ($N == $M) {\n        ++$N;\n        push @_;\n        return 1;\n    }\n\n    while ($N != $M) {\n        if ($N == 1) {\n            if ($a + $b == 0) {\n                push @_;\n                return 0;\n            }\n            if ($a + $b < $c) {\n                $c = $a + $b;\n            }\n            push @_;\n            ++$N;\n            $a = 0;\n        }\n        else {\n            $","language":"perl"}
{"task_id":"MBPLP\/349","completion":"    return \"No\";\n    if (strlen($string) != 4) {\n        return \"No\";\n    } else {\n        if (ord($string[0]) != 0 && ord($string[0]) != 1 && ord($string[1]) != 0 && ord($string[1]) != 1 && ord($string[2]) != 0 && ord($string[2]) != 1 && ord($string[3]) != 0 && ord($string[3]) != 1) {\n            return \"No\";\n        } else {\n            return \"Yes\";\n        }\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/350","completion":"    my ($n) = 1;\n    # or\n    # my ($n = 0, $s = \"\");\n    while (defined $s)\n    {\n        $n++;\n        if (count($s, $n))\n            $s = substr($s, 1);\n        else\n            $s = \"\";\n    }\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/351","completion":"    my $res;\n\n    my $i = 1;\n    foreach ($arr as $value) {\n        if ($i == $k) {\n            $res = $value;\n            break;\n        }\n        ++$i;\n    }\n\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/352","completion":"    return length $str {\n        my $freq = 0;\n        foreach my $char (@_){\n            if($freq {= $str{$char}}){\n                return 0;\n            }else{\n                $freq{$char} = 1;\n            }\n        }\n        return 1;\n    };\n}","language":"perl"}
{"task_id":"MBPLP\/353","completion":"    my ($sublist1, $subn) = split \/;\/ $list1;\n    return map { $ -> split \/,\/ $subn } @{$sublist1} $n;\n}","language":"perl"}
{"task_id":"MBPLP\/354","completion":"    if (not ($n - $d)) {\n        $a = 1;\n        $n = $n + $d;\n    } else {\n        $a = $a + $n \/ $d;\n        $n = $n % $d;\n    }\n    return $a;\n}","language":"perl"}
{"task_id":"MBPLP\/355","completion":"    my ($count) = 0;\n    for my $x (0..$radius)\n    {\n        for my $y (0..$radius)\n        {\n            if ($x*$x + $y*$y <= $radius*$radius)\n                ++$count;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/356","completion":"    return ($b - $a) \/ 2 + $a;\n}","language":"perl"}
{"task_id":"MBPLP\/357","completion":"    my ($maximum) = 0;\n    foreach my $element (@$test_list) {\n        if ($element > $maximum) {\n            $maximum = $element;\n        }\n    }\n    return $maximum;\n}","language":"perl"}
{"task_id":"MBPLP\/358","completion":"    map {\n        my $p = $nums1 % $nums2;\n        return $p unless $p eq 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/359","completion":"    return ($a > 0 && $b > 0 && $c > 0)\n        ? \"Yes\"\n        : \"No\";\n}","language":"perl"}
{"task_id":"MBPLP\/360","completion":"    my $carol = 0;\n    for my $i (1,$n);\n        if ($i % 3) {\n            $carol = $carol + $i;\n        }\n    next;\n    $carol;\n}","language":"perl"}
{"task_id":"MBPLP\/361","completion":"    my $ret_list = $list1;\n\n    foreach my $list2 (@_)\n    {\n        if(is_array($list2) && !empty($list2))\n        {\n            $ret_list = join \", \" @$list2;\n        }\n        elseif ($list2)\n        {\n            $ret_list = join \", \" $list2;\n        }\n    }\n    return $ret_list;\n}","language":"perl"}
{"task_id":"MBPLP\/362","completion":"    return max($nums, 0);\n}","language":"perl"}
{"task_id":"MBPLP\/363","completion":"    $test_list = $test_list->map(function ($x) {\n        return $x->map(function ($y) {\n            return $y + $K;\n        });\n    });\n\n    $test_list = $test_list->map(function ($x) {\n        return $x->map(function ($y) {\n            return $y->to_i;\n        });\n    });\n\n    $test_list = $test_list->map(function ($x) {\n        return $x->map(function ($y) {\n            return $y->to_s;\n        });\n    });\n\n    return $test_list;\n}","language":"perl"}
{"task_id":"MBPLP\/364","completion":"    if ($str =~ s\/^0*1*1*1*$\/) {\n        return 0;\n    }\n    $count = 0;\n    my ($even, $odd) = ($str[0] == $str[1]);\n    for (0..$str; $str++; ) {\n        $odd = ($odd && $str[0] != $str[1]);\n        $even = ($even || $str[0] != $str[1]);\n        $count++;\n        $str = ($even ? $str[2] : $str[1]);\n        $str = ($odd ? $str[1] : $str[2]);\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/365","completion":"    $n =~ s\/\\D\/g;\n    return scalar($n);\n}","language":"perl"}
{"task_id":"MBPLP\/366","completion":"    my ($product, $max_product) = 0;\n    $max_product = $product;\n\n    for ($i = 0; $i < $list_nums; $i++) {\n        my ($next_num, $next_product) = 0;\n        $next_product = $product;\n\n        my ($prev_num, $prev_product) = 0;\n        $prev_product = $product;\n\n        if ($i > 0) {\n            $prev_num = $list_nums < $i + 1 ? 0 : $list_nums - $i - 1;\n            $prev_product = $prev_num * $list_nums - $prev_num * $i + $prev_num;\n        }\n\n        if ($i < $list_nums - 1) {\n            $next_num = ","language":"perl"}
{"task_id":"MBPLP\/368","completion":"    $test_tup = $test_tup <=> (is_a? @list $test_tup);\n    for my $i (1 .. $N)\n    {\n        $test_tup = @__G__<$i>$test_tup;\n        return $test_tup;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/369","completion":"    return $l * $w * $h;\n}","language":"perl"}
{"task_id":"MBPLP\/370","completion":"    my ($float_price) = $price;\n    return sort($float_price);\n}","language":"perl"}
{"task_id":"MBPLP\/371","completion":"    $right_element = $right_element + 1;\n    if ($A[($right_element - 1)]) {\n        if ($A[$right_element - 1] == $A[$left_element]) {\n            return $right_element;\n        }\n        return $right_element - 1;\n    } else {\n        return $right_element;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/372","completion":"    my $heap = new sort_heap $nums;\n    foreach my $num (sort_heap_iter $heap) {\n        push @{$nums}, $num;\n    }\n    return $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/373","completion":"    ($l * $w * $h) \/ 3;\n}","language":"perl"}
{"task_id":"MBPLP\/374","completion":"    my @result = ();\n\n    my ($str, $perm_str, $i) = @_;\n\n    if ( $i == $str ) {\n        $result[] = $perm_str;\n        $perm_str = $str;\n    } else {\n        $perm_str = $perm_str . $str;\n\n        $str = $str . $str;\n        my @result_new = ();\n\n        foreach my $item (@result) {\n            $item =~ s\/\\S*\/\\S*$perm_str\/g;\n            @result_new += $item;\n        }\n\n        $result += @result_new;\n\n        $str = $str . $str;\n    }\n\n    print $result;\n}","language":"perl"}
{"task_id":"MBPLP\/375","completion":"    return (($n + $m\/2) \/ $m) * $m;\n}","language":"perl"}
{"task_id":"MBPLP\/376","completion":"    my @test_list = split @test_tup;\n\n    my @rep_list = ();\n\n    for my $i (0..$test_list -1)\n    {\n        if (count($test_list) > $i)\n            $rep_list[($i + 1) - 1] = \"MSP\";\n        else\n            $rep_list[$i] = $test_list[$i];\n    }\n\n    return join \", \", @rep_list;\n}","language":"perl"}
{"task_id":"MBPLP\/377","completion":"    my $new = '';\n    foreach my $l (split $s, '\\0') {\n        $new =~ s\/$c\/\/;\n        $l =~ s\/$c\/;\n    }\n    return $new;\n}","language":"perl"}
{"task_id":"MBPLP\/378","completion":"    my ($last) = shift @_;\n    $test_list{0}{$last}{$test_list{1}{$last}{$test_list{2}{$last}{$test_list{3}{$last};}}\n};\n<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"perl"}
{"task_id":"MBPLP\/379","completion":"    my $surface = $l * $w * $h;\n    return $surface;\n}","language":"perl"}
{"task_id":"MBPLP\/380","completion":"    my %m = @_;\n\n    for $i = 1; $i <= $colnum; ++$i\n    {\n        $m{$i} = $i;\n    }\n\n    for $j = $rownum; $j > 0; --$j\n    {\n        my @m = @_;\n        for $i = $colnum - 1; $i >= 1; --$i\n        {\n            my $m{$i} = $i;\n        }\n        push @m, $m;\n    }\n\n    return @m;\n}","language":"perl"}
{"task_id":"MBPLP\/381","completion":"    return map { (&$i) => $list_data[&$index_no][$i] } @_;\n}","language":"perl"}
{"task_id":"MBPLP\/382","completion":"    my ($B) = @_;\n    my ($C) = @_;\n    my ($D) = @_;\n    my ($E) = @_;\n    my ($F) = @_;\n    my ($G) = @_;\n    my ($H) = @_;\n\n    if ($A =~ m\/^[0-9]+$\/)\n    {\n        print \"The array is already sorted.\";\n        return 0;\n    }\n    if ($B =~ m\/^[0-9]+$\/)\n    {\n        print \"The array is already sorted.\";\n        return 0;\n    }\n    if ($C =~ m\/^[0-9]+$\/)\n    {\n        print \"The array is already sorted.\";\n        return 0;\n    }\n    if ($D =~ m\/^[0-9]+$\/)\n    {\n        print \"The array is already sorted.\";","language":"perl"}
{"task_id":"MBPLP\/383","completion":"    my $i = 1;\n\n    for my $b (@_){\n        if ($b & 1)\n        {\n            $b = ~($b >> 1);\n            $b = ~($b & 1);\n        }\n        else\n        {\n            $b = $b >> 1;\n        }\n\n        if ($b == 0)\n        {\n            print \"$i\\n\";\n        }\n        else\n        {\n            print \"$i $b\\n\";\n        }\n\n        $i ++;\n    }\n\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/384","completion":"    my ($smallest, $count) = 0;\n    $count = 0;\n    for (@{$arr}) {\n        if ($smallest == 0 || $arr < $smallest) {\n            $smallest = $arr;\n            $count++;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/385","completion":"    $n -= 1;\n    if ($n == 0)\n        return 0;\n    $n = 2 * $n;\n    $n += $n;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/386","completion":"    my $c = 1;\n    my $x = str_split($s);\n    for (@$x) {\n        $c =~ s\/(\\[|\\])\/g;\n        $c = intval($c);\n    }\n    return $c;\n}","language":"perl"}
{"task_id":"MBPLP\/387","completion":"    ($N == $N) ? \"Even\" : \"Odd\";\n}","language":"perl"}
{"task_id":"MBPLP\/388","completion":"    my $highest = 1;\n\n    while ($highest < $n) {\n        $highest = 2 * $highest;\n    }\n\n    return $highest;\n}","language":"perl"}
{"task_id":"MBPLP\/389","completion":"    $n > 0 && $n <= 9 {\n        return $n*$n+$n+1;\n    }\n    $n > 8 {\n        return $n+1;\n    }\n    $n > 3 {\n        return $n-1;\n    }\n    return $n-2;\n}","language":"perl"}
{"task_id":"MBPLP\/390","completion":"    shift;\n\n    $list = map { $string } @$list;\n    shift;\n\n    return $list;\n}","language":"perl"}
{"task_id":"MBPLP\/391","completion":"    my $dict = {};\n    for ($i = 0; $i < $l1; $i++) {\n        $dict[$l2[$i]] = $l3[$i];\n    }\n    return $dict;\n}","language":"perl"}
{"task_id":"MBPLP\/392","completion":"    my $max = 0;\n    my $f;\n    $f = $max = $n \/ $max = ($n \/ $max = ($n \/ $max = ($n \/ $max = ($n \/ $max = ($n \/ $max = $n))))));\n    my $r;\n    $r = $f \/ $n;\n    return $r;\n}","language":"perl"}
{"task_id":"MBPLP\/393","completion":"    return $input_list = map { $input_list } {\n        map { len $it }\n        max\n    };\n}","language":"perl"}
{"task_id":"MBPLP\/394","completion":"    my $seen_set;\n    my ($uniq) = undef;\n    for my $item (@_) {\n        push $seen_set, $item;\n        if ($seen_set & $test_tup) {\n            $uniq = 1;\n            break;\n        }\n        pop $seen_set;\n    }\n    return $uniq;\n}","language":"perl"}
{"task_id":"MBPLP\/395","completion":"    my ($result) = @_;\n    for my $ch (@_)\n    {\n        if ($result == $ch)\n        {\n            $result = @_;\n        }\n        else\n        {\n            $result = \"none\";\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/396","completion":"    $pattern = \"\/^(.).*\\1$\/\";\n    $result = preg_match($pattern, $string);\n    return \"Valid\" if $result ? $result[0] : \"Invalid\";\n}","language":"perl"}
{"task_id":"MBPLP\/397","completion":"    my $x = ($a + $b + $c) \/ 3;\n    return ($x < $b ? $x : $b);\n}","language":"perl"}
{"task_id":"MBPLP\/398","completion":"    my @digits = (sum (map sub [x \\@\\d] @s (\\d))) for (@s = $nums);\n\n    return (sum @digits);\n}","language":"perl"}
{"task_id":"MBPLP\/399","completion":"    return map { $1 ^ $2 } @_;\n}","language":"perl"}
{"task_id":"MBPLP\/400","completion":"    my ($freq_list) = '';\n\n    my $n = 0;\n    foreach my $val (@$test_list) {\n        if ($n = 0) {\n            $freq_list = $val;\n        }\n        else {\n            $freq_list .= ',' . $val;\n        }\n        $n += 1;\n    }\n\n    return ($freq_list);\n}","language":"perl"}
{"task_id":"MBPLP\/401","completion":"    #map { $a => $a + $b } @$test_tup1;\n    map { $a => { $b => $a + $b } } @$test_tup1;\n    map { $a => { $b => $a + $b } } @$test_tup2;\n}","language":"perl"}
{"task_id":"MBPLP\/402","completion":"    $n = $n % $p;\n    return ($n * (1 - $r % $p)) % $p;\n}","language":"perl"}
{"task_id":"MBPLP\/403","completion":"    if (m\/^https?:\\\/\\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\/\/=]*)\/.test($str)) {\n        return 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/404","completion":"    return $a < $b ? $a : $b;\n}","language":"perl"}
{"task_id":"MBPLP\/405","completion":"    return $tuplex ? $tuplex.index($tuple1) : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/406","completion":"    return \"Even Parity\" if $x % 2 == 0 else \"Odd Parity\";\n}","language":"perl"}
{"task_id":"MBPLP\/407","completion":"    for my $i (1..$n);\n    {\n        $n = $n 0 $i;\n    }\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/408","completion":"    my @result = [];\n\n    for my $i (0..$k) {\n        my @pairs = [];\n        $pairs = 0;\n        foreach my $num1 (@nums1) {\n            foreach my $num2 (@nums2) {\n                push @pairs, [$num1, $num2];\n                ++$pairs;\n            }\n        }\n\n        sort {\n            my $p1 = @pairs[1], $p2 = @pairs[2];\n            if ($p1 == $p2) {\n                $pairs--;\n                $result[$pairs] = @pairs;\n            }\n        }\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/409","completion":"    my ($list2) = @_;\n\n    my ($product) = 0;\n    my @min_list = 0;\n\n    foreach my $x (@$list1) {\n        foreach my $y (@$list2) {\n            if ($product < $x * $y) {\n                $product = $x * $y;\n                @min_list = $y;\n            }\n        }\n    }\n\n    print $product;\n    print \"\\n\";\n    print $min_list;\n}","language":"perl"}
{"task_id":"MBPLP\/410","completion":"    my $minval = 0;\n    foreach my $item (@_){\n        my $type = $item ->type;\n        $minval = ($type == $listval ->type ? min($minval, $item ->value) : $minval);\n    }\n    return $minval;\n}","language":"perl"}
{"task_id":"MBPLP\/411","completion":"    my ($first, $last) = split \/_\/, $word;\n    $first = $first[0].tolower;\n    return join \"\", $first, $last;\n}","language":"perl"}
{"task_id":"MBPLP\/412","completion":"    my @output = ();\n    my @output_odd = ();\n    my @output_even = ();\n\n    foreach my $i (@$l)\n    {\n        if ($i % 2 != 0)\n        {\n            $output_odd .= $i;\n        }\n        else\n        {\n            $output_even .= $i;\n        }\n    }\n\n    $output = $output_odd . \",\" . $output_even;\n    print \"$output\\n\";\n}","language":"perl"}
{"task_id":"MBPLP\/413","completion":"    my ($list2, $n2) = @_;\n    my $return_list = $list1[$n2];\n    return $return_list;\n}","language":"perl"}
{"task_id":"MBPLP\/414","completion":"    my $i = 0;\n\n    for (@_) {\n        if ($i == 0) {\n            if ($_ == $list1) {\n                $i = 1;\n            }\n        }\n        else {\n            if ($_ == $list2) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/415","completion":"    my ($a, $b) = @_;\n    # sort the array\n    $arr = sort $arr { $_ <=> $_, 1 };\n    # the first item is our maximum product\n    $max = $a * $b;\n    # second item is our minimum product\n    $min = $a * $b;\n    for (my $i = 2; $i < count($arr); $i++) {\n        if ($arr[$i - 1] * $arr[$i] > $max) {\n            $max = $arr[$i - 1] * $arr[$i];\n            $a = $arr[$i - 1];\n            $b = $arr[$i];\n        }\n        if ($arr[$i - 1] * $arr[$i] < $min) {\n            $min = $","language":"perl"}
{"task_id":"MBPLP\/416","completion":"    my ($part) = $n \/ 3;\n    if ($n > 0)\n    {\n        return $part . $part . $n;\n    }\n    else\n    {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/417","completion":"    my ($out) = ();\n    $Input = sort { $Input };\n\n    foreach my $Tuple (@$Input) {\n        $out = $out . $Tuple;\n        if (count @$Tuple > 1) {\n            $out = $out . $Tuple[1];\n        }\n    }\n    return $out;\n}","language":"perl"}
{"task_id":"MBPLP\/418","completion":"    return $sublist = my @_ = max @_;\n}","language":"perl"}
{"task_id":"MBPLP\/419","completion":"    my $length = 0;\n    my @numbers;\n    foreach my $number (@$list1) {\n        numbers { $number };\n        $length++;\n    }\n    foreach my $number (@numbers) {\n        my $rounded = round($number);\n        print $rounded . \" \";\n    }\n    return $length * (sum(numbers) \/ $length);\n}","language":"perl"}
{"task_id":"MBPLP\/420","completion":"    $n = $n + 1;\n    return(0 unless $n % 2) + $n * $n * $n;\n}","language":"perl"}
{"task_id":"MBPLP\/421","completion":"    my ($prefix) = $test_tup[0];\n    my ($delimiter) = $test_tup[1];\n    my ($elements) = @_;\n\n    join { $elements{$i} } $delimiter $prefix;\n}","language":"perl"}
{"task_id":"MBPLP\/422","completion":"    $n = $n+1;\n    return sum($n , $n , $n , $n , $n) \/ 4;\n}","language":"perl"}
{"task_id":"MBPLP\/423","completion":"    my ($max, $cur) = 0;\n\n    foreach my $i (1..$m)\n    {\n        foreach my $j (1..$n)\n        {\n            $cur += $gold[$i][$j];\n            if ($cur > $max) $max = $cur;\n        }\n    }\n\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/424","completion":"    my %rear;\n    for (my $element = 0; $element < scalar $test_tuple; ++$element)\n    {\n        if (strlen ($test_tuple[$element]) > 0)\n        {\n            ++$rear;\n        }\n    }\n    return $rear;\n}","language":"perl"}
{"task_id":"MBPLP\/425","completion":"    return $list1 =~ s\/.*$x.*\/s {1};\n}","language":"perl"}
{"task_id":"MBPLP\/426","completion":"    my ($output) = @_;\n\n    foreach my $num (sort keys %{$_}) {\n        if ($num & 1) {\n            push @$output, $num;\n        }\n    }\n\n    return $output;\n}","language":"perl"}
{"task_id":"MBPLP\/427","completion":"    my @_ = split \/,- $dt;\n    my $yyyy = @_[0];\n    my $mm = @_[1];\n    my $dd = @_[2];\n\n    return $dd.$mm.$yyyy;\n}","language":"perl"}
{"task_id":"MBPLP\/428","completion":"    my ($n) = 0;\n\n    for my ($i=1; $i<=$my_list; $i+=1) {\n        if ($my_list[$i] < $my_list[$n]) {\n            $n = $i;\n        }\n    }\n\n    my ($i) = 1;\n    for my ($j=0; $j<=$n; $j+=1) {\n        if ($my_list[$j] < $my_list[$j+1]) {\n            $i = $j+1;\n        }\n        else {\n            swap $j $i;\n            $i += 1;\n        }\n    }\n\n    return $my_list;\n}","language":"perl"}
{"task_id":"MBPLP\/429","completion":"    my %ret = @();\n\n    for my $idx (0..#$test_tup1) {\n        if $test_tup1[$idx] =~ m\/^\\d{1,}$\/ or $test_tup2[$idx] =~ m\/^\\d{1,}$\/ then\n            my $ret[$idx] = $test_tup1[$idx] & $test_tup2[$idx];\n        else\n            my $ret[$idx] = $test_tup1[$idx] & $test_tup2[$idx];\n        end if;\n    }\n\n    return $ret;\n}","language":"perl"}
{"task_id":"MBPLP\/430","completion":"    my ($x, $y, $z) = @_;\n    my ($k, $m, $n) = @_;\n\n    my ($n1, $n2, $n3) = ($c - $x) \/ ($a - $b * $x);\n    my ($m1, $m2, $m3) = ($a - $b) \/ ($x - $c);\n\n    return -$k * $m3 * $n2 + $m1 * $z * $n1 - $m2 * $y * $n3;\n}","language":"perl"}
{"task_id":"MBPLP\/431","completion":"    my ($first, $second) = @_;\n    $first = sort { $first };\n    $second = sort { $second };\n\n    foreach my $el (@_) {\n        if (in_array $el $list1 && in_array $el $list2)\n            return 1;\n    }\n\n    return \"none\";\n}","language":"perl"}
{"task_id":"MBPLP\/432","completion":"    return $base1 + $base2 + $height \/ 2;\n}","language":"perl"}
{"task_id":"MBPLP\/433","completion":"    my $flag = 0;\n    for ($i = 0; $i < scalar $arr; $i++) {\n        if ($number < scalar $arr[$i]) {\n            $flag = 1;\n            break;\n        }\n    }\n    $flag ? \"Yes, the entered number is greater than those in the array\" : \"No, entered number is less than those in the array\";\n}","language":"perl"}
{"task_id":"MBPLP\/434","completion":"    my $a = substr($text, 0, 1);\n    my $b = substr($text, 1);\n    if ($a eq 'a')\n    {\n        if (count($b) eq 1)\n        {\n            $text = substr($text, 1);\n        }\n        else\n        {\n            $text = 'Not matched!';\n        }\n    }\n    return $text;\n}","language":"perl"}
{"task_id":"MBPLP\/435","completion":"    return ($n % 10);\n}","language":"perl"}
{"task_id":"MBPLP\/436","completion":"    my ($negs) = @_;\n    foreach my $item (@_){\n        $negs{$item} = -$item;\n    }\n    $list1{$_} = $negs{$_};\n    return $list1;\n}","language":"perl"}
{"task_id":"MBPLP\/437","completion":"    $str1 =~ s\/[^aeiou]\/\/g;\n    return $str1;\n}","language":"perl"}
{"task_id":"MBPLP\/438","completion":"    # @_; => ['[5, 6]', '[1, 3]', '[6, 5]', '[9, 1]', '[6, 5]', '[2, 1]']\n    my %pairs;\n    my ($count, $total) = 0;\n    foreach my $x (@_) {\n        my $a = shift $x;\n        my $b = shift $x;\n        # $a => [5, 6]\n        # $b => [1, 3]\n        my $ab = join \", \", $a, $b;\n        # $ab => '5, 6, 1, 3'\n\n        # if a pair is found, count it and store the total\n        if (defined $pairs[$ab]) {\n            my $count += 1;\n            my $total += $pairs[$ab];\n            undef $pairs[$ab];\n       ","language":"perl"}
{"task_id":"MBPLP\/439","completion":"    my ($number) = 0;\n    for (@_){\n        if ($L > 0) {\n            $number = $number * 10 + $L;\n            $L = 0;\n        }\n    }\n    return $number;\n}","language":"perl"}
{"task_id":"MBPLP\/440","completion":"    my @adverbs;\n    ($text =~ m\/\\b(adverb|adv|ad)\\b\/g);\n    while (my $m = @_){\n        push @adverbs, [$_, ++$m->pos];\n    }\n    return @adverbs;\n}","language":"perl"}
{"task_id":"MBPLP\/441","completion":"    return $l * $l * $l;\n}","language":"perl"}
{"task_id":"MBPLP\/442","completion":"    my @num_pos = 0;\n    foreach my $num (@nums) {\n        if ( $num > 0 ) {\n            ++@num_pos;\n        }\n    }\n\n    return $num_pos\/count($nums);\n}","language":"perl"}
{"task_id":"MBPLP\/443","completion":"    my ($list2) = @_;\n    my ($result) = 0;\n    my @my_max_list;\n    my @my_min_list;\n    for (@my_max_list = $list2)\n    {\n        if (is_negative $my_max_list || $my_max_list < 0)\n        {\n            $result = $my_max_list;\n            break;\n        }\n    }\n    for (@my_min_list = $list1)\n    {\n        if (is_negative $my_min_list || $my_min_list > 0)\n        {\n            $result = $my_min_list;\n            break;\n        }\n    }\n    if ($result == 0)\n    {\n        $result = $list1 [0] < $list2 [0] ? $list1 ","language":"perl"}
{"task_id":"MBPLP\/444","completion":"    my @tuple_list = split($test_list, \"|\");\n\n    my @result_list = ();\n    while ($tuple = @tuple_list)\n    {\n        my @trimmed_tuple = (trim $tuple, $K);\n        $result_list .= @trimmed_tuple;\n        $tuple_list = undef;\n    }\n\n    return $result_list;\n}","language":"perl"}
{"task_id":"MBPLP\/445","completion":"    my $output_tup = [];\n    for ($index1 = 0; $index1 < scalar $test_tup1->size(); $index1++)\n    {\n        for ($index2 = 0; $index2 < scalar $test_tup2->size(); $index2++)\n        {\n            $output_tup << (scalar $test_tup1->$index1 * scalar $test_tup2->$index2);\n        }\n    }\n    return $output_tup;\n}","language":"perl"}
{"task_id":"MBPLP\/446","completion":"    my @counts = 0;\n    foreach my $i (@$lst)\n    {\n        if ($i eq $tup) {\n            $counts{$i}++;\n        }\n    }\n    return $counts;\n}","language":"perl"}
{"task_id":"MBPLP\/447","completion":"    my $cube_nums = [];\n    for (@_ = 1; @_ <= $nums; @_++) {\n        $cube_nums[$] = ($ * $ * $);\n    }\n    return $cube_nums;\n}","language":"perl"}
{"task_id":"MBPLP\/448","completion":"    $ret = 0;\n    for my $i (1; $i <= $n; $i++) {\n        $ret += $i % 2;\n    }\n    return $ret;\n}","language":"perl"}
{"task_id":"MBPLP\/449","completion":"    $dx12 = $x1 - $x2;\n    $dy12 = $y1 - $y2;\n    $dx23 = $x2 - $x3;\n    $dy23 = $y2 - $y3;\n    if ($dx12 * $dx23 + $dy12 * $dy23 == 0) {\n        return \"No\";\n    }\n    return \"Yes\";\n}","language":"perl"}
{"task_id":"MBPLP\/450","completion":"    my ($n, $m) = @_;\n\n    $arr = [];\n\n    if ($l > $m) {\n        $n = $l;\n        $m = $m;\n    }\n\n    for ($i=0; $i < $n; $i++) {\n        if (substr($str, $i, 1) eq \" \") {\n            $i++;\n        }\n    }\n\n    foreach ($str as $string) {\n        if (strlen($string) >= $m) {\n            if ($i == 0) {\n                $arr[] = substr($string, 0, $m);\n            } else {\n                $arr[] = substr($string, $i, $m);\n            }\n        }\n    }\n\n    return $arr;\n}","language":"perl"}
{"task_id":"MBPLP\/451","completion":"    my ($text2) =~ s\/\\s+\/g;\n    return $text1.$text2;\n}","language":"perl"}
{"task_id":"MBPLP\/452","completion":"    return $sale_amount - $actual_cost < 0 ? $sale_amount - $actual_cost : undef;\n}","language":"perl"}
{"task_id":"MBPLP\/453","completion":"    my ($a) = @_;\n\n    $a = sort $a $a;\n    $a = reverse $a $a;\n    $a = $a % 2;\n\n    $a = map { $n % ($a) } $a + 1;\n\n    return $a;\n}","language":"perl"}
{"task_id":"MBPLP\/454","completion":"    return join (\"', '\");\n    $_ =~ s\/\\bz\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b_z\\b\/x;\n    $_ =~ s\/\\b","language":"perl"}
{"task_id":"MBPLP\/455","completion":"    my $is_31 = 0;\n    for my $i (1..31)\n    {\n        if ($monthnum2 % $i)\n        {\n            $is_31 = 1;\n            break;\n        }\n    }\n    return $is_31;\n}","language":"perl"}
{"task_id":"MBPLP\/456","completion":"    foreach my $string (@$stringlist)\n        push @$stringlist, $string;\n    return $stringlist;\n}","language":"perl"}
{"task_id":"MBPLP\/457","completion":"    my $smallest = $lst;\n    for (@F) {\n        my ($next) = $F;\n        if (size($smallest) > size($next)) {\n            $smallest = $next;\n        }\n    }\n    return $smallest;\n}","language":"perl"}
{"task_id":"MBPLP\/458","completion":"    my $a = $l * $b;\n    print $a;\n}","language":"perl"}
{"task_id":"MBPLP\/459","completion":"    my ($str2) = @_;\n    my ($str3) = @_;\n\n    my $regex = \/^([A-Z\\s])*$\/;\n    my $matches = $regex->match($str1);\n\n    if ($matches) {\n        $str2 =~ s\/^[A-Z\\s]*\/g;\n        $str3 = $str2;\n    }\n\n    # @_;\n\n    return $str3;\n}","language":"perl"}
{"task_id":"MBPLP\/460","completion":"    return $_.{0};\n}","language":"perl"}
{"task_id":"MBPLP\/461","completion":"    my $upper_ct = 0;\n    while (defined($str) && $str) {\n        if ($str =~ s\/\\S*\/){\n            ++$upper_ct;\n        }\n    }\n    print $upper_ct;\n}","language":"perl"}
{"task_id":"MBPLP\/462","completion":"    my $length = length $list1;\n\n    $combinations = [ ];\n\n    if ($length > 1)\n        $combinations = [ ];\n\n    while ($length--)\n    {\n        $combinations = $combinations + combinations_list ($list1 { $_[ $length - 1 ] }, $length);\n    }\n\n    return $combinations;\n}","language":"perl"}
{"task_id":"MBPLP\/463","completion":"    $max = 0;\n\n    for (my $i = 0; $i < $arr->length-1; ++$i) {\n        for (my $j = $i+1; $j < $arr->length; ++$j) {\n            my $prod = $arr[$i] * $arr[$j];\n            if ($prod > $max) {\n                $max = $prod;\n            }\n        }\n    }\n\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/464","completion":"    my $keys = keys % $dict;\n\n    if (count($keys) == $n) {\n        $keys;\n    } else {\n        0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/465","completion":"    foreach my $k (@$dict1) {\n        $dict1[$k] = [drop_empty_values] ($dict1[$k]);\n    }\n    return $dict1;\n}","language":"perl"}
{"task_id":"MBPLP\/466","completion":"    if ($n < 2)\n        return $n;\n    my ($p, $i) = @_;\n    if ($p < $arr[$i])\n        return $p;\n    while ($i - 1 > 0 && $arr[$i] < $p)\n    {\n        $p = $arr[$i];\n        $i--;\n    }\n    return $p;\n}","language":"perl"}
{"task_id":"MBPLP\/467","completion":"    $octalNum = $deciNum;\n\n    # convert decimal number to octal number\n    while ($deciNum > 0) {\n        $octalNum = ($deciNum % 8) + $octalNum;\n        $deciNum = floor($deciNum \/ 8);\n    }\n\n    return $octalNum;\n}","language":"perl"}
{"task_id":"MBPLP\/468","completion":"    return $n == 1 ? $arr[0] : max_product($arr, $n - 1) * $arr[$n - 1];\n}","language":"perl"}
{"task_id":"MBPLP\/469","completion":"    my @transactions;\n\n    for (@transactions) {\n        $price -= @transactions[0];\n        $k--;\n        if ($k <= 0) {\n            return $price;\n        }\n    }\n\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/470","completion":"    my ($result_arr = []);\n\n    for my $a (sort @$test_tup);\n    {\n        $result_arr{$_} = 0;\n        for my $b (sort @$test_tup);\n        {\n            if ($a == $b) {\n                continue;\n            }\n            $result_arr{$_} += $b;\n        }\n        push @$result_arr, $result_arr{$_};\n    }\n\n    return $result_arr;\n}","language":"perl"}
{"task_id":"MBPLP\/471","completion":"    my @res;\n\n    for my $i (0; $i < count($arr); $i++) {\n        my @mult = split($arr[$i], { \"|\" }, 0, -1);\n        $res = $res + map { $i = $i + 1; $m = $mult[0]; $n = $n + $m; } @ mult;\n    }\n\n    return $res[0] % $n;\n}","language":"perl"}
{"task_id":"MBPLP\/472","completion":"    if ($l ~= @[ 0 ]) {\n        my ($max, $min) = 0, 0;\n        for ( my $n = 0; $n < $l; $n++ ) {\n            if ( $n != $max && $n != $min ) {\n                $max = $n;\n                continue;\n            }\n            if ( $n > $min )\n                return 0;\n            if ( $max < $n )\n                $min = $n;\n        }\n        return $min - $max + 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/473","completion":"    my @test_list1_elements = map { $_, $_->[0], $_->[1] };\n    my @test_list2_elements = map { $_, $_->[0], $_->[1] };\n\n    my $intersect_tuple_list = '';\n\n    for (my $tuple_list_1_index = 0; $tuple_list_1_index < sizeof($test_list1); $tuple_list_1_index++) {\n        for (my $tuple_list_2_index = 0; $tuple_list_2_index < sizeof($test_list2); $tuple_list_2_index++) {\n            if (in_array($tuple_list_1_elements[$tuple_list_1_index], $tuple_list_2_elements[$tuple_list_2_index])) {\n                $intersect_tuple_list = $intersect_tuple_list . ' ' . $tuple_","language":"perl"}
{"task_id":"MBPLP\/474","completion":"    $str1 =~ s\/$ch\/$newch\/g;\n    return $str1;\n}","language":"perl"}
{"task_id":"MBPLP\/475","completion":"    my ($ret) = @();\n\n    foreach my $k (@{keys($dict1)}) {\n        push $ret, [$k, $dict1->{$k}];\n    }\n\n    return $ret;\n}","language":"perl"}
{"task_id":"MBPLP\/476","completion":"    my ($largest) = 0;\n    my ($smallest) = 9999999999999;\n    my ($sum) = 0;\n\n    foreach ($nums as $num)\n    {\n        $sum = $sum + $num;\n        if ($num > $largest) { $largest = $num; }\n        if ($num < $smallest) { $smallest = $num; }\n    }\n\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/477","completion":"    my $lower = $string =~ s\/[^a-z]\/lower;\n    return $lower;\n}","language":"perl"}
{"task_id":"MBPLP\/478","completion":"    my ($str2) = @_;\n    if ($str1 ==~ \/([a-z])\/) {\n        $str2 =~ s\/([a-z])\/ $1\/;\n        return $str2;\n    }\n    return $str1;\n}","language":"perl"}
{"task_id":"MBPLP\/479","completion":"    {\n        my ($number) = $n;\n        {\n            {\n                my ($number) = $number;\n                $number =~ s\/\\D\/ $number;\n                return ($number);\n            }\n        }\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/480","completion":"    my ($max, $str2) = (0, \"\");\n    my ($max_char, $max_char_count, $char_count) = (\"\", -1, 0);\n    my ($cur_char, $cur_char_count) = (\"\", 0);\n\n    foreach my $char (@_) {\n        if ($char_count > $max_char_count) {\n            $max_char = $char;\n            $max_char_count = $char_count;\n        }\n        if ($cur_char_count != $max_char_count && $char_count > $cur_char_count) {\n            $cur_char = $char;\n            $cur_char_count = $char_count;\n        }\n    }\n\n    return $max_char;\n}","language":"perl"}
{"task_id":"MBPLP\/481","completion":"    my $index = 0;\n    while (not $n >= $sum) {\n        if ($set[$index] <= $sum) {\n            $set[$index] += 1;\n            $n -= $set[$index];\n        }\n        $index += 1;\n    }\n    return !($n == 0);\n}","language":"perl"}
{"task_id":"MBPLP\/482","completion":"    return ($text =~ s\/[A-Z]\/\\$1\/igm) ? 'Yes' : 'No';\n}","language":"perl"}
{"task_id":"MBPLP\/483","completion":"    my $factorial = 1;\n    for my $i (0 .. $x) {\n        $factorial = $factorial * $i;\n    }\n    return $factorial % $x;\n}","language":"perl"}
{"task_id":"MBPLP\/484","completion":"    my @result = ();\n\n    foreach my $el1 (@$test_list1) {\n        if (not @$result{$el1}) {\n            push @result, $el1;\n        }\n    }\n\n    foreach my $el2 (@$test_list2) {\n        if (not @$result{$el2}) {\n            push @result, $el2;\n        }\n    }\n\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/485","completion":"    my $max = 0;\n    foreach my $x (1..$n) {\n        $max = $x if $x > $max ? $x : $max;\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/486","completion":"    $p = ($p + $p - 1) \/ 2;\n    #@for $i = 1 .. $k\n    for ($i = 1; $i <= $k; ++$i) {\n        #@if $n - $i > 0\n        if ($n - $i > 0) {\n            #@if $n - $i - 1 > 0\n            if ($n - $i - 1 > 0) {\n                #@if $n - $i - 2 > 0\n                if ($n - $i - 2 > 0) {\n                    #@if $n - $i - 3 > 0\n                    if ($n - $i - 3 > 0) {\n                        $p -= binomial($n - $i","language":"perl"}
{"task_id":"MBPLP\/487","completion":"    $tup = $tup->[0];  # get first element\n    $tup_copy = $tup->[1];  # copy of the first element\n\n    # create list with tuples of the same first element in increasing order by the last element\n    my ($last_element_list) = (sort_tuple($tup->[1])->);\n    # the following line inserts the tuple with the last element in the sorted list\n    # in order to preserve the order\n    $last_element_list->push($tup_copy);\n    # sort the list\n    sort @$last_element_list;\n    # return the list\n    return $last_element_list;\n}","language":"perl"}
{"task_id":"MBPLP\/488","completion":"    $a = $a;\n    my $n = 0;\n    my $d = $a;\n    my $p = 0;\n    for (my $i=1; $i<=$a; $i++) {\n        $n = $n + ($i*$i);\n    }\n    $d = $d * $a;\n    $p = $d\/$$n;\n    return $p;\n}","language":"perl"}
{"task_id":"MBPLP\/489","completion":"    $arr = join(',', @_);\n    my $largest = 0;\n    my $largest_count = 0;\n    my @max_freq = 0;\n    while (<>) {\n        if ($arr =~ m\/(?<=,)[^,]+\/) {\n            $arr = join(',', @$arr);\n            my @arr_freq = map { $_ => $arr =~ m\/\/, #count\/$largest_count}, @;\n            my @max_freq = max @arr_freq;\n            if ($largest_count = $max_freq) {\n                $largest_count = 0;\n                $largest = $_;\n            } else {\n                $largest_count += 1;\n                $largest = $largest_count > $max_freq ? $largest : $_;\n            }\n        } else {\n            return 0;\n        ","language":"perl"}
{"task_id":"MBPLP\/490","completion":"    my ($ret) = {};\n    my $sym_dict = {\n        [7, 8] => 1,\n        [3, 4] => 1,\n        [8, 7] => 1,\n        [10, 9] => 1,\n        [11, 3] => 1,\n        [9, 10] => 1,\n        [12, 4] => 1,\n        [10, 11] => 1\n    };\n\n    foreach my $item (@$test_list) {\n        my $temp = explode(',', $item);\n        if ($sym_dict[$temp[0]] == 1 && $sym_dict[$temp[1]] == 1) {\n            $ret[$temp[0]] = $temp[1];\n            $ret[$temp[1]] = $temp[0];\n        }\n    }\n    return $ret;\n","language":"perl"}
{"task_id":"MBPLP\/491","completion":"    my @seq = [];\n    for (1..$n) {\n        $seq[$n] = $a * $r;\n        $a = 1;\n        $r *= $n;\n    }\n    return @seq;\n}","language":"perl"}
{"task_id":"MBPLP\/492","completion":"    my $begin = 0;\n    my $end = $item_list;\n    while ($begin <= $end) {\n        $mid = (0 + $end) \/ 2;\n        if ($item < $item_list[$mid]) {\n            $end = $mid - 1;\n        } else if ($item > $item_list[$mid]) {\n            $begin = $mid + 1;\n        } else {\n            return $mid;\n        }\n    }\n    return -1;\n}","language":"perl"}
{"task_id":"MBPLP\/493","completion":"    return $this->calculate_polygons($startx, $starty, $endx, $endy, $radius, $startx < $endx ? $startx : $endx, $starty < $endy ? $starty : $endy, $radius);\n}","language":"perl"}
{"task_id":"MBPLP\/494","completion":"    return join(map(chr, $test_tup), \"\");\n}","language":"perl"}
{"task_id":"MBPLP\/495","completion":"    my ($str2) = @_;\n    $str1 =~ s\/^[a-z]*\/ \"\";\n    $str2 =~ s\/^[A-Z]*\/ \"\";\n    return $str1.$str2;\n}","language":"perl"}
{"task_id":"MBPLP\/496","completion":"    my ($heap, $n) = @_;\n    $heap->push $nums;\n    while ($heap->size > $n) {\n        $heap->pop $nums;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        print $heap->top;\n        $heap->pop;\n    }\n    $heap->top;\n}","language":"perl"}
{"task_id":"MBPLP\/497","completion":"    $h += $r;\n    $r = $h \/ 2;\n    $h \/= 2;\n    $r = $h \/ 2;\n    return $2 * $pi * ($r * $r);\n}","language":"perl"}
{"task_id":"MBPLP\/498","completion":"    my $gcd = 0;\n    while ($x != 0) {\n        my $a = $x % $y;\n        $x = $x \/ $y;\n        $gcd = $gcd $a unless $a = 0;\n    }\n    return $gcd;\n}","language":"perl"}
{"task_id":"MBPLP\/499","completion":"    {\n        my $d = $r;\n        $d -= $r;\n        return $d;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/500","completion":"    return join \" \", @_;\n}","language":"perl"}
{"task_id":"MBPLP\/501","completion":"    my $gcd = 0;\n\n    my $div = $x - $y;\n\n    if ($x < $y)\n        $div = $y - $x;\n\n    for (@_);\n    {\n        my $q = $div \/ $gcd;\n        if ($q > 1)\n            $gcd = $q;\n        else\n            return $q;\n    }\n    return $gcd;\n}","language":"perl"}
{"task_id":"MBPLP\/502","completion":"    $n = @_[0];\n    $m = @_[1];\n    $n % $m;\n}","language":"perl"}
{"task_id":"MBPLP\/503","completion":"    if ($nums) {\n        my ($max, $sum) = $nums;\n        foreach my $n (@$nums) {\n            if ($n > $max) {\n                $max = $n;\n            }\n            $sum += $n;\n        }\n        $nums = [$max, $sum];\n    }\n    return $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/504","completion":"    my @sum;\n    my @num;\n\n    # Get the sum of the 3rd (n-1) natural numbers (i.e. the cube of each natural number).\n    for my $i (1..$n-2);\n        @num{$i}=$i*$i*$i;\n        @sum{$i}=@sum{$i}+@num{$i};\n    next;\n\n    # Get the sum of the first n natural numbers.\n    for my $i (1..$n);\n        @num{$i}=$i*$i*$i;\n        @sum{$i}=@sum{$i}+@num{$i};\n    next;\n\n    # Get the sum of the last (n-1) natural numbers.\n    for my $i (1..$n-1);\n        @num{$i}=$i*$i*$i;\n        @sum{$i}=@sum{$i}+@num{$i};\n    next","language":"perl"}
{"task_id":"MBPLP\/505","completion":"    my $i = 0;\n    my @A = split \/\\0\/;\n    my @B = @A;\n    for my $x (sort @B) {\n        $A[$i] = $x;\n        $i++;\n    }\n    return $A;\n}","language":"perl"}
{"task_id":"MBPLP\/506","completion":"    my $mod = $n - $k;\n    my @fact;\n    $fact = 1;\n    for (@fact = 1; $n > $mod; $mod--) {\n        $fact = $fact * $mod;\n    }\n    return ($fact \/ (factorial($k))) \/ (factorial($n - $k));\n}","language":"perl"}
{"task_id":"MBPLP\/507","completion":"    my @words = @_;\n    my $words1 = split \/,| \/;\n    my @words1 = @words = @words1;\n\n    foreach $removewords {\n        push @words1, $words1 | grep -v $removewords;\n    }\n    return join \", \", @words1;\n}","language":"perl"}
{"task_id":"MBPLP\/508","completion":"    my ($order, $result) = @_;\n    my $same_order_count = 0;\n    foreach my $s1 (@$l1) {\n        foreach my $s2 (@$l2) {\n            if ($s1 eq $s2) {\n                ++$same_order_count;\n            }\n        }\n    }\n    return $same_order_count == size ($order);\n}","language":"perl"}
{"task_id":"MBPLP\/509","completion":"    my ($total, $count) = 0;\n    for (@i = 1; @i <= $n; @i++) {\n        if (defined ($i % 2) && $i != $n) {\n            $total = $total + $i;\n            $count++;\n        }\n    }\n    return $total \/ $count;\n}","language":"perl"}
{"task_id":"MBPLP\/510","completion":"    my ($len, $count) = 0;\n    my $i = 0;\n    for my $seq (@$arr) {\n        my $prod = 1;\n        for my $el (@$seq) {\n            $prod *= $el;\n        }\n        if ($prod < $k) {\n            $count++;\n        }\n        if ($prod >= $k) {\n            $len++;\n        }\n    }\n    return $len;\n}","language":"perl"}
{"task_id":"MBPLP\/511","completion":"    my ($min, $sum) = @_;\n\n    $sum = $min = $num;\n\n    for (@F);\n    {\n        if ($num == 1) {\n            next;\n        }\n        $sum = $sum + $num;\n        $num = $num - 1;\n\n        $min = $min > $sum ? $sum : $min;\n    }\n\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/512","completion":"    my ($count_dict) = hash;\n    foreach my $el (@$test_tuple) {\n        if (isa $el (array) || isa $el (hash)) {\n            count_element_freq $el;\n        } else {\n            if (isa $el (number)) {\n                if (defined $count_dict{$el}) {\n                    $count_dict{$el}++;\n                } else {\n                    $count_dict{$el} = 1;\n                }\n            }\n        }\n    }\n    return $count_dict;\n}","language":"perl"}
{"task_id":"MBPLP\/513","completion":"    $K =~ s\/ \/FDF\/;\n    $test_list = (0);\n    foreach my $x (@_) {\n        $test_list = $test_list . $x . $K;\n    }\n    return $test_list;\n}","language":"perl"}
{"task_id":"MBPLP\/514","completion":"    my ($sum, @_) = 0;\n    foreach ($test_tup as $tup) {\n        $sum += $tup;\n    }\n    print $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/515","completion":"    my %divisible_by_m = 0;\n    foreach my $nk (1, $arr) {\n        my $nk_mod = ($nk % $m);\n        if ($nk_mod && $nk_mod == 0) {\n            $divisible_by_m++;\n        }\n    }\n    return $divisible_by_m;\n}","language":"perl"}
{"task_id":"MBPLP\/516","completion":"    open my $a (\"A\");\n    open my $b (\"B\");\n    foreach my $num (@$nums) {\n        if ($num % 2 == 0)\n            $a->put($num);\n        else\n            $b->put($num);\n    }\n    join $a , $b;\n}","language":"perl"}
{"task_id":"MBPLP\/517","completion":"    my ($list2) = @_;\n\n    $list1 = sort { $a <=> $b } $list1;\n    $list2 = sort { $a <=> $b } $list2;\n\n    return ($list2 = $list1)[0];\n}","language":"perl"}
{"task_id":"MBPLP\/518","completion":"    my $sqrt = 0;\n    for ($i=1; $i <= $num; $i++) {\n        if ($i * $i == $num)\n            $sqrt = $i;\n        else if ($i * $i < $num)\n            continue;\n        else\n            break;\n    }\n    if ($sqrt > 0) {\n        $sqrt = $sqrt + 1;\n        print $sqrt * $sqrt;\n    } else {\n        print 'The square root of ' . $num . ' is ' . $sqrt . '\\n';\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/519","completion":"    (100 * 100 * 100) * ($num \/ 6);\n}","language":"perl"}
{"task_id":"MBPLP\/520","completion":"    for my $x (@_) {\n        $l = ($l . $x . $l \/ $x) . $l \/ $x;\n    }\n    return $l;\n}","language":"perl"}
{"task_id":"MBPLP\/521","completion":"    return if ($x * $x + $y * $y <= $z * $z) 0;\n}","language":"perl"}
{"task_id":"MBPLP\/522","completion":"    my ($size, $i, $j) = (1, 1, 1);\n\n    while ($i < $arr) {\n        while ($j < $arr && $arr[$j] > $arr[$i]) {\n            $j++;\n        }\n        if ($j - $i > $size) {\n            $size = $j - $i;\n        }\n        $i++;\n    }\n\n    return $size;\n}","language":"perl"}
{"task_id":"MBPLP\/523","completion":"    my $cap = defined $str1;\n    my $lower = defined $str1;\n    my $num = defined $str1;\n    my $len = defined $str1;\n    $cap =~ s\/[^A-Z]\/i;\n    $lower =~ s\/[^a-z]\/i;\n    $num =~ s\/[^0-9]\/i;\n    $len =~ s\/^.{8}\/i;\n\n    return\n    {\n        \"String must have 1 upper case character.\" if !$cap;\n        \"String must have 1 number.\" if !$num;\n        \"String length should be atleast 8.\" if !$len;\n        \"Valid string.\" if $cap && $lower && $num && $len;\n    };\n}","language":"perl"}
{"task_id":"MBPLP\/524","completion":"    $sum = 0;\n\n    my $pq = new \\PQ { $arr[0] };\n\n    for (@{$arr} = 1; $arr < $n; $arr++) {\n        my $curr = $arr[0];\n\n        for (@{$arr} = 1; $arr < $n; $arr++) {\n            if ($curr < $arr[0]) {\n                $curr = $arr[0];\n            } else if ($curr > $arr[0]) {\n                if ($pq->get_size() > 0) {\n                    if ($curr > $pq->front()) {\n                        $pq->dequeue();\n                    }\n                }\n\n                $pq->enqueue($curr);\n            }\n\n            if ($curr < $arr[0]) {\n                $curr = $arr[0];\n            } else","language":"perl"}
{"task_id":"MBPLP\/525","completion":"    my ($x1, $y1) = @_;\n    my ($x2, $y2) = @_;\n    my ($n, $dx, $dy) = @_;\n    my ($l1, $l2) = @_;\n    return ($x1 - $x2 == 0 && $l1 - $l2 == 0)\n        || ($x1 == $dx && $y1 == $dy && $l1 == $n)\n        || ($y1 == $dy && $x1 == $dx && $l1 == $n);\n}","language":"perl"}
{"task_id":"MBPLP\/526","completion":"    my ($str2) = @_;\n    my ($result) = \"\";\n    chomp($str1);\n    if (stripslashes($str1))\n        $str1 =~ s\/\\\/\/;\n    chomp($str2);\n    if (stripslashes($str2))\n        $str2 =~ s\/\\\/\/;\n    for (@_){\n        $result .= $str1.capitalize();\n        if (not @_)\n            $result .= $str2.capitalize();\n        $result .= \" \";\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/527","completion":"    my $pairs = 0;\n\n    if ($sum < $n) {\n        $pairs = 0;\n    } else {\n        for (my $i = 0; $i < $arr.count; $i++) {\n            if ($arr[$i] < $sum) {\n                $pairs += (sum($arr[$i]) == $sum) ? 1 : 0;\n            }\n        }\n    }\n\n    return $pairs;\n}","language":"perl"}
{"task_id":"MBPLP\/528","completion":"    my ($list2) = @_;\n\n    if ($list1 && $list2) {\n        if ($list1->{length} < $list2->{length}) {\n            return $list1;\n        } else {\n            return $list2;\n        }\n    } else {\n        # If no list, return the list itself\n        return $list1 or $list2;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/529","completion":"    return ($n * (n + 1)) \/ 2;\n}","language":"perl"}
{"task_id":"MBPLP\/530","completion":"    my $negative_count = 0;\n    $negative_count = ($nums{$_} < 0) ? 1 : 0;\n    return $negative_count;\n}","language":"perl"}
{"task_id":"MBPLP\/531","completion":"    my $c = 0;\n    for my $i (0..($coins - 1)) {\n        if ($V >= $coins[$i]) {\n            $c = $c + min_coins($coins, $i, $V - $coins[$i]);\n        }\n    }\n    return $c;\n}","language":"perl"}
{"task_id":"MBPLP\/532","completion":"    $str1 =~ s\/(.).\/g;\n    $str2 =~ s\/(.).\/g;\n    if ($str1 == $str2) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/534","completion":"    my ($pos, $found) = @_;\n\n    if ($found =~ m{$pattern} {\n            $pos = 0;\n        })\n    {\n        $pos = m{$pattern}{$text}+1;\n    }\n\n    return $pos;\n}","language":"perl"}
{"task_id":"MBPLP\/535","completion":"    my @l = 0;\n    for my $c (0..$r) {\n        my $s = $c * $r;\n        push @l, $s;\n    }\n    return $l;\n}","language":"perl"}
{"task_id":"MBPLP\/536","completion":"    # $n is 1-based index\n\n    my ($sublist, @_) = $list;\n    # @_ is a pointer to the sublist\n\n    while ($n > 1)\n    {\n        $sublist = $sublist;\n        $n--;\n    }\n\n    return $sublist;\n}","language":"perl"}
{"task_id":"MBPLP\/537","completion":"    my ($str2) = @_;\n    return $str1 =~ m{(.)\\1+}$str2;\n}","language":"perl"}
{"task_id":"MBPLP\/538","completion":"    my ($str2) = @_;\n    $str2 = str_split($str2);\n    my ($str3) = @_;\n    $str3 = str_split($str3);\n    return ($str1, $str2, $str3);\n}","language":"perl"}
{"task_id":"MBPLP\/539","completion":"    my @power_in_bases = @_;\n    $power_in_bases[$index] = $bases_num ^ $index;\n    return $power_in_bases;\n}","language":"perl"}
{"task_id":"MBPLP\/540","completion":"    my @f = sort keys %x $arr;\n    my @m = sort keys %x $arr;\n\n    my $diff = 0;\n    for (@f) {\n        $diff = ($diff ^ $n) - $n + $m{$n - 1};\n    }\n    return $diff;\n}","language":"perl"}
{"task_id":"MBPLP\/541","completion":"    my $sum = 0;\n    for my $i (1..$n) {\n        $sum += $i;\n    }\n    return $sum > $n ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/542","completion":"    $text =~ s\/\\s\/:\/;\n    $text =~ s\/\\,\/:\/;\n    $text =~ s\/\\.\/:\/;\n    return $text;\n}","language":"perl"}
{"task_id":"MBPLP\/543","completion":"    my $count = 0;\n\n    my $str1 = $num1;\n    my $str2 = $num2;\n\n    while (defined($str1) && defined($str2)) {\n        if ($str1 > $str2) {\n            $str1 = substr($str1, 1);\n        } else {\n            $str2 = substr($str2, 1);\n        }\n\n        $count++;\n    }\n\n    print $count;\n}","language":"perl"}
{"task_id":"MBPLP\/544","completion":"    my @flatten_list;\n    foreach my $tuple (@$test_list) {\n        if (sub match $_) {\n            my ($first, $second, $third) = $tuple;\n            my $first_digit = substr($first, 0, 1);\n            my $second_digit = substr($second, 0, 1);\n            my $third_digit = substr($third, 0, 1);\n            push @flatten_list, $first_digit.$second_digit.$third_digit;\n        } else {\n            push @flatten_list, $tuple;\n        }\n    }\n\n    return join(\" \", @flatten_list);\n}","language":"perl"}
{"task_id":"MBPLP\/545","completion":"    my ($i, $j) = @_;\n\n    $i = $i & $n & 0x55555555;\n    $j = $j & $n & 0xAAAAAAAA;\n\n    return ($i | $j);\n}","language":"perl"}
{"task_id":"MBPLP\/546","completion":"    $index = 0;\n\n    for (@{$string}) {\n        if ($char eq @{$string}) {\n            return $index;\n        }\n        $index++;\n    }\n\n    return \"none\";\n}","language":"perl"}
{"task_id":"MBPLP\/547","completion":"    my ($sum) = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $sum = $sum + $i ^ $i + 1;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/548","completion":"    $max = 0;\n    $start = 0;\n    for ($i = 0; $i < $arr; $i++) {\n        $max = $max + $arr[$i];\n        if ($max < $arr[$i]) {\n            $max = $arr[$i];\n            $start = $i;\n        }\n    }\n    return $start - 1;\n}","language":"perl"}
{"task_id":"MBPLP\/549","completion":"    my $i;\n    for (my $i = 1; $i <= $n; $i += 2) {\n        $i = $i ^ 5;\n    }\n    return $i;\n}","language":"perl"}
{"task_id":"MBPLP\/550","completion":"    my $i = 1;\n\n    if ($high - $low > 1) {\n        $i = $low + floor($high - $low \/ 2);\n\n        if ($low < $high) {\n            if ($arr[$i] > $arr[$i - 1]) {\n                my $temp = $arr[$i];\n                $arr[$i] = $arr[$i - 1];\n                $arr[$i - 1] = $temp;\n                $i -= 1;\n            }\n        }\n        else if ($high == $low) {\n            if ($arr[$i] > $arr[$i - 1]) {\n                my $temp = $arr[$i];\n                $arr[$i] = $arr[$i - 1];\n                $arr[$i - 1] = $temp;\n                $i ","language":"perl"}
{"task_id":"MBPLP\/551","completion":"    my @$col = shift @$list1;\n    my @$new_col = [];\n    my @$i = 0;\n    while ($i < $n) {\n        my @$val = pop @$col;\n        push @$new_col, $val;\n        $i = $i + 1;\n    }\n    return @$new_col;\n}","language":"perl"}
{"task_id":"MBPLP\/552","completion":"    $seq_nums = sort $seq_nums;\n\n    $seq_len = length $seq_nums;\n    for my $i ( 1 , $seq_len ) {\n        if ( $i < $seq_len - 1 ) {\n            $num_a = $seq_nums[$i - 1];\n            $num_b = $seq_nums[$i + 1];\n            if ( $num_a - $num_b ) {\n                return \"Non Linear Sequence\";\n            }\n        }\n    }\n    return \"Linear Sequence\";\n}","language":"perl"}
{"task_id":"MBPLP\/553","completion":"    $test_tup = map { my $val = shift; my $str = shift } @_;\n    my $str = join \"\", @_;\n    print \"$str = \", (0.0 .. @_);\n}","language":"perl"}
{"task_id":"MBPLP\/554","completion":"    my $output;\n\n    $output = @();\n\n    my $count = 0;\n\n    foreach my $number (@_) {\n        if ($count % 2 == 1) {\n            push $output, $number;\n        }\n\n        $count += 1;\n    }\n\n    return $output;\n}","language":"perl"}
{"task_id":"MBPLP\/555","completion":"    return ($n * ($n + 1) \/ 2);\n}","language":"perl"}
{"task_id":"MBPLP\/556","completion":"    $odd = $N ^ $A[0];\n    return (1 + $odd) \/ 2;\n}","language":"perl"}
{"task_id":"MBPLP\/557","completion":"    my $characters = '';\n\n    $characters = grep(0, $_);\n\n    return join('', map(function ($char)\n                     {\n                         if ($char == $string[0])\n                             return $char;\n                         else\n                             return $char.upper();\n                     }, $characters));\n}","language":"perl"}
{"task_id":"MBPLP\/558","completion":"    if ($n1 == $n2) {\n        return 0;\n    }\n    else {\n        $diff = abs($n1 - $n2);\n        if ($diff > 9) {\n            $diff = $diff \/ 10;\n        }\n        return 1 + $diff;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/559","completion":"    my $max = 0;\n    my @aux = (@_);\n    my @range;\n\n    for (@range = 0 .. $size) {\n        my $i = @range;\n\n        while ($i < $size and $aux[$i] >= $aux[$i + 1]) {\n            $i++;\n        }\n\n        if ($i >= $size) {\n            return 0;\n        }\n\n        my $sub_sum = 0;\n        for ($j = $i; $j < $size; $j++) {\n            $sub_sum = $sub_sum + $aux[$j];\n            $max = $max < $sub_sum ? $sub_sum : $max;\n        }\n    }\n\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/560","completion":"    my ($tup1, $tup2) = map { $_.to_i } @_;\n\n    return map { $_ => ($tup1 & $tup2) } @_;\n}","language":"perl"}
{"task_id":"MBPLP\/561","completion":"    $new_list = map { $_ => map { $_ => $_[1] } } $test_list;\n    return $new_list;\n}","language":"perl"}
{"task_id":"MBPLP\/562","completion":"    $max = 0;\n    foreach ($lst as $element)\n    {\n        if ($element {max} {length}) {\n            $max = $element {max} {length};\n        }\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/563","completion":"    my ($start, $end) = @_;\n    $start = ($start == '\\\"') ? $start = 1 : 0;\n    $end = ($end == '\\\"') ? $end = -1 : 0;\n    my @_ = substr($text, $start, $end - $start + 1);\n\n    return @_;\n}","language":"perl"}
{"task_id":"MBPLP\/564","completion":"    my @pairs = ();\n    my $doubled = $n * 2;\n    my $count = 0;\n    for my $i (0; $i < $arr; $i ++) {\n        for my $j (0; $j < $arr; $j ++) {\n            if ($i != $j && $arr[$i] == $arr[$j]) {\n                $count ++;\n                push @pairs, [$i, $j];\n            }\n            if ($count >= $doubled) {\n                return $count;\n            }\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/565","completion":"    # Here's the real meat of the problem:\n    # Make it return the list of characters from\n    # $word.  Hint: use foreach to loop through\n    # characters.\n    # NOTE: In Python, the built-in string class has a\n    # method called \"split\", which does the same thing.\n    # But, if you use \"string\" as the variable name, you\n    # should use the original string class for this\n    # exercise.\n    return $word;\n}","language":"perl"}
{"task_id":"MBPLP\/566","completion":"    my $n_str = $n <=> to_s;\n    my $s = 0;\n    # $n_str is a string of digits.\n    for my $i ( 0 .. length($n_str) - 1 )\n    {\n        # $i is the index of the digit.\n        $s = $s + $n_str[$i];\n    }\n    return $s;\n}","language":"perl"}
{"task_id":"MBPLP\/567","completion":"    $list1 = sort {$list1};\n    if ($list1) {\n        foreach my $i (0 .. $#list1) {\n            if ($i + 1 < $#list1) {\n                if ($list1[$i] > $list1[$i + 1]) {\n                    return 0;\n                }\n            }\n        }\n        return 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/568","completion":"    my ($result) = ();\n    for (0..$length) {\n        $result[] = {};\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/569","completion":"    my @list2 = 0;\n    my $res;\n    while ($list2 < $list1)\n    {\n        my $temp;\n        my ($low, $high) = (0, 0);\n        for ($i = $low; $i < $list1; $i++)\n            if ($list1[$i] > $list1[$high])\n                $high = $i;\n        $res[$low] = $list1[$high];\n        for ($i = $low + 1; $i < $list1; $i++)\n            $res[$i] = $list1[$i];\n        $list1 = $res;\n    }\n    return $list1;\n}","language":"perl"}
{"task_id":"MBPLP\/570","completion":"    my @string_list = split \/,\\s*\/ $list1;\n\n    for (@string_list) {\n        $string =~ s\/^(.*?[^#{$charlist}])(.*)\/(\\1\\2)\/g;\n\n        if (defined $string) {\n            $list1 =~ s\/\\s*\/g;\n            return $list1;\n        }\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/571","completion":"    my @m = split @_;\n\n    my $i = 0;\n    my $j = 0;\n    my $sum = 0;\n    my $max_sum = 0;\n    my @disjoint_pairs = [];\n\n    for (@m) {\n        if ($i != $j && $i + 1 < $N) {\n            if ($sum + $arr[$j] < $K) {\n                $sum += $arr[$j];\n                $i++;\n                @disjoint_pairs[($i - 1) + ($j - 1) * $N] = $arr[$j];\n            } else {\n                $sum -= $disjoint_pairs[(($j - 1) - ($i - 1)) * $N];\n                $sum += $arr[$j];\n                $i++;\n                @","language":"perl"}
{"task_id":"MBPLP\/572","completion":"    $nums = sort $nums;\n    $nums = uniq $nums;\n    $nums = sort $nums;\n    return $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/573","completion":"    my ($product, @list_data) = 0;\n\n    while (defined (@list_data)) {\n        push @list_data, $_;\n        $product = product ( $product, @list_data );\n    }\n\n    return $product;\n}","language":"perl"}
{"task_id":"MBPLP\/574","completion":"    my ($s) = $2 * $r * $h;\n    return $s;\n}","language":"perl"}
{"task_id":"MBPLP\/575","completion":"    $B = $N \/ $L;\n    $N -= $B * $L;\n    $B = $B % $R;\n    $C = ($B * $L) + $A;\n    return $C - $N;\n}","language":"perl"}
{"task_id":"MBPLP\/576","completion":"    my @$sub = map { $_->{ sub $A, $B; } };\n    return 1 if $sub{$n, $m};\n}","language":"perl"}
{"task_id":"MBPLP\/577","completion":"    # If number is less than zero, then the result is 0.\n    return 0 if $n < 0;\n\n    # Find last digit in factorial.\n    $n = $n mod 10;\n    return $n if $n >= 0;\n\n    # Find last digit in factorial.\n    $n = $n div 10;\n    return $n unless $n < 0;\n}","language":"perl"}
{"task_id":"MBPLP\/578","completion":"    $result = '';\n    $result .= join(' ', @map(sub {\n            my ($a, $b, $c) = @_;\n            return join(' ', @map(sub {\n                    if ($a == $b && $c != $a) {\n                        return $c;\n                    } else {\n                        return $a;\n                    }\n                }, $list1));\n        }, @zip($list2, $list3)));\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/579","completion":"    $test_tup1 = sort $test_tup1;\n    $test_tup2 = sort $test_tup2;\n    my @dissimilar;\n\n    for ($i = 0; $i < scalar @$test_tup1; $i++) {\n        if ($test_tup1[$i] == $test_tup2[$i]) {\n            dissimilar{$test_tup1[$i]};\n        }\n    }\n    return $dissimilar;\n}","language":"perl"}
{"task_id":"MBPLP\/580","completion":"    my ($even_tuple) = ();\n\n    my ($parent, $parent_index) = @_;\n    if ($parent == $test_tuple)\n    {\n        my @parent_contents = @_;\n        for my $parent_content (@parent_contents)\n        {\n            if ($parent_content % 2 == 0)\n                $even_tuple .= $parent_content;\n        }\n    }\n    return $even_tuple;\n}","language":"perl"}
{"task_id":"MBPLP\/581","completion":"    return 0.5 * ($b * $s) * $b;\n}","language":"perl"}
{"task_id":"MBPLP\/582","completion":"    if (defined $dict1 || $dict1->keys)\n    {\n        for my $key (@_->keys)\n        {\n            if (defined $dict1 || $dict1->{$key})\n            {\n                $dict1[$key] = 0;\n            }\n        }\n    }\n    else\n    {\n        return 1;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/583","completion":"    return ($num = $num * (1 + $num)) \/ 2;\n}","language":"perl"}
{"task_id":"MBPLP\/584","completion":"    my @adverbs;\n    my $re = \/([A-Za-z\\']\\w*[A-Za-z]*)\/g;\n\n    $re =~ \/([A-Za-z\\']\\w*[A-Za-z]*)\/g;\n\n    foreach ($re{$text} {$m = 1} || $re{$text} {$m = 2} || $re{$text} {$m = 3}) {\n        $re{$text} {\n            if ($re{$text} {\n                push @adverbs, $m;\n            }\n        }\n    }\n\n    return @adverbs;\n}","language":"perl"}
{"task_id":"MBPLP\/585","completion":"    $items = sort { $_ -> $_.price };\n\n    my $heap = New \\PQ::PQ;\n    for ($i = 0; $i < $n; $i++) {\n        $heap->enqueue ($items[$i]);\n    }\n\n    my $result = [];\n    while ($heap->size() > 0) {\n        $result[] = $heap->dequeue();\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/586","completion":"    my %output;\n    my ($i = 0) = 1;\n    while ($i < $n) {\n        if ($i < $k) {\n            $output{$i} = $a{$i};\n        }\n        $i = $i + 1;\n    }\n    $output{$n - 1} = $a{$n - 1};\n    return $output;\n}","language":"perl"}
{"task_id":"MBPLP\/587","completion":"    return (list) $listx;\n}","language":"perl"}
{"task_id":"MBPLP\/588","completion":"    my ($min, $max) = ($nums[0], $nums[0]);\n    for (my $item (@_)) {\n        if ($item < $min) {\n            $min = $item;\n        } else if ($item > $max) {\n            $max = $item;\n        }\n    }\n    return $max - $min;\n}","language":"perl"}
{"task_id":"MBPLP\/589","completion":"    @_;\n    [\n        my ($p, $q) = @_;\n        @_;\n        $p + $q == $a && $a > 0 && $b > 0 && $q - $p == $b - $a && $b > $a;\n    ];\n}","language":"perl"}
{"task_id":"MBPLP\/591","completion":"    my ($first, $last) = @_;\n    $newList[1] = $newList[ $last - 1 ];\n    $newList[ $last - 1 ] = $first;\n    return $newList;\n}","language":"perl"}
{"task_id":"MBPLP\/592","completion":"    $sum = 0;\n\n    for (@_){\n        if ($n % $(_ + 1) != 0){\n            $sum = $sum * ($n \/ $(_ + 1));\n        }\n        $n = $n % $(_ + 1);\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/593","completion":"    return join(\".\", map {\n        my ($ip1, $ip2) = @_;\n        if ($ip2 == \"0\")\n        {\n            return $ip1;\n        }\n        else\n        {\n            return $ip1 . \".\" . $ip2;\n        }\n    }, split \".\", $ip);\n}","language":"perl"}
{"task_id":"MBPLP\/594","completion":"    $even = 0;\n    $odd = 0;\n    for my $i (0..$#list1);\n        if (is_even($list1[$i])) {\n            $even = $even + $list1[$i];\n        } else {\n            $odd = $odd + $list1[$i];\n        }\n    }","language":"perl"}
{"task_id":"MBPLP\/595","completion":"    my @swaps = 0;\n\n    if ($str1 < $str2)\n    {\n        for ($i = $str1; $i <= $str2; $i++)\n        {\n            $str2 = $str2 ^ ($i);\n            $str1 = $str1 ^ ($i);\n            $str2 = $str2 ^ ($i);\n        }\n    }\n    else if ($str1 > $str2)\n    {\n        for ($i = $str2; $i <= $str1; $i++)\n        {\n            $str1 = $str1 ^ ($i);\n            $str2 = $str2 ^ ($i);\n            $str1 = $str1 ^ ($i);\n        }\n    }\n    else\n    {\n        return 0;\n    }\n\n    for ($","language":"perl"}
{"task_id":"MBPLP\/597","completion":"    my $i, $j, $x, $y;\n\n    $i = $m;\n    $j = $n;\n\n    while ($i - $j > 0) {\n        if ($i - $j == 1) {\n            $x = $arr1[$j];\n        } else if ($i - $j == 2) {\n            $x = $arr1[$j + 1];\n        } else {\n            $x = $arr1[$i + ($j - $i + 1) \/ 2];\n        }\n\n        if ($i - $j == 1) {\n            $y = $arr2[$i];\n        } else if ($i - $j == 2) {\n            $y = $arr2[$i - 1];\n        } else {\n            $y","language":"perl"}
{"task_id":"MBPLP\/598","completion":"    if ($number > 0 && $number < 10000)\n    {\n        $result = 1;\n        for ($i = 1; $i < $number; $i++)\n        {\n            if ($i == $number \/ $i)\n            {\n                $result *= $i;\n            }\n        }\n        return $result;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/599","completion":"    $sum = 0;\n    $number = +$number;\n    my @numbers = ();\n    my $i = 1;\n    while ($i <= $number) {\n        my $num = $i;\n        $i = $i + 1;\n        push @numbers, $num;\n    }\n    return $numbers;\n}","language":"perl"}
{"task_id":"MBPLP\/600","completion":"    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/602","completion":"    my ($prev, $first_rep) = @_;\n    $first_rep = $first_rep || \"\";\n\n    while ($str1 =~ m{$prev}[a-zA-Z0-9] {\n        $prev = $str1;\n        $first_rep = $prev;\n    }) {\n        return $first_rep;\n    }\n\n    return \"None\";\n}","language":"perl"}
{"task_id":"MBPLP\/603","completion":"    my ($ludic) = ();\n    for (@_) {\n        if ($n > $ludic->nth($n)) {\n            $ludic->push_back($n);\n            break;\n        }\n        else {\n            $ludic->push_back($ludic->nth($n));\n            $n++;\n        }\n    }\n    return $ludic;\n}","language":"perl"}
{"task_id":"MBPLP\/604","completion":"    my %words;\n    for my $i (split \/\\s+\/) {\n        push %words, reverse $i;\n    }\n    return join \" \", $words;\n}","language":"perl"}
{"task_id":"MBPLP\/605","completion":"    $num = abs($num);\n\n    if (self::is_prime($num)) {\n        return 1;\n    }\n\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/606","completion":"    return $degree * (0.017453292519943295);\n}","language":"perl"}
{"task_id":"MBPLP\/607","completion":"    $pattern =~ s\/\\s*(\\w+)\\s*\/i;\n    my ($res, $pos, $len) = @_;\n    for ($pos; $pos < strlen($text); $pos++) {\n        if (preg_match($pattern, substr($text, $pos))) {\n            $res = $text . \"\\n\" . $pos . \"\\n\" . $len . \"\\n\";\n        }\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/608","completion":"    $n = $n * (1 + $n);\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/609","completion":"    if ($N == 1)\n        return $A % $B;\n    if ($N % 2 == 0) {\n        return floor_min($A + ($A % $B), $B, $N \/ 2);\n    } else {\n        return floor_min($A + ($A % $B), $B, $N \/ 2);\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/610","completion":"    $list1 = @sort { $list1 };\n    my ($index, $k) = @_;\n    my ($last_index, $last_k) = @_;\n\n    if ($index == 0) {\n        return $list1;\n    }\n    if ($k == $last_k) {\n        $list1 = $list1 { $index };\n    } elseif ($index - $k > $last_index - $last_k) {\n        $list1 = $list1 { $index - $last_k };\n        $list1 = $list1 { $k };\n    } else {\n        $list1 = $list1 { $index };\n        $list1 = $list1 { $k - ($last_index - $last_k) };\n    }","language":"perl"}
{"task_id":"MBPLP\/611","completion":"    my @res;\n    $res = (sub max_of_nth, @res, $N, $test_list);\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/612","completion":"    my @merged = [];\n    my $last = $lst;\n    foreach my $elem (@$lst) {\n        push @$merged, @$last;\n        $last = $elem;\n    }\n    push @$merged, @$last;\n    return @merged;\n}","language":"perl"}
{"task_id":"MBPLP\/613","completion":"    my ($result, $max) = @_;\n    for (@$test_list) {\n        my ($key, $tuple) = @_;\n        my ($sum, $sum_of_elements) = 0;\n        my ($count, $count_of_elements) = 0;\n        for (@$tuple) {\n            my ($element) = @_;\n            $sum_of_elements++ if ($element > $sum);\n            $count_of_elements++ if ($element != $max);\n        }\n        $sum++;\n        $result[$key] = $sum_of_elements > $count_of_elements\n            ? $sum_of_elements\n            : $count_of_elements;\n        $max = $sum_of_elements > $count_of_elements\n            ? $sum_of_elements\n            : $count_of_elements;\n    ","language":"perl"}
{"task_id":"MBPLP\/614","completion":"    my @sum;\n    foreach my $item (@$test_list) {\n        push @sum, $item->[0];\n        push @sum, $item->[1];\n    }\n    return 0 if @sum;\n}","language":"perl"}
{"task_id":"MBPLP\/615","completion":"    my $result = map { $_.@_ } @_;\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/616","completion":"    my @_tuple = map { $_.modulo($test_tup2) }, $test_tup1;\n\n    print join \"\\n\", @_tuple;\n}","language":"perl"}
{"task_id":"MBPLP\/617","completion":"    my $x = 0;\n    my $y = 0;\n\n    if($d < $a || $d > $b) {\n        $x = $y = -1;\n    } else {\n        if($d == $a) {\n            $x = $y = 0;\n        } else {\n            $y = $x = -1;\n            $a = $d - $a;\n        }\n    }\n    $y += 1;\n    $y += $a;\n    $x += 1;\n    $x += $b;\n\n    return $y + $x;\n}","language":"perl"}
{"task_id":"MBPLP\/618","completion":"    return map { $nums1\/$nums2 }\n}","language":"perl"}
{"task_id":"MBPLP\/619","completion":"    my ($new_str) = '';\n\n    my $num_arr = split \/(\\d+)\/;\n\n    foreach my $num (@$num_arr)\n    {\n        push $new_str, substr($test_str, 0, intval($num)) . $num . substr($test_str, intval($num));\n    }\n\n    return $new_str;\n}","language":"perl"}
{"task_id":"MBPLP\/620","completion":"    my $max = 0;\n    my $sub = 0;\n\n    for my $i (0..$n) {\n        for my $j (0..$n) {\n            if (mod($i, $j) == 0) {\n                if ($a[$i] + $a[$j] > $max) {\n                    $max = $a[$i] + $a[$j];\n                    $sub = \"(\".$a[$i].\" + \".$a[$j].\")\";\n                }\n            }\n        }\n    }\n\n    return $sub;\n}","language":"perl"}
{"task_id":"MBPLP\/621","completion":"    $test_list = map { $_.num_to_string } @$test_list;\n    foreach my $str (@$test_list) {\n        if (defined $str) {\n            $str =~ s\/(\\d+)$\/$str . $K;\n            $str =~ s\/(^\\d+)\/$str;\n        }\n    }\n    return $test_list;\n}","language":"perl"}
{"task_id":"MBPLP\/622","completion":"    my %total, $mid;\n\n    for ($mid = floor($n \/ 2); $mid - 1 + 1; $mid++)\n    {\n        my $mid_el = $arr1[$mid];\n        my $mid2_el = $arr2[$mid];\n\n        if ($mid_el > $mid2_el)\n            $arr1[$mid - 1] = $arr1[$mid];\n        else\n            $arr2[$mid - 1] = $arr2[$mid];\n    }\n\n    $total = $mid;\n\n    for ($mid = 1; $mid + 1 <= $n; $mid++)\n    {\n        my $mid_el = $arr1[$mid];\n        my $mid2_el = $arr2[$mid];\n\n        if ($mid_el < $mid2_el)\n            $arr1[$mid] = ","language":"perl"}
{"task_id":"MBPLP\/623","completion":"    return $n == 1 ? $nums : map { $nums[$n - 2] ^ $nums[$n - 1] } @_;\n}","language":"perl"}
{"task_id":"MBPLP\/624","completion":"    return $string =~ s\/.\/upper\/;\n}","language":"perl"}
{"task_id":"MBPLP\/625","completion":"    my ($newFirst) = $newList;\n    my ($newLast) = $newList;\n\n    $newList = @_;\n    if ($newFirst == $newLast)\n    {\n        return $newList;\n    }\n\n    $newLast = $newLast->reverse();\n    $newFirst = $newFirst->reverse();\n    $newList = $newLast->join(' ', $newFirst);\n\n    return $newList;\n}","language":"perl"}
{"task_id":"MBPLP\/626","completion":"    if ($r <= 0) {\n        print -1;\n    }\n    else {\n        $r = (1\/2) * $r * $r;\n        print $r;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/627","completion":"    my $length = $end - $start + 1;\n    my $missing = 0;\n\n    if ($length == 0)\n    {\n        return $missing;\n    }\n\n    my @unique_elements = sort {\n        $array{$a} <=> $a\n    };\n\n    $missing = $start + 1;\n\n    for (@unique_elements)\n    {\n        if ($array[$missing] !== $missing)\n        {\n            return $missing;\n        }\n\n        $missing++;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/628","completion":"    $string =~ s\/ \/%20\/g;\n    return $string;\n}","language":"perl"}
{"task_id":"MBPLP\/629","completion":"    $list = shift;\n    #$list = split;\n    my @even = [];\n    my $i = 1;\n    foreach my $item (@$list) {\n        if ($i % 2 == 0) {\n            @even{$item} = $item;\n        }\n        $i++;\n    }\n    return @even;\n}","language":"perl"}
{"task_id":"MBPLP\/630","completion":"    my @coordinates;\n    for (@coordinates = each_pair $test_tup) {\n        my $coord = @$coordinates;\n        while (exists $coord && $coord[1] == $test_tup[1]) {\n            $coord = $coord[0];\n        }\n        $coordinates = $coord;\n        $coordinates = $coordinates [0] .. $test_tup[0];\n    }\n    return @coordinates;\n}","language":"perl"}
{"task_id":"MBPLP\/631","completion":"    my ($spaced) = $text =~ s\/ \/_ ;\n    return $spaced;\n}","language":"perl"}
{"task_id":"MBPLP\/632","completion":"    my @non_zero = ();\n    foreach my $num (@_):\n        if ($num != 0) {\n            @non_zero{$num} = 1;\n        }\n    my $res = @$num_list;\n    foreach my $num (@non_zero) {\n        $res{$res + 1} = 0;\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/633","completion":"    $sum = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($i != $j) {\n                $sum = $sum ^ $arr[$i] ^ $arr[$j];\n            }\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/634","completion":"    my ($sum) = 0;\n    for (@_) {\n        $sum = ($sum + $n ^ 4);\n        $n = $n \/ 2;\n    }\n    print $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/635","completion":"    my ($heap) = @_;\n\n    foreach (@$iterable) {\n        push @$heap, $iterable;\n        sort @$heap;\n        pop @$heap;\n    }\n\n    return @$heap;\n}","language":"perl"}
{"task_id":"MBPLP\/636","completion":"    if ($b * $b - 4 * $a * $c < 0) {\n        return \"No\";\n    }\n\n    my $x1 = ((-1) * $b + sqrt($b * $b - 4 * $a * $c)) \/ 2 \/ $a;\n    my $x2 = ((-1) * $b - sqrt($b * $b - 4 * $a * $c)) \/ 2 \/ $a;\n\n    if ($x1 == $x2) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/637","completion":"    if ($actual_cost < $sale_amount) {\n        return 0;\n    } else {\n        return $sale_amount - $actual_cost;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/638","completion":"    return $v + $t - 32;\n}","language":"perl"}
{"task_id":"MBPLP\/639","completion":"    # your code goes here\n    # --\n    # HINT: search for the first letter of the first name.\n    #      'search' is a Perl extension function.\n    # --\n    $sum = 0;\n    $i = 0;\n    while($i < count($sample_names))\n    {\n        $first_name = $sample_names[$i];\n        $first_letter = substr($first_name, 0, 1);\n        if($first_letter == $first_letter)\n        {\n            $sum = $sum + length($first_name);\n        }\n        $i = $i + 1;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/640","completion":"    my ($newItems) = @_;\n    foreach my $item (@_) {\n        $newItems =~ s\/\\(\\)|\\)\/g;\n        $newItems =~ s\/\\(\\)\/g;\n        $newItems =~ s\/\\)\/g;\n        push @_;\n        @_ = $newItems;\n    }\n    $newItems;\n}","language":"perl"}
{"task_id":"MBPLP\/641","completion":"    my ($base) = 10;\n    my ($num) = $base * $n;\n\n    my ($fact) = $num \/ ($base * $base);\n\n    return $fact + $num;\n}","language":"perl"}
{"task_id":"MBPLP\/643","completion":"    my ($beg, $end) = @_;\n    my ($start, $length) = ($beg, $end - $beg);\n    $start = $start - 1;\n    if ($beg == $end) {\n        $text = substr($text, $start - 1, $length);\n        if (substr($text, 0, 1) == \"z\") {\n            return \"Not matched!\";\n        }\n    }\n    return \"Found a match!\";\n}","language":"perl"}
{"task_id":"MBPLP\/644","completion":"    my @array = split \/\\s+\/ $input;\n    return join \" \" @reverse array @array(1 ~ $k);\n}","language":"perl"}
{"task_id":"MBPLP\/645","completion":"    return $test_list[($K - 1)].$K * $test_list[($K - 1)].$K;\n}","language":"perl"}
{"task_id":"MBPLP\/646","completion":"    return $K * ($N ** 3);\n}","language":"perl"}
{"task_id":"MBPLP\/647","completion":"    shift;\n    my $upper = grep \/(?<=[A-Z])\/;\n    foreach my $letter (split $text) {\n        push @_;\n        push $upper ? $letter : $letter . \" \";\n    }\n    return @_;\n}","language":"perl"}
{"task_id":"MBPLP\/648","completion":"    $arr = array_map(function ($n) {\n        if ($n % 2 != 0) {\n            return $n + 1;\n        } else {\n            return $n - 1;\n        }\n    }, $arr);\n    return $arr;\n}","language":"perl"}
{"task_id":"MBPLP\/649","completion":"    return map { $n - $m + 1 } $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/650","completion":"    if ($arr1 =~ \/(3+)\\1{3}\/)\n        or ($arr2 =~ \/(3+)\\1{3}\/)\n    {\n        return 0;\n    }\n    else\n    {\n        $count = 0;\n        for ($i = $n; $i <= $m; $i++)\n        {\n            if ($arr1[$i] != $arr2[$i])\n            {\n                $count++;\n            }\n        }\n        return $count == $n - $m ? 1 : 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/651","completion":"    my ($sub_tup1, $sub_tup2) = @_;\n    my $result = 0;\n\n    my $test_size = scalar(@_);\n    my $sub_size = scalar(@_);\n\n    if ($test_size < $sub_size) {\n        return $result;\n    }\n\n    for ($i = 0; $i < scalar($sub_size); $i++) {\n        if ($test_tup1[$i] != $sub_tup2[$i]) {\n            continue;\n        }\n        for ($j = $i+1; $j < scalar($sub_size); $j++) {\n            if ($test_tup2[$j] != $sub_tup2[$j]) {\n                break;\n            }\n            if ($j == scalar($sub_size) - 1) {\n                $result = 1;\n            }\n        }\n   ","language":"perl"}
{"task_id":"MBPLP\/652","completion":"    return map { $_ = @_; [ @_ ] } @test_list;\n}","language":"perl"}
{"task_id":"MBPLP\/653","completion":"    my $dic = { };\n\n    foreach my $key (@{ $l }) {\n        if ( $key =~ m\/^\\w+$\/) {\n            $dic[$key] = [ $l[@$key] ];\n        }\n    }\n\n    return $dic;\n}","language":"perl"}
{"task_id":"MBPLP\/654","completion":"    return $2 * abs ($l + $b);\n}","language":"perl"}
{"task_id":"MBPLP\/655","completion":"    my $sum = 0;\n    for my $i (1 1 2 3 4 5);\n        my $t = $i $i $i $i $i;\n        my $f = fifth_power($t);\n        my $b = $i $f;\n        if ($b != $n)\n        {\n            $sum = $sum + $b;\n        }\n    endfor;\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/656","completion":"    $min = $n;\n    $diff = $a - $b;\n    for ($i = 0; $i < $n - 1; $i++) {\n        $min = min($min, $diff);\n        $diff = abs($diff - $a[$i]);\n    }\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/657","completion":"    return ($n != 0) ? $n % 10 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/658","completion":"    my ($max, $count, $max_elem) = @_;\n\n    for ($i = 0; $i < count($list1); $i++) {\n        my ($elem) = $list1[$i];\n        my ($count1, $max_elem1) = @_;\n        if ($elem == $max_elem1) {\n            $count1 += 1;\n            if ($count1 > $count) {\n                $max = $elem;\n                $max_elem = $max1;\n            }\n        } else {\n            $count1 = 1;\n        }\n    }\n\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/659","completion":"    my @list = sort keys %$x;\n    my @list2 = sort keys %$x;\n    if (length %$x = 0) {\n        return $x;\n    } else {\n        return @list2;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/660","completion":"    my ($a1, $a2) = @_;\n\n    my $min = min($a1, $a2);\n    my $max = max($a1, $a2);\n    my $mid = ($min + $max) \/ 2;\n\n    if ($min <= $mid <= $max) {\n        return $a1 != $a2 ? $l1, $r1 : $l2, $r2;\n    }\n    else if ($mid < $min) {\n        return find_points($mid, $r2, $l2, $r1);\n    }\n    else {\n        return find_points($min, $mid, $l1, $r2);\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/661","completion":"    my @output = ();\n\n    my @arr = split \/, $arr;\n\n    if (my @arr = [1, 2, 3, 4, 5, 6, 7, 8]) {\n        return 0;\n    }\n\n    my @l1 = @arr;\n    my @l2 = @arr;\n    my @l3 = @arr;\n\n    for ($i = $n; $i > 0; $i--) {\n        @l1 = @l1 & [3..$i];\n        @l2 = @l2 & [2..$i];\n        @l3 = @l3 & [1..$i];\n    }\n\n    $n = 0;\n    $max = 0;\n    foreach (@l1) {\n        $n++;\n        $current = $n * 3 +","language":"perl"}
{"task_id":"MBPLP\/662","completion":"    #\n    # # # Your code begins here. # # #\n\n    # # # Your code ends here. # # #\n    #\n    # # # Don't touch these lines. # # #\n    local $\/;\n\n    foreach my $name (sort keys %$dict1) {\n        my @keys = @$name;\n        my @values = @$dict1{$name};\n        $_ = join(\"\\n\", @keys => @values);\n    }\n    return $_;\n}","language":"perl"}
{"task_id":"MBPLP\/663","completion":"    $n = $n <=> 0;\n    $x = $x <=> 0;\n    $y = $y <=> 0;\n    if ($n <=> $x <=> $y) {\n        $x = 1;\n    }\n    return $n ? $n : $x ? $x * $y : $y ? $x \/ $y : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/664","completion":"    my @numbers = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82","language":"perl"}
{"task_id":"MBPLP\/665","completion":"    return shift_last($num_list);\n}","language":"perl"}
{"task_id":"MBPLP\/666","completion":"    my ($count, $pos) = 0;\n    $pos = strpos($string, $char);\n    if ($pos =~ m\/^[a-zA-Z]\/) {\n        $count++;\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/667","completion":"    my @count = 0;\n    foreach my $vowel (sort keys %{$vowels})\n    {\n        if ($string =~ $vowel) {\n            ++@count;\n        }\n    }\n    return @count;\n}","language":"perl"}
{"task_id":"MBPLP\/668","completion":"    return $string;\n}","language":"perl"}
{"task_id":"MBPLP\/669","completion":"    ($Ip =~ m\/^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\/);\n    if ($Ip) {\n        print \"Valid IP address\";\n    } else {\n        print \"Invalid IP address\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/670","completion":"    my $num_i = 0;\n    my @numbers;\n    @numbers = $nums;\n    while ($num_i < $numbers) {\n        my $num = $numbers;\n        my $prev_num = $numbers;\n        if ($num_i > 0) {\n            $prev_num = $numbers;\n            $prev_num = $prev_num - 1;\n        }\n        if ($num < $prev_num) {\n            print 1;\n            return 1;\n        }\n        $num_i = $num_i + 1;\n    }\n    print 0;\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/671","completion":"    ($n) =~ s{~0}($n);\n    ($n) = $n;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/672","completion":"    return max($num1, $num2, $num3);\n}","language":"perl"}
{"task_id":"MBPLP\/673","completion":"    $sum = 0;\n    foreach my $i (keys %{$list}) {\n        $sum = $sum + ($i % 2 == 0 ? $i : -$i);\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/674","completion":"    my @words;\n    while (<STDIN>) {\n        chomp;\n        push @words, $string =~ s\/\\s*\\w*\\b\/g;\n    }\n    my $map = map { $_ => $_ } @words;\n    my $set = set { $_ => 1 } $map;\n    my $result = join \" \" @$set;\n    print $result;\n}","language":"perl"}
{"task_id":"MBPLP\/675","completion":"    if ($m <= $x && $n >= $y) {\n        $x + $y;\n    } else {\n        20;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/676","completion":"    chomp($text1);\n    my $alphanum_pattern = qr\/\\w\/;\n    return $text1 =~ s\/\\$alphanum_pattern\/ ;\n}","language":"perl"}
{"task_id":"MBPLP\/677","completion":"    if ($a + $b > $c and $a + $c > $b and $b + $c > $a)\n    {\n        if ($a == $b and $b == $c)\n            return 0;\n        if (($a == $b and $b != $c) or ($a == $c and $a != $b) or ($b == $c and $b != $a))\n            return 1;\n        return 2;\n    }\n    return 3;\n}","language":"perl"}
{"task_id":"MBPLP\/678","completion":"    my ($chars, $str2) = split \/\\s+\/;\n    my ($str3);\n\n    foreach $chars {\n        $str3 =~ s\/\\s+\/;\n    }\n\n    return $str3 . $str1;\n}","language":"perl"}
{"task_id":"MBPLP\/679","completion":"    my @keys = keys % $ditionary;\n    my $pos = 0;\n    for my $pos (@keys) {\n        if ($key eq $pos % 2) {\n            print $ditionary[$pos];\n        }\n        $pos += 1;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/680","completion":"    my ($prev, $inc) = 0;\n    for (@_){\n        $inc = $inc + ($prev == $nums[0]) ? $nums[1] - $prev : $nums[0] - $prev;\n        $prev = $nums[0];\n        $nums = $nums[1];\n    }\n    return $inc > 0;\n}","language":"perl"}
{"task_id":"MBPLP\/681","completion":"    my $p = 1;\n    while ($p <= $n) {\n        if ($n % $p == 0) {\n            return $p;\n        }\n        $p++;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/682","completion":"    map { $nums1 { $num * $nums2 } } @_;\n}","language":"perl"}
{"task_id":"MBPLP\/683","completion":"    $n = $n < 100 ? $n : 99;\n    my ($a, $b) = $n \/ 100 % 10, $n \/ 10 % 10;\n\n    return $n * $n == $a * $a + $b * $b ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/684","completion":"    my ($count, $max) = 0;\n    foreach my $char (0, 1, $max) {\n        if ($str =~ $char) {\n            ++$count;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/685","completion":"    $primes = [2, 3, 5, 7];\n    $sum = 0;\n\n    my $start = 1;\n    my $end = $n;\n\n    for ($start; $end - 1; $start++) {\n        for ($i = 0; $i < $primes->size(); $i++) {\n            if ($primes->array[$i] > $start) {\n                if ($primes->array[$i] + $start > $end) break;\n                $sum += $primes->array[$i] + $start;\n            }\n        }\n    }\n\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/686","completion":"    my ($freq) = {};\n    foreach my $element (@_) {\n        if ($freq{$element}) {\n            $freq{$element}++;\n        } else {\n            $freq{$element} = 1;\n        }\n    }\n    return $freq;\n}","language":"perl"}
{"task_id":"MBPLP\/687","completion":"    my $gcd;\n    if ($b = 0)\n        $gcd = $a;\n    else {\n        $gcd = $recur_gcd($b, $a mod $b);\n        $gcd = $gcd or $a mod $gcd;\n    }\n    return $gcd;\n}","language":"perl"}
{"task_id":"MBPLP\/688","completion":"    return $a + $b + \" \" . $a . $b;\n}","language":"perl"}
{"task_id":"MBPLP\/689","completion":"    my @jump = 0;\n    my @jumps = ();\n    for my $i (0 .. $arr - 1);\n    {\n        my ($jumps_made, $jump_remaining) = @_;\n        if ($jumps_made > $jump_remaining)\n        {\n            my $jumps_made = $jump_remaining;\n        }\n        $jumps_made += $i;\n        $jump_remaining -= $i;\n        if ($jumps_made >= $n)\n        {\n            my $jumps = ($jumps_made, $i);\n        }\n        if ($jump_remaining <= 0)\n        {\n            my $jumps = @jumps;\n        }\n        else\n        {\n            my $jumps = (@jumps, $jumps_made, $jump_remaining);\n        }\n        if ","language":"perl"}
{"task_id":"MBPLP\/690","completion":"    my ($mul_consecutive_nums_array) = @_;\n    # Make copy of original array\n    $mul_consecutive_nums_array = shift;\n    my @$mul_consecutive_nums_array = shift;\n\n    for my $i (0..$nums->length-1) {\n        $mul_consecutive_nums_array[$i] = $nums[$i] * $mul_consecutive_nums_array[$i+1];\n    }\n    return $mul_consecutive_nums_array;\n}","language":"perl"}
{"task_id":"MBPLP\/691","completion":"    my %groups;\n\n    $test_list = sort $test_list by $0, $1;\n\n    for my $tuple (@$test_list)\n    {\n        my ($k, $v) = @_;\n\n        if (not $groups[$k])\n            $groups[$k] = @$v;\n        else\n            $groups[$k] = join \",\", @$groups[$k], @$v;\n    }\n\n    return $groups;\n}","language":"perl"}
{"task_id":"MBPLP\/692","completion":"    print \"The last two digits in the factorial of $N is $N\\\\\\\\x02\";\n}","language":"perl"}
{"task_id":"MBPLP\/693","completion":"    my ($regex) = \"\/ {2,}\/g\";\n    $text1 =~ s\/\\s+\/ \/g;\n    return $text1;\n}","language":"perl"}
{"task_id":"MBPLP\/694","completion":"    my $result_list = 0;\n    my @keys = keys %keys;\n    my $test_dict_keys = keys %keys;\n    foreach my $key (keys) {\n        $result_list = if ($key ~= $test_dict_keys) {\n            $result_list += $test_dict[$key];\n            $test_dict_keys = $test_dict_keys %keys;\n        }\n    }\n    return $result_list;\n}","language":"perl"}
{"task_id":"MBPLP\/695","completion":"    return ($test_tup1 <=> $test_tup2);\n}","language":"perl"}
{"task_id":"MBPLP\/696","completion":"    my @result;\n    my $i = 0;\n\n    foreach my $e1 (@_list1) {\n        if ($i < @_list2.count()) {\n            my $e2 = @_list2[$i];\n            my $zipped = $e1 . $e2;\n            push @result, $zipped;\n        }\n        $i = $i + 1;\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/697","completion":"    map {\n        $array_nums = if (!exists $array_nums{$_}) then () else (map {\n                $_ == $_ % 2 and $_\n            }\n            $array_nums{$_});\n    }\n    return length $array_nums;\n}","language":"perl"}
{"task_id":"MBPLP\/698","completion":"    $ret_dict = {};\n\n    $test_dict = array_map { $ -> [$] };\n\n    $test_dict = array_map {\n        $test_dict -> [\n            array_filter { $ -> ( $[1] * $[2] ) }\n        ];\n    };\n\n    $test_dict = array_map {\n        $test_dict -> [\n            array_map { $ -> [ $[0], ( $[1] * $[2] ) ] }\n        ];\n    };\n\n    foreach my $item ( $test_dict ) {\n        $ret_dict = $item;\n    }\n    return $ret_dict;\n}","language":"perl"}
{"task_id":"MBPLP\/699","completion":"    $str2 =~ s\/[^01]\/01\/g;\n    return length($str2) - length($str1);\n}","language":"perl"}
{"task_id":"MBPLP\/700","completion":"    my $cnt = 0;\n    foreach my $item (@$li)\n    {\n        if ($item >= $min && $item <= $max)\n        {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}","language":"perl"}
{"task_id":"MBPLP\/701","completion":"    my $sum = 0;\n    my $sum_of_squares = 0;\n\n    for my $a (@$arr) {\n        $sum += $a;\n        $sum_of_squares += $a * $a;\n    }\n\n    if ($sum == 0) {\n        return -1;\n    }\n\n    return $sum \/ $sum_of_squares - 1;\n}","language":"perl"}
{"task_id":"MBPLP\/702","completion":"    my $count = 0;\n    for my $i (1..$n) {\n        if ($arr[$i] < $k)\n            $count = $count + 1;\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/703","completion":"    $d = sort { $d{$_} } keys %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}} %{$d{$_}}","language":"perl"}
{"task_id":"MBPLP\/704","completion":"    my @harmonic_sum = 0;\n    my @a = 1, $n;\n    for my $i (1, $n) {\n        $harmonic_sum = ($a($harmonic_sum) + 1) \/ ($i($a($harmonic_sum) + 1));\n    }\n    return $harmonic_sum;\n}","language":"perl"}
{"task_id":"MBPLP\/705","completion":"    return sort {\n        $list1 ||= sub sort_sublists,\n        $_\n    };\n}","language":"perl"}
{"task_id":"MBPLP\/706","completion":"    if ($n - $m + 1 < 0)\n        return 0;\n    for ($i = 0; $i <= $m; $i++)\n        if (in_array $arr1[$i], $arr2[$n - $m + 1 + $i])\n            return 1;\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/707","completion":"    my @bits;\n    for my $bit (1..$n) {\n        $bits[$bit]++;\n    }\n\n    my @max = sort keys %{$bits{$_}};\n\n    return $max{$_} + 1;\n}","language":"perl"}
{"task_id":"MBPLP\/708","completion":"    my ($characters, $result) = ( split \/, $string );\n\n    return ($result || []);\n}","language":"perl"}
{"task_id":"MBPLP\/709","completion":"    $result = [];\n    foreach ($test_list as $val) {\n        $count = 0;\n        foreach ($test_list as $key => $value) {\n            if ($key != $val and $key == $value) {\n                $count += 1;\n            }\n        }\n        $result[$val] = $count;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/710","completion":"    return [$test_tup[0], $test_tup[-1]];\n}","language":"perl"}
{"task_id":"MBPLP\/711","completion":"    $n =~ s\/(\\d+)(?=(\\d)\\2\\d|$)\/$1\/;\n    $n =~ s\/(\\d+)(?=(\\d)\\2)\/$1\/;\n    return $n ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/712","completion":"    my $new_list = [0];\n    foreach my $element (@$list1) {\n        if ( ! ( $element eq $new_list ) ) {\n            push @$new_list, $element;\n        }\n    }\n    return $new_list;\n}","language":"perl"}
{"task_id":"MBPLP\/713","completion":"    if (0..3) {\n        my ($i) = 0;\n        my ($valid_count) = 0;\n\n        while ($i < scalar $test_tup) {\n            if ($test_tup[$i] == 1) {\n                $valid_count++;\n            }\n\n            $i++;\n        }\n\n        if ($valid_count == scalar $test_tup) {\n            return scalar 1;\n        } else {\n            return scalar 0;\n        }\n    }\n    return scalar 0;\n}","language":"perl"}
{"task_id":"MBPLP\/714","completion":"    return $n - $n % $this->get_prime_factor(0)->length;\n}","language":"perl"}
{"task_id":"MBPLP\/715","completion":"    my ($list) = 0;\n\n    foreach $test_str {\n        push $list, @_;\n    }\n\n    return $list;\n}","language":"perl"}
{"task_id":"MBPLP\/716","completion":"    my ($b) = @_;\n    $a= ($a + $b) ;\n    $b = ($a - $b) ;\n    $a = $a + $b;\n    $a = $a - $b;\n    $b = $a - $b;\n    $a = $a + $b;\n    return $a;\n}","language":"perl"}
{"task_id":"MBPLP\/717","completion":"    my $sd = 0;\n    my @m = sort $data;\n\n    for (@m) {\n        $sd += (@m - mean($data)) * (@m - mean($data));\n    }\n\n    return sqrt($sd \/ count($data));\n}","language":"perl"}
{"task_id":"MBPLP\/718","completion":"    my @alternate = @_;\n\n    for my $x (@alternate) {\n        @alternate{$x} = $list1;\n        @alternate{$x}<>0;\n    }\n\n    my @final = @alternate{2} \\@alternate{0} \\@alternate{3} \\@alternate{4} \\@alternate{0} \\@alternate{2} \\@alternate{8} \\@alternate{3} \\@alternate{4} \\@alternate{2};\n}","language":"perl"}
{"task_id":"MBPLP\/719","completion":"    next unless (substr($text, 0, 2) == \"ab\") {\n        # There is no a that precedes b's, so return the string \"Not matched!\"\n        print \"Not matched!\";\n    } else {\n        # There is an a that precedes b's, so return the string \"Found a match!\"\n        print \"Found a match!\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/720","completion":"    $test_tup = map {\n        $test_tup = add_dict_to_tuple($test_tup, $test_dict);\n    };\n    return $test_tup;\n}","language":"perl"}
{"task_id":"MBPLP\/721","completion":"    my @paths = (my $result = 0);\n    for my $row (@N)\n    {\n        my @subpaths = (my $result = 0);\n        for my $col (@N)\n        {\n            my $n = $row * $col + $col + $row - 1;\n            $result += $cost[$n] * $N;\n            $subpaths[$col]++;\n        }\n        push @paths, $result \/ $subpaths;\n    }\n    return max @paths;\n}","language":"perl"}
{"task_id":"MBPLP\/722","completion":"    my %result = {};\n\n    # Iterate through every key (student name) in dictionary\n    for (@students.keys) {\n\n        # If student's height is at least given height (h) and width is at least given width (w)\n        if ($students[key]->[0] >= $h && $students[key]->[1] >= $w) {\n\n            # If the result dictionary doesn't have the student name yet\n            if (! defined (@result[$students[key]->[2]])) {\n\n                # Set the new key to the dictionary containing all values for this student\n                @result[$students[key]->[2]] = $students[key];\n            }\n\n            # If the result dictionary already has the key for this student\n            else {\n\n                # Add the height and width to the existing value for this student\n                @result[$students[key]->[2]]->[0] += $students[key]->[0];\n                @result[$students[","language":"perl"}
{"task_id":"MBPLP\/723","completion":"    return $nums1 @$nums2;\n}","language":"perl"}
{"task_id":"MBPLP\/724","completion":"    my ($power_base, $base_power) = ($power - 1) \/ $base;\n    return $base ** $power + $power_base ** $base_power * $base ** ($power - $base_power);\n}","language":"perl"}
{"task_id":"MBPLP\/725","completion":"    my ($text2) = @_;\n\n    $text2 =~ s\/\".*?\"\/g;\n\n    $text =~ s\/\\'.*?\\'\/\/g;\n\n    $text3 =~ s\/\\\".*?\"\/g;\n\n    return $text1, $text2, $text3;\n}","language":"perl"}
{"task_id":"MBPLP\/726","completion":"    my $res;\n\n    for my $i (0..$test_tup - 1) {\n        $res = $res [ $i ] * $test_tup [ $i + 1 ];\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/727","completion":"    $S =~ s\/\\W+\/ ;\n    return $S;\n}","language":"perl"}
{"task_id":"MBPLP\/728","completion":"    return map { $1 + $2 } join @ $lst1, $lst2;\n}","language":"perl"}
{"task_id":"MBPLP\/729","completion":"    $nums1 = map { $<=> $1 } $nums1;\n    $nums2 = map { $<=> $2 } $nums2;\n    return $nums1 + $nums2;\n}","language":"perl"}
{"task_id":"MBPLP\/730","completion":"    my ($out) = @_;\n    foreach my $num (@_){\n        if ( $out{$num} )\n        {\n            $out{$num} = undef;\n        }\n        else if ( $num != $out{$num} )\n        {\n            $out{$num} = $num;\n        }\n    }\n    return $out;\n}","language":"perl"}
{"task_id":"MBPLP\/731","completion":"    my $x1, $x2, $y1, $y2, $z1, $z2;\n    ($x1 = $r \/ 2) && ($x2 = $r \/ 2);\n    ($y1 = $h \/ 2) && ($y2 = $h \/ 2);\n    ($z1 = $r \/ 2) && ($z2 = $r \/ 2);\n    return ($x2 - $x1) * ($y2 - $y1) * ($z2 - $z1);\n}","language":"perl"}
{"task_id":"MBPLP\/732","completion":"    my @specialchar = split;\n    my @result = \"\";\n    for my $i (1..length($text)) {\n        if ($text[$i] =~ m{'[ ,.]'} ) {\n            push @result, $specialchar[$i] . \":\";\n        }\n        else {\n            push @result, $text[$i];\n        }\n    }\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/733","completion":"    my @i = 0;\n    my @j = 0;\n    for my $i (0..$A->size)\n    {\n        if($A[$i] == $x)\n        {\n            @i = $i;\n            @j = $i;\n            while($A[$i] == $x && $i < $A->size)\n                $i++;\n            @j = $i;\n        }\n    }\n    @i = @j;\n    return @i;\n}","language":"perl"}
{"task_id":"MBPLP\/734","completion":"    my $sum = 0;\n    for my $i (0 .. $n - 1);\n    {\n        for my $j (0 .. $n - 1);\n        {\n            if ($arr[$i] . $arr[$j] < 10)\n            {\n                $sum = $sum . $arr[$i] . $arr[$j];\n            }\n            else\n            {\n                push @$sum, ($arr[$i] * $arr[$j]);\n            }\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/735","completion":"    my $middle = $n >> 1;\n    $n ^= ($middle << 1) | $middle;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/736","completion":"    my ($i, $j) = @_;\n    if ($i == 0 || $x < $a[$i - 1])\n        return $i;\n    for (; $i < $a.count; $i++)\n        if ($x >= $a[$i])\n            break;\n    return $i;\n}","language":"perl"}
{"task_id":"MBPLP\/737","completion":"    my $re = qr\/\\w{1}\/;\n    if (preg_match($re, $string)) {\n        print \"Valid\";\n    }\n    else {\n        print \"Invalid\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/738","completion":"    return 1.0 \/ (1 + 1.0 \/ $n);\n}","language":"perl"}
{"task_id":"MBPLP\/739","completion":"    $x = 1;\n    $i = 1;\n    while ($i <= $n)\n    {\n        $x = ($x * $i) + $i;\n        $i = $i + 1;\n    }\n    $i = 0;\n    while ($i <= $n)\n    {\n        if (($i + 1) * ($i + 1) == $x)\n            return $i;\n        $i = $i + 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/740","completion":"    return map { my $t = shift;\n                  $t => $test_tup[1..$t]; } @_;\n}","language":"perl"}
{"task_id":"MBPLP\/741","completion":"    $s =~ s\/\\s\/g;\n    if ($s eq 1)\n    {\n        print \"1\";\n    }\n    else\n    {\n        print \"0\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/742","completion":"    return 0.5 * $side * $side;\n}","language":"perl"}
{"task_id":"MBPLP\/743","completion":"    my ($list2, $l, $n) = @_;\n    my $i, $j = 0;\n    $list2 = reverse($list2);\n    for (my $i = $m; $i < $n; $i++)\n    {\n        push $list2, $list1[$i];\n        $list1 = $list2;\n    }\n    return $list2;\n}","language":"perl"}
{"task_id":"MBPLP\/744","completion":"    my @undef_idx = 0;\n    foreach my $var ( @test_tup ) {\n        if ( defined $var ) {\n            undef_idx = undef_idx + 1;\n        }\n    }\n    return $undef_idx;\n}","language":"perl"}
{"task_id":"MBPLP\/745","completion":"    my @digits = 0;\n    my $minlen = 0;\n    my $maxlen = 0;\n\n    $minlen = $endnum - $startnum;\n    $maxlen = $startnum;\n\n    $digits = range(1, $minlen);\n\n    if ($startnum > $endnum) {\n        return 0;\n    }\n\n    for ($i = 0; $i < $digits; $i++) {\n        for ($j = $digits - 1; $j >= 0; $j--) {\n            if ($endnum % $digits[$j] != 0) {\n                break;\n            }\n        }\n        if ($j == -1) {\n            $digits[$i] = $endnum;\n            break;\n        } else {\n            $digits[$i] = $endnum % $","language":"perl"}
{"task_id":"MBPLP\/746","completion":"    if ($a < $r) {\n        return \"none\";\n    }\n    $d = $r - $a + 1;\n    return $d * $d;\n}","language":"perl"}
{"task_id":"MBPLP\/747","completion":"    my @m = map { $1 => $2 } split \/,\/, $X;\n    my @n = map { $1 => $2 } split \/,\/, $Y;\n    my @o = map { $1 => $2 } split \/,\/, $Z;\n    my @m1 = (map {\n        map {\n            join \"\",\n            map {\n                if ($1 < $2) {\n                    $2 = $2 $1;\n                }\n                return $2;\n            }\n        }\n        join \"\",\n        @m\n    }) join \"\", @n);\n\n    my @m2 = (map {\n        map {\n            join \"\",\n            map {\n                if ($1 < $2) {\n                    $2 = $2 $1;\n                }\n                return $2;\n            ","language":"perl"}
{"task_id":"MBPLP\/748","completion":"    my @s = split \/\\s+\/;\n    for my $i (@s) {\n        $str1 =~ s\/\\s[A-Z]\/\\s$i . ' ' . $str1;\n    }\n    return $str1;\n}","language":"perl"}
{"task_id":"MBPLP\/749","completion":"    my @nums = split \/\\s+\/;\n    return sort $nums_str {\n        my ($n) = split \/([\\+\\-])\/;\n        $n = @nums{$n};\n        return $n;\n    };\n}","language":"perl"}
{"task_id":"MBPLP\/750","completion":"    push $test_list, $test_tup;\n    $_ = $test_list;\n}","language":"perl"}
{"task_id":"MBPLP\/751","completion":"    my $flag = 0;\n    my $min = $arr[0];\n    for ($i = 1; $i < $arr; $i++)\n    {\n        if ($arr[$i] < $min)\n        {\n            $min = $arr[$i];\n            $flag = 1;\n        }\n    }\n    return $flag;\n}","language":"perl"}
{"task_id":"MBPLP\/752","completion":"    $n = ( 0 if $n < 2) $n;\n    $n = ( 1 if $n == 2) $n + 1;\n    $n = ( 2 if $n == 3) $n + 2;\n    $n = ( 4 if $n == 4) $n + 4;\n    $n = ( 7 if $n == 5) $n + 8;\n    $n = (12 if $n == 6) $n + 14;\n    $n = (21 if $n == 7) $n + 28;\n    $n = (34 if $n == 8) $n + 42;\n    $n = (55 if $n == 9) $n + 72;\n    $n = (89 if $","language":"perl"}
{"task_id":"MBPLP\/753","completion":"    return $test_list ? $test_list =\n        map { $a =>\n            my ($b, $c) = @_;\n            $c >= $K ? $a : ( $c - $K > 0 ? [ $a, $K - $c ] : undef );\n        } @$test_list;\n}","language":"perl"}
{"task_id":"MBPLP\/754","completion":"    my ($i1, $i2, $i3) = @_;\n    my ($l1_min, $l2_min, $l3_min) = @_;\n    my ($l1_max, $l2_max, $l3_max) = @_;\n    my ($i1_min, $i2_min, $i3_min) = @_;\n    my ($i1_max, $i2_max, $i3_max) = @_;\n    my $common_index;\n\n    if ($l1_max - $l1_min > $l2_max - $l2_min && $l1_max - $l1_min > $l3_max - $l3_min) {\n        if ($l2_max - $l2_min > $l3_max - $l3_min) {","language":"perl"}
{"task_id":"MBPLP\/755","completion":"    my @largest = @_;\n    my @second = @_;\n\n    foreach my $number (@numbers) {\n        if ($largest[0] < $number) {\n            $largest[0] = $number;\n            $largest[1]++;\n        }\n        if ($second[0] < $number && $second[0] != $largest[0]) {\n            $second[0] = $number;\n            $second[1] = $largest[1];\n        }\n    }\n\n    if ($largest[1] == 1) {\n        return \"none\";\n    } else {\n        return $largest[0];\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/756","completion":"    my $match = $text =~ s\/^a(.*?)b\/s;\n    print \"Found a match!\";\n}","language":"perl"}
{"task_id":"MBPLP\/757","completion":"    my ($a, $b) = (split \/,\\s*(?!.*,)\/, $test_list);\n\n    $a = sort { reverse $a } $a;\n    $b = sort { reverse $b } $b;\n\n    for my $a (split \/,\\s*(?!.*,)\/, $test_list)\n    {\n        my ($c, $d) = (split \/,\\s*(?!.*,)\/, $test_list);\n\n        $c = sort { reverse $c } $c;\n        $d = sort { reverse $d } $d;\n\n        for my $c (split \/,\\s*(?!.*,)\/, $test_list)\n        {\n            my ($e, $f) = (split \/,\\s*(?!.*,)\/, $test_list);\n\n            $e = sort { reverse $e } $e;\n","language":"perl"}
{"task_id":"MBPLP\/758","completion":"    my $list_num = 0;\n\n    foreach my $list2 (@$list1) {\n        my $list_num += 1;\n\n        # If this list is not duplicate, do nothing\n        if ($list2 =~ m\/^(.)([0-9]{2})\\1+$\/) {\n            continue;\n        }\n\n        # If this list is duplicated, do nothing\n        if ($list2 =~ m\/^(.)\\1+$\/) {\n            continue;\n        }\n\n        # If this list is not duplicate, add this list to another list\n        else {\n            my ($list1[$list_num]) = $list2;\n        }\n    }\n\n    return $list1;\n}","language":"perl"}
{"task_id":"MBPLP\/759","completion":"    return (0..2) == length $num ? $num : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/760","completion":"    my @seen;\n    for ( my $i = 0; $i < $n; $i++ ) {\n        if ( ! $seen{ $arr[$i] } ) {\n            $seen{ $arr[$i] } = 1;\n            @seen{ $arr[$i] } = 1;\n        }\n        else {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}","language":"perl"}
{"task_id":"MBPLP\/761","completion":"    if ($a >= 0) {\n        return $d \/ $a;\n    } else {\n        return \"none\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/762","completion":"    # Here goes your logic\n    my $m30 = 0;\n    my $year = 0;\n    my $month = 0;\n    my $day = 0;\n    my $result = 0;\n    my $current_month = date ('%m');\n    if ($current_month == 2)\n        $m30 = date ('%d');\n    $year = date ('%Y');\n    $month = date ('%m');\n    $day = date ('%d');\n    $result = $year-$month;\n    if ($result < 0)\n        $result = 30+$result;\n    else if ($result == 30)\n        $result = 0;\n    if ($m30 < $day)\n        $result = 0;\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/763","completion":"    my @diff = (0);\n    for (my $i = 1; $i < $n; $i++)\n    {\n        for (my $j = $i; $j < $n; $j++)\n        {\n            my $diff = $arr[$j] - $arr[$i];\n            if (defined $diff)\n                {\n                    if (min (@diff) < $diff)\n                        {\n                            $diff = min (@diff);\n                        }\n                }\n            else\n                {\n                    $diff = 0;\n                }\n            $diff++;\n        }\n    }\n    return $diff;\n}","language":"perl"}
{"task_id":"MBPLP\/764","completion":"    my $count = 0;\n    for my $ch (@$str) {\n        if ($ch =~ m\/\\d+\/) {\n            ++$count;\n        }\n    }\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/765","completion":"    return ($n * $n + $n) == $n * $n;\n}","language":"perl"}
{"task_id":"MBPLP\/766","completion":"    return (\n        map { $l1[$_] } # first element\n        map { $l1[$+1] } # next element\n        );\n}","language":"perl"}
{"task_id":"MBPLP\/767","completion":"    my %cache;\n    $cache[$sum] = 0;\n    foreach (my $i = 1; $i < $n; $i++) {\n        foreach (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr[$i] + $arr[$j] == $sum) {\n                $cache[$sum]++;\n            }\n        }\n    }\n    return $cache[$sum];\n}","language":"perl"}
{"task_id":"MBPLP\/768","completion":"    # If the number is even, return 1;\n    # Else, return 0;\n    return ($x & 1) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/769","completion":"    my $res;\n    $res = (0..($li2 - 1));\n    for (@{$li1 - 1} ; @{$li1 - 1} + 1 < @{$li1} ; @{$li1 - 1}++) {\n        $res = $res \\ ($li2 == @{$li1} ? ($li1 - 1) : 1);\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/770","completion":"    my ($sum) = 0;\n    my ($pow) = 1;\n    for (@_){\n        $sum = $sum + ($pow * $pow);\n        $pow = $pow * $n;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/771","completion":"    $exp =~ s{\n        } {\n            \/\/ $exp is balanced\n            $exp =~ s{\n                \\(\\) {\n                    $exp =~ s{\n                        }{\n                            \/\/ $exp is balanced\n                            $exp =~ s{\n                                \\[ {\n                                    $exp =~ s{\n                                        }{\n                                            \/\/ $exp is balanced\n                                            return 1;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }","language":"perl"}
{"task_id":"MBPLP\/772","completion":"    return $test_str =~ s\/[^\\s]*\\w{$K}\/g;\n}","language":"perl"}
{"task_id":"MBPLP\/773","completion":"    my $pos = 0;\n    my $occurrence = 0;\n\n    $pos =~ m{$pattern} {\n        my $occurrence = 1;\n        ($text .=~ m{$pattern} ?) &&\n            ($occurrence = @_ + 1) &&\n            ($pos = @_ + $pattern.size);\n    }\n\n    return [$text, $pos, $occurrence];\n}","language":"perl"}
{"task_id":"MBPLP\/774","completion":"    return \"Valid Email\" if \/^(\\w|\\.|\\_|\\-|\\.|\\_)+[@](\\w|\\_|\\-|\\.)+[.]\\w{2,3}$\/.test($email) else \"Invalid Email\";\n}","language":"perl"}
{"task_id":"MBPLP\/775","completion":"    my %odd = 0;\n\n    $nums[odd] = $nums[odd] if ($nums[odd] % 2 != 0) then\n        $odd = $odd + 1;\n    else\n        my %odd = $odd + 1;\n\n    $odd;\n}","language":"perl"}
{"task_id":"MBPLP\/776","completion":"    my $letters = @_;\n    my @letters_vowels_count = ();\n\n    for (@letters) {\n        if ($letters =~ \/[aeiou]\/) {\n            $letters_vowels_count = $letters_vowels_count . $letters;\n        }\n    }\n\n    $test_str =~ s\/^((?!^)(?=[aeiou]))\/&$1\/;\n    $test_str =~ s\/\\b([aeiou]{2,})\\b\/;\n    $test_str =~ s\/\\b((?:[aeiou]{1,}){2,})\\b\/;\n    $test_str =~ s\/\\b((?:[aeiou]{2,}){2,})\\b\/;\n    $test_str =~ s\/\\b((?:[aeiou]{3,}){2,})\\b\/;\n    $test_str =~ s\/\\b((?:[aei","language":"perl"}
{"task_id":"MBPLP\/777","completion":"    my $sum;\n    foreach my $num (array_filter { $_ != $_ } $arr)\n    {\n        if ($num == $arr[0])\n        {\n            $sum = 0;\n        }\n        else\n        {\n            if (count($arr) - count($num) >= 0)\n            {\n                $sum = $sum + $num - $arr[0];\n            }\n        }\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/778","completion":"    my ($result1) = [];\n\n    my ($result2) = [];\n    $result2->push $list1;\n\n    my ($result3) = [];\n    $result3->push $result2;\n\n    for (my $result4 = $result3-><>[0]; $result4-><>[0]; $result4++) {\n        my ($result5) = [];\n        $result5->push $result4-><>[0];\n\n        if (defined $result4-><>[1]) {\n            $result5->push $result4-><>[1];\n        }\n        $result4-><>[1] = $result5;\n    }\n\n    return $result3;\n}","language":"perl"}
{"task_id":"MBPLP\/779","completion":"    my @unique_lists = map { { $x -> $x } } keys % $list1;\n\n    my $count = 0;\n    my @lists = (\n        sort {\n            $list1 -> {\n                my @sublists = (\n                    sort keys % $list1 -> map { { $x -> $x } } keys % $list1 -> keys % $list1\n                );\n                foreach my $sublist (@sublists) {\n                    if ( @unique_lists { $sublist } ) {\n                        @unique_lists { $sublist } = 0;\n                        $count += 1;\n                    }\n                }\n            }\n        }\n    );\n\n    print @lists { $list1 => $count };\n}","language":"perl"}
{"task_id":"MBPLP\/780","completion":"    my @result = [];\n    my @i = 0;\n\n    while (@i < $test_list->size()) {\n        my @current = $test_list->at(@i);\n\n        my @i2 = @i + 1;\n        while (@i2 < $test_list->size()) {\n            my @current2 = $test_list->at(@i2);\n\n            my $tuple = { $current, $current2 };\n\n            if (!exists($result, $tuple)) {\n                $result->push($tuple);\n            }\n            ++$i2;\n        }\n        ++$i;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/781","completion":"    if ( $n == 1 ) return \"Even\";\n    return ( $n % 2 == 0 ) ? \"Even\" : \"Odd\";\n}","language":"perl"}
{"task_id":"MBPLP\/782","completion":"    my @result;\n    foreach my $x (@$arr) {\n        if ($x % 2) {\n            $result[] = $x;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/783","completion":"    my ($min, $max) = @_;\n\n    my $ratio = ($max - $min) \/ 255;\n    my $c = (my $r - $min) \/ $ratio;\n    my $m = (my $g - $min) \/ $ratio;\n    my $y = (my $b - $min) \/ $ratio;\n\n    $c = min($c, 1);\n    $m = min($m, 1);\n    $y = min($y, 1);\n    $c = max($c, 0);\n    $m = max($m, 0);\n    $y = max($y, 0);\n\n    my $h = floor($c * 360 + my $m * 60 + my $y * 6);\n    my $s = $c * 100 \/ $ratio","language":"perl"}
{"task_id":"MBPLP\/784","completion":"    #if($list1) #t\n    {\n        my ($total, $even, $odd) = 0;\n        foreach my $i (0, $list1) {\n            $total += $i;\n            if ($i % 2) {\n                $odd++;\n            } else {\n                $even++;\n            }\n        }\n        return $total * $even * $odd;\n    }\n    #endif\n}","language":"perl"}
{"task_id":"MBPLP\/785","completion":"    my @tuple = @();\n    for my $x (@_) {\n        my $n = 0;\n        for my $c (string) {\n            $n = ($n << 4) if (is_alpha($c)) $c;\n            $n = ($n << 4) if (is_digit($c)) $c;\n        }\n        push @tuple, $n;\n    }\n    return @tuple;\n}","language":"perl"}
{"task_id":"MBPLP\/786","completion":"    shift $a, +1 if $a[0] > $x;\n    $a[0] = $x;\n    return $a[0];\n}","language":"perl"}
{"task_id":"MBPLP\/787","completion":"    return $text ~ \/a[\\w]{3}\/;\n}","language":"perl"}
{"task_id":"MBPLP\/788","completion":"    # create a new tuple from $test_str and $test_list\n    my $tuple = map { $a => $b => $a . $b } $test_str $test_list;\n\n    return $tuple;\n}","language":"perl"}
{"task_id":"MBPLP\/789","completion":"    my $perimeter = 0;\n\n    for my $i (1, $s);\n        $perimeter = $perimeter + $i * 2 + (i - 1) * $l;\n\n    return $perimeter;\n}","language":"perl"}
{"task_id":"MBPLP\/790","completion":"    my ($even_nums) = 0;\n\n    $even_nums = 0;\n    $count = 0;\n\n    foreach my $index (1 .. $nums) {\n        if ($index % 2 == 0) {\n            $even_nums += $index;\n        }\n    }\n\n    return $even_nums;\n}","language":"perl"}
{"task_id":"MBPLP\/791","completion":"    my %result = [];\n    my %nesting_depth = 0;\n    for my $item (@_) {\n        $item = split(',', $item, 2);\n        if ($item =~ \/\\[(\\d+)\\]\/) {\n            $nesting_depth = $1;\n            $item = split(',', $item[1]);\n        }\n        elseif ($nesting_depth > 0) {\n            if (count($test_tup) - $nesting_depth) {\n                my %new_item = $item;\n                $test_tup = $test_tup [0..-$nesting_depth + 1] [0..-$nesting_depth + 1];\n                $item = join(' ,', $test_tup, $new_item);\n            }\n            else {\n                $test_tup = $item;\n            }\n        ","language":"perl"}
{"task_id":"MBPLP\/792","completion":"    my @$count = 0;\n    for (@$input_list) {\n        my ($count_list) = $count_list + 1;\n    }\n    print $count_list;\n}","language":"perl"}
{"task_id":"MBPLP\/793","completion":"    my ($i, $j, $res) = (0, 0, 0);\n    for ($i = 0; $i < $arr->length; $i++) {\n        if ($arr[$i] > $x) {\n            if ($res < $i - 1) {\n                $res = $i - 1;\n            }\n        }\n    }\n\n    $res++;\n\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/794","completion":"    chomp($text);\n    if (substr($text, -3) = \"aab\")\n        {\n            return \"Found a match!\";\n        }\n    return \"Not matched!\";\n}","language":"perl"}
{"task_id":"MBPLP\/795","completion":"    $heap = (Heap::new);\n    foreach $items {\n        $heap->push($items->name, $items->price);\n    }\n    $array = [];\n    while ($heap->size() > 0) {\n        $array[] = $heap->pop();\n        $n--;\n        if ($n == 0) {\n            break;\n        }\n    }\n    return $array;\n}","language":"perl"}
{"task_id":"MBPLP\/796","completion":"    my $sum = 0;\n    foreach my $value (keys %$dict) {\n        $sum = $sum + $dict[$value];\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/797","completion":"    my ($sum) = 0;\n\n    if ($r > $l)\n    {\n        for ($i = $l; $i <= $r; $i += 2)\n        {\n            $sum += $i;\n        }\n    }\n    else\n    {\n        for ($i = $l; $i >= $r; $i -= 2)\n        {\n            $sum += $i;\n        }\n    }\n\n    print $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/798","completion":"    return $arr->join(0);\n}","language":"perl"}
{"task_id":"MBPLP\/799","completion":"    $d = $d % $n;\n    $n = $n \/ 10;\n    print \"$n\\n$d\\n\";\n}","language":"perl"}
{"task_id":"MBPLP\/800","completion":"    my $result = '';\n\n    while ($text =~ m\/^[ \\t\\n\\r]+$\/) {\n        $result .= $text;\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/801","completion":"    my $count = 0;\n\n    $count = ( ($x == $y && $y == $z) ||\n                ($x != $y && $x != $z && $y != $z) )\n            ? $count+1\n            : 0;\n\n    return $count;\n}","language":"perl"}
{"task_id":"MBPLP\/802","completion":"    my ($rotations, $sorted) = @_;\n\n    my $rotations_count = 0;\n\n    # Make the array sorted\n    $rotations = sort $arr {\n        $a <=> $b\n    };\n\n    # Count the number of rotations\n    for ($i = 0; $i < $n; $i++) {\n        $rotations_count += ($arr[$i] - $rotations[$i]) >= 0 ? 1 : 0;\n    }\n\n    return $rotations_count;\n}","language":"perl"}
{"task_id":"MBPLP\/803","completion":"    return $n && $n == $n*$n;\n}","language":"perl"}
{"task_id":"MBPLP\/804","completion":"    $prod = 0;\n\n    $arr = map { $_ } $arr;\n\n    foreach ($arr as $num) {\n        $prod += $num;\n    }\n\n    return $n == $prod % 2 ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/805","completion":"    my ($max_sum) = 0;\n    my @max_sum_list_indexes = [];\n    for my $list (@$lists) {\n        my ($sum) = 0;\n        my @$list_indexes = [];\n        my @$list_len = @$list->count;\n        for my $index (1..$list_len) {\n            $sum = $sum + $list->{$index};\n            $list_indexes = @$list_indexes { $list->{$index} };\n        }\n        $max_sum = $max_sum { $sum > $max_sum->{$list_len} ? $sum : $max_sum->{$list_len} };\n        $max_sum_list_indexes = $max_sum_list_indexes { $list_indexes };\n    }\n    return [\n        $max_sum","language":"perl"}
{"task_id":"MBPLP\/806","completion":"    my ($run_count, $uppercase_count, $total_run) = 0;\n    foreach my $c (split $test_str, \" \") {\n        if ($c =~ \/([A-Z])\/) {\n            ++$uppercase_count;\n        }\n        ++$run_count;\n    }\n    return $total_run = $uppercase_count > 0 ? $run_count : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/807","completion":"    $nums =~ s\/\\s*([1-9]\\d*)\\s*\/\\1\/g;\n    $nums = sort { $1 } $nums;\n    return $nums{-1} if $nums{-1} ~ s\/\\s*1\\s*\/1\/g;\n}","language":"perl"}
{"task_id":"MBPLP\/808","completion":"    my ($flag, @_);\n\n    $flag = 0;\n    my @_ = split \/\\s+\/;\n    foreach my $k (@_) {\n        if ($test_tup =~ \/$k\/) {\n            $flag = 1;\n            break;\n        }\n    }\n    print $flag;\n}","language":"perl"}
{"task_id":"MBPLP\/809","completion":"    my @$pos_smaller_tup2 = 0;\n    my $index = 0;\n    for my $x (@$test_tup1) {\n        if ($x < @$test_tup2[$index]) {\n            push @$pos_smaller_tup2, $index;\n        }\n        $index += 1;\n    }\n    if (@$pos_smaller_tup2) {\n        print 1;\n    } else {\n        print 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/810","completion":"    my %counts;\n\n    {\n        my %current_count = 1;\n        my $result;\n\n        for my $i = 0; $i < $a; $i++\n        {\n            if ($counts{$current_count} < $c)\n            {\n                $result{$current_count} = $d;\n                $counts{$current_count}++;\n            }\n            else\n            {\n                $result{$current_count} = $b;\n                $counts{$current_count} = 1;\n            }\n            current_count++;\n        }\n        return $result;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/811","completion":"    if ($test_list1 =~ m\/^(\\[.*\\])\/) or ($test_list2 =~ m\/^(\\[.*\\])\/) or ($test_list1 =~ m\/^(\\(.*\\)\\s*\\:\\s*\\[.*\\])\/) or ($test_list2 =~ m\/^(\\(.*\\)\\s*\\:\\s*\\[.*\\])\/)\n    {\n        return 0;\n    }\n    else\n    {\n        return 1;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/812","completion":"    my ($road) = $street;\n    $road =~ s\/(\\d+)\/ $1 Rd.\/;\n    return $road;\n}","language":"perl"}
{"task_id":"MBPLP\/813","completion":"    my $length = length($str1);\n    print $length;\n}","language":"perl"}
{"task_id":"MBPLP\/814","completion":"    ($p - $q) * ($p + $q) \/ 2;\n}","language":"perl"}
{"task_id":"MBPLP\/815","completion":"    my ($k, $len) = @_;\n\n    my ($left, $right) = (0, $len - 1);\n    while ($right >= $left) {\n        $k = 0;\n        while ($right >= $left) {\n            if ($arr[$left] & $arr[$right]) {\n                swap $arr[$left], $arr[$right];\n                $k++;\n            }\n            $right--;\n        }\n        $left += $k;\n    }\n    return $arr;\n}","language":"perl"}
{"task_id":"MBPLP\/816","completion":"    $test_tup = join \"; \", map { $0 } split \" ; \" ;\n    return (split $test_tup, \"; \");\n}","language":"perl"}
{"task_id":"MBPLP\/817","completion":"    $nums = @_;\n    return grep split $nums;\n}","language":"perl"}
{"task_id":"MBPLP\/818","completion":"    $str =~ s\/\\W\/ \/\/g;\n    return $str;\n}","language":"perl"}
{"task_id":"MBPLP\/819","completion":"    my ($results) = @_;\n\n    foreach my $list (@$lists) {\n        my $len = $list;\n        my $list_string = $list->to_s;\n        my $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            if ($list_string[($i + 1)] == $list_string[($i)]) {\n                $count++;\n            }\n        }\n        $results[0][$list] = $count;\n        $results[1][$list] = $len - $count;\n    }\n\n    return $results;\n}","language":"perl"}
{"task_id":"MBPLP\/820","completion":"    my $result;\n    if ($monthnum1 eq 2) {\n        $result = 1;\n    } elseif ($monthnum1 eq 1) {\n        $result = 0;\n    } else {\n        $result = 0;\n    }\n    print $result;\n}","language":"perl"}
{"task_id":"MBPLP\/821","completion":"    return join(\",\", map { $_-> $_.$0 } keys %{$dict1, $dict2});\n}","language":"perl"}
{"task_id":"MBPLP\/822","completion":"    my $min = $p < 5 ? $p : 5;\n    return $min - $p;\n}","language":"perl"}
{"task_id":"MBPLP\/823","completion":"    # $string =~ s\/\\S+$sample\/g;\n    my $result = $string =~ s\/(^| )$sample( |$)\/g;\n    print $result unless $result;\n}","language":"perl"}
{"task_id":"MBPLP\/824","completion":"    $l = join {}, $l, '';\n    $l = substr {$_}, 0, length $l;\n    $l = split {s\/\\s\/}, $l;\n    return @_;\n}","language":"perl"}
{"task_id":"MBPLP\/825","completion":"    return $nums[$list_index];\n}","language":"perl"}
{"task_id":"MBPLP\/826","completion":"    my @output = ();\n    if ($a + $b > $c and $b + $c > $a and $a + $c > $b)\n        @output{ 'Right-angled Triangle' }\n    elsif ($a + $b > $c and $b + $c > $a and $a + $c > $b)\n        @output{ 'Acute-angled Triangle' }\n    elsif ($a + $b > $c and $b + $c > $a and $a + $c > $b)\n        @output{ 'Obtuse-angled Triangle' }\n    else\n        @output{ 'I do not know the type of triangle' }\n    return @output;\n}","language":"perl"}
{"task_id":"MBPLP\/827","completion":"    if (defined $list1) {\n        return $list1[$C]->reduce(0, $x += $x) - $list1[0][$C];\n    }\n    else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/828","completion":"    my @array = split \/\\W+\/ $string;\n    my $alpha_dig_spl = 0;\n    my $alpha = 0;\n    my $digit = 0;\n    my $special = 0;\n    for my $i (0..length $array)\n    {\n        $array[$i] =~ s\/\\W+\/ '';\n        if ($array[$i] =~ s\/\\d+\/ '')\n            $digit++;\n        if ($array[$i] =~ s\/\\W+\/ '')\n            $alpha_dig_spl++;\n        if ($array[$i] =~ s\/\\s+\/ '')\n            $special++;\n    }\n    return ($alpha_dig_spl + $alpha + $digit + $special);\n}","language":"perl"}
{"task_id":"MBPLP\/829","completion":"    my @output = ();\n\n    my $map = (\n        \"a\" => \"a\",\n        \"b\" => \"b\",\n        \"c\" => \"c\",\n        \"d\" => \"d\",\n        \"e\" => \"e\",\n        \"f\" => \"f\",\n        \"g\" => \"g\",\n        \"h\" => \"h\",\n        \"i\" => \"i\",\n        \"j\" => \"j\",\n        \"k\" => \"k\",\n        \"l\" => \"l\",\n        \"m\" => \"m\",\n        \"n\" => \"n\",\n        \"o\" => \"o\",\n        \"p\" => \"p\",\n        \"q\" => \"q\",\n        \"r\" => \"r\",\n        \"s\" => \"s\",\n        \"t\" => ","language":"perl"}
{"task_id":"MBPLP\/830","completion":"    return sprintf(\"%.%df\", floor($a + 0.5 * $digits));\n}","language":"perl"}
{"task_id":"MBPLP\/831","completion":"    my $result = 0;\n    foreach my $element (@$arr) {\n        if ($element == $n) {\n            ++$result;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/832","completion":"    return sub(\"[^0-9]*([0-9]+)[^0-9]*\", \"$1\", $input);\n}","language":"perl"}
{"task_id":"MBPLP\/833","completion":"    my @keys = ();\n\n    for my $key (@$dict) {\n        $keys{$key} = $key;\n    }\n\n    return $keys;\n}","language":"perl"}
{"task_id":"MBPLP\/834","completion":"    my ($matrix) = @_;\n\n    for my $r (0..$n) {\n        for my $c (0..$n) {\n            $matrix[$r][$c] = $r + $c + 1;\n        }\n    }\n\n    return $matrix;\n}","language":"perl"}
{"task_id":"MBPLP\/835","completion":"    return $y2 - $y1 \/ $x2 - $x1;\n}","language":"perl"}
{"task_id":"MBPLP\/836","completion":"    $max = 0;\n    $max += $a[$a+$size];\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/837","completion":"    # your code goes here\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/838","completion":"    my @swaps = 0;\n    if ($s1 == $s2) {\n        print 0;\n        return;\n    }\n    if ($s1 < $s2) {\n        while ($s1 < $s2) {\n            print 1;\n            $s1++;\n            $swaps++;\n        }\n        print 0;\n        return;\n    }\n    if ($s1 > $s2) {\n        while ($s1 > $s2) {\n            print 1;\n            $s1--;\n            $swaps++;\n        }\n        print 0;\n        return;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/839","completion":"    my @items = @_;\n    return [ @items ];\n}","language":"perl"}
{"task_id":"MBPLP\/840","completion":"    if ($a * $a + $b * $b - $c * $c)\n    {\n        if ($a < 0 && $b * $b < 0 && $c * $c < 0)\n            return \"Yes\";\n        return \"No\";\n    }\n    return \"No\";\n}","language":"perl"}
{"task_id":"MBPLP\/841","completion":"    my @arr_copy = $arr;\n    my @arr_inv_copy = $arr;\n    my ($left, $right) = ($n, $n);\n\n    while ($left--) {\n        $arr_copy[$left] = $arr_copy[$left + 1];\n    }\n\n    while ($right--) {\n        $arr_inv_copy[$right] = $arr_inv_copy[$right - 1];\n    }\n\n    my @result = [];\n\n    for ($i = 0; $i < $n; $i++) {\n        if ($arr_copy[$i] > $arr_copy[$i + 1]) {\n            result[] = $i;\n        }\n    }\n\n    for ($i = 0; $i < result.length; $i++) {\n        $arr_inv_copy[$i] = $arr_inv_copy","language":"perl"}
{"task_id":"MBPLP\/842","completion":"    my ($index, $odd_count) = 0;\n\n    for (@arr_size)\n    {\n        if ($arr[$index] % 2 == 1)\n        {\n            ++$odd_count;\n        }\n        ++$index;\n    }\n\n    return $odd_count;\n}","language":"perl"}
{"task_id":"MBPLP\/843","completion":"    my ($ugly, $heap) = @_;\n\n    $heap = shift_heap_to_right($heap);\n    foreach my $prime (@primes) {\n        push_heap($heap, $prime);\n    }\n\n    $ugly = shift_heap_to_left($ugly);\n    $ugly = shift_heap_to_left($ugly);\n    $ugly = shift_heap_to_left($ugly);\n\n    my $ugly_index = 1;\n    my $ugly_2_index = 2;\n    my $ugly_3_index = 3;\n    my $ugly_4_index = 4;\n\n    # while the $ugly's length is less than $n\n    while ($ugly_index <= $n) {\n        # if the $ugly's length is 1\n        if ($ugly_index == 1) {\n            $ug","language":"perl"}
{"task_id":"MBPLP\/844","completion":"    my @array = ();\n    if($n <= 0) {\n        print 0;\n    } else {\n        for($i = 1; $i <= $n; ++$i) {\n            my $i = $i;\n            @array = (@array == () ? $i : @array . \" \" . $i);\n        }\n        my $kth = $k - 1;\n        if(($kth + 1) % 2 == 0) {\n            print @array . \" \" . $kth . \" . \" . $kth . \" . \" . $kth;\n        } else {\n            print @array . \" \" . $kth;\n        }\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/845","completion":"    return length($n . \"\");\n}","language":"perl"}
{"task_id":"MBPLP\/846","completion":"    my ($min, $result, $sum) = @_;\n\n    for (my $i = 0; $i < $n; $i++) {\n        my $ar = $arr[$i];\n        my $dep = $dep[$i];\n        if ($sum + $ar > $dep) {\n            $sum += $ar;\n            $result = $i + 1;\n        } else {\n            $sum = 0;\n            $result = -1;\n        }\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/847","completion":"    return [$xs];\n}","language":"perl"}
{"task_id":"MBPLP\/848","completion":"    return $base1 + $base2 + $height;\n}","language":"perl"}
{"task_id":"MBPLP\/849","completion":"    my ($a) = 1;\n    my ($b) = $N;\n    my ($c) = 0;\n    # If a number is a prime number, its divisors are 1, 2, 3, and 5.\n    # All prime numbers except 2 are odd, and thus, odd divisors are not counted.\n    if (5 * $a * $a - $a * $a + $a) = $N\n        {\n            $c = $c + $b;\n        }\n    if ($a <= 2 || $N % $a == 0)\n        {\n            # If a number is even and is not a prime, its divisors are 2, 3, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 27, 28, 30","language":"perl"}
{"task_id":"MBPLP\/850","completion":"    $a = abs($a);\n    $b = abs($b);\n    $c = abs($c);\n    if ($a + $b > $c) {\n        if ($b + $c > $a) {\n            if ($c + $a > $b) {\n                $a = $a + $b + $c;\n                $b = $a - $b;\n                $c = $a - $c;\n                $a = $a - $b;\n                return $a > 0;\n            } else {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n    } else {\n        return 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/851","completion":"    my $divisors = @_;\n    my %s;\n\n    for my $i (1, $N);\n    next unless $i = 0;\n    {\n        my $number = $i;\n        for my $d (1, $N);\n        next unless $d = 0;\n        {\n            if ($number == $d && $number != $N) {\n                my $div = $d + $N;\n                my $div_inverse = $N \/ $d;\n                my $divisors[$i] = $div_inverse;\n                $Sum += $div_inverse;\n            }\n        }\n    }\n    return $Sum;\n}","language":"perl"}
{"task_id":"MBPLP\/852","completion":"    my @result = ();\n\n    for my $x (@_) {\n        if ($x > 0) {\n            @result = (@result <=> $x) ? @result : $x;\n        }\n    }\n\n    return @result;\n}","language":"perl"}
{"task_id":"MBPLP\/853","completion":"    my $result = 0;\n    $result += $n \/ 2 * $n;\n    for ($i = 3; $i <= $n; $i += 2)\n    {\n        if ($i * $i > $n)\n            break;\n        else\n            $result += $i * $i;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/854","completion":"    my ($heap) = ();\n\n    for (@rawheap) {\n        push $heap, $rawheap;\n    }\n\n    return $heap;\n}","language":"perl"}
{"task_id":"MBPLP\/855","completion":"    print $x =~ s\/([0-9]+)\/$1\/; # replace the regular expression with your expression.\n    return ($x == $x & 1);\n}","language":"perl"}
{"task_id":"MBPLP\/856","completion":"    $min = 1;\n    my @swaps;\n\n    for my $i (0; $i < $n-1; $i++) {\n        for my $j (2; $j < $n; $j++) {\n            if ($arr[$i] === $arr[$j]) {\n                for my $k (0; $k < $j; $k++) {\n                    if ($arr[$j] === $arr[$k]) {\n                        $min = $k < $min ? $k : $min;\n                    }\n                }\n            }\n        }\n    }\n\n    return $min;\n}","language":"perl"}
{"task_id":"MBPLP\/857","completion":"    map {\n        my $str = $list1 . \"\\n\";\n        $str =~ s\/\\s+\/  \"\\t\";\n        $str =~ s\/\\s+\/  \"\";\n        push @_ $str;\n    }\n    return $@_;\n}","language":"perl"}
{"task_id":"MBPLP\/858","completion":"    my ($number_of_lists) = 0;\n    foreach my $item (@$input_list)\n    {\n        if ($item->constructor === \\y {$_})\n        {\n            $number_of_lists += 1;\n        }\n    }\n    return $number_of_lists * $number_of_lists;\n}","language":"perl"}
{"task_id":"MBPLP\/859","completion":"    my ($result, @$sub_lists) = @_;\n\n    # If the list is empty, return the empty list\n    # Else\n    if (defined $my_list) {\n\n        # If the last element of the list is the same as the first element\n        # of the next one, add it to the result list.\n        # This way we can form sublists by consecutive values\n        if ($my_list[0] == $my_list[1]) {\n            @$sub_lists = @$sub_lists ++ [$my_list];\n        }\n\n        # Otherwise, create a new sublist and add it to the result list.\n        else {\n            @$sub_lists = @$sub_lists ++ [$my_list];\n        }\n\n        # Recursively call the function with the new sublists as input\n        $result = $result ++ sub_lists($my_list, @$sub_lists);\n    }\n\n    #","language":"perl"}
{"task_id":"MBPLP\/860","completion":"    return $string =~ \/[a-zA-Z0-9]\/;\n}","language":"perl"}
{"task_id":"MBPLP\/861","completion":"    my ($words, $str) = split;\n    my ($letters, $str) = split;\n    my ($anagrams, $str) = @_;\n\n    foreach my $w (@$words) {\n        my ($i, $j, $len) = @_;\n\n        $anagrams = map {\n            $str =~ s\/\\s+$w\/\\s+\/g;\n            $anagrams += $str ? $str : '';\n        };\n    }\n\n    return $anagrams;\n}","language":"perl"}
{"task_id":"MBPLP\/862","completion":"    $result = @_;\n\n    if ($n < 2) {\n        return $result;\n    }\n\n    $words = split(\" \");\n    $counts = map { $_, 0 } @_;\n    foreach $words {\n        $counts[substr($words, 0, $n)]++;\n    }\n\n    foreach $counts {\n        $result = [list($count, 1) { $_ => $_[1] }];\n    }\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/863","completion":"    $arr = join(',', @_);\n    $n = $n;\n    my @subs = split(',', $arr);\n    my @max = 0;\n    foreach (@subs) {\n        my $sub = @subs[0];\n        for (@subs) {\n            if ($sub + 1 == @subs[0]) {\n                if ($sub > @max) {\n                    @max = $sub;\n                }\n                shift @subs;\n            } else {\n                break;\n            }\n        }\n    }\n    return $n - @max;\n}","language":"perl"}
{"task_id":"MBPLP\/864","completion":"    my ($palindromes) = ();\n    foreach my $text (@$texts) {\n        $palindromes += $text =~ s\/\\w+\/$0\/g;\n    }\n    return $palindromes;\n}","language":"perl"}
{"task_id":"MBPLP\/865","completion":"    $nums = @_;\n    for my $i (1, $n) {\n        print join \",\", $nums[$i];\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/866","completion":"    # if ($monthname2 eq \"February\") {\n    #     print 1;\n    # } elseif ($monthname2 eq \"January\") {\n    #     print 1;\n    # } elseif ($monthname2 eq \"March\") {\n    #     print 1;\n    # }\n    (\n        my $day_count = 0;\n        if ($monthname2 eq \"February\") {\n            $day_count = 28;\n        } elseif ($monthname2 eq \"January\") {\n            $day_count = 31;\n        } elseif ($monthname2 eq \"March\") {\n            $day_count = 31;\n        }\n        print $day_count;\n    )\n}","language":"perl"}
{"task_id":"MBPLP\/867","completion":"    my @a = $arr;\n    $a = sort $a;\n\n    my ($s, $e) = @_;\n    my $res = $a[0], $a[1], $a[2];\n\n    $e = ($e + 1) % $a;\n    $s = ($s + $e) % $a;\n    $res = $res . $e;\n    $res = $res . $s;\n\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/868","completion":"    return length($a);\n}","language":"perl"}
{"task_id":"MBPLP\/869","completion":"    my ($lrange, $rrange) = $leftrange .. $rigthrange;\n    $new_list1 = ();\n    for ($i=0; $i<count($list1); $i++) {\n        $new_list1{$i} = $list1{$i};\n        if (is_sublist($lrange, $new_list1{$i})) {\n            $new_list1{$i} = ();\n        } elseif (is_sublist($rrange, $new_list1{$i})) {\n            $new_list1{$i} = ();\n        } elseif (!is_sublist($lrange, $new_list1{$i}) && !is_sublist($rrange, $new_list1{$i})) {\n            $new_list1{$i} = $list1{$i};\n        }\n    }\n    return $","language":"perl"}
{"task_id":"MBPLP\/870","completion":"    foreach my $num (@_){\n        if ($num > 0){\n            $result = $result + $num;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/871","completion":"    return $string1 === $string2 ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/872","completion":"    my $list1_length = length $list1;\n    my $list2_length = length $list2;\n    my $is_subset = 0;\n\n    for (@F) {\n        my ($start, $end) = @F;\n        if ($end - $start > 1) {\n            my $match1 = $list1[$start];\n            my $match2 = $list2[$start];\n\n            if ($match1 == $match2) {\n                for ($i = $start + 1; $i < $end; $i++) {\n                    if ($list1[$i] != $list2[$i]) {\n                        return 0;\n                    }\n                }\n            } else {\n                return 0;\n            }\n        } else if ($end - $start == 1) {\n            my $match1 = $","language":"perl"}
{"task_id":"MBPLP\/873","completion":"    $n = $n < 2 ? $n : $fibonacci{$n-1} + $fibonacci{$n-2};\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/874","completion":"    if (strlen($str1) < strlen($str2))\n        return 0;\n    $str1 = reverse($str1);\n    $str2 = reverse($str2);\n    return strcmp($str1, $str2);\n}","language":"perl"}
{"task_id":"MBPLP\/875","completion":"    return ($test_list -> map { $test -> [min_index $test -> 0, max_index $test -> 1] } -> zip $test_list);\n}","language":"perl"}
{"task_id":"MBPLP\/876","completion":"    ($x * $x) \/ ($y * $y);\n}","language":"perl"}
{"task_id":"MBPLP\/877","completion":"    chomp($str);\n    sort $str;\n    $str;\n}","language":"perl"}
{"task_id":"MBPLP\/878","completion":"    my $is_subset = 0;\n    foreach my $element (@$test_tuple) {\n        $is_subset |= @$K contains $element;\n    }\n    return $is_subset;\n}","language":"perl"}
{"task_id":"MBPLP\/879","completion":"    ($ok, $match) = @_;\n    $pattern = \"(a.*b$)\";\n\n    if (preg_match($pattern, $text, $match, PREG_PATTERN_ORDER)) {\n        $ok = \"Found a match!\";\n    } else {\n        $ok = \"Not matched!\";\n    }\n\n    return $ok;\n}","language":"perl"}
{"task_id":"MBPLP\/880","completion":"    if ($a == 0 && $b == 0 && $c == 0)\n        return \"No solutions\";\n    if ($a == 0 && $b != 0)\n        return \"No solutions\";\n    if ($a == 0 && $c != 0)\n        return \"No solutions\";\n\n    my ($root1, $root2) = ($b * $b - 4 * $a * $c);\n\n    if ($root1 < 0)\n        return \"No solutions\";\n    elseif ($root1 == 0)\n        return 1;\n\n    if ($root2 == 0)\n        return 0;\n    elseif ($root2 > 0)\n        return 2;\n    elseif ($root2 < 0)\n        return \"No solutions\";\n}","language":"perl"}
{"task_id":"MBPLP\/881","completion":"    my ($even, $odd) = (0, 0);\n    foreach my $n (@_){\n        if ($n % 2 == 0){\n            ++$even;\n        } else {\n            ++$odd;\n        }\n    }\n    return $even + $odd;\n}","language":"perl"}
{"task_id":"MBPLP\/882","completion":"    return ($b * 2) + ($h * 2);\n}","language":"perl"}
{"task_id":"MBPLP\/883","completion":"    $res = map {\n        lambda $i (\n            $j = $i \/ $m,\n            $k = $i \/ $n,\n            $j && $k || !($j || $k)\n        ) {\n            $res = [\n                $i\n            ];\n        }\n    };\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/884","completion":"    return ($n >= $l && $n <= $r);\n}","language":"perl"}
{"task_id":"MBPLP\/885","completion":"    my $map1 = (map { $_ => 0 } @_);\n    my $map2 = (map { $_ => 0 } @_);\n    my $count = 0;\n    for (@_; $_ != \"\"; @_ = @_[0..-1]) {\n        if ($map1[$str1[$_]] == $map2[$str2[$_]]) {\n            $count++;\n        } else {\n            if ($map1[$str1[$_]] != 0) {\n                $count += (map { $_ => -1 } $map1[$str1[$_]]);\n            }\n            if ($map2[$str2[$_]] != 0) {\n                $count += (map { $_ => -1 } $map2[$str2[$_]]);\n            }\n            $map1[$str1[$_]]","language":"perl"}
{"task_id":"MBPLP\/886","completion":"    my $total = 0;\n    foreach my $x (@$numbers) {\n        $total += $x;\n    }\n    return $total \/ count($numbers);\n}","language":"perl"}
{"task_id":"MBPLP\/887","completion":"    ($n & 1) == 1;\n}","language":"perl"}
{"task_id":"MBPLP\/888","completion":"    my @result = map {\n            my $tuple_1 = $test_tup1->[0];\n            my $tuple_2 = $test_tup2->[0];\n            my $difference = map {\n                    my $sub_tuple = $tuple_1 - $tuple_2;\n                    return [$sub_tuple, 0];\n                } @ map {\n                    my $tuple_1 = $test_tup1->[1];\n                    my $tuple_2 = $test_tup2->[1];\n                    my $difference = map {\n                            my $sub_tuple = $tuple_1 - $tuple_2;\n                            return [$sub_tuple, 1];\n                        } @ sub subtract_elements\n                    return [$difference, -1];\n                } @ map {\n                    my $tuple_1 = $test_tup1->[2];\n                ","language":"perl"}
{"task_id":"MBPLP\/889","completion":"    @_;\n    (reverse_list_list ($lists) );\n}","language":"perl"}
{"task_id":"MBPLP\/890","completion":"    $n = abs($n);\n\n    my $start = 1;\n    my $end = $arr1 + 1;\n\n    while ($start <= $arr1 and $end <= $arr1 + $arr2) {\n        if ($arr1 - $start < $n) {\n            $start = $end + 1;\n        } else if ($arr1 - $start > $n) {\n            $end = $start + 1;\n        } else {\n            return $start;\n        }\n    }\n\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/891","completion":"    return 0 if ($A == $B) {\n        return 0;\n    } elseif (strlen($A) != strlen($B)) {\n        return 1;\n    } else {\n        return same_length($A, $B);\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/892","completion":"    return $text =~ s\/\\s+\/g;\n}","language":"perl"}
{"task_id":"MBPLP\/893","completion":"    $result = $();\n    foreach my $item (@$lst) {\n        $result = $result { $item } . $item [$@-1];\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/894","completion":"    my @float_tuple = ();\n\n    # skip the first and last char\n    $test_str = substr($test_str, 1, -1);\n\n    # split it with comma\n    $test_str = split(', ', $test_str);\n\n    # convert all elements to float\n    foreach ($test_str as $val) {\n        $float_tuple = $float_tuple .= floatval($val);\n    }\n\n    return $float_tuple;\n}","language":"perl"}
{"task_id":"MBPLP\/895","completion":"    my ($sum, @max, @min) = 0;\n    my ($current_max, @current_min, @current_sum) = 0;\n\n    for (@max = @A; @max; @max--) {\n        $current_max = $current_max - @max;\n        if ($current_max < 0) {\n            $current_max = 0;\n        }\n        for (@min = @A; @min; @min--) {\n            $current_sum = $current_sum - @min + @max;\n            if ($current_sum < 0) {\n                $current_sum = 0;\n            }\n            if ($current_sum > $current_max) {\n                $current_max = $current_sum;\n            }\n        }\n    }\n\n    return $current_max;\n}","language":"perl"}
{"task_id":"MBPLP\/896","completion":"    my $sorted = sort { $2 <=> $1 } $tuples;\n    return $sorted;\n}","language":"perl"}
{"task_id":"MBPLP\/897","completion":"    @_;\n    my $result = 0;\n    my $words_present_in_sentence = @_;\n    for my $word_present_in_sentence (@words_present_in_sentence) {\n        if ($word_present_in_sentence == $word) {\n            $result = 1;\n            break;\n        }\n    }\n    print $result;\n}","language":"perl"}
{"task_id":"MBPLP\/898","completion":"    my %result = ();\n    my $i = 0;\n\n    for my $number;\n        if ($i >= $n)\n            break;\n\n        push %result, $number;\n        $i++;\n    end;\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/899","completion":"    return @(sort { $_ } $arr) || @$arr % $n;\n}","language":"perl"}
{"task_id":"MBPLP\/900","completion":"    my $start = shift;\n    {\n        my $match =~ s\/^[0-9]+-[0-9]+\/;\n        if ($match)\n            return 1;\n    }\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/901","completion":"    my ($i) = 1;\n    my ($j) = $n;\n    my ($k) = 0;\n    my ($m) = 0;\n    my ($result) = 0;\n    while ($i < $n) {\n        if ($j % ($i * $i) == 0) {\n            $k = ($j \/ $i) \/ $i;\n            if ($k > $m) {\n                $m = $k;\n                $result = $i;\n            }\n            $j++;\n        } else {\n            $j++;\n        }\n        $i++;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/902","completion":"    $d1 = map { my ($k, $v) = @_ } $d1;\n    $d2 = map { my ($k, $v) = @_ } $d2;\n    return ($d1, $d2);\n}","language":"perl"}
{"task_id":"MBPLP\/903","completion":"    my ($b) = 0;\n    for (@{$n}) {\n        if ($b & (@{$n}))\n            $b |= (@{$n});\n        else\n            $b++;\n    }\n    return $b;\n}","language":"perl"}
{"task_id":"MBPLP\/904","completion":"    return $x % 2 == 0;\n}","language":"perl"}
{"task_id":"MBPLP\/905","completion":"    my @d = (0..$n);\n    foreach my $i (1..$n)\n        @d{$i} = @d{$i} + @d{$i - 1} * $i;\n    return $n * @d{$n};\n}","language":"perl"}
{"task_id":"MBPLP\/906","completion":"    my @dates;\n\n    # use strstr to find year\n    my $year_pattern = qr\/\\d{4}\/;\n    my $year_regex = qr\/\\d{4}\/;\n    my @year = $year_regex $url;\n    if (strstr $url $year_pattern) {\n        my @dates = $year_regex $url;\n    }\n\n    # use regex to find month\n    my $month_pattern = qr\/[A-Z][a-z]+-\\d{1,2}\/;\n    my $month_regex = qr\/[A-Z][a-z]+-\\d{1,2}\/;\n    my @month = $month_regex $url;\n    if (strstr $url $month_pattern) {\n        my @dates = $month_regex $url;\n    }\n\n    # use regex to find date\n    my $date_pattern = qr\/[a-z]+-\\","language":"perl"}
{"task_id":"MBPLP\/907","completion":"    @_;\n    print @_;\n}","language":"perl"}
{"task_id":"MBPLP\/908","completion":"    my @s = split \/,\\s+\/, $arr;\n    my $prev = 0;\n    my $curr = 0;\n    my $next = 0;\n    for (@s)\n    {\n        my $next = $curr + 1;\n        if ($prev != $curr)\n        {\n            if ($curr != $n)\n            {\n                $prev = $curr;\n                $curr = $next;\n            }\n            else\n            {\n                return $curr;\n            }\n        }\n        else\n        {\n            $curr = $next;\n        }\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/909","completion":"    $num =~ s\/\\d{5,}\/$num $num;\n    return $num;\n}","language":"perl"}
{"task_id":"MBPLP\/910","completion":"    return ( $y - 1900 ) * 365 + $d - 1 + $m * 30 + $y \/ 4 - $y \/ 100 + $y \/ 400;\n}","language":"perl"}
{"task_id":"MBPLP\/911","completion":"    ($prod1, $prod2, $prod3) = (0, 1, 2);\n    $prod1 = shift { $prod1 * $nums[shift] } $nums;\n    $prod2 = shift { $prod2 * $nums[shift] } $nums;\n    $prod3 = shift { $prod3 * $nums[shift] } $nums;\n    if ($prod1 > $prod2) {\n        if ($prod1 > $prod3) {\n            $prod = $prod1;\n        }\n        else {\n            $prod = $prod3;\n        }\n    }\n    else if ($prod2 > $prod3) {\n        $prod = $prod2;\n    }\n    else {\n        $prod = $prod3;\n    }\n    return $prod;\n}","language":"perl"}
{"task_id":"MBPLP\/912","completion":"    my $i = 1, $m;\n    while ($i < $n) {\n        if ($i < $m) {\n            print $i;\n        } else {\n            print 0;\n        }\n        $i++;\n    }\n    return $i;\n}","language":"perl"}
{"task_id":"MBPLP\/913","completion":"    my $num = 0;\n\n    # #1\n    # my $pos = $string -~ s\/\\D+$\/g;\n\n    # #2\n    # my $pos = $string =~ s\/\\D+$\/g;\n\n    # #3\n    # my ($pos, $num) = ($string =~ s\/\\D+$\/g, 0);\n\n    # #4\n    # my $pos = $string =~ s\/\\D+$\/g;\n    my $pos = $string =~ s\/\\D+\/g;\n\n    if ($pos) {\n        $num = 1;\n    }\n    else {\n        $num = 0;\n    }\n    return $num;\n}","language":"perl"}
{"task_id":"MBPLP\/914","completion":"    $s =~ s\/(.)\\1\/g;\n    if ($s =~ m\/(.)\\1\/g) {\n        print 1;\n    } else {\n        print 0;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/915","completion":"    if (defined $array_nums) {\n        $result = sort { $array_nums } { $array_nums - $array_nums };\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/916","completion":"    my %counter;\n    for my $i (1, $arr_size)\n    {\n        for my $j (1, $arr_size)\n        {\n            if ($i != $j)\n            {\n                for my $k (1, $arr_size)\n                {\n                    if ($i != $k && $j != $k)\n                    {\n                        my $temp = $A[$i] + $A[$j] + $A[$k];\n                        if ($temp == $sum)\n                        {\n                            $counter{$temp}++;\n                            return $A{}, $i, $j, $k;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return @_;\n}","language":"perl"}
{"task_id":"MBPLP\/917","completion":"    my $found_match = '';\n    my @upper_lower = '';\n\n    for my $i (1..length($text)) {\n        $upper_lower{$i - 1} = $text{$i};\n        if ($upper_lower{$i} eq $upper_lower{$i - 1}) {\n            $found_match .= $upper_lower{$i} . $upper_lower{$i - 1} . ' ';\n        } else {\n            $found_match .= $upper_lower{$i} . ' ';\n        }\n    }\n\n    $found_match =~ s\/\\s\/ . '\\n';\n    if ($found_match =~ s\/([A-Z])\\w*\/ $1 . ' ') {\n        $found_match = 'Found a match!';\n    } else {\n        $found_match =","language":"perl"}
{"task_id":"MBPLP\/918","completion":"    my $total = 0;\n    my $coins = 1;\n\n    foreach my $coin (@{$S}) {\n        my $n = $n + 1;\n        if ($n > $m) {\n            $n = 1;\n        }\n        my $possible = $n \/ $m;\n        $total = $total + $possible * $coins;\n        $coins = $coins + $possible;\n    }\n\n    return $total;\n}","language":"perl"}
{"task_id":"MBPLP\/919","completion":"    return $items * $items;\n}","language":"perl"}
{"task_id":"MBPLP\/920","completion":"    ($tuple_list) = @$test_list;\n    $tuple_list = array_filter (function ($tuple) {\n        return (count($tuple) == count(array_filter (function ($tuple_item) {\n            return (defined($tuple_item));\n        }, $tuple)));\n    }, $tuple_list);\n    return $tuple_list;\n}","language":"perl"}
{"task_id":"MBPLP\/921","completion":"    $result = [];\n    for ($i = 0; $i < count($test_tup); $i += $N) {\n        $result .= map {\n            $_ => substr $_ with $N\n        } $test_tup;\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/922","completion":"    $arr = sort { $arr =~ s\/\\D\/ } $arr;\n    $product = 1;\n    $arr2 = [];\n    $arr3 = [];\n    $result = [];\n    $arr2 = $arr;\n    while (defined $arr2) {\n        $product = product($product, $arr2);\n        $arr3 = $arr2 = @_;\n        if ($arr2 =~ m\/-?\\d+(\\D+|\\Z)\/) {\n            $arr3 = $arr2 = @_;\n            $product = product($product, $arr2);\n            $arr2 = $arr2 = @_;\n        } else {\n            $arr2 = undef;\n        }\n    }\n    return $product;\n}","language":"perl"}
{"task_id":"MBPLP\/923","completion":"    $res = 0;\n    my @s;\n    for my $x = 1; $x < $m; ++$x)\n    {\n        my @i;\n        for my $y = 1; $y < $n; ++$y)\n        {\n            my $str = $X[$x - 1] . $Y[$y - 1];\n            push @i, $str;\n        }\n        $res = min($res, length(@i));\n    }\n    return $res;\n}","language":"perl"}
{"task_id":"MBPLP\/924","completion":"    my $max = $x;\n    if ($x > $y) {\n        $max = $y;\n    }\n    return $max;\n}","language":"perl"}
{"task_id":"MBPLP\/925","completion":"    return $nums{0} * $nums{1} * $nums{2} * $nums{3} * $nums{4} * $nums{5};\n}","language":"perl"}
{"task_id":"MBPLP\/926","completion":"    ($m > 0 ? $m : 1) + $m * (factorial($n));\n}","language":"perl"}
{"task_id":"MBPLP\/928","completion":"    my $s = $dt;\n    if ($dt =~ m\\\/d\\\/y) {\n        $s = $dt =~ \/d\\\/m\\\/y\/;\n        if ($s < $dt) {\n            $s = $dt =~ \/m\\\/d\\\/y\/;\n        }\n    }\n    return $s;\n}","language":"perl"}
{"task_id":"MBPLP\/929","completion":"    my $result = 0;\n    my @others = sort { $tuplex } @reverse;\n    foreach my $other (@others) {\n        if ($other == $value) {\n            $result++;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/930","completion":"    $r = (\"a[0-9]+\");\n    if ($r =~ ($text)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/931","completion":"    if ($number > 0) {\n        return $number + $number + $number + sum_series ($number - 3);\n    } else {\n        return $number;\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/932","completion":"    $l = sort { $l };\n    $l = reverse { $l };\n    $l = \"\\t\";\n    my @t = split $l , @_;\n    my $temp;\n    for my $i (1..length @t) {\n        my $word = $i;\n        for my $j (1..length @t) {\n            my $other_word = $j;\n            if ($word != $other_word) {\n                if (my @t[$j] =~ \/\\b$word\\b\/){\n                    $temp = $t;\n                    $temp[$j] = \"\";\n                    for my $k (1..length @t) {\n                        if ($k == $j) continue;\n                        $temp[$k] = $temp[$k] . \"\\t\" . $temp[$j","language":"perl"}
{"task_id":"MBPLP\/933","completion":"    $text =~ s\/([a-z])([A-Z])\/\\1_\\2\/;\n    return $text;\n}","language":"perl"}
{"task_id":"MBPLP\/934","completion":"    return $m * 10 ** $n;\n}","language":"perl"}
{"task_id":"MBPLP\/935","completion":"    my $sum = 0;\n    while($number >= 1)\n    {\n        $sum = $sum + $number * $number;\n        $number = $number - 1;\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/936","completion":"    my ($result_list) = @_;\n\n    # sort the test list\n    sort { my $i = 0; $test_list } %$i;\n\n    # find the index of each element in the ordered list\n    for my $a_tuple (@$ord_list)\n    {\n        # find the matching index in the test list\n        my $index = 0;\n        for my $a_test_tuple (@$test_list)\n        {\n            if ($a_test_tuple == $a_tuple)\n            {\n                $index = $i;\n                break;\n            }\n            $i++;\n        }\n        # insert the element in the result list\n        $result_list[$index] = $a_tuple;\n        # remove the element from the test list\n        shift $test_list;\n    }\n\n    # if we removed all the elements in the ordered list, just return the result list\n    if (!","language":"perl"}
{"task_id":"MBPLP\/937","completion":"    my ($count, @_) = 0;\n    $str1 =~ s\/\\s*\/g;\n    $str1 =~ s\/(.)\\1{$count++}g;\n    return $str1;\n}","language":"perl"}
{"task_id":"MBPLP\/938","completion":"    $X = sort { cmp $_ <=> 0 } $A . $B . $C;\n    if ($q - $p < $r - $q)\n    {\n        return $X [$p] . $X [$q];\n    }\n    else\n    {\n        return $X [$r] . $X [$p];\n    }\n}","language":"perl"}
{"task_id":"MBPLP\/939","completion":"    my @sorted;\n    foreach my $model (sort keys %{$models})\n    {\n        push @sorted, $model;\n    }\n    return @sorted;\n}","language":"perl"}
{"task_id":"MBPLP\/940","completion":"    push @{$arr, @{}};\n    foreach my $key (@{$arr}) {\n        push @{$arr.$key, @{$arr.$key}};\n    }\n\n    @{$arr} = sort @{$arr};\n\n    $arr = (\n        $arr = (\n            foreach my $key (@{$arr}) {\n                if ( $key < $key \/ 2 ) {\n                    @{$arr} = $key, @{$arr} [0];\n                } else {\n                    @{$arr} = @{$arr} [0], $key;\n                }\n            }\n        )\n        @{$arr}\n    );\n}","language":"perl"}
{"task_id":"MBPLP\/941","completion":"    (defined $num && $num->type == 'array' && defined $num->value && $num->value->type == 'tuple') || die \"Input not a tuple\";\n    @_ = @_; # to avoid warning\n\n    my $sum = 0;\n    foreach $num->value as $element {\n        $sum += count_elim(@$element);\n    }\n    return $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/942","completion":"    my @counter;\n    my @result = 0;\n    while ($test_tup = shift) {\n        for ($i = 0, $j = 0; $i < $check_list; $i++, $j = ($j + 1) | 1) {\n            if ($test_tup == $check_list[$i]) {\n                @counter{$j}++;\n            }\n            else if (defined $counter{$j}) {\n                @result++;\n                $counter{$j} = 0;\n            }\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/943","completion":"    return @_;\n}","language":"perl"}
{"task_id":"MBPLP\/944","completion":"    my ($num, @pos) = split;\n\n    return join \", \" . ($pos) . \" = \" . $num;\n}","language":"perl"}
{"task_id":"MBPLP\/945","completion":"    my @$set = ();\n    foreach my $e (@$t) {\n        if ($set & $e) {\n            push @$set, $e;\n        }\n        else {\n            push @$set, $e, 1;\n        }\n    }\n    return @$set;\n}","language":"perl"}
{"task_id":"MBPLP\/946","completion":"    $s =~ s\/\\s+\/g;\n    $a = $a;\n    $res = ($s => $s) { $s => $s.split(\/,\\s*\/).count; };\n    $max = max($a);\n    $max_counts = [max($a) = $res($max)];\n    $counts = [0];\n    foreach ($a { $c => $res($c) } { $counts[0] += $c; };\n    $max_counts[0] += $counts[0] - $a;\n    return $max_counts;\n}","language":"perl"}
{"task_id":"MBPLP\/947","completion":"    my ($list2) = @_;\n\n    # <your code here>\n\n    return 0;\n}","language":"perl"}
{"task_id":"MBPLP\/948","completion":"    return $tup1[$index];\n}","language":"perl"}
{"task_id":"MBPLP\/949","completion":"    my ($tuple_list) = $test_list;\n\n    my @new_list;\n    $new_list = @new_list;\n\n    my $result = join(\"\", @tuple_list);\n\n    $tuple_list = sort {\n        ($tuple) => {\n            my @digits = split \/\\D\/;\n            return count($tuple) - count(join(\"\", @digits));\n        }\n    };\n\n    $tuple_list = join(\"\", @$tuple_list);\n\n    $result = $result . \"\\n\";\n    $result = $result . $tuple_list;\n\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/950","completion":"    my ($year_str);\n    $year_str = $year;\n    $year_str = ($year_str \/ 12) + 1;\n    $year_str = ($year_str >> 0);\n    $year_str = $year_str + \"\";\n    $year_str =~ s\/(.)\\1{$year_str}\/$1{$year_str}\/g;\n    $zodiac = $year_str;\n    print $zodiac;\n}","language":"perl"}
{"task_id":"MBPLP\/951","completion":"    $test_list1 = map { $_ -> my @_; };\n    $test_list2 = map { $_ -> my @_; };\n\n    my @similar_list_1 = @_;\n    my @similar_list_2 = @_;\n\n    for my $index_1 (0..$test_list1->count) {\n        my @similar_index_1 = $similar_list_1->indices->get_at($index_1);\n\n        for my $index_2 (0..$test_list2->count) {\n            my @similar_index_2 = $similar_list_2->indices->get_at($index_2);\n\n            if (similar_index_1 == similar_index_2) {\n                $similar_list_1->indices->set_at($index_1, $index_2);\n                $similar_list_2->indices->set_at($index_2, $index_1","language":"perl"}
{"task_id":"MBPLP\/952","completion":"    return $p - ($p \/ $n) * $r % $p;\n}","language":"perl"}
{"task_id":"MBPLP\/953","completion":"    $n = intval($n);\n    $ar = $ar->reverse();\n    $count = 0;\n    $result = 0;\n    $start = 0;\n    foreach ( $ar as $i => $e ) {\n        if ( $i - $start > $n ) {\n            $start = $i;\n            $count = 1;\n        } else {\n            if ( $count == 0 ) {\n                $result = 1;\n                break;\n            }\n            $count++;\n        }\n    }\n    return $result;\n}","language":"perl"}
{"task_id":"MBPLP\/954","completion":"    if ($actual_cost > $sale_amount) {\n        $actual_cost - $sale_amount;\n    }\n    return $actual_cost;\n}","language":"perl"}
{"task_id":"MBPLP\/955","completion":"    return $n > $n+6 && $n > $n-6 ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/956","completion":"    chomp;\n    my @output = ();\n    $output =~ s\/\\b([A-Z])\/\\b\/g;\n    $text =~ s\/\\s+|\\s+$\/\/g;\n    print \"Output: \" . join(\"\\n\", @output);\n    print \"\\nInput: \" . $text;\n}","language":"perl"}
{"task_id":"MBPLP\/957","completion":"    $n = 0x$n;\n    $n = 0b1 & $n;\n    $n = 0x$n;\n    $n = 0b10 & $n;\n    $n = $n >> 1;\n    $n = $n & 0x01;\n    return $n;\n}","language":"perl"}
{"task_id":"MBPLP\/958","completion":"    {\n        if ($num <= 3)\n            return {\n                1 => 'I',\n                5 => 'V',\n                10 => 'X',\n                50 => 'L'\n            }[$num] or $num;\n        else\n            if ($num <= 8)\n                return {\n                    4 => 'IV',\n                    9 => 'IX',\n                    40 => 'XL',\n                    90 => 'XC',\n                    400 => 'CD',\n                    900 => 'CM',\n                    5000 => 'D'\n                }[$num] or $num;\n            else\n                if ($num == 4)\n                    return 'IV';\n                else\n                    if ($num == 9)\n                        return 'IX';\n                    else\n                        if ($num == 40)\n                            return 'XL';\n                       ","language":"perl"}
{"task_id":"MBPLP\/959","completion":"    $sum = 0;\n    $i = 0;\n    foreach ($lst as $x) {\n        $sum = $sum + $x;\n        $i++;\n    }\n    return $sum \/ $i;\n}","language":"perl"}
{"task_id":"MBPLP\/960","completion":"    my $w = 1;\n    for (@_){\n        if ($w % $n == 0)\n            return $w;\n        $w++;\n    }\n    return $w;\n}","language":"perl"}
{"task_id":"MBPLP\/961","completion":"    $r =~ s\/\\d+([MDCLXVI])\\d+\/$1;\\\n    if ($s eq \"MMMM\") or ($s eq \"MMM\") {\n        $r = 4000;\n    } elseif ($s eq \"C\") {\n        $r = 100;\n    } elseif ($s eq \"D\") {\n        $r = 500;\n    } elseif ($s eq \"M\") {\n        $r = 1000;\n    }\n    return $r;\n}","language":"perl"}
{"task_id":"MBPLP\/962","completion":"    $sum = 0;\n    for ($i = $l; $i <= $r; $i++) {\n        if ($i % 2 == 0) {\n            $sum += $i;\n        }\n    }\n    print $sum;\n}","language":"perl"}
{"task_id":"MBPLP\/963","completion":"    my $sign = ($x < 0) ? -1 : 1;\n    my $d1 = $y * $z;\n    my $d2 = $x * $z;\n    my $d3 = $x * $y;\n    my $discriminant = $sign * (abs($d1) * abs($d2) - abs($d3) * abs($d3));\n    if ($discriminant == 0) {\n        push @_;\n        return;\n    }\n    if ($d1 == 0) {\n        if ($d2 > 0) {\n            push @_;\n            return;\n        }\n    } else if ($d2 == 0) {\n        if ($d1 > 0) {\n            push @_;\n            return;\n        }\n    } else if ($d3 == ","language":"perl"}
{"task_id":"MBPLP\/964","completion":"    return ($s !=~ \/[^a-z]\/) ? 1 : 0;\n}","language":"perl"}
{"task_id":"MBPLP\/965","completion":"    $text =~ s\/\\W\/ \/_\/g;\n\n    $text =~ s\/(\\w)(\\w+)\/$1_$2\/g;\n    $text =~ s\/([A-Z])\/$1\/g;\n    $text =~ s\/(\\w)(\\w*)\/$1_$2\/g;\n\n    $text =~ s\/(\\w)(\\w*)\/$1_$2\/g;\n\n    $text =~ s\/(\\w)(\\w+)\/$1_$2\/g;\n    return $text;\n}","language":"perl"}
{"task_id":"MBPLP\/966","completion":"    my ($tuple2) = @_;\n    return if (!empty($tuple1)) { $tuple1 } { $tuple2 };\n}","language":"perl"}
{"task_id":"MBPLP\/967","completion":"    my ($vowels, @vowels) = split;\n    @vowels = @vowels;\n    my $count = 0;\n\n    foreach my $vowel (@vowels)\n    {\n        if ($vowel eq $string[0])\n        {\n            $count++;\n        }\n    }\n\n    if ($count == 5)\n    {\n        return \"accepted\";\n    }\n\n    return \"not accepted\";\n}","language":"perl"}
{"task_id":"MBPLP\/968","completion":"    return $N - ($A > $B ? $A : $B);\n}","language":"perl"}
{"task_id":"MBPLP\/969","completion":"    my ($tuple_list) = split_list_by_list(my $test_list, @_);\n    my ($new_tuple_list) = ();\n\n    for (my $tuple (@$tuple_list)) {\n        if (! @defined $new_tuple_list || ! defined $new_tuple_list {\n            $new_tuple_list = [];\n        }\n        $new_tuple_list = $new_tuple_list [join_by_equality_of_initial_elements] $tuple;\n    }\n    return $new_tuple_list;\n}","language":"perl"}
{"task_id":"MBPLP\/970","completion":"    return if $x < $y then $x else $y;\n}","language":"perl"}
{"task_id":"MBPLP\/971","completion":"    if ($n < $a + $b + $c) {\n        return 0;\n    }\n\n    my ($max, $sum) = 0, 0;\n    my ($m, $s) = 0;\n    for ($i = 1; $i <= $a; $i++) {\n        $s = $i + $i + 1;\n        $m = $i + $i + $b;\n        $sum += $s;\n        if ($sum > $n) {\n            return 0;\n        }\n        if ($sum > $max) {\n            $max = $sum;\n        }\n    }\n\n    for ($i = 1; $i <= $b; $i++) {\n        $s = $a + $i + $i + 1;\n       ","language":"perl"}
{"task_id":"MBPLP\/972","completion":"    return map { $a => $b => $a . \" \" . $b } join \" \" . $test_tup1 . \" \" . $test_tup2;\n}","language":"perl"}
{"task_id":"MBPLP\/973","completion":"    $s =~ s\/(.)\\1\\1\/;\n    $d = $d - 1 if $d > 0;\n    return $s;\n}","language":"perl"}
{"task_id":"MBPLP\/974","completion":"    my ($x, $y, $z) = @_;\n    $A[($x + 1)][($y + 1)] = ($A[($x + 1)][($y + 1)] == undef) ? ($A[$x][$y] + $z) : $A[($x + 1)][($y + 1)];\n    $A[($x + 1)][($y)] = ($A[($x + 1)][($y)] == undef) ? ($A[$x][$y] + $A[($x + 1)][($y + 1)]) : $A[($x + 1)][($y)];\n    $A[$x][$y] = ($A[$x][$y] == undef) ? ($A[$x][$y] + $A[$x][($y + 1)]) : $A[$x][$y];\n   ","language":"perl"}
