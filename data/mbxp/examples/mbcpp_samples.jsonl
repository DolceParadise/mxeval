{"task_id":"MBCPP\/1","completion":"    int n_2 = n \/ 2;\n    int[][] dp = new int[m][n];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < m; i++) {\n        dp[i][0] = cost[i][0] + dp[i - 1][0];\n    }\n    for (int j = 1; j < n; j++) {\n        dp[0][j] = cost[0][j] + dp[0][j - 1];\n    }\n    for (int i = 1; i < m; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1]));\n        }\n","language":"cpp"}
{"task_id":"MBCPP\/2","completion":"    \/\/ 1. sort the first tuple\n    vector<int> sortedTup1 = sort(testTup1);\n    vector<int> sortedTup2 = sort(testTup2);\n    \/\/ 2. compare sortedTup1 and sortedTup2\n    return (sortedTup1 == sortedTup2) ? sortedTup1 : {};\n}","language":"cpp"}
{"task_id":"MBCPP\/3","completion":"    \/\/ the number of possible factors.\n    int p = 0;\n    \/\/ the number of factors of n.\n    int f = 0;\n    for (int i = 2; i <= n \/ 2; ++i)\n        if (n % i == 0) {\n            ++p;\n            if (p == 1) {\n                f = i;\n            }\n        }\n    return n == 2 || p != 0 || n == 1 || f*f == n;\n}","language":"cpp"}
{"task_id":"MBCPP\/4","completion":"    vector<int> res;\n    \/\/ Creating a heap where the heap is filled in the reverse order of the given array\n    \/\/ The heap is then sorted and we can return the first n integers from the heap.\n    \/\/ To use the heap we need to get a copy of the given array so as to not alter the given array.\n    \/\/ The array is not modified by the heap.\n    \/\/ Note: The current implementation of the heap does not support a max heap.\n    \/\/ Note: We use the min heap for a max heap.\n    \/\/ Note: For this reason we do not need the build-in min-heap or max-heap data structures.\n    vector<int> copy = nums;\n    for (int i = n \/ 2; i >= 0; i--) {\n        heapify(copy, n, i);\n    }\n    res.resize(n);\n    for (int i = n - 1; i >= 0; i--) {\n        res[i] = copy[0];\n        copy[0] = copy[","language":"cpp"}
{"task_id":"MBCPP\/5","completion":"  int arr[] = new int[n+1];\n  arr[0] = 1;\n  arr[1] = 1;\n\n  for(int i = 2; i <= n; i++)\n    for(int j = 1; j <= i - 1; j++)\n      arr[i] += arr[j-1] * arr[i - j];\n\n  return arr[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/6","completion":"    return ((a & (1 << (b - 1))) != 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/7","completion":"    vector<string> res;\n    if (text.length() > 4) {\n        string regex = \"[^\\\\p{L}]*\";\n        for (int i = 0; i &lt; text.length() - 4; i++) {\n            string found = \"\";\n            for (int j = i; j &lt; i + 4; j++) {\n                found += text[j];\n            }\n            if (text.find(regex, i) > -1) {\n                res.push_back(found);\n            }\n        }\n    } else {\n        res.push_back(text);\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/8","completion":"    vector<int> squares = {0};\n    int i;\n    for (i = 0; i < nums.size(); i++) {\n        squares[i] = nums[i] * nums[i];\n    }\n    return squares;\n}","language":"cpp"}
{"task_id":"MBCPP\/9","completion":"    int n = str.length();\n    int count = 0;\n\n    for (int i = 0; i < n; i++) {\n        count = findRotation(str, i, count);\n    }\n\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/10","completion":"    \/\/ write your code here.\n    vector<int> list2 = list1.begin();\n    vector<int> list3 = list1.end();\n    vector<int> list4 = list1.erase(n);\n    list3.erase(n);\n\n    return list4;\n\n}","language":"cpp"}
{"task_id":"MBCPP\/11","completion":"  string ans = s;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == ch) {\n      int j = i + 1;\n      while (j < s.length() && s[j] == ch) {\n        j++;\n      }\n      ans = ans.substr(0, i) + ans.substr(j);\n      i = j - 1;\n    }\n  }\n  return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/12","completion":"  vector<vector<int>> result;\n\n  int n = m.size();\n  int row_sum = 0;\n  for (int i = 0; i < n; ++i) {\n    vector<int> row = m[i];\n    int row_sum_old = row_sum;\n    row_sum += row.size();\n    if (row_sum - row_sum_old > 0) {\n      vector<int> partial_row = {0};\n      int partial_row_sum = row_sum_old;\n      for (int j = 0; j < row.size(); ++j) {\n        partial_row[j] = partial_row_sum;\n        partial_row_sum += row[j];\n      }\n      int i_next = 0;\n      while (i < n) {\n        vector<int> row_next = m[i_next];\n        int row_sum_next_old = row_","language":"cpp"}
{"task_id":"MBCPP\/14","completion":"    return l * b * h;\n}","language":"cpp"}
{"task_id":"MBCPP\/15","completion":"    vector<string> result;\n    result.push_back(text.substr(0, 1));\n    for (int i = 1; i < text.length(); i++) {\n        if (text[i] >= 'A' &amp;&amp; text[i] &lt;= 'Z') {\n            result.push_back(text.substr(i, 1));\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/16","completion":"    return text.find(regex(\"[a-z]+_[a-z]+\"));\n}","language":"cpp"}
{"task_id":"MBCPP\/17","completion":"    return 4 * a;\n}","language":"cpp"}
{"task_id":"MBCPP\/18","completion":"    return str & ~secondString;\n}","language":"cpp"}
{"task_id":"MBCPP\/19","completion":"    int n = arraynums.size();\n    int nums[n];\n    for (int i = 0; i < n; i++) {\n        nums[i] = arraynums[i];\n    }\n\n    \/\/ sort the array in ascending order\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (nums[i] > nums[j]) {\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n\n    \/\/ check if any element is duplicated\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (nums[i] == nums[j])\n                return true;\n        }\n    }","language":"cpp"}
{"task_id":"MBCPP\/20","completion":"    return isWoodall(x, 0, 0, 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/21","completion":"    vector<int> v(m);\n\n    for(int i = 0; i < m; i++) {\n        v[i] = n * i;\n    }\n\n    return v;\n}","language":"cpp"}
{"task_id":"MBCPP\/22","completion":"    \/\/ Create an empty hash set\n    hash_set<int> set = new hash_set<int>();\n    \/\/ Traverse through the array\n    for (int i = 0; i < nums.size(); i++) {\n        \/\/ If the element is already present in the hash set, return the element\n        if (set.find(nums[i]) != set.end())\n            return nums[i];\n        \/\/ Otherwise add the element to the hash set\n        set.insert(nums[i]);\n    }\n    \/\/ If no duplicate is found, return -1\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/23","completion":"    \/\/ a list of lists to iterate over\n    vector<vector<int>> list2;\n    int maxSum = 0;\n\n    \/\/ create a new list to store the sum of each list in list1\n    vector<int> maxSumVector;\n\n    \/\/ compute the sum of each list in list1\n    for (int i = 0; i < list1.size(); i++) {\n        \/\/ reset the sum of the current list to 0\n        int sum = 0;\n        \/\/ iterate over the elements in the current list\n        for (int j = 0; j < list1[i].size(); j++) {\n            sum += list1[i][j];\n        }\n\n        \/\/ if the current sum of the current list is greater than the current maxSum, store it in the maxSumVector\n        if (sum > maxSum) {\n            maxSum = sum;\n            maxSumVector = list1[i];\n        }\n    }\n    return maxSum;\n}","language":"cpp"}
{"task_id":"MBCPP\/24","completion":"    return binary;\n}","language":"cpp"}
{"task_id":"MBCPP\/25","completion":"    int prod = 1;\n    vector<int> left = arr;\n    vector<int> right = arr;\n    int i = 1;\n\n    while (i <= n) {\n        prod *= arr[i - 1];\n        i++;\n    }\n\n    while (left.size() > 1) {\n        left = left.begin() + 1;\n        right = right.begin() + 1;\n\n        while (left < left.end()) {\n            prod *= right[left - 1];\n            left++;\n        }\n\n        while (right < right.end()) {\n            prod *= left[right - 1];\n            right++;\n        }\n    }\n\n    return prod;\n}","language":"cpp"}
{"task_id":"MBCPP\/26","completion":"    vector<vector<int>> current = testList;\n    while (current.size() > 0) {\n        vector<int> temp = current.back();\n        current = current - temp;\n        if (temp.size() == k) return true;\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/27","completion":"  return {\n    while (list.size() > 0) {\n      list.erase(list.begin());\n      list.erase(list.begin());\n      list.erase(list.begin());\n    }\n  };\n}","language":"cpp"}
{"task_id":"MBCPP\/28","completion":"  if (k > n - k) {\n    k = n - k;\n  }\n\n  long result = 1;\n  for (int i = 0; i < k; i++) {\n    result *= (n - i);\n    result \/= (i + 1);\n  }\n  return (int) result;\n}","language":"cpp"}
{"task_id":"MBCPP\/29","completion":"    \/\/ write your code here\n    \/\/ O(n^2)\n\n    \/\/ if you want to optimize, try using a hash table instead.\n    int result = 0;\n\n    for (int i = 0; i < arrSize; i++) {\n        result ^= arr[i];\n    }\n\n    return result;\n\n}","language":"cpp"}
{"task_id":"MBCPP\/30","completion":"    int n = s.size();\n    int cnt = 0;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <= n - 1; j++) {\n            if (s[i] == s[j]) {\n                cnt++;\n            }\n        }\n    }\n\n    return cnt;\n}","language":"cpp"}
{"task_id":"MBCPP\/31","completion":"    \/\/ write your code here\n}","language":"cpp"}
{"task_id":"MBCPP\/32","completion":"  int i;\n  int max = 0;\n  for (i = 2; i <= n; i++) {\n    if (n % i == 0) {\n      max = i;\n      break;\n    }\n  }\n  return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/33","completion":"    if (n < 1) return 0;\n    else if (n == 1) return 1;\n    else {\n        return (n%2 + 10*decimalToBinary(n\/2));\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/34","completion":"    int lo = 0;\n    int hi = n - 1;\n    while (lo <= hi) {\n        int mid = (lo + hi) >> 1;\n        if (ar[mid] == mid) {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    return lo;\n}","language":"cpp"}
{"task_id":"MBCPP\/35","completion":"    return (n * (n + 1)) \/ 2;\n}","language":"cpp"}
{"task_id":"MBCPP\/36","completion":"    \/*\n     * n = 0: p * q <= 10 ** 9\n     * n = 1: (p * q % 10) < q\n     * n = 2: (p * q % 10) == q\n     * n = 3: (p * q % 10) > q\n     *\/\n    int pDiv2 = p >> 1;\n    int qDiv2 = q >> 1;\n\n    while (n >= 0) {\n        if ((pDiv2 * qDiv2) % 10 == n) {\n            return (int)((pDiv2 * qDiv2) \/ 10);\n        }\n\n        if ((pDiv2 * qDiv2) % 10 < n) {\n            pDiv2--;\n            qDiv2++;\n        } else {\n            pDiv2++;\n            qDiv2--;\n        }\n\n        n--;\n   ","language":"cpp"}
{"task_id":"MBCPP\/38","completion":"    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/39","completion":"    \/\/ Your code here.\n    return s;\n}","language":"cpp"}
{"task_id":"MBCPP\/40","completion":"  unordered_map<int, int> freqMap = {};\n  for (int i = 0; i < nums.size(); ++i) {\n    for (int j = 0; j < nums[i].size(); ++j) {\n      int val = nums[i][j];\n      freqMap[val] = freqMap[val] == null ? 1 : freqMap[val] + 1;\n    }\n  }\n  return freqMap;\n}","language":"cpp"}
{"task_id":"MBCPP\/41","completion":"    vector<int> result;\n    \/\/ Return the even numbers only\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] % 2 == 0) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/42","completion":"    int sum = 0;\n    int first = 0;\n    int last = 0;\n\n    for(int i = 0; i < n; i++) {\n        first = last;\n        last = arr[i];\n        if(first == last)\n            sum += last;\n    }\n\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/43","completion":"    const char* regexp = \"([a-z])([a-z][a-z])(_[a-z])([a-z])\";\n    std::regex re(regexp);\n    std::cout << \"Text: \" << text << std::endl;\n    std::cout << \"Matches: \" << re.search(text) << std::endl;\n    return re.search(text) ? \"Found a match!\" : \"Not matched!\";\n}","language":"cpp"}
{"task_id":"MBCPP\/44","completion":"  string matched = string();\n\n  int i;\n\n  for (i = 0; i < text.size() && text[i] != ' '; i++) {\n    \/\/ Add current character to matched string\n    matched += text[i];\n\n    \/\/ If next character is space, try to match the word\n    if (text[i] == ' ') {\n      string word = text.substr(i);\n\n      \/\/ If word is in dictionary, mark as matched\n      if (dict.contains(word))\n        return word + \" matched!\";\n\n      \/\/ If word is not in dictionary, add to dictionary\n      dict.insert(word);\n    }\n  }\n\n  \/\/ If no match found, mark unmatched\n  if (i == text.size())\n    return text + \" unmatched!\";\n\n  \/\/ If only one character is left in text, mark as matched\n  if (i == 0)\n    return text + \" matched!\";\n\n  \/\/ If matched string is empty, mark as unmatched","language":"cpp"}
{"task_id":"MBCPP\/45","completion":"    if(l.size() == 1) {\n        return l[0];\n    }\n    else {\n        int first = l[0];\n        int second = l[1];\n        if(first == second) {\n            return first;\n        }\n        else {\n            if(first > second) {\n                return getGcd(l[1:2] + l[0]);\n            }\n            else {\n                return getGcd(l[2:3] + l[0]);\n            }\n        }\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/46","completion":"    vector<int> v(data.size());\n    v.assign(data);\n    return !std::all(v.begin(), v.end(), (x, y) => x != y);\n}","language":"cpp"}
{"task_id":"MBCPP\/47","completion":"    int l_digit, r_digit;\n    while (a % b != 0) {\n        l_digit = a % b;\n        a \/= b;\n        r_digit = b;\n    }\n    return r_digit;\n}","language":"cpp"}
{"task_id":"MBCPP\/48","completion":"  return ~n & (n-1);\n}","language":"cpp"}
{"task_id":"MBCPP\/49","completion":"    vector<int> results;\n\n    for (int row = 0; row < nums.size(); row++) {\n        for (int col = 0; col < nums[row].size(); col++) {\n            if (col == n) {\n                results.push_back(nums[row][col]);\n            }\n        }\n    }\n\n    return results;\n}","language":"cpp"}
{"task_id":"MBCPP\/51","completion":"    return x == y && y == z;\n}","language":"cpp"}
{"task_id":"MBCPP\/52","completion":"  if (h < b) return 0;\n\n  int area = h * b;\n  if (h > b) {\n    area += 2 * (h - b);\n  }\n\n  return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/53","completion":"    if (str.size() <= 1) {\n        return \"Not Equal\";\n    }\n    if (str[0] == str[str.size() - 1]) {\n        return \"Equal\";\n    }\n    return \"Not Equal\";\n}","language":"cpp"}
{"task_id":"MBCPP\/54","completion":"  vector<int> bucket;\n  int maxValue, minValue;\n  maxValue = myList[0];\n  minValue = myList[0];\n  for (int i = 0; i < myList.size(); i++) {\n    maxValue = max(maxValue, myList[i]);\n    minValue = min(minValue, myList[i]);\n  }\n\n  bucket = vector<int>(maxValue - minValue + 1, 0);\n  for (int i = 0; i < myList.size(); i++) {\n    bucket[myList[i] - minValue]++;\n  }\n\n  int bucketIndex;\n  for (int i = 0; i < bucket.size(); i++) {\n    for (int j = 0; j < bucket[i]; j++) {\n      bucketIndex = i * bucket[i] + j;\n      myList[bucketIndex] = i * bucket[i] + j + minValue;\n    }\n  ","language":"cpp"}
{"task_id":"MBCPP\/55","completion":"    if (n == 0) {\n        return 1;\n    }\n    int first = a * tnGp(a, n - 1, r);\n    int second = a * tnGp(a, n - 1, r) * (r - 1);\n    return first \/ second;\n}","language":"cpp"}
{"task_id":"MBCPP\/56","completion":"    if (n == 0) {\n        return false;\n    }\n    else {\n        return ((n - 1) \/ 2) == n;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/57","completion":"    if (n == 0) {\n        return 0;\n    }\n    vector<int> temp = {arr[n - 1]};\n    return max(temp) + findMaxNum(arr, n - 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/58","completion":"    return ((x ^ y) >= 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/59","completion":"\tint i, j;\n\tint count = 1;\n\t\n\tfor (i = 0; i < n; i++) {\n\t\tcount *= (i + 1);\n\t}\n\t\n\tfor (j = 0; j < n - 1; j++) {\n\t\tcount \/= (j + 1);\n\t}\n\t\n\treturn count;\n}","language":"cpp"}
{"task_id":"MBCPP\/60","completion":"    vector<int> dp(n+1);\n    for(int i=1; i<=n; i++) {\n        dp[i] = dp[i-1] + 1;\n        for(int j=0; j<i; j++) {\n            if(arr[j] - arr[j+i] == i) dp[i] = Math.max(dp[i], dp[j]+i);\n        }\n    }\n    return dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/61","completion":"    if (n <= 0) {\n        return 0;\n    }\n    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        count += countSubstrings(s, i);\n    }\n    if (s[0] == s[n]) {\n        count++;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/62","completion":"    if (empty(xs)) {\n        return -1;\n    }\n    if (size(xs) == 1) {\n        return first(xs);\n    }\n    vector<int> ys = minBy(xs, function(x) { return x < first(xs); });\n    return first(ys);\n}","language":"cpp"}
{"task_id":"MBCPP\/63","completion":"    \/\/ Initialize a counter to 0 to record the maximum difference between the elements in the list\n    int max_diff = 0;\n\n    \/\/ Traverse all the sublists in the input list\n    for (auto i = 0; i < testList.size(); i++) {\n        \/\/ Traverse all the sublists in the input list\n        for (auto j = 0; j < testList[i].size(); j++) {\n            \/\/ Calculate the difference between the elements in the sublists\n            int diff = testList[i][j] - testList[i][(j + 1) % testList[i].size()];\n            \/\/ Update the maximum difference if the current difference is more than the previous maximum\n            max_diff = diff > max_diff ? diff : max_diff;\n        }\n    }\n    return max_diff;\n}","language":"cpp"}
{"task_id":"MBCPP\/66","completion":"  int count = 0;\n  for (auto& item : list) {\n    if (item > 0) count++;\n  }\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/68","completion":"    int n = a.size();\n    for (int i = 1; i < n; ++i) {\n        if (a[i] < a[i-1])\n            return false;\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/69","completion":"    if (l.size() < s.size()) {\n        return false;\n    }\n    for (auto i = 0; i < s.size(); ++i) {\n        if (l[i] != s[i]) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/70","completion":"    int total_size = 0;\n    for (auto e : input)\n        total_size += e.size();\n    if (total_size != k)\n        return \"All tuples do not have same length\";\n    string result = \"\";\n    for (auto e : input)\n        for (auto ee : e)\n            if (result.length() != 0)\n                result += \", \";\n            result += \"int\";\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/71","completion":"  \/\/ The number of passes is equal to log_2(n) where n is the\n  \/\/ length of the input array.\n  int n = nums.size();\n\n  \/\/ The value that is being used to select the next element.\n  int temp;\n\n  \/\/ The index of the element that is being sorted.\n  int index;\n\n  for (int i = 0; i < n; i++) {\n    \/\/ This is the value that is being used to select the next element.\n    index = i;\n    \/\/ The value that will be used to compare the selected element with the\n    \/\/ next one.\n    temp = nums[i];\n\n    \/\/ The outer loop will be run 'n - 1' times.\n    for (int j = i + 1; j < n; j++) {\n      \/\/ The inner loop will be run until the index of the selected element\n      \/\/ is greater than the next element.\n      if (temp > nums[j]) {\n        \/\/ The swapping process starts from the","language":"cpp"}
{"task_id":"MBCPP\/72","completion":"    int sum = 0, square = n * n;\n    while (n > 0) {\n        sum += n % 10;\n        n \/= 10;\n    }\n    return (square - sum * sum == n * n) ? true : false;\n}","language":"cpp"}
{"task_id":"MBCPP\/73","completion":"  vector<string> result;\n  const int delim_length = 2;\n  const regex = \"(.{0,20})[\" + string(string.join('|', [\n    '.', '!', ',', ':', ';', '?', '(', ')',\n    '[', ']', '{', '}', '\\\\\\\\', '[^a-zA-Z0-9 ]'\n  ])) + \"]{0,20}\";\n\n  regex.find(text) {\n    match(regex, text, $match) {\n      if (length($1) > 0) {\n        result.push($1);\n      }\n    }\n  }\n\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/74","completion":"    bool answer = false;\n    int c = 0;\n\n    for (auto &amp;pattern : patterns) {\n        for (auto &amp;color : colors) {\n            if (pattern == color) {\n                answer = true;\n                c++;\n            }\n        }\n    }\n    if (c == 0) {\n        return true;\n    }\n    return answer;\n}","language":"cpp"}
{"task_id":"MBCPP\/75","completion":"    vector<vector<int>> divisors;\n    vector<int> divisorsIndex;\n    vector<int> divisorsLength;\n    int j, k1, k2;\n    int n;\n\n    \/\/ generate the divisors\n    divisors = vector<vector<int>>();\n    for (n = 0; n < testList.size(); n++) {\n        divisors.push_back(vector<int>());\n        for (k1 = 0, k2 = 1; k1 < testList[n].size(); k1++, k2++) {\n            if (testList[n][k1] % k == 0 && k % testList[n][k2] == 0) {\n                divisors[n].push_back(testList[n][k2]);\n            }\n        }\n    }\n\n    \/\/ build the index\n    divisorsIndex = vector<int>();\n    for (n = 0; n < testList.size(); n++) {\n        div","language":"cpp"}
{"task_id":"MBCPP\/76","completion":"  int count = 0;\n  for (int i = 1; i <= m; i++) {\n    for (int j = 1; j <= n; j++) {\n      if (i*i + j*j == m*n) count++;\n    }\n  }\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/77","completion":"  return n & 1 == 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/78","completion":"  int count = 0;\n  while (n > 0) {\n    if ((n & 1) == 1) count++;\n    n >>= 1;\n  }\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/79","completion":"  auto size = s.size();\n  return (size % 2 == 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/80","completion":"  double result = 0;\n  for (int i = 0; i < n; i++) {\n    result += 1.0 \/ (3 * i + 1);\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/81","completion":"    vector<vector<int>> outTup = vector<vector<int>>();\n    int index1 = 0, index2 = 0;\n    while (index1 != testTup1.size()) {\n        vector<int> tup1 = vector<int>();\n        tup1.push_back(testTup1[index1]);\n        outTup.push_back(tup1);\n        index1++;\n    }\n    while (index2 != testTup2.size()) {\n        vector<int> tup2 = vector<int>();\n        tup2.push_back(testTup2[index2]);\n        outTup.push_back(tup2);\n        index2++;\n    }\n    return outTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/82","completion":"  double area = 4 * 3.14 * r * r;\n  return area \/ 3;\n}","language":"cpp"}
{"task_id":"MBCPP\/83","completion":"\tstring s = \"\";\n\tfor (unsigned int i = 0; i < strr.size(); ++i)\n\t\ts += strr[i];\n\treturn s;\n}","language":"cpp"}
{"task_id":"MBCPP\/84","completion":"    int count = 0;\n    int sum = 1;\n    for (int i = 0; i < n; i++) {\n        sum = (sum * 2) % 3;\n        count += sum;\n    }\n    return count % 3;\n}","language":"cpp"}
{"task_id":"MBCPP\/85","completion":"  return 4 * 3.14 * r * r;\n}","language":"cpp"}
{"task_id":"MBCPP\/86","completion":"    return (1 + (1 + Math.sqrt(5)) * n) \/ 2;\n}","language":"cpp"}
{"task_id":"MBCPP\/87","completion":"    unordered_map<string, string> dictMerged = unordered_map::create();\n\n    for (unordered_map<string, string> d1: dict1) {\n        if (d1.empty()) {\n            continue;\n        }\n\n        for (unordered_map<string, string> d2: dict2) {\n            if (d2.empty()) {\n                continue;\n            }\n\n            for (unordered_map<string, string> d3: dict3) {\n                if (d3.empty()) {\n                    continue;\n                }\n\n                string s1 = d1[0], s2 = d2[0], s3 = d3[0];\n                if (s1.equals(s2) || s1.equals(s3) || s2.equals(s3)) {\n                    dictMerged[s1] = dictMerged[s1] == null ? d1[1] : string(dictMerged[s1]) + string(d1","language":"cpp"}
{"task_id":"MBCPP\/88","completion":"  unordered_map<int, int> map;\n  \/\/ get the length of the list (number of elements)\n  int list1_length = list1.size();\n  map.resize(list1_length + 1);\n  \/\/ get the list (list1)\n  for (auto& item : list1) {\n    \/\/ get the frequency of the element\n    int freq = map[item];\n    \/\/ if frequency of the element is 0, then add one to it\n    if (freq == 0) {\n      map[item] = 1;\n    } else {\n      \/\/ else add one to it\n      map[item] += 1;\n    }\n  }\n  \/\/ return the map\n  return map;\n}","language":"cpp"}
{"task_id":"MBCPP\/89","completion":"    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/90","completion":"    vector<int> wordLen(list1.size());\n    for (int i = 0; i &lt; list1.size(); i++) {\n        string word = list1[i];\n        int len = string::len(word);\n        wordLen[i] = len;\n    }\n    return max_element(wordLen);\n}","language":"cpp"}
{"task_id":"MBCPP\/91","completion":"    vector<bool> results;\n    for(int i = 0; i &lt; str1.size(); i++) {\n        results.push_back(str1[i].find(subStr) != std::string::npos);\n    }\n    return results.all(bool);\n}","language":"cpp"}
{"task_id":"MBCPP\/92","completion":"    string s = n;\n    int i;\n    for(i=0;i<s.length();i++) {\n        if(s[i] == 0) {\n            break;\n        }\n    }\n    if(i == s.length() || i == 0) {\n        return false;\n    }\n    for(i=0;i<s.length();i++) {\n        if(s[i] == 0) {\n            s[i] = 1;\n            break;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/93","completion":"    int result = 1;\n    for (int i = 0; i < b; i++)\n        result *= a;\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/95","completion":"    vector<int> v;\n    vector<int> w;\n    vector<int> c;\n\n    int i, j, k, k_max, k_min;\n    int min = 1;\n    for (i = 0; i < lst.size(); ++i) {\n        for (j = i + 1; j < lst.size(); ++j) {\n            v = lst[i];\n            w = lst[j];\n            c = 0;\n            for (k = 0, k_max = v.size(), k_min = 0; k < k_max; ++k) {\n                if (v[k] < w[k_min]) {\n                    ++c;\n                    k_min = k;\n                }\n                if (w[k] < v[k_min]) {\n                    ++c;\n                    k_min = k;\n                }\n            }\n            if (","language":"cpp"}
{"task_id":"MBCPP\/96","completion":"    int count = 0;\n    for (int i = 1; i * i <= n; ++i) {\n        if (n % i == 0)\n            count++;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/97","completion":"    unordered_map<int, int> map;\n\n    \/\/ 1. Initialize map\n    map.resize(list1.size());\n\n    \/\/ 2. Count number of occurrences of each number in the list\n    for (auto list : list1) {\n        for (auto item : list) {\n            ++map[item];\n        }\n    }\n\n    return map;\n}","language":"cpp"}
{"task_id":"MBCPP\/98","completion":"    double product = 1.0;\n    int length = numbers.size();\n\n    for (int i = 0; i < length; i++) {\n        product *= numbers[i];\n    }\n\n    return product \/ length;\n}","language":"cpp"}
{"task_id":"MBCPP\/99","completion":"    int power = 1;\n    string bin = \"\";\n    while (power <= n) {\n        bin += (n & power) > 0 ? \"1\" : \"0\";\n        power *= 2;\n    }\n    return bin;\n}","language":"cpp"}
{"task_id":"MBCPP\/100","completion":"  \/\/ find the first digit.\n  \/\/ 'num' is a palindrome if its digits are in descending order.\n  \/\/ so, if there are two possible answers, the next smaller one should be the first digit.\n\n  int start = 0;\n  int end = num;\n  while (start <= end) {\n    int mid = (start + end) \/ 2;\n    \/\/ if it is a palindrome, we found the first palindrome\n    if (isPalindrome(mid)) {\n      \/\/ the first digit of a palindrome is the last digit\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return start;\n}","language":"cpp"}
{"task_id":"MBCPP\/101","completion":"  int lo = 0, hi = n - 1;\n  while (lo <= hi) {\n    int mid = lo + (hi - lo) \/ 2;\n    if (arr[mid] < k)\n      lo = mid + 1;\n    else if (arr[mid] > k)\n      hi = mid - 1;\n    else\n      return arr[mid];\n  }\n  return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/102","completion":"    string result;\n\n    if (word.length() > 0) {\n        result = word[0];\n\n        for (int i = 1; i < word.length(); i++) {\n            const char ch = word[i];\n\n            if (ch.isupper()) {\n                result += word[i + 1].toUpperCase();\n            } else {\n                result += word[i + 1];\n            }\n        }\n    } else {\n        result = \"\";\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/103","completion":"  if (m == 1) {\n    return n;\n  }\n  return n + eulerianNum(n, m - 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/104","completion":"    vector<string> sortedList;\n    vector<string> sortedItem;\n    vector<string> subList;\n    vector<string> subItem;\n    int i;\n    for(i = 0; i &lt; inputList.size(); i++) {\n        sortedList = inputList[i];\n        for(i = 0; i &lt; sortedList.size(); i++) {\n            sortedItem = sortedList[i];\n            for(i = 0; i &lt; inputList.size(); i++) {\n                subList = inputList[i];\n                if(i != i) {\n                    subItem = subList[i];\n                    if(sortedItem.compareTo(subItem) > 0) {\n                        sortedItem = subItem;\n                        sortedList[i] = subItem;\n                    }\n                }\n            }\n        }\n    }\n    return inputList;\n}","language":"cpp"}
{"task_id":"MBCPP\/105","completion":"    return lst.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/106","completion":"    \/\/ vector<int> outTup = new vector<int>(testList.size());\n    vector<int> outTup = new vector<int>(testList.size());\n    for (int i = 0; i < testList.size(); i++) {\n        outTup[i] = testTup[i] + testList[i];\n    }\n    return outTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/107","completion":"  int count = 0;\n  for (int i = l; i <= r; i++) {\n    count += countHexNumber(i);\n  }\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/108","completion":"    vector<int> mergedList;\n    int i1 = 0;\n    int i2 = 0;\n    int i3 = 0;\n    while(i1 < num1.size() || i2 < num2.size() || i3 < num3.size()) {\n        if(i3 < num3.size() && (i1 >= num1.size() || num1[i1] <= num3[i3])) {\n            mergedList.push_back(num3[i3]);\n            i3 += 1;\n        } else if(i2 < num2.size() && (i1 >= num1.size() || num2[i2] <= num3[i3])) {\n            mergedList.push_back(num2[i2]);\n            i2 += 1;\n        } else {\n            mergedList.push_back(num1[i1]);\n            i1 += 1;\n        }\n    }\n    return","language":"cpp"}
{"task_id":"MBCPP\/109","completion":"    int rotationCount = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '1') {\n            rotationCount++;\n        }\n    }\n    return rotationCount % 2 == 0 ? n : n - 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/110","completion":"    vector<vector<int>> retList;\n    int currVal, endVal, lastVal;\n\n    int i = 0;\n    int j = 0;\n    while (i < testList.size() && j < testList.size()) {\n        currVal = testList[i].begin();\n        endVal = testList[i].end();\n        lastVal = testList[j].begin();\n\n        while (currVal < endVal && j < testList.size()) {\n            j = j + 1;\n            lastVal = currVal;\n            currVal = testList[j].begin();\n        }\n\n        while (currVal < endVal && i < testList.size()) {\n            i = i + 1;\n            lastVal = currVal;\n            currVal = testList[i].begin();\n        }\n\n        if (currVal >= endVal) {\n            continue;\n        }\n\n        if (lastVal < str","language":"cpp"}
{"task_id":"MBCPP\/111","completion":"    vector<int> list1;\n    vector<int> list2;\n    list1.resize(nestedlist.size());\n    list2.resize(nestedlist.size());\n\n    for (int i = 0; i < nestedlist.size(); i++) {\n        vector<int> list3;\n        list3 = nestedlist[i];\n        for (int j = 0; j < nestedlist.size(); j++) {\n            if (i == j) {\n                list1[i] = 0;\n                continue;\n            }\n            list2[j] = list3.count(list3.at(j));\n            if (list2[j] > list1[i]) {\n                list1[i] = list2[j];\n            }\n        }\n    }\n\n    list1.sort();\n    list2.sort();\n    int common = 0;\n    for (int i = 0; i < list1.size(); i++) {\n       ","language":"cpp"}
{"task_id":"MBCPP\/112","completion":"    int p = diameter * height + 2 * (diameter + height);\n    return p;\n}","language":"cpp"}
{"task_id":"MBCPP\/113","completion":"    if (text.length() == 0) {\n        return false;\n    }\n    int n = atoi(text);\n    return n >= -2147483648 && n <= 2147483647;\n}","language":"cpp"}
{"task_id":"MBCPP\/114","completion":"    string res = \"\";\n\n    for (auto it : testList) {\n        for (auto it2 : it) {\n            auto index = it2;\n            int frequency = 0;\n            for (auto it3 : testList) {\n                if (it3[index] == it2) {\n                    frequency++;\n                }\n            }\n            res += \"(\" + it2 + \",\" + frequency + \");\";\n        }\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/116","completion":"\tint result = 0;\n\n\tfor (auto &amp;n : nums) {\n\t\tresult = result * 10 + n;\n\t}\n\n\treturn result;\n}","language":"cpp"}
{"task_id":"MBCPP\/117","completion":"  vector<string> temp;\n  string result;\n\n  for (int i = 0; i &lt; testList.size(); i++) {\n    result = \"\";\n    temp = testList[i];\n\n    for (int j = 0; j &lt; temp.size(); j++) {\n      result += temp[j];\n    }\n\n    result += \".0\";\n    testList[i] = result;\n  }\n  return testList;\n}","language":"cpp"}
{"task_id":"MBCPP\/118","completion":"    vector<string> res;\n    int n = str.length();\n    for(int i = 0; i < n; i++) {\n        res[i] = str[i];\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/119","completion":"  int l, h, m, i, j, count;\n  count = 0;\n\n  l = 0;\n  h = n - 1;\n  m = (l + h) \/ 2;\n\n  while (l <= h) {\n    i = arr[m];\n    j = m;\n\n    while (arr[j] == i) {\n      count++;\n      if (j == n - 1) {\n        if (count == 1) {\n          return i;\n        }\n        return -1;\n      }\n      j++;\n    }\n\n    if (count > 1) {\n      return -1;\n    }\n\n    if (arr[l] == i) {\n      l++;\n    } else if (arr[h] == i) {\n      h--;\n    } else {\n      m = (l + h) \/ 2;\n    }\n","language":"cpp"}
{"task_id":"MBCPP\/120","completion":"    vector<int> maxProduct = {0};\n    for (int i = 0; i &lt; list1.size(); ++i) {\n        int product = 1;\n        for (int j = 0; j &lt; list1.size(); ++j) {\n            if (i == j) {\n                continue;\n            }\n            product *= list1[i][j];\n        }\n        if (maxProduct[0] &lt; product) {\n            maxProduct.resize(product);\n            for (auto element : list1[i]) {\n                maxProduct[element]++;\n            }\n        }\n    }\n    return maxProduct[0];\n}","language":"cpp"}
{"task_id":"MBCPP\/121","completion":"    vector<int> triplet = vector<int>(0);\n    int i, j, k;\n    for (i = 0; i &lt; n; i++)\n        for (j = i + 1; j &lt; n; j++)\n            for (k = j + 1; k &lt; n; k++)\n                if (a[i] + a[j] + a[k] == sum) {\n                    triplet.push_back(a[i]);\n                    triplet.push_back(a[j]);\n                    triplet.push_back(a[k]);\n                    count++;\n                    if (count == 3)\n                        return true;\n                }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/122","completion":"  if (n <= 0)\n    return 0;\n\n  if (n == 1)\n    return 1;\n\n  int result = smartnumber(n - 1) + smartnumber(n - 2) + smartnumber(n - 3);\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/123","completion":"  return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/125","completion":"\t\/\/ write your code here\n\t\/\/ TODO: answer here\n\n\treturn -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/126","completion":"\tint sum = 0;\n\tfor(int i = a; i <= b; i++) {\n\t\tif(is_divisible_by(i, a) && is_divisible_by(i, b))\n\t\t\tsum += i;\n\t}\n\treturn sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/127","completion":"    int z = 0;\n    int carry = 0;\n    while (y != 0) {\n        z = x ^ y;\n        carry = (x & y) << 1;\n        x = z;\n        y = carry;\n    }\n    return x;\n}","language":"cpp"}
{"task_id":"MBCPP\/128","completion":"    \/\/ Your code here\n}","language":"cpp"}
{"task_id":"MBCPP\/129","completion":"    vector<vector<int>> squareMatrix = {{1}};\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/130","completion":"    vector<pair<int, int>> counts = { };\n    for(int i = 0; i < nums.size(); i++) {\n        if(!counts[nums[i]]) counts[nums[i]] = { };\n        if(!counts[nums[i]].first) counts[nums[i]].first = nums[i];\n        counts[nums[i]].second = counts[nums[i]].second ? counts[nums[i]].second + 1 : 1;\n    }\n    vector<pair<int, int>> max_occ_nums = { };\n    for(int i = 0; i < counts.size(); i++) {\n        if(!max_occ_nums[counts[i].second]) max_occ_nums[counts[i].second] = { };\n        max_occ_nums[counts[i].second].first = counts[i].first;\n        max_occ_nums[counts[i].second].second = counts[i].second;\n    }\n\n    vector<","language":"cpp"}
{"task_id":"MBCPP\/131","completion":"    \/\/ Create a character array of the string\n    std::vector<char> vect;\n    for (unsigned i = 0; i < str1.size(); i++)\n        vect.push_back(str1[i]);\n\n    \/\/ Create a new string and add the character array elements in reverse order\n    std::string reversedString(vect.size());\n    for (unsigned i = vect.size() - 1; i >= 0; i--)\n        reversedString.push_back(vect[i]);\n\n    return reversedString;\n}","language":"cpp"}
{"task_id":"MBCPP\/132","completion":"    return join(tup1, \"\");\n}","language":"cpp"}
{"task_id":"MBCPP\/133","completion":"  return nums.filter(x => x < 0).sum();\n}","language":"cpp"}
{"task_id":"MBCPP\/134","completion":"  int k = 0;\n  for (int i = 0; i < n; i++) {\n    k += arr[i];\n  }\n\n  if (k % p == 0) {\n    return \"EVEN\";\n  }\n  else {\n    return \"ODD\";\n  }\n}","language":"cpp"}
{"task_id":"MBCPP\/135","completion":"    return 6 * n * (2 * n - 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/136","completion":"  double total = 0;\n\n  for (int i = 1; i <= units; i++) {\n    if (i % 2 != 0) {\n      total += 1.25 * i;\n    }\n  }\n\n  return total;\n}","language":"cpp"}
{"task_id":"MBCPP\/137","completion":"    \/\/ TODO\n}","language":"cpp"}
{"task_id":"MBCPP\/138","completion":"    for (int i = 0; i < 32; i++) {\n        if (n == 1 << i) {\n            return true;\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/139","completion":"    \/*\n     * |-----------------------------|\n     * |                              |\n     * |  1  |  1  |  1  |  1  |  1  |\n     * |  x  |  x  |  x  |  x  |  x  |\n     * | -  | -  | -  | -  | -  | -  |\n     * |-----------------------------|\n     *\/\n    int x = -r + 1;\n    int y = r;\n    int a, b, c;\n\n    \/*\n     * |-----------------------------|\n     * |                              |\n     * |  1  |  1  |  1  |  1  |  1  |\n     * |  1  |  2  |  3  |  4 ","language":"cpp"}
{"task_id":"MBCPP\/140","completion":"    \/\/ TODO\n    \/\/ Write your code here.\n    return vector<int>();\n}","language":"cpp"}
{"task_id":"MBCPP\/141","completion":"  if(nums.empty()) return nums;\n  int max_index = find_max(nums);\n  if(max_index == 0) {\n    \/\/ No pancake needed\n    return nums;\n  }\n  \/\/ Find the largest element to flip to\n  int max_value = nums[max_index];\n  int max_index_to_flip = 0;\n  for(int i = 1; i <= max_index; i++) {\n    if(nums[i] > max_value) {\n      max_value = nums[i];\n      max_index_to_flip = i;\n    }\n  }\n  \/\/ Make the maximum element into the correct position\n  swap(nums, max_index, max_index_to_flip);\n  \/\/ Sort everything else\n  \/\/ 1. Put max in its correct place\n  \/\/ 2. Sort everything to the right\n  \/\/ 3. Flip back the max\n  pancakeSort(nums[1:max_index + ","language":"cpp"}
{"task_id":"MBCPP\/142","completion":"    int same_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == list2[i] &amp;&amp; list2[i] == list3[i]) same_count++;\n    }\n    return same_count;\n}","language":"cpp"}
{"task_id":"MBCPP\/144","completion":"\tvector<int> results(n);\n\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\tresults[i] = results[i] + abs(arr[i] - arr[j]);\n\t\t}\n\t}\n\n\treturn results[0];\n}","language":"cpp"}
{"task_id":"MBCPP\/145","completion":"    \/\/ Your code here\n    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/146","completion":"    return str1.length();\n}","language":"cpp"}
{"task_id":"MBCPP\/147","completion":"    if (m == 1 &amp;&amp; n == 1) {\n        return tri[0][0];\n    }\n\n    if (m == 1 &amp;&amp; n != 1) {\n        return maxPathSum(tri, n, 1);\n    }\n\n    if (n == 1 &amp;&amp; m != 1) {\n        return maxPathSum(tri, m, 1);\n    }\n\n    int m1 = 1;\n    int n1 = 1;\n    int m2 = 1;\n    int n2 = 1;\n\n    int maxM1 = -1;\n    int maxN1 = -1;\n    int maxM2 = -1;\n    int maxN2 = -1;\n\n    if (m == 1) {\n        maxM1 = n1 + tri[0][1];\n    } else {\n        maxM1 = maxPathSum(","language":"cpp"}
{"task_id":"MBCPP\/148","completion":"\tint sum = 0;\n\tint firstPart = 0;\n\tint secondPart = 0;\n\twhile (n > 0) {\n\t\tint firstDigit = n % 10;\n\t\tn \/= 10;\n\t\tsum += firstDigit;\n\t\tfirstPart++;\n\t}\n\twhile (sum > 0) {\n\t\tint secondDigit = sum % 10;\n\t\tsum \/= 10;\n\t\tsecondPart++;\n\t}\n\treturn (secondPart > firstPart) ? secondPart : firstPart;\n}","language":"cpp"}
{"task_id":"MBCPP\/149","completion":"    \/\/ code here\n}","language":"cpp"}
{"task_id":"MBCPP\/150","completion":"    return (a + b + c == 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/151","completion":"    \/\/ x and y must be odd integers.\n    if ((x % 2 == 0) || (y % 2 == 0)) {\n        return false;\n    }\n\n    \/\/ Use Euclid's algorithm.\n    \/\/ [x, y] is a co-prime pair iff\n    \/\/ - y = x * (mod x) + 1\n    \/\/ - x != y * (mod y)\n    while ((y - 1) % x != 0) {\n        x = (x + 1) % y;\n    }\n    return x == 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/152","completion":"    \/\/ If the array is empty or has only one element, \n    \/\/ it is already sorted. \n    if (x.size() < 2) {\n        return x;\n    }\n\n    \/\/ Split the array into halves.\n    vector<int> leftHalf = vector<int>();\n    vector<int> rightHalf = vector<int>();\n    int mid = x.size() \/ 2;\n    for (int i = 0; i < mid; i++) {\n        leftHalf.push_back(x[i]);\n    }\n    for (int i = mid; i < x.size(); i++) {\n        rightHalf.push_back(x[i]);\n    }\n\n    \/\/ Sort both halves.\n    leftHalf = mergeSort(leftHalf);\n    rightHalf = mergeSort(rightHalf);\n\n    \/\/ Merge the halves into one sorted array.\n    int i = 0; \/\/ Index into the left half.\n    int j = 0; \/\/ Index into the right","language":"cpp"}
{"task_id":"MBCPP\/153","completion":"  double bX = (-b + sqrt(pow(b, 2) - (4 * a * c))) \/ (2 * a);\n  double bY = (-b - sqrt(pow(b, 2) - (4 * a * c))) \/ (2 * a);\n  return {bX, bY};\n}","language":"cpp"}
{"task_id":"MBCPP\/154","completion":"    vector<int> result;\n    int x = 0, y = 0;\n    int index = 0;\n    result.resize(nums.size());\n\n    while (index < nums.size()) {\n        if (x >= nums.get(index).size()) {\n            x = 0;\n            y++;\n            index++;\n            continue;\n        }\n        if (y >= nums.get(index).size()) {\n            index++;\n            continue;\n        }\n        if (nums.get(index).get(x) == n) {\n            result.push_back(nums.get(index).get(y));\n        }\n        x++;\n        index++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/155","completion":"    return ~(~(n & 1));\n}","language":"cpp"}
{"task_id":"MBCPP\/156","completion":"    vector<vector<int>> tupleInt = {{}};\n    for (auto &amp;i : tupleStr) {\n        for (auto &amp;j : i) {\n            if (tupleInt[tupleInt.size() - 1].size() != 0 &amp;&amp; tupleInt[tupleInt.size() - 1][tupleInt[tupleInt.size() - 1].size() - 1] != j) {\n                tupleInt[tupleInt.size() - 1].push_back(0);\n            }\n            tupleInt[tupleInt.size() - 1][tupleInt[tupleInt.size() - 1].size()] = atoi(j);\n        }\n    }\n    return tupleInt;\n}","language":"cpp"}
{"task_id":"MBCPP\/158","completion":"    if (k == 1) {\n        return n;\n    }\n    int max = -1;\n    for (int i = 0; i < n; i++) {\n        int tmp = minOps(arr, n - 1, k - 1) + arr[i];\n        max = tmp > max ? tmp : max;\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/159","completion":"    \/\/ Your code goes here\n    return month;\n}","language":"cpp"}
{"task_id":"MBCPP\/161","completion":"  vector<int> resultList = {0};\n\n  for (int i = 0; i < list1.size(); i++) {\n    if (list2.contains(list1[i])) {\n      continue;\n    }\n    resultList.push_back(list1[i]);\n  }\n  return resultList;\n}","language":"cpp"}
{"task_id":"MBCPP\/162","completion":"    int sum = 0;\n    for (int i = 0; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/163","completion":"    if (s < 3)\n        return 0;\n    double area = 0;\n    for (int i = 0; i < s; i++) {\n        area += (l * s) \/ 2;\n        l += l;\n    }\n    return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/164","completion":"    int sum, squareSum, squareOfNum1, squareOfNum2;\n    sum = 0;\n    squareOfNum1 = 0;\n    squareOfNum2 = 0;\n    squareSum = 0;\n    while (num1 > 0) {\n        squareSum += num1 * num1;\n        sum += num1;\n        num1--;\n    }\n    while (num2 > 0) {\n        squareOfNum1 += num2 * num2;\n        squareOfNum2 += num2;\n        num2--;\n    }\n    if (squareSum == squareOfNum1 && squareSum == squareOfNum2) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/165","completion":"    vector<char> v(26);\n    for (int i = 0; i < str1.length(); i++) {\n        v[str1[i] - 97]++;\n    }\n    int count = 0;\n    int most = 0;\n    for (int i = 0; i < 26; i++) {\n        if (v[i] > most) {\n            most = v[i];\n            count = 1;\n        } else if (v[i] == most) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/166","completion":"    int count = 0;\n    vector<int> b;\n\n    b.push_back(a[0]);\n\n    for (int i = 1; i < n; i++) {\n        int x = a[i];\n        b.push_back(x ^ b.back());\n        b.pop_back();\n    }\n\n    count = b.back() - a[0];\n\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/167","completion":"    if (n == 0) {\n        return 1;\n    }\n\n    int res = 1;\n    while (n > 1) {\n        res <<= 1;\n        n >>= 1;\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/168","completion":"    int freq = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            freq++;\n        }\n    }\n    return freq;\n}","language":"cpp"}
{"task_id":"MBCPP\/169","completion":"    \/\/ return nth pell number.\n    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/170","completion":"    int sum = 0;\n    for(int i = m; i <= n; i++) {\n        sum += list1[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/171","completion":"    \/\/ return the perimeter of the pentagon\n    return 5 * (a * 2 + 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/172","completion":"    vector<int> count = { 0 };\n    string input = s;\n    while (input.length() != 0) {\n        count.push_back(input.count('std'));\n        input = input.substring(input.find('std') + 3);\n    }\n    return count.back();\n}","language":"cpp"}
{"task_id":"MBCPP\/173","completion":"  vector<char> chars;\n  chars.push_back(text[0]);\n  for (int i = 1; i < text.size(); i++) {\n    chars.push_back(text[i]);\n    if (!isalnum(text[i])) {\n      chars.erase(i);\n      i = 0;\n    }\n  }\n\n  return chars.join();\n}","language":"cpp"}
{"task_id":"MBCPP\/175","completion":"    \/\/ write code here.\n}","language":"cpp"}
{"task_id":"MBCPP\/176","completion":"    return a + b + c;\n}","language":"cpp"}
{"task_id":"MBCPP\/177","completion":"    vector<int> output;\n\n    int lcm = lcm(l, r);\n\n    int num1 = l \/ lcm * lcm;\n    int num2 = l \/ lcm * lcm;\n\n    if (lcm > r) {\n        num2 = r;\n    }\n\n    \/\/ binary search\n    while (num2 - num1 > 1) {\n        int mid = (num1 + num2) \/ 2;\n        if (lcm(l, mid) > r) {\n            num1 = mid;\n        } else {\n            num2 = mid;\n        }\n    }\n\n    output.push_back(num1);\n    output.push_back(num2);\n\n    return output;\n}","language":"cpp"}
{"task_id":"MBCPP\/178","completion":"    auto it = patterns.begin();\n    string result;\n\n    while (it != patterns.end()) {\n        const auto match = text.find(patterns[it]);\n        if (match != string(0)) {\n            result = match;\n            break;\n        }\n        it++;\n    }\n\n    if (result == string(0)) {\n        result = \"Not Matched!\";\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/179","completion":"    int n = x;\n    while (n > 0) {\n        if (n % 10 == 7)\n            return false;\n        n \/= 10;\n    }\n\n    int d = 0;\n    while (x > 0) {\n        d = x % 10;\n        x \/= 10;\n        if (d == 7)\n            return true;\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/181","completion":"    string ans = \"\";\n    for (int i = 0; i < n; i++) {\n        string s = arr[i];\n        while (s.length() > 0) {\n            string prefix = s.substr(0, 1);\n            for (int j = 0; j < n; j++) {\n                if (j != i && arr[j].substr(0, 1) == prefix) {\n                    s = arr[j].substr(1);\n                    break;\n                }\n            }\n            if (s.length() > 0) {\n                ans += prefix;\n            } else {\n                break;\n            }\n        }\n        if (ans.length() == n) {\n            break;\n        }\n    }\n    return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/183","completion":"    vector<pair<int, int>> pairs;\n    pairs.resize(n);\n    for (int i = 0; i < n; i++) {\n        pairs[i].first = i;\n        pairs[i].second = arr[i];\n    }\n\n    \/*\n    * Sorting the array in ascending order.\n    * We can achieve O(N log N) time complexity\n    * by creating an auxiliary array of size N\n    * where every element in this array will\n    * be assigned the index of the array.\n    *\/\n    vector<int> sorted_arr;\n    for (int i = 0; i < n; i++) {\n        sorted_arr.push_back(i);\n    }\n\n    \/*\n    * We will find the minimum difference between the pairs in this array.\n    * This minimum difference will be stored in a variable.\n    *\/\n    int diff = 0;\n    int minDiff = k;\n\n    \/*\n    * We will first sort the array","language":"cpp"}
{"task_id":"MBCPP\/184","completion":"    int n;\n    vector<bool> result;\n\n    \/\/ get the length of the vector\n    n = length(list);\n\n    \/\/ initialize the result vector\n    result.reserve(n);\n\n    \/\/ Go through each element and see if the element is greater than the specified number\n    for (int i = 0; i < n; i++) {\n        result[i] = list[i] >= num;\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/185","completion":"    \/\/ Find the focus of the parabola\n    vector<double> focus;\n    focus[0] = -a \/ 2;\n    focus[1] = a * c \/ b - a;\n    return focus;\n}","language":"cpp"}
{"task_id":"MBCPP\/186","completion":"    string pattern;\n\n    for (int i = 0; i &lt; patterns.size(); i++) {\n        pattern = patterns[i];\n        if (!strpos(text, pattern))\n            return string(\"Not Matched!\");\n    }\n\n    return string(\"Matched!\");\n}","language":"cpp"}
{"task_id":"MBCPP\/187","completion":"    string lcs = string();\n    int[][] matrix = new int[m+1][n+1];\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (x[i-1] == y[j-1]) {\n                matrix[i][j] = matrix[i-1][j-1] + 1;\n            } else {\n                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]);\n            }\n            \/\/ if (matrix[i][j] > 0) {\n            \/\/     lcs += x[i-1];\n            \/\/ }\n        }\n    }\n    return matrix[m][n];\n}","language":"cpp"}
{"task_id":"MBCPP\/188","completion":"    return n == 1 || (n * n) == (n & -n);\n}","language":"cpp"}
{"task_id":"MBCPP\/189","completion":"    if (n == 0) return 1;\n\n    int temp = 1;\n\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > 0 && arr[i] <= n && arr[i] != i + 1) {\n            swap(arr[i], arr[temp - 1]);\n            temp += 1;\n        }\n    }\n\n    for (int i = 0; i < n; i++) {\n        if (arr[i] != i + 1) {\n            return i + 1;\n        }\n    }\n\n    return n + 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/190","completion":"    \/\/ calculate the area\n    int area = (x2 - x1) * (y2 - y1);\n\n    \/\/ find the vertical and horizontal intersection points\n    int x = Math.min(x1, x2);\n    int y = Math.min(y1, y2);\n    int xMax = Math.max(x1, x2);\n    int yMax = Math.max(y1, y2);\n    int verticalPoints = (xMax - x) * (yMax - y);\n\n    \/\/ return the number of points\n    return area - verticalPoints;\n}","language":"cpp"}
{"task_id":"MBCPP\/191","completion":"  \/\/ 1. Convert the given month name into lower case letters and replace the\n  \/\/     first letter with a space.\n  string monthname = monthname3.substr(1).tolower().replace(c_letter(0), ' ');\n\n  \/\/ 2. Get the number of days in the given month\n  int num_days = getMonthDayNumber(monthname);\n\n  \/\/ 3. If the number of days is greater than 30, then return true else return\n  \/\/     false.\n  return num_days > 30;\n}","language":"cpp"}
{"task_id":"MBCPP\/192","completion":"    return (str.count(1, 0) > 0 && str.count(2, 0) > 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/193","completion":"  vector<int> newTup = testTup;\n  int index = 0;\n  for (int i = 0; i < testTup.size(); i++) {\n    for (int j = i + 1; j < testTup.size(); j++) {\n      if (testTup[i] == testTup[j]) {\n        newTup.erase(j);\n      }\n    }\n  }\n  return newTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/194","completion":"    int rem, decimal = 0;\n    while (n != 0) {\n        rem = n % 10;\n        decimal += rem * Math.pow(8, (2 - 1));\n        n \/= 10;\n    }\n    return decimal;\n}","language":"cpp"}
{"task_id":"MBCPP\/195","completion":"    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        \/\/ Find the mid index.\n        int mid = (i + j) \/ 2;\n        \/\/ If x == arr[mid], return mid.\n        if (x == arr[mid]) {\n            return mid;\n        }\n        \/\/ If x > arr[mid], search in the right half.\n        else if (x > arr[mid]) {\n            i = mid + 1;\n        }\n        \/\/ If x < arr[mid], search in the left half.\n        else {\n            j = mid;\n        }\n    }\n    \/\/ If x != arr[mid], the target element is not in the array.\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/196","completion":"    vector<vector<int>> resultList;\n    resultList.resize(testList.size());\n\n    for (int i = 0; i < testList.size(); i++) {\n        for (int j = i + 1; j < testList.size(); j++) {\n            if (testList[j].size() == k) {\n                testList[i].push_back_all(testList[j]);\n            }\n        }\n    }\n\n    return resultList;\n}","language":"cpp"}
{"task_id":"MBCPP\/197","completion":"  vector<int> answer;\n  answer.reserve(testTup1.size());\n  for (int i = 0; i < testTup1.size(); i++) {\n    answer.push_back(testTup1[i] * testTup2[i]);\n  }\n\n  return answer;\n}","language":"cpp"}
{"task_id":"MBCPP\/198","completion":"    double sq = a * a + b * b;\n    double root = Math.sqrt(sq);\n    return root \/ a;\n}","language":"cpp"}
{"task_id":"MBCPP\/199","completion":"    int i;\n    for (i = 31; i >= 0; --i) {\n        if ((n & (1 << i)) != 0) {\n            break;\n        }\n    }\n    return i + 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/200","completion":"    vector<int> pos = new vector<int>;\n    int max = 0, n = list1.size();\n\n    for (int i = 0; i < n; i++) {\n        if (list1[i] > max) {\n            max = list1[i];\n            pos.push_back(i);\n        }\n    }\n\n    return pos;\n}","language":"cpp"}
{"task_id":"MBCPP\/201","completion":"  string str = lst[0];\n  for (int i = 1; i < lst.size(); i++) {\n    if (str != lst[i]) {\n      return false;\n    }\n  }\n  return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/202","completion":"  string str = \"\";\n  int i;\n  for (i = 0; i < str1.length(); i++) {\n    if (i % 2 != 0) {\n      str += str1[i];\n    }\n  }\n  return str;\n}","language":"cpp"}
{"task_id":"MBCPP\/203","completion":"  return n1^n2;\n}","language":"cpp"}
{"task_id":"MBCPP\/204","completion":"  int count = 0;\n\n  \/\/ Count the occurrence of the character c in the string s\n  for(int i = 0; i < s.size(); i++) {\n    if(s[i] == c.c_str()) {\n      count++;\n    }\n  }\n\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/205","completion":"    vector<int> result = {0};\n    int i;\n    int j;\n    for(i=0; i<testTup.size(); i++) {\n        for(j=0; j<i; j++) {\n            if(testTup[i]>testTup[j]) {\n                result.push_back(i-j);\n                break;\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/206","completion":"    vector<string> newTuple;\n\n    newTuple.push_back(testTup[0]);\n    for (int i = 1; i &lt; testTup.size(); i++) {\n        newTuple.push_back(testTup[i].strcat(testTup[i-1]));\n    }\n    return newTuple;\n}","language":"cpp"}
{"task_id":"MBCPP\/207","completion":"    \/\/ Count the number of characters of all substrings in the string.\n    \/\/ If the number of characters of all substrings is less than or equal to 2, return 0.\n    if (str.size() <= 2) return str.size();\n\n    \/\/ Create a vector of size str.size() and fill it with -1.\n    vector < int > vec = vector < int >(-1);\n    for (int i = 0; i < str.size(); ++i)\n        vec[i] = -1;\n\n    \/\/ Initialize result to -1 to indicate that the longest substring is not found yet.\n    int result = -1;\n\n    \/\/ Find the longest repeating substring in O(n*n) time.\n    for (int i = 0; i < str.size(); ++i) {\n        for (int j = i + 1; j < str.size(); ++j) {\n            \/\/ Check that the substring is not duplicated at the current position.\n","language":"cpp"}
{"task_id":"MBCPP\/208","completion":"  if (num.length() == 0) {\n    return false;\n  }\n\n  return (\n    num.search(string(\".\", 2)) != string(\"-\").any() &&\n    num.search(string(\".\", 2), num.length() - 1) == string(\"-\").any()\n  );\n}","language":"cpp"}
{"task_id":"MBCPP\/209","completion":"    if (heap.size() == 0) {\n        return heap;\n    }\n\n    if (heap[0] < a) {\n        heap[0] = a;\n    }\n\n    heapify(heap, 0);\n\n    return heap;\n}","language":"cpp"}
{"task_id":"MBCPP\/210","completion":"    return Regex(\"[a-zA-Z0-9]{1,10}\").test(str);\n}","language":"cpp"}
{"task_id":"MBCPP\/211","completion":"    int count = 0;\n    int mask = 1;\n\n    for (int i = 0; i < 32; ++i) {\n        if ((mask & n) != 0) {\n            ++count;\n        }\n        mask <<= 1;\n    }\n\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/212","completion":"    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        count += i * i * i * i;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/213","completion":"    vector<string> newStringTup = testTup1;\n    for (int i = 0; i &lt; testTup2.size(); i++) {\n        newStringTup.push_back(testTup2[i]);\n    }\n    return newStringTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/214","completion":"    return radian * 180 \/ PI;\n}","language":"cpp"}
{"task_id":"MBCPP\/217","completion":"    vector<string> letters = str.begin();\n    for (int i = 0; i < letters.size(); i++) {\n        if (letters[i] == letters[i + 1]) {\n            return letters[i];\n        }\n    }\n    return \"\\x00\";\n}","language":"cpp"}
{"task_id":"MBCPP\/218","completion":"    return (a * b - Math.abs(a - b) + 1) \/ 2;\n}","language":"cpp"}
{"task_id":"MBCPP\/219","completion":"    vector<int> res = vector<int>();\n    for (int i = 0; i < testTup.size(); i++) {\n        int min_temp = i;\n        for (int j = i + 1; j < testTup.size(); j++) {\n            if (testTup[j] < testTup[min_temp]) {\n                min_temp = j;\n            }\n        }\n        if (min_temp != i) {\n            swap(testTup, i, min_temp);\n        }\n        if (k == 1) {\n            break;\n        }\n        k--;\n    }\n    res.push_back(testTup[0]);\n    res.push_back(testTup[testTup.size() - 1]);\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/220","completion":"  string result = string();\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == ',' || text[i] == ' ' || text[i] == '.') {\n      result += text[i];\n    } else {\n      result += \":\";\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    result = result.substring(0, result.length() - 1);\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/221","completion":"  \/\/ return the first even number from the list.\n  \/\/ You may assume that the list is not empty.\n  \/\/ Hint: there's no need to consider even numbers -- only odd ones!\n  return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/222","completion":"    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/223","completion":"  int i,j,count=0;\n  for(i=0; i<n; i++) {\n    count = 0;\n    for(j=0; j<n; j++) {\n      if (arr[i] == x) {\n        count++;\n      }\n      if (count > n\/2) {\n        break;\n      }\n    }\n    if (count < n\/2) {\n      return false;\n    }\n  }\n  return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/224","completion":"  int num_set_bits = 0;\n  while (n > 0) {\n    num_set_bits++;\n    n &= n - 1;\n  }\n  return num_set_bits;\n}","language":"cpp"}
{"task_id":"MBCPP\/225","completion":"    if (low >= high) {\n        return arr[low];\n    }\n    int mid = (low + high) >> 1;\n    if (mid < high && arr[mid+1] < arr[mid]) {\n        return arr[mid+1];\n    } else if (mid > low && arr[mid-1] > arr[mid]) {\n        return arr[mid];\n    }\n    if (arr[low] <= arr[mid]) {\n        return findMin(arr, low, mid);\n    } else {\n        return findMin(arr, mid+1, high);\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/226","completion":"    string result = \"\";\n    for(int i = 0; i < str.size(); ++i) {\n        if (i % 2 != 0) {\n            result += str[i];\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/227","completion":"    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/228","completion":"  return (n >> l) & 1 == 0 && (n >> r) & 1 == 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/229","completion":"    vector<int> res;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > 0) {\n            res.push_back(arr[i]);\n        } else {\n            if (res.size() > 0) {\n                res.push_back(res.back());\n            } else {\n                res.push_back(arr[i]);\n            }\n        }\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/230","completion":"  string tmp;\n\n  \/\/ find blank spaces\n  for(int i = 0; i < str1.length(); i++) {\n    if (str1[i] == chr) {\n      \/\/ replace them with any character\n      tmp = str1.substr(0, i) + \"X\" + str1.substr(i + 1);\n      str1 = tmp;\n    }\n  }\n\n  return str1;\n}","language":"cpp"}
{"task_id":"MBCPP\/231","completion":"  \/\/ If triangle is not possible return 0\n  if (n < 3) {\n    return 0;\n  }\n  \/\/ Initialize first sum\n  int sum = 0;\n  \/\/ For each row\n  for (int i = 0; i < n; i++) {\n    \/\/ Initialize maxSum with current row values\n    int maxSum = 0;\n    \/\/ For each column in current row\n    for (int j = 0; j < n; j++) {\n      \/\/ Check if it is possible to sum the values with the current row and get the max sum\n      if (maxSum < tri[i][j] + tri[i + 1][j] + tri[i + 2][j]) {\n        maxSum = tri[i][j] + tri[i + 1][j] + tri[i + 2][j];\n      }\n    }\n    \/\/ Add the maxSum to the total sum\n    sum += maxSum","language":"cpp"}
{"task_id":"MBCPP\/232","completion":"  vector<int> v;\n\n  for (int i = n ; i > 0 ; i--) {\n    int m = 0;\n    for (int j = 0; j < list1.size(); j++) {\n      if (list1[j] > list1[m]) m = j;\n    }\n    v.push_back(list1[m]);\n    list1.erase(m);\n  }\n  return v;\n}","language":"cpp"}
{"task_id":"MBCPP\/233","completion":"    double d = 2 * r * h + h * h * Math.PI;\n    double s = r * r + h * h;\n    return d \/ s;\n}","language":"cpp"}
{"task_id":"MBCPP\/234","completion":"    int sum = 0;\n    for (int i = 0; i < l; i++) {\n        for (int j = 0; j < l; j++) {\n            for (int k = 0; k < l; k++) {\n                if (i != 0 && i != l - 1 && j != 0 && j != l - 1 && k != 0 && k != l - 1) {\n                    sum = sum + 4;\n                }\n                else if (i == 0 || i == l - 1 || j == 0 || j == l - 1 || k == 0 || k == l - 1) {\n                    sum = sum + 2;\n                }\n                else {\n                    sum = sum + 1;\n                }\n            }\n        }\n    }\n    return sum;","language":"cpp"}
{"task_id":"MBCPP\/235","completion":"    \/\/ set first even bit.\n    n |= (1 << (n - 1)) & ~(1 << (n - 2));\n    \/\/ set second even bit.\n    n |= (1 << (n - 1)) & ~(1 << (n - 3));\n    \/\/ set first odd bit.\n    n |= (1 << (n - 1)) & ~(1 << (n - 4));\n    \/\/ set second odd bit.\n    n |= (1 << (n - 1)) & ~(1 << (n - 5));\n    \/\/ set last odd bit.\n    n |= (1 << (n - 1)) & ~(1 << (n - 6));\n\n    return n;\n}","language":"cpp"}
{"task_id":"MBCPP\/236","completion":"  if(n < 3 || k < 2) return -1;\n\n  \/\/ create a list of integers of length n\n  int* list = new int[n];\n\n  \/\/ populate the list with integers starting from 1\n  for(int i = 0; i < n; i++) {\n    list[i] = i+1;\n  }\n\n  \/\/ traverse the list in a BFS manner\n  int count = 0;\n  int i, j;\n  for(i = 0; i < n; i++) {\n    for(j = i+1; j < n; j++) {\n      if((list[i]+list[j]) % k == 0) count++;\n    }\n  }\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/238","completion":"    int count = 0;\n\n    for (int i = 0; i < str.size(); i++) {\n        count += numberOfSubstrings(str.substr(i+1));\n    }\n\n    return count + str.size() - 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/239","completion":"\treturn (int)(m\/n)*(int)(m\/n+1)\/(int)(2*(m\/n+1));\n}","language":"cpp"}
{"task_id":"MBCPP\/241","completion":"\t\/\/ TODO Auto-generated method stub\n\tvector<vector<string>> array3d;\n\tfor (int i = 0; i < m; ++i) {\n\t\tfor (int j = 0; j < n; ++j) {\n\t\t\tfor (int k = 0; k < o; ++k) {\n\t\t\t\tarray3d.push_back({{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}});\n\t\t\t}\n\t\t}\n\t}\n\treturn array3d;\n}","language":"cpp"}
{"task_id":"MBCPP\/242","completion":"  int n;\n  int count = 0;\n\n  for(n = 0; n < str1.size(); n++) {\n    ++count;\n  }\n\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/244","completion":"    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/245","completion":"    vector<int> dp(n, 0);\n    vector<int> max(n, 0);\n\n    dp[0] = arr[0];\n    for (int i = 1; i < n; i++) {\n        dp[i] = max(arr[i], dp[i - 1]);\n    }\n\n    int maxSoFar = 0;\n    for (int i = 0; i < n; i++) {\n        maxSoFar = max(maxSoFar, dp[i]);\n        maxSoFar = max(maxSoFar, max(arr[i], dp[i + 1]) + arr[i]);\n    }\n    return maxSoFar;\n}","language":"cpp"}
{"task_id":"MBCPP\/246","completion":"    double x = 1.0;\n    double y = 2.0;\n    double p = 1.0;\n    while (p - y > 0.00001) {\n        double q = (x + y) \/ 2.0;\n        if (number < q * q) {\n            y = x;\n            x = q;\n        } else {\n            p = q;\n        }\n    }\n    return x;\n}","language":"cpp"}
{"task_id":"MBCPP\/247","completion":"    vector<int> v(0);\n    int i, j, max = 0;\n    for (i = 0; i < str.size(); i++) {\n        int p = 0;\n        while (i - p >= 0 && i + p < str.size() && str[i - p] == str[i + p]) {\n            p++;\n        }\n        v.push_back(max = Math.max(max, p));\n    }\n    for (i = 0; i < max; i++) {\n        for (j = 0; j < max - i - 1; j++) {\n            if (v[j] + 1 < v[j + 1]) {\n                v[j] = v[j] + 1;\n                v[j + 1] = v[j + 1] - 1;\n            }\n        }\n    }\n","language":"cpp"}
{"task_id":"MBCPP\/248","completion":"    double sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += 1.0 \/ i;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/249","completion":"    vector<int> intersection = {0};\n    for (int i = 0; i < arrayNums1.size(); i++) {\n        for (int j = 0; j < arrayNums2.size(); j++) {\n            if (arrayNums1[i] == arrayNums2[j]) {\n                intersection.push_back(arrayNums1[i]);\n            }\n        }\n    }\n    return intersection;\n}","language":"cpp"}
{"task_id":"MBCPP\/250","completion":"    int count = 0;\n\n    \/\/ Start at 1 since the index 0 is the value to count.\n    for (int i = 1; i < tup.size(); i++) {\n        if (x == tup[i]) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/251","completion":"    vector<string> new_list;\n    new_list.push_back(element);\n    for (int i=0; i<list.size(); i++) {\n        new_list.push_back(list[i]);\n    }\n    return new_list;\n}","language":"cpp"}
{"task_id":"MBCPP\/252","completion":"  double complex = 0.;\n  for (int i = 0; i < numbers; i++) {\n    complex += 1.0;\n  }\n  double polar = 2.0 * M_PI * complex;\n  return {complex, polar};\n}","language":"cpp"}
{"task_id":"MBCPP\/253","completion":"  int n = list1.size();\n  vector<int> list2;\n  for(int i = 0; i < n; i++) {\n    list2.push_back(list1[i]);\n  }\n  int c = 0;\n  for(int i = 0; i < n; i++) {\n    if(list2[i] == i) {\n      c++;\n    }\n  }\n  return c;\n}","language":"cpp"}
{"task_id":"MBCPP\/254","completion":"    vector<string> result;\n    for (auto word : text.words()) {\n        if (word.find(\"a\") != word.end() - 1 || word.find(\"e\") != word.end() - 1) {\n            continue;\n        }\n        result.push_back(word);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/255","completion":"    vector<vector<string>> res;\n    res.push_back(l);\n    if (l.size() > n) {\n        vector<string> v = l[n];\n        l[n] = l[0];\n        l[0] = v;\n        res = combinationsColors(l, n - 1);\n        for (size_t i = 1; i < res.size(); ++i) {\n            vector<string> p = res[i - 1];\n            vector<string> s = res[i];\n            for (size_t j = 0; j < p.size(); ++j) {\n                s.push_back(p[j]);\n            }\n        }\n        l[n] = l[0];\n        l[0] = v;\n        res.push_back(l);\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/256","completion":"  \/\/ TODO: Implement this function\n}","language":"cpp"}
{"task_id":"MBCPP\/257","completion":"    vector<int> v = new vector<int>();\n    v.push_back(a);\n    v.push_back(b);\n    return v;\n}","language":"cpp"}
{"task_id":"MBCPP\/258","completion":"    return arrayNums.stream()\n                    .filter(num -> num % 2 == 1)\n                    .count();\n}","language":"cpp"}
{"task_id":"MBCPP\/259","completion":"    vector<vector<int>> res;\n    \/\/ TODO\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/260","completion":"    int count = 0;\n    int nMinusOne = n - 1;\n    int firstFactor = 2;\n    while (nMinusOne > 1 && firstFactor < nMinusOne) {\n        firstFactor++;\n        if (nMinusOne % firstFactor == 0) {\n            nMinusOne \/= firstFactor;\n            count++;\n        }\n    }\n    return firstFactor * (count + 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/261","completion":"    vector<int> output;\n\n    output.resize(testTup1.size());\n    int count = testTup2.size();\n    int sum = 0;\n\n    for(int i = 0; i < count; i++) {\n        output[i] = testTup1[i] \/ testTup2[i];\n    }\n\n    return output;\n}","language":"cpp"}
{"task_id":"MBCPP\/263","completion":"    unordered_map<string, int> merged = unordered_map<string, int>::new(d1.size());\n    for (auto &amp;kv : d1) {\n        merged[kv.first] = kv.second;\n    }\n    for (auto &amp;kv : d2) {\n        if (!merged.member_exists(kv.first)) {\n            merged[kv.first] = kv.second;\n        } else {\n            merged[kv.first] = Math::max(merged[kv.first], kv.second);\n        }\n    }\n    return merged;\n}","language":"cpp"}
{"task_id":"MBCPP\/264","completion":"  return hAge * 7;\n}","language":"cpp"}
{"task_id":"MBCPP\/266","completion":"  int p, p1, p2, area;\n  int side;\n\n  side = 2 * l + 1;\n\n  p1 = side * side;\n  p2 = 2 * side + 1;\n  p = 3 * side - 1;\n  area = p1 * p2 * p;\n\n  return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/267","completion":"  int sum = 0;\n  for (int i = 1; i <= n; ++i) {\n    sum += i * i;\n  }\n  return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/268","completion":"\tint result = 1;\n\tint first = 1;\n\tint second = 2;\n\tfor (int i = 0; i < n; i++) {\n\t\tresult = first + second;\n\t\tfirst = second;\n\t\tsecond = result;\n\t}\n\treturn result;\n}","language":"cpp"}
{"task_id":"MBCPP\/269","completion":"    string s = \"\";\n    int value;\n\n    for (int i = 0; i < k.length(); i++) {\n        char c = k[i];\n        if (c >= 'A' && c <= 'Z') {\n            c = c + 'a'-'A';\n        }\n        else if (c >= 'a' && c <= 'z') {\n            c = c + 'A'-'a';\n        }\n\n        s += c;\n    }\n\n    value = atoi(s);\n    return value;\n}","language":"cpp"}
{"task_id":"MBCPP\/270","completion":"    \/\/ O(n)\n    int sum = 0;\n    int sum_even_index = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n\n    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0 && i < n) {\n            sum_even_index += arr[i];\n        }\n    }\n\n    return sum + sum_even_index;\n}","language":"cpp"}
{"task_id":"MBCPP\/271","completion":"  \/*\n  We want to find the sum of fifth power of first n even natural numbers.\n  To do that, we want to find the number of sums.\n  So we can use Dynamic Programming (DP).\n  1) Create an array to store the number of sums up to n.\n  2) Create an array to store the sums of the first n natural numbers.\n  3) Iterate over the numbers.\n  4) If the number is even, then add the number to the sum of the first n natural numbers.\n  5) If the number is odd, then add the number to the sum of the number divided by 5 and add the result to the sums of the first n natural numbers.\n  6) Increment the number of sums by 1.\n  7) Return the total sum of the first n natural numbers.\n\n  To calculate the sum of the first n natural numbers,\n  we want to find the sum of the fifth power of each number.\n  Since the fifth power of a number is the same as that number raised to the fifth power,\n  we can find the sum of the fifth power by just finding the sum of","language":"cpp"}
{"task_id":"MBCPP\/273","completion":"    vector<int> tupResult;\n\n    tupResult.resize(testTup1.size());\n\n    for (int i = 0; i < testTup1.size(); i++) {\n        tupResult[i] = testTup1[i] - testTup2[i];\n    }\n\n    return tupResult;\n}","language":"cpp"}
{"task_id":"MBCPP\/274","completion":"    return 2*n*n + n + 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/275","completion":"    vector<int> v;\n    int count = 0;\n    int k = 0;\n\n    for (int i = 0; i < a.size(); i++) {\n        if (count == n) {\n            return k;\n        }\n\n        if (a[i] != m) {\n            v.push_back(a[i]);\n            count++;\n        } else {\n            k = i;\n        }\n    }\n    return k;\n}","language":"cpp"}
{"task_id":"MBCPP\/276","completion":"    return 3.14 * r * r * h \/ 2.0;\n}","language":"cpp"}
{"task_id":"MBCPP\/277","completion":"    unordered_map<string, int> filtered_dict;\n\n    for (unordered_map<string, int>::const_iterator keys = dict.begin(); keys != dict.end(); keys++) {\n        if (dict[keys] == n)\n            filtered_dict[keys] = dict[keys];\n    }\n\n    return filtered_dict;\n}","language":"cpp"}
{"task_id":"MBCPP\/279","completion":"    int count = 1;\n    for(int i = 1; i <= n; i++) {\n        count += (4 * i - 1) \/ 3;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/281","completion":"    int n = testList.size();\n    vector<int> uniqueList;\n    uniqueList.push_back(testList[0]);\n    for (int i = 1; i < n; i++) {\n        if (uniqueList[uniqueList.size()-1] == testList[i]) {\n            uniqueList.erase(uniqueList.size()-1);\n        }\n        else {\n            uniqueList.push_back(testList[i]);\n        }\n    }\n    return uniqueList.size() == 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/282","completion":"    return nums1.map(x => nums2.filter(y => x > y).sum());\n}","language":"cpp"}
{"task_id":"MBCPP\/283","completion":"    \/\/ This is an O(n) solution.\n    \/\/ Check each digit.\n    for (int i = 1; i <= n; ++i) {\n        \/\/ Count how many digits are less than or equal to n.\n        int count = 0;\n        while (i <= n) {\n            if (i % 10 == n % 10) {\n                ++count;\n            }\n            i \/= 10;\n        }\n\n        \/\/ Check if the frequency of digits are greater than or equal to n.\n        if (count > n \/ 10) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/285","completion":"    return text.find(\"a\") < 0 ? \"Not matched!\" :\n        text.indexOf(\"a\") < text.indexOf(\"b\") + 1 ? \"Not matched!\" :\n        \"Found a match!\";\n}","language":"cpp"}
{"task_id":"MBCPP\/286","completion":"    int sum = 0;\n    int maxSum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum == k*a[i]) {\n            maxSum = sum;\n        }\n        if (sum > maxSum) {\n            maxSum = sum;\n        }\n    }\n    return maxSum;\n}","language":"cpp"}
{"task_id":"MBCPP\/287","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/288","completion":"    vector<int> res;\n\n    res.push_back(1);\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 1)\n            continue;\n        res.push_back(arr[i]);\n        res.push_back(1);\n        while ((res[res.size() - 1] * res[res.size() - 1] % p) == 1)\n            res.pop_back();\n    }\n    res.push_back(1);\n    res.push_back(1);\n    while ((res[res.size() - 1] * res[res.size() - 1] % p) == 1)\n        res.pop_back();\n    return (res[res.size() - 2] * res[res.size() - 1] % p);\n}","language":"cpp"}
{"task_id":"MBCPP\/289","completion":"  int res = 0;\n\n  int i = 0;\n  while (i < n) {\n    if ((i % 2) == 1) {\n      res++;\n    }\n    i++;\n  }\n\n  return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/291","completion":"  return n == 0 ? 1 : countNoOfWays(n - 1, k) * countNoOfWays(n - 1, k) * k;\n}","language":"cpp"}
{"task_id":"MBCPP\/292","completion":"    return n \/ m;\n}","language":"cpp"}
{"task_id":"MBCPP\/295","completion":"  int sum = 0;\n  for (int i = 1; i < number; i++) {\n    if (number % i == 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/296","completion":"    vector<int> invCount = {0};\n    mergeSort(arr, 0, n-1, invCount);\n    return invCount[0];\n}","language":"cpp"}
{"task_id":"MBCPP\/297","completion":"    vector<int> flat = {0};\n    for (auto v : list1) {\n        flat += v;\n    }\n    return flat;\n}","language":"cpp"}
{"task_id":"MBCPP\/300","completion":"    double ans = 0.0;\n    for (int i = 1; i <= n \/ 2; i++)\n        for (int j = 1; j <= n \/ 2; j++)\n            if (i + j == n) ans++;\n    return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/302","completion":"  int num = 0;\n  int mask = 1;\n\n  for (int i = 0; i < 32; i++) {\n    if ((n & mask) != 0) {\n      num++;\n    }\n\n    mask <<= 1;\n  }\n\n  return num;\n}","language":"cpp"}
{"task_id":"MBCPP\/303","completion":"    vector<int> b;\n    vector<int> c;\n    b.push_back(a[0]);\n    c.push_back(a[1]);\n    c.push_back(a[2]);\n\n    for (int i = 2; i < n; i++) {\n        if (a[i - 1] > a[i]) {\n            c.push_back(a[i]);\n            b.push_back(a[i - 1]);\n        }\n    }\n    vector<int> d = c;\n    c = b;\n    b = d;\n    b.push_back(c.back());\n\n    for (int i = 0; i < n; i++) {\n        if (c[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/304","completion":"  int i = 0;\n  int result = 0;\n  for (i = 0; i < rotations; i++) {\n    index = (index + ranges[i].size()) % arr.size();\n    result = arr[index];\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/305","completion":"    vector<string> result = {\"\",\"\"};\n    for (auto word : words)\n        if (word.c_str().startsWith(\"p\"))\n            result.push_back(word);\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/306","completion":"    \/\/ Write your code here\n    if (n == 0) {\n        return 0;\n    }\n\n    int prefix = a[0];\n\n    if (index < n) {\n        prefix += maxSumIncreasingSubseq(a, n - 1, index + 1, k);\n    }\n\n    if (index > k) {\n        prefix += a[index - 1];\n    }\n\n    if (prefix > a[index]) {\n        return prefix;\n    }\n\n    return maxSumIncreasingSubseq(a, n - 1, index + 1, k);\n}","language":"cpp"}
{"task_id":"MBCPP\/308","completion":"    vector<int> results(n);\n    for (int i = 0; i < n; i++)\n        results[i] = 0;\n\n    for (int i = 0; i < nums1.size(); i++)\n        for (int j = 0; j < nums2.size(); j++)\n            if ((nums1[i] * nums2[j]) > results[i]) {\n                results[i] = nums1[i] * nums2[j];\n            }\n\n    return results;\n}","language":"cpp"}
{"task_id":"MBCPP\/309","completion":"    return a > b ? a : b;\n}","language":"cpp"}
{"task_id":"MBCPP\/310","completion":"  vector<string> str2 = {0};\n  for (int i = 0; i < str1.length(); i++) {\n    str2[i] = str1[i];\n  }\n  return str2;\n}","language":"cpp"}
{"task_id":"MBCPP\/311","completion":"    while (n > 0) {\n        n = n >> 1;\n    }\n    return n;\n}","language":"cpp"}
{"task_id":"MBCPP\/312","completion":"    \/\/return 2 * 3.14 * r * r * h + 2 * 3.14 * r * h * h \/ 3;\n    \/\/return 4 * 3.14 * r * r * h;\n    return 3.14 * r * r * h;\n}","language":"cpp"}
{"task_id":"MBCPP\/314","completion":"    \/\/ init the variables\n    vector<int> dp{};\n    int maxSum = 0;\n\n    \/\/ fill dp\n    for(int i = 0; i &lt; n; i++) {\n        dp[i] = new vector<int>(n, 0);\n        for(int j = 0; j &lt; n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\n    \/\/ calculate the max sum for dp\n    for(int i = 1; i &lt;= n; i++) {\n        for(int j = 0; j &lt;= i; j++) {\n            if (i == 1) {\n                dp[i][j] = grid[i][j];\n            } else if(j == 0) {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n            } else if(j == i) {\n               ","language":"cpp"}
{"task_id":"MBCPP\/315","completion":"    int i;\n    string ans = \"-1\";\n    for (i = 0; i < str.length(); i++) {\n        if (i % 2 == 1)\n            if (str[i] != ' ')\n                ans = str[i];\n    }\n    return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/316","completion":"    if (a.size() == 0)\n        return -1;\n    int lo = 0;\n    int hi = a.size() - 1;\n    int mid;\n    while (lo <= hi) {\n        mid = lo + (hi - lo) \/ 2;\n        if (a[mid] < x)\n            lo = mid + 1;\n        else if (a[mid] > x)\n            hi = mid - 1;\n        else\n            return mid;\n    }\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/318","completion":"    int l, h, w;\n    l = 1;\n    h = s \/ 2;\n    w = s \/ 2;\n    while(l <= h && l <= w) {\n        if(l == 1 || l == s \/ 2 || h == s \/ 2 || w == s \/ 2)\n            break;\n        int a = (l * l * l) + (l * l) + l;\n        int b = (h * h * h) + (h * h) + h;\n        int c = (w * w * w) + (w * w) + w;\n        if(a > b && a > c)\n            return a;\n        else if(b > a && b > c)\n            return b;\n        else\n            return c;\n        l++;\n        h--;\n        w++;\n    }\n    return 0","language":"cpp"}
{"task_id":"MBCPP\/319","completion":"    vector<string> result;\n\n    \/\/ Get all match of 5+ characters.\n    string regex = \"(\\\\w){5,}\";\n    regex.global = true;\n\n    \/\/ Find all matches in given string.\n    regex.lastIndex = 0;\n\n    while (regex.find(text)) {\n        result.push_back(regex.match(text).group());\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/320","completion":"    int sum = (n + 1) * (n + 2) \/ 2;\n\n    for (int i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n\n    int sumOfSquares = (n + 1) * (n + 2) * (2 * n + 1) \/ 6;\n\n    return sum * sum - sumOfSquares;\n}","language":"cpp"}
{"task_id":"MBCPP\/321","completion":"    \/\/ This will work in the C++ style.\n    \/\/ s.replaceAll(regmatch(\"(\\\\d{2})(\\\\d{4})(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{1})\", \"111111\"))\n\n    \/\/ This will work in the Rust style.\n    s = s.replace(\"(\\\\d{2})(\\\\d{4})(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{1})\", \"$1-$2-$3-$4-$5-$6\");\n\n    return s;\n}","language":"cpp"}
{"task_id":"MBCPP\/322","completion":"    vector<int> positionMin = vector<int>();\n    int index_min = 0;\n    int i;\n    for (i = 1; i < list1.size(); i++) {\n        if (list1[i] < list1[index_min]) {\n            index_min = i;\n        }\n    }\n\n    for (i = 0; i < list1.size(); i++) {\n        if (i != index_min && list1[i] == list1[index_min]) {\n            positionMin.push_back(i);\n        }\n    }\n\n    return positionMin;\n}","language":"cpp"}
{"task_id":"MBCPP\/323","completion":"    \/\/ write your code here\n    int k = 0;\n    int j = 1;\n\n    while (j < n) {\n        if (k % 2 == 0) {\n            arr[k] = arr[j];\n            j++;\n        } else {\n            arr[k] = -arr[j];\n            j++;\n        }\n        k++;\n    }\n\n    return arr;\n}","language":"cpp"}
{"task_id":"MBCPP\/324","completion":"  vector<int> sum = testTuple.begin();\n  int i = 0;\n  while (i < testTuple.size()) {\n    sum.push_back(testTuple[i] + testTuple[i + 1]);\n    i += 2;\n  }\n  return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/325","completion":"    int sqrt = (int)sqrt(n);\n    if(sqrt*sqrt == n) return 1;\n    return 1 + min(getMinSquares(n - sqrt*sqrt), getMinSquares(n - sqrt*sqrt + 1));\n}","language":"cpp"}
{"task_id":"MBCPP\/326","completion":"    int counter = 0, max = 0, current;\n    string maxStr = \"\";\n\n    for (string str : testList) {\n        counter = 0;\n        for (int i = 0; i < str.length; i++) {\n            for (int j = i + 1; j < str.length + 1; j++) {\n                for (int k = 0; k < str.length; k++) {\n                    current = (str[i] == str[j] && str[i] == str[k]) ? 1 : 0;\n                    counter += current;\n                }\n            }\n        }\n        if (counter > max) {\n            max = counter;\n            maxStr = str;\n        }\n    }\n\n    return maxStr;\n}","language":"cpp"}
{"task_id":"MBCPP\/327","completion":"    return (x % 2 == 0 && y % 2 == 0 && z % 2 != 0 && x + y >= z)\n           || (x % 2 != 0 && y % 2 != 0 && z % 2 == 0 && x + z >= y)\n           || (x % 2 != 0 && y % 2 == 0 && z % 2 != 0 && y + z >= x);\n}","language":"cpp"}
{"task_id":"MBCPP\/328","completion":"    if(n == m) {\n        return list1;\n    }\n\n    int temp = list1[m];\n    int j = n;\n    for(int i = m; i > j; i--) {\n        list1[i] = list1[i - 1];\n    }\n    list1[j] = temp;\n    return list1;\n}","language":"cpp"}
{"task_id":"MBCPP\/329","completion":"  int count = 0;\n  for(int i = 0; i < list.size(); i++) {\n    if(list[i] < 0) count++;\n  }\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/330","completion":"    vector<string> char_set = {\"\", \"\", \"\", \"\", \"\"};\n    int index;\n    \/\/ split the string into word by white space character\n    string[] words = text.split(\"\\\\s+\");\n    \/\/ iterate over words\n    for (index = 0; index < words.size(); index++) {\n        \/\/ remove the empty string at the begining of the array\n        if (index == 0)\n            char_set[0] = words[index];\n        else {\n            \/\/ if a word contains three characters, then set the next three characters in the array to empty string\n            \/\/ since '3' is not allowed in the first char of any word in this case.\n            if (char_set[0].size() == 3)\n                char_set[1] = words[index];\n            \/\/ if a word contains four characters, then set the next four characters in the array to empty string\n            \/\/ since '4' is not allowed in the first char of any word in this case.\n            else if","language":"cpp"}
{"task_id":"MBCPP\/331","completion":"    int count = 0;\n    while (n > 0) {\n        if ((n & 1) == 1) {\n            count++;\n        }\n        n >>>= 1;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/332","completion":"    unordered_map<string, int> m;\n\n    for (size_t i = 0; i < str1.length(); i++) {\n        if (i == 0) {\n            m[str1[i]] = 1;\n        } else {\n            m[str1[i]] = m[str1[i - 1]] + 1;\n        }\n    }\n    return m;\n}","language":"cpp"}
{"task_id":"MBCPP\/334","completion":"    if (a + b <= c || a + c <= b || b + c <= a) {\n        return false;\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/335","completion":"    int result;\n    int x = a;\n\n    for (int i = 0; i < n; i++) {\n        x += d;\n        result = x;\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/336","completion":"    return monthname1.size() == 3 && monthname1[1] == \"February\";\n}","language":"cpp"}
{"task_id":"MBCPP\/337","completion":"  vector <int> matches(size(text) + 1);\n  matches[0] = 0;\n  for (size_t i = 0; i < size(text); i++) {\n    matches[i + 1] = matches[i] + 1;\n    if (text[i] == '.') matches[i + 2] = matches[i] + 1;\n  }\n  string res = string();\n  if (matches[size(text)] >= 1) {\n    \/\/ matched at the end\n    matches[size(text)] = -1;\n    for (int i = 0; i < size(text); i++) {\n      if (text[i] == '.') {\n        \/\/ punctuation (optional)\n        if (matches[i + 1] >= 1) {\n          res = append(res, \"Found a match!\");\n        }\n      } else {\n        \/\/ not","language":"cpp"}
{"task_id":"MBCPP\/338","completion":"    int n = s.size();\n    string equal = \"\";\n    int count = 0;\n\n    for (int i = 0; i < n; i++) {\n        equal += s.at(i);\n        for (int j = i + 1; j <= n; j++) {\n            if (equal.endWith(s.at(j))) count++;\n        }\n        equal = \"\";\n    }\n\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/339","completion":"    \/\/ 3:1\n    while (x % y != 0) {\n        if (y == 1) {\n            return -1;\n        }\n        \/\/ 1:1\n        y--;\n    }\n    return y;\n}","language":"cpp"}
{"task_id":"MBCPP\/340","completion":"  \/\/ TODO\n  \/\/ Use std::sum to find the sum of the three smallest numbers and return the result.\n}","language":"cpp"}
{"task_id":"MBCPP\/341","completion":"    vector<int> v;\n    for (auto &n : s) {\n        v.push_back(n);\n    }\n    return v;\n}","language":"cpp"}
{"task_id":"MBCPP\/342","completion":"  auto min = minvalue(list.begin(), list.end());\n  auto max = maxvalue(list.begin(), list.end());\n  return make_pair(min, max);\n}","language":"cpp"}
{"task_id":"MBCPP\/343","completion":"    vector<int> v(new int[2], 0);\n\n    v[0] = length(s);\n    for (auto c : s) {\n        v[0] = v[0] - 1;\n        if (c.isalpha()) v[1]++;\n    }\n    return v;\n}","language":"cpp"}
{"task_id":"MBCPP\/344","completion":"    int i, j;\n    int result = 0;\n\n    \/\/ TODO: Write your code here.\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/345","completion":"  int max = -1;\n  vector<int> res;\n  int i, j;\n  for (i = 0; i < nums.size(); ++i) {\n    if (max == -1 || nums[i] != max) {\n      if (i == 0) res.push_back(0);\n      else res.push_back(1);\n      max = nums[i];\n    }\n    for (j = i - 1; j >= 0; --j) {\n      if (nums[j] != max) {\n        break;\n      }\n      res.push_back(res.back() + 1);\n    }\n  }\n  if (i == 0) {\n    res.push_back(0);\n  } else {\n    res.push_back(1);\n  }\n  for (j = i - 1; j >= 0; --j)","language":"cpp"}
{"task_id":"MBCPP\/346","completion":"  \/\/ write code here\n}","language":"cpp"}
{"task_id":"MBCPP\/347","completion":"  return (m*m) + (n*n);\n}","language":"cpp"}
{"task_id":"MBCPP\/348","completion":"    return findWays_(m, 0, 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/349","completion":"    if (str.length() == 0) {\n        return string(\"Yes\");\n    }\n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] != '1' && str[i] != '0') {\n            return string(\"No\");\n        }\n    }\n    return string(\"Yes\");\n}","language":"cpp"}
{"task_id":"MBCPP\/350","completion":"    int n = s.size();\n    int &n_ones = 0;\n    int i, j;\n    for (i = 0; i < n-1; i++) {\n        j = i+1;\n        while (j < n && s[i] == s[j]) {\n            j++;\n            n_ones++;\n        }\n        if (j == n) {\n            break;\n        }\n    }\n    return n - n_ones;\n}","language":"cpp"}
{"task_id":"MBCPP\/351","completion":"    \/\/ find the first element occurring k times\n    \/\/ return the first one found\n\n    \/\/ O(nlogn)\n    if (n < 0 || k < 0 || k > n) {\n        return 0;\n    }\n    vector<int> count(k, 0);\n    int first = 0;\n    int last = 0;\n    vector<int> arrCopy(arr);\n\n    for (int i = 0; i < n; ++i) {\n        int key = arrCopy[i];\n        if (count[key] < k) {\n            count[key] += 1;\n            last = i;\n        } else if (count[key] == k) {\n            count[key] += 1;\n            last = i;\n            first = i;\n            break;\n        }\n    }\n    return arrCopy[first];\n}","language":"cpp"}
{"task_id":"MBCPP\/352","completion":"    bool unique = true;\n    vector <int> v = stringToInt(str);\n\n    for (int i = 0; i < v.size(); i++) {\n        int val = v[i];\n        for (int j = i + 1; j < v.size(); j++) {\n            if (val == v[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}","language":"cpp"}
{"task_id":"MBCPP\/353","completion":"  vector<vector<int>> newlist = {{0}};\n  for (int i = 0; i &lt; list1.size(); i++) {\n    vector<int> vec = list1[i];\n    vector<int> vec2 = {{0}};\n    vec2.resize(n);\n    for (int j = 0; j &lt; n; j++) {\n      vec2[j] = vec[j];\n    }\n    newlist.push_back(vec2);\n  }\n  return newlist;\n}","language":"cpp"}
{"task_id":"MBCPP\/354","completion":"\tint i, sum = 1;\n\tfor (i = 1; i <= n; ++i) {\n\t\tsum = (sum + a) % d;\n\t}\n\treturn sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/355","completion":"    \/\/ Count the number of rectangles in a circle of radius r.\n\n    \/\/ 1. If the radius is 0 or negative, return 0.\n    if(radius < 0) {\n        return 0;\n    }\n\n    \/\/ 2. If the radius is 1, return 1.\n    if(radius == 1) {\n        return 1;\n    }\n\n    \/\/ 3. Compute the area of a circle of radius r.\n    double area = radius * radius * 3.14159;\n\n    \/\/ 4. Compute the number of rectangles.\n    return (int) (area \/ 4.0);\n}","language":"cpp"}
{"task_id":"MBCPP\/356","completion":"    return a + b + 180;\n}","language":"cpp"}
{"task_id":"MBCPP\/357","completion":"    int maxValue = -1;\n    int counter = 0;\n    for (vector<int> record : testList) {\n        int value = getMax(record);\n        if (value > maxValue) {\n            maxValue = value;\n        }\n        counter++;\n    }\n    return maxValue;\n}","language":"cpp"}
{"task_id":"MBCPP\/358","completion":"  vector<int> result;\n  int i, j;\n  result.resize(nums1.size());\n\n  for (i = 0; i < nums1.size(); i++) {\n    result[i] = 0;\n    for (j = 0; j < nums2.size(); j++) {\n      if (nums1[i] % nums2[j] == 0) {\n        result[i] = nums1[i] \/ nums2[j];\n        break;\n      }\n    }\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/359","completion":"  return b*b - 4*a*c >= 0 ? \"Yes\" : \"No\";\n}","language":"cpp"}
{"task_id":"MBCPP\/360","completion":"    int carol = 0;\n    for (int i = 1; i <= n; i++) {\n        carol = (carol * 3) + 7;\n    }\n    return carol;\n}","language":"cpp"}
{"task_id":"MBCPP\/363","completion":"  vector<vector<int>> list = {{}};\n  for (int i = 0; i < testList.size(); i++) {\n    vector<int> tempList = {{}};\n    for (int j = 0; j < testList[i].size(); j++) {\n      int temp = testList[i][j];\n      for (int k1 = 0; k1 < k; k1++) {\n        temp++;\n      }\n      tempList.push_back(temp);\n    }\n    list.push_back(tempList);\n  }\n  return list;\n}","language":"cpp"}
{"task_id":"MBCPP\/364","completion":"    int flipCount = 0;\n    int prevChar = 0;\n    for (int i = 0; i < str.size(); ++i) {\n        if (str[i] == prevChar) {\n            flipCount += 1;\n        } else {\n            flipCount = 1;\n        }\n        prevChar = str[i];\n    }\n    return flipCount;\n}","language":"cpp"}
{"task_id":"MBCPP\/365","completion":"    int count = 0;\n    while (n != 0) {\n        count++;\n        n \/= 10;\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/366","completion":"    if (listNums.size() < 2) {\n        return 0;\n    }\n    int max = -1;\n    for (int i = 0; i < listNums.size() - 1; i++) {\n        int product = listNums[i] * listNums[i + 1];\n        if (product > max) {\n            max = product;\n        }\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/368","completion":"    vector<vector<int>> resultTup;\n    for (int i = 0; i &lt; n; i++) {\n        resultTup.push_back(testTup);\n    }\n    return resultTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/369","completion":"  int area = 0;\n  area += l * 2 + w * 2;\n  area += h * 2 + l * 2;\n  area += h * 2 + w * 2;\n  area += l * w * h;\n  return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/370","completion":"    vector<vector<string>> result;\n    int size = price.size();\n\n    \/\/ if not sorted, then do the sort :\n    \/\/    1. sort the price vectors according to the item name\n    \/\/    2. create a new vector which is a copy of the same vector with the sorted items\n    \/\/    3. return the new sorted vector\n    if (size > 1) {\n        \/\/ sort the price vectors\n        std::sort(price.begin(), price.end());\n\n        \/\/ create a copy of the price vectors\n        result = vector<vector<string>>();\n        result.resize(size);\n        for (int i = 0; i &lt; size; ++i) {\n            result[i] = price[i];\n        }\n\n        \/\/ return the new sorted vector\n        return result;\n    } else {\n        return price;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/371","completion":"    \/\/ Find the mid element\n    int midElement;\n    int mid = (leftElement + rightElement) \/ 2;\n\n    \/\/ Find the left half of the array\n    if (mid == leftElement) {\n        return mid;\n    }\n    if (mid == rightElement) {\n        return mid + 1;\n    }\n\n    \/\/ Find the smallest missing element in the left half of the array\n    if (a[leftElement] > a[mid]) {\n        midElement = smallestMissing(a, leftElement, mid - 1);\n    } else {\n        midElement = smallestMissing(a, mid + 1, rightElement);\n    }\n\n    \/\/ Find the smallest missing element in the right half of the array\n    if (a[mid] > a[rightElement]) {\n        return smallestMissing(a, mid + 1, rightElement);\n    }\n    return midElement;\n}","language":"cpp"}
{"task_id":"MBCPP\/372","completion":"    vector<int> minHeap;\n    int size = sizeof(int) * nums.size();\n    minHeap.resize(size);\n    for (int i = 0; i < size; ++i) {\n        heapInsert(minHeap, nums[i]);\n    }\n\n    while (minHeap.size() > 1) {\n        swap(minHeap, 0, minHeap.size() - 1);\n        heapify(minHeap, 0, minHeap.size() - 1);\n    }\n\n    return minHeap;\n}","language":"cpp"}
{"task_id":"MBCPP\/373","completion":"    int vol;\n    vol = l * w * h;\n    return vol;\n}","language":"cpp"}
{"task_id":"MBCPP\/374","completion":"    vector<string> result;\n    permuteHelper(result, str, 0, str.size());\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/375","completion":"    \/\/ base case\n    if (n < m) {\n        return n;\n    }\n    \/\/ recursive case\n    return roundNum(n-m, m) + m;\n}","language":"cpp"}
{"task_id":"MBCPP\/377","completion":"  string result = \"\";\n  for (int i = 0; i < s.size(); ++i)\n    if (s[i] != c[0])\n      result += s[i];\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/378","completion":"    testList.push_back(testList.back());\n    vector<int> ret;\n    ret.reserve(testList.size() - 1);\n\n    for (int i = testList.size() - 1; i >= 0; --i)\n        ret[i] = testList[i];\n\n    return ret;\n}","language":"cpp"}
{"task_id":"MBCPP\/379","completion":"    return 2 * (l * w + w * h + l * h);\n}","language":"cpp"}
{"task_id":"MBCPP\/380","completion":"  vector<vector<int>> matrix;\n  for (int i = 0; i &lt; rownum; i++) {\n    matrix[i] = vector<int>();\n    for (int j = 0; j &lt; colnum; j++) {\n      matrix[i].push_back(i * colnum + j);\n    }\n  }\n  return matrix;\n}","language":"cpp"}
{"task_id":"MBCPP\/382","completion":"    \/\/ TODO: Write your code here.\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/383","completion":"    int i, b;\n    for (i = 0; i < 32; i++) {\n        b = 1 & (n >> i);\n        n = n | (b << i);\n    }\n    return n;\n}","language":"cpp"}
{"task_id":"MBCPP\/384","completion":"    vector<int> freq[n + 1];\n\n    for (int i = 0; i <= n; i++) {\n        freq[i] = vector<int>(0);\n    }\n\n    for (int i = 0; i < arr.size(); i++) {\n        int elem = arr[i];\n        freq[elem].push_back(1);\n    }\n\n    int min = 0;\n    for (int i = 1; i <= n; i++) {\n        if (freq[i].size() > 0) {\n            min = freq[i].back();\n            break;\n        }\n    }\n\n    for (int i = 1; i <= n; i++) {\n        if (freq[i].size() > 0 && freq[i].back() == min) {\n            return i;\n        }\n    }\n\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/385","completion":"    if (n == 0 || n == 1) {\n        return n;\n    }\n    return getPerrin(n - 1) + getPerrin(n - 2) + getPerrin(n - 3);\n}","language":"cpp"}
{"task_id":"MBCPP\/386","completion":"    int n = s.size();\n    string swap = string(\"\");\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] != '[' && s[i] != ']')\n            swap += s[i];\n        else if (s[i] == '[' && s[i + 1] != '[') {\n            swap += s[i];\n            i++;\n        } else if (s[i] == ']' && s[i - 1] != ']') {\n            swap += s[i];\n            count += 2;\n        }\n    }\n    if (swap.size() == 0) return 0;\n    swap = swap.reverse();\n    if (swap.find(string(\"[\"), 0, n) == -1) return count;\n    if (swap.find(string(\"]\"), 0, n) == ","language":"cpp"}
{"task_id":"MBCPP\/387","completion":"    string ret;\n    if (n.length() == 1) {\n        return \"Even\";\n    }\n    if (n[0] == 'A') {\n        if (n[1] == 'B') {\n            if (n[2] == 'C') {\n                if (n[3] == 'D') {\n                    ret = \"Odd\";\n                } else {\n                    ret = \"Even\";\n                }\n            } else {\n                ret = \"Odd\";\n            }\n        } else {\n            ret = \"Even\";\n        }\n    } else {\n        ret = \"Odd\";\n    }\n    return ret;\n}","language":"cpp"}
{"task_id":"MBCPP\/388","completion":"    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/389","completion":"    int dp[101] = {0};\n    for (int i=2; i<=n; i++) {\n        dp[i] = dp[i-1] + dp[i-2] + 1;\n    }\n    return dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/391","completion":"  vector<unordered_map<string, unordered_map<string, int>>> result;\n  result.reserve(l1.size());\n  for (int i = 0; i < l1.size(); i++) {\n    result[i] = {l1[i], {l2[i], l3[i]}};\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/392","completion":"    long sum = 0;\n    int i = 0;\n    while (i < n) {\n        sum += i;\n        i *= 2;\n        if (i >= n) {\n            break;\n        }\n        i = i + 1;\n        sum += i;\n        i = i * 3;\n        if (i >= n) {\n            break;\n        }\n        i = i + 1;\n        sum += i;\n        i = i * 4;\n        if (i >= n) {\n            break;\n        }\n        i = i + 1;\n        sum += i;\n        i = i * 5;\n        if (i >= n) {\n            break;\n        }\n    }\n    return (int)sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/394","completion":"    int result = 0;\n\n    \/\/ Check if number of elements of tuple is 2\n    if (testTup.size() == 2) {\n        int temp1 = testTup[0];\n        int temp2 = testTup[1];\n        if (temp1 != temp2) {\n            result = 1;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/396","completion":"    if (regex(\"^[^a-zA-Z0-9]*$\").test(str)) {\n        string s = \"Valid\";\n        for (int i = 0; i < str.size(); i++) {\n            for (int j = i + 1; j < str.size(); j++) {\n                if (str[i] == str[j]) {\n                    s = \"Invalid\";\n                    break;\n                }\n            }\n        }\n        return s;\n    }\n    return \"Invalid\";\n}","language":"cpp"}
{"task_id":"MBCPP\/397","completion":"    return (a+b+c) \/ 2.0;\n}","language":"cpp"}
{"task_id":"MBCPP\/398","completion":"    int sum = 0;\n    for (auto& n : nums) {\n        sum += n & 0xFFFF;\n    }\n\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/399","completion":"    vector<int> results = vector<int>();\n    int numIters = testTup1.size();\n    for (int i = 0; i < numIters; i++) {\n        int result = testTup1[i] ^ testTup2[i];\n        results.push_back(result);\n    }\n    return results;\n}","language":"cpp"}
{"task_id":"MBCPP\/400","completion":"    int count = 0;\n    int result = 0;\n    vector<int> frequencyVector = {0};\n    vector<int> visitedVector = {0};\n    for (int i = 0; i < testList.size(); i++) {\n        int firstValue = testList[i][0];\n        count = 0;\n        for (int j = 1; j < testList[i].size(); j++) {\n            int secondValue = testList[i][j];\n            int index = firstValue ^ secondValue;\n            if (visitedVector[index] == 0) {\n                count++;\n                visitedVector[index] = 1;\n            }\n        }\n        if (count > 1) {\n            result += count;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/401","completion":"    vector<vector<int>> resTup;\n    int i;\n    for (i = 0; i &lt; testTup1.size(); i++) {\n        resTup.push_back(testTup1[i].plus(testTup2[i]));\n    }\n    return resTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/402","completion":"  if (r <= 0) return 1;\n  if (p == 1) return n;\n  int c = 1;\n  for (int i = 1; i <= r; i++) {\n    c = (c * (n - i + 1)) % p;\n  }\n  return c;\n}","language":"cpp"}
{"task_id":"MBCPP\/403","completion":"  return str.Match(\"^https?:\/\/.*\") && str.Length > 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/404","completion":"    return (a < b) ? a : b;\n}","language":"cpp"}
{"task_id":"MBCPP\/406","completion":"  return \"Odd Parity\";\n}","language":"cpp"}
{"task_id":"MBCPP\/408","completion":"    vector<vector<int>> pairs = { };\n    for (int i = 0; i &lt; k; i++) {\n        vector<int> pair = { };\n        pair.push_back(nums1[i]);\n        pair.push_back(nums2[i]);\n        pairs.push_back(pair);\n    }\n    return pairs;\n}","language":"cpp"}
{"task_id":"MBCPP\/409","completion":"    int result = 0;\n    vector<int> min1 = {Integer.MAX_VALUE, Integer.MAX_VALUE};\n    vector<int> min2 = {Integer.MAX_VALUE, Integer.MAX_VALUE};\n    for (vector<int> t: list1) {\n        if (t[0] < min1[0] || (t[0] == min1[0] && t[1] < min1[1])) {\n            min2 = min1;\n            min1 = t;\n        } else if (t[1] < min2[1] || (t[1] == min2[1] && t[0] < min2[0])) {\n            min2 = t;\n        }\n    }\n    if (min1[0] * min1[1] < min2[0] * min2[1]) {\n        result = min1[0] * min1[1];\n    } else ","language":"cpp"}
{"task_id":"MBCPP\/411","completion":"    \/\/return word.replace(\"_\", \" \").toCamelCase();\n    return word.replace(\"_\", \" \").toRegex().toCamelCase();\n}","language":"cpp"}
{"task_id":"MBCPP\/412","completion":"    int i = 0;\n    vector<int> temp;\n    while (i < l.size()) {\n        if (l[i] % 2 == 0)\n            i++;\n        else\n            temp.push_back(l[i]);\n    }\n    return temp;\n}","language":"cpp"}
{"task_id":"MBCPP\/414","completion":"    return count(list1, list2) > 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/415","completion":"    int n = arr.size();\n    int max_prod = arr[0] * arr[1], max_i = 0, max_j = 0;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            int prod = arr[i] * arr[j];\n            if (prod > max_prod) {\n                max_prod = prod;\n                max_i = i;\n                max_j = j;\n            }\n        }\n    }\n\n    return vector<int> {arr[max_i], arr[max_j]};\n}","language":"cpp"}
{"task_id":"MBCPP\/416","completion":"  if (n < 3) return n;\n\n  int one = n % 10;\n  int two = n \/ 10 % 10;\n  int three = n \/ 100;\n  return Math.max(\n    breaksum(three) + Math.max(one, two),\n    breaksum(two) + Math.max(one, three),\n    breaksum(one) + three\n  );\n}","language":"cpp"}
{"task_id":"MBCPP\/417","completion":"    if(input.empty()) {\n        return {{}};\n    }\n    auto first = input[0];\n    vector<vector<string>> result = groupTuples(input.slice(1));\n    result.push_back(vector<string>(first, {}) );\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/419","completion":"  int size = list1.size();\n  int sum = 0;\n  double num;\n  for (int i = 0; i &lt; size; i++) {\n    num = list1[i];\n    num = Math.round(num);\n    sum = sum + (int) num;\n  }\n  return sum * size;\n}","language":"cpp"}
{"task_id":"MBCPP\/420","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0)\n            sum += i * i * i;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/423","completion":"    if (m * n == 0) return 0;\n    if (m * n == 1) return gold[0][0];\n\n    \/\/ initialize a matrix to store subproblems\n    vector<vector<int>> subproblems(m, n);\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == 0 || j == 0) {\n                subproblems[i][j] = gold[i][j];\n            } else {\n                subproblems[i][j] = gold[i][j] + Math.min(subproblems[i-1][j-1], Math.min(subproblems[i-1][j], subproblems[i][j-1]));\n            }\n        }\n    }\n\n    \/\/ find optimal solution\n    int max = -1;\n    for (int i = 0; i ","language":"cpp"}
{"task_id":"MBCPP\/424","completion":"  vector<string> result;\n  result.resize(testTuple.size());\n  result[0] = testTuple[0];\n  result[testTuple.size() - 1] = testTuple[testTuple.size() - 1];\n\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/426","completion":"    vector<int> result;\n    int n;\n\n    n = nums.size();\n    result.resize(n);\n\n    for (int i = 0; i < n; i++) {\n        if (nums[i] % 2 != 0) {\n            result[i] = nums[i];\n        }\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/427","completion":"    string pattern = \"(?<dd>\\\\d{2})(?<mm>\\\\d{2})(?<yyyy>\\\\d{4})\";\n\n    \/\/ Create a regex object\n    regex regex = regex(pattern);\n\n    \/\/ Compile the regex\n    regex.compile();\n\n    \/\/ Match the string\n    string result = regex.match(dt);\n\n    if (result == nullptr) {\n        return null;\n    }\n\n    \/\/ Check that the pattern matches\n    if (regex.matched()) {\n        \/\/ Extract the values\n        int dd = result[\"dd\"];\n        int mm = result[\"mm\"];\n        int yyyy = result[\"yyyy\"];\n\n        \/\/ Create a new date\n        string date = string(yyyy.ToString() + \"-\" + mm.ToString() + \"-\" + dd.ToString());\n\n        \/\/ return date\n        return date;\n    }\n\n    return null;\n}","language":"cpp"}
{"task_id":"MBCPP\/428","completion":"    int n = myList.size();\n    while (n >= 2) {\n        for (int gap = n\/2; gap > 0; gap \/= 2) {\n            for (int i = gap; i < n; i++) {\n                int j = i;\n                while ((j - gap) >= 0 && myList[j] < myList[j - gap]) {\n                    swap(myList, j, j - gap);\n                    j -= gap;\n                }\n            }\n        }\n        n \/= 2;\n    }\n    return myList;\n}","language":"cpp"}
{"task_id":"MBCPP\/429","completion":"    vector<int> retTup;\n    \/\/ Find the number of tuples in the vectors.\n    \/\/ The first tuple must be the size of the first vector.\n    int size = testTup1.size();\n    int numTuples = size < testTup2.size() ? size : testTup2.size();\n    \/\/ Allocate the resulting tuple vector.\n    \/\/ Each element in the result will be zero\n    \/\/ and the last element will be 1.\n    retTup.resize(numTuples);\n    \/\/ Iterate over the number of tuples.\n    for (int i = 0; i < numTuples; i++) {\n        \/\/ Get the elements of the tuples\n        int elem1 = testTup1[i];\n        int elem2 = testTup2[i];\n        \/\/ Check if there are elements in both vectors.\n        \/\/ The condition check is for performance reasons.\n        \/\/ If there are no elements in either vector,\n        \/\/ it is better to skip the whole loop.\n        if ","language":"cpp"}
{"task_id":"MBCPP\/430","completion":"    \/\/ your code here\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/433","completion":"    string result = \"Yes, the entered number is greater than those in the array\";\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > number) {\n            result = \"No, entered number is less than those in the array\";\n            break;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/434","completion":"  if (text.begin() == 0) {\n    return \"Not matched!\";\n  }\n\n  int index = text.begin() - 1;\n  while (index >= 0 && text[index] != 'b') {\n    index--;\n  }\n\n  if (index < 0) {\n    return \"Not matched!\";\n  }\n\n  int index1 = index - 1;\n  int index2 = index + 1;\n  int count = 1;\n  while (index2 < text.end()) {\n    if (text[index2] == 'b') {\n      count++;\n    } else {\n      break;\n    }\n\n    index2++;\n  }\n\n  if (count >= 1) {\n    return \"Found a match!\";\n  }\n\n  return \"Not matched!\";\n}","language":"cpp"}
{"task_id":"MBCPP\/435","completion":"    return n % 10;\n}","language":"cpp"}
{"task_id":"MBCPP\/436","completion":"    vector<int> res;\n    if(list1.size() == 0) {\n        return res;\n    }\n    else {\n        if(list1[0] < 0) {\n            res.push_back(list1[0]);\n        }\n        res = res + negNos(list1.erase(0));\n        return res;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/437","completion":"    string odd = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (i % 2 == 0) {\n            odd += str1[i];\n        }\n    }\n    return odd;\n}","language":"cpp"}
{"task_id":"MBCPP\/438","completion":"  if(testList.size() == 0) return string(\"0\");\n  int numPairs = 0;\n  vector<int> list;\n  for(int i = 0; i < testList.size(); i++) {\n    list = testList[i];\n    for(int j = 0; j < list.size(); j++) {\n      if(list[j] < list[j + 1]) {\n        numPairs++;\n      }\n    }\n  }\n  return string(numPairs);\n}","language":"cpp"}
{"task_id":"MBCPP\/439","completion":"    return reduce(l, (x, y) -> x * y, 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/441","completion":"  return l*l*l;\n}","language":"cpp"}
{"task_id":"MBCPP\/442","completion":"    double total = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            total++;\n        }\n    }\n    return total \/ nums.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/443","completion":"    int largestNeg = 0;\n    int len = list1.size();\n    for(int i = 0; i < len; i++) {\n        if(list1[i] < 0) {\n            largestNeg = list1[i];\n        }\n    }\n    return largestNeg;\n}","language":"cpp"}
{"task_id":"MBCPP\/444","completion":"    \/\/ Write your code here\n    int count = 0;\n    vector<vector<int>> res = { {} };\n    for (vector<int> t : testList) {\n        int curCount = 0;\n        vector<int> curRes = { {} };\n        for (int i : t) {\n            if (i <= k) {\n                curRes.push_back(i);\n                curCount++;\n            }\n        }\n        if (curCount == 0) {\n            continue;\n        }\n        res[count] = curRes;\n        count++;\n    }\n    if (count == 0) {\n        return \"()\";\n    }\n    string resStr = \"[\";\n    for (int i = 0; i < count; i++) {\n        resStr += \"(\" + res[i].join(\", \") + \")\";\n        if (i != count - 1","language":"cpp"}
{"task_id":"MBCPP\/445","completion":"    vector<vector<int>> resultTup = vector<vector<int>>();\n    for (int i = 0; i < testTup1.size(); i++) {\n        resultTup.push_back(testTup1[i]);\n        for (int j = 0; j < testTup2.size(); j++) {\n            resultTup[i].push_back(testTup1[i][j] * testTup2[i][j]);\n        }\n    }\n    return resultTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/447","completion":"    int n;\n    vector<int> result(n);\n\n    for (int i = 0; i < n; i++) {\n        result[i] = nums[i] * nums[i] * nums[i];\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/448","completion":"    int sum = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 3 == 0 || i % 5 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/449","completion":"    \/\/ TODO: Implement me!\n    return \"No\";\n}","language":"cpp"}
{"task_id":"MBCPP\/450","completion":"    vector<string> result;\n    if (sizeof(str) >= l) {\n        result.push_back(str[0]);\n        result = result + str[l - 1];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/451","completion":"    \/\/return text1.replace(\/ \/g, \"\");\n    return regex_replace(text1, \" \", \"\");\n}","language":"cpp"}
{"task_id":"MBCPP\/453","completion":"    int i, sum = 0;\n    for (i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            sum += i;\n            while (n % i == 0) {\n                n \/= i;\n            }\n        }\n    }\n    if (n > 1) {\n        sum += n;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/454","completion":"    string result;\n    int z;\n    z = 0;\n    while (z < text.size() && text[z] == 'z') {\n        z++;\n    }\n    if (z < text.size()) {\n        result = \"Found a match!\";\n    } else {\n        result = \"Not matched!\";\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/455","completion":"  bool flag = 1;\n  for (int j = 1; j <= monthnum2; j++) {\n    if (j % 2 == 0)\n      flag = flag * 3 + 1;\n    else\n      flag = flag * 3 - 2;\n  }\n  if (flag == 0)\n    return true;\n  else\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/456","completion":"    string result[stringlist.size()];\n    string tmp;\n    for (int i = stringlist.size()-1; i >= 0; i--) {\n        tmp = stringlist[i];\n        result[i] = tmp;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/458","completion":"    return l * b;\n}","language":"cpp"}
{"task_id":"MBCPP\/459","completion":"    vector<char> v = str1.begin();\n    vector<string> v2 = new vector<string>();\n    string str;\n    for (int i = 0; i &lt; str1.length(); i++) {\n        str = str1[i];\n        \/\/ 1. If the character is a uppercase ASCII character, copy it to the result string\n        \/\/ 2. Else, if the character is a lowercase ASCII character, then make it uppercase.\n        \/\/ 3. Else, copy the character to the result string.\n        if (str.isupper()) {\n            str2 += str;\n        }\n        else if (str.islower()) {\n            str2 += str.tolower();\n        }\n        else {\n            str2 += str;\n        }\n    }\n    return str2;\n}","language":"cpp"}
{"task_id":"MBCPP\/460","completion":"    vector<int> res;\n\n    for (auto v : lst) {\n        res.push_back(v.begin());\n    }\n\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/461","completion":"    int upperCount = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (str[i] == str[i].to_upper())\n            upperCount++;\n    }\n    return upperCount;\n}","language":"cpp"}
{"task_id":"MBCPP\/463","completion":"  int max = -99999;\n  int max_left = 0;\n  int max_right = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    max = Math.max(max, 0);\n    for (int j = i; j < arr.size(); j++) {\n      int temp = max * arr[j];\n      if (temp > max) {\n        max = temp;\n        max_left = i;\n        max_right = j;\n      }\n    }\n  }\n  if (max_right - max_left < 0) {\n    return 0;\n  }\n  return arr[max_left] * arr[max_right];\n}","language":"cpp"}
{"task_id":"MBCPP\/464","completion":"\tif (n == 1) {\n\t\treturn dict[0] == 0;\n\t}\n\n\tint i = 0;\n\twhile (i < n - 1) {\n\t\tif (dict[i] != dict[i+1]) {\n\t\t\treturn false;\n\t\t}\n\t\ti += 1;\n\t}\n\n\treturn true;\n}","language":"cpp"}
{"task_id":"MBCPP\/466","completion":"    int start = 0, end = 1;\n    while (end < n) {\n        \/\/ If the current window has elements smaller than the current value,\n        \/\/ then update the start pointer.\n        if (arr[start] < arr[end]) {\n            start++;\n        }\n        \/\/ If the current window has elements larger than the current value,\n        \/\/ then update the end pointer.\n        else {\n            end++;\n        }\n    }\n    return arr[start];\n}","language":"cpp"}
{"task_id":"MBCPP\/467","completion":"    int octalnum = 0;\n    while (decinum > 0) {\n        octalnum += (decinum % 8) * (int)(Math.pow(10, (decinum \/ 8)));\n        decinum \/= 8;\n    }\n    return octalnum;\n}","language":"cpp"}
{"task_id":"MBCPP\/468","completion":"    vector<int> prefix, suffix;\n\n    prefix.push_back(arr[0]);\n    for (int i = 1; i < n; i++) {\n        prefix.push_back(prefix[i - 1] * arr[i]);\n    }\n\n    suffix.push_back(arr[n - 1]);\n    for (int i = n - 2; i >= 0; i--) {\n        suffix.push_back(suffix[i + 1] * arr[i]);\n    }\n\n    int maxProduct = 0;\n    for (int i = 0; i < n; i++) {\n        maxProduct = Math.max(maxProduct, prefix[i] * suffix[i]);\n    }\n    return maxProduct;\n}","language":"cpp"}
{"task_id":"MBCPP\/469","completion":"    \/\/ sort the prices and then find the max difference\n    \/\/ and the max profit\n    \/\/ so we can save some time in the algorithm\n    \/\/ O(nlogn)\n    \/\/ O(1)\n    \/\/ O(n)\n    \/\/ sort the prices\n    \/\/ O(nlogn)\n    \/\/ O(1)\n    \/\/ O(1)\n\n    \/\/ the max diff will be the difference between the max and min\n    \/\/ and the max profit will be the difference between the max diff and the min diff\n    \/\/ maxdiff = 0 \n    \/\/ maxprofit = 0\n    \/\/ while k > 0\n    \/\/   if maxdiff < 0 \n    \/\/      maxdiff = 0\n    \/\/      maxprofit = 0\n    \/\/   maxdiff = maxdiff + prices[i] - prices[i-1]\n    \/\/   if maxdiff > maxprofit\n    \/\/      maxprofit = maxdiff\n    \/\/   k = k ","language":"cpp"}
{"task_id":"MBCPP\/470","completion":"    vector<int> outputTup = vector<int>();\n\n    for (int i = 0; i < testTup.size(); i++) {\n        int currentNum = testTup[i];\n        int nextNum = testTup[(i + 1) % testTup.size()];\n\n        outputTup.push_back(currentNum + nextNum);\n    }\n\n    return outputTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/471","completion":"    return remainder(arr, lens, n);\n}","language":"cpp"}
{"task_id":"MBCPP\/472","completion":"    if (l.size() < 3) {\n        return false;\n    }\n    for (auto i : l) {\n        if (i - l[(l.size() - 1) - l.indexOf(i)] != 1) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/474","completion":"    \/\/ count the number of times the character occurs in the string\n    int counter;\n    vector<int> indices;\n    for (counter = 0; indices.size() != str1.size(); ++counter) {\n        if (str1[counter] == ch) {\n            indices.push_back(counter);\n        }\n    }\n\n    \/\/ replace characters in the string\n    for (int i = 0; i < indices.size(); ++i) {\n        str1[indices[i]] = newch;\n    }\n    return str1;\n}","language":"cpp"}
{"task_id":"MBCPP\/476","completion":"    return std::accumulate(nums.begin(), nums.end(), 0,\n                            [](int a, int b) { return a + b; });\n}","language":"cpp"}
{"task_id":"MBCPP\/477","completion":"    string out = \"\";\n    for (int i = 0; i < str.size(); i++) {\n        out += (str.at(i) == ' ') ? ' ' : (str.at(i) == '-') ? '-' : (str.at(i) == '_') ? '_' : (str.at(i).isupper()) ? (str.at(i).lower()) : (str.at(i).islower()) ? str.at(i) : (str.at(i) + ' ');\n    }\n    return out.trim();\n}","language":"cpp"}
{"task_id":"MBCPP\/478","completion":"    string result;\n    int i;\n    int j;\n\n    if (str1.length() > 0) {\n        result = str1[0];\n        for (i = 1; i < str1.length(); i++) {\n            if (str1[i] >= 'a' && str1[i] <= 'z') {\n                result += str1[i];\n            } else {\n                result += ' ';\n            }\n        }\n        result = result.replaceFirst(\" \", \"\");\n    } else {\n        result = \"\";\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/479","completion":"  if (n >= 0) {\n    return n % 10;\n  } else {\n    return -n % 10 - 1;\n  }\n}","language":"cpp"}
{"task_id":"MBCPP\/480","completion":"    string str = \"\";\n    vector<string> vec = stringToVec(str1);\n\n    for (auto it = vec.begin(); it != vec.end(); it++) {\n        int count = 0;\n\n        for (auto it1 = vec.begin(); it1 != vec.end(); it1++) {\n            if (it == it1) {\n                continue;\n            }\n\n            if (str[it1] == it[it1]) {\n                count++;\n            }\n        }\n\n        if (count > str.length()) {\n            str = it;\n        }\n    }\n\n    return str;\n}","language":"cpp"}
{"task_id":"MBCPP\/481","completion":"  set.sort();\n  int i, j, sumLeft, sumRight;\n  for(i = 0; i < set.size(); i++) {\n    sumLeft = sum;\n    sumRight = sum - set[i];\n    for(j = i + 1; j < set.size(); j++) {\n      if(sumLeft < sumRight)\n        break;\n      sumLeft += set[j];\n    }\n    if(sumLeft == sumRight)\n      return true;\n  }\n  return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/482","completion":"    string pattern = \"(\\\\p{Lu}\\\\p{Ll}\\\\p{Lu}|\\\\p{Lu})\\\\p{Ll}\\\\p{Lu}*\";\n    regex regex = regex(pattern, RegexOptions::IgnoreCase);\n    return regex.Replace(text, \"Yes\");\n}","language":"cpp"}
{"task_id":"MBCPP\/483","completion":"    int i, fact;\n\n    \/*\n     * Create a buffer to hold the factorial number.\n     *\/\n    int fact_buf = 1;\n\n    for (i = 1; i <= x; ++i) {\n        fact = fact_buf * i;\n        if (fact % x == 0) {\n            return i;\n        }\n\n        fact_buf = fact;\n    }\n\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/484","completion":"    vector<vector<string>> outputList = vector<vector<string>> {\n        {testList1[0][0], testList1[0][1]},\n        {testList1[1][0], testList1[1][1]},\n        {testList1[2][0], testList1[2][1]},\n        {testList1[3][0], testList1[3][1]},\n        {testList1[4][0], testList1[4][1]},\n        {testList1[5][0], testList1[5][1]},\n        {testList1[6][0], testList1[6][1]},\n        {testList1[7][0], testList1[7][1]},\n        {testList1[8][0], testList1[8][1]},\n    };\n\n    vector<vector<string>> inputList = vector<vector<string>> {\n        {testList2[0][0], testList2[0][1]},\n        {testList2[1][0], test","language":"cpp"}
{"task_id":"MBCPP\/485","completion":"    vector<int> s(n + 1);\n    for (int i = 0; i < n; i++)\n        s[i] = -1;\n\n    int max = 0, start = 0, end = 0;\n    int len = 0;\n    for (int i = 0; i < n; i++) {\n        s[i] = i;\n        for (int j = i + 1; j < n; j++) {\n            if (a[s[i]] == a[s[j]]) {\n                len = j - i;\n                if ((max < (j - i) + 1) || (max == (j - i) + 1 && len > end - start)) {\n                    max = (j - i) + 1;\n                    start = i;\n                    end = j;\n                }\n            }\n        }","language":"cpp"}
{"task_id":"MBCPP\/486","completion":"    int nCk;\n    double prob;\n\n    if (n < 0 || k < 0 || p < 0 || p > 1) {\n        return 0;\n    }\n\n    if (k > n - k) {\n        k = n - k;\n    }\n\n    nCk = n - k + 1;\n    prob = 1;\n    for (int i = 1; i <= k; ++i) {\n        prob = prob * (nCk - i) \/ i;\n    }\n    return prob * p;\n}","language":"cpp"}
{"task_id":"MBCPP\/487","completion":"    vector<vector<int>> sorted = tup;\n    sorted.sort(compare);\n    return sorted;\n}","language":"cpp"}
{"task_id":"MBCPP\/488","completion":"  int b = 1;\n  double c = 2 * (3 * a * a - b * b);\n  return c \/ (4 * a);\n}","language":"cpp"}
{"task_id":"MBCPP\/489","completion":"    \/\/TODO: write your code here\n}","language":"cpp"}
{"task_id":"MBCPP\/491","completion":"    int result = 0;\n    for (int i = 1; i <= n; i++) {\n        result += pow(a, i) * pow(r, n - i);\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/492","completion":"    \/\/ Start with an initial guess of the middle\n    int min = 0;\n    int max = itemList.size() - 1;\n    \/\/ Loop through the array until we find the number\n    \/\/ If the number we are looking for is less than our guess, set min to our guess\n    \/\/ Otherwise, set max to our guess\n    \/\/ If the number we are looking for is greater than our guess, set max to our guess\n    \/\/ Otherwise, set min to our guess\n    \/\/ return true if we have found the number, false otherwise\n    while (min <= max) {\n        int guess = (min + max) \/ 2;\n        if (itemList[guess] == item)\n            return true;\n        else if (item < itemList[guess])\n            max = guess - 1;\n        else\n            min = guess + 1;\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/493","completion":"  int stepx = 2 * radius + 1;\n  int stepy = 2 * radius + 1;\n  int x = 0;\n  int y = 0;\n  vector<vector<vector<double>>> polygons = vector<vector<vector<double>>>();\n  vector<vector<double>> tempPolygon = vector<vector<double>>();\n  for (int i = -radius; i <= radius; i++) {\n    for (int j = -radius; j <= radius; j++) {\n      if ((i*i+j*j) <= radius*radius) {\n        tempPolygon.push_back(vector<double>(x, y));\n        if (x >= startx &amp;&amp; x &lt;= endx &amp;&amp; y >= starty &amp;&amp; y &lt;= endy) {\n          polygons.push_back(tempPolygon);\n        }\n        x++;\n      }\n      y++;\n    }\n","language":"cpp"}
{"task_id":"MBCPP\/494","completion":"  int sum = 0;\n  for (int i = 0; i < testTup.size(); i++) {\n    sum += testTup[i];\n  }\n\n  return \"0b\" + sum.toString(2);\n}","language":"cpp"}
{"task_id":"MBCPP\/495","completion":"    string str = str1;\n    \/\/ str.chomp(str.match(\/([a-z]+)\/g));\n    \/\/ ^ -> * -> ? -> +\n    \/\/ .* -> + -> ? -> *\n    \/\/ . -> + -> * -> .\n    \/\/ [^a-z] -> * -> . -> ^\n    \/\/ [^A-Z] -> * -> . -> ^\n    \/\/ ^ -> * -> . -> ^\n    \/\/ ^ -> + -> . -> ^\n\n    if (str.isEmpty()) return str;\n    const auto reg = new RegExp(\n        \"(?<=\\\\G.{\" + str.length() + \"})(\\\\w)\",\n        \"g\"\n    );\n    str = str.replace(reg, \"\");\n\n    return str;\n}","language":"cpp"}
{"task_id":"MBCPP\/496","completion":"    \/\/ 1. Create the Heap\n    \/\/ Max heap. The root of the tree will have the largest value.\n    \/\/ Parent(i) is always the greatest child.\n    \/\/ LeftChild(i) -> RightChild(i)\n    \/\/ For example, if we have the following tree:\n    \/\/           (10)\n    \/\/          \/        \\\n    \/\/         (6)        (7)\n    \/\/        \/   \\     \/  \\\n    \/\/       (4)   (3)  (8)  (9)\n    \/\/       \/  \\\n    \/\/      (1)   (2)\n    \/\/ It will be represented as a heap, where the nodes will be:\n    \/\/            (10)\n    \/\/           \/ \\\n    \/\/          (6)  (7)\n    \/\/         \/  \\   \/  \\\n    \/\/        (1)  (4) (3) (8)","language":"cpp"}
{"task_id":"MBCPP\/497","completion":"  return 2 * (r * r) * h + 2 * r * (Math.PI * r + r);\n}","language":"cpp"}
{"task_id":"MBCPP\/498","completion":"    if (x == 0)\n        return y;\n    else if (y == 0)\n        return x;\n    else if (x == y)\n        return x;\n    else if (x > y)\n        return gcd(x % y, y);\n    else\n        return gcd(x, y % x);\n}","language":"cpp"}
{"task_id":"MBCPP\/499","completion":"    \/\/ your code here\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/500","completion":"    string result = \"\";\n    for (int i = 0; i < list.size(); i++) {\n        result += list[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/501","completion":"    if (x % y == 0) {\n        return y;\n    } else {\n        return numCommDiv(y, x % y);\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/502","completion":"    int sum = 0;\n    while(n >= m) {\n        sum += n % m;\n        n \/= m;\n    }\n    return sum + n;\n}","language":"cpp"}
{"task_id":"MBCPP\/503","completion":"    \/\/ Sort the array in-place\n    sorted(nums.begin(), nums.end(), (a, b) => a - b);\n\n    \/\/ Traverse the list from both ends, adding adjacent numbers when needed\n    \/\/ We use the index of the current element to avoid needing to traverse the whole array twice\n    \/\/ The first element of the sorted list is guaranteed to be 1, so we can just use the previous element\n    \/\/ When we hit the end of the array, we're guaranteed to be adding the current element, so we can use the next element\n    vector<int> result = vector<int>();\n    int prev = nums[0];\n    int prevIdx = 0;\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] - prev == 1) {\n            result[prevIdx] += 1;\n        } else {\n            prev = nums[i];\n            prevIdx = i;\n            result.push_back(prev - 1);\n           ","language":"cpp"}
{"task_id":"MBCPP\/504","completion":"    int sum = 0;\n    int a = 1;\n    int b = 1;\n    for (int i = 0; i < n; i++) {\n        sum += a + b;\n        a = a + b;\n        b = a + b;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/505","completion":"  auto zeroIndex = a.begin() + 1;\n  auto n = a.end();\n  for (int i = a.begin(); i < n; i++) {\n    if (a[i] == 0) {\n      a[zeroIndex] = a[i];\n      a[i] = 0;\n      zeroIndex++;\n    }\n  }\n  for (int i = a.begin(); i < zeroIndex; i++) {\n    a[i] = 0;\n  }\n  return a;\n}","language":"cpp"}
{"task_id":"MBCPP\/506","completion":"  if (k == 0) {\n    return 1;\n  }\n  return permutationCoefficient(n - 1, k - 1) * n;\n}","language":"cpp"}
{"task_id":"MBCPP\/507","completion":"  string temp1;\n  string temp2;\n  vector<string> results;\n  results.clear();\n  for (string word : list1) {\n    temp1 = word;\n    for (string removeWord : removewords) {\n      temp2 = removeWord;\n      if (temp1.find(temp2) > -1) {\n        break;\n      } else {\n        results.push_back(word);\n      }\n    }\n  }\n  return results;\n}","language":"cpp"}
{"task_id":"MBCPP\/508","completion":"    vector<string> v = {string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")};\n    if (l1.size() == 0 || l2.size() == 0) {\n        return l1.size() == l2.size();\n    }\n    else {\n        bool b1 = false, b2 = false, b3 = false;\n        for (int i = 0; i < l1.size(); i++) {\n            b1 = l1[i] == v[0];\n            b2 = l2[i] == v[0];\n            if (b1 == true && b2 == true) {\n                continue;\n            }\n            else if (b1 == true && b2 == false) {\n                return false;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/509","completion":"    if (n < 2) {\n        return n;\n    }\n    return averageOdd(n-2) + n;\n}","language":"cpp"}
{"task_id":"MBCPP\/510","completion":"  int n = arr.size();\n  vector<int> dp(n+1);\n  vector<int> subsequence_count(n+1);\n  vector<int> prefix(n+1);\n\n  dp[0] = 1;\n  for (int i = 1; i <= n; i++) {\n    dp[i] = 1;\n    for (int j = 0; j < i; j++) {\n      if (arr[i] > arr[j] && dp[i] < dp[j] + 1) {\n        dp[i] = dp[j] + 1;\n        subsequence_count[i] = subsequence_count[j] + 1;\n      }\n    }\n  }\n\n  int ans = 0;\n  for (int i = 0; i <= n; i++) {\n    ans = ans + dp[i] * subsequence_count[i] - dp[i];\n","language":"cpp"}
{"task_id":"MBCPP\/511","completion":"\tint maxNum = (int) (Math.sqrt(num));\n\tif (num % 2 == 1) {\n\t\tmaxNum--;\n\t}\n\treturn (maxNum * maxNum + 1) \/ 2 + maxNum;\n}","language":"cpp"}
{"task_id":"MBCPP\/514","completion":"    int sum = 0;\n    for (int i = 0; i < testTup.size(); i++) {\n        sum += testTup[i];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/515","completion":"    if (n <= 1) return true;\n\n    return modularSum(arr, n - 1, m) && (modulo(arr[n - 1], m) == 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/516","completion":"    \/\/ for each number of the list, create a bucket in the dictionary\n    \/\/ using each number as a key and the list index as the value.\n    \/\/ For example, if the input list is {15, 79, 25, 68, 37},\n    \/\/ the dictionary will be:\n    \/\/ {15 => 0, 25 => 1, 37 => 2, 68 => 3, 79 => 4}\n    \/\/ then, for each number in the list, find the appropriate key in the dictionary\n    \/\/ and place it in the proper bucket.\n    \/\/ Once the list is sorted, the dictionary will be sorted by the keys\n    \/\/ and the original list will be shuffled.\n\n    \/\/ O(n*k) time where n is the length of the input list and k is the max number\n    \/\/ of digits in any number.\n    \/\/ O(n) space because we only need to keep track of the buckets\n    \/\/ for each number, and we do not need to keep track of the dictionary.\n\n    \/\/ Create a dictionary","language":"cpp"}
{"task_id":"MBCPP\/517","completion":"  vector<int> max_val = list1;\n  vector<int> min_val = list1;\n\n  min_val.erase(min_val.begin());\n  max_val.erase(max_val.begin());\n\n  auto max_idx = min_val.begin();\n  auto min_idx = max_val.begin();\n\n  auto max_val_end = max_val.end();\n  auto min_val_end = min_val.end();\n\n  while (min_val_end != min_val_end) {\n    if (min_val[min_idx] > 0) {\n      min_val.erase(min_idx);\n      max_val.push_back(min_val[min_idx]);\n    } else {\n      min_idx++;\n    }\n\n    if (max_val[max_idx] >= 0) {\n      max_val.erase(max_idx);\n      min_val.push_back(max_val[max_idx]);\n    }","language":"cpp"}
{"task_id":"MBCPP\/518","completion":"    int x = 0;\n    int y = num;\n    int z = 1;\n\n    while (y >= x) {\n        z = x + y \/ x;\n        x = y;\n        y = z;\n    }\n    return x;\n}","language":"cpp"}
{"task_id":"MBCPP\/519","completion":"    double total = 0.0;\n    for (int i = 1; i <= num; i++) {\n        total += 4.0 \/ 3.0 * (1.0 - Math.cos(2.0 * Math.PI * i \/ num));\n    }\n    return total;\n}","language":"cpp"}
{"task_id":"MBCPP\/520","completion":"    return l.reduce((a, b) => (a * b) \/ gcd(a, b));\n}","language":"cpp"}
{"task_id":"MBCPP\/521","completion":"    \/\/ write code here\n    return (x < y + z) ? true : false;\n}","language":"cpp"}
{"task_id":"MBCPP\/522","completion":"    vector<int> lls(arr.size(), 0);\n    vector<int> lrs(arr.size(), 0);\n    int l = 0;\n    int r = 0;\n    int m = 0;\n    int s = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > arr[(i + 1) % arr.size()]) {\n            lls.push_back(l);\n            lrs.push_back(r);\n            l = 0;\n            r = 0;\n        }\n        if (l == 0)\n            l = 1;\n        else\n            l++;\n        if (r == 0)\n            r = 1;\n        else\n            r++;\n        m = Math.max(m, Math.max(l, r));\n        s += m;\n    }\n    lls.push_back(l);\n    lrs","language":"cpp"}
{"task_id":"MBCPP\/523","completion":"    if (str1.length() >= 8 && str1.length() <= 16 &&\n        (str1.count(c) > 0 &amp;&amp; (str1.find(c) % 2 == 0)) &amp;&amp;\n        (str1.find(c) > 0 | str1.find(c) &lt; 0)) {\n        return vector<string>(string(\"Valid string.\"));\n    } else {\n        if (str1.find(c) > 0 | str1.find(c) &lt; 0) {\n            return vector<string>(string(\"String must have 1 upper case character.\"));\n        }\n        if (str1.length() >= 8 &amp;&amp; str1.length() &lt;= 16) {\n            return vector<string>(string(\"String length should be atleast 8.\"));\n        }\n        if (str1.count(c) > 0 &amp;&","language":"cpp"}
{"task_id":"MBCPP\/524","completion":"    \/\/ the maximum sum of increasing subsequence in the array\n    int maxSum = 0;\n\n    \/\/ the current sum of increasing subsequence\n    int currentSum = 0;\n\n    \/\/ the current maximum in the increasing subsequence\n    int maxIncreasing = 0;\n\n    for (int i = 0; i < n; i++) {\n        \/\/ if we find a value bigger than the current maximum of the increasing subsequence\n        \/\/ we update the current maximum with this value\n        if (arr[i] > maxIncreasing)\n            maxIncreasing = arr[i];\n\n        \/\/ if the current sum is smaller than the current maximum\n        \/\/ we update the current sum with the current maximum\n        else if (currentSum < maxIncreasing)\n            currentSum = maxIncreasing;\n\n        \/\/ if the current sum is equal to the current maximum\n        \/\/ we update the maximum of the increasing subsequence with the current maximum\n        else if (currentSum == maxIncreasing) {\n            currentSum += arr","language":"cpp"}
{"task_id":"MBCPP\/525","completion":"  vector<int> diff = subtract(line1, line2);\n  return all(equal(diff[0], diff[1]));\n}","language":"cpp"}
{"task_id":"MBCPP\/526","completion":"    string s = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        s += str1[i] == ' ' ? ' ' : str1[i].tolower() + ' ';\n    }\n    \/\/ 1. capitalize first letter\n    string s1 = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (i == 0) {\n            s1 += s[i].tolower();\n        } else if (i < s.length() - 1) {\n            s1 += s[i].tolower();\n        } else {\n            s1 += s[i].toUpperCase();\n        }\n    }\n    \/\/ 2. trim last space\n    string s2 = \"\";\n    for (int i = 0; i < s1.length(); i++) {\n        if (s1[i]","language":"cpp"}
{"task_id":"MBCPP\/527","completion":"    \/\/ return 0 if no pairs are found\n    if (n == 0 || n < 0 || sum < 0) return 0;\n    \/\/ return 1 if sum is equal to the value in arr\n    if (sum == arr[n - 1]) return 1;\n    \/\/ recursively get the number of pairs\n    \/\/ from the sum by subtracting 1 from n,\n    \/\/ and subtracting that value from sum\n    return getPairsCount(arr, n - 1, sum) + getPairsCount(arr, n - 1, sum - arr[n - 1]);\n}","language":"cpp"}
{"task_id":"MBCPP\/529","completion":"    \/\/ Your code goes here\n    if (n == 1)\n        return 1;\n    else\n        return 2 * jacobsthalLucas(n - 1) - jacobsthalLucas(n - 2);\n}","language":"cpp"}
{"task_id":"MBCPP\/530","completion":"  double sum = 0;\n  int i;\n  for (i = 0; i < nums.size(); i++) {\n    if (nums[i] < 0) {\n      sum += 1.0 \/ nums[i];\n    }\n  }\n  return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/531","completion":"    vector<int> dp(m+1);\n    dp[0] = 0;\n    for(int i = 0; i < m; i++) {\n        dp[i+1] = dp[i];\n        for(int coin: coins) {\n            if(coin <= i) {\n                dp[i+1] = min(dp[i+1], dp[i] + 1);\n            }\n        }\n    }\n\n    return dp[m] > v ? -1 : dp[m];\n}","language":"cpp"}
{"task_id":"MBCPP\/532","completion":"    if (str1.length() != str2.length())\n        return false;\n\n    int[] freq1 = new int[26];\n    int[] freq2 = new int[26];\n\n    \/\/ Count frequency of characters in str1 and str2\n    for (int i = 0; i < str1.length(); i++) {\n        freq1[str1[i] - 'a']++;\n        freq2[str2[i] - 'a']++;\n    }\n\n    \/\/ Check if there are any character not present in both strings\n    for (int i = 0; i < 26; i++) {\n        if (freq1[i] != freq2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/534","completion":"    vector<int> result = {0, 0};\n    \/\/ for every character in the pattern string\n    for (int i = 0; i < pattern.length(); i++) {\n        \/\/ find the index of the current character in the text string\n        int index = text.find(pattern.charAt(i));\n        \/\/ if it is not found, it is false\n        if (index == -1)\n            continue;\n        \/\/ if it is found, increment the first index\n        result[0] = index;\n        \/\/ find the end index of the current substring in the text string\n        int endIndex = index + pattern.length();\n        \/\/ find the beginning index of the current substring in the text string\n        int beginIndex = index;\n        \/\/ while there is text left, keep searching\n        while (text.length() > endIndex) {\n            index = text.find(pattern.charAt(i), beginIndex);\n            if (index == -1)\n                break;\n            endIndex = index + pattern","language":"cpp"}
{"task_id":"MBCPP\/535","completion":"\tdouble p,s,area;\n\tp=3.141592653589793;\n\ts=2.0*p*r;\n\tarea = s*(p*r);\n\treturn area;\n}","language":"cpp"}
{"task_id":"MBCPP\/536","completion":"    return {\n        list[0],\n        list[1],\n        ...\n        list[(n-2)]\n    };\n}","language":"cpp"}
{"task_id":"MBCPP\/537","completion":"    \/\/ Your code here.\n}","language":"cpp"}
{"task_id":"MBCPP\/538","completion":"    string str2;\n    vector<string> result;\n    str2 = str1.substr(1, str1.length() - 2);\n    result.push_back(str2);\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/540","completion":"    vector<int> frequencies;\n    vector<int> result;\n    frequencies.reserve(n);\n    int max = arr[0];\n    int min = arr[0];\n\n    for (int i = 0; i < n; i++) {\n        int index = arr[i];\n        frequencies[index]++;\n        max = max > index ? max : index;\n        min = min < index ? min : index;\n    }\n\n    result.reserve(n);\n    for (int i = 0; i < n; i++) {\n        if (frequencies[i] > frequencies[max]) {\n            result[i] = max;\n        }\n        else if (frequencies[i] < frequencies[min]) {\n            result[i] = min;\n        }\n        else {\n            result[i] = -1;\n        }\n    }\n\n    return result[n - 1];\n}","language":"cpp"}
{"task_id":"MBCPP\/541","completion":"    \/\/ find sum of divisors of n\n    return (n \/ 12) + (n \/ 6) + (n \/ 3) <= n;\n}","language":"cpp"}
{"task_id":"MBCPP\/542","completion":"    \/\/ TODO: This is not working!\n    return \"ERROR\";\n}","language":"cpp"}
{"task_id":"MBCPP\/543","completion":"    int counter = 0;\n\n    \/\/ First convert num1 and num2 to string.\n    char str1[20] = {'0','1','2','3','4','5','6','7','8','9'};\n    char str2[20] = {'0','1','2','3','4','5','6','7','8','9'};\n    string str1_str2 = string(num1)+' '+string(num2);\n    for (int i=0; i< str1_str2.length(); i++)\n        if (str1[str1_str2[i]] == str2[i])\n            counter++;\n    return counter;\n}","language":"cpp"}
{"task_id":"MBCPP\/544","completion":"    string res = \"\";\n    for (auto<int> i = 0; i < testList.size(); i++) {\n        res += testList[i][0];\n        if (testList.size() > i + 1) {\n            res += \" \";\n        }\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/545","completion":"    if (n == 0) {\n        return 0;\n    }\n    return (n ^ (n >> 1));\n}","language":"cpp"}
{"task_id":"MBCPP\/547","completion":"    int sum = 0;\n    int index = 1;\n\n    for (int i = 1; i < 32; i++) {\n        sum += hammingDistance(n, index);\n        index *= 2;\n    }\n\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/548","completion":"    vector<int> dp(arr.size() + 1, arr.size() + 1);\n\n    for (int i = 1; i < dp.size(); i++) {\n        dp[i][i] = 1;\n    }\n\n    for (int i = 1; i < dp.size(); i++) {\n        for (int j = i + 1; j < dp.size(); j++) {\n            if (arr[i - 1] < arr[j]) {\n                dp[i][j] = dp[i - 1][j] + 1;\n            }\n            else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n\n    return dp[arr.size()][arr.size()];\n}","language":"cpp"}
{"task_id":"MBCPP\/549","completion":"  return (n * (n+1) * (2*n+1))\/6;\n}","language":"cpp"}
{"task_id":"MBCPP\/550","completion":"  if (low == high) {\n    return arr[low];\n  }\n\n  int mid = (low + high) \/ 2;\n\n  if (arr[mid] > arr[mid + 1]) {\n    return findMax(arr, mid + 1, high);\n  } else if (arr[mid] > arr[mid - 1]) {\n    return findMax(arr, low, mid - 1);\n  } else {\n    return findMax(arr, low, mid);\n  }\n}","language":"cpp"}
{"task_id":"MBCPP\/551","completion":"    vector<int> nlist;\n    int i;\n\n    nlist.resize(list1.size());\n    for (i = 0; i < nlist.size(); i++) {\n        nlist[i] = list1[i][n];\n    }\n\n    return nlist;\n}","language":"cpp"}
{"task_id":"MBCPP\/552","completion":"    vector<int> sortedSeqNums;\n\n    sortedSeqNums.push_back(seqNums[0]);\n    for (int i = 1; i < seqNums.size(); i++) {\n        if (seqNums[i] != sortedSeqNums[i - 1] + 1) {\n            return \"Non Linear Sequence\";\n        }\n        sortedSeqNums.push_back(seqNums[i]);\n    }\n    return \"Linear Sequence\";\n}","language":"cpp"}
{"task_id":"MBCPP\/553","completion":"    int tmp = testTup[0];\n    tmp += testTup[1]*256;\n    tmp += testTup[2]*65536;\n    tmp += testTup[3]*16777216;\n    return (double)tmp \/ 4294967296.0;\n}","language":"cpp"}
{"task_id":"MBCPP\/554","completion":"    vector<int> result;\n    int i = 0;\n    int count = 0;\n    while (i < list.size()) {\n        if (count % 2 == 1) {\n            result.push_back(list[i]);\n        }\n        count++;\n        i++;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/555","completion":"  \/\/ Calculate sum of first n natural numbers\n  int sumOfFirstN = sum_of_first_n(n);\n\n  \/\/ Calculate sum of first n natural numbers\n  int sumOfFirstN2 = sum_of_first_n2(n);\n\n  return sumOfFirstN2 - sumOfFirstN;\n}","language":"cpp"}
{"task_id":"MBCPP\/556","completion":"    vector<int> r = vector<int>();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            r.push_back(a[i] ^ a[j]);\n        }\n    }\n    return r.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/557","completion":"\tstring result;\n\tint i;\n\n\tfor (i = 0; i < str.size(); i++) {\n\t\tif (str.at(i) >= 'A' && str.at(i) <= 'Z')\n\t\t\tresult.append(str[i].toUpper());\n\t\telse if (str.at(i) >= 'a' && str.at(i) <= 'z')\n\t\t\tresult.append(str[i].toLower());\n\t\telse\n\t\t\tresult.append(str[i]);\n\t}\n\n\treturn result;\n}","language":"cpp"}
{"task_id":"MBCPP\/558","completion":"  return (int)(Math.abs(n1 - n2) + 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/559","completion":"    \/\/ Find the maximum value\n    int max = a[0];\n\n    \/\/ Iterate through the array and find the max sum of contiguous subarray\n    for (int i = 1; i < size; i++) {\n        max = Math.max(max, a[i]);\n        a[i] = max + a[i];\n    }\n\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/560","completion":"    vector<int> result;\n    result.resize(testTup1.size() + testTup2.size());\n    int index = 0;\n    for (int i = 0; i < testTup1.size(); ++i) {\n        result[index++] = testTup1[i];\n    }\n    for (int i = 0; i < testTup2.size(); ++i) {\n        result[index++] = testTup2[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/562","completion":"    \/\/ write your code here\n    \/\/ please follow the hint of the problem.\n    vector<int> currMax, prevMax = lst[0];\n    int maxLength = 0;\n    for(vector<int> elem : lst) {\n        currMax = elem;\n        for (int i = 0; i < elem.size(); i++) {\n            if (elem[i] > currMax[i]) {\n                currMax[i] = elem[i];\n            }\n        }\n        if (currMax.size() > maxLength) {\n            maxLength = currMax.size();\n            prevMax = currMax;\n        }\n    }\n    return maxLength;\n}","language":"cpp"}
{"task_id":"MBCPP\/563","completion":"    vector<string> values;\n    values.push_back(text.substr(1, text.length() - 2));\n    return values;\n}","language":"cpp"}
{"task_id":"MBCPP\/564","completion":"    vector<int> counts(n, 0);\n\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                counts[arr[i]]++;\n            }\n        }\n    }\n\n    return counts[1] * (counts[1] - 1) \/ 2;\n}","language":"cpp"}
{"task_id":"MBCPP\/565","completion":"    vector<string> array;\n    for (int i = 0; i &lt; word.length(); i++) {\n        array.push_back(word[i]);\n    }\n    return array;\n}","language":"cpp"}
{"task_id":"MBCPP\/566","completion":"  int sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n \/= 10;\n  }\n  return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/567","completion":"    if (list1.size() == 0) {\n        return true;\n    }\n    int i = 0, j = 1;\n    while (j < list1.size()) {\n        if (list1[i] > list1[j]) {\n            return false;\n        }\n        i = j;\n        j = j + 1;\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/569","completion":"    vector<string> temp;\n    vector<string> prev = list1[0];\n\n    for (int i = 1; i < list1.size(); ++i) {\n        temp = list1[i];\n        for (int j = 0; j < temp.size(); ++j) {\n            if (prev.back() != null && prev.back().compareTo(temp.back()) >= 0) {\n                prev = prev.prev();\n                prev.insert(temp);\n            } else {\n                prev = temp;\n            }\n        }\n    }\n\n    return list1;\n}","language":"cpp"}
{"task_id":"MBCPP\/570","completion":"    vector<string> result;\n    int count;\n    string word;\n    for (count = 0; count &lt; charlist.size(); count++) {\n        word = charlist[count];\n        result.push_back(findWord(word, list1));\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/571","completion":"    int max_sum = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += arr[j];\n            if (sum == k)\n                max_sum = Math.max(sum, max_sum);\n            if (sum < k)\n                max_sum = Math.max(max_sum, sum - k);\n        }\n    }\n    return max_sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/572","completion":"    \/\/ 1) sort the given array.\n    sort(nums.begin(), nums.end());\n\n    \/\/ 2) create two pointers from the beginning and the end of the array.\n    int left = 0;\n    int right = nums.size() - 1;\n\n    \/\/ 3) Iterate the array until there is only one element in the array.\n    while (left < right) {\n        \/\/ 4) If the current element is equal to the previous element - increment left pointer.\n        if (nums[left] == nums[left - 1]) left++;\n        \/\/ 5) Else, if the current element is equal to the next element - decrement right pointer.\n        else if (nums[right] == nums[right + 1]) right--;\n        \/\/ 6) Else if the current element is not equal to the previous element - swap the elements.\n        else swap(nums, left++, right--);\n    }\n    return nums;\n}","language":"cpp"}
{"task_id":"MBCPP\/573","completion":"    int result = 1;\n    int i = 0;\n    vector<int> listUnique;\n\n    \/\/Get unique values from list\n    unique(listData.begin(), listData.end(), listUnique);\n    for(i = 0; i < listUnique.size(); i++) {\n        int num = listUnique[i];\n        result = result * num;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/574","completion":"    double area = 2 * 3.1416 * r * r;\n    area += 2 * 3.1416 * r * h;\n    area += 2 * 3.1416 * h * h;\n\n    return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/575","completion":"    int l_pos = ceil(log2(l)) - 1;\n    int r_pos = ceil(log2(r)) - 1;\n    int n_pos = ceil(log2(n)) - 1;\n    int last_r = -1;\n    int count = 0;\n    while (l_pos <= r_pos) {\n        int mid = (l + r) \/ 2;\n        int mid_pos = ceil(log2(mid)) - 1;\n        if (a * (mid \/ (1 << mid_pos)) >= n) {\n            count = mid;\n            last_r = r;\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n        l_pos = ceil(log2(l)) - 1;\n        r_pos = ceil(log2(r)) - 1;\n    }\n    count","language":"cpp"}
{"task_id":"MBCPP\/576","completion":"  vector<int> temp = std::copy(b);\n  for (int i = 0; i < m; i++)\n    if (temp[i] >= a[n + i])\n      temp[i] -= a[n + i];\n    else\n      return false;\n  for (int i = 0; i < m; i++)\n    if (temp[i] != a[i])\n      return false;\n  return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/577","completion":"    int sum = 0;\n\n    if (n == 0) {\n        return sum;\n    }\n\n    int c = 1;\n    while (c <= n) {\n        sum += c;\n        c *= 10;\n    }\n\n    return sum % 10;\n}","language":"cpp"}
{"task_id":"MBCPP\/578","completion":"  vector<int> result;\n  result.push_back(list1[0]);\n  for(int i = 1; i < list1.size(); i++) {\n    result.push_back(list3.front());\n    result.push_back(list1[i]);\n    result.push_back(list2.front());\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/579","completion":"    \/\/ Create a hashmap to store the number of occurences of each element.\n    \/\/ Use a vector to store the final result.\n    vector<int> occurence = { 0 };\n    vector<int> finalResult = { 0 };\n\n    \/\/ Check if the given two tuples have same size. If not, return empty tuple.\n    if (testTup1.size() != testTup2.size()) {\n        return finalResult;\n    }\n\n    \/\/ Initialize the occurence vector with 1 for each element.\n    for (int i = 0; i < testTup1.size(); i++) {\n        occurence.push_back(1);\n    }\n\n    \/\/ Loop over the given two tuples.\n    for (int i = 0; i < testTup1.size(); i++) {\n        for (int j = 0; j < testTup2.size(); j++) {\n            \/\/ Check if the element is in the first tuple.\n            if","language":"cpp"}
{"task_id":"MBCPP\/581","completion":"    int result = 0;\n    for (int i = 0; i <= b; i++) {\n        result += s * 2 * i;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/582","completion":"    return dict1.empty();\n}","language":"cpp"}
{"task_id":"MBCPP\/583","completion":"  int catalan[] = { 0, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 69814, 340336, 144622, 693094, 384894, 1214554, 636396, 3460152, 1526868, 534037, 202870, 84480, 411100, 21474836, 115636, 633417, 314936, 144966, 66594, 353220, 153846, 532614, 202761, 84537, 411337, 214645, 115914, 69814, 346091, 152686, 534037, 202870, 84480, 411337, 214645, 115914, 69814, 346091, 152686, 534037, 202870, 84480,","language":"cpp"}
{"task_id":"MBCPP\/584","completion":"    \/\/ remove everything except alphabets and space\n    string result = text.replaceAll(regex(\"\\W+\"), \"\");\n\n    \/\/ split the sentence into words and convert each word into lowercase\n    string[] words = result.split(regex(\"[ ]+\"));\n\n    \/\/ find all the adverbs in the sentence by using regex\n    vector<string> result(0);\n    result.resize(words.size());\n    vector<int> positions(0);\n    positions.resize(words.size());\n    for (int i = 0; i &lt; words.size(); i++) {\n        if (words[i].match(regex(\"^[aeiouy]$\"))) {\n            result[i] = words[i];\n            positions[i] = i;\n        }\n    }\n\n    string result_str = \"\";\n    string pos_str = \"\";\n    for (int i = 0; i &lt; result.size(); i++) {\n        result_str += (result[i] + \" ","language":"cpp"}
{"task_id":"MBCPP\/586","completion":"    int i, j, s = 0;\n    vector<int> b = new vector<int>();\n\n    for (i = 0; i < n; i++) {\n        b.push_back(a[i]);\n    }\n\n    if (k < 0) {\n        k = n + k;\n    }\n\n    for (i = 0; i < n - k; i++) {\n        s += a[i];\n    }\n    b.push_back(s);\n\n    for (j = n - k - 1; j >= 0; j--) {\n        b.push_back(a[j]);\n    }\n\n    return b;\n}","language":"cpp"}
{"task_id":"MBCPP\/587","completion":"    vector<int> listT = {0};\n    for (int i = 0; i < listx.size(); i++) {\n        listT.push_back(listx[i]);\n    }\n    return listT;\n}","language":"cpp"}
{"task_id":"MBCPP\/588","completion":"    int biggest = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        biggest = Math.max(nums[i], biggest);\n    }\n\n    int smallest = Integer.MAX_VALUE;\n    for(int i = 0; i < nums.size(); i++) {\n        smallest = Math.min(nums[i], smallest);\n    }\n\n    return biggest - smallest;\n}","language":"cpp"}
{"task_id":"MBCPP\/589","completion":"    vector<int> ans;\n    for (int i = a; i <= b; i++) {\n        if (isPerfectSquare(i)) {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/591","completion":"    int temp;\n\n    if (newlist.size() < 2)\n        return newlist;\n\n    temp = newlist[0];\n    newlist[0] = newlist[newlist.size() - 1];\n    newlist[newlist.size() - 1] = temp;\n    return newlist;\n}","language":"cpp"}
{"task_id":"MBCPP\/592","completion":"  return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/593","completion":"    if (ip.find(\"::\") >= 0) {\n        ip = ip.replace(\"::\", \".\");\n    }\n\n    if (ip.find(\".\") == 0) {\n        ip = ip.replace(\".\", \"0\");\n    }\n\n    return ip;\n}","language":"cpp"}
{"task_id":"MBCPP\/594","completion":"    vector<int> even_list = list1.filter(x => x % 2 == 0);\n    vector<int> odd_list = list1.filter(x => x % 2 == 1);\n\n    return even_list.size() - odd_list.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/597","completion":"    if (m >= n) return arr1[m - 1];\n    int mid = (m + n) \/ 2;\n    if (k == mid) return arr2[k - 1];\n    if (k < mid) return findKth(arr1, arr2, m, mid, k);\n    return findKth(arr1, arr2, mid + 1, n, k - mid - 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/598","completion":"    int total = 0,\n        temp = number,\n        digits = 0;\n\n    while (temp > 0) {\n        digits++;\n        total += (temp % 10) ** digits;\n        temp \/= 10;\n    }\n\n    return total == number;\n}","language":"cpp"}
{"task_id":"MBCPP\/600","completion":"    return n & 1 == 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/602","completion":"    string str2 = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        str2 += str1[i];\n    }\n    if (str2.count(str1) == 1) {\n        return str1;\n    }\n    else {\n        return \"None\";\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/603","completion":"    vector<int> ret;\n    for(int i = 0; i <= n; ++i) {\n        ret.push_back(i);\n    }\n    return ret;\n}","language":"cpp"}
{"task_id":"MBCPP\/604","completion":"    string s2 = \"\";\n    int i = 0;\n    for (int j = s.length() - 1; j >= 0; j--) {\n        char ch = s[j];\n        if (ch == ' ') {\n            reverse(s2 + \" \");\n            s2 = \"\";\n        } else {\n            s2 = ch + s2;\n        }\n    }\n\n    reverse(s2 + \" \");\n    return s2;\n}","language":"cpp"}
{"task_id":"MBCPP\/605","completion":"    if (num < 2)\n        return false;\n    for (int i = 2; i < num; ++i) {\n        if (num % i == 0)\n            return false;\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/606","completion":"  return (degree * 3.141592653589) \/ 180;\n}","language":"cpp"}
{"task_id":"MBCPP\/608","completion":"    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/609","completion":"    int a0 = a < 0 ? -a : a;\n    int b0 = b < 0 ? -b : b;\n    int n0 = n < 0 ? -n : n;\n    int min = a0;\n    for (int i = 1; i < n0; i++) {\n        min = min * a0 + b0;\n    }\n    return min;\n}","language":"cpp"}
{"task_id":"MBCPP\/610","completion":"    \/\/ write your code here\n    return list1;\n}","language":"cpp"}
{"task_id":"MBCPP\/611","completion":"    vector<int> maxCol;\n    maxCol.resize(n);\n    for(int i=0; i<testList.size(); i++) {\n        int j = 0;\n        int maxVal = -1;\n        while(j<n && testList[i][j] != 0) {\n            maxVal = testList[i][j];\n            j++;\n        }\n        maxCol[j-1] = maxVal;\n    }\n\n    int maxVal = -1;\n    for(int i=0; i<maxCol.size(); i++) {\n        if(maxCol[i] > maxVal)\n            maxVal = maxCol[i];\n    }\n    return maxVal;\n}","language":"cpp"}
{"task_id":"MBCPP\/614","completion":"    int sum = 0;\n    int prev = 0;\n    for (int i = 0; i < testList.size(); i++) {\n        if (i == 0) {\n            for (int j = 0; j < testList[i].size(); j++) {\n                prev = testList[i][j];\n                sum = sum + testList[i][j];\n            }\n        } else {\n            for (int j = 0; j < testList[i].size(); j++) {\n                sum = sum + testList[i][j] - prev;\n                prev = testList[i][j];\n            }\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/615","completion":"    vector<int> sum = {0};\n    vector<int> count = {0};\n\n    for (auto &amp;element : nums.begin()) {\n        for (auto &amp;num : element.begin()) {\n            sum[0] += num;\n            count[0]++;\n        }\n    }\n\n    return {sum[0] \/ count[0], 0};\n}","language":"cpp"}
{"task_id":"MBCPP\/616","completion":"    vector<int> resultTup;\n    \/\/ Calculate the modulo of the two elements.\n    int (*calcModulo)(int, int) = (a, b) {\n        return a % b;\n    };\n    resultTup = testTup1.map(calcModulo, testTup2);\n    return resultTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/618","completion":"    vector<double> result;\n    int size1 = nums1.size();\n    int size2 = nums2.size();\n    result.resize(size1);\n    for (int i = 0; i < size1; i++) {\n        result[i] = nums1[i] \/ nums2[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/619","completion":"    string result = \"\";\n    int i;\n    for (i = 0; i < testStr.length(); i++) {\n        if (testStr[i] >= '0' && testStr[i] <= '9') {\n            result += testStr[i];\n        }\n    }\n\n    for (; i < testStr.length(); i++) {\n        result += testStr[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/620","completion":"  vector<int> S;\n  vector<int> L;\n  vector<int> prev;\n  S.resize(n);\n  L.resize(n);\n  S[0] = 0;\n  for (int i = 1; i < n; i++) {\n    S[i] = 1;\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = i - 1; j >= 0; j--) {\n      if (a[j] % a[i] == 0) {\n        S[i] = Math.max(S[i], S[j] + 1);\n      }\n    }\n  }\n  prev = vector<int>(n);\n  for (int i = 0; i < n; i++) {\n    L[i] = S[i];\n  }\n  for (int i = 1; i < n;","language":"cpp"}
{"task_id":"MBCPP\/621","completion":"    \/\/ TODO: Implement.\n    return testList;\n}","language":"cpp"}
{"task_id":"MBCPP\/622","completion":"    double median = 0.0;\n    if (n % 2 == 0) {\n        median = (arr1[n\/2] + arr2[n\/2])\/2.0;\n    } else {\n        median = arr1[n\/2];\n    }\n    return median;\n}","language":"cpp"}
{"task_id":"MBCPP\/623","completion":"  vector<int> res;\n  res.resize(0);\n  res += nums;\n  vector<int> nth;\n  nth.resize(n);\n  nth += nums;\n  vector<int> mult;\n  mult.resize(n);\n  mult += nums;\n  vector<int> add;\n  add.resize(n);\n  add += nums;\n  vector<int> power;\n  power.resize(n);\n  power += nums;\n  for (int i = 0; i < nums.size(); i++) {\n    int mult_num = mult[i] * mult[i];\n    int add_num = add[i] + add[i];\n    int pow_num = power[i] + power[i];\n    nth.push_back(add_num);\n    mult.push_back(mult_num);\n    add.push_back(add_num);\n    power.push_back(pow_num);\n  }\n  return nth;\n}","language":"cpp"}
{"task_id":"MBCPP\/624","completion":"    return str.toUpper();\n}","language":"cpp"}
{"task_id":"MBCPP\/625","completion":"  if(newlist.size() == 0) return newlist;\n  int tmp = newlist[0];\n  newlist[0] = newlist[newlist.size()-1];\n  newlist[newlist.size()-1] = tmp;\n  return newlist;\n}","language":"cpp"}
{"task_id":"MBCPP\/626","completion":"    int a, b, c, s, area;\n    a = b = c = r;\n    while (a > 0) {\n        if (b > 0) {\n            if (c > 0) {\n                s = (a + b + c) \/ 2;\n                area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n                if (area == int(area)) {\n                    return area;\n                }\n            }\n            c = b;\n        } else {\n            b = a;\n        }\n        a--;\n        b--;\n        c--;\n    }\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/627","completion":"    \/\/ Add your code here\n\n\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/628","completion":"    return str.replace(\" \", \"%20\");\n}","language":"cpp"}
{"task_id":"MBCPP\/629","completion":"    vector<int> result;\n\n    \/\/ Find the middle of the list\n    int middle = length(list) \/ 2;\n\n    \/\/ Find the start and end of the middle.\n    int start = 0;\n    int end = length(list);\n\n    int mid;\n    int current;\n    int next;\n    int odd;\n    int count = 0;\n\n    while (start < end) {\n        mid = start + (end - start) \/ 2;\n        current = list[mid];\n        next = list[mid + 1];\n        count++;\n\n        if (current % 2 == 0) {\n            start = mid + 1;\n        } else {\n            end = mid;\n        }\n    }\n\n    \/\/ The result is the difference between the count and the length.\n    int difference = count - length(list);\n    \/\/ If it's even, the difference is zero.\n    if (difference % 2 ","language":"cpp"}
{"task_id":"MBCPP\/630","completion":"    vector<vector<int>> coordinates(testTup.size());\n    for (int i = 0; i &lt; testTup.size(); i++) {\n        for (int j = 0; j &lt; testTup.size(); j++) {\n            if ((i != 0 &amp;&amp; testTup[i] == testTup[i - 1]) ||\n                (j != 0 &amp;&amp; testTup[i] == testTup[j - 1])) {\n                vector<int> coordinate = {testTup[i], testTup[j]};\n                coordinates[i * testTup.size() + j] = coordinate;\n            }\n        }\n    }\n    return coordinates;\n}","language":"cpp"}
{"task_id":"MBCPP\/631","completion":"    string result;\n    result = re.replace(regex(re.any_char_except(string(whitespace)) + \"*\"), string(\"_\"), text);\n    result = re.replace(regex(re.any_char_except(string(\"_\")) + \"*\"), string(\" \"), result);\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/632","completion":"  vector<int> retList;\n  vector<int> zeroList;\n\n  zeroList.push_back(0);\n  retList.resize(numList.size());\n  for (int i = 0; i < numList.size(); i++) {\n    if (numList[i] == 0) {\n      zeroList.pop_back();\n    } else {\n      retList[i] = numList[i];\n    }\n  }\n\n  for (int i = 0; i < zeroList.size(); i++) {\n    retList[i] = zeroList[i];\n  }\n\n  return retList;\n}","language":"cpp"}
{"task_id":"MBCPP\/633","completion":"    \/\/ 1. Create two pointers & Initialize all element with 0\n    int ptr1 = 0;\n    int ptr2 = 0;\n    int xor_sum = 0;\n\n    \/\/ 2. While we do not reach end of arr\n    while (ptr2 < n) {\n        \/\/ 3. Add elements of both the pointers\n        xor_sum += arr[ptr1] ^ arr[ptr2];\n\n        \/\/ 4. Increment pointer 1\n        ptr1++;\n\n        \/\/ 5. Increment pointer 2\n        ptr2++;\n    }\n\n    \/\/ 6. Return the sum of the xor\n    return xor_sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/634","completion":"    \/\/ We use the same variable to hold the sum in a local scope\n    \/\/ to avoid creating extra copies of the sum.\n    int sum = 0;\n    for (int i = 0; i <= n; i += 2) {\n        sum += (i & 1) * i * i * i;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/635","completion":"    \/\/ write your code here\n    return null;\n}","language":"cpp"}
{"task_id":"MBCPP\/636","completion":"    if (a < 0 && b >= 0 && c >= 0) {\n        return string(\"No\");\n    } else if (a >= 0 && b < 0 && c >= 0) {\n        return string(\"No\");\n    } else if (a >= 0 && b >= 0 && c < 0) {\n        return string(\"No\");\n    } else if (a >= 0 && b < 0 && c < 0) {\n        return string(\"No\");\n    } else if (a < 0 && b < 0 && c >= 0) {\n        return string(\"No\");\n    } else if (a < 0 && b >= 0 && c < 0) {\n        return string(\"No\");\n    } else if (a < 0 && b < 0 && c < 0) {\n        return string(\"No\");\n","language":"cpp"}
{"task_id":"MBCPP\/637","completion":"    \/\/ write your code here\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/638","completion":"    int i;\n    for (i = 0; i < 7; i++) {\n        if ((v < (i + 1)) && (t > (i + 1))) {\n            break;\n        }\n    }\n    v = i + 1;\n    if (v >= 7) {\n        v = 0;\n    }\n    t = i + 1;\n    if (t >= 7) {\n        t = 0;\n    }\n    return (v - t);\n}","language":"cpp"}
{"task_id":"MBCPP\/639","completion":"  return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/640","completion":"    return items.scan(\"([\\\\(\\\\)])\", {\n        \"^$\": \" \",\n        \"0\": \"\",\n        \"1\": \" \"\n    });\n}","language":"cpp"}
{"task_id":"MBCPP\/641","completion":"  \/\/ O(n^2) solution\n  int result = 0;\n  int start = 0;\n  int end = n;\n  while (start <= end) {\n    int mid = start + ((end - start) \/ 2);\n    if (mid % 5 == 0) {\n      result += mid + 1;\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/643","completion":"    string word = \"z\";\n    string match = string();\n\n    match += text.find(word);\n\n    if (match.find(string(\"*\")) != -1) {\n        match = match.substr(1, match.length() - 2);\n    }\n\n    return string(\"Not matched! \" + match);\n}","language":"cpp"}
{"task_id":"MBCPP\/644","completion":"    vector<int> output;\n\n    int n = input.size();\n    if (k >= n) {\n        output.resize(n);\n        for (int i = 0; i < n; i++) {\n            output[i] = input[i];\n        }\n    } else {\n        output.resize(k);\n        for (int i = 0, j = n - k; i < k; i++, j++) {\n            output[i] = input[j];\n        }\n        for (int i = k; i < n; i++, j--) {\n            output[i] = input[j];\n        }\n    }\n\n    return output;\n}","language":"cpp"}
{"task_id":"MBCPP\/645","completion":"    return findKProduct(testList, k, 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/646","completion":"    return (int)((n + 1) * n * k + n * (n + 1) \/ 2) \/ (k + 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/647","completion":"    string output[3];\n    for (int i = 0; i &lt; text.length(); i++) {\n        if (text[i] == text[i].tolower()) {\n            output[2] += text[i];\n        } else {\n            output[1] += text[i];\n        }\n    }\n    return output;\n}","language":"cpp"}
{"task_id":"MBCPP\/648","completion":"    vector<int> result;\n    result.push_back(lst[0]);\n    for (int i = 1; i < lst.size(); i++) {\n        if (i + 1 == lst.size()) {\n            result.push_back(lst[i]);\n        } else if (i + 2 == lst.size()) {\n            result.push_back(lst[i]);\n            result.push_back(lst[i + 1]);\n        } else if (i + 3 == lst.size()) {\n            result.push_back(lst[i]);\n            result.push_back(lst[i + 1]);\n            result.push_back(lst[i + 2]);\n        } else {\n            result.push_back(lst[i]);\n            result.push_back(lst[i + 1]);\n            result.push_back(lst[i + 2]);\n            result.push_back(lst[i + 3]);\n        ","language":"cpp"}
{"task_id":"MBCPP\/649","completion":"    \/\/TODO: Write your code here\n\n    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/650","completion":"    vector<bool> res;\n    res[0] = arr1[0] == arr2[0];\n    for (int i = 1; i < n; i++) {\n        res[i] = (arr1[i] == arr2[i]) && res[i - 1];\n    }\n    for (int j = n; j < m; j++) {\n        res[j] = (arr1[j] == arr2[j]);\n    }\n    return all(res);\n}","language":"cpp"}
{"task_id":"MBCPP\/651","completion":"    \/\/ Your code here\n}","language":"cpp"}
{"task_id":"MBCPP\/652","completion":"    vector<string> strList = vector<string>();\n    for (int i = 0; i &lt; testList.size(); i++) {\n        vector<int> column = testList[i];\n        for (int j = 0; j &lt; column.size(); j++) {\n            strList.push_back(vector<string>::const_cast<string>(i) + \",\" + vector<string>::const_cast<string>(j) + \" = \" + column[j]);\n        }\n    }\n    return join(strList);\n}","language":"cpp"}
{"task_id":"MBCPP\/654","completion":"    return 2 * (l + b);\n}","language":"cpp"}
{"task_id":"MBCPP\/655","completion":"    \/\/ write code here\n    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/656","completion":"    vector<int> diff = {0};\n\n    int minDiff = Integer.MAX_VALUE;\n    for (int i = 0; i < n; i++) {\n        diff[i] = abs(a[i] - b[i]);\n        minDiff = min(minDiff, diff[i]);\n    }\n\n    for (int i = 1; i < n; i++) {\n        diff[i] = diff[i] - minDiff;\n    }\n\n    return min(diff);\n}","language":"cpp"}
{"task_id":"MBCPP\/657","completion":"    return (n < 10) ? n : firstDigit(n \/ 10) * 10 + n % 10;\n}","language":"cpp"}
{"task_id":"MBCPP\/658","completion":"    if (list1.size() == 1) {\n        return list1[0];\n    } else if (list1.size() == 2) {\n        if (list1[0] >= list1[1]) {\n            return list1[1];\n        } else {\n            return list1[0];\n        }\n    } else {\n        int max_occurences = list1[0];\n        vector<int> v_max_occurences = vector<int>();\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1[i] > max_occurences) {\n                max_occurences = list1[i];\n                v_max_occurences.push_back(list1[i]);\n            }\n        }\n        return max_occurences;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/659","completion":"    vector<int> res;\n    int i = 0;\n    for (auto &amp;y : x) {\n        res.push_back(y);\n        if (y != x[i]) {\n            res.push_back(y);\n        }\n        i++;\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/660","completion":"    \/\/ check for empty range\n    if (l1 > r1 || l2 > r2) {\n        return vector<int>();\n    }\n    \n    vector<int> results = vector<int>();\n    \/\/ compare each element of the range to the current element of the first range\n    for (int i = l1; i <= r1; i++) {\n        if (l2 < r2) {\n            if (r2 >= l2 && i <= r2) {\n                results.push_back(i);\n            } else if (i > r2) {\n                break;\n            }\n        } else if (l2 == r2) {\n            if (i == l2) {\n                results.push_back(i);\n            } else if (i > l2) {\n                break;\n            }\n        } else {\n            if (i <= r2) {\n                results.push_back(","language":"cpp"}
{"task_id":"MBCPP\/661","completion":"    int i;\n    int max = 0;\n\n    for (i = 0; i < n-2; i++) {\n        if (arr[i] + arr[i+1] + arr[i+2] > arr[i] + arr[i+1] + arr[i+2] + 1)\n            max = arr[i] + arr[i+1] + arr[i+2] + 1;\n    }\n\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/662","completion":"    \/\/ 1. Start with an empty vector\n    vector<int> v = {};\n    \/\/ 2. Loop over the keys of the dictionary\n    for (auto key : dict1.keys()) {\n        \/\/ 3. Sort the elements of the keys\n        v.push_back(sort(dict1[key]));\n    }\n    \/\/ 4. Return the dictionary\n    return dict1;\n}","language":"cpp"}
{"task_id":"MBCPP\/663","completion":"\treturn 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/664","completion":"    int sum=0;\n    for(int i=0;i<n;i++)\n    {\n        if(i%2==0)\n        sum+=i;\n    }\n    return sum\/n;\n}","language":"cpp"}
{"task_id":"MBCPP\/665","completion":"  vector<int> result;\n  result.push_back(numList[0]);\n  for (int i = numList.size(); i > 1; i--) {\n    numList.push_back(numList[i - 1]);\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/666","completion":"    int result = 0;\n    int n = str.size();\n    for(int i = 0; i < n; i++) {\n        if (str[i] == chr) {\n            result = result + 1;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/667","completion":"    int count = 0;\n    for (int i = 0; i < str.size(); i++) {\n        if (vowels[str[i] - 'a'] != 0) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/668","completion":"    string res = \"\";\n    int i;\n    for(i = 0; i < str.size(); i++)\n        if(str[i] == chr)\n            res += str[i];\n        else\n            res += \"_\" + str[i];\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/669","completion":"    \/\/check ip address using regex\n    return \"Invalid IP address\";\n}","language":"cpp"}
{"task_id":"MBCPP\/670","completion":"    \/\/ 1. find the first num greater than or equal to the last\n    \/\/ 2. check the value at the same index for all the nums.\n    \/\/ 3. if the value at the index is less than the first value, then it's decreasing trend.\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/671","completion":"  \/\/ Clear the right most set bit (highest order bit).\n  n &= ~(1 << (int) ((n).bit_length() - 1));\n  return n;\n}","language":"cpp"}
{"task_id":"MBCPP\/672","completion":"    if (num1 > num2) {\n        if (num1 > num3) {\n            return num1;\n        }\n        return num3;\n    }\n    if (num2 > num3) {\n        return num2;\n    }\n    return num3;\n}","language":"cpp"}
{"task_id":"MBCPP\/673","completion":"    int result = 0;\n    for (int element : list) {\n        result = result * 10 + element;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/674","completion":"  using (set<string> s = set()) {\n    s.add(str.begin(), str.end());\n    return join(s);\n  }\n}","language":"cpp"}
{"task_id":"MBCPP\/675","completion":"    if ((x >= m && y >= n) || (x >= n && y >= m)) {\n        return 0;\n    }\n    return x + y;\n}","language":"cpp"}
{"task_id":"MBCPP\/676","completion":"    if (text1.length() < 2) {\n        return text1;\n    }\n\n    string text2 = text1.replace(\n        \/\/ First, remove all but alphanumeric characters.\n        \/\/ This is a negative lookbehind to avoid removing characters that are not alphanumeric.\n        \/\/ It is not necessary in this case since we do not need to remove characters that are not alphanumeric.\n        \/\/ In other cases, removing characters that are not alphanumeric may be a good idea.\n        \/\/ In particular, this approach is more general than the previous approach.\n        \/\/ See this post for more details: https:\/\/stackoverflow.com\/a\/6284721\/890943\n        \"(?<![A-Za-z0-9])\\\\p{L}+\",\n        \"\"\n    );\n\n    \/\/ Then, remove all space characters (space, tab, linefeed, carriage return)\n    \/\/ This is a negative lookahead to avoid removing characters that are not space.\n    \/\/ It is not necessary in this case since we do not need to remove characters that are","language":"cpp"}
{"task_id":"MBCPP\/677","completion":"  if (a + b <= c || a + c <= b || c + b <= a) return false;\n  return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/678","completion":"    string str = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        if (str1.at(i) == ' ') {\n            \/\/ pass\n        } else {\n            str += str1.at(i);\n        }\n    }\n    return str;\n}","language":"cpp"}
{"task_id":"MBCPP\/679","completion":"  auto iter = ditionary.begin();\n  while (iter != ditionary.end()) {\n    if (key == iter->second) {\n      return iter->first;\n    }\n    iter = ditionary.next(iter);\n  }\n\n  return \"\";\n}","language":"cpp"}
{"task_id":"MBCPP\/680","completion":"    \/\/ write your code here.\n    int num = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] >= num) {\n            num = nums[i];\n        } else {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/681","completion":"    int i;\n    int d = 2;\n    while (d * d <= n) {\n        while (n % d == 0) {\n            n \/= d;\n        }\n        d++;\n    }\n    if (n > 1) {\n        return n;\n    }\n    return d - 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/682","completion":"    return nums1.map { x * nums2[i] for i in nums1.begin() }\n}","language":"cpp"}
{"task_id":"MBCPP\/683","completion":"    \/\/ Use two pointers to save the sum of squares.\n    \/\/ Start from the last digit.\n    int i = (int)(n \/ 10);\n    int j = n % 10;\n\n    \/\/ Start from the back.\n    int sum = 0;\n    while (i > 0) {\n        \/\/ Calculate the square of the current digit.\n        sum += (j * j);\n        \/\/ Move the index.\n        i--;\n        \/\/ Move the pointer.\n        j = (int)(i % 10);\n    }\n\n    \/\/ Return the result.\n    return (sum == n);\n}","language":"cpp"}
{"task_id":"MBCPP\/684","completion":"  int count = 0;\n  for (int i = 0; i < str.length(); i++) {\n    if (str[i] == x[0]) {\n      int j = 1;\n      while (j < x.length() && str[i + j] == x[j]) {\n        j++;\n      }\n      if (j == x.length()) {\n        count++;\n      }\n    }\n  }\n  return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/685","completion":"\tint sum = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (isPrime(i))\n\t\t\tsum += i;\n\t}\n\treturn sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/686","completion":"    string ret = string();\n    if (testTup.empty()) {\n        ret = \"Empty\";\n    } else {\n        \/\/ Your code goes here.\n    }\n    return ret;\n}","language":"cpp"}
{"task_id":"MBCPP\/687","completion":"    if(b == 0)\n        return a;\n    return recurGcd(b, a % b);\n}","language":"cpp"}
{"task_id":"MBCPP\/688","completion":"    double r = 0, i = 0;\n    double re = (double) a;\n    double im = (double) b;\n    double len;\n    if (im == 0.0) {\n        len = re;\n    } else if (re == 0.0) {\n        len = im;\n    } else {\n        len = Math.sqrt(re * re + im * im);\n    }\n    return len;\n}","language":"cpp"}
{"task_id":"MBCPP\/689","completion":"  \/\/ write code here\n  vector<int> dp(n+1, 0);\n  int k;\n  for(k = 0; k <= n; k++)\n  {\n    if(k >= arr[k])\n    {\n      dp[k] = dp[k-arr[k]]+1;\n    }\n    else\n    {\n      dp[k] = 1;\n    }\n  }\n  return dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/690","completion":"    \/\/ sort the given list - note, this is O(nlog(n))\n    sort(nums.begin(), nums.end());\n\n    \/\/ initialize 2 pointers\n    \/\/ one from start of list, one from end of list\n    int start = 0;\n    int end = nums.size() - 1;\n\n    \/\/ initialize the multiplied list as the first element\n    \/\/ of the input list\n    vector<int> multiplied = nums.begin();\n\n    \/\/ iterate from the start of the list to the end of the list\n    while (start < end) {\n        \/\/ get the product of two consecutive elements\n        int product = nums[start] * nums[end];\n\n        \/\/ add the product to the multiplied list\n        multiplied.push_back(product);\n\n        \/\/ move start pointer to point to next element\n        start++;\n\n        \/\/ move end pointer to point to previous element\n        end--;\n    }\n\n    \/\/ return the multiplied list\n    return multiplied;\n}","language":"cpp"}
{"task_id":"MBCPP\/691","completion":"    unordered_map<int, vector<int>> result = {{}} ;\n    for (auto &lt;int,vector<int>> e: testList) {\n        if (result.find(e[1].begin()) == result.end()) {\n            result[e[1].begin()] += e;\n        } else {\n            result.insert(e[1].begin(), e);\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/692","completion":"    \/* start of modification *\/\n    if (n < 10)\n        return n;\n    \/* end of modification *\/\n    n -= 10;\n    return lastTwoDigits(n % 100) + (n \/ 100);\n}","language":"cpp"}
{"task_id":"MBCPP\/693","completion":"\tstring text2 = \"\";\n\tint c = 0;\n\tfor (int i = 0; i < text1.length(); i++) {\n\t\tc = text1.find(\" \", i);\n\t\tif (c != -1) {\n\t\t\ttext2 += text1.substr(0, i);\n\t\t\ti = c;\n\t\t}\n\t}\n\ttext2 += text1.substr(i);\n\treturn text2;\n}","language":"cpp"}
{"task_id":"MBCPP\/694","completion":"    vector<int> unique_list = new vector<int>();\n    \/\/Iterate through the map\n    for (auto &amp;value : testDict) {\n        for (auto&amp;key : testDict[value]) {\n            unique_list.push_back(key);\n        }\n    }\n\n    return unique_list;\n}","language":"cpp"}
{"task_id":"MBCPP\/695","completion":"    for (int i = 0; i < testTup2.size(); i++) {\n        if (testTup1[i] < testTup2[i]) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/697","completion":"    return arrayNums\n            .filter(x => x % 2 == 0)\n            .size();\n}","language":"cpp"}
{"task_id":"MBCPP\/701","completion":"    int sum = 0, leftSum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if (leftSum == sum - leftSum) return i;\n        leftSum += arr[i];\n    }\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/702","completion":"    if (n == 0) {\n        return 0;\n    }\n\n    \/* Find the minimum and maximum values of the elements of the array *\/\n    int min = amin(arr, n, k);\n    int max = amax(arr, n, k);\n    int res = 0;\n\n    if (min >= k) {\n        \/* If the minimum value is greater than or equal to k, we can just remove\n           the maximum value from the array and decrement the size of the largest\n           remaining elements *\/\n        int v = max - k;\n        arr.erase(v);\n        res = 1;\n    } else if (max >= k) {\n        \/* Otherwise, we can remove the minimum value and decrement the size of\n           the smallest remaining elements. We can remove either the minimum or\n           maximum value. *\/\n        arr.erase(min);\n        res += 1;\n        arr.erase(max - k);\n        res += 1;\n    }\n    return res;","language":"cpp"}
{"task_id":"MBCPP\/703","completion":"    if (d.find(x) != d.end()) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/704","completion":"    int a[N] = {0};\n    double sum = 0.0;\n    for (int i = 0; i < n; i++) {\n        sum += 1.0 \/ (i + 1);\n        a[i] = sum;\n    }\n    return a[n - 1];\n}","language":"cpp"}
{"task_id":"MBCPP\/706","completion":"    \/\/ sort first\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            if (arr1[i] > arr1[j]) {\n                int temp = arr1[i];\n                arr1[i] = arr1[j];\n                arr1[j] = temp;\n            }\n        }\n    }\n\n    \/\/ find the pivot\n    int pivot = arr1[m];\n    int index = 0;\n    int i = 0;\n    int j = n;\n    while (i < j) {\n        while (arr1[i] < pivot && i < j) {\n            ++i;\n        }\n\n        while (arr1[j] >= pivot && i < j) {\n            --j;\n        }\n\n        if (i < j) {\n            int","language":"cpp"}
{"task_id":"MBCPP\/707","completion":"    \/*\n     * 1. Find number of set bits in binary representation of n.\n     * 2. Count number of set bits using the formula n * (n + 1) \/ 2.\n     * 3. Divide result by two to get total number of set bits.\n     *\/\n    int count = 0;\n\n    \/*\n     * 1. Find number of set bits in binary representation of n.\n     * 2. Iterate through binary representation of n.\n     * 3. If the bit is set, count is incremented by 1.\n     *\/\n    while (n > 0) {\n        \/\/ Get least significant bit.\n        n = n & (n - 1);\n        count++;\n    }\n\n    \/\/ 4. Divide result by two to get total number of set bits.\n    return count \/ 2;\n}","language":"cpp"}
{"task_id":"MBCPP\/708","completion":"    vector<string> result;\n    for(string s : str.begin(), str.end()) {\n        result.push_back(s);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/709","completion":"    vector<string> unique = {\"\"};\n\n    for (auto it = testList.begin(); it != testList.end(); it++) {\n        vector<int> keys = it->second;\n        unique.push_back(keys.join(\"\"));\n    }\n\n    unique.sort();\n    unique.reverse();\n    return unique.join(\",\");\n}","language":"cpp"}
{"task_id":"MBCPP\/710","completion":"    vector<int> initial = {testTup[0], testTup[1]};\n    vector<int> last = initial;\n    for (int i = 2; i < testTup.size(); i++) {\n        last = {testTup[i], last[1]};\n    }\n    return initial;\n}","language":"cpp"}
{"task_id":"MBCPP\/711","completion":"    bool evenProduct = true;\n    bool oddProduct = true;\n    int currentProduct = 1;\n    int digitsCount = 1;\n    int previousDigit = 0;\n\n    for (int i = 0; i < n; i++) {\n        int digit = (int)n % 10;\n        n \/= 10;\n\n        if (digitsCount % 2 == 0) {\n            evenProduct = evenProduct && (digit * currentProduct == previousDigit);\n        }\n        else {\n            oddProduct = oddProduct && (digit * currentProduct == previousDigit);\n        }\n\n        previousDigit = digit;\n        currentProduct *= digit;\n        digitsCount++;\n    }\n\n    return evenProduct || oddProduct;\n}","language":"cpp"}
{"task_id":"MBCPP\/713","completion":"    int sum = 0;\n    for (int i = 0; i &lt; testTup.size(); i++) {\n        sum += testTup[i];\n    }\n\n    if (sum == testTup.size()) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/714","completion":"    int count = 1;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            for (int j = 2; i * j <= n; j++) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/715","completion":"    int strLen = strlen(testStr);\n\n    vector<int> tuple = {0};\n\n    for (int i = 0; i < strLen; i = i + 1) {\n        tuple[i] = strtoint(testStr[i]);\n    }\n    return tuple;\n}","language":"cpp"}
{"task_id":"MBCPP\/716","completion":"    int sum = 0;\n    for (int i=1; i<a; i++) {\n        sum += 2*i - 1;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/717","completion":"    auto sum = 0;\n    auto n = data.size();\n    for (auto &amp;d : data) sum += d;\n    return sqrt(sum \/ n);\n}","language":"cpp"}
{"task_id":"MBCPP\/719","completion":"    match(text, \/a(.*)b\/);\n    if (matched) {\n        matched.captures();\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"cpp"}
{"task_id":"MBCPP\/721","completion":"    vector<vector<double>> D[n];\n    for (int i = 0; i < n; i++) {\n        D[i].push_back(cost[i]);\n    }\n    vector<int> path(n);\n\n    vector<int> next = {0};\n    for (int i = 1; i < n; i++) {\n        path[i] = i;\n    }\n    int i = 0;\n    double max = cost[0][0];\n    for (; i < n - 1; i++) {\n        if (max < D[i][i]) {\n            max = D[i][i];\n            next[i] = i;\n        } else {\n            break;\n        }\n    }\n    if (i == n - 1) {\n        next[i] = -1;\n    }\n    for (; i < n; i++) {\n        for (int j","language":"cpp"}
{"task_id":"MBCPP\/723","completion":"    vector<pair int=\"\">> pairs;\n    vector<pair int=\"\">> result;\n    int index;\n\n    pairs.clear();\n    for (int i = 0; i < nums1.size(); i++) {\n        for (int j = 0; j < nums2.size(); j++) {\n            if ((nums1[i] == nums2[j]) &amp;&amp; ((i != j) || (i == 0) || (j == 0))) {\n                index = pairs.size();\n                pairs.push_back({nums1[i], nums2[j]});\n                if (index == 0) {\n                    result.push_back({nums1[i], nums2[j]});\n                }\n            }\n        }\n    }\n\n    return result.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/724","completion":"    \/\/ write your code here\n    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/725","completion":"    vector<string> ret;\n\n    text1.erase(regex_replace(text1, \".*\\\"(.*)\\\".*\", \"$1\"));\n\n    text1.erase(regex_replace(text1, \".*\\\"(.*)\\\".*\", \"$1\"));\n\n    regex_replace(text1, \".*\\\"\", \"\");\n\n    string[] tokens = text1.split(regex_replace(text1, \".*\\\"(.*)\\\".*\", \"$1\"));\n\n    if (tokens.size() >= 3) {\n        ret.push_back(tokens[0]);\n        ret.push_back(tokens[2]);\n    }\n\n    return ret;\n}","language":"cpp"}
{"task_id":"MBCPP\/726","completion":"    vector<int> result;\n    int index = 0;\n    int i;\n    int j;\n    for (i = 0; i < testTup.size(); i++) {\n        for (j = 0; j < testTup.size() - 1; j++) {\n            if (testTup[j] * testTup[j + 1] != 0) {\n                result.push_back(testTup[j] * testTup[j + 1]);\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/727","completion":"    s.regex = \/[^a-zA-Z0-9]\/\n    return s\n}","language":"cpp"}
{"task_id":"MBCPP\/728","completion":"    vector<int> v;\n    v.resize(lst1.size());\n    for (auto i = 0; i < lst1.size(); i++)\n        v[i] = lst1[i] + lst2[i];\n    return v;\n}","language":"cpp"}
{"task_id":"MBCPP\/729","completion":"    return nums1.map(n -> n + nums2[n]);\n}","language":"cpp"}
{"task_id":"MBCPP\/731","completion":"    double area;\n    area = 2 * PI * r * h + PI * (r ** 2 + h ** 2) \/ 3;\n    return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/732","completion":"  string result;\n  string specialChars = \" ,.\";\n  string replaceChars = \":\";\n  int index;\n  for (index = 0; index < specialChars.size(); index++) {\n    text.erase(0, 1);\n    text.erase(text.find(specialChars[index]), 1);\n    if (text.end() == 0) {\n      break;\n    }\n  }\n  for (; index < specialChars.size(); index++) {\n    result += replaceChars;\n  }\n  return result + text;\n}","language":"cpp"}
{"task_id":"MBCPP\/733","completion":"    int left = 0;\n    int right = a.size() - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) \/ 2;\n\n        if (a[mid] == x) {\n            \/\/ Element is found.\n            while (a[mid - 1] == x) mid--;\n            return mid;\n        } else if (x < a[mid]) {\n            \/\/ Element is to the left of the mid-point.\n            right = mid - 1;\n        } else {\n            \/\/ Element is to the right of the mid-point.\n            left = mid + 1;\n        }\n    }\n\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/734","completion":"    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/735","completion":"  return n ^ (n >> 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/736","completion":"    int i = 0;\n    while (i < a.size() && a[i] < x) i++;\n\n    return i;\n}","language":"cpp"}
{"task_id":"MBCPP\/737","completion":"    var regex = \/a|e|i|o|u\/;\n    if (regex.test(str)) {\n        return \"Valid\";\n    }\n    return \"Invalid\";\n}","language":"cpp"}
{"task_id":"MBCPP\/738","completion":"    double a = (double) (1+n) \/ n;\n    return (a * a * a - 1) * (n-1);\n}","language":"cpp"}
{"task_id":"MBCPP\/739","completion":"  \/\/return findIndex(n, 2 * 10**n + 1);\n  return findIndex(n, 2 * 10**n + 1, 10**(n - 1));\n}","language":"cpp"}
{"task_id":"MBCPP\/740","completion":"    unordered_map<int, int> result;\n\n    for (int i = 0; i < testTup.size(); i++) {\n        if (i < testTup.size() - 1) {\n            result[testTup[i]] = testTup[i + 1];\n        }\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/741","completion":"    if (s.length() == 1) {\n        return s[0] == s[0];\n    }\n    else {\n        if (s[0] == s[1]) {\n            return allCharactersSame(s[1:])\n        }\n        else {\n            return false;\n        }\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/742","completion":"    double area;\n    area = (1.0 \/ 2.0) * (side * side);\n    return area;\n}","language":"cpp"}
{"task_id":"MBCPP\/743","completion":"    vector<int> list2(m, n);\n    for (int i = 0; i < m; i++) {\n        list2[i] = list1[i];\n    }\n    for (int i = m; i < n; i++) {\n        list2[i] = list1[i - m];\n    }\n    for (int i = 0; i < n; i++) {\n        list2[i] = list1[i];\n    }\n    return list2;\n}","language":"cpp"}
{"task_id":"MBCPP\/744","completion":"    int count = 0;\n    for (int i : testTup) {\n        if (i == -1)\n            count++;\n    }\n    return count == 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/745","completion":"    vector<int> v = new vector<int>();\n    if (startnum % 10 == 0 && endnum % 10 == 0) v.push(startnum);\n    for (int i = startnum; i <= endnum; i++) {\n        if (i % 10 == 0) v.push(i);\n        for (int j = 0; j < i; j++) {\n            if (i % j == 0) v.push(i);\n        }\n    }\n    return v;\n}","language":"cpp"}
{"task_id":"MBCPP\/747","completion":"    int dp[][][] = new int[m+1][n+1][o+1];\n    for (int i = 1; i <= m; i++)\n        for (int j = 1; j <= n; j++)\n            for (int k = 1; k <= o; k++)\n                if (x.charAt(i-1) == y.charAt(j-1) && x.charAt(i-1) == z.charAt(k-1))\n                    dp[i][j][k] = 1 + dp[i-1][j-1][k-1];\n                else\n                    dp[i][j][k] = max(dp[i][j][k-1], dp[i-1][j][k], dp[i][j-1][k]);\n    return dp[m][n][o];\n}","language":"cpp"}
{"task_id":"MBCPP\/748","completion":"    string str;\n    Regex regex = new Regex(\"[A-Z][^A-Z]*\");\n    for (int i = 0; i < str1.length(); ++i) {\n        if (regex.IsMatch(str1.Substring(i, i + 1))) {\n            str += \" \" + str1.Substring(i, i + 1);\n        } else {\n            str += str1.Substring(i, i + 1);\n        }\n    }\n    return str;\n}","language":"cpp"}
{"task_id":"MBCPP\/749","completion":"    int c = 0;\n    vector<int> nums = vector<int>();\n\n    for (auto& numStr : numsStr) {\n        c = 0;\n        for (auto& num : numStr) {\n            if (!isDigit(c + num)) {\n                break;\n            }\n            nums[c++] = int(num);\n        }\n    }\n\n    c = 0;\n    for (auto& num : nums) {\n        numsStr[c] = intToString(num);\n        c++;\n    }\n\n    return nums;\n}","language":"cpp"}
{"task_id":"MBCPP\/750","completion":"    for (int i = 0; i < testList.size(); i++) {\n        testList[i] += testTup[i];\n    }\n    return testList;\n}","language":"cpp"}
{"task_id":"MBCPP\/751","completion":"    if (i >= arr.size()) {\n        return true;\n    }\n\n    int leftChild = i*2 + 1;\n    int rightChild = i*2 + 2;\n\n    if (leftChild >= arr.size()) {\n        return checkMinHeap(arr, rightChild);\n    }\n\n    if (rightChild >= arr.size()) {\n        return checkMinHeap(arr, leftChild) && (arr[i] > arr[leftChild] || arr[i] > arr[rightChild]);\n    }\n\n    return checkMinHeap(arr, leftChild) && checkMinHeap(arr, rightChild) && (arr[i] > arr[leftChild] || arr[i] > arr[rightChild]);\n}","language":"cpp"}
{"task_id":"MBCPP\/752","completion":"    return (n - 1) * (n + 1) * n \/ 4;\n}","language":"cpp"}
{"task_id":"MBCPP\/754","completion":"    vector<int> l;\n    int n;\n    int i;\n\n    n = l1.size();\n    l = vector<int>(n, 0);\n    for (i = 0; i < n; i++) {\n        if (l2[i] == l3[i]) {\n            l[i] = l1[i];\n        }\n    }\n    return l;\n}","language":"cpp"}
{"task_id":"MBCPP\/756","completion":"  if (text.length() == 0) {\n    return \"Empty string!\";\n  }\n\n  if (text.length() == 1 && text[0] == \"a\") {\n    return \"Found a match!\";\n  }\n\n  return \"Not matched!\";\n}","language":"cpp"}
{"task_id":"MBCPP\/757","completion":"    return nullptr;\n}","language":"cpp"}
{"task_id":"MBCPP\/759","completion":"    string n = num;\n    int len = num.length();\n    if (len == 0) return false;\n    int i = 0, point = 0, decimal = 0;\n    while (i < len) {\n        if (n[i] == '.') {\n            if (point > 1) return false;\n            else {\n                point = 1;\n                decimal = 0;\n            }\n        } else if (n[i] >= '0' && n[i] <= '9') decimal = decimal * 10 + (n[i] - '0');\n        i++;\n    }\n    if (point == 0) return decimal == 0;\n    else return decimal > 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/760","completion":"    vector<int> seen = new vector<int>();\n    for(int i = 0; i < n; i++) {\n        if(seen.size() == 0 || arr[i] != seen.back())\n            seen.push_back(arr[i]);\n        else\n            return \"NO\";\n    }\n    return \"YES\";\n}","language":"cpp"}
{"task_id":"MBCPP\/762","completion":"  \/\/ TODO\n  return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/763","completion":"  \/\/ use a temp array to store the minimum difference\n  vector<int> temp;\n\n  \/\/ go through the given array elements\n  for (int i = 0; i < n - 1; i++) {\n\n    \/\/ initialize the temp variable\n    temp.clear();\n\n    \/\/ go through all the other elements\n    for (int j = i + 1; j < n; j++) {\n\n      \/\/ check if the current element is bigger than the other\n      if (arr[i] >= arr[j]) {\n\n        \/\/ if it is, add it to the temp variable\n        temp.push_back(arr[j] - arr[i]);\n      }\n    }\n\n    \/\/ if temp variable is empty, we can't find a difference\n    if (temp.size() == 0) {\n      return -1;\n    }\n\n    \/\/ if not, get the minimum value from the temp variable\n    int min = temp.back();\n    \/\/ go through all the elements, and check if","language":"cpp"}
{"task_id":"MBCPP\/764","completion":"    int counter = 1;\n    char ch;\n\n    for(int i = 0; i < str.size(); i++) {\n        ch = str[i];\n        if (ch >= '0' && ch <= '9') {\n            counter++;\n        }\n    }\n\n    return counter;\n}","language":"cpp"}
{"task_id":"MBCPP\/765","completion":"    int i;\n    int result;\n\n    \/\/ Find the first 2 values of the sequence\n    for (i = 1; i < n; i++) {\n        if (n % i == 0) {\n            break;\n        }\n    }\n\n    result = n;\n\n    \/\/ If the number is odd, find the next one\n    if (i == n - 1) {\n        result = n + 1;\n    }\n\n    \/\/ If the number is even, find the previous one\n    if (i == 0) {\n        result = n - 1;\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/766","completion":"    \/\/ your code here\n    \/\/ You can use the following logic:\n    \/\/ 1. Create a result vector\n    \/\/ 2. Traverse the list from first to last.\n    \/\/ 3. If the current value is equal to the next value,\n    \/\/    add the next value to the result\n    \/\/    Add the current value to the next\n    \/\/ 4. If the next value is equal to the current value,\n    \/\/    move on to the next value.\n    \/\/ 5. If the next value is greater than the current value,\n    \/\/    add the next value to the result\n    \/\/    Add the current value to the next\n    \/\/    Move on to the next value.\n    \/\/ 6. If the next value is less than the current value,\n    \/\/    add the next value to the result\n    \/\/    Add the current value to the next\n    \/\/    Move on to the next value.\n    \/\/ 7. If the next value is equal to the current value,\n    \/\/    move on to the next value.\n\n   ","language":"cpp"}
{"task_id":"MBCPP\/767","completion":"    vector<int> diff = sort(arr);\n    vector<int> prefix = diff[0];\n    vector<int> sufix = diff[diff.size()-1];\n\n    for(int i=1; i<prefix.size(); i++) {\n        prefix[i] += prefix[i-1];\n    }\n    for(int i=1; i<sufix.size(); i++) {\n        sufix[i] += sufix[i-1];\n    }\n\n    vector<int> prefix_size = prefix.size();\n    vector<int> sufix_size = sufix.size();\n    int count = 0;\n    for(int i=0; i<prefix_size && i<sufix_size; i++) {\n        if(prefix[i] < sufix[i]) {\n            int left = sufix[i] - prefix[i];\n            int right = sufix_size - i;\n            count += (left * right);\n            i++;\n        }","language":"cpp"}
{"task_id":"MBCPP\/768","completion":"    return ((x & 1) == 1);\n}","language":"cpp"}
{"task_id":"MBCPP\/769","completion":"    vector<int> res(li2.size());\n    for (int i = 0; i < li1.size(); i++) {\n        if (li1[i] != li2[i]) {\n            res[i] = li1[i];\n        }\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/770","completion":"    if(n == 0)\n        return 0;\n\n    return oddNumSum(n - 1) + (2*n + 1) * n * n + 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/771","completion":"    \/\/ Using a stack.\n    string[] stack = new string[101];\n\n    \/\/ \"{\" and \"}\" and \"[\" and \"]\" are the opening and closing symbols for the expression.\n\n    \/\/ Initialize the stack.\n    int top = -1;\n\n    \/\/ Read the expression one character at a time.\n    for (int i = 0; i < exp.size(); ++i) {\n        switch (exp[i]) {\n            case '{':\n                \/\/ Push to stack.\n                stack[++top] = \"{\";\n                break;\n            case '}':\n                \/\/ Pop the top element if we have one and return false if not.\n                if (top < 0) return false;\n                else if (stack[top--] != \"{\") return false;\n                break;\n            case '[':\n                \/\/ Push to stack.\n                stack[++top] = \"[\";\n                break;\n            case ']':\n                \/\/ Pop the top element if we have one and return false if not.","language":"cpp"}
{"task_id":"MBCPP\/772","completion":"  string result = string();\n  int i;\n  for (i = 0; i < testStr.length()-k+1; ++i) {\n    string str = testStr.substr(i, k);\n    result += str;\n  }\n  return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/774","completion":"    string pattern =  \"[^@]+@[^@]+\\\\.[^@]+\";\n    return email.matches(pattern)?\"Valid Email\": \"Invalid Email\";\n}","language":"cpp"}
{"task_id":"MBCPP\/775","completion":"    \/\/ TODO\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/776","completion":"    vector<int> v;\n    for (int i = 0; i < testStr.size(); i++) {\n        int c = testStr[i];\n        v.push_back(c);\n        if (i > 0) {\n            if (c == testStr[i-1]) {\n                continue;\n            }\n        }\n        if (i < testStr.size() - 1) {\n            if (c == testStr[i+1]) {\n                continue;\n            }\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            v.push_back(c);\n        }\n    }\n    return v.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/777","completion":"    int sum = 0;\n    bool allUnique = true;\n    vector<int> dict(n, 0);\n    vector<int> visited(n, 0);\n    for (auto &amp;e : arr) {\n        if (dict[e] == 0) {\n            dict[e] = 1;\n            allUnique = false;\n        }\n        sum += e;\n        visited[e]++;\n    }\n    if (allUnique) {\n        return sum;\n    }\n    sum = 0;\n    for (auto &amp;e : arr) {\n        if (visited[e] == 1) {\n            sum += e;\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/780","completion":"    vector<vector<int>> combinations;\n    combinations.reserve(testList.size() * testList[0].size());\n    combinations.clear();\n\n    for (int i = 0; i &lt; testList.size(); i++) {\n        int n = testList[i].size();\n\n        for (int j = 0; j &lt; n; j++) {\n            for (int k = j + 1; k &lt; n; k++) {\n                combinations.emplace_back({testList[i][j], testList[i][k]});\n            }\n        }\n    }\n\n    return combinations;\n}","language":"cpp"}
{"task_id":"MBCPP\/781","completion":"    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) count++;\n    }\n    return count % 2 == 0 ? string(\"Even\") : string(\"Odd\");\n}","language":"cpp"}
{"task_id":"MBCPP\/782","completion":"  int sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if ((i + 1) % 2 == 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/784","completion":"    int even = 1;\n    int odd = 0;\n    int result = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    result *= even;\n    result *= odd;\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/785","completion":"    string[] tupleStr = split(testStr, ',');\n    vector<int> tuple = new vector<int>(tupleStr.length, 0);\n    int index = 0;\n    for (int i = 0; i < tupleStr.length; i++) {\n        tuple[i] = int(tupleStr[i]);\n    }\n    return tuple;\n}","language":"cpp"}
{"task_id":"MBCPP\/786","completion":"    int left = 0;\n    int right = a.size() - 1;\n\n    while (left <= right) {\n        int mid = left + ((right - left) >> 1);\n        if (x < a[mid]) {\n            right = mid - 1;\n        } else if (x > a[mid]) {\n            left = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    return left;\n}","language":"cpp"}
{"task_id":"MBCPP\/787","completion":"  string text_to_match;\n\n  if (text.size() < 4) {\n    return \"Not matched!\";\n  }\n\n  text_to_match = text.substr(1);\n\n  if (text.substr(2, 3).equal_ignore_case(\"b\")) {\n    return \"Found a match!\";\n  } else {\n    return \"Not matched!\";\n  }\n}","language":"cpp"}
{"task_id":"MBCPP\/788","completion":"    string[] list = new string[testList.size()];\n    for (int i = 0; i &lt; testList.size(); i++) {\n        list[i] = testList[i];\n    }\n\n    vector<string> result = make(list.size());\n    for (int i = 0; i &lt; list.size(); i++) {\n        if (list[i] == testStr) {\n            result[i] = testStr;\n        } else {\n            result[i] = \"\";\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/789","completion":"    int n = 0;\n    for (int i = 0; i < s; ++i) {\n        for (int j = 0; j <= l - s + 1; ++j)\n            n += j;\n    }\n    return n + s * l;\n}","language":"cpp"}
{"task_id":"MBCPP\/790","completion":"    if (nums.size() == 0) {\n        return false;\n    }\n    return (nums[0] % 2 == 0 && evenPosition(nums.tail)) ||\n           (!nums.tail && nums[0] % 2 == 1 && evenPosition(nums.tail));\n}","language":"cpp"}
{"task_id":"MBCPP\/792","completion":"    int count = 0;\n    for(int i = 0; i < inputList.size(); ++i) {\n        count += inputList[i].size();\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/793","completion":"    int i = search(arr, x, 0, n - 1);\n    return i < 0 ? -1 : i;\n}","language":"cpp"}
{"task_id":"MBCPP\/794","completion":"    \/\/ TODO\n    return \"Not matched!\";\n}","language":"cpp"}
{"task_id":"MBCPP\/796","completion":"    int sum = 0;\n    for (auto &amp;item: dict) {\n        sum += item[1];\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/797","completion":"    int sum = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % 2 != 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/798","completion":"    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/799","completion":"    return (n << d) | (n >> (32 - d));\n}","language":"cpp"}
{"task_id":"MBCPP\/800","completion":"    string result;\n    result = text;\n    int i = 0;\n\n    while (i < text.size()) {\n        if (text[i] != ' ') {\n            i++;\n            continue;\n        }\n        int j = text.size() - 1;\n        while (j > i && text[j] == ' ') {\n            j--;\n        }\n        result = result.substr(0, i) + result.substr(j + 1);\n        i = j + 1;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/801","completion":"    \/\/ Return the number of 'x' and 'y' that are equal.\n    return (x == y ? 1 : 0) + (y == z ? 1 : 0) + (z == x ? 1 : 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/802","completion":"  int n = n % arr.size();\n  if (n == 0) return arr.size();\n  \/\/ swap arr[i] with the last element\n  vector<int> temp;\n  temp.push_back(arr[n - 1]);\n  for (int i = n - 2; i >= 0; i--) {\n    arr[i + 1] = arr[i];\n  }\n  arr[0] = temp.back();\n  return (n - 1) % arr.size() + 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/803","completion":"    return sqrt(n) * sqrt(n) == n;\n}","language":"cpp"}
{"task_id":"MBCPP\/804","completion":"    for (int i = 0; i < n; i++) {\n        int a = arr[i];\n        if (i > n - 2) {\n            break;\n        }\n        if (a * 2 != arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/805","completion":"  vector<int> res;\n  res.push_back(0);\n  for (int i = 0; i < lists.size(); i++) {\n    int max = res.back();\n    int[] sub = lists.back()\n    for (int j = 0; j < sub.size(); j++) {\n      if (max < sub[j]) {\n        max = sub[j];\n      }\n    }\n    res.back() = max + lists.back().back();\n  }\n  return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/806","completion":"\tint max = 0;\n\tfor (int i = 0; i < testStr.length(); i++) {\n\t\tfor (int j = i; j < testStr.length(); j++) {\n\t\t\tfor (int k = j; k < testStr.length(); k++) {\n\t\t\t\tint sum = (int)testStr[i] + (int)testStr[j] + (int)testStr[k];\n\t\t\t\tif (sum == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (sum > max) {\n\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}","language":"cpp"}
{"task_id":"MBCPP\/807","completion":"    int i = 0;\n    for (int num : nums) {\n        if (num % 2 == 1) {\n            return num;\n        }\n    }\n    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/808","completion":"  if(k > testTup[0]) {\n    return false;\n  }\n  int count = 1;\n  for(int i = 1; i < testTup.size(); i++) {\n    if(testTup[i] == k || testTup[i] == k + 1) {\n      count++;\n    } else {\n      break;\n    }\n  }\n  return count == testTup.size();\n}","language":"cpp"}
{"task_id":"MBCPP\/809","completion":"    for (size_t i = 0; i &lt; testTup2.size(); ++i) {\n        if (testTup1[i] >= testTup2[i])\n            return false;\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/810","completion":"    vector<string> result;\n\n    for (int i = a; i > 0; --i)\n        result.push_back(string(i * (i + i - 1) \/ 2));\n\n    for (int i = b; i > 0; --i)\n        result.push_back(string(i * i));\n\n    for (int i = c; i > 0; --i)\n        result.push_back(string(i * i * i));\n\n    for (int i = d; i > 0; --i)\n        result.push_back(string(i * i * i * i * i));\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/811","completion":"    return checkIdentical(testList1, testList2, false);\n}","language":"cpp"}
{"task_id":"MBCPP\/812","completion":"    int l = length(street);\n    int i = 0;\n    string ret = \"\";\n    for (i = 0; i < l; i++) {\n        if (i < 2)\n            ret += \".\";\n        else if (street[i - 1] == ' ' && street[i + 1] == ' ')\n            ret += \" \";\n        else\n            ret += street[i];\n    }\n    ret = ret + \" Rd.\";\n    return ret;\n}","language":"cpp"}
{"task_id":"MBCPP\/813","completion":"    int len = 0;\n    while(string(str1[len]).ne.empty()) {\n        len++;\n    }\n    return len;\n}","language":"cpp"}
{"task_id":"MBCPP\/814","completion":"  return p * q;\n}","language":"cpp"}
{"task_id":"MBCPP\/815","completion":"    vector<int> ans = vector<int>(n);\n    vector<int> stack = vector<int>(n);\n    stack[0] = -1;\n\n    for (int i = 0; i < n; i++) {\n        ans[i] = arr[i];\n    }\n\n    for (int i = 0; i < n; i++) {\n        int j = i + 1;\n        while (j < n && arr[i] > arr[j]) {\n            stack[++stack[j]] = i;\n            j++;\n        }\n    }\n\n    for (int i = 0; i < n; i++) {\n        arr[i] = ans[i];\n    }\n\n    for (int i = 0; i < n; i++) {\n        int j = stack[i];\n        if (j == -1) continue;\n        arr[i] = ans[j];\n        stack[","language":"cpp"}
{"task_id":"MBCPP\/817","completion":"    vector<int> divOfNums = {0};\n    int index;\n\n    for (index = 0; index < nums.size(); index++) {\n        if ((nums[index] % m == 0) && (nums[index] % n == 0)) {\n            divOfNums.push_back(nums[index]);\n        }\n    }\n    return divOfNums;\n}","language":"cpp"}
{"task_id":"MBCPP\/818","completion":"    int lower = 0;\n    int upper = 0;\n\n    for (auto ch : str) {\n        if (islower(ch)) {\n            ++lower;\n        } else {\n            ++upper;\n        }\n    }\n    return lower + upper;\n}","language":"cpp"}
{"task_id":"MBCPP\/819","completion":"    vector<vector<int>> v;\n    v.reserve(1);\n    v[0].reserve(lists.size());\n\n    \/\/ Initialize count array\n    for (int i = 0; i &lt; lists.size(); i++) {\n        v[0][i] = lists[i];\n    }\n\n    \/\/ Sort the list\n    for (int i = 1; i &lt; lists.size(); i++) {\n        for (int j = 0; j &lt; i; j++) {\n            if (lists[i] == lists[j])\n                v[0][i]++;\n        }\n    }\n\n    return v[0];\n}","language":"cpp"}
{"task_id":"MBCPP\/820","completion":"    if (monthnum1 >= 1 && monthnum1 <= 12) {\n        if (monthnum1 == 1 || monthnum1 == 3 || monthnum1 == 5 || monthnum1 == 7 || monthnum1 == 8 || monthnum1 == 10 || monthnum1 == 12) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/821","completion":"    return {map {merge(dict1, dict2)}};\n}","language":"cpp"}
{"task_id":"MBCPP\/822","completion":"\t\/\/ TODO: Write your code here\n\treturn false;\n}","language":"cpp"}
{"task_id":"MBCPP\/823","completion":"    string result;\n    regex search;\n    if (sample.length() > str.length()) {\n        result = \"string doesnt start with the given substring\";\n        return result;\n    }\n    if (sample.length() == 0) {\n        result = \"string doesnt start with the given substring\";\n        return result;\n    }\n    search = regex(\"^\" + sample);\n    if (search.match(str)) {\n        result = \"string starts with the given substring\";\n        return result;\n    }\n    result = \"string doesnt start with the given substring\";\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/824","completion":"    vector<int> r;\n    int i = 0;\n    int n = l.size();\n    while (i < n) {\n        if (l[i] % 2 != 0) {\n            r.push_back(l[i]);\n        }\n        i++;\n    }\n    return r;\n}","language":"cpp"}
{"task_id":"MBCPP\/825","completion":"    vector<int> result;\n    int j, i, k;\n    for (i = 0; i < nums.size(); i++) {\n        for (j = 0; j < listIndex.size(); j++) {\n            if (nums[i] == listIndex[j]) {\n                result.push_back(nums[i]);\n            }\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/826","completion":"    \/\/ Your code goes here.\n    return \"Unknown\";\n}","language":"cpp"}
{"task_id":"MBCPP\/827","completion":"  int sum = 0;\n  for (int i = 0; i &lt; list1.size(); i++) {\n    sum += list1[i][c];\n  }\n  return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/828","completion":"    vector<int> res;\n    int n = str.size();\n    int i;\n\n    for (i = 0; i < n; i++) {\n        if (isalpha(str[i])) {\n            res[0]++;\n        } else if (isdigit(str[i])) {\n            res[1]++;\n        } else if (str[i] == '$' || str[i] == '_' || str[i] == '^' || str[i] == '&') {\n            res[2]++;\n        }\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/829","completion":"    int max = 0;\n    string ans = \"\";\n    vector<string> map = new vector<string>();\n    for (int i = 0; i &lt; input.size(); i++) {\n        if (map.contains(input[i]))\n            map[i]++;\n        else\n            map[i] = 1;\n\n        if (map[i] > max) {\n            max = map[i];\n            ans = input[i];\n        }\n    }\n    return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/831","completion":"  if (n < 0) return 0;\n  if (n == 0) return 0;\n  int pairCount = 0;\n  int mid = n \/ 2;\n  for (int i = 0; i < mid; i++) {\n    if (arr[i] == arr[n - 1 - i]) pairCount++;\n  }\n  return countPairs(arr, mid) + pairCount;\n}","language":"cpp"}
{"task_id":"MBCPP\/832","completion":"    \/\/ regex to extract numeric values\n    regex pattern(input, \"^[0-9]+\");\n    if (!pattern.found()) {\n        return 0;\n    }\n\n    return max(input.toInts());\n}","language":"cpp"}
{"task_id":"MBCPP\/833","completion":"    vector<int> keys;\n    keys.reserve(dict.size());\n    for (auto&lt;int, string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        keys.push_back(it->first);\n    }\n    return keys;\n}","language":"cpp"}
{"task_id":"MBCPP\/834","completion":"    vector<vector<int>> output;\n\n    \/\/ first we will generate the first row\n    vector<int> firstRow;\n    for (int i = 1; i <= n; i++) {\n        firstRow.push_back(i);\n    }\n\n    output.push_back(firstRow);\n\n    \/\/ now we will generate the remaining rows\n    int row = 1;\n    while (row < n) {\n        vector<int> currentRow;\n        currentRow.push_back(1);\n        currentRow.push_back(1);\n        for (int i = 0; i < n - 2; i++) {\n            currentRow.push_back(output[row - 1].at(i) + output[row - 1].at(i + 1));\n        }\n        output.push_back(currentRow);\n        row++;\n    }\n\n    return output;\n}","language":"cpp"}
{"task_id":"MBCPP\/836","completion":"    int sum = 0;\n    int maxSum = 0;\n    for(int i = 0; i < size; i++) {\n        sum += a[i];\n        if(sum > maxSum) {\n            maxSum = sum;\n        }\n        if(sum < 0) {\n            sum = 0;\n        }\n    }\n    return maxSum;\n}","language":"cpp"}
{"task_id":"MBCPP\/837","completion":"    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 != 0) {\n            sum += i * i * i;\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/838","completion":"    string t1 = s1.begin(), t2 = s2.begin(), result = string(), i = 0;\n    while(t1.find(t2) != string::npos) {\n        if (i % 2 == 0) result += s1[t1--], s2[t2--];\n        else result += s2[t2++], s1[t1++];\n        i++;\n    }\n    return i;\n}","language":"cpp"}
{"task_id":"MBCPP\/840","completion":"    int d = (b*b) - (4*a*c);\n    if (d >= 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/841","completion":"    vector<int> invCount;\n    invCount.resize(n);\n    invCount[0] = 0;\n    for (int i = 1; i < n; i++) {\n        invCount[i] = 0;\n    }\n\n    \/\/ Iterate over array, subtract values at position 'i' from\n    \/\/ the values at position 'i-1' to count inversions\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                invCount[i]++;\n            }\n        }\n    }\n    return invCount[n - 1];\n}","language":"cpp"}
{"task_id":"MBCPP\/842","completion":"    int count;\n\n    vector<int> counts;\n    for (int i = 0; i &lt; arrSize; i++) {\n        count = 0;\n        for (int j = 0; j &lt; arrSize; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n\n        if (count % 2 == 0) {\n            continue;\n        } else {\n            return arr[i];\n        }\n    }\n\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/843","completion":"\tvector<int> heap;\n\tint p;\n\tfor (p = 0; p < primes.size(); p++) {\n\t\theap.push_back(primes[p]);\n\t}\n\tfor (int i = 0; i < n; i++) {\n\t\tp = 1;\n\t\tint ugly = heap.back();\n\t\twhile (true) {\n\t\t\tugly = heap.back();\n\t\t\tif (ugly % primes[p] == 0) {\n\t\t\t\theap.push_back(ugly * primes[p]);\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tp++;\n\t\t}\n\t}\n\treturn heap.back();\n}","language":"cpp"}
{"task_id":"MBCPP\/844","completion":"    int[] arr = new int[n];\n    int i = 0;\n    int odd = 1;\n    while (i < n) {\n        arr[i] = odd;\n        if (i == (k - 1)) {\n            odd += 2;\n            i++;\n        }\n        i++;\n    }\n    i = 0;\n    int even = 0;\n    while (i < n) {\n        arr[i] = even;\n        if (i == (k - 1)) {\n            even += 2;\n            i++;\n        }\n        i++;\n    }\n    return arr[k - 1];\n}","language":"cpp"}
{"task_id":"MBCPP\/845","completion":"    return n == 0 ? 1 : (int) ceil(log10(n));\n}","language":"cpp"}
{"task_id":"MBCPP\/846","completion":"    vector<int> *dp = new vector<int>(n);\n    dp[0] = arr[0] - dep[0];\n    for (int i = 1; i < n; ++i) {\n        dp[i] = dp[i-1] + arr[i] - dep[i];\n    }\n    int minPlatforms = 0;\n    int dpIdx = 0;\n    for (int i = 0; i < n; ++i) {\n        if (dpIdx >= n-1) {\n            minPlatforms++;\n            break;\n        } else if (dp[dpIdx] < dp[dpIdx+1]) {\n            dpIdx++;\n        } else {\n            minPlatforms++;\n            dpIdx++;\n        }\n    }\n    return minPlatforms;\n}","language":"cpp"}
{"task_id":"MBCPP\/847","completion":"    vector<int> ys;\n    \/\/ copy xs to ys\n    return ys;\n}","language":"cpp"}
{"task_id":"MBCPP\/848","completion":"    return ((base1 + base2) \/ 2) * height;\n}","language":"cpp"}
{"task_id":"MBCPP\/849","completion":"    int sum = 0;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/850","completion":"    \/\/ Your code goes here.\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/852","completion":"    \/\/ write your code here\n    vector<int> out;\n    int i, j;\n    for (i = 0; i < numList.size(); i++) {\n        if (numList[i] >= 0) {\n            out.push_back(numList[i]);\n        }\n    }\n    return out;\n}","language":"cpp"}
{"task_id":"MBCPP\/853","completion":"    int sum = 0;\n    for(int i = 1; i < n; i++) {\n        if(n % i == 0) {\n            sum += i;\n        }\n    }\n    if(n % 2 == 1) {\n        sum += 1;\n    }\n    return sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/854","completion":"    vector<int> heap = new vector<int>();\n    int size = rawheap.size();\n    heap.push_back(rawheap[0]);\n\n    for (int i = 1; i < size; i++) {\n        int value = rawheap[i];\n        if (value <= heap[0]) {\n            heap.push_back(value);\n        } else {\n            int j = 0;\n            while (value > heap[j]) {\n                heap[j+1] = heap[j];\n                j++;\n            }\n            heap[j+1] = value;\n        }\n    }\n\n    return heap;\n}","language":"cpp"}
{"task_id":"MBCPP\/855","completion":"    \/\/ Returns true if x is even, else false.\n    return ((x & 1) == 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/856","completion":"    int numSwaps = 0;\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] != arr[i + 1]) {\n            swap(arr[i], arr[i + 1]);\n            numSwaps++;\n        }\n    }\n    return numSwaps;\n}","language":"cpp"}
{"task_id":"MBCPP\/857","completion":"    vector<vector<string>> list2;\n    list2.resize(list1.size());\n    for(int i = 0; i &lt; list1.size(); i++) {\n        list2[i].push_back(list1[i]);\n    }\n    return list2;\n}","language":"cpp"}
{"task_id":"MBCPP\/858","completion":"    \/\/ Count the total number of lists.\n    int numLists = 0;\n    for (int i = 0; i < inputList.size(); ++i) {\n        numLists += inputList[i].size();\n    }\n\n    \/\/ For each list, square the count and add it to the total.\n    int totalSquares = 0;\n    for (int i = 0; i < inputList.size(); ++i) {\n        int numElements = inputList[i].size();\n        totalSquares += numElements * numElements;\n    }\n\n    return numLists * totalSquares;\n}","language":"cpp"}
{"task_id":"MBCPP\/860","completion":"    string regex = \"[a-zA-Z0-9]*$\";\n    if (str.size() == 0) {\n        return \"Empty string.\";\n    }\n    else if (str.size() < 2) {\n        return str;\n    }\n    else if (!regex.contains(str)) {\n        return \"String does not match the pattern.\";\n    }\n    return str;\n}","language":"cpp"}
{"task_id":"MBCPP\/861","completion":"    vector<string> res = vector<string>();\n    for (auto text: texts) {\n        for (auto anagram: anagramLambda(str)) {\n            if (isAnagram(text, anagram))\n                res.push_back(text);\n        }\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/863","completion":"  vector<int> dp(n + 1, 0);\n  vector<int> m(n + 1, 0);\n  vector<int> prev(n + 1, 0);\n  for (int i = 0; i < n; i++) {\n    dp[i + 1] = prev[i] + 1;\n    m[i + 1] = arr[i];\n    for (int j = i; j >= 0 && m[j] < m[i + 1]; j--) {\n      dp[i + 1] = max(dp[i + 1], dp[j] + 1);\n    }\n  }\n  return dp[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/864","completion":"    vector<string> results;\n    for (string text : texts) {\n        results.push_back(text);\n    }\n\n    \/\/ Iterate through each string in the list of texts.\n    for (string text : texts) {\n        \/\/ If the string is a palindrome, then continue.\n        if (isPalindrome(text)) {\n            continue;\n        }\n\n        \/\/ If the string is not a palindrome, then move to the next string in the list.\n        \/\/ If there are no more strings in the list, then break out of the loop.\n        int i = 0;\n        while (i < text.length() \/ 2) {\n            char firstChar = text[i];\n            char lastChar = text[text.length() - i - 1];\n            if (firstChar != lastChar) {\n                break;\n            }\n            i++;\n        }\n\n        if (i == text.length() \/ 2) {\n            results.push_","language":"cpp"}
{"task_id":"MBCPP\/865","completion":"    return map(nums, (x) {\n        return x * n;\n    });\n}","language":"cpp"}
{"task_id":"MBCPP\/866","completion":"    int day;\n\n    for (int i=0; i < monthname2.size(); i++) {\n        day = monthname2[i];\n        \/\/print \"Day of the month: \" + day;\n        if (string_length(day) > 3)\n            return false;\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/867","completion":"    int min = 0;\n    int current = 0;\n    for (int i = 0; i < n; i++) {\n        if (min > arr[i]) {\n            min = arr[i];\n        }\n        current += arr[i];\n    }\n    if (current % 2 == 0) {\n        return min;\n    } else {\n        return current - (min * n);\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/868","completion":"  int len = a.size();\n  int last_space = 0;\n  for (int i = len - 1; i >= 0; --i) {\n    if (a[i] == ' ') {\n      last_space = i;\n    } else {\n      break;\n    }\n  }\n  if (last_space == 0) {\n    return len;\n  }\n  return len - last_space - 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/869","completion":"    vector<vector<int>> result = list1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i].size() < (leftrange - rigthrange + 1)) {\n            continue;\n        }\n        for (int j = 0; j < list1[i].size(); j++) {\n            if (list1[i][j] < leftrange || list1[i][j] > rigthrange) {\n                continue;\n            }\n            list1[i][j] = 0;\n        }\n        list1[i].sort();\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i].size() == 0) {\n            continue;\n        }\n        for (int j = 0; j < list1[i].size(); j++) {\n           ","language":"cpp"}
{"task_id":"MBCPP\/870","completion":"    auto filteredList = nums.filter(n => n > 0);\n    return filteredList.sum();\n}","language":"cpp"}
{"task_id":"MBCPP\/871","completion":"    if(string1.size() != string2.size()) {\n        return false;\n    }\n    int n = string1.size();\n    int[] string1Array = new int[n];\n    int[] string2Array = new int[n];\n    for(int i = 0; i < n; i++) {\n        string1Array[i] = string1[i];\n        string2Array[i] = string2[i];\n    }\n    Arrays.sort(string1Array);\n    Arrays.sort(string2Array);\n    for(int i = 0; i < n; i++) {\n        if(string1Array[i] != string2Array[i]) {\n            return false;\n        }\n    }\n    return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/873","completion":"    if (n <= 2) {\n        return 1;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/874","completion":"    string concat_str = str1;\n    int i = 0;\n    int len1 = str1.size();\n    int len2 = str2.size();\n    while(i<len1 && i<len2) {\n        if (str1[i] == str2[i])\n            concat_str += str1[i];\n        i++;\n    }\n    return str1.size() == len2 && str1 == concat_str;\n}","language":"cpp"}
{"task_id":"MBCPP\/875","completion":"    vector<pair<int,int>> diffPairList;\n    \/\/ Step 1: sort the tuples\n    \/\/ Step 2: For each tuple, make a new pair that starts with the smallest element and ends with the largest element.\n    \/\/ Step 3: Compare each pair of element in pairs.\n    \/\/ Step 4: Append the pair that is the smallest to the list of pairs.\n    \/\/ Step 5: Append the pair that is the largest to the list of pairs.\n    \/\/ Step 6: If the difference between the smallest and largest pair is smaller than the previous smallest, keep track of it.\n    \/\/ Step 7: If the smallest difference has been found, stop searching.\n    \/\/ Step 8: If the largest difference has been found, stop searching.\n    \/\/ Step 9: If there is no difference, return 0.\n    std::sort(testList.begin(), testList.end(), [](int v1, int v2) {\n        return v1 - v2;\n    });\n    int smallestDiff = Integer.MAX_VALUE;\n    for ","language":"cpp"}
{"task_id":"MBCPP\/876","completion":"    if (x == 0) {\n        return y;\n    }\n    if (y == 0) {\n        return x;\n    }\n    return lcm(y, x % y);\n}","language":"cpp"}
{"task_id":"MBCPP\/877","completion":"    string result = \"\";\n    \/\/ write your code here\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/878","completion":"  vector<bool> found = vector<bool>();\n  for (int i = 0; i < k.size(); i++) {\n    found.push_back(false);\n  }\n  for (int i = 0; i < testTuple.size(); i++) {\n    for (int j = 0; j < k.size(); j++) {\n      if (testTuple[i] == k[j]) {\n        found[j] = true;\n      }\n    }\n  }\n  for (int i = 0; i < k.size(); i++) {\n    if (found[i] == false) {\n      return false;\n    }\n  }\n  return true;\n}","language":"cpp"}
{"task_id":"MBCPP\/879","completion":"    \/\/ TODO: Complete this function.\n}","language":"cpp"}
{"task_id":"MBCPP\/880","completion":"    \/\/ write your code here.\n    return std::string(\"No solutions\");\n}","language":"cpp"}
{"task_id":"MBCPP\/881","completion":"    vector<int> list2;\n    int i;\n    int evenSum = 0;\n    int oddSum = 0;\n\n    for(i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            evenSum += list1[i];\n        } else {\n            oddSum += list1[i];\n        }\n    }\n\n    return evenSum + oddSum;\n}","language":"cpp"}
{"task_id":"MBCPP\/882","completion":"    return (2*b)+(2*h);\n}","language":"cpp"}
{"task_id":"MBCPP\/883","completion":"    vector<int> div = nums.begin();\n    vector<int> temp = nums.begin();\n    \/\/ Divide all numbers between m and n by 2\n    for (int i = 0; i < nums.size(); i++) {\n        if (temp.element() > m && temp.element() < n)\n            div.insert(temp.element() \/ 2);\n        temp.erase(temp.element());\n    }\n    return div;\n}","language":"cpp"}
{"task_id":"MBCPP\/884","completion":"    return ((n & (1 << l)) != 0) && ((n & (1 << r)) == 0);\n}","language":"cpp"}
{"task_id":"MBCPP\/885","completion":"    bool map[20][20] = {false};\n    for (int i = 0; i < str1.length; ++i) {\n        map[i][i] = true;\n        for (int j = i + 1; j < str1.length; ++j) {\n            if (str1[i] != str2[j] && map[i][j] == true) {\n                map[i][j] = false;\n            }\n        }\n    }\n\n    return map[0][0];\n}","language":"cpp"}
{"task_id":"MBCPP\/886","completion":"    double sum = 0;\n    int size = sizeof(numbers) \/ sizeof(numbers[0]);\n\n    for (int i = 0; i < size; i++) {\n        sum += numbers[i];\n    }\n\n    return sum \/ size;\n}","language":"cpp"}
{"task_id":"MBCPP\/887","completion":"    return (n & 1) == 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/888","completion":"    \/\/ TODO\n    return null;\n}","language":"cpp"}
{"task_id":"MBCPP\/889","completion":"    vector<vector<int>> reversed_lists = lists;\n    int i;\n    int j;\n    int size = lists.size();\n    vector<int> list;\n    for (i = 0; i < size \/ 2; i++) {\n        j = size - i - 1;\n        list = lists[i];\n        reversed_lists[i] = reversed_lists[j];\n        reversed_lists[j] = list;\n    }\n    return reversed_lists;\n}","language":"cpp"}
{"task_id":"MBCPP\/890","completion":"    \/\/ TODO: Write your code here.\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/891","completion":"    return std::abs(a-b) < 10;\n}","language":"cpp"}
{"task_id":"MBCPP\/892","completion":"    string str;\n    str = text.replaceAll(\"  \", \" \");\n    return str;\n}","language":"cpp"}
{"task_id":"MBCPP\/894","completion":"    string[] split = testStr.Split(',').ToArray();\n    vector<double> result = vector<double>();\n    for (int i = 0; i &lt; split.Length; i++)\n    {\n        result.push_back(split[i].ToDouble());\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/895","completion":"  \/\/ find the cumulative sum of the array\n  vector<int> cumSum(a.begin(), a.end(), 0);\n  \/\/ now find the maximum sum in the array\n  int maxSum = 0;\n  for (int i = 1; i < a.size(); i++) {\n    cumSum[i] = cumSum[i] + a[i - 1];\n    if (cumSum[i] > maxSum) {\n      maxSum = cumSum[i];\n    }\n  }\n  return maxSum;\n}","language":"cpp"}
{"task_id":"MBCPP\/896","completion":"    vector<vector<int>> sortedTuples;\n    sortedTuples.resize(tuples.size());\n    sortedTuples.clear();\n\n    for (size_t i = 0; i < tuples.size(); i++) {\n        sortedTuples.push_back(sortListLastHelper(tuples[i]));\n    }\n\n    return sortedTuples;\n}","language":"cpp"}
{"task_id":"MBCPP\/897","completion":"    int n = sentence.size();\n    for (int i = 0; i < n; i++) {\n        if (sentence[i] == word[0]) {\n            for (int j = 1; j < word.size(); j++) {\n                if (word[j] != sentence[i + j])\n                    break;\n                if (j == word.size() - 1)\n                    return true;\n            }\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/898","completion":"    vector<int> result;\n    result.resize(n);\n\n    int i = 0;\n    while (i < n) {\n        result[i] = numbers[i];\n        if (i + 1 < n) {\n            result[i+1] = numbers[i + 1];\n        }\n        ++i;\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/899","completion":"    \/\/ 1. Select only the 1st, 3rd, and 5th element of the array\n    \/\/ 2. Sort the array\n    \/\/ 3. Compare the sorted array with the original one\n    \/\/ 4. Return the result\n    int i = 0, j = 0, k = 0, temp = 0;\n    vector<int> sortedArr = vector<int>();\n    while (i < n) {\n        temp = arr[i];\n        if (temp == 1) {\n            sortedArr.push_back(temp);\n        } else if (temp == 3) {\n            sortedArr.push_back(temp);\n        } else if (temp == 5) {\n            sortedArr.push_back(temp);\n        }\n        i++;\n    }\n    while (j < n && sortedArr[j] < sortedArr[j + 1]) {\n        j++;\n    }\n    while (k ","language":"cpp"}
{"task_id":"MBCPP\/900","completion":"    \/\/ start from 1, not 0.\n    for (int i = 1; i <= 9; i++) {\n        if (str.startsWith(string(i))) {\n            return true;\n        }\n    }\n    return false;\n}","language":"cpp"}
{"task_id":"MBCPP\/901","completion":"  return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/902","completion":"    unordered_map<string, int> result = new unordered_map<string, int>();\n    for (auto [k, v] of d1) {\n        if (d2.contains(k)) {\n            result[k] = v + d2[k];\n        } else {\n            result[k] = v;\n        }\n    }\n    for (auto [k, v] of d2) {\n        if (!d1.contains(k)) {\n            result[k] = v;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/903","completion":"    return n == 0 ? 0 : 1 + countUnsetBits(n & (n-1));\n}","language":"cpp"}
{"task_id":"MBCPP\/905","completion":"  int t = 0;\n  for (int i = 1; i <= n; i++)\n    t += i * i;\n  return t;\n}","language":"cpp"}
{"task_id":"MBCPP\/906","completion":"  \/\/ Find date from url.\n  string date = url.find_match_all(\"[0-9]{4}\/[0-9]{2}\/[0-9]{2}\");\n\n  \/\/ Create a vector of vector<string>.\n  vector<vector<string>> res = {{{{}}};\n\n  \/\/ Find year, month and date and add it to the vector.\n  for (int i = 0; i < date.size(); i++) {\n    res.push_back({{string(date[i][:4])}});\n    res.push_back({{string(date[i][5:7])}});\n    res.push_back({{string(date[i][8:])}});\n  }\n\n  return res;\n}\n\n\/**\n * Write a function to extract the headline of a url.\n * > extractHeadline(string(\"https:\/\/economictimes.indiatimes.com\/news\/economy\/2020\/12\/29\/finance\/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore","language":"cpp"}
{"task_id":"MBCPP\/907","completion":"    vector<int> result;\n    int number = 1;\n\n    for (int i = 1; i <= n; i++) {\n        number = number + 1;\n        if (number == 7) {\n            number = 3;\n        }\n        result.push_back(number);\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/908","completion":"    \/\/ write your code here.\n    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/909","completion":"    int n = num;\n    int rev = 0;\n    while (num > 0) {\n        rev = (rev * 10) + (num % 10);\n        num = num \/ 10;\n    }\n    if (n == rev) {\n        return -1;\n    }\n    return rev;\n}","language":"cpp"}
{"task_id":"MBCPP\/911","completion":"    int *arr, *max, *min;\n    int n = nums.size();\n    arr = (int *) nums.data();\n    max = (int *) calloc(3 * n, sizeof(int));\n    min = (int *) calloc(3 * n, sizeof(int));\n    heap_init(max, 3 * n, INT_MAX, 1);\n    heap_init(min, 3 * n, INT_MAX, 1);\n    for (int i = 0; i < n; i++) {\n        int temp = arr[i];\n        if (i + 1 < n && arr[i] < arr[i + 1])\n            temp *= arr[i + 1];\n        if (i - 1 >= 0 && arr[i] > arr[i - 1])\n            temp *= arr[i - 1];\n        max[i] = temp > max[2","language":"cpp"}
{"task_id":"MBCPP\/912","completion":"  return n * m;\n}","language":"cpp"}
{"task_id":"MBCPP\/913","completion":"    int index = str.length() - 1;\n    while (index >= 0 && (str[index] >= '0' && str[index] <= '9')) {\n        index--;\n    }\n    if (index < 0)\n        return false;\n    else\n        return str[index] == '0';\n}","language":"cpp"}
{"task_id":"MBCPP\/914","completion":"    if (s.empty())\n        return true;\n    int left = s.find(ch_s[0]);\n    int right = s.rfind(ch_s[1]);\n    if (left < 0 || right < 0 || left > right)\n        return false;\n    return isTwoAlter(s.substr(left + 1, right - left - 1));\n}","language":"cpp"}
{"task_id":"MBCPP\/915","completion":"    vector<int> result = new vector<int>();\n    \/\/ Write your code here\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/916","completion":"    vector<int> res = {0, 0, 0};\n\n    if (a.size() < 3)\n        return res;\n\n    for (int i = 0; i < arrSize; i++) {\n        for (int j = i + 1; j < arrSize; j++) {\n            for (int k = j + 1; k < arrSize; k++) {\n                if ((a[i] + a[j] + a[k]) == sum) {\n                    res.push_back(a[i]);\n                    res.push_back(a[j]);\n                    res.push_back(a[k]);\n                    return res;\n                }\n            }\n        }\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/917","completion":"    string result = \"\";\n    int index = 0;\n    while (index < text.size()) {\n        char c = text[index++];\n        if (c == 'A') {\n            while (index < text.size() && (c = text[index]) == 'A') {\n                index++;\n            }\n            if (index < text.size() && (text[index] == 'B')) {\n                result += \"Found a match!\";\n                index++;\n            }\n            else {\n                result += \"Not matched!\";\n            }\n        }\n        else if (c == 'B') {\n            while (index < text.size() && (c = text[index]) == 'B') {\n                index++;\n            }\n            if (index < text.size() && (text[index] == 'G')) {\n                result += \"Found a match!\";","language":"cpp"}
{"task_id":"MBCPP\/918","completion":"  if (n == 0) return 0;\n\n  int count = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] <= n) {\n      count += coinChange(s, m - s[i], n - s[i]);\n    }\n  }\n  return count + 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/919","completion":"    int product = 1;\n    for (int i = 0; i < items.size(); ++i) {\n        product *= items[i];\n    }\n    return product;\n}","language":"cpp"}
{"task_id":"MBCPP\/921","completion":"  vector<vector<int>> retTup = {{}};\n  for (auto tup : testTup) {\n    vector<int> tmpVec = retTup[tup];\n    if (!tmpVec) {\n      retTup[tup] = {tup};\n    } else {\n      for (auto j = 0; j &lt; n - 1; ++j) {\n        if (!retTup[tup+j]) {\n          retTup[tup+j] = {tup+j};\n        } else {\n          retTup[tup+j].push_back(tup+j);\n        }\n      }\n    }\n  }\n  return retTup;\n}","language":"cpp"}
{"task_id":"MBCPP\/922","completion":"    int max = -1;\n    vector<int> max_pair = {0, 0};\n    for (int i = 0; i < arr.size(); i++) {\n        int product = arr[i] * arr[i + 1];\n        if (product > max) {\n            max = product;\n            max_pair = {arr[i], arr[i + 1]};\n        }\n    }\n    return max_pair;\n}","language":"cpp"}
{"task_id":"MBCPP\/923","completion":"    \/\/ base case: trivially 0 or 1 substrings\n    if (m <= 0 && n <= 0) {\n        return 0;\n    }\n\n    \/\/ recursive case: use dynamic programming to get the length\n    \/\/ of the shortest string that has both str1 and str2 as subsequences\n    else {\n        return (int) (min(\n            \/\/ if we have more characters in x, use that as the first\n            \/\/ string.  if we have more characters in y, use that as the second\n            \/\/ string\n            \/\/ if we have the same number of characters, we know that the\n            \/\/ strings are identical, so just return the length of the shortest\n            \/\/ one.\n            (m > 0 && n > 0) ? min(superSeq(x, y, m - 1, n), superSeq(x, y, m, n - 1)) :\n                (m > 0) ? superSeq(x, y, m - 1, n) ","language":"cpp"}
{"task_id":"MBCPP\/924","completion":"    \/* if (x > y)\n        return x;\n    else\n        return y; *\/\n    return x > y ? x : y;\n}","language":"cpp"}
{"task_id":"MBCPP\/925","completion":"    int result = 1;\n    for (int i = 0; i < nums.size(); ++i) {\n        result *= nums[i];\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/926","completion":"    \/\/ write your code in C++\n    return -1;\n}","language":"cpp"}
{"task_id":"MBCPP\/928","completion":"    int year, month, day;\n    string result = \"\";\n\n    if (dt.len() != 10) {\n        return \"Invalid input.\";\n    }\n\n    year = int(dt[0:4]);\n    month = int(dt[5:7]);\n    day = int(dt[8:10]);\n\n    result = str(day - 1) + '-' + str(month) + '-' + str(year);\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/929","completion":"    int count = 0;\n    for (int i = 0; i &lt; tuplex.size(); i++) {\n        if (tuplex[i] == value) {\n            count++;\n        }\n    }\n    return count;\n}","language":"cpp"}
{"task_id":"MBCPP\/930","completion":"    \/\/ Your code goes here!\n    \/\/ Use `search` to find the first occurrence of the character `b`, \n    \/\/ and then `search` to find the first (but not necessarily the only) occurrence of the character `a`\n    \/\/ You can use the `regex` keyword to include the `b` character in the search\n    \/\/ Hint: remember that `\\w` means a-z, A-Z, 0-9, and _ (underscore)\n    \/\/ Hint 2: remember that `search` returns the index of the first match, so you don't need to use `index`\n    return \"Not matched!\";\n}","language":"cpp"}
{"task_id":"MBCPP\/931","completion":"    int sum = 0;\n    for (int i = 1; i <= number; i++) {\n        sum += 1 \/ i;\n    }\n    return sum * number;\n}","language":"cpp"}
{"task_id":"MBCPP\/932","completion":"    vector<string> result(l.size());\n\n    \/\/ Hash table to store the words already found.\n    \/\/ This is a quick and easy way to remove the duplicates from the list.\n    hash<string, bool> table;\n\n    \/\/ Scan the entire list.\n    for (int i = 0; i < l.size(); ++i) {\n        \/\/ Get the current string and check if it has already been seen.\n        \/\/ If it has not, then add it to the list and mark it as seen.\n        if (!table[l[i]]) {\n            result[i] = l[i];\n            table[l[i]] = true;\n        }\n    }\n\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/933","completion":"  return Regex.replace(text, \"(?:[A-Z])\", (match) => \"_\" + match.group(0).toLowerCase());\n}","language":"cpp"}
{"task_id":"MBCPP\/934","completion":"    int delannoyNum = 0;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            if (i == j || j == 1) {\n                delannoyNum += i;\n            } else {\n                delannoyNum += j;\n            }\n        }\n    }\n    return delannoyNum;\n}","language":"cpp"}
{"task_id":"MBCPP\/935","completion":"\tint sum = 0;\n\tfor(int i = 1; i<=number; i++) {\n\t\tsum+=i*i;\n\t}\n\treturn sum;\n}","language":"cpp"}
{"task_id":"MBCPP\/936","completion":"    int c = 0;\n    vector<vector<int>> reList = {0};\n    for (vector<int> tuple : testList) {\n        if (ordList[c] != tuple[0]) {\n            reList.push_back(tuple);\n        }\n        c++;\n    }\n    return reList;\n}","language":"cpp"}
{"task_id":"MBCPP\/937","completion":"    vector<int> counter;\n    \/\/ get the count of each char\n    counter[0] = 1;\n    for (int i = 1; i < str1.length(); i++)\n    counter[i] = counter[i - 1] + 1;\n\n    \/\/ get the max count char\n    int maxCount = counter[0];\n    string maxChar = \"\";\n    for (int i = 0; i < counter.size(); i++)\n    if (counter[i] > maxCount) {\n        maxCount = counter[i];\n        maxChar = str1[i];\n    }\n\n    return maxChar;\n}","language":"cpp"}
{"task_id":"MBCPP\/938","completion":"    vector<int> result;\n\n    if (a.size() >= p && b.size() >= q && c.size() >= r) {\n        result.reserve(p + q + r);\n        for (int i = 0; i < p; i++)\n            result[i] = a[i];\n        for (int i = 0; i < q; i++)\n            result[i + p] = b[i];\n        for (int i = 0; i < r; i++)\n            result[i + p + q] = c[i];\n\n        int index = p + q + r - 1;\n        int low = 0;\n        int high = 1;\n        int mid = 0;\n        int midVal;\n\n        while (low <= high) {\n            mid = low + ((high - low) \/ 2);\n            midVal = result[mid];\n            if (mid","language":"cpp"}
{"task_id":"MBCPP\/940","completion":"    buildMaxHeap(arr);\n    for (int i = arr.size() - 1; i > 0; i--) {\n        swap(arr, 0, i);\n        heapify(arr, 0, i);\n    }\n    return arr;\n}","language":"cpp"}
{"task_id":"MBCPP\/942","completion":"  vector<bool> results = vector<bool>(testTup.size());\n\n  \/\/ compare each element in the test list with each element in the check list and\n  \/\/ add a result if any element matches\n  for(int i = 0; i < testTup.size(); i++) {\n    results[i] = true;\n    for (int j = 0; j < checkList.size(); j++) {\n      results[i] = results[i] && testTup[i] == checkList[j];\n    }\n  }\n\n  return results.sum() > 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/943","completion":"    int size1 = num1.size();\n    int size2 = num2.size();\n    vector<int> res = vector<int>();\n    if (size1 == 0 || size2 == 0) {\n        return res;\n    }\n    if (size1 <= size2) {\n        for (int i = 0; i < size1; i++) {\n            res.push_back(num1[i]);\n        }\n        int i = 0;\n        while (i < size2) {\n            if (num2[i] > num1[0]) {\n                res.push_back(num2[i]);\n                num1[0] = num2[i];\n            }\n            i++;\n        }\n    } else {\n        for (int i = 0; i < size2; i++) {\n            res.push_back(num2[i]);\n        }\n        int i = 0;\n","language":"cpp"}
{"task_id":"MBCPP\/944","completion":"    \/\/ write your code here\n}","language":"cpp"}
{"task_id":"MBCPP\/945","completion":"    unordered_set<string> set = unordered_set<string>();\n    for (int i = 0; i < t.size(); i++) {\n        set.insert(t[i]);\n    }\n    return set;\n}","language":"cpp"}
{"task_id":"MBCPP\/947","completion":"    vector<int> lengths;\n    for (auto&amp; s : list1) {\n        lengths.push_back(s.size());\n    }\n    return lengths.back();\n}","language":"cpp"}
{"task_id":"MBCPP\/949","completion":"    string result = \"\";\n    vector<int> numList;\n    int numListSize;\n    int numListIndex;\n    int totalDigits;\n    int totalDigitsIndex;\n\n    numListSize = testList.size();\n\n    for (totalDigitsIndex = 0; totalDigitsIndex &lt; numListSize; totalDigitsIndex = totalDigitsIndex + 1) {\n        totalDigits = testList[totalDigitsIndex].size();\n\n        for (numListIndex = 0; numListIndex &lt; numListSize - totalDigitsIndex; numListIndex = numListIndex + 1) {\n            int firstIndex = 0;\n            int lastIndex = numListIndex + totalDigits;\n\n            int currentDigit;\n\n            for (int i = firstIndex; i &lt;= lastIndex; i = i + 1) {\n                currentDigit = testList[numListIndex][i] % 10;\n                currentDigit = currentDigit + testList[numListIndex + 1][i]","language":"cpp"}
{"task_id":"MBCPP\/950","completion":"    \/\/ write your code here\n\n    int sign = year \/ 12 * 2 - 1;\n    if (sign == 0)\n        sign = 1;\n    if (year % 12 == 0) {\n        sign = 1;\n    }\n\n    return \"SZOD\" + sign;\n}","language":"cpp"}
{"task_id":"MBCPP\/951","completion":"    \/\/ TODO: Your code goes here\n    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/952","completion":"    if (n < 0) {\n        return -1;\n    } else if (r < 0 || r > n) {\n        return -1;\n    } else if (p < 0 || p > n) {\n        return -1;\n    }\n\n    int res = 1;\n    while (r > 0) {\n        if (n % r == 0) {\n            res = (res * p) % n;\n        }\n        r--;\n    }\n    return res;\n}","language":"cpp"}
{"task_id":"MBCPP\/953","completion":"    vector<int> dp(n+1, 0);\n    dp[0] = 1;\n    vector<int> subsets(n+1);\n    subsets.push_back(0);\n    for (int i = 0; i < ar.size(); i++) {\n        for (int j = 0; j < n+1; j++) {\n            if (j - ar[i] >= 0 && dp[j] != -1 && dp[j-ar[i]] != -1) {\n                dp[j] += dp[j-ar[i]];\n                subsets.push_back(dp[j]);\n            }\n        }\n    }\n    return subsets[n];\n}","language":"cpp"}
{"task_id":"MBCPP\/955","completion":"    \/\/ #include <bits\/stdc++.h>\n    using namespace std;\n\n    int i;\n    int sum = 0;\n    for (i = 1; i < n; i++) {\n        if (n % i == 0)\n            sum += i;\n    }\n    return sum > n;\n}","language":"cpp"}
{"task_id":"MBCPP\/956","completion":"    vector<string> result;\n    const auto regex = regex(\"(^\\\\p{Upper}.*?$)\");\n    const auto matcher = regex.find(text);\n    if (matcher != text) {\n        result.push_back(matcher.captures(1));\n    }\n    while (matcher != text) {\n        result.push_back(matcher.captures(1));\n        matcher = regex.find(matcher.captures(1));\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/957","completion":"    \/\/ write your code here\n    return 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/958","completion":"    return \"Unknown\";\n}","language":"cpp"}
{"task_id":"MBCPP\/960","completion":"    return n - 1;\n}","language":"cpp"}
{"task_id":"MBCPP\/961","completion":"  string num = \"\";\n  string symbol = \"\";\n  for (int i = 0; i < s.size(); i++) {\n    symbol = s[i];\n    if (symbol.isalpha()) {\n      if (symbol.isupper()) {\n        num = num.append(symbol.lower());\n      } else {\n        num = num.append(symbol.upper());\n      }\n    } else if (symbol == \"V\") {\n      num = num.append(symbol);\n    } else if (symbol == \"X\") {\n      num = num.append(symbol);\n    } else if (symbol == \"L\") {\n      num = num.append(symbol);\n    } else if (symbol == \"C\") {\n      num = num.append(symbol);\n    } else if (symbol == \"D\") {\n      num = num.append(symbol);\n    } else if ","language":"cpp"}
{"task_id":"MBCPP\/962","completion":"    return l + (r - l) * ((2 + (r - l) * 1) \/ 2);\n}","language":"cpp"}
{"task_id":"MBCPP\/964","completion":"  vector<int> v;\n  v.push_back(s.length());\n  return (v[v.size() - 1] & 1) == 0;\n}","language":"cpp"}
{"task_id":"MBCPP\/965","completion":"    return text.replace(\n        string(\"\\\\B([A-Z])\"),\n        string(\"_$1\")\n    ).lower();\n}","language":"cpp"}
{"task_id":"MBCPP\/967","completion":"    string result = string(\"not accepted\");\n    string vowels = \"aeiou\";\n    for (int i = 0; i < str.size(); i++) {\n        if (vowels.find(str[i]) >= 0) {\n            result = string(\"accepted\");\n            break;\n        }\n    }\n    return result;\n}","language":"cpp"}
{"task_id":"MBCPP\/968","completion":"    if (n == 0) {\n        return 0;\n    } else if (n > 0) {\n        return floorMax(a, b, n - 1) + b;\n    } else {\n        return floorMax(a, b, n + 1) - a;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/969","completion":"    vector<vector<int>> result = {{}}\n    for (int i = 0; i < testList.size(); i++) {\n        vector<int> element = testList[i];\n        result.push_back(element);\n        for (int j = i+1; j < testList.size(); j++) {\n            vector<int> compared = testList[j];\n            if (element.size() == compared.size()) {\n                int[] equalElements = {0};\n                int[] iElements = {0};\n                int[] jElements = {0};\n                for (int k = 0; k < element.size(); k++) {\n                    int e = element[k];\n                    int c = compared[k];\n                    if (e == c) {\n                        equalElements[0]++;\n                    }\n                    iElements[0]++;\n                    jElements[0]++;\n                }\n                if (equalElements[0","language":"cpp"}
{"task_id":"MBCPP\/970","completion":"    if (x > y) {\n        return y;\n    } else {\n        return x;\n    }\n}","language":"cpp"}
{"task_id":"MBCPP\/971","completion":"    int i = 0, j = 0, k = 0, max = 0;\n    while (i < n) {\n        if (j < n && (i + a) < j + c) {\n            i = j;\n            j += b;\n        } else if (i + a > j + c) {\n            k = j + c;\n            j += b;\n            i = k - a;\n        } else {\n            k = i + a;\n            i = k - a;\n            j = k;\n        }\n        max = k > max ? k : max;\n    }\n    return max;\n}","language":"cpp"}
{"task_id":"MBCPP\/972","completion":"    vector<int> temp;\n    temp.push_back(testTup1[0]);\n    for (int i = 1; i < testTup1.size(); i++) {\n        temp.push_back(testTup1[i]);\n    }\n    temp.push_back(testTup2[0]);\n    for (int i = 1; i < testTup2.size(); i++) {\n        temp.push_back(testTup2[i]);\n    }\n    return temp;\n}","language":"cpp"}
{"task_id":"MBCPP\/973","completion":"    \/\/ Return a new string\n    string ans = string();\n\n    \/\/ For each character in the original string\n    \/\/ Rotate the character from the end of the string\n    \/\/ (add the character to the beginning of the new string)\n    for (size_t i = 0; i < s.size(); ++i) {\n        ans.append_char(s[s.size()-i-1]);\n    }\n\n    \/\/ Return the new string\n    return ans;\n}","language":"cpp"}
{"task_id":"MBCPP\/974","completion":"    int n = a.size();\n    int res = Integer.MAX_VALUE;\n\n    for (int i = 0; i < n; ++i)\n        for (int j = 0; j < n; ++j)\n            for (int k = 0; k < n; ++k)\n                res = Math.min(res, a[i][j] + a[i][k] + a[j][k]);\n\n    return res;\n}","language":"cpp"}
