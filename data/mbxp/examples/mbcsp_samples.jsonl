{"task_id":"MBCSP\/1","completion":"\n            \/\/ Your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/2","completion":"\n            \/\/ Create a HashSet to store the elements of the tuple list.\n            var elementSet = new HashSet<int>();\n            for (int i = 0; i &lt; test_tup1.Count; i++)\n            {\n                elementSet.Add(test_tup1[i]);\n            }\n\n            \/\/ Create a set that contains all the elements of the second tuple list.\n            var otherSet = new HashSet<int>();\n            for (int i = 0; i &lt; test_tup2.Count; i++)\n            {\n                otherSet.Add(test_tup2[i]);\n            }\n\n            \/\/ Find the intersection between the two sets.\n            var intersectionSet = elementSet.Intersect(otherSet);\n\n            \/\/ Create a list of all the elements from the set.\n            var resultList = new List<int>();\n            foreach (int element in intersectionSet)\n            {\n                resultList.Add(element);\n            }\n\n            \/\/ Return the list.\n            return resultList;\n        }","language":"csharp"}
{"task_id":"MBCSP\/3","completion":" \n            if (n < 2)\n                return true;\n\n            for (int i = 2; i <= n \/ 2; i++) \n            { \n                if (n % i == 0)\n                    return false;\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/4","completion":"\n            var minHeap = new List<int> ();\n            var maxHeap = new List<int> ();\n            var newNums = nums.ToArray();\n\n            for(int i = 0; i < nums.Count; i++)\n            {\n                if (maxHeap.Count == 0)\n                {\n                    minHeap.Add(nums[i]);\n                    maxHeap.Add(nums[i]);\n                }\n                else if (maxHeap.Count == 1)\n                {\n                    if (nums[i] > maxHeap[0])\n                    {\n                        minHeap.Add(nums[i]);\n                        maxHeap.Add(maxHeap[0]);\n                    }\n                    else\n                    {\n                        maxHeap.Add(nums[i]);\n                        minHeap.Add(minHeap[0]);\n                    }\n                }\n                else if (maxHeap.Count == 2)\n                {\n                    if (nums[i] >","language":"csharp"}
{"task_id":"MBCSP\/5","completion":"\n            int[][] dp = new int[n + 1][n + 1];\n\n            for (int i = 0; i <= n; i++) \n            {\n                dp[i][0] = 1;\n            }\n\n            for (int j = 0; j <= n; j++) \n            {\n                dp[0][j] = 1;\n            }\n\n            for (int i = 1; i <= n; i++) \n            {\n                for (int j = 1; j <= n; j++) \n                {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n                }\n            }\n\n            return dp[n][n];\n        }","language":"csharp"}
{"task_id":"MBCSP\/6","completion":"\n            return ((~a & b) | (~a & ~b)) == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/7","completion":"\n            List<string> result = new List<string> ();\n            \n            Regex reg = new Regex (\".*\\\\w{4,}\");\n            \n            MatchCollection mc = reg.Matches(text);\n\n            foreach (Match m in mc) \n            {\n                result.Add(m.Value);\n            }\n            \n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/8","completion":"\n            List<int> squares = nums.Select(x => x * x).ToList();\n            return squares;\n        }","language":"csharp"}
{"task_id":"MBCSP\/9","completion":"\n            if (str.Length == 1) return 0;\n\n            var count = 0;\n            for (int i = 0; i < str.Length - 1; i++)\n            {\n                if (IsSubstring(str, i, i + 1))\n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/10","completion":"\n            var list2 = list1.OrderBy(x=>x).ToList<int>();\n            var list3 = new List<int>();\n\n            for(int i=0; i<n list3.add=\"\" list2.get=\"\" return=\"\"><\/n><\/int><\/int><\/int><\/int>\n\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        \/\/\/ <summary> \n        \/\/\/ Write a function to get the n smallest items from a dataset.\n        \/\/\/ \n        \/\/\/ Examples:\n        \/\/\/ >>> SmallNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)\n        \/\/\/ >>> [10,20]\n        \/\/\/ >>> SmallNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)\n        \/\/\/ >>> [","language":"csharp"}
{"task_id":"MBCSP\/11","completion":"\n            \/\/Find the first occurrence of ch in s.\n            int index = s.IndexOf(ch);\n\n            \/\/If the first occurrence of ch is not found, return the original string.\n            if (index == -1) return s;\n\n            \/\/Find the last occurrence of ch in s.\n            int lastIndex = s.LastIndexOf(ch);\n\n            \/\/If the last occurrence of ch is not found, return the original string.\n            if (lastIndex == -1) return s;\n\n            \/\/Remove the last occurrence of ch from the string.\n            s = s.Remove(lastIndex, ch.Length);\n\n            \/\/Remove the first occurrence of ch from the string.\n            s = s.Remove(index, ch.Length);\n\n            return s;\n        }","language":"csharp"}
{"task_id":"MBCSP\/12","completion":"\n            if (M == null || M.Count == 0)\n            {\n                return new List<List<int>>();\n            }\n            \n            \/\/ 1. Sort the matrix in descending order according to the sum of its rows\n            var descendingSum = M.OrderBy(x => x.Sum());\n\n            \/\/ 2. Sort the matrix in ascending order according to the sum of its rows\n            var ascendingSum = descendingSum.OrderBy(x => x.Sum());\n\n            \/\/ 3. Merge the two sorted matrices\n            var sortedMatrix = ascendingSum.ToList();\n\n            \/\/ 4. Return the resultant matrix\n            return sortedMatrix;\n        }","language":"csharp"}
{"task_id":"MBCSP\/13","completion":"\n            var map = words.GroupBy(x => x, x => 1).Select(x => x.Select(y => new object[] {y, 1}).ToArray()).ToDictionary(x => x.Key, x => x.Value);\n            List<list>> result = map.Select(x => {\n                List<object> pair = new List<object>();\n                pair.Add(x, map[x]);\n                return pair;\n            }).ToList();\n            result.Sort(new Comparator<list>>() {\n                public int Compare(List<object> p1, List<object> p2) {\n                    return p2.Key - p1.Key;\n                }\n            });\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/14","completion":"\n            if (b > h)\n                return FindVolume (l, h, b);\n            \n            double s = (l * l * l) + (2 * l * b) + (b * b) + (h * h);\n            \n            return (Math.pow (s, 0.5));\n        }","language":"csharp"}
{"task_id":"MBCSP\/15","completion":"\n            return text.Split(new RegExp(\"(?=[a-z])\",\"g\")).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/16","completion":"\n            Regex rgx = new Regex (\"\\\\w*\");\n            Regex rgx2 = new Regex (\"_\\\\w*\");\n            int i = 0;\n            foreach (Match match in rgx.Matches(text))\n            {\n                if (match.Success && rgx2.Contains(match.Value))\n                {\n                    Console.WriteLine (\"Found a match!\");\n                }\n                else\n                {\n                    Console.WriteLine (\"Not matched!\");\n                }\n            }\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/17","completion":"\n            return a*4;\n        }","language":"csharp"}
{"task_id":"MBCSP\/18","completion":"\n            if (string0.Length == 0) \n            {\n                return string0;\n            }\n\n            if (second_string.Length == 0) \n            {\n                return string0;\n            }\n\n            string regex_string = second_string.ToUpper();\n            regex_string = regex_string + '[^a-zA-Z0-9]';\n            regex_string = '^' + regex_string + '$';\n            Regex regex = new Regex(regex_string);\n\n            if (regex.IsMatch(string0)) \n            {\n                string result_string = regex.Replace(string0, \"\");\n\n                return result_string;\n            }\n            else \n            {\n                return string0;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/19","completion":"\n            \/\/ 1. Create a Set from the input array.\n            Set<int> set = new Set<int>(arraynums);\n            \/\/ 2. If the Set contains the input array, return true.\n            return set.Contains(arraynums);\n        }","language":"csharp"}
{"task_id":"MBCSP\/20","completion":"\n            if (x < 0) \n            {\n                return false;\n            }\n\n            if (x == 0) \n            {\n                return true;\n            }\n\n            if (x % 3 == 0) \n            {\n                return false;\n            }\n\n            if (x % 5 == 0) \n            {\n                return false;\n            }\n\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/21","completion":"\n            \/\/ Your code goes here. \n        }","language":"csharp"}
{"task_id":"MBCSP\/22","completion":"\n            int firstDuplicate = -1;\n            if (nums == null || nums.Count() == 0)\n                return firstDuplicate;\n\n            var dict = new Dictionary<int, int>();\n            for (int i = 0; i < nums.Count(); i++)\n            {\n                int num = nums[i];\n                if (dict.ContainsKey(num))\n                {\n                    firstDuplicate = num;\n                    break;\n                }\n                dict[num] = num;\n            }\n            return firstDuplicate;\n        }","language":"csharp"}
{"task_id":"MBCSP\/23","completion":"\n            int max_sum = 0;\n            foreach (List<int> x in list1)\n            {\n                max_sum = max(max_sum, Sum(x));\n            }\n            return max_sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/24","completion":"\n            int quotient = 0;\n            int remainder = 0;\n\n            while (binary != 0)\n            {\n                remainder = binary % 10;\n                binary = binary \/ 10;\n\n                quotient = quotient * 2 + remainder;\n            }\n\n            return quotient;\n        }","language":"csharp"}
{"task_id":"MBCSP\/25","completion":"\n            \/\/ Start typing your C# code here.\n            \/\/ return 0;\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/26","completion":"\n            \/\/ TODO - Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/27","completion":"\n            \/\/Create a new list for output\n            List<string> output = new List<string>();\n\n            \/\/Loop through the list of strings\n            foreach (var item in list)\n            {\n                \/\/Split the string on whitespace into a list of substrings\n                var tokens = Regex.Split(item, \"\\\\s\");\n\n                \/\/Loop through the list of substrings\n                foreach (var token in tokens)\n                {\n                    \/\/Remove all digits from the substrings\n                    var digits = Regex.Replace(token, \"[0-9]\", \"\");\n\n                    \/\/Add the substrings to the output list\n                    output.Add(digits);\n                }\n            }\n\n            \/\/Return the output list\n            return output;\n        }","language":"csharp"}
{"task_id":"MBCSP\/28","completion":"\n            \/\/ Initialize the return value to be 0\n            int rv = 0;\n            \n            if (k == 0)\n            {\n                rv = 1;\n            }\n            else if (k > n - k)\n            {\n                rv = 0;\n            }\n            else\n            {\n                rv = BinomialCoeff(n - 1, k) + BinomialCoeff(n - 1, k - 1);\n            }\n            \n            return rv;\n        }","language":"csharp"}
{"task_id":"MBCSP\/29","completion":"\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/30","completion":"\n            \/\/ TODO: \n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/31","completion":"\n            List<int> result = new List<int>();\n            Queue<Integer> heap = new Heap<Integer>();\n            int i = 0;\n            int j = 0;\n            for (List<int> list : nums)\n            {\n                for (int num : list)\n                {\n                    if (heap.Count >= k)\n                        heap.Pop();\n                    heap.Enqueue (num);\n                }\n                result.Add (heap.Pop());\n                j++;\n                if (j >= nums.Count)\n                    i++;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/32","completion":"\n            \/\/Your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/33","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/34","completion":"\n            List<int> l = ar.ToList();\n            var k = l.Count;\n            var n = N;\n            var i = k;\n            var p = 0;\n            var q = 0;\n            if (n >= k)\n                return n;\n            while (q < k) \n            {\n                if (l[q] != n + p)\n                    break;\n                q++;\n                p++;\n            }\n            return n + p;\n        }","language":"csharp"}
{"task_id":"MBCSP\/35","completion":"\n            \/\/ 1 + 4 + 7 + 10 + 13 + 16 + 19 + 22 + 25 + 28 + 31 + 34 + 37 + 40 + 43 + 46\n            \/\/ 2 + 5 + 8 + 11 + 14 + 17 + 20 + 23 + 26 + 29 + 32 + 35 + 38 + 41 + 44 + 47\n            \/\/ 3 + 6 + 9 + 12 + 15 + 18 + 21 + 24 + 27 + 30 + 33 + 36 + 39 + 42 + 45 + 48\n            \/\/ 4 + 7 + 10 + 13 + 16 + 19 + 22 + 25 + 28 + 31 + 34 + 37 + 40 + 43","language":"csharp"}
{"task_id":"MBCSP\/36","completion":" \n            int[] f = {1,2,3,4,5,6,7,8,9};\n            var fIndex = f.IndexOf(q);\n            var e = q * f[fIndex] + p;\n            var eIndex = e \/ 10;\n            var d = e - (eIndex * 10);\n            return (int)(Math.Abs(d) % 10);\n        }","language":"csharp"}
{"task_id":"MBCSP\/37","completion":"\n            List<object> sorted_list = new List<object>();\n\n            \/\/ Step 1. Sort the mixed list by converting all strings to ints or vice versa.\n            mixed_list.ForEach(obj => \n            {\n                if (obj.ToString().ToInt32() == 10) \n                {\n                    sorted_list.Add(obj);\n                }\n                else\n                {\n                    sorted_list.Add(obj.ToString());\n                }\n            });\n\n            \/\/ Step 2. Sort the list by comparing the first and last element of the list.\n            sorted_list.Sort((a, b) => \n            {\n                return ((string)(a).CompareTo(b)) == 1 ? 1 : -1;\n            });\n\n            return sorted_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/38","completion":"\n            \/\/Write your code here\n            double sumEven = 0, sumOdd = 0;\n            for(int i = 0; i &lt; list1.Count; i++)\n            {\n                if(i % 2 == 0)\n                {\n                    sumEven += list1[i];\n                }\n                else\n                {\n                    sumOdd += list1[i];\n                }\n            }\n            return sumEven \/ sumOdd;\n        }","language":"csharp"}
{"task_id":"MBCSP\/39","completion":"\n            return S;\n        }","language":"csharp"}
{"task_id":"MBCSP\/40","completion":"\n            return (Dictionary<int, int>)nums\n            .SelectMany(x => x)\n            .Distinct()\n            .ToDictionary(x => x.ElementAt(0), x => x.ElementAt(1));\n        }","language":"csharp"}
{"task_id":"MBCSP\/41","completion":"\n            return nums.Where(x => x % 2 == 0).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/42","completion":"\n            \/\/Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/43","completion":"\n            \/\/ Create an array for the regular expression pattern.\n            Regex myregex = new Regex (\"[a-z]+_[a-z]+\");\n            Regex myregex1 = new Regex (\"[a-z]+_[A-Z]+\");\n            \n            \/\/ Check whether the pattern matches the text.\n            if (myregex.IsMatch (text) || myregex1.IsMatch (text))\n            {\n                return \"Found a match!\";\n            }\n            else\n            {\n                return \"Not matched!\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/44","completion":"\n            if (text == null) \n            {\n                return \"Text is empty.\";\n            }\n\n            if (text.Length == 0) \n            {\n                return \"Text is empty.\";\n            }\n\n            var regex = Regex.Match(text, \"^[^a-zA-Z]+.*\");\n            if (regex.Success) \n            {\n                return \"Found a match!\";\n            } \n            else \n            {\n                return \"Not matched!\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/45","completion":"\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/46","completion":"\n            bool result = true;\n            foreach (var number in data)\n            {\n                if (data.Count(number) > 1)\n                    result = false;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/47","completion":"\n            \/\/ write your code here\n            return ;\n        }","language":"csharp"}
{"task_id":"MBCSP\/48","completion":"\n            if (n > 0)\n            {\n                return (n & (~n + 1));\n            }\n            else \n            {\n                return 0;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/49","completion":"\n            \/\/ Your code here.\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/50","completion":"\n            return input_list\n                .Select(x => (x.Length(), x.ToArray()))\n                .OrderByDescending(x => x.Item1)\n                .Take(1)\n                .Select(x => x.Item2)\n                .ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/51","completion":"\n            return (x == y && y == z && x == z);\n        }","language":"csharp"}
{"task_id":"MBCSP\/52","completion":"\n            \/\/ write your code here\n            return b * h;\n        }","language":"csharp"}
{"task_id":"MBCSP\/53","completion":"\n            var index = str.Length - 1;\n            var firstChar = str[index];\n            var lastChar = str[0];\n\n            if (firstChar != lastChar) \n            {\n                return \"Not Equal\";\n            }\n\n            return \"Equal\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/54","completion":"\n            int min = Collections.min(my_list);\n            int max = Collections.max(my_list);\n            int range = max - min + 1;\n            int [] count = new int[range];\n\n            \/\/ fill the count array\n            for (int i = 0; i < my_list.Count; i++)\n            {\n                count[my_list[i] - min]++;\n            }\n\n            \/\/ fill the sorted array\n            for (int i = 1; i < range; i++)\n            {\n                count[i] = count[i] + count[i - 1];\n            }\n\n            List<int> sorted_list = new List<int>();\n            for (int i = 0; i < my_list.Count; i++)\n            {\n                sorted_list[count[my_list[i] - min] - 1] = my_list[i];\n                count[my_list[i] - min]--","language":"csharp"}
{"task_id":"MBCSP\/55","completion":"\n            var g = Math.pow (a, 1.0 \/ n);\n            var p = 1;\n            for (var i = 1; i < r; i++) \n                p *= (a - i) \/ i;\n            return g * p;\n        }","language":"csharp"}
{"task_id":"MBCSP\/56","completion":"\n            var r = new StringBuilder(n.ToString()).reverse().ToString();\n            return n == r.Length - 1 ? (n == Integer.Parse(r)) : false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/57","completion":"\n            \/\/ Create a set of all the digits present in the array.\n            var allDigits = new HashSet<int>();\n            for (int item : arr)\n                allDigits.Add(item);\n\n            \/\/ If the set has less than 'n' digits, return 0 as the maximum number.\n            if (allDigits.Count &lt; n) return 0;\n\n            \/\/ Create a result variable.\n            int result = 0;\n\n            \/\/ For each item in the set, add it to the result and remove it from the set.\n            \/\/ Once the set becomes empty, return the result.\n            foreach (var item in allDigits)\n                {\n                    result += item;\n                    allDigits.Remove(item);\n                    if (allDigits.Count == 0) return result;\n                }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/58","completion":"\n            \/\/ Create a dummy value to check whether the 2 values are opposite sign or not.\n            int dummy = -x;\n\n            \/\/ check whether the dummy value is equal to the 2 values.\n            if (dummy == x) \n                \/\/ return true if the 2 values are opposite sign.\n                return true;\n            else \n                \/\/ return false if the 2 values are not opposite sign.\n                return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/59","completion":"\n            \/\/ code goes here\n\n            int number = 0;\n            for (int i = 1; i <= n; i++) {\n                number += (i * (i + 1)) \/ 2;\n            }\n            return number;\n        }","language":"csharp"}
{"task_id":"MBCSP\/60","completion":"\n            if (arr.Count() == 0) \n            {\n                return 0;\n            }\n            var dict = new Dictionary<int int=\"\">();\n            for (int i = 0; i &lt; n; i++) \n            {\n                dict.Add(arr[i], 1);\n            }\n\n            var max = arr[0];\n            for (int i = 1; i &lt; n; i++) \n            {\n                if (arr[i] - arr[i - 1] == n) \n                {\n                    dict[arr[i - 1]]--;\n                }\n                else if (arr[i] - arr[i - 1] > n) \n                {\n                    dict[arr[i - 1]]++;\n                }\n                max = Math.Max(dict.Count, max);\n            }\n\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/61","completion":"\n            return Regex.Matches(s, @\"\\d{1,8}\").Count() - s.Length + 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/62","completion":"\n            return Linq.FirstOrDefault (xs, x => x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/63","completion":"\n            if (test_list == null) throw new ArgumentNullException(\"test_list\");\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/64","completion":"\n            \/\/ Sort the list using a lambda function\n            subjectmarks.Sort((a,b) => {\n                return a[0].CompareTo(b[0]);\n            });\n\n            return subjectmarks;\n        }","language":"csharp"}
{"task_id":"MBCSP\/65","completion":"\n            return data_list.Select (x => (RecursiveListSum (x.OfType<list>> () ) + x .Select (y => y .Sum () ).ToInt () ) ).Sum ();\n        }","language":"csharp"}
{"task_id":"MBCSP\/66","completion":"\n            \/\/ Using the built-in filter function to only get positive numbers.\n            List<int> result = list.Where(x => x > 0).ToList();\n\n            \/\/ Count the number of positive numbers.\n            return result.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/67","completion":"\n            \/\/ The number of partitions of a set of bell numbers is (2^n)\n            \/\/ Let's find the number of partitions of a set of 0-based bell numbers\n            \/\/ Then divide it by (2^n) and get the result\n            return (int)((Math.pow(2, n) \/ (Math.pow(2, n) - 1)));\n        }","language":"csharp"}
{"task_id":"MBCSP\/68","completion":"\n            List<int> sortedA = OrderBy(A, x => x);\n            if (Compare(A, sortedA) < 0) return false;\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/69","completion":"\n            \/\/ if the sublists are of unequal length, then they cannot be part of the list\n            if(s.Count != l.Count)\n                return false;\n            \/\/ if the sublists are of equal length, then we need to compare the elements of each\n            \/\/ sublist with the elements of the list to check whether they are part of the list or not\n            return Linq.Range(0,s.Count - 1).All(p => l[p] == s[p]);\n        }","language":"csharp"}
{"task_id":"MBCSP\/70","completion":"\n            if (Input.Count == 0) { return \"Empty list\"; }\n            if (Input.Count == 1) { return \"One tuple\"; }\n            \n            \/\/ Sort the tuple by their length.\n            List<List<int>> sorted = Input.OrderBy(x => x.Length).ToList();\n            \n            \/\/ Get the tuple with maximum length.\n            List<int> max = sorted.Take(k).ToList();\n            \n            \/\/ Check whether the size is same.\n            if (max.Count != Input.Count) { return \"All tuples have same length\"; }\n            \n            \/\/ Check whether all the tuples are of same length.\n            if (max.OrderBy(x => x.Length).ToList().Count != 1) { return \"All tuples have same length\"; }\n            \n            return \"All tuples do not have same length\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/71","completion":"\n            int n = nums.Count ( );\n            int gap = n;\n            while (gap >= 1)\n            {\n                gap = Math.Min (gap, n-gap);\n                for (int i = 0; i &lt; gap; i++)\n                {\n                    int j = i+gap;\n                    if (nums[i] > nums[j])\n                        Array.Swap (nums, i, j);\n                }\n            }\n\n            return nums;\n        }","language":"csharp"}
{"task_id":"MBCSP\/72","completion":"\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/73","completion":"\n            return Regex.Matches(text, @\"(([A-Z]+\\n)+)(\\s?[A-Z]+[a-z]+\\n)+\", RegexOptions.IgnoreCase);\n        }","language":"csharp"}
{"task_id":"MBCSP\/74","completion":"\n            \/\/ Check that the length of the patterns list is equal to the length of the colors list\n            if (colors.Length != patterns.Length)\n                return false;\n\n            \/\/ Create a pattern to represent the colors list\n            var pattern = new Regex (\"\");\n            for (int i = 0; i &lt; colors.Length; i++)\n                pattern += \"(?i)\" + colors[i] + \".\";\n\n            \/\/ Check that the patterns list matches the colors list\n            var matches = pattern.Matches (patterns);\n            return matches.Count == patterns.Length;\n        }","language":"csharp"}
{"task_id":"MBCSP\/75","completion":"\n            string result = string.Empty;\n            foreach (var tuple in test_list)\n            {\n                if ( tuple.Count % K == 0)\n                {\n                    result += (string.Format(\"[{0}, {1}, {2}]\", tuple[0], tuple[1], tuple[2])) + \"\\r\\n\";\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/76","completion":"\n            var count = 0;\n            for (int i = m; i <= n; i++)\n            {\n                for (int j = m; j <= n; j++)\n                {\n                    if (i == j)\n                        count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/77","completion":"\n            if (n == 0) return true;\n            int sum = 0;\n            for (int i = 0; i < n; i++) {\n                if (i % 2 != 0) {\n                    sum += i;\n                }\n            }\n            if (sum - n == n) return true;\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/78","completion":"\n            \/\/ write your code here\n\n            \/\/ set of bits\n            var bitSet = BitConverter.GetBytes(n);\n\n            \/\/ count 1's in the odd numbers \n            var count = 0;\n            for (int i = 0; i < bitSet.Length; i++) \n            {\n                if (bitSet[i] & 1) \n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/79","completion":"\n            return (s.Length % 2 == 1) ? true : false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/80","completion":"\n            return n * (1.0 + 5.0 \/ 12.0 * n * n - 5.0 \/ 120.0 * n * n * n);\n        }","language":"csharp"}
{"task_id":"MBCSP\/81","completion":"\n            List<list>> zip_result = new List<list>>();\n            int index_tup1 = 0;\n            int index_tup2 = 0;\n            List<int> tup_1 = new List<int>();\n            List<int> tup_2 = new List<int>();\n            for (int i = 0; i &lt; test_tup1.Count; i++) \n            {\n                while (index_tup2 &lt; test_tup2.Count &amp;&amp; test_tup2[index_tup2] &lt; test_tup1[i])\n                {\n                    index_tup2++;\n                }\n                while (index_tup1 &lt; test_tup1.Count &amp;&amp; test_tup1[index_tup1] &lt; test_tup2[index_tup2])\n                {\n                    tup_1.Add(test_tup1[index_tup1]);\n                    tup_2.Add(test_tup2[index_tup2]);","language":"csharp"}
{"task_id":"MBCSP\/82","completion":"\n            var pi = 3.1415926535897932384626433832795;\n            return 4.0 \/ 3.0 * pi * (r * r * r);\n        }","language":"csharp"}
{"task_id":"MBCSP\/83","completion":"\n            if (strr.Length == 0)\n            {\n                return \"\";\n            }\n\n            \/\/ Create a StringBuilder object to hold the result\n            StringBuilder builder = new StringBuilder();\n            \/\/ Loop through the string, and add the character to the \n            \/\/ result\n            for (int i = 0; i < strr.Length; i++)\n            {\n                builder.Add(strr.Substring(i, 1));\n            }\n\n            return builder.ToString();\n        }","language":"csharp"}
{"task_id":"MBCSP\/84","completion":"\n            var numberofrows = 6;\n            var numberofcols = 3;\n\n            var row = new int[numberofrows];\n            var col = new int[numberofcols];\n\n            for (int i = 0; i < numberofrows; i++) \n            {\n                row[i] = 0;\n            }\n\n            for (int i = 0; i < numberofcols; i++) \n            {\n                col[i] = 0;\n            }\n\n            for (int k = 0; k < n; k++) \n            {\n                var count = 1;\n                while (true) \n                {\n                    var rowindex = (int)(Math.random() * numberofrows);\n                    var colindex = (int)(Math.random() * numberofcols);\n\n                    if (count == 0) \n                    {\n                        count = 1;\n                        continue;\n                    }","language":"csharp"}
{"task_id":"MBCSP\/85","completion":"\n            \/\/Your code goes here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/86","completion":"\n            return (n * n) + ((n - 1) * (n - 1)) \/ 2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/87","completion":"\n            Dictionary<string, string> dict4 = new Dictionary<string, string>();\n            foreach (var key in dict1)\n            {\n                dict4[key] = dict1[key];\n            }\n            foreach (var key in dict2)\n            {\n                dict4[key] = dict2[key];\n            }\n            foreach (var key in dict3)\n            {\n                dict4[key] = dict3[key];\n            }\n            return dict4;\n        }","language":"csharp"}
{"task_id":"MBCSP\/88","completion":"\n            \/\/Create a Dictionary object\n            Dictionary<int, int> freq = new Dictionary<int, int>();\n            for (int i = 0; i &lt; list1.Count; i++) \n            {\n                \/\/Check if the value is not present in the dictionary\n                if (!freq.ContainsKey(list1[i]))\n                {\n                    \/\/Add it and increment it by one if it was not present before\n                    freq.Add(list1[i], 1);\n                } \n                else \n                {\n                    \/\/Increment it by one if it was already present\n                    int currentFreq = freq[list1[i]];\n                    freq[list1[i]] = currentFreq + 1;\n                }\n            }\n            return freq;\n        }","language":"csharp"}
{"task_id":"MBCSP\/89","completion":"\n            \/\/ 1) Find the largest number smaller than N\n            \/\/ 2) Return the closest number smaller than N\n            \/\/ 3) Return -1 to indicate no numbers were found\n            var smallerNumbers =\n                new List<int>()\n                    {\n                        new int[] { 0 },\n                        new int[] { 1 },\n                        new int[] { 2 },\n                        new int[] { 3 },\n                        new int[] { 4 },\n                        new int[] { 5 },\n                        new int[] { 6 },\n                        new int[] { 7 },\n                        new int[] { 8 },\n                        new int[] { 9 },\n                        new int[] { 10 },\n                        new int[] { 11 }\n                    };\n            var smallerNumberIndex =\n                smallerNumbers\n                    .Where(x => x > N)\n                    .ToArray();\n            if (smallerNumber","language":"csharp"}
{"task_id":"MBCSP\/90","completion":"\n            int max = 0;\n            foreach (var str in list1) \n            {\n                int length = str.Length;\n                if (length > max)\n                    max = length;\n            }\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/91","completion":"\n            \/\/ Your code goes here.\n        }","language":"csharp"}
{"task_id":"MBCSP\/92","completion":"\n            return Regex.Matches(\"\\\\d*[13579]\", n);\n        }","language":"csharp"}
{"task_id":"MBCSP\/93","completion":"\n            return a * b;\n        }","language":"csharp"}
{"task_id":"MBCSP\/94","completion":"\n            \/\/Write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/95","completion":"\n            \/\/ int min = 0;\n            \/\/ foreach (var l in lst)\n            \/\/ {\n            \/\/     if (min > 0 && min > l.Length)\n            \/\/         min = l.Length;\n            \/\/ }\n            \/\/ return min;\n            return lst.Where(l => min > 0 && min > l.Length).Select(l => l.Length).Min();\n        }","language":"csharp"}
{"task_id":"MBCSP\/96","completion":"\n            int counter = 0;\n\n            for (int i = 1; i <= n; i++) \n            {\n                if (n % i == 0) \n                {\n                    counter++;\n                }\n            }\n\n            return counter;\n        }","language":"csharp"}
{"task_id":"MBCSP\/97","completion":"\n            Dictionary<int, int> frequencyList = new Dictionary<int, int>();\n            foreach (List<int> list in list1)\n            {\n                foreach (int element in list)\n                {\n                    if (frequencyList.ContainsKey(element))\n                    {\n                        frequencyList[element] += 1;\n                    }\n                    else\n                    {\n                        frequencyList[element] = 1;\n                    }\n                }\n            }\n\n            return frequencyList;\n        }","language":"csharp"}
{"task_id":"MBCSP\/98","completion":"\n            return Math.Abs(numbers.Select(x => x * -1).Select(x => x \/ numbers.Count).Sum());\n        }","language":"csharp"}
{"task_id":"MBCSP\/99","completion":"\n            \/\/Write your code here.\n            var result = \"\";\n            var bin = \"0000\";\n            var n = n + \"\";\n            for (int i = 0; i < n.length; i++)\n            {\n                bin = Integer.parseInt(bin, 2) + \n                    Integer.parseInt(n[i], 10);\n                result = Integer.parseInt(bin, 2).ToString(\"b\") + result;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/100","completion":"\n            if (num == 0) return 0;\n\n            var palindromes = new List<int> {0, 1};\n            while (palindromes.Count () &lt; (num \/ 2))\n            {\n                palindromes.Add (\n                    ((num \/ palindromes.Count ()) * 10) + palindromes.ElementAt (palindromes.Count () - 1) - (num % palindromes.Count ())\n                );\n            }\n\n            return palindromes.ElementAt (num \/ 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/101","completion":"\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/102","completion":"\n            if (word == null) \n                throw ArgumentNullException (nameof (word));\n    \n            return Regex.Match (word, @\"\\s([A-Z])\").Value.GetOrdinal (1) + Regex.Match (word, @\"\\s([A-Z])\", RegexOptions.IgnoreCase).Value.GetOrdinal (1) + Regex.Match (word, @\"([A-Z])\", RegexOptions.IgnoreCase).Value;\n        }","language":"csharp"}
{"task_id":"MBCSP\/103","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/104","completion":"\n            List<List<string>> list = new List<List<string>>();\n            for (List<string> sub : input_list)\n            {\n                list.Add(sub.OrderBy(s => s.Split(' ').First()));\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/105","completion":"\n            var count = 0;\n            foreach (var item in lst)\n                if (item)\n                    count++;\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/106","completion":"\n            \/\/ TODO: Write a code to add the given test_list to the given test_tup.\n            return test_tup;\n        }","language":"csharp"}
{"task_id":"MBCSP\/107","completion":"\n            \/\/ Create a regex to match all numbers between L and R.\n            string Regex = Regex.Create<string>(\"[0-9A-Fa-f]+\");\n\n            \/\/ Create a string of all hexadecimals numbers.\n            string Numbers = Regex.Replace(\n                    System.Text.RegularExpressions.Range(\"[\" + L + \"..\" + R + \"]\"), \n                    \"X\", \n                    -1);\n\n            \/\/ Count the numbers.\n            return (int)Numbers.Split(Regex.RegexOptions.IgnoreCase).Count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/108","completion":"\n            \/\/create a list to hold the sorted elements.\n            List<int> sortedList = new List<int>();\n\n            \/\/if no number is in the list, return the empty list.\n            if (num1.Count == 0 || num2.Count == 0 || num3.Count == 0) \n                return sortedList;\n            \n            \/\/create a priority queue to store the elements of the lists.\n            HeapPriorityQueue<int> heap = new HeapPriorityQueue<int>();\n\n            \/\/add the elements from the first list to the priority queue.\n            for (int number : num1)\n                heap.Add(number);\n            \n            \/\/add the elements from the second list to the priority queue.\n            for (int number : num2)\n                heap.Add(number);\n\n            \/\/add the elements from the third list to the priority queue.\n            for (int number : num3)\n                heap.Add(number);\n\n            \/\/add the elements from the priority queue to the sorted list.\n            while (!heap.Is","language":"csharp"}
{"task_id":"MBCSP\/109","completion":"\n            int[] arr = ConvertTo1DArray (s, 0);\n            return Math.Count (arr, n);\n        }","language":"csharp"}
{"task_id":"MBCSP\/110","completion":"\n\n            \/\/ convert the list to the array\n            int[][] arr = new int[test_list.Count()][2];\n            for (int i = 0; i < test_list.Count(); i++) \n            {\n                List<int> list = test_list[i];\n                arr[i][0] = list[0];\n                arr[i][1] = list[1];\n            }\n\n            \/\/ sort the array\n            arr.Sort(new int[] { 0 }, new Compare<int>() {\n                public int Compare(int a, int b) {\n                    return (a - b);\n                }\n            });\n\n            \/\/ create a dictionary that contains the value of the start range\n            Dictionary<int int=\"\"> dict = new Dictionary<int int=\"\">();\n            dict.Add(strt_val, 0);\n\n            \/\/ create a list of start\/end values\n            List<int> start_list = new List<int>();\n            List<int> end_list = new List<int>();","language":"csharp"}
{"task_id":"MBCSP\/111","completion":"\n            \/\/ Create a hash map with all the elements of all the nested lists as a key (key being the nestedlist elements)\n            Map<object int=\"\"> map = new Dictionary<object int=\"\">();\n            for (List<int> list : nestedlist) \n            {\n                for (int item : list) \n                {\n                    map.Add(item, 1);\n                }\n            }\n\n            \/\/ Create a list of items which are common to all the nested lists.\n            List<int> commonList = new List<int>();\n            foreach (var item in map) \n            {\n                if (map[item] == nestedlist.Count) \n                {\n                    commonList.Add(item);\n                }\n            }\n            return commonList;\n        }","language":"csharp"}
{"task_id":"MBCSP\/112","completion":"\n            return diameter*height;\n        }","language":"csharp"}
{"task_id":"MBCSP\/113","completion":"\n            if (Regex.IsMatch(text, \"[-+]?[0-9]+\", RegexOptions.None))\n            {\n                return true;\n            }\n\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/114","completion":"\n            \/\/ Initialize frequency counter to 0 for each tuple.\n            Dictionary<int int=\"\"> freq = new Dictionary<int int=\"\">();\n            foreach (var t in test_list)\n                freq[t[0]]++;\n\n            \/\/ Build the answer\n            var answer = new List<list>>();\n            foreach (var t in test_list) {\n                int f = freq[t[0]];\n                List<int> list = new List<int>();\n                list.Add(t[0]);\n                list.Add(t[1]);\n                list.Add(t[2]);\n                list.Add(f);\n                answer.Add(list);\n                freq[t[0]] -= 1;\n            }\n\n            \/\/ Sort the list of tuples by descending frequency\n            answer.OrderByDescending((x, y) => x.get_Item(3) - y.get_Item(3));\n\n            return answer.Select(x => x.ToString()).ToArray();\n        }","language":"csharp"}
{"task_id":"MBCSP\/115","completion":"\n            bool isAllEmpty = true;\n            \/\/ Iterate through the list of dictionaries and check whether they are empty or not\n            foreach (var dict in list1)\n            {\n                if (dict != null)\n                {\n                    if (dict.Count () > 0)\n                    {\n                        isAllEmpty = false;\n                        break;\n                    }\n                }\n            }\n            return isAllEmpty;\n        }","language":"csharp"}
{"task_id":"MBCSP\/116","completion":"\n            if (nums.Count == 0)\n                return 0;\n            return nums.Aggregate (x -> x, (x, y) => x * 10 + y);\n        }","language":"csharp"}
{"task_id":"MBCSP\/117","completion":"\n            if (test_list == null || test_list.Count == 0)\n                return \"\";\n\n            string[] temp;\n            string[] final_list;\n\n            temp = test_list[0].ToArray();\n            if (temp.Length == 1)\n                return \"\";\n\n            for (int i = 0; i &lt; temp.Length; i++)\n                if (!IsFloat(temp[i]))\n                    return \"\";\n\n            final_list = new string[test_list.Count];\n            for (int i = 0; i &lt; test_list.Count; i++)\n                final_list[i] = test_list[i].Select(x => ConvertToFloat(x)).ToArray().Join(\", \");\n\n            return string.Format(\"[{0}]\", final_list);\n        }","language":"csharp"}
{"task_id":"MBCSP\/118","completion":"\n            return new List<string> { string0 };\n        }","language":"csharp"}
{"task_id":"MBCSP\/119","completion":"\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/120","completion":"\n            var productList = list1.Select(x => x.Select(y => y.ProductOf(x))).ToList();\n            return productList.Aggregate(x => x.Max(), x => x.Min()) ;\n        }","language":"csharp"}
{"task_id":"MBCSP\/121","completion":"\n            if (n < 3) {\n                return false;\n            }\n            else {\n                int min = 0;\n                int max = n - 1;\n                int i = min + 1;\n                int j = max;\n                int k = min + 2;\n                while (i < j &amp;&amp; j < k) {\n                    int currentSum = A[i] + A[j] + A[k];\n                    if (currentSum == sum) {\n                        return true;\n                    }\n                    else if (currentSum &lt; sum) {\n                        min = i + 1;\n                        i = min + 1;\n                    }\n                    else {\n                        max = j - 1;\n                        j = max;\n                    }\n                    if (min > max) {\n                        return false;\n                    }\n                }","language":"csharp"}
{"task_id":"MBCSP\/122","completion":"\n            if (n <= 0)\n                throw new ArgumentOutOfRangeException();\n\n            var k = n;\n            var sum = 0;\n            while (k > 0) {\n                sum = sum + (k % 10) * (k % 10);\n                k = k \/ 10;\n            }\n\n            var l = sum \/ n;\n            return l;\n        }","language":"csharp"}
{"task_id":"MBCSP\/123","completion":"\n            \/\/Write your code here\n\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/125","completion":"\n            \/\/Your code goes here\n            int len = 0;\n            int count0 = 0;\n            int count1 = 0;\n            foreach (int i = 0; i < n; i++)\n            {\n                if (string0[i] == '0')\n                {\n                    count0++;\n                }\n                else\n                {\n                    count1++;\n                }\n            }\n            if (count0 > count1)\n            {\n                len = n - count0;\n            }\n            else\n            {\n                len = count1;\n            }\n            return len;\n        }","language":"csharp"}
{"task_id":"MBCSP\/126","completion":"\n            \/\/ Add your code here\n            \/\/return the sum\n            int sum = 0;\n            for (int i = 1; i <= Math.min(a,b); i++)\n            {\n                if (a%i == 0 && b%i == 0)\n                {\n                    sum += i;\n                }\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/127","completion":" \n            return x*y; \n        }","language":"csharp"}
{"task_id":"MBCSP\/128","completion":"\n            \/\/ code goes here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/129","completion":"\n            \/\/TODO: write code to calculate magic square\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/130","completion":"\n            \/\/ Start typing your Java solution below\n            \/\/ DO NOT write main() function\n            \/\/ You must write a function that takes an array of integers as input and returns a tuple with the maximum\n            \/\/ frequency and the number of occurrences.\n            if (nums.Count == 0)\n                return null;\n            int max = nums[0], maxCount = 1;\n            for (int i = 1; i &lt; nums.Count; i++)\n            {\n                if (nums[i] == max)\n                {\n                    maxCount++;\n                }\n                else\n                {\n                    if (maxCount > 1)\n                        return new List<int> {max, maxCount};\n                    max = nums[i];\n                    maxCount = 1;\n                }\n            }\n            return new List<int> {max, maxCount};\n        }","language":"csharp"}
{"task_id":"MBCSP\/131","completion":"\n            var pattern = @\"(?i)([aeiou])\";\n            return Regex.Replace(str1, pattern, \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/132","completion":"\n            var str1 = \"\";\n            foreach (var item in tup1)\n            {\n                str1 += item;\n            }\n            return str1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/133","completion":"\n            return nums.Where(x => x < 0).Aggregate(0, (a, b) => a + b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/134","completion":"\n            var arr1 = arr.Take(n).ToArray();\n            arr1.Reverse();\n            var arr2 = arr.Take(n).ToArray();\n            var res = arr1.Concat(arr2).Take(n).ToArray();\n            var result = \"\";\n            for (var i = 0; i &lt; n; i++) \n            {\n                if (i % 2 != 0)\n                    result = \"ODD\";\n                else\n                    result = \"EVEN\";\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/135","completion":"\n            int result = 0;\n            for (int i = 1; i <= n; i++) {\n                result += Math.pow(i, 2);\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/136","completion":"\n            var electricityBill = 0.5 * units * 1.1;\n            return electricityBill;\n        }","language":"csharp"}
{"task_id":"MBCSP\/137","completion":"\n            var zeroes = (nums.Where(i => i == 0).Count \/ nums.Count).RoundUp(2);\n            var ratio = ((nums.Where(i => i == 0).Count \/ nums.Count) \/ zeroes).RoundUp(2);\n            return ratio;\n        }","language":"csharp"}
{"task_id":"MBCSP\/138","completion":"\n            var bin = Convert.ToBase2(n);\n            var result = bin.Select(p => p == 1).Count() == 1;\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/139","completion":"\n            var pi = 3.14;\n            return (pi * (2 * r));\n        }","language":"csharp"}
{"task_id":"MBCSP\/140","completion":"\n            \/\/ Write your code here.\n            List<int> result = new List<int>();\n            for(int i = 0; i < test_list.Count; i++)\n            {\n                for(int j = 0; j < test_list.Count; j++)\n                {\n                    if(test_list[i] == test_list[j])\n                    {\n                        result.Add(test_list[i]);\n                    }\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/141","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/142","completion":"\n            var result = 0;\n            \/\/ Your code goes here\n            result = 0;\n            var match = Regex.Matches(list1.ToArray(), \"(\\\\d+)\\\\s*(\\\\d+)\\\\s*(\\\\d+)\");\n            if (match.Count == 0)\n            {\n                return result;\n            }\n            else\n            {\n                var list = new List<string>();\n                for (int i = 0; i &lt; match.Count; i++)\n                {\n                    var item = match[i];\n                    list.Add(item.Value1 + \" \" + item.Value2);\n                }\n\n                var x = new Dictionary<string int=\"\">();\n                for (int i = 0; i &lt; list.Count; i++)\n                {\n                    var item = list[i];\n                    x[item]++;\n                }\n                match = Regex.Matches(list2.ToArray(), \"(\\\\d+)\\\\s","language":"csharp"}
{"task_id":"MBCSP\/143","completion":"\n            \/\/Write your code here\n            \/\/return the number of lists present in the tuple\n            if (Input.Count == 0)\n            {\n                return 0;\n            }\n            else if (Input.Count == 1)\n            {\n                return 1;\n            }\n            else if (Input.Count == 2)\n            {\n                if (((List<object>)Input[0]).Count == ((List<object>)Input[1]).Count)\n                {\n                    return 1;\n                }\n                else\n                {\n                    return 2;\n                }\n            }\n            else\n            {\n                int i, j, count = 0;\n                for (i = 0; i &lt; Input.Count; i++)\n                {\n                    for (j = i + 1; j &lt; Input.Count; j++)\n                    {\n                        if (System.Linq.Enumerable.Of<object>(Input[","language":"csharp"}
{"task_id":"MBCSP\/144","completion":"\n            var differences = 0;\n            var sum = 0;\n            foreach (var item in arr) \n            {\n                var next = item + n;\n                if (arr.IndexOf(next) != arr.IndexOf(item)) \n                {\n                    differences += Math.Abs(next - item);\n                    sum += item + n;\n                }\n            }\n            return differences + sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/145","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/146","completion":"\n            \/\/ write code here\n            \/\/ return the ascii value of the string\n            int length = str1.Length;\n            int sum = 0;\n\n            for (int i = 0; i < length; i++) \n            {\n                sum += (int)str1[i].ToLower().GetHashCode();\n            }\n\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/147","completion":"\n            if (m == 0 || n == 0)\n                return 0;\n            \n            if (tri.Length == 0)\n                return 0;\n                \n            if (tri[0].Length == 0)\n                return 0;\n                \n            if (tri[0].Length != n)\n                return 0;\n                \n            if (tri[0].Length != m)\n                return 0;\n                \n            if (tri[0].Index != 0 && tri[0].Index != m)\n                return 0;\n                \n            int[][] dp = new int[m][n];\n            \n            for (int i = 0; i < m; i++)\n            {\n                dp[i][0] = tri[0][0];\n            }\n                        \n            for (int i = 0; i < n; i++)\n            {\n                dp[0][i] = tri[0][i];\n            }\n            \n           ","language":"csharp"}
{"task_id":"MBCSP\/148","completion":"\n            \/\/Write your code here\n            return N;\n        }","language":"csharp"}
{"task_id":"MBCSP\/149","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/150","completion":"\n            var infinite = new List<int> { -2147483648, -2147483647, 2147483646, 2147483647, 2147483648 };\n            var seq = new List<int> { a, b, c };\n\n            return new HashSet<int>(seq).ContainsAll(infinite);\n        }","language":"csharp"}
{"task_id":"MBCSP\/151","completion":"\n            if (x == 1 || y == 1) {\n                return true;\n            }\n            if (x % y == 0) {\n                return false;\n            }\n            return IsCoprime (x \/ y, y);\n        }","language":"csharp"}
{"task_id":"MBCSP\/152","completion":"\n            if (x.Count &lt;= 1)\n                return x;\n\n            \/\/ Divide the input into half\n            List<int> leftHalf = new List<int>();\n            List<int> rightHalf = new List<int>();\n\n            for (int i = 0; i &lt; x.Count \/ 2; i++)\n                leftHalf.Add(x[i]);\n\n            for (int i = x.Count \/ 2; i &lt; x.Count; i++)\n                rightHalf.Add(x[i]);\n\n            \/\/ Sort each half, merging the results\n            leftHalf = MergeSort(leftHalf);\n            rightHalf = MergeSort(rightHalf);\n\n            return Merge(leftHalf, rightHalf);\n        }","language":"csharp"}
{"task_id":"MBCSP\/153","completion":"\n            List<double> result = new List<double>();\n            double s = (-b + Math.sqrt((b*b) - (4*a*c)))\/2*a;\n            result.Add(s);\n            double t = (-b - Math.sqrt((b*b) - (4*a*c)))\/2*a;\n            result.Add(t);\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/154","completion":"\n            List<int> result = new List<int>();\n            foreach (List<int> list in nums)\n            {\n                for (int num in list)\n                {\n                    if (num == N)\n                        result.Add(num);\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/155","completion":"\n            return n ^= (n & 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/156","completion":"\n            List<List<int>> tuple_int = new List<List<int>>();\n\n            foreach (var item in tuple_str)\n            {\n                List<int> tuple_int_item = new List<int>();\n\n                for (var i = 0; i < item.Count; i++)\n                {\n                    tuple_int_item.Add(Integer.parseInt(item[i]));\n                }\n\n                tuple_int.Add(tuple_int_item);\n            }\n\n            return tuple_int;\n        }","language":"csharp"}
{"task_id":"MBCSP\/157","completion":"\n            if (list1 == null) return null;\n            List<object> result = new List<object> ();\n            result.AddRange (Encoding (list1, 0, list1.Length));\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/158","completion":"\n            var dp = new int[n+1];\n\n            for (int i = 0; i <= n; i++)\n            {\n                dp[i] = i;\n\n                for (int j = 0; j < i; j++)\n                {\n                    if (arr[i] == arr[j])\n                        dp[i] = dp[i] - dp[j];\n                }\n            }\n\n            return dp[n];\n        }","language":"csharp"}
{"task_id":"MBCSP\/159","completion":"\n            if (days > 31 && days < 41) {\n                if (month == \"January\" || month == \"March\" || month == \"May\" || month == \"July\" || month == \"August\" || month == \"October\" || month == \"December\") {\n                    return \"winter\";\n                }\n                else if (month == \"April\" || month == \"June\" || month == \"September\" || month == \"November\") {\n                    return \"spring\";\n                }\n                else if (month == \"February\" || month == \"March\" || month == \"April\" || month == \"June\" || month == \"September\" || month == \"November\") {\n                    return \"spring\";\n                }\n                else if (month == \"February\" || month == \"April\" || month == \"May","language":"csharp"}
{"task_id":"MBCSP\/160","completion":"\n            if ((a == 0) || (b == 0) || (n < 0))\n                return 'No solution';\n            \n            var ab = a * a + b * b;\n            if (ab == n)\n                return 'x = ' + a + ', y = ' + b;\n            else if (ab < n)\n                return 'No solution';\n            else\n                return 'x = ' + ((n - b) \/ a) + ', y = ' + ((n - a) \/ b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/161","completion":"\n            \/\/Write the code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/162","completion":"\n            if (n == 0) return 0;\n            return n + SumSeries(n - 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/163","completion":"\n            \/\/ return (s * l) \/ 2;\n            \/\/ return Math.pow(s, 2) * l;\n            return (s * l) * 0.5;\n        }","language":"csharp"}
{"task_id":"MBCSP\/164","completion":"\n            return ((num1 \/ 2) == (num2 \/ 2));\n        }","language":"csharp"}
{"task_id":"MBCSP\/165","completion":"\n            \/\/ 1. Convert string to lowercase\n            \/\/ 2. Convert string to uppercase\n            \/\/ 3. Use \"Regular Expression\" to match each letter in a string to the corresponding letter in english alphabet\n            \/\/ 4. For each letter in a string, if there is a match, increment the count by 1\n            \/\/ 5. Return the count\n            \n            str1 = str1.ToLower();\n            str1 = str1.ToUpper();\n            \n            var regex = @\"(?i)\\\\p{L}+\";\n            \n            var matches = Regex.Matches(str1, regex);\n            \n            return matches.Count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/166","completion":"\n            return (int)linq.Enumerable.Range(0, N).GroupBy(i => {\n                return A[i] ^ A[i + 1];\n            }).Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/167","completion":"\n            var power = Math.Pow(2, Math.Round(Math.log2(n)));\n            if (power == n)\n            {\n                return power;\n            }\n            return power + 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/168","completion":"\n            return (a.Count(x) > 0) ? 1 : 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/169","completion":"\n            var m = n;\n            while (m % 2 == 0) {\n                m \/= 2;\n            }\n            var p = 3;\n            while (p * p <= m) {\n                while (m % p == 0) {\n                    m \/= p;\n                }\n                p += 2;\n            }\n            return m;\n        }","language":"csharp"}
{"task_id":"MBCSP\/170","completion":"\n            \/\/Write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/171","completion":"\n            return 2 * (a * a) + (2 * a) + 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/172","completion":"\n            \/\/Write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/173","completion":"\n            return Regex.Replace(text, @\"\\W\", \" \");\n        }","language":"csharp"}
{"task_id":"MBCSP\/174","completion":"\n            Dictionary<string, List<int>> dict = new Dictionary<string, List<int>>();\n\n            foreach (var item in l)\n            {\n                List<int> list = dict.TryGetValue(item.Key, out list);\n                if (list == null)\n                    dict.Add(item.Key, list = new List<int>());\n\n                list.Add(Convert.ToInt32(item.Value));\n            }\n\n            return dict;\n        }","language":"csharp"}
{"task_id":"MBCSP\/175","completion":" \n            \/\/ Initialize a result of false.\n            bool result = false;\n            \/\/ Create a regular expression object.\n            Regex regex = new Regex(@\"^[\\\\(\\\\)\\\\[\\\\{\\\\}\\\\]]$\");\n            \/\/ Create a matcher object using our regular expression object.\n            Matcher matcher = regex.Matches(str1);\n            \/\/ If there is a match in the string, set the result to true.\n            if (matcher.Success) \n            {\n                result = true;\n            }\n            \/\/ Return the result.\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/176","completion":"\n            int sides = [a, b, c].Aggregate(\n                (t1, t2) => t1 + t2, 0);\n            return 2 * sides;\n        }","language":"csharp"}
{"task_id":"MBCSP\/177","completion":"\n            List<int> LCMList = new List<int>();\n\n            \/\/ your code goes here\n            \/\/ LCM = LCM of [L,R]\n            \/\/ LCMList.Add (LCM);\n\n            return LCMList;\n        }","language":"csharp"}
{"task_id":"MBCSP\/178","completion":"\n            string res = \"Not Matched!\";\n            foreach (var pattern in patterns) \n            {\n                var matches = Regex.Matches(text, @\"\\s*\" + pattern + \"\\s*\");\n                if (matches.Count == 1) \n                {\n                    res = \"Matched!\";\n                }\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/179","completion":"\n            return x == 0 || (x % 10) != 0 || IsNumKeith (x \/ 10);\n        }","language":"csharp"}
{"task_id":"MBCSP\/180","completion":"\n            var sp = (object)new LatLongPair (slat, slon);\n            var ep = (object)new LatLongPair (elat, elon);\n            \n            \/\/ TODO: your code goes here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/181","completion":"\n            \/\/ Create a regex pattern to match strings which begin with the longest\n            \/\/ common prefix.\n            \/\/ The longest common prefix is the longest prefix which is also a suffix.\n            Regex strRegex = new Regex ( \"^(.+?)$\" );\n            string longestCommonPrefix = \"\";\n\n            \/\/ Find the longest prefix which is also a suffix.\n            \/\/ Add it to the longest common prefix if it's a suffix.\n            \/\/ When we find a prefix which is not a suffix, stop.\n            foreach (string prefix in strRegex.Matches(str1))\n            {\n                \/\/ If the current prefix is not a suffix, stop.\n                if (!strRegex.IsSuffix(prefix))\n                    break;\n                    \n                \/\/ If the current prefix is a suffix and the longest common prefix\n                \/\/ is empty, set the longest common prefix.\n                if (strRegex.IsSuffix(longestCommonPrefix))\n                    longestCommonPrefix = prefix;\n            }\n\n            \/\/ Return the longest common prefix.\n            return longestCommonPrefix;\n        }","language":"csharp"}
{"task_id":"MBCSP\/182","completion":"\n            List<list>> list1 = new List<list>>();\n            List<string> list2 = new List<string>();\n            List<string> list3 = new List<string>();\n            List<string> list4 = new List<string>();\n            string string1 = \"\";\n            string string2 = \"\";\n            string string3 = \"\";\n            string string4 = \"\";\n            string string5 = \"\";\n            string string6 = \"\";\n            string string7 = \"\";\n            string string8 = \"\";\n\n            int int1;\n            int int2;\n            int int3;\n            int int4;\n            int int5;\n            int int6;\n            int int7;\n            int int8;\n            int int9;\n            int int10;\n            int int11;\n            int int12;\n            int int13;\n            int int14;\n            int int15;\n            int int16;\n            int int17;\n            int int18;\n            int int19;\n            int int20;\n            int int","language":"csharp"}
{"task_id":"MBCSP\/183","completion":"\n            return (int) arr.Where(x => (x + k) % n == 0).Select(x => x + k).Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/184","completion":"\n            var greater = list.Where (x => x > num).ToArray ();\n            return greater.Any ();\n        }","language":"csharp"}
{"task_id":"MBCSP\/185","completion":"\n            \/\/ write your code here\n\n        }","language":"csharp"}
{"task_id":"MBCSP\/186","completion":"\n            \/\/ If there are no patterns, return the original text as it is.\n            if (patterns.Count == 0) return text;\n\n            \/\/ Create a regex for each pattern\n            List<string> regexes = patterns.Select (x => Regex.Create (\"^\" + x + \"$\", RegexOptions.IgnoreCase));\n\n            \/\/ Create a matcher for the input text against all regexes.\n            RegexCollection regexCollection = new RegexCollection ();\n            foreach (string regex in regexes) regexCollection.Add (regex);\n            Regex regex = regexCollection.GetAt (0);\n            RegexCollection matcher = new RegexCollection (regex);\n            foreach (string literal in patterns) matcher.Add (literal, RegexOptions.IgnoreCase);\n            MatchCollection matches = matcher.Matches (text, RegexOptions.MultiLine);\n\n            \/\/ If the original text contains no matches, return \"Not Matched!\".\n            if (matches.Count == 0) return \"Not Matched!\";\n\n            \/\/ Else, return \"Matched!\"","language":"csharp"}
{"task_id":"MBCSP\/187","completion":"\n            \/\/ If the two sequences are of different length, no subsequence exists.\n            if (m == 0 || n == 0)\n                return 0;\n\n            \/\/ Let L[m+1][n+1] be the length of LCS of X[0..m-1] and Y[0..n-1].\n            var L[m+1][n+1] = 0;\n\n            \/\/ Let F[0][0] be the length of LCS of X[0..m-1] and Y[0..n-1].\n            var F[m+1][n+1] = 0;\n\n            \/\/ Initialize the first row and first column of LCS as 0.\n            for (int i = 0; i <= m; i++)\n                L[i][0] = 0;\n            for (int j = 0; j <= n; j++)\n                L[0][j] = 0;\n\n            \/\/ Consider all subproblems:\n            \/\/ i) Start from the 2-","language":"csharp"}
{"task_id":"MBCSP\/188","completion":"\n            \/\/ Initialize a 2D matrix for storing the result.\n            \/\/ We are gonna start from the left top corner of the matrix.\n            \/\/ And if the number is not divisible by 2, we don't have to check its right side.\n            \/\/ Otherwise, we will check its right side.\n            \/\/ The value will be 1 if the number is divisible by 2, otherwise 0.\n            List<int> result = new List<int> { 1 };\n            \n            for (int i = 0; i * i &lt;= n; i++) \n            {\n                \/\/ If the number is not divisible by 2, we don't need to check its right side.\n                if (i * i != n) \n                {\n                    \/\/ We will add 1 to the result of the right side.\n                    result = result.Union (result.Intersection (new int[] { i * i }));\n                }\n            }\n            \n            \/\/ If we have 2","language":"csharp"}
{"task_id":"MBCSP\/189","completion":"\n            \/\/ Complete this function\n            \/\/ the first positive number is 1, and the last is n\n            \/\/ arr is a sorted list\n            \/\/ find the index of the first positive number (i.e. 1) \n            \/\/ and the last positive number (i.e. n) \n            \/\/ return the difference\n        }","language":"csharp"}
{"task_id":"MBCSP\/190","completion":"\n            \/\/ Solution 1:\n            \/\/ Using nested loops and the distance formula.\n            \/\/ Calculate the distance between each point and the corner.\n            \/\/ If the distance is less than or equal to the sum of the sides,\n            \/\/ then the point is inside the rectangle.\n\n            \/\/ Solution 2:\n            \/\/ Using the square method of calculating the area.\n            \/\/ Using the distance formula.\n            \/\/ If the distance is less than or equal to the sum of the sides,\n            \/\/ then the point is inside the rectangle.\n\n            \/\/ Solution 3:\n            \/\/ Using the square method of calculating the area.\n            \/\/ Using the distance formula.\n            \/\/ If the distance is less than or equal to the sum of the sides,\n            \/\/ then the point is inside the rectangle.\n\n            \/\/ Solution 4:\n            \/\/ Using the square method of calculating the area.\n            \/\/ Using the distance formula.\n            \/\/ If the distance is less than or equal to the sum of the sides,\n            \/\/ then the point is inside the rectangle.\n            return (int)Math","language":"csharp"}
{"task_id":"MBCSP\/191","completion":"\n            return monthname3.Length == 3 ? (monthname3.IndexOf(\"April\") != -1 && monthname3.IndexOf(\"June\") != -1 && monthname3.IndexOf(\"May\") != -1) : false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/192","completion":"\n            return Regex.Matches(str, @\"([a-zA-Z])\\\\d+\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/193","completion":"\n            var distinct = test_tup.Distinct();\n\n            var result = new List<int>();\n\n            foreach (int item in distinct)\n            {\n                result.Add(item);\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/194","completion":"\n            var result = 0;\n\n            while (n != 0)\n            {\n                var remainder = n % 8;\n                result += remainder * Math.pow(8, (n - remainder) \/ 8.0);\n                n = n \/ 8;\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/195","completion":"\n            \/\/ write your code here\n            var count = arr.Count;\n            for (int i = 0; i &lt; count; i++) \n            {\n                if (x == arr[i]) \n                {\n                    return i;\n                }\n            }\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/196","completion":"\n            var filtered_list = test_list.Where(x => x.Count >= K).ToList();\n            return filtered_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/197","completion":"\n            \/\/ write code here\n            \/\/\n            \/\/ you may add additional local variables to hold the results, but they should\n            \/\/ not be changed during the execution of this method\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/198","completion":"\n            \/\/ write code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/199","completion":"\n            \/\/ Create a lambda expression to extract the last 2 digits of given number.\n            Func<int int=\"\"> extractDigits = i => i &lt;&lt; 2;\n            int power = 0;\n\n            \/\/ Create a lambda expression to check if given number is power of 2.\n            Func<int bool=\"\"> isPowerOf2 = i => (i &amp; (i - 1)) == 0;\n            bool isPowerOf2Result = isPowerOf2(n);\n\n            \/\/ Iterate until power of 2 is found.\n            while (!isPowerOf2Result)\n            {\n                power++;\n                isPowerOf2Result = isPowerOf2(n &amp; power);\n            }\n\n            \/\/ Return the power of 2.\n            return power;\n        }","language":"csharp"}
{"task_id":"MBCSP\/200","completion":"\n            var count = 0;\n            var list = new List<int>();\n            for (int i = 0; i < list1.Count; i++)\n            {\n                var pos = i;\n                var max = list1[i];\n                for (int j = i; j < list1.Count; j++)\n                {\n                    if (max &lt; list1[j])\n                    {\n                        max = list1[j];\n                        pos = j;\n                    }\n                }\n                list.Add(pos);\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/201","completion":"\n            var s = lst.Select(x => x);\n            return (s.Count == lst.Count);\n        }","language":"csharp"}
{"task_id":"MBCSP\/202","completion":"\n            \/\/ Create an empty list\n            List<character> list = new List<character>();\n\n            \/\/ Iterate through the string\n            for (int i = 0; i &lt; str1.Length; i++) \n            {\n                \/\/ If the character is an even number, append it to the list\n                if (i % 2 == 0) \n                    list.Add(str1.Substring(i, 1));\n            }\n\n            \/\/ Convert the list to a string\n            return list.ToArray().Select(c => new string(c)).join();\n        }","language":"csharp"}
{"task_id":"MBCSP\/203","completion":" \n            var binaryStr1 = BinaryRepresentation(n1);\n            var binaryStr2 = BinaryRepresentation(n2);\n            \n            var res = 0;\n            foreach (int i in binaryStr1)\n            {\n                if (binaryStr2.Contains(i.ToString()))\n                {\n                    res++;\n                }\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/204","completion":"\n            \/\/ Your code goes here. \n\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/205","completion":"\n            \/\/ write code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/206","completion":"\n            var str1 = test_tup[0];\n            var str2 = \"\";\n            for (int i = 1; i &lt; test_tup.Length; i++)\n            {\n                str2 += test_tup[i];\n            }\n            var result = new List<string>();\n            result.Add(str1);\n            result.Add(str2);\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/207","completion":"\n\n            \/\/ 1. Sort the string.\n            \/\/ 2. Compare the current char with the previous char. If equal, add one to the counter.\n            \/\/ 3. If the current char is different from the previous char, then reset the counter.\n            \/\/ 4. If the counter reaches 2, return the counter.\n            \/\/ 5. Else return -1.\n\n        }","language":"csharp"}
{"task_id":"MBCSP\/208","completion":" \n            bool isDecimal = Regex.IsMatch(num, @\"((?!^)\\d{2}\\.((?!^)\\d{2}))\");\n\n            return isDecimal;\n        }","language":"csharp"}
{"task_id":"MBCSP\/209","completion":"\n            \/\/ TODO: Write your solution here.\n            \/\/ This function can be implemented using just a one line of code.\n            heap.remove((heap.Min(heap)).Index);\n            heap.Add(a);\n\n            return heap;\n        }","language":"csharp"}
{"task_id":"MBCSP\/210","completion":"\n            \/\/ Create a regular expression using the regex class from System.Text.RegularExpressions.\n            \/\/ For this case we use [a-z][a-z][0-9] to ensure that the input string contains only a-z and 0-9 characters.\n            Regex myRegex = new Regex(@\"^(?=.*[a-z])(?=.*[0-9])[a-z][a-z][0-9]$\");\n\n            \/\/ Use the match method to check if the input string matches the regular expression.\n            \/\/ If it matches the string will be considered as valid.\n            if (myRegex.Match(string0)) \n            {\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/211","completion":"\n            return 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/212","completion":"\n            \/\/ find the sum of fourth power of n natural numbers.\n            var x = (1 \/ n + 1) \/ 2;\n            return Math.pow(x, 4);\n        }","language":"csharp"}
{"task_id":"MBCSP\/213","completion":"\n            \/\/ Declare a string array to store the resultant string\n            List<string> test_result = new List<string>();\n            \n            \/\/ Iterate through the first string tuple\n            foreach (var item in test_tup1)\n            {\n                \/\/ Iterate through the second string tuple\n                foreach (var item2 in test_tup2)\n                {\n                    \/\/ Concatenate the strings\n                    test_result.Add(item + item2);\n                }\n            }\n\n            return test_result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/214","completion":"\n            return radian * (180\/Math.PI);\n        }","language":"csharp"}
{"task_id":"MBCSP\/215","completion":"\n            \/\/TODO: Write the function body\n        }","language":"csharp"}
{"task_id":"MBCSP\/216","completion":"\n            int size1 = list1.Count ();\n            int size2 = list2.Count ();\n            \n            \/\/ If the first list is longer than the second, return false.\n            if (size1 > size2)\n            {\n                return false;\n            }\n            \n            \/\/ Go through each element of the first list\n            for (int i = 0; i &lt; size1; i++)\n            {\n                \/\/ If the first element in the first list matches any element in the second,\n                \/\/ we can skip it and continue to the next element\n                if (list2.Count () == 0)\n                {\n                    return true;\n                }\n                \n                \/\/ If the first element in the first list does not match any element in the second,\n                \/\/ we have a mismatch and return false\n                if (!list1[i].Equals (list2[0]))\n                {\n                    return false;\n                }\n                \n                \/\/ If the first element matches the first element in the second","language":"csharp"}
{"task_id":"MBCSP\/217","completion":"\n            \/\/Declare an empty string to hold the answer\n            string answer = \"\";\n\n            \/\/Create a list to hold the characters in the string\n            List<string> characters = new List<string>();\n\n            \/\/Add each character to the list\n            for (char c in str)\n                characters.Add(c);\n\n            \/\/Sort the list in alphabetical order\n            characters.Sort();\n\n            \/\/Add the first and second characters in the list to the answer\n            if (characters.IndexOf(characters[0]) == 0)\n                answer += characters[0];\n            if (characters.IndexOf(characters[1]) == 1)\n                answer += characters[1];\n\n            \/\/Add the next two characters in the list to the answer\n            if (characters.IndexOf(characters[2]) == 2)\n                answer += characters[2];\n\n            \/\/Add the next three characters in the list to the answer\n            if (characters.IndexOf(characters[3]) == 3)\n                answer += characters[3];\n\n            \/\/","language":"csharp"}
{"task_id":"MBCSP\/218","completion":"\n            int C = 0;\n            while (A != B) \n            {\n                if (A < B) \n                {\n                    A++;\n                    C++;\n                } \n                else \n                {\n                    B++;\n                    C++;\n                }\n            }\n            return C;\n        }","language":"csharp"}
{"task_id":"MBCSP\/219","completion":"\n            List<int> result = new List<int>();\n            \n            if (K == 1)\n            {\n                result.Add(test_tup[0]);\n                return result;\n            }\n            \n            List<int> smallTup = new List<int>();\n            List<int> largeTup = new List<int>();\n            List<int> tempSmall = new List<int>();\n            List<int> tempLarge = new List<int>();\n            \n            for (int i = 0; i &lt; test_tup.Count; i++)\n            {\n                if (i >= K)\n                {\n                    tempLarge.Add(test_tup[i]);\n                }\n                else\n                {\n                    tempSmall.Add(test_tup[i]);\n                }\n            }\n            \n            if (tempSmall.Count == 0)\n            {\n                result = tempLarge;\n            }\n            else if (tempLarge.Count == 0)\n","language":"csharp"}
{"task_id":"MBCSP\/220","completion":"\n            Regex rgx = new Regex(\"([,. ]){0,\" + n + \"}\");\n            return rgx.Replace(text, \"$1:\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/221","completion":"\n            if (nums == null || nums.Count == 0)\n            {\n                return -1;\n            }\n\n            int [] sortedNums = Convert.ToInt32Array (nums);\n            Arrays.sort (sortedNums);\n\n            for (int i = 0; i < sortedNums.Length; i++)\n            {\n                if (sortedNums[i] % 2 == 0)\n                {\n                    return sortedNums[i];\n                }\n            }\n\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/222","completion":"\n            \/\/ Get the type of every element in the tuple\n            var data_type = new Dictionary<string object=\"\"> { };\n            foreach (object item in test_tuple)\n            {\n                if (!data_type.ContainsKey(typeof(item)))\n                {\n                    data_type.Add(typeof(item).ToString(), item);\n                }\n                else\n                {\n                    Console.WriteLine(typeof(item));\n                    Console.WriteLine(data_type[typeof(item)].ToString());\n                    return false;\n                }\n            }\n\n            \/\/ If all elements have same data type, return true\n            for (var item in data_type.Values)\n            {\n                Console.WriteLine(item.ToString());\n                Console.WriteLine(data_type[item].ToString());\n                if (data_type[item] != data_type[data_type[item]])\n                {\n                    return false;\n                }\n            }\n            \n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/223","completion":"\n            int middle = (int)Math.floor(n\/2);\n            bool found = false;\n            int count = 0;\n\n            for (int i = 0; i &lt; arr.Count; i++) {\n                if (arr[i] == x)\n                    count++;\n            }\n\n            if (count > middle) {\n                found = true;\n            }\n\n            return found;\n        }","language":"csharp"}
{"task_id":"MBCSP\/224","completion":"\n            if (n == 0)\n                return 0;\n\n            int count = 0;\n            while (n != 0)\n            {\n                n &= (n-1);\n                count++;\n            }\n\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/225","completion":"\n            \/\/ Your code goes here\n            return low;\n        }","language":"csharp"}
{"task_id":"MBCSP\/226","completion":"\n            Regex rx = new Regex(@\"^(.)\\\\1*$\");\n            return rx.Replace(str, \"\", RegexOptions.IgnoreCase);\n        }","language":"csharp"}
{"task_id":"MBCSP\/227","completion":" \n            return (a < b ? (a < c ? a : c) : (b < c ? b : c)); \n        }","language":"csharp"}
{"task_id":"MBCSP\/228","completion":"\n            \/\/ Create a bitset with the given range\n            BitSet bits = BitSet.Create (l, r);\n            bits.Set (l, r);\n\n            \/\/ Iterate over the bits and compare\n            for (int i = 0; i < 32; i++)\n            {\n                \/\/ Check if the bit is set\n                if (bits.get_Item (i))\n                {\n                    \/\/ If it is set, return false.\n                    return false;\n                }\n            }\n\n            \/\/ If all bits are set, return true.\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/229","completion":"\n            \/\/Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/230","completion":"\n            \/\/ write your code here\n            return str1.Replace(\" \", char);\n        }","language":"csharp"}
{"task_id":"MBCSP\/231","completion":"\n            return tri.Aggregate<int>((a, b) => a + b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/232","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/233","completion":"\n            double area = 0.0;\n            area = (2 * Math.PI * r * h);\n            return area;\n        }","language":"csharp"}
{"task_id":"MBCSP\/234","completion":"\n            \/\/Your code goes here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/235","completion":"\n            \/\/ write your code here\n            var result = 0;\n\n            if (n >= 0)\n                result = n & (0xffffffff - 1);\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/236","completion":"\n            int count = 0;\n            int[][] triangle = new int[N][N];\n            int[][] temp = new int[N][N];\n            for (int i = 0; i < triangle.Length; i++)\n                triangle[i][0] = i + 1;\n            for (int i = 0; i < triangle.Length; i++)\n                for (int j = 0; j < triangle.Length - i; j++)\n                    triangle[i][j + 1] = triangle[i][j] + triangle[i][j + 1];\n            for (int i = 0; i < triangle.Length; i++)\n                for (int j = 0; j < triangle.Length - i; j++)\n                    temp[j][i] = triangle[i][j];\n            for (int i = 0; i < triangle.Length; i++)\n                for (int j = 0; j < triangle.Length - i","language":"csharp"}
{"task_id":"MBCSP\/237","completion":"\n            \/\/ create a dictionary to store the occurrence of each tuple\n            Dictionary<List<int>, int> occurrence_dict = new Dictionary<List<int>, int>();\n            \n            \/\/ for each tuple in the list\n            foreach (var tuple in test_list)\n            {\n                \/\/ for each element in the tuple\n                foreach (var elem in tuple)\n                {\n                    \/\/ if the dictionary contains the element\n                    if (occurrence_dict.ContainsKey(elem))\n                    {\n                        \/\/ increment the occurrence by 1\n                        occurrence_dict[elem] += 1;\n                    }\n                    \/\/ if the dictionary does not contain the element\n                    else\n                    {\n                        \/\/ add the element to the dictionary\n                        occurrence_dict.Add(elem, 1);\n                    }\n                }\n            }\n            \n            \/\/ return the dictionary of tuple to occurrences\n            return occurrence_dict;\n        }","language":"csharp"}
{"task_id":"MBCSP\/238","completion":"\n            return Regex.Matches(str, \"[a-zA-Z]+\").Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/239","completion":"\n            if (n == 0) { return 1; }\n            return ((GetTotalNumberOfSequences(m - 2, n - 1) + GetTotalNumberOfSequences(m - 1, n - 1)) % 1000000007);\n        }","language":"csharp"}
{"task_id":"MBCSP\/240","completion":"\n            \/\/Write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/241","completion":"\n            List<List<List<string>>> arr = new List<List<List<string>>>();\n            for (int i = 0; i < m; i++) \n            {\n                List<List<string>> temp = new List<List<string>>();\n                for (int j = 0; j < n; j++) \n                {\n                    List<string> temp2 = new List<string>();\n                    for (int k = 0; k < o; k++) \n                    {\n                        temp2.Add(\"*\");\n                    }\n                    temp.Add(temp2);\n                }\n                arr.Add(temp);\n            }\n            return arr;\n        }","language":"csharp"}
{"task_id":"MBCSP\/242","completion":"\n            return str1.Length;\n        }","language":"csharp"}
{"task_id":"MBCSP\/243","completion":"\n            var map = new Dictionary<object object=\"\">();\n            foreach (var x in lst)\n            {\n                var key = x[0];\n                var val = x[1];\n                if (map.ContainsKey(key))\n                {\n                    map[key].Add(val);\n                }\n                else\n                {\n                    map[key] = new List<object>();\n                    map[key].Add(val);\n                }\n            }\n            var arr = Enumerable.Range(1, lst.Count)\n                .Select(i => lst[i])\n                .Select(x => (map[x.First()] as List<object>).ElementAt(0))\n                .ToArray();\n            return arr;\n        }","language":"csharp"}
{"task_id":"MBCSP\/244","completion":"\n            if (N == 0)\n                return 0;\n\n            if (N < 0)\n                return 0;\n\n            return (Math.abs(N) - 1) * Math.abs(N) + 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/245","completion":"\n            int[][] dp = new int[n][n];\n            for (int gap = 0; gap &lt; n; ++gap)\n                dp[0][gap] = arr[0] + gap;\n            for (int gap = 1; gap &lt; n; ++gap) {\n                for (int i = 0; i &lt; n - gap; ++i) {\n                    dp[i][gap] = dp[i][gap - 1] + arr[i + gap] + gap;\n                    for (int j = i + 1; j &lt; n - gap; ++j) {\n                        if (arr[j + gap] >= arr[i + gap])\n                            dp[i][gap] = Math.max(dp[i][gap], dp[j][gap - 1] + arr[i + gap] + gap);\n                    }\n                }\n            }\n            return","language":"csharp"}
{"task_id":"MBCSP\/246","completion":"\n            int x = number, y = 1;\n            do \n            {\n                if (x < 0) x += number;\n                double t = x;\n                x = (x + y\/x) \/ 2.0;\n                y = t;\n            } while (x != y);\n            return x;\n        }","language":"csharp"}
{"task_id":"MBCSP\/247","completion":"\n            int i = 0, j = str.Length - 1, count = 0, start = 0, end = 0;\n            string[] p = new string[str.Length];\n            while (i < str.Length && j > 0)\n            {\n                while (i < str.Length && j > 0 && str[i] != str[j])\n                    j--;\n                if (i < str.Length - 1)\n                {\n                    p[i++] = str[j];\n                }\n                else\n                {\n                    p[i++] = str[j];\n                    end = i;\n                    i = j;\n                }\n                while (i < str.Length && j > 0 && str[i] == str[j])\n                    j--;\n                if (j == 0 || i == str.Length)\n                    break;\n                if (i == 0","language":"csharp"}
{"task_id":"MBCSP\/248","completion":"\n            double harmonicSum = 0;\n            for (int i = 0; i <= n - 1; i++)\n                harmonicSum += 1.0 \/ (i + 1);\n            return harmonicSum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/249","completion":"\n            var result = new List<int>();\n\n            foreach (var element_num1 in array_nums1)\n            {\n                if (array_nums2.Any(element_num2 => element_num1 == element_num2))\n                {\n                    result.Add(element_num1);\n                }\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/250","completion":"\n            int count = 0;\n            foreach (int val in tup)\n                if (val == x) count++;\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/251","completion":"\n            \/\/Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/252","completion":"\n            \/\/Create a list of size of numbers\n            List<double> res = new List<double> ((int)Math.pow(numbers, 2));\n\n            \/\/Iterate through numbers, convert them to polar coordinates and insert into the list\n            for (int i = 0; i &lt; numbers; i++)\n            {\n                double theta = (double)i * 2.0 * Math.PI \/ (double)numbers;\n                double x = (double)i;\n                double y = Math.sqrt(numbers) * Math.cos(theta);\n\n                res[i] = new double[] {x, y};\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/253","completion":"\n            int counter = 0;\n            foreach (var item in list1)\n            {\n                if (item is object && item is int)\n                    counter++;\n            }\n            return counter;\n        }","language":"csharp"}
{"task_id":"MBCSP\/254","completion":"\n            List<string> result = new List<string>();\n            var regex = new Regex(@\"\\w*a\\w*\");\n            foreach (Match match in regex.Matches(text))\n            {\n                result.Add(match.Value);\n            }\n            regex = new Regex(@\"\\w*e\\w*\");\n            foreach (Match match in regex.Matches(text))\n            {\n                result.Add(match.Value);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/255","completion":"\n            List<list>> result = new List<list>>();\n\n            \/\/ 1. Start with first element\n            List<string> newList = new List<string>();\n            newList.Add(l[0]);\n            result.Add(newList);\n\n            \/\/ 2. Get remaining elements and add to the combinations for each remaining element\n            for (int i = 1; i &lt; l.Length; i++)\n            {\n                \/\/ Get remaining elements\n                string[] remaining = new List<string>().ToArray();\n                foreach (string e in l.Take(i))\n                    remaining.Add(e);\n\n                \/\/ For each remaining element add it to the result\n                foreach (string r in result)\n                {\n                    \/\/ Get the new combinations for this element\n                    List<string> newCombinations = new List<string>();\n                    foreach (string c in remaining)\n                        newCombinations.Add(r.Add(c));\n\n                    \/\/ Add to result\n                    result.Add(newCombinations);\n                ","language":"csharp"}
{"task_id":"MBCSP\/256","completion":"\n            var result = 0;\n            \/\/Your code goes here\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/257","completion":"\n            int temp = a;\n            a = b;\n            b = temp;\n            List<int> nums = new List<int> {a, b};\n            return nums;\n        }","language":"csharp"}
{"task_id":"MBCSP\/258","completion":"\n            List<int> odd = array_nums.Select (n => n % 2 != 0);\n            return odd.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/259","completion":"\n            \/\/Initialize a list to store the maximized element tuples.\n            List<List<int>> max_element = new List<List<int>>();\n            \/\/Define the maximum value.\n            int maxValue = test_tup1.ElementAt(0).ElementAt(0) < test_tup2.ElementAt(0).ElementAt(0) ? test_tup1.ElementAt(0).ElementAt(0) : test_tup2.ElementAt(0).ElementAt(0);\n            \/\/Define the maximum index.\n            int maxIndex = test_tup1.ElementAt(0).ElementAt(0) < test_tup2.ElementAt(0).ElementAt(0) ? 0 : 1;\n            \/\/For each element in the first tuple.\n            for (int i = 0; i < test_tup1.Count; i++) \n            {\n                \/\/Compare the value with each element in the second tuple.\n                for (int j = 0; j < test_tup2.Count; j++) \n               ","language":"csharp"}
{"task_id":"MBCSP\/260","completion":"\n            var primes = \n            [\n                2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n            ];\n            var primeSet = new HashSet<int> { primes };\n\n            var result = 0;\n            var index = 1;\n            while (n > index) {\n                var prime = primes[index];\n                var factor = Math.floorDiv(n, prime);\n                if (factor > 0 &amp;&amp; primeSet.Contains(prime)) {\n                    result = prime;\n                    index = factor;\n                }\n                else\n                    index++;\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/261","completion":"\n            List<int> result = new List<int>();\n            for (int i = 0; i &lt; test_tup1.Count; i++)\n            {\n                result.Add(test_tup1[i] \/ test_tup2[i]);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/262","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/263","completion":"\n            \/\/Create a dictionary for the merge result.\n            Dictionary<string, int> MergeResult = new Dictionary<string, int>();\n            \/\/Add all the key-value pairs of d1 to MergeResult.\n            foreach (KeyValuePair<string, int> kvp1 in d1)\n            {\n                MergeResult[kvp1.Key] = kvp1.Value;\n            }\n            \/\/Add all the key-value pairs of d2 to MergeResult.\n            foreach (KeyValuePair<string, int> kvp2 in d2)\n            {\n                if (!MergeResult.ContainsKey(kvp2.Key))\n                    MergeResult[kvp2.Key] = kvp2.Value;\n                else\n                {\n                    if (MergeResult[kvp2.Key] > kvp2.Value)\n                        MergeResult[kvp2.Key] = kvp2.Value;\n                }\n            }\n            \/\/Return the result.\n            return MergeResult;\n        }","language":"csharp"}
{"task_id":"MBCSP\/264","completion":"\n            int dog_years = 0;\n\n            if (h_age >= 0 && h_age <= 2) \n            {\n                dog_years = 15;\n            }\n\n            else if (h_age >= 3 && h_age <= 12) \n            {\n                dog_years = 10;\n            }\n\n            else if (h_age >= 13 && h_age <= 19) \n            {\n                dog_years = 5;\n            }\n\n            else if (h_age >= 20 && h_age <= 40) \n            {\n                dog_years = 0;\n            }\n\n            else if (h_age >= 41 && h_age <= 60) \n            {\n                dog_years = -10;\n            }\n\n            else if (h_age >= 61 && h_age <= 80) \n            {\n                dog_years =","language":"csharp"}
{"task_id":"MBCSP\/265","completion":"\n            var splitList = new List<object>();\n            if (step == 1)\n                return S;\n\n            var index = 0;\n            while (index &lt; S.Count)\n            {\n                var subList = new List<object>();\n                for (int i = index; i &lt; index + step &amp;&amp; i &lt; S.Count; i++)\n                    subList.Add(S[i]);\n                index += step;\n                splitList.Add(subList);\n            }\n\n            return splitList;\n        }","language":"csharp"}
{"task_id":"MBCSP\/266","completion":"\n            int area=0;\n            for(int i=1;i<=l;i++)\n                area=area+(i*i*i);\n            return area;\n        }","language":"csharp"}
{"task_id":"MBCSP\/267","completion":"\n            \/\/ Create a new list to hold the squares of the first n natural numbers\n            var squares = new List<int> ();\n\n            \/\/ Iterate the natural numbers starting from 1 and the square of each number.\n            \/\/ Add the square of each number to the list.\n            for (int i = 1; i &lt;= n; i++)\n            {\n                squares.Add(i * i);\n            }\n\n            \/\/ Get the sum of the squares in the list.\n            return Squares.Sum(squares);\n        }","language":"csharp"}
{"task_id":"MBCSP\/268","completion":"\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/269","completion":"\n            \/\/ [System.Runtime.InteropServices.Marshal]\n            \/\/ [System.Runtime.InteropServices.Marshal.GetType]\n            \/\/ [System.Runtime.InteropServices.Marshal.SizeOf]\n            \/\/ [System.Runtime.InteropServices.Marshal.ReadInt32]\n            \/\/ [System.Runtime.InteropServices.Marshal.ReadObject]\n            \/\/ [System.Runtime.InteropServices.Marshal.ReadInt32]\n            \/\/ [System.Runtime.InteropServices.Marshal.ReadInt32]\n            \/\/ [System.Runtime.InteropServices.Marshal.ReadInt32]\n            \/\/ [System.Runtime.InteropServices.Marshal.ReadInt32]\n            \/\/ [System.Runtime.InteropServices.Marshal.ReadInt32]\n            \/\/ [System.Runtime.InteropServices.Marshal.ReadInt32]\n            \/\/ [System.Runtime.InteropServices.Marshal.ReadInt32]\n            \/\/ [System.Runtime.Inter","language":"csharp"}
{"task_id":"MBCSP\/270","completion":"\n            var evenPositions = arr.Skip(n).Select(x => x % 2 == 0);\n            return evenPositions.Sum(x => x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/271","completion":"\n            \/\/ create a list of all even natural numbers\n            List<int> myList = from i = 1 to n step 2 into List<int>;\n\n            \/\/ create a list of first n even natural numbers\n            List<int> myNaturalList = myList\n                .Select(x => x * x)\n                .ToList();\n\n            \/\/ create a list of fifth power of first n even natural numbers\n            List<int> myFifthPowerList = myNaturalList\n                .SelectMany(x => x.Select(y => y * y * y * y * y))\n                .ToList();\n\n            \/\/ sum fifth power of first n even natural numbers\n            return myFifthPowerList.Sum(x => x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/272","completion":"\n            \/\/Your code goes here\n            List<int> results = new List<int>();\n            foreach (var record in test_list)\n            {\n                results.Add(record.Last());\n            }\n            return results;\n        }","language":"csharp"}
{"task_id":"MBCSP\/273","completion":"\n            \/\/ Create a dummy list to store results.\n            List<int> result = new List<int>();\n\n            \/\/ Find the length of the list.\n            int length_of_test_tup1 = test_tup1.Count;\n            int length_of_test_tup2 = test_tup2.Count;\n\n            \/\/ If the length is not same then return -1.\n            if (length_of_test_tup1 != length_of_test_tup2)\n            {\n                return result;\n            }\n\n            \/\/ Iterate for the length.\n            for (int i = 0; i &lt; length_of_test_tup1; i++) \n            {\n                \/\/ Add the corresponding values in test_tup2 in result.\n                result.Add(test_tup2[i]);\n                \/\/ Substract the corresponding values in test_tup1 in result.\n                result.Add(test_tup1[i]);\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/274","completion":"\n            if (n < 2)\n                return n;\n            else \n                return (EvenBinomialCoeffSum(n-1) + EvenBinomialCoeffSum(n-2) + \n                        EvenBinomialCoeffSum(n-3) + EvenBinomialCoeffSum(n-4));\n        }","language":"csharp"}
{"task_id":"MBCSP\/275","completion":"\n            return (a.Remove((n+m) % a.Count).Index).Value;\n        }","language":"csharp"}
{"task_id":"MBCSP\/276","completion":"\n            \/\/ TODO: Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/277","completion":"\n            Dictionary<string, int> result = new Dictionary<string, int>();\n            foreach (KeyValuePair<string, int> item in dict)\n            {\n                if (item.Value == n)\n                {\n                    result.Add(item.Key, item.Value);\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/278","completion":"\n            \/\/ Tuple<T> \n            \/\/ Tuple<object>\n            \/\/ List<Tuple<object>> \n            \/\/ List<object>\n            \/\/ object \n            \/\/ object \n\n            \/\/ Tuple<object>\n            Tuple<object> tup = new Tuple<object> (test_tup);\n            \/\/ List<object>\n            List<object> lst = new List<object> ();\n            \/\/ Tuple<object> \n            \/\/ Tuple<object>\n            \/\/ List<Tuple<object>> \n            \/\/ List<object>\n            \/\/ object \n            \/\/ object \n\n            for (Tuple<object> t : test_tup) \n            {\n                lst.Add (t);\n            }\n\n            Tuple<object> tmp = new Tuple<object> ();\n            int cnt = 0;\n            for (int i = 0; i &lt; test_tup.Count (); i++) \n            {\n                tmp = test_tup[i];\n                int index = lst","language":"csharp"}
{"task_id":"MBCSP\/279","completion":"\n            \/\/ code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/280","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/281","completion":"\n            \/\/ write your code here.\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/282","completion":"\n            return nums1.\n                Select ((n, i) => nums2[i] - n).\n                ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/283","completion":"\n            \/\/ Count the frequency of each digit.\n            var frequency = [int] { 0 };\n            foreach (var digit in n.ToString())\n            {\n                frequency[digit]++;\n            }\n\n            \/\/ Compare the frequency of each digit with the digit itself.\n            return frequency.Any(x => x <= frequency[x]);\n        }","language":"csharp"}
{"task_id":"MBCSP\/284","completion":"\n            int result = 0;\n            foreach (var item in list)\n            {\n                if (item == element) result++;\n            }\n            return result == list.Count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/285","completion":"\n            Regex re = new Regex (\"a[ab]\\\\2{2,3}\");\n            return (string) re.Matches(text) ? \"Found a match!\" : \"Not matched!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/286","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/287","completion":"\n            var sq = n * n;\n            return sq;\n        }","language":"csharp"}
{"task_id":"MBCSP\/288","completion":"\n            int[] A = Convert.ToInt32Array(arr);\n            \/\/ To count the number of element having modular inverse under given prime number p.\n            int[] m = new int[N + 1];\n            \/\/ To store all the element in the array.\n            List<int> modArray = new List<int>();\n            \n            \/\/ Counting number of element having modular inverse under given prime number p.\n            for (int i = 0; i &lt; A.Length; i++) \n            {\n                int a = A[i];\n                if (m[a] == 0) \n                {\n                    m[a] = 1;\n                } \n                else \n                {\n                    m[a]++;\n                }\n            }\n\n            \/\/ Applying formula to count the number of element having modular inverse under given prime number p.\n            for (int j = 2; j &lt;= N; j++) \n            {\n                if (m[j] ==","language":"csharp"}
{"task_id":"MBCSP\/289","completion":"\n            if (N % 4 != 0)\n            {\n                return 0;\n            }\n            if (N % 100 == 0 && N % 400 != 0)\n            {\n                return 0;\n            }\n            return (N \/ 100) + 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/290","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/291","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/292","completion":"\n            if (n == 0) return 0;\n            if (m == 0) return 0;\n            int quotient = n \/ m;\n            return n == m ? quotient : quotient + Find(n - m * quotient, m);\n        }","language":"csharp"}
{"task_id":"MBCSP\/293","completion":"\n            return 1.0 \/ 2 * Math.sqrt((w * h) * (w * h - h * w)) ;\n        }","language":"csharp"}
{"task_id":"MBCSP\/294","completion":"\n            \/\/ write code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/295","completion":"\n            var divisor = 1;\n            var sum = 0;\n\n            while (number \/ divisor != 0)\n            {\n                sum += (number \/ divisor);\n                divisor++;\n            }\n\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/296","completion":"\n            int i, j, invCount = 0;\n            int[] aux = new int[n];\n\n            for (i = 0; i &lt; n-1; i++) \n            {\n                for (j = i+1; j &lt; n; j++)\n                {\n                    if (arr[i] &lt; arr[j])\n                    {\n                        aux[j-1] = arr[i];\n                        invCount++;\n                    }\n                    else \n                    {\n                        break;\n                    }\n                }\n            }\n\n            arr.CopyTo(aux, i);\n\n            return invCount;\n        }","language":"csharp"}
{"task_id":"MBCSP\/297","completion":"\n            List<object> list2 = new List<object>();\n            List<object> temp1 = list1;\n            List<int> temp2 = new List<int>();\n            while (temp1.Count > 0) \n            {\n                Object item = temp1.GetAt(0);\n                if (item.IsGenericType)\n                {\n                    \/\/ If the item is a generic type, check whether it is a generic type.\n                    list2.Add(item);\n                }\n                else\n                {\n                    \/\/ The item is an object.\n                    list2.Add(item);\n                    temp1.RemoveAt(0);\n                }\n            }\n            if (list2.Count > 0) \n            {\n                temp2 = list2;\n            }\n            return temp2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/298","completion":"\n            List<object> r = new List<object>();\n            foreach (var i = 0; i &lt; l1.Count; i++)\n            {\n                if (l2.Any(x => l1[i] == x))\n                    r.Add(l1[i]);\n            }\n\n            return r;\n        }","language":"csharp"}
{"task_id":"MBCSP\/299","completion":"\n            return stdata.Aggregate((t1, t2) => t1.CompareTo(t2) == 1 ? t1 : t2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/300","completion":"\n            var start = 0;\n            var end = (1 << n) - 1;\n            var bits = 0;\n            double sum = 0.0;\n\n            var nums = 1.0;\n            var res = 0.0;\n            while (start <= end) \n            {\n                sum = 0;\n                bits = 0;\n                for (int i = start; i <= end; i++)\n                {\n                    bits = bits << 1;\n                    if ((i & 1) == 1)\n                        bits = bits | 1;\n                    sum += bits;\n                }\n                res += (1.0 \/ nums) * Math.log(sum);\n                nums++;\n                start++;\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/301","completion":"\n            \/\/ write your code here.\n            if (d.Count == 0) return 0;\n            if (d.Count == 1) return 1;\n\n            int depth = 0;\n            foreach (var pair in d.Keys) {\n                int temp = DictDepth(d[pair]);\n                if (temp > depth)\n                    depth = temp;\n            }\n\n            return depth + 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/302","completion":"\n            if (n <= 0) throw new ArgumentException();\n            int mask = 1;\n            int max = 0;\n            for (int i = 0; i < 32; i++)\n            {\n                int bit = (n & mask) > 0;\n                if (bit == 1) max = i;\n                mask = mask << 1;\n            }\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/303","completion":"\n            List<int> b = a.Reverse();\n            int count = 0;\n            for (int i = 0; i &lt; n; i++) {\n                if (a[i] &lt; b[i])\n                    count++;\n            }\n            return count == n - 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/304","completion":"\n            var first = ranges.FirstOrDefault(r => r.FirstOrDefault(i => i == rotations));\n            var last = ranges.FirstOrDefault(r => r.LastOrDefault(i => i == rotations));\n            if (first.Count == 0 || last.Count == 0)\n                return -1;\n            var index_start = first.FirstOrDefault(i => i == index);\n            var index_end = last.LastOrDefault(i => i == index);\n            return arr.ElementAt(index_end + 1 - index_start);\n        }","language":"csharp"}
{"task_id":"MBCSP\/305","completion":"\n            \/\/ write your code here\n            List<string> result = new List<string>();\n            \n            for (String word : words) {\n                if (word.StartsWith(\"p\")){\n                    result.Add(word);\n                }\n            }\n            \n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/306","completion":"\n            \/\/ write your code here\n            if(k > n - index)\n                return 0;\n\n            int[] prefix = new int[n];\n\n            prefix[index] = a.get(index);\n            for (int i = index + 1; i < n; i++) {\n                prefix[i] = prefix[i - 1] + a.get(i);\n            }\n\n            int max = prefix[n - 1];\n            for (int i = 0; i < n - k; i++) {\n                int current = 0;\n                int last = 0;\n\n                for (int j = i; j < i + k; j++) {\n                    last = current;\n                    current = prefix[j] - prefix[j - i];\n                }\n                if (current > max)\n                    max = current;\n            }\n\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/307","completion":"\n            \/\/Start typing your Java solution below\n            \/\/Do not write main() function\n            List<object> tupley = new List<object>();\n            tupley = tuplex.Select(o => o[m]);\n            tupley.Insert(n, tuplex[m]);\n            return tupley;\n            \/\/End typing your Java solution below\n        }","language":"csharp"}
{"task_id":"MBCSP\/308","completion":"\n            \/\/ Write your code here.\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/309","completion":" \n            return Math.Max (a, b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/310","completion":"\n            \/\/ Create a list to store the results.\n            List<string> resList = new List<string>();\n\n            \/\/ Loop through each character in the given string.\n            foreach (char c in str1)\n            {\n                \/\/ If the character is a digit, add the character to the result list.\n                if (c >= '0' &amp;&amp; c &lt;= '9')\n                    resList.Add(c.ToString());\n\n                \/\/ Otherwise, it is a letter, so add the corresponding value.\n                else\n                    resList.Add(Character.GetValue(c));\n            }\n\n            return resList;\n        }","language":"csharp"}
{"task_id":"MBCSP\/311","completion":"\n            \/\/ Get the rightmost unset bit position:\n            int r = Integer.SIZE - 1 - Integer.numberOfLeadingZeros(n);\n\n            \/\/ Clear all bits to the right of r:\n            n &= ~(1 << r);\n\n            return n;\n        }","language":"csharp"}
{"task_id":"MBCSP\/312","completion":"\n            double volume = (Math.PI * r * r) * h \/ 3;\n\n            return volume;\n        }","language":"csharp"}
{"task_id":"MBCSP\/313","completion":"\n            var list = list1.Where(i => i > 0).ToList();\n            return list.OrderBy (i => i).Select (i => i).Count ();\n        }","language":"csharp"}
{"task_id":"MBCSP\/314","completion":"\n            \/\/TODO\n        }","language":"csharp"}
{"task_id":"MBCSP\/315","completion":"\n            var arr = str.Split (new string [2]);\n            int max = 0;\n            string ret = \" \";\n            foreach (var s in arr)\n            {\n                if (s.Length % 2 == 0 && s.Length > max)\n                {\n                    max = s.Length;\n                    ret = s;\n                }\n            }\n\n            return ret;\n        }","language":"csharp"}
{"task_id":"MBCSP\/316","completion":"\n            \/\/ Your code here\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/317","completion":"\n            List<object> result = new List<object>();\n            List<object> current = new List<object>();\n            int count = 0;\n\n            for (int i = 0; i &lt; alist.Length; i++)\n            {\n                if (i > 0 &amp;&amp; alist[i - 1] == alist[i])\n                {\n                    count += 1;\n                }\n                else\n                {\n                    current.Add(count);\n                    current.Add(alist[i]);\n                    count = 1;\n                }\n                result.Add(current.ToArray());\n                current = new List<object>();\n            }\n\n            return result.ToArray();\n        }","language":"csharp"}
{"task_id":"MBCSP\/318","completion":"\n            \/\/Create a list of cuboids (each cuboid is a 3-tuple consisting of the sum of the sides of the cuboid)\n            List<tuple int=\"\">> cuboids = new List<tuple int=\"\">>()\n            {\n                new Tuple<int int=\"\">(s, s, s) { Value = 1 },\n                new Tuple<int int=\"\">(s, s, s) { Value = 6 },\n                new Tuple<int int=\"\">(s, s, s) { Value = 12 },\n                new Tuple<int int=\"\">(s, s, s) { Value = 8 },\n                new Tuple<int int=\"\">(s, s, s) { Value = 4 }\n            };\n            \/\/Create a list of cuboids (each cuboid is a 3-tuple consisting of the sum of the sides of the cuboid)\n            List<tuple int=\"\">> cuboids1 = new List<tuple int=\"\">>()\n            {\n                new Tuple<int int=\"\">(s, s, s) { Value = ","language":"csharp"}
{"task_id":"MBCSP\/319","completion":"\n            List<string> result = new List<string>();\n            \/\/using (Regex regex = new Regex(new Regex.Isc() { \n            \/\/    Text = \"\\w{5}\" \n            \/\/}));\n            using (Regex regex = new Regex(new Regex.Isc() {\n                \/\/\/ <summary> \n                \/\/\/ Regex expression to match 5 characters long word. \n                \/\/\/ <\/summary>\n                \/\/\/ <param name=\"Text\"\/>\n                Text = \"^\\\\w{5}$\"\n            }));\n            foreach (Match match in regex.Matches(text))\n            {\n                result.Add(match.Value);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/320","completion":"\n            int Sum = 0;\n            int SumSquare = 0;\n\n            for (int i = 0; i < n; i++)\n            {\n                Sum += i;\n                SumSquare += i * i;\n            }\n            return (Sum * Sum) - SumSquare;\n        }","language":"csharp"}
{"task_id":"MBCSP\/321","completion":"\n            if (s.Length == 0) return s;\n            var temp = s.Substring(0, 9);\n            var p = (int)temp.Concat(temp.Substring(0, 9)).ToInt32();\n            return p == (int)s ? temp.Substring(0, 6) : s;\n        }","language":"csharp"}
{"task_id":"MBCSP\/322","completion":"\n            var minPos = 0;\n            var minVal = list1[0];\n            for (int i = 0; i &lt; list1.Count; i++)\n            {\n                if (list1[i] &lt; minVal)\n                {\n                    minVal = list1[i];\n                    minPos = i;\n                }\n            }\n\n            var result = new List<int>();\n            result.Add(minPos);\n\n            for (int i = 0; i &lt; list1.Count; i++)\n            {\n                if (i != minPos &amp;&amp; list1[i] == minVal)\n                {\n                    result.Add(i);\n                }\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/323","completion":"\n            List<int> result = new List<int>();\n            if (arr == null || arr.Count == 0)\n                return result;\n\n            IntPointer iPtr = new IntPointer(arr.Length);\n            int[] ptrs = new int[arr.Length];\n            int max = 0;\n            for (int i = 0; i < arr.Length; i++)\n            {\n                if (arr[i] > 0)\n                {\n                    iPtr.set(i, arr[i]);\n                    ptrs[i] = i + 1;\n                }\n                else if (arr[i] < 0)\n                {\n                    iPtr.set(i, n + arr[i]);\n                    ptrs[i] = i + 1;\n                }\n                else\n                {\n                    iPtr.set(i, 0);\n                    ptrs[i] = i + 1;\n                }\n                if (","language":"csharp"}
{"task_id":"MBCSP\/324","completion":"\n            var result = test_tuple.Select(x => x.Concat(x)).ToList();\n            var sum = result.Select(x => x[0]).Aggregate((a, b) => a + b, 0);\n            \n            return test_tuple.Select(x => x[0] == sum ? x[1] : 0).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/325","completion":"\n            \/\/ Create an empty stack.\n            Stack<integer> stack = new Stack<integer>();\n\n            \/\/ Create a set of numbers from 1 through n.\n            Set<integer> set = new HashSet<integer>(n);\n            for (int i = 1; i &lt;= n; i++) \n            {\n                set.Add(i);\n            }\n\n            \/\/ While the set is not empty, pop off the top element and push it into the stack.\n            \/\/ If the popped element is a square, add it to the minimum squares.\n            while (set.Count != 0)\n            {\n                stack.Push(set.Pop());\n                if (IsSquare(stack.Top()))\n                {\n                    return 1 + stack.Size();\n                }\n            }\n\n            \/\/ If the stack is empty, then there are no squares whose sum is equal to the given number.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/326","completion":"\n            var results = test_list.Aggregate (x => new\n                {\n                    test = x,\n                    counter = 0\n                });\n            return results.OrderByDescending(x => x.counter).SingleOrDefault().test;\n        }","language":"csharp"}
{"task_id":"MBCSP\/327","completion":"\n            \/\/Write your code here.\n            return (IsoscelesTriangle(x, y, z) || IsoscelesTriangle(y, z, x) || IsoscelesTriangle(z, x, y));\n        }","language":"csharp"}
{"task_id":"MBCSP\/328","completion":"\n            List<int> list2 = new List<int>();\n            int i;\n            int j;\n            if (m != 0) \n            {\n                for (i = 0; i &lt; n; i++) \n                {\n                    list2.Add(list1[i]);\n                }\n                for (i = n; i &lt; m * n; i++) \n                {\n                    list2.Add(list1[i]);\n                }\n                for (i = 0; i &lt; m * n; i++) \n                {\n                    list1[i] = list2[i];\n                }\n            }\n            return list1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/329","completion":"\n            return (int)list.Aggregate (0, (i,j) => i+j<0?1:0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/330","completion":"\n            List<string> result = new List<string>();\n            result = Regex.Matches(text, @\"\\b[a-z]{3,5}\\b\").ToList();\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/331","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/332","completion":"\n            \/\/ TODO: Write your code here.\n        }","language":"csharp"}
{"task_id":"MBCSP\/333","completion":"\n\n            sub_li.Sort(x => x[1], true);\n\n            return sub_li;\n        }","language":"csharp"}
{"task_id":"MBCSP\/334","completion":"\n            if (a + b <= c || a + c <= b || c + b <= a)\n                return false;\n            else\n                return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/335","completion":"\n            \/\/ return 0; \/\/ TODO: Your code goes here\n            \/\/ Initialize the sum\n            var sum = 0;\n            \/\/ Initialize the variables for iteration\n            var i = 0;\n            var j = 0;\n            \/\/ Loop while i is less than n \n            while (i < n) \n            {\n                \/\/ Calculate the new value\n                var value = (a + (i * d));\n                \/\/ Calculate the next value for i\n                j = i + 1;\n                var next = (a + (j * d));\n                \/\/ Calculate the difference\n                var difference = (value - next);\n                \/\/ Add the difference to the sum\n                sum = sum + difference;\n                \/\/ Increment the index\n                i = i + 1;\n            }\n            \/\/ Return the sum\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/336","completion":"\n            bool MonthCheck = true;\n            \/\/ Create a list of months using a list of months\n            var MonthList = new[] \n            { \n                \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" \n            };\n\n            \/\/ Search for the given month name in the list of months\n            MonthList.FirstOrDefault(x => x == monthname1.ToLower(), out MonthFound);\n\n            if (MonthFound != MonthList.LastOrDefault(x => x == monthname1.ToLower(), out MonthFound))\n                MonthCheck = false;\n\n            \/\/ If the month is in the list of months, check whether the given month has 28 or not\n            if (MonthFound == true && MonthList.LastOrDefault(x => x == monthname1.ToLower(), out MonthFound) == monthname1.ToLower())\n                MonthCheck = (int)Math.","language":"csharp"}
{"task_id":"MBCSP\/337","completion":"\n            Regex regex = new Regex(string.Empty);\n            regex.IsCaseSensitive = false;\n\n            regex.Matches(text, $\"[^\\\\s]+$\");\n            string result = regex.Matches(text, $\"[^\\\\s]+$\").Count > 0 ? \"Found a match!\" : \"Not matched!\";\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/338","completion":"\n            \/\/ 1. Create a regular expression to match the first and last characters.\n            Regex rx = new Regex (\"[a-zA-Z]\");\n            var first = s.Match(rx).LastOrDefault();\n            var last = s.Substring(0, 1);\n            var end = new Regex (\"[a-zA-Z]$\");\n\n            \/\/ 2. Use a regular expression to match substrings of s with \n            \/\/    the same first and last characters.\n            var result = new List<int> ();\n            var result = Regex.Matches(s, \n                Regex.Concat(first, new Regex (\"[^\" + first + last + \"]\"), last), \n                RegexOptions.IgnoreCase | RegexOptions.Multiline).ToList<int>();\n\n            return result.Count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/339","completion":"\n            \/\/ Initialize the variables.\n            int count = 0;\n            int divisor = 1;\n\n            \/\/ Find the greatest divisor in the interval.\n            while (x % divisor != 0 && y % divisor != 0)\n            {\n                divisor++;\n            }\n\n            \/\/ If the divisor is a multiple of both x and y, \n            \/\/ add 1 to the count.\n            if (x % divisor == 0 && y % divisor == 0)\n            {\n                count = divisor;\n            }\n\n            \/\/ Return the count.\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/340","completion":"\n            var min = Collections.Min(lst.Where(n => n > 0).ToList());\n            return min + 3 * min;\n        }","language":"csharp"}
{"task_id":"MBCSP\/341","completion":"\n            \/\/ your code goes here\n        }","language":"csharp"}
{"task_id":"MBCSP\/342","completion":"\n            List<int> result = new List<int>();\n            for (int i = 0; i &lt; list.Count; i++)\n            {\n                if (list[i].Count == 0)\n                {\n                    result.Add(i, i);\n                }\n                else\n                {\n                    int min = i;\n                    for (int j = 0; j &lt; list[i].Count; j++)\n                    {\n                        if (list[min].IndexOf(list[i][j]) &lt; 0)\n                        {\n                            min = j;\n                        }\n                    }\n                    result.Add(i, min);\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/343","completion":"\n            var l = s.Length;\n\n            \/\/ 1. Count the number of letters\n            int[] lettercount = new int[26];\n            for (int i = 0; i &lt; l; i++)\n            {\n                if (s[i].IsLetter)\n                    lettercount[s[i].ToUpper().ToInt()] += 1;\n            }\n\n            \/\/ 2. Count the number of digits\n            int[] digitcount = new int[10];\n            for (int i = 0; i &lt; l; i++)\n            {\n                if (s[i].IsDigit)\n                    digitcount[s[i].ToUpper().ToInt()] += 1;\n            }\n\n            List<int> results = new List<int>();\n            results.Add(l);\n            results.Add(lettercount.Sum(x => x));\n            results.Add(digitcount.Sum(x => x));\n\n            return results;\n        }","language":"csharp"}
{"task_id":"MBCSP\/344","completion":"\n            \/\/ The below expression finds all the elements of the range.\n            \/\/ If it encounters an element with a positive square, then\n            \/\/ it returns the number of elements with a negative square.\n            \/\/ The difference of those elements should be 1.\n            return (n-m)\/(n+m) * ((n-m)*(n-m)-(n+m)*(n+m) + (n+m)*(n+m))\/2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/345","completion":"\n            List<int> result = new List<int>();\n            for (int i = 0; i < nums.Count - 1; i++) \n            {\n                if (nums[i] == nums[i + 1]) \n                {\n                    result.Add(0);\n                }\n                else \n                {\n                    result.Add(nums[i + 1] - nums[i]);\n                }\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/346","completion":"\n            if (k > n \/ 2)\n                k = n - k;\n\n            int arr[] = new int[n];\n            for (int i = 0; i < n; i++)\n                arr[i] = i + 1;\n\n            for (int i = 0; i < k; i++)\n            {\n                for (int j = i; j < n - i - 1; j++)\n                {\n                    int temp = arr[j];\n                    arr[j] = arr[n - i - 1];\n                    arr[n - i - 1] = temp;\n                }\n            }\n\n            return arr[n - k];\n        }","language":"csharp"}
{"task_id":"MBCSP\/347","completion":"\n            \/\/ Create a list of 0 to m^2 - 1\n            List<int> Squares = new List<int>();\n            for (int i = 0; i &lt; m * m; i++)\n            {\n                Squares.Add(i);\n            }\n    \n            \/\/ Use a lambda expression to filter\n            \/\/ out all the elements in the list that\n            \/\/ are less than the square root of the number \n            \/\/ of squares\n            return Squares.Where(x => ((int)Math.Floor(Math.sqrt(x))) &lt;= n).Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/348","completion":"\n            int n = (int)Math.pow (2, M) - 1;\n            return n \/ (n - 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/349","completion":"\n            return string0.Split(System.Text.RegularExpressions.Regex.AnyNonWhitespace, 1).Length == 1 ? \"Yes\" : \"No\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/350","completion":"\n            int iMinLength = 1;\n            var m = Regex.Matches(s, @\"(.)\\\\1\");\n            foreach (Match m in m)\n            {\n                iMinLength += 1;\n            }\n            return iMinLength;\n        }","language":"csharp"}
{"task_id":"MBCSP\/351","completion":"\n            int position = -1;\n            var pattern = Regex.Create(\"(?:.*\\\\b)(\\\\d+)(?:\\\\b.*)\", RegexOptions.IgnoreCase);\n            var matcher = pattern.Matches(arr);\n            \n            if (matcher.Count == k)\n            {\n                position = matcher[0].Groups[0].Value;\n            }\n            return position;\n        }","language":"csharp"}
{"task_id":"MBCSP\/352","completion":"\n            \/\/ 1.Create an array of 128 bit numbers.\n            var number = new int[128];\n\n            \/\/ 2.For each character in the string, increment the number of occurrences of each character by 1.\n            for (int i = 0; i < str.Length; i++)\n                number[str[i].ToUpper ()]++;\n\n            \/\/ 3.Check whether there are any characters whose number of occurrences is greater than 1.\n            for (int i = 0; i < number.Length; i++)\n                if (number[i] > 1)\n                    return false;\n\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/353","completion":"\n            List<List<int>> list2 = new List<List<int>>();\n            int length = list1.Length;\n            list1.ForEach(x => list2.Add(x.Take(length - n)));\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/354","completion":"\n            return (n - 1) * (a + d) \/ n;\n        }","language":"csharp"}
{"task_id":"MBCSP\/355","completion":"\n            \/\/ The first and last rectangle are not counted.\n            \/\/ The second and last rectangle are counted twice.\n            \/\/ The rest of the rectangles are counted once.\n            var rectangleCount = 0;\n            for (int i = 0; i < 360; i++)\n            {\n                var radian = ToRadians(i);\n                var x = radius * Math.cos(radian);\n                var y = radius * Math.sin(radian);\n                if (RectangleContains(x, y)) rectangleCount++;\n            }\n            return rectangleCount;\n        }","language":"csharp"}
{"task_id":"MBCSP\/356","completion":"\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/357","completion":"\n            \/\/int max_element = -9999999;\n            int max_element = 0;\n            foreach (var record in test_list)\n            {\n                var element = record.First;\n                if (element > max_element)\n                {\n                    max_element = element;\n                }\n            }\n\n            return max_element;\n        }","language":"csharp"}
{"task_id":"MBCSP\/358","completion":"\n            return nums1.Select(i => nums2[i % nums2.Length])\n                .Distinct();\n        }","language":"csharp"}
{"task_id":"MBCSP\/359","completion":"\n            \/\/ Find discriminant\n            var discriminant = b*b - 4*a*c;\n\n            \/\/ If discriminant is positive\n            if (discriminant > 0) \n            {\n                \/\/ Find two roots\n                var root1 = (-b + Math.Sqrt(discriminant)) \/ (2*a);\n                var root2 = (-b - Math.Sqrt(discriminant)) \/ (2*a);\n\n                \/\/ Return string with the result\n                return \"Yes \" + root1.ToString() + \" \" + root2.ToString();\n            }\n            else\n            {\n                \/\/ If discriminant is zero\n                return \"No\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/360","completion":"\n            string input = \"123\";\n            using (var scanner = new Scanner(input))\n            {\n                var array = (IList<int>) scanner.Split(new string[] { ' ' }, new bool[] { true });\n                return array[n-1];\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/361","completion":"\n            List<object> result = new List<object>();\n            foreach (object item in list1)\n            {\n                if (item != null &amp;&amp; item != [] &amp;&amp; item != '')\n                {\n                    if (item.Count () > 0)\n                    {\n                        if (item.Count () == 1)\n                        {\n                            if (item[0] != null &amp;&amp; item[0] != [] &amp;&amp; item[0] != '')\n                            {\n                                result.Add (item[0]);\n                            }\n                        }\n                        else\n                        {\n                            result.Add (item);\n                        }\n                    }\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/362","completion":"\n            int max = 0, count = 0;\n            foreach (var num in nums)\n            {\n                if (count < (int)num)\n                {\n                    count = (int)num;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/363","completion":"\n            List<List<int>> result = new List<List<int>>();\n            for (int i = 0; i < test_list.Count; i++)\n            {\n                List<int> list = test_list[i];\n                List<int> res = new List<int>();\n                for (int j = 0; j < K; j++)\n                {\n                    res.Add(list[j]);\n                }\n                for (int j = K; j < list.Count; j++)\n                {\n                    res.Add(list[j]);\n                }\n                result.Add(res);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/364","completion":"\n            if (str.Length == 0)\n                return 0;\n\n            string pattern = \"101\";\n\n            if (str.Length % 2 == 0)\n                pattern += \"00\";\n\n            string subPattern = \"10\" + pattern;\n            string result = Regex.Replace(str, subPattern, \"0\");\n\n            int i = 0;\n            for (i = 0; i < result.Length; i += 2)\n                if (result[i] != result[i + 1])\n                    break;\n\n            return i \/ 2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/365","completion":"\n            \/\/ write your code here\n            if (n < 10)\n            {\n                return 1;\n            }\n\n            int count = 1;\n            while (n > 10)\n            {\n                count++;\n                n = (n \/ 10);\n            }\n\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/366","completion":"\n            \/\/sort list_nums\n            list_nums.Sort ();\n            \n            \/\/calculate product of first and last number\n            int product_first_last = list_nums[0] * list_nums[list_nums.Count () - 1];\n            \n            \/\/loop through list_nums\n            for (int i = 1; i &lt; list_nums.Count () - 1; i++)\n            {\n                \/\/check if the numbers in list_nums are adjacent\n                if (list_nums[i] == list_nums[i - 1] || list_nums[i] == list_nums[i + 1])\n                {\n                    \/\/calculate product of adjacent numbers\n                    product_first_last *= list_nums[i];\n                }\n            }\n            \n            return product_first_last;\n        }","language":"csharp"}
{"task_id":"MBCSP\/368","completion":"\n            List<List<int>> result = new List<List<int>>();\n            for (int i = 0; i < N; i++)\n            {\n                List<int> new_tup = test_tup;\n                result.Add(new_tup);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/369","completion":"\n            \/\/ To calculate surface area of cuboid, add surface areas of the sides\n            \/\/ of the cuboid.\n            int Area1 = 2 * l * w;\n            int Area2 = 2 * w * h;\n            int Area3 = 2 * h * l;\n            \/\/ Return the sum of surface areas of the cuboid\n            return Area1 + Area2 + Area3;\n        }","language":"csharp"}
{"task_id":"MBCSP\/370","completion":"\n            var list = price;\n            \/\/return list.OrderBy(p => p.First).ToList();\n            var list2 = list.ToList();\n            list2.Sort();\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/371","completion":"\n            \/\/ TODO: Fill in code\n        }","language":"csharp"}
{"task_id":"MBCSP\/372","completion":"\n            if (nums.Count == 0)\n                return nums;\n        \n            \/\/ Create an empty queue to store the list of numbers.\n            Queue<int> q = new Queue<int>(nums.Count);\n            for (int i = 0; i &lt; nums.Count; i++) \n                q.Enqueue(nums[i]);\n        \n            \/\/ Loop until the queue is empty.\n            while (!q.IsEmpty()) \n            {\n                \/\/ Swap the smallest element of the queue with the last element.\n                int swap_value = q.DequeueMin();\n                int last_value = q.DequeueMin();\n                int new_value = last_value;\n        \n                \/\/ Put the last element in the queue for the next iteration.\n                q.Enqueue(last_value);\n        \n                \/\/ Now the queue has one less element, put the new element in the right place.\n                while (q.Size > 0) \n                {\n                    if (q.DequeueMin() ","language":"csharp"}
{"task_id":"MBCSP\/373","completion":"\n            if (l < 0 || w < 0 || h < 0)\n                throw new Exception (\"Invalid Dimensions\");\n            return l * w * h;\n        }","language":"csharp"}
{"task_id":"MBCSP\/374","completion":"\n            List<string> permutations = new List<string>();\n            if (str == null || str.Length == 0)\n                return permutations;\n            \n            permutations.Add(str);\n            int n = str.Length;\n            int k = n;\n            while (k > 0)\n            {\n                int first = k - 1;\n                while (first > 0 &amp;&amp; str.IndexOf(str[first - 1], 0) >= 0)\n                    first--;\n                \n                if (first > 0)\n                {\n                    for (int i = first; i &lt; n; i++)\n                    {\n                        char ch = str[i];\n                        str = str.Remove(i);\n                        permutations.Add(str + ch);\n                        str = str.Add(ch);\n                    }\n                }\n                k = first + 1;\n            }\n            return permutations;\n       ","language":"csharp"}
{"task_id":"MBCSP\/375","completion":"\n            int r = (int)(Math.round(n \/ m) * m);\n            return (r < n) ? r : r - m;\n        }","language":"csharp"}
{"task_id":"MBCSP\/376","completion":"\n            var out_tup = new List<object>();\n            out_tup = test_tup.ToList<object>();\n            var test_set = new List<object>();\n            test_set = test_tup.ToList<object>();\n            foreach (var item in test_set) \n            {\n                var temp = new List<object>();\n                temp = out_tup.Where(x => x.Equals(item)).ToList<object>();\n                if (temp.Count() == 1)\n                {\n                    out_tup.RemoveAt(out_tup.IndexOf(temp[0]));\n                }\n            }\n            return out_tup;\n        }","language":"csharp"}
{"task_id":"MBCSP\/377","completion":"\n            \/\/Create a regular expression object and let the regular expression match the string.\n            Regex regex = new Regex(@\"\\\\\" + c, RegexOptions.IgnoreCase);\n            \/\/Match the regular expression object against the string.\n            var result = regex.Matches(s);\n            \/\/Remove all the matches from the string.\n            result.RemoveAll();\n            return result[0];\n        }","language":"csharp"}
{"task_id":"MBCSP\/378","completion":"\n            int size = test_list.Count;\n            test_list.RemoveAt(size - 1);\n            test_list.Insert(0, test_list[size - 1]);\n            return test_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/379","completion":"\n            if (l <= 0 || w <= 0 || h <= 0)\n                return -1;\n            \n            return 2 * (l * w + w * h + h * l);\n        }","language":"csharp"}
{"task_id":"MBCSP\/380","completion":"\n            \/\/ Define the number of rows\n            var rowNum = rownum;\n            \n            \/\/ Define the number of columns\n            var colNum = colnum;\n            \n            \/\/ Initialize the two-dimensional array\n            var multiList = new List<List<int>>();\n            \n            \/\/ Initialize the first row of the 2-dimensional array\n            var row = new List<int>();\n            \n            \/\/ Generate the first row of the 2-dimensional array\n            for (int i = 0; i < colNum; i++) \n            {\n                \/\/ Initialize the value\n                var value = i;\n                \n                \/\/ Add the value to the first row of the 2-dimensional array\n                row.Add(value);\n            }\n            \n            \/\/ Add the first row of the 2-dimensional array to the two-dimensional array\n            multiList.Add(row);\n            \n            \/\/ Loop through the remaining rows of the 2-dimensional array\n            for (int i = 1; i < rowNum; i++) \n           ","language":"csharp"}
{"task_id":"MBCSP\/381","completion":"\n            List<List<object>> sorted_list = new List<List<object>>();\n\n            foreach (var list in list_data)\n            {\n                sorted_list.Add(list.ToList());\n            }\n            sorted_list = sorted_list.OrderByDescending(p => ((string)(p[index_no])));\n\n            return sorted_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/382","completion":"\n            \/\/ TODO: Write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/383","completion":"\n            \/\/ create a bit mask for odd bits \n            BitArray oddBitMask = BitArray.Create(~0, 1, 8);\n\n            \/\/ find the odd bits in n\n            BitArray oddBits = BitArray.Create(n, 1, 8);\n\n            \/\/ find the odd bits in n and toggle them\n            oddBits = oddBits.BitwiseAND(oddBitMask);\n\n            \/\/ return the new value of n with the odd bits toggled\n            return oddBits.ToInt32();\n        }","language":"csharp"}
{"task_id":"MBCSP\/384","completion":"\n            var freq = new Dictionary<int int=\"\">();\n\n            for (int num : arr) \n            {\n                var f = freq.Get(num);\n                freq.Add(num, f == null ? 1 : f + 1);\n            }\n\n            var sorted_keys = (list<int>)freq.Keys.ToList();\n            var sorted_values = (list<int>)freq.Values.ToList();\n            var sorted_pairs = (list<pair int=\"\">>)zip(sorted_keys, sorted_values).ToList();\n            var smallest_pair = new [] { min(sorted_pairs, key => key.Value) };\n\n            return smallest_pair[0].Key;\n        }","language":"csharp"}
{"task_id":"MBCSP\/385","completion":"\n            if (n == 0)\n            {\n                return 0;\n            }\n            else if (n == 1)\n            {\n                return 1;\n            }\n            else\n            {\n                return (2 * n) - 1;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/386","completion":"\n            \/\/Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/387","completion":"\n            var regex = new Regex(@\"([A-F0-9]{2})\");\n            var matches = regex.Matches(N);\n\n            if (matches.Count != 1)\n                return \"Invalid\";\n\n            var hex = matches[0].Value;\n            return hex.ToString().PadRight(2, \"0\") % 2 == 0 ? \"Even\" : \"Odd\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/388","completion":"\n            int i = 1;\n            while (n > 1)\n            {\n                n >>= 1;\n                i++;\n            }\n\n            return i - 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/389","completion":"\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/390","completion":"\n            \/\/ Solution 1:\n            \/\/using System;\n            \/\/using System.Collections.Generic;\n            \/\/using System.Linq;\n            \/\/using System.Text.RegularExpressions;\n\n            \/\/string temp = string0;\n            \/\/list.Add(temp);\n            \/\/list.Add(list[0]);\n\n            \/\/ Solution 2:\n            list.Add(0,string0);\n            list.Add(0,list[0]);\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/391","completion":"\n            var dict = new Dictionary<string, Dictionary<string, int>>();\n            for (int i = 0; i &lt; l1.Count; i++)\n            {\n                dict[l1[i]] = new Dictionary<string int=\"\">();\n                for (int j = 0; j &lt; l2.Count; j++)\n                {\n                    dict[l1[i]][l2[j]] = l3[i];\n                }\n            }\n            return new List<dictionary dictionary=\"\" int=\"\">>>(dict.Keys, dict.Values);\n        }","language":"csharp"}
{"task_id":"MBCSP\/392","completion":"\n            if (n == 0)\n                return 0;\n            return (GetMaxSum(n\/2) + GetMaxSum(n\/3) + GetMaxSum(n\/4) + GetMaxSum(n\/5)) > n ? GetMaxSum(n\/2) + GetMaxSum(n\/3) + GetMaxSum(n\/4) + GetMaxSum(n\/5) : n;\n        }","language":"csharp"}
{"task_id":"MBCSP\/393","completion":"\n            return input_list\n                .Select(x => (x.Count () , x))\n                .Max(x => x [0]);\n        }","language":"csharp"}
{"task_id":"MBCSP\/394","completion":"\n            if (test_tup.Count == 0)\n                return true;\n            var distinct = \n            {\n                test_tup[0] = true;\n            };\n\n            for (int i = 1; i < test_tup.Count; i++)\n            {\n                if (distinct.Contains(test_tup[i]))\n                    return false;\n                distinct.Add(test_tup[i]);\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/395","completion":"\n            var dict = new Dictionary<string int=\"\">();\n\n            for (int i = 0; i &lt; str1.Length; i++) \n            {\n                var char = str1[i];\n\n                if (dict.ContainsKey(char)) \n                {\n                    dict[char]++;\n                } \n                else \n                {\n                    dict.Add(char, 1);\n                }\n            }\n\n            var result = null;\n\n            foreach (var item in dict) \n            {\n                if (dict[item] == 1) \n                {\n                    result = item;\n                    break;\n                }\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/396","completion":"\n            \/\/ write your code here\n            string result = \"Invalid\";\n            string str = string0;\n            int count = 0;\n            bool flag = false;\n\n            for (int i = 0; i < str.Length; i++)\n            {\n                bool found = Regex.IsMatch(str.Substring(i, i+1), \"^\\\\w$\");\n                if (found == true)\n                {\n                    count++;\n                }\n                if (found == false)\n                {\n                    break;\n                }\n            }\n            if (count > 1)\n            {\n                result = \"Invalid\";\n            }\n            else\n            {\n                result = \"Valid\";\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/397","completion":"\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/398","completion":" \n            \/\/ write your code here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/399","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/400","completion":"\n            int freq = 0;\n            Set<int> set = new HashSet<int>();\n            for (int i = 0; i < test_list.Count; i++) \n            {\n                int temp = test_list[i].Count;\n                set.Add(temp);\n                freq = freq + temp;\n            }\n            return freq;\n        }","language":"csharp"}
{"task_id":"MBCSP\/401","completion":"\n            List<List<int>> output_tup = new List<List<int>>();\n            int tuple_idx = 0;\n            List<int> temp_tup;\n            for (int idx = 0; idx &lt; test_tup1.Count(); idx++)\n            {\n                temp_tup = new List<int>();\n                for (int idx2 = 0; idx2 &lt; test_tup1[idx].Count(); idx2++)\n                {\n                    temp_tup.Add(test_tup1[idx].Get(idx2) + test_tup2[idx].Get(idx2));\n                }\n                output_tup.Add(temp_tup);\n            }\n            return output_tup;\n        }","language":"csharp"}
{"task_id":"MBCSP\/402","completion":"\n            \/\/Write your code here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/403","completion":"\n            \/\/ Regex definition from https:\/\/stackoverflow.com\/questions\/161738\/what-is-a-good-regular-expression-to-match-a-url\n            Regex regex = new Regex(@\"(?i)\\b((?:https?:\/\/|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\ufffdL\ufffd\u2018\u2019]))\");\n            return regex.IsMatch(str);\n        }","language":"csharp"}
{"task_id":"MBCSP\/404","completion":"\n            \/\/ return (a < b ? a : b);\n            return (a < b ? b : a);\n        }","language":"csharp"}
{"task_id":"MBCSP\/405","completion":"\n            var index = Tuple.IndexOf(tuplex, tuple1);\n            return index > -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/406","completion":"\n            if (x == 0)\n                return \"Even Parity\";\n            \n            if (x % 2 == 0)\n                return \"Even Parity\";\n            else\n                return \"Odd Parity\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/407","completion":"\n            return int.TryParse(n.ToString().Substring(n.ToString().LastIndexOf(\"1\") + 1));\n        }","language":"csharp"}
{"task_id":"MBCSP\/408","completion":"\n            \/\/ Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/409","completion":"\n            \/\/Write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/410","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/411","completion":"\n            return Regex.Match(word, @\"^([A-Z])(.+)\", RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace)\n                .Groups[1].Value.Replace(\" \", \"\") + Regex.Match(word, @\"([A-Z])\", RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace).Groups[1].Value.Replace(\" \", \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/412","completion":"\n            return l.Where(x => x % 2 != 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/413","completion":"\n            List<object> list2 = new List<object>();\n            \/\/ write the code to extract the nth element from the given list of tuples\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/414","completion":"\n            \/\/Write your code here\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/415","completion":"\n            \/\/ write your code here\n            return arr;\n        }","language":"csharp"}
{"task_id":"MBCSP\/416","completion":"\n            \/\/ If n is 0 or 1, it's only 1 possible sum\n            if (n <= 1)\n                return n;\n\n            \/\/ If n is 2, it's only 2 possible sums\n            if (n == 2)\n                return n;\n\n            \/\/ If n is 3, it's only 3 possible sums\n            if (n == 3)\n                return n;\n\n            \/\/ If n is 4, it's only 4 possible sums\n            if (n == 4)\n                return n;\n\n            \/\/ If n is 5, it's only 5 possible sums\n            if (n == 5)\n                return n;\n\n            \/\/ If n is 6, it's only 6 possible sums\n            if (n == 6)\n                return n;\n\n            \/\/ If n is 7, it's only 7 possible sums\n            if (n == 7)\n                return n;\n\n            \/\/ If n is 8, it's only ","language":"csharp"}
{"task_id":"MBCSP\/417","completion":"\n            \/\/Write your code here\n            var result = [];\n            var temp = [];\n            var temp1 = [];\n            var temp2 = [];\n\n            for (var k = 0; k < Input.Count; k++) {\n                temp.AddRange(Input[k]);\n            }\n\n            for (var i = 0; i < Input.Count; i++) {\n                if (i == 0) {\n                    continue;\n                }\n                if (temp[i].IndexOf(temp[i - 1]) == 0) {\n                    temp2.AddRange(temp[i]);\n                } else {\n                    result.AddRange(temp1);\n                    temp1 = [];\n                    temp1.AddRange(temp[i]);\n                }\n            }\n\n            result.AddRange(temp1);\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/418","completion":"\n            var sublist = lst.FirstOrDefault(x => x.Length &lt;= lst.Count);\n            var sublistLength = sublist.Length;\n            var maxSublistLength = 0;\n            foreach (var x in lst)\n            {\n                if (x.Length > maxSublistLength)\n                {\n                    maxSublistLength = x.Length;\n                    sublist = x;\n                }\n            }\n            return sublist;\n        }","language":"csharp"}
{"task_id":"MBCSP\/419","completion":"\n            \/\/ Declare a sum and round\n            int sum = 0;\n            foreach (var item in list1)\n            {\n                sum += Math.Round(item);\n            }\n\n            \/\/ Calculate the average\n            double average = sum \/ list1.Count();\n            return (int) Math.Round(average);\n        }","language":"csharp"}
{"task_id":"MBCSP\/420","completion":"\n            \/\/ Write your code here\n            if (n > 0) {\n                int sum = 0;\n                for (int i = 0; i < n; i++) {\n                    if (i % 2 == 0)\n                        sum += i * i * i;\n                }\n                return sum * n;\n            }\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/421","completion":"\n            string result = \"\";\n            foreach (object obj in test_tup) \n            {\n                result += obj.ToString() + \"-\";\n            }\n            return result.Remove(result.LastIndexOf(\"-\") + 1, result.Length);\n        }","language":"csharp"}
{"task_id":"MBCSP\/422","completion":"\n            return Math.pow(n, 3.0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/423","completion":"\n            int[][] goldMatrix = new int[m][n];\n            for (int i = 0; i < m; i++)\n                for (int j = 0; j < n; j++)\n                    goldMatrix[i][j] = gold[i][j];\n            return GetMaxgoldInternal(goldMatrix, m, n);\n        }","language":"csharp"}
{"task_id":"MBCSP\/424","completion":"\n            \/\/ Tuple<string> x = new Tuple<string>(test_tuple);\n            \/\/ System.Diagnostics.Debug.WriteLine(\"Tuple<string> x = new Tuple<string>(test_tuple); : \" + x.ToString());\n            \/\/ List<string> y = x.Select(s => s[s.Length-1]).ToList();\n            \/\/ System.Diagnostics.Debug.WriteLine(\"List<string> y = x.Select(s => s[s.Length-1]).ToList(); : \" + y.ToString());\n            \/\/ return y;\n            return test_tuple.Select(s => s[s.Length-1]);\n        }","language":"csharp"}
{"task_id":"MBCSP\/425","completion":"\n            return (int)list1.Where(c => c != null &amp;&amp; c.Contains(x)).Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/426","completion":"\n            return nums.Where(n => n % 2 == 1).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/427","completion":"\n            \/\/ Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/428","completion":"\n            \/\/ TODO: Implement the ShellSort Function\n            int h = 1;\n            while (h &lt;= my_list.Count) \n            {\n                h = 3 * h + 1;\n            }\n            while (h >= 1) \n            {\n                for (int i = h; i &lt;= my_list.Count; i++) \n                {\n                    int j = i;\n                    int temp = my_list[j];\n                    while (j >= h &amp;&amp; my_list[j - h] >= temp) \n                    {\n                        my_list[j] = my_list[j - h];\n                        j -= h;\n                    }\n                    my_list[j] = temp;\n                }\n                h \/= 3;\n            }\n            return my_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/429","completion":"\n            List<int> results = new List<int>();\n            for (int i = 0; i < test_tup1.Count; i++) \n            {\n                for (int j = 0; j < test_tup2.Count; j++)\n                {\n                    if (test_tup1[i] == test_tup2[j])\n                    {\n                        results.Add(test_tup1[i]);\n                    }\n                }\n            }\n\n            return results;\n        }","language":"csharp"}
{"task_id":"MBCSP\/430","completion":"\n            return b * b - 4 * a * c;\n        }","language":"csharp"}
{"task_id":"MBCSP\/431","completion":" \n            return (bool)list1.Any(element1 => list2.Any(element2 => element1 == element2));\n        }","language":"csharp"}
{"task_id":"MBCSP\/432","completion":"\n            \/\/ write your code here\n            double top = base1+base2;\n            double base = (base1+base2)\/2;\n            double height = Math.max(base1,base2);\n            return base + (top-base)\/2*height;\n\n        }","language":"csharp"}
{"task_id":"MBCSP\/433","completion":"\n            \/\/ Write your code here\n            int index = 0;\n            for (int i : arr) {\n                if (i > number) {\n                    index = arr.IndexOf(i);\n                    break;\n                }\n            }\n\n            return index > -1 ? \"Yes, the entered number is greater than those in the array\" : \"No, entered number is less than those in the array\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/434","completion":"\n            \/\/ Initialize the regex \n            Regex regex = new Regex(@\"a+b\");\n            \/\/ Initialize the results array\n            string results = new[] { \"Not matched!\" };\n            \/\/ Check if the regex matches the string\n            if (regex.IsMatch(text))\n            {\n                results = new[] { \"Found a match!\" };\n            }\n            return results;\n        }","language":"csharp"}
{"task_id":"MBCSP\/435","completion":"\n            var numStr = String.Format(\"{0:g}\", n);\n            return numStr.LastIndexOf(String.Format(\"{0:g}\", numStr.Length - 1));\n        }","language":"csharp"}
{"task_id":"MBCSP\/436","completion":"\n            int listSize = list1.Count;\n\n            \/\/ 2. Create a sorted copy of the original list.\n            List<int> list2 = new List<int>();\n\n            foreach (int x in list1)\n                list2.Add(x);\n\n            list2.Sort (x, descending = true);\n\n            \/\/ 3. Print the negative numbers in the list.\n            int j = 0;\n            foreach (int x in list2)\n            {\n                if (x < 0)\n                {\n                    Console.WriteLine(\" - \" + x);\n                }\n                else\n                    break;\n                j++;\n\n                \/\/ 4. If the list is not empty, print and append a new line.\n                if (j < listSize)\n                    Console.WriteLine();\n            }\n\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/437","completion":"\n            return str1.Replace(str1.Remove(\"[^A-Za-z]\", \"\"), \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/438","completion":"\n            \/\/ Your code goes here.\n            int count = 0;\n            for (int i = 0; i < test_list.Count; i++) {\n                int k = i;\n                for (int j = i + 1; j < test_list.Count; j++) {\n                    if (test_list[j].Equals(test_list[k])) {\n                        count++;\n                    }\n                }\n            }\n            return count.ToString();\n        }","language":"csharp"}
{"task_id":"MBCSP\/439","completion":"\n            return L.Aggregate(x => x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/440","completion":"\n            \/\/ TODO: Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/441","completion":"\n            \/\/ Declare some constants for the area of the cube\n            int areaCube = 6 * 6 * l;\n            return areaCube;\n        }","language":"csharp"}
{"task_id":"MBCSP\/442","completion":"\n            \/\/ Your code goes here\n            return 0.0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/443","completion":" \n            \/\/ write code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/444","completion":"\n            string[] list = new string[test_list.Count];\n            for (int i = 0; i < test_list.Count; i++)\n            {\n                List<int> tuple = test_list[i];\n                for (int j = 0; j < tuple.Count; j++)\n                {\n                    list[i] += tuple[j] + \"\\r\\n\";\n                }\n            }\n            Regex regex = new Regex(string.Format(\".*{0}.*\\\\r\\\\n\",K));\n            \/\/ Regex regex = new Regex(\".*\" + K + \".*\\\\r\\\\n\");\n            var result = regex.Matches(list);\n            if (result.Count == test_list.Count) return \"The length of the given tuple list is not greater than or equal to K.\";\n            else return string.Join(result[0].Groups, \", \");\n        }","language":"csharp"}
{"task_id":"MBCSP\/445","completion":"\n            \/\/Write your code here\n            List<List<int>> result = new List<List<int>>();\n            for(int i = 0; i < test_tup1.Count; i++)\n            {\n                List<int> temp = new List<int>();\n                for(int j = 0; j < test_tup2.Count; j++)\n                {\n                    temp.Add(test_tup1[i].ElementAt(j).Multiply(test_tup2[i].ElementAt(j)));\n                }\n                result.Add(temp);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/446","completion":"\n            int count = 0;\n            foreach (var t in tup)\n            {\n                foreach (var l in lst)\n                {\n                    if (t.Equals(l))\n                    {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/447","completion":"\n            return nums.Select (x => x * x * x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/448","completion":"\n            var sum = 0;\n            var perrinNumbers = GetPerrinNumbers(n);\n            foreach (var perrinNumber in perrinNumbers)\n            {\n                sum += perrinNumber;\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/449","completion":"\n            List<int> triangle = new List<int>();\n            triangle.Add(x1);\n            triangle.Add(y1);\n            triangle.Add(x2);\n            triangle.Add(y2);\n            triangle.Add(x3);\n            triangle.Add(y3);\n\n            List<int> temp = new List<int>();\n            if (triangle.Count < 3)\n            {\n                return \"Invalid triangle.\";\n            }\n            else if (!Triangle(triangle, temp))\n            {\n                return \"Invalid triangle.\";\n            }\n            else\n            {\n                return \"Valid triangle.\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/450","completion":"\n            \/\/Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/451","completion":"\n            return Regex.Replace(text1, \"\\s+\", \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/452","completion":"\n            if(sale_amount > actual_cost)\n                return null;\n            else\n                return sale_amount - actual_cost;\n        }","language":"csharp"}
{"task_id":"MBCSP\/453","completion":"\n            return (int)Math.Round(Math.Sqrt(n) * (n\/Math.Sqrt(n))) ; \n        }","language":"csharp"}
{"task_id":"MBCSP\/454","completion":"\n            Regex regex = new Regex(@\"([\\\\w]*)z\");\n            bool found = regex.Matches(text);\n\n            if (found)\n            {\n                return \"Found a match!\";\n            }\n            else\n            {\n                return \"Not matched!\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/455","completion":"\n            bool isMonthDay31 = monthnum2 \/ 10 == 1;\n            bool isMonthDay30 = monthnum2 \/ 10 == 2;\n            bool isMonthDay28 = monthnum2 \/ 10 == 5;\n            bool isMonthDay29 = monthnum2 \/ 10 == 7;\n            bool isMonthDay28 = monthnum2 \/ 10 == 8;\n\n            if (isMonthDay31 == true) return true;\n            else if (isMonthDay30 == true) return false;\n            else if (isMonthDay28 == true) return false;\n            else if (isMonthDay29 == true) return false;\n            else if (isMonthDay28 == true) return false;\n            else return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/456","completion":"\n            List<string> result = new List<string>();\n            List<string> tempList = new List<string>();\n            int size = stringlist.Count;\n\n            for(int i=size-1; i>=0; i--)\n            {\n                result.Add(stringlist[i]);\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/457","completion":"\n            var sublist = lst.Where(x => x.Length != 0).OrderByDescending(x => x.Length).Take(1);\n            return sublist;\n        }","language":"csharp"}
{"task_id":"MBCSP\/458","completion":"\n            return l * b;\n        }","language":"csharp"}
{"task_id":"MBCSP\/459","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/460","completion":"\n            \/\/ ... your code here ...\n            List<int> result = new List<int>();\n\n            foreach (var subList in lst)\n            {\n                result.Add(FirstOrDefault(subList));\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/461","completion":" \n            return str.ToUpper().CountMatch(new Regex(\"[^A-Z]\")); \n        }","language":"csharp"}
{"task_id":"MBCSP\/462","completion":"\n            var list = new List<List<string>>();\n            var comb = new List<string>();\n            var list2 = new List<string>();\n            var list3 = new List<string>();\n            var list4 = new List<string>();\n            for (int i = 0; i &lt; list1.Count; i++) \n            {\n                list2.Add(list1[i]);\n                list3.Add(list2[i]);\n                list4.Add(list3[i]);\n            }\n            while (list4.Count > 1) \n            {\n                comb = new List<string>();\n                comb.Add(list4[0]);\n                for (int i = 1; i &lt; list4.Count; i++) \n                {\n                    comb.Add(list4[i]);\n                }\n                list.Add(comb);\n                list4.RemoveAt(0);\n                for (int i = 0; i &lt; list4.Count; i++)","language":"csharp"}
{"task_id":"MBCSP\/463","completion":"\n            \/\/ write your code here\n            \/\/ O(n^2) solution\n            \n            int maxProduct = -1;\n            int runningProduct = 1;\n            \n            for(int i = 0; i < arr.Count; i++){\n                runningProduct = arr[i];\n                for(int j = i + 1; j < arr.Count; j++){\n                    runningProduct *= arr[j];\n                }\n                if(maxProduct < runningProduct){\n                    maxProduct = runningProduct;\n                }\n            }\n            return maxProduct;\n        }","language":"csharp"}
{"task_id":"MBCSP\/464","completion":"\n            int check = 0;\n            for (int i = 0; i &lt; dict.Count; i++)\n            {\n                if (check == n)\n                {\n                    return true;\n                }\n                check = dict[i];\n            }\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/465","completion":"\n            Dictionary<string, string> dict = new Dictionary<string, string>();\n\n            foreach (KeyValuePair<string, object> pair in dict1)\n            {\n                if (pair.Value != null &amp;&amp; pair.Value != \"\")\n                {\n                    dict.Add(pair.Key, pair.Value.ToString());\n                }\n            }\n\n            return dict;\n        }","language":"csharp"}
{"task_id":"MBCSP\/466","completion":"\n            if (high - low + 1 < n) return -1;\n            int mid = (high + low) \/ 2;\n            if (arr[mid] > arr[mid - 1] &amp;&amp; arr[mid] > arr[mid + 1])\n            {\n                return mid;\n            }\n            else if (arr[mid] > arr[mid - 1])\n            {\n                if (mid == 1 || arr[mid - 2] &lt; arr[mid])\n                {\n                    return mid;\n                }\n                return FindPeak(arr, low, mid - 1, n);\n            }\n            else if (arr[mid] > arr[mid + 1])\n            {\n                if (mid == arr.Length - 1 || arr[mid + 2] &lt; arr[mid])\n                {\n                    return mid;\n                }\n                return Find","language":"csharp"}
{"task_id":"MBCSP\/467","completion":"\n            int octalNum = 0;\n            int counter = 0;\n            while (deciNum != 0) {\n                octalNum += (deciNum % 8) * Math.pow(10, counter);\n                deciNum \/= 8;\n                counter++;\n            }\n            return octalNum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/468","completion":"\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/469","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/470","completion":"\n            \/\/ Create a new array to hold the results\n            List<int> results = new List<int>();\n\n            \/\/ Loop through the test tuples\n            for (int i = 0; i &lt; test_tup.Count; i++)\n            {\n                \/\/ Start with the first element of the tuple\n                int result = test_tup[i];\n\n                \/\/ Loop through the rest of the tuple, adding the next element to the result\n                for (int j = 0; j &lt; i; j++)\n                {\n                    \/\/ Add the value of the current element to the result\n                    result += test_tup[j];\n                }\n\n                \/\/ Add the result to the array of results\n                results.Add(result);\n            }\n\n            return results;\n        }","language":"csharp"}
{"task_id":"MBCSP\/471","completion":"\n            int remainder = 0;\n\n            foreach (var item in arr)\n            {\n                remainder += item % n;\n            }\n\n            remainder = remainder % n;\n\n            return remainder;\n        }","language":"csharp"}
{"task_id":"MBCSP\/472","completion":"\n            if (l.Count == 0) \n            {\n                return true;\n            }\n            if (l.Count == 1) \n            {\n                return true;\n            }\n            if (l.Count == 2) \n            {\n                return (l[0] + 1 == l[1]);\n            }\n            else \n            {\n                var m = l[0];\n                for (int i = 1; i < l.Count - 1; i++) \n                {\n                    if (l[i] + 1 == l[i + 1]) \n                    {\n                        continue;\n                    }\n                    else\n                    {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/473","completion":"\n            HashSet<List<int>> res = new HashSet<List<int>>();\n            HashSet<List<int>> intersection = new HashSet<List<int>>();\n            \n            for (List<int> list1 : test_list1)\n            {\n                for (List<int> list2 : test_list2)\n                {\n                    if (list1.size() == list2.size() && !contains(intersection, list1) && !contains(intersection, list2))\n                    {\n                        intersection.add(list1);\n                        intersection.add(list2);\n                        res.add(list1);\n                        res.add(list2);\n                    }\n                }\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/474","completion":"\n            return Regex.Replace(str1, new Regex(ch, RegexOptions.IgnoreCase), newch, RegexOptions.IgnoreCase);\n        }","language":"csharp"}
{"task_id":"MBCSP\/475","completion":"\n            var keys = dict1.Keys;\n            var values = dict1.Values;\n            var list = new List<List<object>>();\n            List<object> list1 = new List<object>();\n            for (int i = 0; i &lt; keys.Count; i++) \n            {\n                list1.Add(keys[i]);\n                list1.Add(values[i]);\n            }\n            list.Add(list1);\n            list.Sort((x, y) => \n            {\n                return ((int)y[1]) - ((int)x[1]);\n            });\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/476","completion":"\n            \/\/ Write your code here\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/477","completion":"\n            string string1 = string0.ToLower();\n            return string1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/478","completion":"\n            \/\/ To remove lowercase substrings from a string, use a regular expression. \n            \/\/ For example, remove all lowercase substrings from the string \"PYTHON\". \n            Regex rx = new Regex(@\"^[a-z]+\", RegexOptions.IgnoreCase);\n            return rx.Replace(str1, \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/479","completion":"\n            \/\/ convert the number to a string\n            string s = Convert.ToString (n);\n            \/\/ find the first digit and return it\n            return s.IndexOf (Regex.Regex (\"[1-9]\", RegexOptions.IgnoreCase));\n        }","language":"csharp"}
{"task_id":"MBCSP\/480","completion":"\n            var regex = new Regex (\"^(.).*?(.).*$\");\n            var m = regex.Match(str1);\n            if (m.Success)\n                return m[1];\n\n            return \"\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/481","completion":"\n            \/\/ write your code here\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/482","completion":"\n            Regex rx = new Regex(@\"^(\\\\w)(\\\\w)\\\\1+$\");\n\n            return rx.Match(text).Success ? \"Yes\" : \"No\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/483","completion":"\n            var result = 0;\n            var iter = NaturalNumber.Range(1, x);\n            var i = 0;\n            while (i < x)\n            {\n                result = result + i;\n                if (result % x == 0)\n                {\n                    return result;\n                }\n                i++;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/484","completion":"\n            \/\/ Initialize variables\n            List<List<string>> result_list = new List<List<string>>();\n            List<string> temp_list = new List<string>();\n\n            \/\/ Iterate through the test lists\n            foreach (List<string> list1 in test_list1)\n            {\n                \/\/ Iterate through the test lists\n                foreach (List<string> list2 in test_list2)\n                {\n                    \/\/ Iterate through the first list\n                    foreach (List<string> item1 in list1)\n                    {\n                        \/\/ Iterate through the second list\n                        foreach (List<string> item2 in list2)\n                        {\n                            \/\/ Check if the item from list1 matches the item from list2\n                            if (item1 == item2)\n                            {\n                                \/\/ Add the item from list1 to temp_list\n                                temp_list.Add(item1);\n                            }\n                        }\n                    }\n                    \/\/ Add the temp_list to the result_","language":"csharp"}
{"task_id":"MBCSP\/485","completion":"\n            if (n == 0)\n            {\n                return 0;\n            }\n            else if (n == 1)\n            {\n                return A[n - 1];\n            }\n            else\n            {\n                int mid = (n \/ 2);\n                int left = LargestPalindrome(A, mid);\n                int right = LargestPalindrome(A, n - mid);\n                \n                int maxLeft = Math.max(left, right);\n                int maxRight = Math.min(left, right);\n                \n                int max = 0;\n                \n                if (maxLeft == maxRight)\n                {\n                    int diff = maxRight - maxLeft + 1;\n                    for (int i = 0; i &lt; diff; i++)\n                    {\n                        if (A[maxLeft + i] == A[maxRight - i])\n                        {\n                            max = maxLeft + i","language":"csharp"}
{"task_id":"MBCSP\/486","completion":"\n            \/\/ TODO: Write your code here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/487","completion":"\n            \/\/ Write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/488","completion":"\n            \/\/ Calculate the area using the formula for pentagons.\n            return (3 * Math.pow(a, 2) \/ 4) * Math.sin(Math.PI \/ 5);\n        }","language":"csharp"}
{"task_id":"MBCSP\/489","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/490","completion":"\n            HashSet<List<int>> result = new HashSet<List<int>>();\n            for (List<int> list : test_list) {\n                List<int> newList = new ArrayList<int>();\n                for (int i = 0; i < test_list.Count; i++)\n                    if (list[i] == list[i + 1])\n                        newList.Add(list[i]);\n                if (newList.Count >= 2)\n                    result.Add(newList);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/491","completion":"\n            var res = 0;\n            var x = a;\n            while (n > 0)\n            {\n                res += ((double)x) * (double)(r) \/ (double)(n);\n                n--;\n                x += 1;\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/492","completion":"\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/493","completion":"\n            List<List<List<double>>> ret = new ArrayList<>();\n            double r2 = (radius * radius);\n            for (int iy = starty; iy <= endy; iy++) \n            {\n                for (int ix = startx; ix <= endx; ix++) \n                {\n                    List<List<double>> row = ret.get(ret.size() - 1);\n                    if (row == null) \n                    {\n                        row = new ArrayList<>();\n                        ret.add(row);\n                    }\n                    List<double> newrow = new ArrayList<>();\n                    row.add(newrow);\n                    for (int iy2 = iy - radius; iy2 <= iy + radius; iy2++) \n                    {\n                        for (int ix2 = ix - radius; ix2 <= ix + radius; ix2++) \n                        {\n                            double distance = 0;\n","language":"csharp"}
{"task_id":"MBCSP\/494","completion":"\n            \/\/ Tuple1<int> tuple = (1, 1, 0, 1, 0, 0, 1);\n            \/\/ Tuple1<int> tuple = (0, 1, 1, 0, 0, 1, 0, 1);\n            \/\/ Tuple1<int> tuple = (1, 1, 0, 1, 0, 1);\n            \/\/ Tuple1<int> tuple = (0, 1, 1, 0, 0, 1, 0, 1);\n\n            \/\/ Tuple<int> tuple = (1, 1, 0, 1, 0, 1);\n            \/\/ Tuple<int> tuple = (0, 1, 1, 0, 0, 1, 0, 1);\n            \/\/ Tuple<int> tuple = (1, 1, 0, 1, 0, 1);\n            \/\/ Tuple<int> tuple = (0, 1, 1,","language":"csharp"}
{"task_id":"MBCSP\/495","completion":"\n            return Regex.Replace(str1, @\"(?<=[a-z])(?=[A-Z])\", \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/496","completion":"\n            \/\/ 1. Create a MinHeap to store the results of the search.\n            MinHeap<int> minHeap = new MinHeap<int>(n);\n\n            \/\/ 2. Add the first n numbers to the MinHeap.\n            for (int i = 0; i < n; i++) \n                minHeap.Add(nums[i]);\n\n            \/\/ 3. Iterate over the whole list and find the smallest number from the MinHeap.\n            int k = 0;\n            for (int i = 0; i < nums.Count; i++) {\n                \/\/ 4. If the number is smaller than the minimum value in the MinHeap, remove the smallest value from the MinHeap and add the new number to the heap.\n                if (nums[i] < minHeap.Root.Value) {\n                    minHeap.RemoveMin();\n                    minHeap.Add(nums[i]);\n                }\n\n                \/\/ 5. If the number is bigger than the minimum value in the MinHeap, just add the new number to the heap.\n                if","language":"csharp"}
{"task_id":"MBCSP\/497","completion":"\n            return 2 * Math.PI * r * r + 2 * Math.PI * r * h;\n        }","language":"csharp"}
{"task_id":"MBCSP\/498","completion":"\n            if (y == 0) return x;\n            else return Gcd(y, x % y);\n        }","language":"csharp"}
{"task_id":"MBCSP\/499","completion":"\n            return (int)Math.sqrt(2 * r * r);\n        }","language":"csharp"}
{"task_id":"MBCSP\/500","completion":"\n            string result = \"\";\n\n            foreach(string item in list)\n            {\n                result += item + \" \";\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/501","completion":"\n            if (x < y) return y;\n            if (y == 0) return x;\n            \n            int z = x % y;\n            if (z == 0) return y;\n            return NumCommDiv (y,z);\n        }","language":"csharp"}
{"task_id":"MBCSP\/502","completion":"\n            int remainder = n % m;\n            return remainder;\n        }","language":"csharp"}
{"task_id":"MBCSP\/503","completion":"\n            \/\/ write code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/504","completion":"\n            \/\/ Initialize the result.\n            var result = 0;\n            \n            \/\/ Iterate through the natural numbers from 1 to n.\n            for (var i = 1; i <= n; i++)\n            {\n                \/\/ Add the square of the current natural number to the result.\n                result += i * i * i;\n            }\n            \n            \/\/ Return the result.\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/505","completion":"\n            if (A == null)\n                throw new ArgumentNullException();\n\n            List<int> temp = new List<int>();\n            List<int> temp1 = new List<int>();\n\n            for (int i = 0; i &lt; A.Count; i++)\n            {\n                if (A[i] == 0)\n                {\n                    temp1.Add(A[i]);\n                }\n                else\n                {\n                    temp.Add(A[i]);\n                }\n            }\n\n            A = temp;\n\n            for (int i = 0; i &lt; temp1.Count; i++)\n                A.Add(temp1[i]);\n\n            return A;\n        }","language":"csharp"}
{"task_id":"MBCSP\/506","completion":"\n            var r = new [] {1, n};\n            var p = new [] {1, 2};\n            var c = 1;\n\n            for (var i = 2; i <= k; i++) \n            {\n                var s = new [] {1, n - 1};\n\n                for (var j = 1; j < i; j++) \n                {\n                    s.Add(r[j]);\n                }\n\n                var t = new [] {1, 2};\n\n                for (var j = 1; j < i; j++) \n                {\n                    t.Add(p[j]);\n                }\n\n                var temp = new [] {1, n - i + 1};\n\n                for (var j = 1; j < i; j++) \n                {\n                    temp.Add(r[j]);\n                }\n\n                p = t;\n                r = s;\n\n                if ","language":"csharp"}
{"task_id":"MBCSP\/507","completion":"\n            \/\/ remove words from list1\n            var filtered = list1.Where(x => !removewords.Any(y => x.Contains(y)));\n\n            return filtered;\n        }","language":"csharp"}
{"task_id":"MBCSP\/508","completion":"\n            List<string> newList1 = l1.OrderBy (x => x).ToList();\n            List<string> newList2 = l2.OrderBy (x => x).ToList();\n            return newList1.Intersect(newList2).Count() == newList1.Count() &amp;&amp; newList2.Intersect(newList1).Count() == newList2.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/509","completion":"\n            var oddNumber = Regex.Matches(@\"(\\d+)\", \"1+2+3+4+5+6+7+8+9+10\").ToList();\n            var sum = 0;\n            foreach (int odd in oddNumber)\n            {\n                sum += odd;\n            }\n            var avg = sum \/ oddNumber.Count;\n            return avg;\n        }","language":"csharp"}
{"task_id":"MBCSP\/510","completion":"\n            \/\/ create 2d array to store the count of subsequence in O(n^2) time\n            int[][] countOfSubsequence = new int[arr.Count][];\n            for (int i = 0; i < arr.Count; i++)\n                countOfSubsequence[i] = new int[arr.Count];\n\n            for (int i = 0; i < arr.Count; i++)\n                countOfSubsequence[i][i] = 1;\n\n            \/\/ fill the countOfSubsequence array in O(n) time\n            for (int i = 1; i < arr.Count; i++)\n                for (int j = i - 1; j >= 0; j--) {\n                    if (arr[i] > arr[j] && countOfSubsequence[i][j] == 0)\n                        countOfSubsequence[i][j] = countOfSubsequence[j][i] + 1;\n                    else if (arr[i] < arr[","language":"csharp"}
{"task_id":"MBCSP\/511","completion":"\n            \/\/ write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/512","completion":"\n            var freq = new Dictionary<int, int>();\n            foreach (var item in test_tuple)\n            {\n                if (item is Tuple)\n                {\n                    foreach (var inner_item in item)\n                    {\n                        if (!freq.TryGetValue(inner_item, out count))\n                            freq.Add(inner_item, 1);\n                        else\n                            freq[inner_item] += 1;\n                    }\n                }\n            }\n\n            return freq;\n        }","language":"csharp"}
{"task_id":"MBCSP\/513","completion":"\n            List<object> tup_list = new List<object>();\n            foreach (var item in test_tup) \n            {\n                tup_list.Add(item);\n                tup_list.Add(K);\n            }\n            return tup_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/514","completion":"\n            int sum = 0;\n            foreach (int i in test_tup)\n            {\n                sum += i;\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/515","completion":"\n            var array = arr.ToArray<int>();\n            var count = 0;\n            for (int i = 0; i &lt; array.Length; i++) {\n                for (int j = 1; j &lt; array.Length; j++) {\n                    if ((array[i] + array[j]) % m == 0) {\n                        count++;\n                    }\n                }\n            }\n            return count == array.Length ? true : false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/516","completion":"\n            List<int> sortedNumbers = new List<int>();\n            if (nums == null)\n                return sortedNumbers;\n            int i, j, exp = 1, div, mod;\n            while (exp &lt; nums.Count) {\n                div = 1;\n                while (div &lt;= 10 &amp;&amp; nums[exp - 1] % div != 0) \n                    div *= 10;\n                mod = (int) (nums[exp - 1] \/ div);\n                while (exp &lt; nums.Count &amp;&amp; mod >= 10) {\n                    sortedNumbers.Add(mod % 10);\n                    exp++;\n                    div \/= 10;\n                    mod = (int) (nums[exp - 1] \/ div);\n                }\n                sortedNumbers.Add(mod);\n                exp++;\n            }\n            return sortedNumbers;\n        }","language":"csharp"}
{"task_id":"MBCSP\/517","completion":"\n            \/\/ Initialize a maximum value \n            var maximum = 0;\n\n            \/\/ Iterate through the list \n            foreach (var i in list1) \n            {\n                if (list1[i] > maximum) \n                {\n                    maximum = list1[i];\n                }\n            }\n\n            \/\/ Return the maximum value \n            return maximum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/518","completion":"\n            \/\/Write your code here.\n\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/519","completion":"\n            \/\/ Create a vector of doubles to hold the coordinates\n            List<double> coords = new List<double>();\n            \/\/ Get the coordinates\n            for (int i = 0; i &lt; num; i++)\n            {\n                coords.Add(i);\n            }\n            \/\/ If the number of coordinates is less than 4 then throw error\n            if (num &lt; 4)\n            {\n                throw new Exception(\"Only 4 or more tetrahedrons are allowed\");\n            }\n            \/\/ Calculate the volume of the tetrahedron\n            double volume = (coords.Sum((i, j) => (coords[i] * coords[j]) \/ 4)).ToDouble();\n            \/\/ Return the volume of the tetrahedron\n            return volume;\n        }","language":"csharp"}
{"task_id":"MBCSP\/520","completion":"\n            if (l.Count == 0) \n                return 0;\n\n            return l.Aggregate((a, b) => (a * b) \/ gcd(a, b));\n        }","language":"csharp"}
{"task_id":"MBCSP\/521","completion":" \n            \/\/Write your code here\n            return ((x + y) > z) && ((x + z) > y) && ((y + z) > x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/522","completion":"\n            int n = arr.Count;\n            int L = 1, R = 1;\n            int max = 1;\n            while (R < n) \n            {\n                if (arr[R] > arr[L])\n                    L = R;\n                else \n                {\n                    if (R - L + 1 > max)\n                        max = R - L + 1;\n                    R++;\n                }\n            }\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/523","completion":"\n            Regex regex = new Regex(@\"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])[A-Za-z0-9]{8,}$\");\n            RegexCollection regexCollection = new RegexCollection(regex);\n            var matches = regexCollection.Matches(str1);\n            List<string> results = new List<string>();\n            if (matches.Count == 0)\n            {\n                results.Add(\"Valid string.\");\n            }\n            else\n            {\n                foreach (Match match in matches)\n                {\n                    results.Add(match.Message);\n                }\n            }\n            return results;\n        }","language":"csharp"}
{"task_id":"MBCSP\/524","completion":"\n            int[] dp = new int[n + 1];\n            Arrays.fill(dp, Integer.MIN_VALUE);\n\n            \/\/ fill dp[]\n            for (int i = 0; i < n; i++) \n            {\n                for (int j = 0; j < i; j++) \n                {\n                    if (arr[i] >= arr[j] && dp[i] < dp[j] + arr[i]) \n                    {\n                        dp[i] = dp[j] + arr[i];\n                    }\n                }\n            }\n\n            int maxSum = Integer.MIN_VALUE;\n            for (int i = 0; i < n; i++) \n            {\n                if (maxSum < dp[i]) \n                {\n                    maxSum = dp[i];\n                }\n            }\n            return maxSum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/525","completion":"\n            \/\/ Your code goes here.\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/526","completion":"\n            if (str1 == null)\n            {\n                return null;\n            }\n            else\n            {\n                \/\/ Convert string to array of char\n                var array = str1.ToCharArray();\n\n                \/\/ Find length of array\n                var length = array.Length;\n\n                \/\/ Iterate over each character and capitalize first character if it is not already uppercase\n                for (var i = 0; i < length; i++)\n                {\n                    \/\/ If it is a letter, and the previous character is uppercase, convert it to lowercase\n                    if ((char)array[i] >= 'A' && (char)array[i] <= 'Z')\n                    {\n                        array[i] = (char) (array[i] + 32);\n                    }\n                    \/\/ If it is not a letter, then no action is required\n                }\n\n                \/\/ Convert array back to string\n                var str2 = new string(array);\n\n                \/\/ Return string\n                return str2;","language":"csharp"}
{"task_id":"MBCSP\/527","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/528","completion":"\n            List<object> result = new List<object>();\n            \/\/ Your code here\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/529","completion":"\n            if (n <= 0) return 0;\n            if (n == 1) return 1;\n            return JacobsthalLucas(n - 1) + JacobsthalLucas(n - 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/530","completion":"\n            return (nums.Where (i => i &lt; 0).Count() \/ nums.Count()).ToDouble();\n        }","language":"csharp"}
{"task_id":"MBCSP\/531","completion":"\n            \/\/ write code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/532","completion":"\n            \/\/ Create a map of characters in the first string.\n            var charMap1 = map[char](str1.ToCharArray());\n\n            \/\/ Iterate over the second string\n            for (int i = 0; i < str2.Length; i++) \n            {\n                \/\/ If the character is not in the map, the strings do not\n                \/\/ have a permutation.\n                if (charMap1[str2[i]] == null) \n                    return false;\n\n                \/\/ Delete the character from the map.\n                charMap1[str2[i]] = null;\n            }\n\n            \/\/ If any characters remain in the map, the strings do not\n            \/\/ have a permutation.\n            return char.All(charMap1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/534","completion":"\n            List<int> result = new List<int> ();\n            \/\/ match the text to pattern\n            Regex regex = new Regex(@\"(?i)(\" + pattern + \")\");\n            MatchCollection matches = regex.Matches(text);\n\n            \/\/ for each match, check for the location of pattern\n            foreach (Match m in matches) \n            {\n                \/\/ add match location to result\n                result.Add(m.Index);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/535","completion":" \n            \/\/ Declare the variables\n            double s, t, result = 0;\n        \n            \/\/ Find the surface area of the cylinder\n            s = 2 * Math.PI * Math.pow(r, 2);\n        \n            \/\/ Find the top surface area of the cylinder\n            t = Math.PI * r;\n        \n            \/\/ Check if the top surface area is greater than the bottom surface area.\n            if (t > s) \n                result = t;\n            else\n                result = s;\n        \n            \/\/ Return the result\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/536","completion":"\n            return list.Take(n).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/537","completion":"\n            \/\/ split string using \" \" (a single character)\n            \/\/ and remove trailing and leading spaces\n            var str = Regex.Split(str1, \"\\\\s\", RegexOptions.None);\n            \/\/ convert to a collection of strings\n            var list = new List<string>(str);\n\n            \/\/ group by word using \"\\w+\"\n            \/\/ return \"None\" if the collection is empty\n            if (list.Count == 0) { return \"None\"; }\n\n            \/\/ create a dictionary to store word counts\n            \/\/ convert the collection of strings to a collection of \"key:value\" pairs\n            var dict = new Dictionary<string int=\"\">();\n            foreach (var str in list) {\n                var word = Regex.Replace(str, \"\\\\W\", \"\");\n                dict[word] += 1;\n            }\n            \n            \/\/ convert the dictionary to a collection of tuples\n            \/\/ return the first tuple (key, value) pair if the value is greater than one\n            var tuples = dict.OrderByDesc","language":"csharp"}
{"task_id":"MBCSP\/538","completion":"\n            var regex = Regex.Create(\"[^\\\\s\\\"']+|\\\"([^\\\"]*)\\\"|'([^']*)'\");\n            var results = regex.Matches(str1);\n            var tuple = new Tuple<string>(\n                foreach (var match in results)\n                {\n                    match[1] ? match[1] : match[2];\n                }\n            );\n            return tuple;\n        }","language":"csharp"}
{"task_id":"MBCSP\/539","completion":"\n            List<int> power_of_num = new List<int>();\n            int base_num = 1;\n            foreach (int i in index)\n            {\n                power_of_num.Add(bases_num[i] * base_num);\n                base_num *= bases_num[i];\n            }\n\n            return power_of_num;\n        }","language":"csharp"}
{"task_id":"MBCSP\/540","completion":"\n            var freq = new List<int> { 0, 0 };\n            var sorted = arr.OrderBy (p => p).ToList ();\n\n            for (var i = 0; i &lt; sorted.Count (); i++)\n            {\n                var val = sorted[i];\n                freq[val] += 1;\n            }\n            var max = freq[0];\n            var min = freq[0];\n\n            for (int i = 0; i &lt; freq.Length (); i++)\n            {\n                if (freq[i] > max)\n                    max = freq[i];\n                if (freq[i] &lt; min)\n                    min = freq[i];\n            }\n\n            return max - min;\n        }","language":"csharp"}
{"task_id":"MBCSP\/541","completion":"\n            bool isAbundant = true;\n\n            \/\/ For each divisor 3, 5, 7, 9...\n            for (int i = 2; i * i <= n; i++) \n            {\n                if (n % i == 0) \n                {\n                    \/\/ If it divides evenly into n, make it false and exit the loop\n                    isAbundant = false;\n                    break;\n                }\n            }\n\n            return isAbundant;\n        }","language":"csharp"}
{"task_id":"MBCSP\/542","completion":"\n            \/\/ Create Regex Patterns\n            Regex rSpace = new Regex(System.Text.RegularExpressions.Regex.Space);\n            Regex rDot = new Regex(System.Text.RegularExpressions.Regex.Dot);\n            Regex rComma = new Regex(System.Text.RegularExpressions.Regex.Comma);\n\n            \/\/ Create Regex Replacements\n            RegexReplacement rSpaceReplacement = new RegexReplacement(rSpace, \" \");\n            RegexReplacement rDotReplacement = new RegexReplacement(rDot, \":\");\n            RegexReplacement rCommaReplacement = new RegexReplacement(rComma, \",\");\n\n            \/\/ Apply Regex replacements to text\n            Regex regExp = new Regex(rSpace, RegexOptions.Singleline);\n            text = regExp.Replace(text, rSpaceReplacement, RegexOptions.Multiline);\n            regExp = new Regex(rDot, RegexOptions.Singleline);\n            text = regExp.Replace(text, rDotReplacement, RegexOptions.Multiline);\n            regExp = new Regex(rComma, RegexOptions.Singleline);\n            text = regExp.Replace(","language":"csharp"}
{"task_id":"MBCSP\/543","completion":"\n            \/\/ write your code here\n            int counter = 0;\n            while (num1 > 0)\n            {\n                num1 = num1 \/ 10;\n                counter++;\n            }\n            while (num2 > 0)\n            {\n                num2 = num2 \/ 10;\n                counter++;\n            }\n            return counter;\n        }","language":"csharp"}
{"task_id":"MBCSP\/544","completion":"\n            string result = \"\";\n            foreach (var item in test_list)\n            {\n                foreach (var sub_item in item)\n                {\n                    result += (sub_item + \" \");\n                }\n                result += \"\\r\\n\";\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/545","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/546","completion":"\n            \/\/Create a string of all the characters in the string.\n            string string1 = string0.Split(new char[] { char }, StringSplitOptions.None).Select(c => string.Format(\"{0}\", c)).ToArray();\n\n            \/\/Create a string of all the characters in the string.\n            string string2 = string0.Split(new char[] { char }, StringSplitOptions.None).Select(c => string.Format(\"{0}\", c)).ToArray();\n\n            return string1.IndexOf(string2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/547","completion":"\n            int total = 0;\n            for (int i = 0; i < n; i++)\n            {\n                for (int j = i+1; j <= n; j++)\n                {\n                    total += GetHammingDistance(i, j);\n                }\n            }\n            return total;\n        }","language":"csharp"}
{"task_id":"MBCSP\/548","completion":"\n            List<int> LIS = new List<int>();\n            \/\/\/ <summary>\n            \/\/\/ Step 1: Find LIS using Dynamic Programming\n            \/\/\/ <\/summary>\n            \/\/\/ <param name=\"arr\"\/>\n            \/\/\/ <param name=\"LIS\"\/>\n            \/\/\/ <returns>\n            \/\/\/ LIS\n            \/\/\/ <\/returns>\n            for (int i = 0; i < arr.Count; i++)\n            {\n                int max = 1;\n                int idx = LIS.IndexOf(arr[i]);\n                if (idx != -1)\n                {\n                    max = Math.Max(max, LIS[idx] + 1);\n                }\n                LIS.Add(arr[i], max);\n            }\n            \/\/\/ <summary>\n            \/\/\/ Step 2: Find the length of LIS\n            \/\/\/ <\/summary>\n            \/\/\/ <param name=\"LIS\"\/>\n            \/\/\/ <returns>\n            \/\/\/ LIS Length","language":"csharp"}
{"task_id":"MBCSP\/549","completion":"\n            int res = 0;\n            for (int i = 1; i <= n; i += 2)\n                res += (i * i * i * i * i);\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/550","completion":"\n            if (low == high)\n                return arr[low];\n\n            if (low > high)\n                return -1;\n\n            int mid = low + (high - low) \/ 2;\n\n            if (arr[mid] > arr[mid+1])\n                return arr[mid];\n\n            if (arr[mid-1] > arr[mid])\n                return arr[mid-1];\n\n            if (arr[mid] > arr[mid+1])\n                return arr[mid];\n\n            if (arr[mid-1] > arr[mid])\n                return arr[mid-1];\n\n            if (arr[mid] > arr[mid+1])\n                return arr[mid];\n\n            \/\/ arr[mid] < arr[mid+1]\n            if (arr[low] < arr[mid]) \n                return FindMax(arr, low, mid-1);\n\n            if (arr[mid+1] < arr[high])\n                return FindMax(arr, mid+1, high);","language":"csharp"}
{"task_id":"MBCSP\/551","completion":"\n            List<int> output = new List<int>();\n            foreach (var x in list1)\n            {\n                output.Add(x[n]);\n            }\n\n            return output;\n        }","language":"csharp"}
{"task_id":"MBCSP\/552","completion":"\n            \/\/ This program is written for the class in \n            \/\/ chapter 8.3 of \"C# Fundamentals\" by W3 Schools.\n\n            var length = seq_nums.Count();\n\n            \/\/ Iterate through the numbers\n            for (int i = 0; i < length; i++) {\n\n                \/\/ Check if the current element is greater than \n                \/\/ the next element\n                if (seq_nums[i] > seq_nums[i + 1]) {\n                    return \"Linear Sequence\";\n                }\n            }\n\n            \/\/ If all the numbers in the sequence are less than the first number,\n            \/\/ it is non linear.\n            return \"Non Linear Sequence\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/553","completion":"\n            \/\/ code goes here\n            \/\/return Double.NaN;\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/554","completion":"\n            return list.Where(x => x % 2 == 1).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/555","completion":"\n            int a = 0;\n            int b = 0;\n            if (n == 1)\n            {\n                return 0;\n            }\n            if (n == 2)\n            {\n                return 6;\n            }\n            if (n > 2)\n            {\n                for (int i = 1; i <= n; i++)\n                {\n                    a = a + i;\n                    b = b + i * i;\n                }\n                return b - a;\n            }\n            else\n            {\n                return 0;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/556","completion":"\n            \/\/Write your code here\n            var count = 0;\n            if (N % 2 != 0) {\n                for (int i = 0; i < A.Count; i++) {\n                    for (int j = 0; j < A.Count; j++) {\n                        if (A[i] == A[j]) {\n                            count++;\n                        }\n                    }\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/557","completion":"\n            string string1 = string0.ToUpper();\n            return string1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/558","completion":"\n            \/\/return Math.Abs(n1 - n2);  \/\/ if you want absolute value\n            return (int)(Math.max(Math.abs(n1), Math.abs(n2)) - Math.min(Math.abs(n1), Math.abs(n2)));  \/\/ if you want relative value\n        }","language":"csharp"}
{"task_id":"MBCSP\/559","completion":"\n            var dp = new List<int> (a.Length);\n            var max = -1;\n            dp[0] = a[0];\n\n            for (int i = 1; i < a.Length; i++)\n            {\n                dp[i] = Math.max(dp[i - 1] + a[i], a[i]);\n\n                max = Math.Max(dp[i], max);\n            }\n\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/560","completion":"\n            \/\/ If both tuples are empty, return the empty tuple\n            if (test_tup1.Count == 0 && test_tup2.Count == 0)\n                return new List<int> {  };\n\n            \/\/ If only one tuple is empty, return the other tuple\n            if (test_tup1.Count == 0)\n                return test_tup2;\n            if (test_tup2.Count == 0)\n                return test_tup1;\n\n            \/\/ Find the set union of the two tuples\n            var set = new HashSet<int> (test_tup1);\n            set.Union(test_tup2);\n            var result = new List<int> (set);\n            \n            \/\/ Return the result\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/561","completion":"\n            \/\/Write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/562","completion":"\n            if (lst == null) \n                return 0;\n            if (lst.Count == 0) \n                return 0;\n\n            var maxLen = lst[0].Length;\n            foreach (var i in lst)\n            {\n                if (i.Length > maxLen)\n                    maxLen = i.Length;\n            }\n\n            return maxLen;\n        }","language":"csharp"}
{"task_id":"MBCSP\/563","completion":"\n            \/\/ Solution code here...\n            List<string> data = new List<string>();\n            Regex rgx = new Regex(@\"(?&lt;=\\\")[^\\\"]*(?=\\\")\");\n            MatchCollection matches = rgx.Matches(text);\n            foreach (Match m in matches)\n            {\n                data.Add(m.Value);\n            }\n            return data;\n        }","language":"csharp"}
{"task_id":"MBCSP\/564","completion":"\n            if (arr.Count () < 2)\n                return 0;\n\n            int count = 0;\n            int[] counter = new int[n];\n\n            for (int i = 0; i < arr.Count (); i++)\n            {\n                counter[arr[i]]++;\n            }\n\n            for (int i = 0; i < counter.Length; i++)\n            {\n                if (counter[i] > 1)\n                {\n                    count += counter[i] * (counter[i] - 1) \/ 2;\n                }\n            }\n\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/565","completion":"\n            if (word.Length &lt; 1) throw new ArgumentException ();\n\n            List<string> split = new List<string>();\n\n            string[] arr = word.ToCharArray ();\n            int len = arr.Length;\n            for (int i = 0; i &lt; len; i++) \n            {\n                split.Add (arr[i]);\n            }\n\n            return split;\n        }","language":"csharp"}
{"task_id":"MBCSP\/566","completion":"\n            if (n < 0) {\n                throw new ArgumentOutOfRangeException(\"argument is negative\");\n            }\n            int sum = 0;\n            for (int i = 0; i < String.PadLeft(n + \"\", 10, '0').Length; i++) {\n                sum += (int)n % 10;\n                n = (int)n \/ 10;\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/567","completion":"\n            if (list1.Count &lt;= 1) {\n                return true;\n            }\n\n            var list2 = List.Make(list1.Count - 1, 0);\n            for (int i = 0; i &lt; list1.Count - 1; i++) {\n                if (list1[i] > list1[i + 1]) {\n                    return false;\n                }\n                else {\n                    list2[i] = list1[i];\n                }\n            }\n\n            return (list1.Count == 0 || IssortList(list2));\n        }","language":"csharp"}
{"task_id":"MBCSP\/568","completion":"\n            \/\/ create a list of 6 empty dictionaries\n            List<Dictionary<object, object>> list = new List<Dictionary<object, object>>();\n\n            \/\/ loop over the list and add each dictionary to the list\n            foreach (Dictionary<object, object> item in list)\n                item = new Dictionary<object object=\"\">();\n            \n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/569","completion":"\n            list1.Sort((x,y) => x.Length - y.Length);\n            return list1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/570","completion":"\n            \/\/Remove words containing a character from the given list.\n            List<string> result = list1.Where(x => !charlist.Any(y => x.Contains(y))) ;\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/571","completion":"\n            int maxSum = 0;\n            int[] dp = new int[N + 1];\n            for (int i = 0; i < arr.Count; i++)\n            {\n                for (int j = 0; j < N; j++)\n                {\n                    if (i == 0 || j == 0)\n                    {\n                        dp[j] = arr[i] + j;\n                        continue;\n                    }\n                    dp[j] = Math.max(arr[i] + j, dp[j - 1]);\n                }\n                for (int j = 0; j < N; j++)\n                    maxSum = Math.max(maxSum, dp[j + 1] - dp[j] - (j + 1) * (j + 1));\n            }\n            return maxSum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/572","completion":"\n            var map = new Dictionary<int int=\"\"> ();\n            for (int num : nums)\n            {\n                map.Add (num, 1);\n            }\n            List<int> result = new List<int> ();\n            for (int key : map.Keys)\n            {\n                int count = map[key];\n                if (count == 1)\n                {\n                    result.Add (key);\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/573","completion":"\n            int product = 1;\n\n            \/\/ sort the list\n            list_data.Sort(new int[] { 1, -1 });\n\n            \/\/ iterate over the list and multiply \n            \/\/ the numbers, so we will have unique\n            \/\/ products\n            foreach (int item in list_data)\n            {\n                product *= item;\n            }\n\n            \/\/ return the product\n            return product;\n        }","language":"csharp"}
{"task_id":"MBCSP\/574","completion":"\n            return 2*r*h + 2*r*Math.sqrt(h*h+r*r);\n        }","language":"csharp"}
{"task_id":"MBCSP\/575","completion":"\n            \/\/ write code here\n            int count = 0;\n            for (int i = L; i <= R; i++) \n            {\n                if (i%A != 0)\n                    count++;\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/576","completion":"\n            \/\/ Check if A contains B and vice versa\n            if (A == null || B == null)\n                return false;\n\n            if (n == 0)\n                return true;\n\n            if (m == 0)\n                return false;\n\n            \/\/ Check if A[0] contains B[0]\n            if (B.Contains(A.First()))\n                return IsSubArray(A.Skip(1), B.Skip(1), n - 1, m - 1);\n\n            \/\/ Check if A[0] contains B[m]\n            else if (B.Contains(A.First()) && m > 0)\n                return IsSubArray(A.Skip(1), B.Skip(m), n - 1, m - 1);\n\n            \/\/ Check if A[n] contains B[0]\n            else if (A.First() == B.First())\n                return IsSubArray(A.Skip(n - 1), B.Skip(1), n - 1, m);\n\n           ","language":"csharp"}
{"task_id":"MBCSP\/577","completion":"\n            \/\/ Your code goes here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/578","completion":"\n            \/\/ write your code here\n            var length = Math.Max(list1.Count,list2.Count,list3.Count);\n            var result = new List<int>();\n            for(int i = 0; i &lt; length; i++)\n            {\n                if (i &lt; list1.Count)\n                    result.Add(list1[i]);\n                if (i &lt; list2.Count)\n                    result.Add(list2[i]);\n                if (i &lt; list3.Count)\n                    result.Add(list3[i]);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/579","completion":"\n            \/\/ 1. Define a hash set to store the elements in the tuples.\n            var set = new HashSet<int>();\n            foreach (var element of test_tup1)\n            {\n                set.Add(element);\n            }\n\n            foreach (var element of test_tup2)\n            {\n                if (set.Contains(element))\n                    set.Remove(element);\n            }\n\n            return set;\n        }","language":"csharp"}
{"task_id":"MBCSP\/580","completion":"\n            List<object> result = new List<object>();\n            foreach (object element in test_tuple)\n            {\n                if (element instanceof Tuple)\n                {\n                    foreach (object second_element in ((Tuple)element).T1)\n                    {\n                        if (second_element instanceof Tuple)\n                        {\n                            foreach (object third_element in ((Tuple)second_element).T1)\n                            {\n                                if (third_element instanceof Tuple)\n                                {\n                                    foreach (object fourth_element in ((Tuple)third_element).T1)\n                                    {\n                                        if (fourth_element instanceof Int32)\n                                        {\n                                            if ( ((Int32)fourth_element).Value % 2 == 0 )\n                                                result.Add(fourth_element);\n                                        }\n                                    }\n                                }\n                                else\n                                {\n                                    if ( ((Int32)second","language":"csharp"}
{"task_id":"MBCSP\/581","completion":" \n            return (2 * b * s) + (2 * b * s) + (2 * b * s);\n        }","language":"csharp"}
{"task_id":"MBCSP\/582","completion":"\n            bool found = false;\n            foreach (KeyValuePair<int string=\"\"> kvPair in dict1)\n                if (kvPair.Value != null) \n                    found = true;\n            return found;\n        }","language":"csharp"}
{"task_id":"MBCSP\/583","completion":"\n            var catalanNum = 0;\n            var n = num;\n            var i = 0;\n            while (i <= n) {\n                catalanNum += 1;\n                i += 1;\n            }\n            return catalanNum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/584","completion":"\n            var pattern = @\"(?=.*?\\b(it|he|she|they|we|we\u2019re|you|you\u2019re|you\u2019ve|you\u2019ll|they|they\u2019re|they\u2019ve|they\u2019ll|she|her|him|them|their|our|ours|himself|herself|itself)\\b)(?=.*?\\b(is|was|were|be|become|became|become|becomes|became|be|are|were|was|am|among|amongst|amongst|was|become|become|becomes|became|became|be|am|among|amongst|amongst|become|become|becomes|became|became|been|been|am|among|amongst|amongst|became|became|been|been|am|among|amongst|amongst|became|became|been|been|been|been|is|is|was|was|was|was|was|was|was|were","language":"csharp"}
{"task_id":"MBCSP\/585","completion":"\n            \/\/Write your code here\n\n            \/\/ create a heap\n            var pq = new PriorityQueue<dictionary object=\"\">>(items.Count());\n\n            \/\/ iterate through items\n            for (int i = 0; i &lt; items.Count(); i++)\n            {\n                \/\/ add item to heap\n                pq.Enqueue(items[i]);\n\n                \/\/ check if there are too many items\n                if (pq.Count() > n)\n                {\n                    \/\/ take the top item\n                    var top = pq.DequeueHighestPriority();\n\n                    \/\/ remove top item\n                    pq.Remove(top);\n                }\n            }\n\n            \/\/ return result\n            return pq.ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/586","completion":"\n            List<int> b = new List<int>();\n            if (k >= n)\n            {\n                b = a;\n            } else\n            {\n                b = a.Take(n-k).Concat(a.Skip(k));\n            }\n            return b;\n        }","language":"csharp"}
{"task_id":"MBCSP\/587","completion":"\n            return listx.Select(x => new [] { x });\n        }","language":"csharp"}
{"task_id":"MBCSP\/588","completion":"\n            return 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/589","completion":"\n            List<int> perfectSquares = new List<int>();\n            var i = 1;\n            while (a + i * i <= b) \n            {\n                perfectSquares.Add(i * i);\n                i++;\n            }\n            return perfectSquares;\n        }","language":"csharp"}
{"task_id":"MBCSP\/591","completion":"\n            int lastElement = newList.Length - 1;\n\n            if (newList.Length > 1)\n                newList[0] = newList[lastElement];\n\n            if (newList.Length > 0)\n                newList[lastElement] = newList[0];\n\n            return newList;\n        }","language":"csharp"}
{"task_id":"MBCSP\/592","completion":"\n            var f = 0;\n            for (int i = 0; i < n; i++)\n            {\n                for (int j = 0; j <= i; j++)\n                {\n                    f += BinomialCoef(i, j) * BinomialCoef(j, i);\n                }\n            }\n            return f;\n        }","language":"csharp"}
{"task_id":"MBCSP\/593","completion":"\n            \/\/return (ip.Trim().Replace(\"0\", \"\"));\n            return ip.Trim().Replace(\"0\", \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/594","completion":"\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/595","completion":"\n            \/\/Create a 2D array to store count of 1s and 0s in str2\n            int str2Count = Array(str2.Length-1).CreateInstance(int.GetType());\n            int str2CountIndex = 0;\n            for (int i = 0; i <= str2.Length-1; i++)\n            {\n                if (str2[i] == '1')\n                {\n                    str2Count[str2CountIndex] = i;\n                    str2CountIndex++;\n                }\n            }\n\n            \/\/ Create a 2D array to store count of 1s and 0s in str1\n            int str1Count = Array(str1.Length-1).CreateInstance(int.GetType());\n            int str1CountIndex = 0;\n            for (int i = 0; i <= str1.Length-1; i++)\n            {\n                if (str1[i] == '1')\n                {\n                    str1Count","language":"csharp"}
{"task_id":"MBCSP\/596","completion":"\n            if (tuple_list == null) throw new ArgumentNullException(\"tuple_list\");\n            if (tuple_list.Count == 0) throw new ArgumentException(\"tuple_list\", \"tuple is empty\");\n\n            int size = 0;\n\n            foreach (var tuple in tuple_list)\n            {\n                size += sys.getsizeof(tuple);\n            }\n            return size;\n        }","language":"csharp"}
{"task_id":"MBCSP\/597","completion":"\n            if (m >= n)\n                return FindKth (arr2, arr1, n, m, k);\n\n            var m1 = (m + n) \/ 2;\n\n            if (k == m1)\n                return arr1[m1];\n\n            if (k < m1)\n                return FindKth (arr1, arr2, m, m1, k);\n\n            if (k > m1)\n                return FindKth (arr2, arr1, m1, n, k);\n        }","language":"csharp"}
{"task_id":"MBCSP\/598","completion":"\n            \/\/ TODO: Write your code here\n\n            var temp = number;\n            var num = temp + \"\";\n            var sum = 0;\n            for (var i = 0; i < num.Length; i++)\n                sum += Math.pow(Integer.Parse(num[i]), num.Length - (i + 1));\n            return number == sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/599","completion":"\n            int i;\n            int sum = 0;\n            List<object> result = new List<object>();\n            double average;\n            for (i = 0; i &lt; number; i++) \n            {\n                sum += i;\n            }\n            average = sum \/ number;\n            result.Add(sum);\n            result.Add(average);\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/600","completion":"\n            \/\/ write your code here\n            int i = n;\n            int count = 0;\n            while (i != 0) \n            {\n                if ((i & 1) != 0) \n                {\n                    count += 1;\n                }\n                i = i >> 1;\n            }\n            return count % 2 == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/602","completion":"\n            \/\/ Write your code here.\n            if (str1.Length == 0) return \"None\";\n            var charSet = new HashSet<string>();\n            var charCount = 1;\n            var firstRepeated = \"None\";\n            var i = 0;\n\n            while (i &lt; str1.Length - 1) \n            {\n                if (!charSet.Contains(str1[i])) \n                {\n                    charSet.Add(str1[i]);\n                    charCount++;\n                } \n                else \n                {\n                    charCount++;\n                }\n\n                if (charCount == 1) \n                {\n                    firstRepeated = str1[i];\n                    break;\n                }\n\n                i++;\n            }\n\n            return firstRepeated;\n        }","language":"csharp"}
{"task_id":"MBCSP\/603","completion":"\n            \/\/ write your code here.\n            List<int> result = new List<int>();\n            if (n &lt;= 0) \n                return result;\n            result.Add(1);\n            for (int i = 2; i &lt; n + 1; i++) {\n                result.Add(i + result.Last());\n                result.RemoveAt(result.Last() - 1);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/604","completion":"\n            string[] words = Regex.Split(s, \" \");\n            return Join(words.Reverse(), \" \");\n        }","language":"csharp"}
{"task_id":"MBCSP\/605","completion":"\n            if (num <= 1)\n                return false;\n            else if (num == 2)\n                return true;\n            else if (num % 2 == 0)\n                return false;\n\n            for (int i = 3; i <= Math.sqrt(num); i += 2) \n                if (num % i == 0)\n                    return false;\n\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/606","completion":"\n            return degree * (Math.PI \/ 180);\n        }","language":"csharp"}
{"task_id":"MBCSP\/607","completion":"\n            var loc = Regex.Matches(text, pattern).FirstOrDefault(x => x.Success);\n            return loc == null ? List.empty() : List.Make(new[]\n            {\n                pattern,\n                loc.Success ? loc.Value.Index : -1,\n                loc.Success ? loc.Value.Length : -1,\n            });\n        }","language":"csharp"}
{"task_id":"MBCSP\/608","completion":"\n            return n == 0 ? 0 : BellNumber(n - 1) + 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/609","completion":"\n            var ans = N;\n\n            while (A < B)\n            {\n                ans -= N;\n                A += N;\n            }\n\n            return ans;\n        }","language":"csharp"}
{"task_id":"MBCSP\/610","completion":"\n            \/\/ write your code here\n            list1.RemoveAt(L);\n            return list1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/611","completion":"\n            int max = test_list.Select (x => x.Select (y => y[N])).Aggregate (x => x, (a, b) => (a > b) ? a : b);\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/612","completion":"\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/613","completion":"\n            \/\/ sort the record list by value in descending order\n            Collections.sort(test_list, new Comparator<List<object>>() {\n                public int compare(List<object> item1, List<object> item2) {\n                    return (int) ( - (int) item1.Item1 (1) );\n                }\n            });\n            \/\/ print the first 3 tuples\n            foreach (var tuple in test_list.Take(3))\n                Console.WriteLine($\" { tuple.Item1 }\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/614","completion":"\n            var result = test_list\n                        .SelectMany(l => l.Select(i => i * i))\n                        .Sum();\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/615","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/616","completion":"\n            \/\/ code goes here\n        }","language":"csharp"}
{"task_id":"MBCSP\/617","completion":"\n            \/\/ Write your code here.\n            double ans = Math.ceil(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))) - d;\n\n            return ans;\n        }","language":"csharp"}
{"task_id":"MBCSP\/618","completion":"\n            return nums1.Where(a => nums2.Any(b -> b >= a)).Select(x => (nums1.Where(y => y >= x).Select(y => y \/ x).Average())).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/619","completion":"\n            \/\/ Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/620","completion":"\n            \/\/ return the largest subset if the sum is even and the number of elements is even\n            if (n % 2 == 0 &amp;&amp; n >= 2) {\n                return LargestSubset2(a, n);\n            }\n\n            \/\/ return the largest subset if the sum is odd and the number of elements is odd\n            if (n % 2 != 0 &amp;&amp; n >= 3) {\n                return LargestSubset3(a, n);\n            }\n\n            \/\/ otherwise\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/621","completion":"\n            \/\/ create a Regex that looks for numeric values\n            Regex regex = new Regex(@\"(?=\\\\d)(?=\\\\D)\");\n\n            \/\/ create a new list that contains the same strings, but with numeric values incremented by K\n            List<string> result = test_list.Select(x => regex.Replace(x, x, String.Format(\"{0:0=4d}\", Regex.Matches(x, regex).Count() + K)))\n                .ToList();\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/622","completion":"\n            if (n &lt;= 1)\n                throw new ArgumentNullException(String.Format(\"Array length must be at least 2. Given array length: {0}\", n));\n\n            if (n > arr1.Count &amp;&amp; n > arr2.Count)\n                throw new ArgumentException(String.Format(\"Array length must be at least 1 and at most {0}. Given array length: {1}\", arr1.Count + arr2.Count, n));\n\n            int firstLowIndex = 0;\n            int firstHighIndex = n - 1;\n            int secondLowIndex = 0;\n            int secondHighIndex = n - 1;\n\n            if (n % 2 == 1)\n            {\n                firstLowIndex = firstHighIndex = secondLowIndex = secondHighIndex = n \/ 2;\n            }\n            else\n            {\n                firstLowIndex = firstHighIndex = secondLowIndex = secondHighIndex = (n - 1) ","language":"csharp"}
{"task_id":"MBCSP\/623","completion":"\n            \/\/var n = 5;\n            var result = nums.Select(n - 1).ToList();\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/624","completion":"\n            return (string0.ToUpper());\n        }","language":"csharp"}
{"task_id":"MBCSP\/625","completion":"\n            if (newList.Count == 0)\n                throw new ArgumentException(\"The list to swap is empty\");\n            if (newList.Count == 1)\n                return newList;\n            \n            int first = newList[0];\n            int last = newList[newList.Count - 1];\n            newList[0] = last;\n            newList[newList.Count - 1] = first;\n            \n            return newList;\n        }","language":"csharp"}
{"task_id":"MBCSP\/626","completion":"\n            \/\/ write your code here.\n            if (r < 0) return -1;\n            if (r == 0) return 0;\n            if (r == 1) return 1;\n            if (r == 2) return 3;\n            int s = 0;\n            int a = (int)((3*r)\/2);\n            for (int i = 1; i < a; i++)\n            {\n                s += (i*i);\n            }\n            return s + (a*a);\n        }","language":"csharp"}
{"task_id":"MBCSP\/627","completion":"\n            var result = 0;\n            \/\/ Find the minimum value of the array\n            int minimumValue = array.Min(x => x);\n            \/\/ Find the maximum value of the array\n            int maximumValue = array.Max(x => x);\n            \/\/ Find the difference between the maximum and minimum value\n            int diff = maximumValue - minimumValue + 1;\n            \/\/ Find the sum of all numbers in the array\n            int sum = array.Sum(x => x);\n            \/\/ Find the sum of all numbers in the array except the minimum and maximum values\n            int total = array.Sum(x => x > minimumValue ? x : x + diff - 1);\n            \/\/ Find the smallest positive integer which is not less than the sum of all values in the array\n            result = total - sum;\n            \/\/ If the smallest number is equal to the sum of all values in the array, then return the difference between the \n            \/\/ minimum value and the maximum value, which is the difference between the maximum value and the sum of all values","language":"csharp"}
{"task_id":"MBCSP\/628","completion":"\n            string result = string0;\n\n            \/\/ Create a Regex of all spaces\n            Regex regex = new Regex(\"[ ]\");\n            \/\/ Use 'match()' method to find all spaces and replace them with '%20'\n            result = regex.Replace(result, \"%20\");\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/629","completion":"\n            List<int> evenNumbers = new List<int>();\n            for (int i = 0; i < list.Count; i++) \n            {\n                if (list[i] % 2 == 0)\n                {\n                    evenNumbers.Add(list[i]);\n                }\n            }\n            return evenNumbers;\n        }","language":"csharp"}
{"task_id":"MBCSP\/630","completion":"\n            List<List<int>> coord_list = new List<List<int>>();\n            List<int> curr_list = new List<int>();\n            \/\/Add first coord.\n            curr_list.Add(test_tup[0]);\n            curr_list.Add(test_tup[1]);\n            coord_list.Add(curr_list);\n            \/\/Add remaining coords.\n            List<int> cur_coord = new List<int>();\n            for (int i = 2; i &lt; test_tup.Length; i++)\n            {\n                cur_coord.Add(test_tup[i]);\n                if (i % 2 != 0)\n                {\n                    \/\/If odd index, then the last coord is finished.\n                    if (cur_coord.Length > 1)\n                    {\n                        curr_list.Add(cur_coord[cur_coord.Length - 2]);\n                        curr_list.Add(cur_coord[cur_coord.Length - 1]);\n                   ","language":"csharp"}
{"task_id":"MBCSP\/631","completion":"\n            Regex regex = new Regex(@\"^(\\\\s+)\");\n            RegexResult matches = regex.Matches(text);\n            foreach (Match match in matches)\n            {\n                text = text.Replace(match.Value, match.Value.Replace(\"\\t\", \"_\"));\n            }\n\n            regex = new Regex(@\"(\\\\s+)$\");\n            matches = regex.Matches(text);\n            foreach (Match match in matches)\n            {\n                text = text.Replace(match.Value, match.Value.Replace(\"_\", \"\\t\"));\n            }\n            \n            return text;\n        }","language":"csharp"}
{"task_id":"MBCSP\/632","completion":"\n            \/\/ write your code here\n            int counter = 0;\n            for (int i = 0; i &lt; num_list.Count(); i++) {\n                if (num_list[i] == 0) {\n                    counter++;\n                }\n            }\n            if (counter == 0) {\n                return num_list;\n            }\n            for (int i = 0; i &lt; num_list.Count(); i++) {\n                if (num_list[i] == 0) {\n                    num_list.Add(num_list.Count() - counter, 0);\n                    num_list.RemoveAt(i);\n                }\n            }\n            return num_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/633","completion":"\n            if (arr == null || arr.Count () == 0 || n < 0)\n                return 0;\n            return arr.Where (x => x &lt;= n).Select (x => x ^ n).Aggregate (x => x, (a, b) => a + b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/634","completion":"\n            if (n < 0) {\n                return 0;\n            }\n            if (n == 0) {\n                return 1;\n            }\n            int[] result = new int[n];\n            for (int i = 0; i < n; i++) {\n                if (i == 0) {\n                    result[i] = 1;\n                } else {\n                    result[i] = result[i - 1] * 4;\n                }\n            }\n            return result[n - 1];\n        }","language":"csharp"}
{"task_id":"MBCSP\/635","completion":"\n            \/\/ your code goes here\n            List<int> result = new List<int>();\n            if (iterable.Count &lt;= 0)\n                return result;\n            \/\/ Create a heap\n            Heap<int> heap = new Heap<int>();\n            \/\/ Put all items in heap.\n            foreach (int item in iterable)\n                heap.Enqueue(item);\n\n            \/\/ Pop smallest one.\n            while (heap.Count > 0)\n                result.Add(heap.Dequeue());\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/636","completion":"\n            if (a == 0)\n                return \"No\";\n            if (b == 0)\n                return \"No\";\n            if (c == 0)\n                return \"No\";\n            if ((Math.sqrt(b * b - 4 * a * c) - b) \/ (2 * a) == 0)\n                return \"Yes\";\n            else\n                return \"No\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/637","completion":" \n            var loss_percent = 0.02;\n\n            var profit_amount = (actual_cost - sale_amount) * loss_percent;\n\n            if (profit_amount > 0)\n                return false;\n            else \n                return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/638","completion":"\n            return v + ((t - 35) * 2) + (Math.random() * (70 - 35)) - 35;\n        }","language":"csharp"}
{"task_id":"MBCSP\/639","completion":"\n            List<string> lowercase_names = new List<string>();\n            foreach (var name in sample_names) {\n                if (name.StartsWith(\"[a-z]\")) {\n                    lowercase_names.Add(name);\n                }\n            }\n            return lowercase_names.Sum(s => s.Length);\n        }","language":"csharp"}
{"task_id":"MBCSP\/640","completion":"\n            return Regex.Replace(items.First(),  \"[^\\\\(\\\\)]*\\\\(([^\\\\)]*)\", \"$1\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/641","completion":"\n            if (n <= 0)\n                throw new ArgumentNullException (\"n\");\n            \n            int[] array = new int[n + 1];\n            array[0] = 1;\n            array[1] = 3;\n            array[2] = 5;\n            array[3] = 7;\n            array[4] = 9;\n            array[5] = 11;\n            array[6] = 13;\n            array[7] = 15;\n            array[8] = 17;\n            array[9] = 19;\n            \n            for (int i = 0; i < array.Length; i++)\n            {\n                if (array[i] == 0)\n                    continue;\n                if (array[i + 1] == 0)\n                    continue;\n                \n                return array[i];\n            }\n            \n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/642","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/643","completion":"\n            \/\/Your code goes here\n        }","language":"csharp"}
{"task_id":"MBCSP\/644","completion":"\n            if(input == null || input.Count == 0 || input.Count &lt;= k)\n            {\n                throw new ArgumentException(\"Invalid array or K\");\n            }\n\n            var result = new List<int>();\n            for (var i = 0; i &lt; input.Count; i++)\n            {\n                if(i &lt; k)\n                {\n                    result.Add(input[i]);\n                }\n                else\n                {\n                    result.Add(input[input.Count - k + i]);\n                }\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/645","completion":"\n            var product_list = List.Make(test_list.Count, 0);\n            foreach (var test_element in test_list)\n            {\n                var product = test_element.ElementAt(K).Product;\n                product_list.Add(product);\n            }\n\n            return product_list.Max();\n        }","language":"csharp"}
{"task_id":"MBCSP\/646","completion":"\n            var count = 0;\n            for (int i = 0; i < N; i++)\n            {\n                for (int j = 0; j < N; j++)\n                {\n                    for (int k = 0; k < N; k++)\n                    {\n                        if (i + j + k != N - 1)\n                        {\n                            count++;\n                        }\n                    }\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/647","completion":"\n            List<string> result = new List<string>();\n            \/\/ split the text using regular expression\n            Regex regex = new Regex(text, RegexOptions.IgnoreCase);\n            var words = regex.Matches(RegexOptions.None);\n            foreach (var word in words) \n            {\n                \/\/ get the first uppercase letter of the word\n                var firstLetter = word[0];\n                if (firstLetter.IsUpper()) \n                {\n                    \/\/ add the word to the result\n                    result.Add(word);\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/648","completion":"\n            \/\/ write your code here\n            return lst;\n        }","language":"csharp"}
{"task_id":"MBCSP\/649","completion":"\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/650","completion":"\n            \/\/ Your code goes here.\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/651","completion":"\n            \/\/ Tuple 1 and Tuple 2 must be of the same length.\n            if (test_tup1.Length != test_tup2.Length)\n                return false;\n\n            \/\/ The two tuples must be sorted and be of the same type.\n            if (!test_tup1.IsSorted || !test_tup2.IsSorted || test_tup1.GetType != test_tup2.GetType)\n                return false;\n\n            \/\/ Create an empty Tuple to store the result.\n            Tuple<int> result = new Tuple<int> ();\n\n            \/\/ Traverse the first tuple.\n            for (int i = 0; i < test_tup1.Length; i++)\n            {\n                \/\/ If the first tuple's item is not found in the second tuple, return false.\n                if (!test_tup2.Contains (test_tup1[i]))\n                    return false;\n\n                \/\/ Otherwise, add the first tuple's item to the result tuple.\n                result.Add (test_tup1[i]);\n           ","language":"csharp"}
{"task_id":"MBCSP\/652","completion":"\n            \/\/ Solution code here...\n            List<string> list_of_strings = new List<string>();\n            foreach (var x in test_list) \n            {\n                for (var y in x) \n                {\n                    var string_string = \"\";\n                    foreach (var z in y) \n                    {\n                        string_string += z.ToString();\n                    }\n                    list_of_strings.Add(string_string);\n                }\n            }\n            return list_of_strings.Join(new char[] { ',' }, StringComparison.Ordinal);\n        }","language":"csharp"}
{"task_id":"MBCSP\/653","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/654","completion":"\n            return 2 * (l + b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/655","completion":"\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/656","completion":"\n            var x = a.Select (x => x - b.Select (y => b.IndexOf (y))).ToArray ();\n            return x.Reduce ((x1, x2) => x1 + x2) \/ n;\n        }","language":"csharp"}
{"task_id":"MBCSP\/657","completion":"\n            if (n < 0)\n                return 0;\n            int d = 1;\n            while (n \/ (d * d) > 0)\n                d++;\n            return d - 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/658","completion":"\n            return list1.Max(x => x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/659","completion":"\n            if (x.Count &lt; 1) return new List<int>();\n            var results = new List<int>();\n            var last = x[0];\n            var i = 1;\n            while (i &lt; x.Count)\n            {\n                if (x[i] == last)\n                {\n                    results.Add(last);\n                    last = x[i];\n                    i++;\n                }\n                else\n                {\n                    last = x[i];\n                    i++;\n                }\n            }\n            return results;\n        }","language":"csharp"}
{"task_id":"MBCSP\/660","completion":"\n            var list1 = List.Make(r1 - l1 + 1).Select(x => x + l1).ToList();\n            var list2 = List.Make(r2 - l2 + 1).Select(x => x + l2).ToList();\n            var intersection = list1.Intersect(list2);\n            var intersectionWithLotsOf0 = intersection.Where(x => x % 10 != 0).ToList();\n            var points = intersectionWithLotsOf0.Select(x => x \/ 10).ToList();\n            return points;\n        }","language":"csharp"}
{"task_id":"MBCSP\/661","completion":"\n            if (arr.Count < 3) return 0;\n\n            int max = 0;\n            int windowStart = 0;\n            int windowSum = 0;\n\n            foreach (int element in arr)\n            {\n                windowSum += element;\n\n                while (windowSum > n)\n                {\n                    windowSum -= arr[windowStart];\n                    windowStart++;\n                }\n\n                if (windowSum == n)\n                {\n                    max = Math.Max (max, windowSum + arr[windowStart] + arr[windowStart + 1]);\n                }\n            }\n\n            return max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/662","completion":"\n            \/\/ Sorting the list\n            var list = dict1.Select(x => x.Select(x => x));\n            var listSort = list.OrderBy(x => x);\n\n            \/\/ Creating a Dictionary with the Sorted List\n            var dict2 = listSort.ToDictionary(x => x.Key, x => x.Value);\n            return dict2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/663","completion":"\n            return ;\n        }","language":"csharp"}
{"task_id":"MBCSP\/664","completion":"\n            if (n % 2 == 0)\n                return (n \/ 2);\n            else\n                return (n \/ 2) + 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/665","completion":"\n            if (num_list.Count () < 1)\n            {\n                throw new ArgumentNullException (\"num_list\");\n            }\n\n            num_list.Add (num_list.First (), num_list.Count ());\n            num_list.RemoveAt (0);\n\n            return num_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/666","completion":"\n            \/\/Your code goes here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/667","completion":"\n            \/\/ This regex will find all the vowels in the string.\n            Regex regex = new Regex(@\"(?i)([\" + vowels + \"])\");\n            return (int) string0.Matches(regex).Count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/668","completion":"\n            \/\/var regex = new Regex(@\"([\\\\W|^])\" + char + \"([\\\\W|^])\", RegexOptions.IgnoreCase);\n            var regex = new Regex(@\"([\\\\W|^])\" + char + \"([\\\\W|^])\", RegexOptions.IgnoreCase);\n            var result = string0.Replace(regex, \"$1$2\");\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/669","completion":"\n            string ipRegex = @\"\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\";\n            if (!Regex.IsMatch(ipRegex, Ip))\n            {\n                return \"Invalid IP address\";\n            }\n\n            return \"Valid IP address\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/670","completion":"\n            \/\/ write your code here\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/671","completion":"\n            return n | (1 << (Integer.SIZE - 1));\n        }","language":"csharp"}
{"task_id":"MBCSP\/672","completion":"\n            return Math.Max(num1, Math.Max(num2, num3));\n        }","language":"csharp"}
{"task_id":"MBCSP\/673","completion":"\n            var total = 0;\n            foreach (var item in list)\n            {\n                total = total * 10 + item;\n            }\n\n            return total;\n        }","language":"csharp"}
{"task_id":"MBCSP\/674","completion":"\n            \/\/ write your code here\n            return string0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/675","completion":"\n            if (x > m)\n            {\n                x = m;\n            }\n\n            if (y > n)\n            {\n                y = n;\n            }\n\n            if ((x + y) < (m + n))\n            {\n                return 20;\n            }\n            else if ((x + y) > (m + n))\n            {\n                return 0;\n            }\n            else\n            {\n                return x + y;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/676","completion":"\n            Regex re = new Regex(@\"^[\\w.@+-]+$\");\n            RegexResult rs = re.Execute(text1);\n            if (rs.Success)\n                return rs.Value.ToString();\n            else\n                return text1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/677","completion":"\n            if (a + b <= c || a + c <= b || b + c <= a)\n                return false;\n            \n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/678","completion":"\n            if (str1 == null) {\n                return \"Null\";\n            }\n            return str1.Replace(\"\\\\s+\", \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/679","completion":"\n            \/\/ write your code here\n            var list = Dictionary<string, int>.ToList(ditionary);\n            return list[key];\n        }","language":"csharp"}
{"task_id":"MBCSP\/680","completion":"\n            \/\/ write code here\n            var increasing = true;\n            var last = nums[0];\n            for (int i = 1; i < nums.Count; i++)\n            {\n                if (nums[i] < last) increasing = false;\n                last = nums[i];\n            }\n            return increasing;\n        }","language":"csharp"}
{"task_id":"MBCSP\/681","completion":"\n            int low = 2, high = n\/2;\n            while (low <= high)\n            {\n                int mid = (low + high) \/ 2;\n                if (n % mid == 0)\n                    return mid;\n                else if (n % mid < 0)\n                    high = mid - 1;\n                else\n                    low = mid + 1;\n            }\n            return high;\n        }","language":"csharp"}
{"task_id":"MBCSP\/682","completion":"\n            List<int> result = nums1.Select (x => x * nums2[x]).ToList();\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/683","completion":"\n            if (n == 0)\n                return true;\n            else if (n == 1)\n                return false;\n            else if (n % 2 == 0)\n                return SumSquare (n \/ 2) || SumSquare (n - 1);\n            else\n                return SumSquare (n \/ 2) && SumSquare (n - 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/684","completion":"\n            \/\/Create a dictionary to hold counts.\n            Dictionary <string int=\"\"> count = new Dictionary<string int=\"\">();\n\n            \/\/Iterate through the string.\n            int i = 0;\n            while (i &lt; str.Length) \n            {\n                \/\/If the current character is not already in the dictionary, increment it's count in the dictionary.\n                if (!count.ContainsKey(str[i]))\n                {\n                    count.Add(str[i], 1);\n                }\n                \/\/Otherwise, increment the count associated with that character.\n                else \n                {\n                    count[str[i]]++;\n                }\n                i++;\n            }\n\n            \/\/Iterate through the dictionary to get the count of a particular character.\n            int count_a = 0;\n            foreach (var key in count)\n            {\n                if (key == x)\n                {\n                    count_a = count[key];\n                }\n            }\n\n            return count_a;","language":"csharp"}
{"task_id":"MBCSP\/685","completion":"\n            int sum = 0;\n            foreach (var i in (1..n))\n            {\n                if (Prime(i))\n                    sum += i;\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/686","completion":"\n            if (test_tup.Count == 0)\n            {\n                return string.Empty;\n            }\n            var freq = (Dictionary<int int=\"\">) new Dictionary<int int=\"\">();\n\n            foreach (var elem in test_tup)\n            {\n                var val = freq[elem];\n                freq[elem] = val + 1;\n            }\n\n            return freq.ToDictionary(key => key.ToString(), val => val.ToString()).ToString();\n        }","language":"csharp"}
{"task_id":"MBCSP\/687","completion":"\n            if (b == 0)\n                return a;\n            else\n                return RecurGcd(b, a % b);\n        }","language":"csharp"}
{"task_id":"MBCSP\/688","completion":"\n            return (double)Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n        }","language":"csharp"}
{"task_id":"MBCSP\/689","completion":"\n            int jumps = 0;\n            int current = 0;\n            for (int i = 0; i < n - 1; i++) \n            {\n                if (arr[i] >= current) \n                {\n                    jumps++;\n                    current = arr[i];\n                }\n            }\n            return jumps;\n        }","language":"csharp"}
{"task_id":"MBCSP\/690","completion":"\n            List<int> result = new List<int>();\n            result = nums.FirstOrDefault();\n            List<int> temp;\n            \n            for (int i = 0; i &lt; nums.Count - 1; i++)\n            {\n                temp = nums.Select (x => x + 1).Take (nums.IndexOf (nums[i + 1]) - nums.IndexOf (nums[i]));\n                temp = temp.Concat (nums.Select (x => x - 1).Take (nums.IndexOf (nums[i + 1]) - nums.IndexOf (nums[i])));\n                result = result.Concat (temp);\n            }\n            \n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/691","completion":"\n            \/\/ 1st: sort the elements based on 2nd element in ascending order\n            test_list.Sort (\n                (a, b) => a.Item2.CompareTo (b.Item2)\n            );\n\n            \/\/ 2nd: create an empty dictionary\n            Dictionary<int, List<int>> answer = new Dictionary<int, List<int>> ();\n\n            \/\/ 3rd: create a loop to iterate over elements of sorted list\n            for (int i = 0; i &lt; test_list.Count (); i++) \n            {\n                \/\/ 4th: check if the key is present in the dictionary, if yes then\n                if (answer.ContainsKey (test_list[i].Item2)) \n                {\n                    \/\/ if present then add the 1st element of the current element to the list of elements present under the key\n                    answer[test_list[i].Item2].Add (test_list[i].Item1);\n                }\n                \/\/ else then\n                else \n","language":"csharp"}
{"task_id":"MBCSP\/692","completion":"\n            \/\/ write your code here\n            int result = 0;\n\n            for (int i = 2; i <= N; i++) {\n                result = result + (i % 10);\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/693","completion":"\n            string[] parts = Regex.Split (text1, @\"\\s{2,}\", RegexOptions.IgnoreCase);\n            return parts[0];\n        }","language":"csharp"}
{"task_id":"MBCSP\/694","completion":"\n            List<int> values = new List<int>();\n            foreach (var x in test_dict) \n            {\n                foreach (var y in test_dict[x])\n                {\n                    if (!values.Contains(y))\n                    {\n                        values.Add(y);\n                    }\n                }\n            }\n            return values;\n        }","language":"csharp"}
{"task_id":"MBCSP\/695","completion":"\n            int test_tup1_Length = test_tup1.Length;\n            int test_tup2_Length = test_tup2.Length;\n            int index = 0;\n\n            foreach (var test_tup1_item in test_tup1)\n            {\n                index++;\n\n                if (test_tup2[index] > test_tup1_item)\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/696","completion":"\n            \/\/Initialize a new List<object> to hold the zipped list\n            List<object> zippedList = new List<object>();\n            \n            \/\/For each element of the first list, append the element to the new list, \n            \/\/and for each element of the second list, append the element to the new list.\n            foreach(var list1Element in list1)\n            {\n                foreach(var list2Element in list2)\n                {\n                    zippedList.Add(new[] { list1Element, list2Element });\n                }\n            }\n            \n            \/\/Return the zipped list.\n            return zippedList;\n        }","language":"csharp"}
{"task_id":"MBCSP\/697","completion":"\n            return (int)Lambda.Count(array_nums, n => n % 2 == 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/698","completion":"\n            var dict = new Dictionary<List<int>, int>();\n\n            foreach (var item in test_dict)\n            {\n                var key = item.GetEnumerator();\n                var values = key.Select(x => x).ToArray();\n                dict.Add(values, test_dict[item]);\n            }\n\n            return dict;\n        }","language":"csharp"}
{"task_id":"MBCSP\/699","completion":"\n            \/\/ If strings are not equal\n            if (!str1.Equals(str2))\n            {\n                int length = Math.Abs(str1.Length - str2.Length);\n\n                \/\/ Initialize a table to hold all permutations of length\n                \/\/ 1, 2, ..., length\n                string[] lookup = new string[length * length];\n                int lookupIndex = 0;\n                for (int i = 0; i < length; i++)\n                {\n                    for (int j = 0; j < length; j++)\n                    {\n                        lookup[lookupIndex++] = str1[i] + str1[j];\n                    }\n                }\n\n                \/\/ Create a list of all the permutations of length length\n                \/\/ from the lookup table\n                List<string> lookupList = new List<string>(lookup);\n\n                \/\/ Create a binary min heap to hold the permutations\n                MinBinaryHeap<string> heap = new MinBinaryHeap<string>();\n\n                \/\/ Add all the permutations to","language":"csharp"}
{"task_id":"MBCSP\/700","completion":"\n            int count = 0;\n\n            foreach (var e in li)\n            {\n                if ((min != null &amp;&amp; e >= min) &amp;&amp; (max != null &amp;&amp; e &lt;= max))\n                    count++;\n            }\n            \n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/701","completion":"\n            var n = arr.Count;\n            if (n < 2) { return -1; }\n            var s = arr.Sum;\n            var leftSum = 0;\n            for (int i = 0; i < n; i++) { leftSum += arr[i]; }\n            if (s == leftSum) { return n; }\n\n            var rightSum = 0;\n            for (int i = n - 1; i >= 0; i--) { rightSum += arr[i]; }\n            if (s == rightSum) { return n - 1; }\n\n            var sum = 0;\n            for (int i = 0; i < n; i++) { sum += Math.abs(arr[i] - leftSum); }\n            if (s == sum) { return 0; }\n\n            sum = 0;\n            for (int i = n - 1; i","language":"csharp"}
{"task_id":"MBCSP\/702","completion":"\n            \/\/ write your code here\n            return arr.Where(x => x <= k).Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/703","completion":"\n            foreach (var pair in d.Values)\n            {\n                if (pair.Key == x)\n                    return true;\n            }\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/704","completion":"\n            var harmonicSum = 0.0;\n            var harmonicSumWithRecursion = 0.0;\n            if (n < 2)\n                return harmonicSum;\n            \n            for (int i = 0; i < n; i++) {\n                harmonicSumWithRecursion += 1.0 \/ (double)i;\n            }\n            \n            harmonicSum = (n - 1) * harmonicSumWithRecursion;\n            return harmonicSum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/705","completion":"\n            if (list1 == null || list1.Count() &lt;= 1) \n                return list1;\n            \n            var subLists = list1.SelectMany(x => List.Make(x.SelectMany(y => y)));\n            \n            \/\/sort sublists by length\n            subLists.OrderBy(x => x.Count(), true).ToList();\n            \n            \/\/sort sublists by value\n            subLists.OrderBy(x => x.Select(y => y).First(), true).ToList();\n            \n            return subLists.Select(x => x);\n        }","language":"csharp"}
{"task_id":"MBCSP\/706","completion":"\n            if (m > arr1.Count)\n                return false;\n            if (n > arr2.Count)\n                return false;\n            \n            for (int i = 0; i &lt; m; i++)\n            {\n                int index = arr1[i];\n                if (arr2.Count &lt;= n)\n                    return false;\n                int count = 0;\n                for (int j = 0; j &lt; arr2.Count; j++)\n                    if (arr2[j] == index)\n                        count++;\n                if (count &lt; arr2.Count)\n                    return false;\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/707","completion":"\n            \/\/ Use Bitwise AND to count the number of set bits\n            return (n & (n - 1)).ToInt32();\n        }","language":"csharp"}
{"task_id":"MBCSP\/708","completion":"\n            List<string> list = new List<string>();\n            if (string0.Length > 0)\n            {\n                string[] string1 = string0.Split(' ');\n                foreach (string string2 in string1)\n                {\n                    string[] string3 = string2.Split('');\n                    foreach (string string4 in string3)\n                    {\n                        list.Add(string4);\n                    }\n                }\n            }\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/709","completion":"\n            \/\/Initialize output to an empty dictionary.\n            Dictionary<int int=\"\"> output = new Dictionary<int int=\"\">();\n\n            \/\/For every list in the list of lists,\n            for (List<int> list: test_list)\n            {\n                \/\/Get the first element of the list.\n                int key = list.First();\n\n                \/\/For every second element of the list,\n                for (int i = 1; i &lt; list.Count; i++)\n                {\n                    \/\/Check if the second element is equal to the first element.\n                    if (list[i] == key)\n                    {\n                        \/\/If the second element is equal to the first element,\n                        \/\/then increment the value of the second element by one.\n                        list[i] += 1;\n                    }\n                    \/\/Else,\n                    else\n                    {\n                        \/\/If the second element is not equal to the first element,\n                        \/\/then add the second element to the dictionary.\n                ","language":"csharp"}
{"task_id":"MBCSP\/710","completion":"\n            int x = test_tup.First();\n            int y = test_tup.Last();\n\n            return test_tup.Where(x > y).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/711","completion":"\n            if (n > 0)\n            {\n                var s = \"\" + n;\n                var count = 0;\n                for (int i = 0; i < s.Length; i++)\n                {\n                    if (i % 2 == 0)\n                    {\n                        if (count == 0)\n                            count = s[i];\n                        else if (count != s[i])\n                            return false;\n                    }\n                }\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/712","completion":"\n            var unique = new List<object>();\n            foreach (var list in list1) \n            {\n                if (!unique.Any(x => x.Equals(list))) \n                {\n                    unique.Add(list);\n                }\n            }\n            return unique;\n        }","language":"csharp"}
{"task_id":"MBCSP\/713","completion":"\n            \/\/ 1st, define the regex pattern\n            Regex pattern = new Regex(@\"^(True|False)$\");\n            \/\/ 2nd, check if the given tuple contains all valid values\n            return test_tup.Select { t => pattern.IsMatch(t.ToString()) } \n                .Count() == test_tup.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/714","completion":"\n            int count = 0;\n            while (n > 1)\n            {\n                if (n % 2 != 0)\n                    count++;\n                n \/= 2;\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/715","completion":"\n            List<int> result = new List<int>();\n            using (Scanner scn = new Scanner(test_str))\n            {\n                while (scn.HasToken)\n                {\n                    result.Add(scn.NextInt());\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/716","completion":"\n            var k = a;\n            var area = 0;\n            while (k > 0) \n            {\n                if (k % 2 == 0)\n                    area = area + k;\n                k = k - 1;\n            }\n            return area;\n        }","language":"csharp"}
{"task_id":"MBCSP\/717","completion":"\n            var sd = 0;\n            foreach (var i in data)\n                sd += i - mean(data);\n\n            return Math.sqrt(sd \/ data.Count);\n        }","language":"csharp"}
{"task_id":"MBCSP\/718","completion":"\n            List<object> result = new List<object>();\n            for (int i = 0; i &lt; list1.Count(); i++)\n            {\n                result.Add(list1[i % list1.Count()]);\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/719","completion":" \n            return Regex.Matches(text, @\"ab*\") ? \"Found a match!\" : \"Not matched!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/720","completion":"\n            \/\/ create a tuple of length 4 using the List 'test_tup'\n            \/\/ add the dictionary 'test_dict' to the tuple\n            List<object> temp_tup = new List<object>();\n            int i = 0;\n            foreach (var e in test_tup)\n            {\n                temp_tup[i] = new object[] {e, test_tup[i], test_dict};\n                i++;\n            }\n\n            return temp_tup;\n        }","language":"csharp"}
{"task_id":"MBCSP\/721","completion":"\n            \/\/Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/722","completion":"\n            \/\/Write your code here\n            List<string> keys = new List<string>(students.Keys);\n            Dictionary<string, List<object>> filteredData = new Dictionary<string, List<object>>();\n\n            for(int i = 0; i<keys.Count; i++)\n            {\n                if(h<(double) students[keys[i]][0] &amp;&amp; w<(int) students[keys[i]][1])\n                {\n                    filteredData.Add(keys[i], students[keys[i]]);\n                }\n            }\n            return filteredData;\n        }","language":"csharp"}
{"task_id":"MBCSP\/723","completion":"\n            var map = new Dictionary<int int=\"\">();\n\n            for (int i = 0; i < nums1.Count; i++)\n            {\n                for (int j = 0; j < nums2.Count; j++)\n                {\n                    if (nums1[i] == nums2[j])\n                    {\n                        var count = map.TryGetValue(nums1[i], 0);\n                        count += 1;\n                        map[nums1[i]] = count;\n                    }\n                }\n            }\n            \n            var res = 0;\n            foreach (var item in map)\n            {\n                res += item.Value;\n            }\n\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/724","completion":"\n            var result = 0;\n            for (int i = 0; i < power; i++)\n            {\n                result += base;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/725","completion":"\n            var regex1 = @\"(?<=\\\")(.*?)(?=\\\")\";\n            Regex regex2 = new Regex(regex1);\n            var list = regex2.Matches(text1);\n            List<string> result = new List<string>();\n            foreach (Match match in list)\n            {\n                result.Add(match.Value);\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/726","completion":"\n            List<int> mult_tup = new List<int>();\n            for (int i = 0; i &lt; test_tup.Count; i++)\n                mult_tup.Add(test_tup[i] * 2);\n            return mult_tup;\n        }","language":"csharp"}
{"task_id":"MBCSP\/727","completion":"\n            \/\/Create Regex for all characters except letters and numbers\n            Regex regex = new Regex(@\"^[a-zA-Z0-9]+$\");\n            return regex.Replace(S, \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/728","completion":"\n            var result = lst1.OrderBy (x => x).Concat (lst2.OrderBy (x => x)).Select (x => x).ToList ();\n            result.Remove (result.Last ());\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/729","completion":"\n            return nums1.Select(n => n + nums2[n]).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/730","completion":"\n            var collection = new List<object>();\n\n            nums.ForEach (i => {\n                var temp = new List<object>();\n                temp.Add(i);\n\n                if (collection.Any(x => x.Equals(temp)))\n                    collection.Remove(temp);\n\n                collection.Add(temp);\n            });\n\n            collection.RemoveAt(collection.Count() - 1);\n\n            return collection;\n        }","language":"csharp"}
{"task_id":"MBCSP\/731","completion":"\n            \/\/Your code here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/732","completion":"\n            \/\/return text.Replace(Regex.Replace(text,\"[\\\\s|\\\\,|\\\\.]\",\":\"));\n            return Regex.Replace(text,\"[\\\\s|\\\\,|\\\\.]\",\":\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/733","completion":"\n            \/\/ Write your code here\n            int first = 0;\n            int last = A.Count - 1;\n            int result = -1;\n            while (first <= last)\n            {\n                int mid = (first + last) \/ 2;\n                if (A[mid] == x)\n                {\n                    result = mid;\n                    last = mid - 1;\n                }\n                else if (A[mid] > x)\n                {\n                    last = mid - 1;\n                }\n                else\n                {\n                    first = mid + 1;\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/734","completion":"\n            var result = 1;\n            if (n == 0 || n > arr.Count)\n                return 0;\n\n            for (int i = 0; i < n; i++)\n                result *= arr[i];\n\n            for (int i = 1; i < n; i++)\n                result *= result - arr[i - 1] + arr[i];\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/735","completion":"\n            \/\/ 4 = 100\n            \/\/ 7 = 111\n            return n ^ (n >> 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/736","completion":"\n            if (a.Count == 0)\n                return 0;\n            if (x > a[a.Count - 1])\n                return a.Count;\n\n            int lo = 0;\n            int hi = a.Count - 1;\n\n            while (lo != hi)\n            {\n                int mid = (lo + hi) >> 1;\n\n                if (x > a[mid])\n                    lo = mid + 1;\n                else\n                    hi = mid;\n            }\n\n            return lo;\n        }","language":"csharp"}
{"task_id":"MBCSP\/737","completion":"\n            if (Regex.IsMatch(string0, @\"^[aeiouAEIOU].*$\", RegexOptions.IgnoreCase))\n            {\n                return \"Valid\";\n            }\n            else\n            {\n                return \"Invalid\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/738","completion":"\n            if (n == 1)\n                return 1.0;\n\n            return (1.0 * (1.0 + GeometricSum (n - 1.0)));\n        }","language":"csharp"}
{"task_id":"MBCSP\/739","completion":"\n            \/\/ Write your code here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/740","completion":"\n            Dictionary<int, int> dict = new Dictionary<int, int>();\n            foreach (var elem in test_tup)\n            {\n                if (dict.TryGetValue(elem, out int_old, out int_new))\n                {\n                    int_old += int_new;\n                    dict.Remove(elem);\n                }\n\n                dict.Add(elem, int_new);\n            }\n\n            return dict;\n        }","language":"csharp"}
{"task_id":"MBCSP\/741","completion":"\n            \/\/ write your code here\n            var m = s.GetHashCode();\n            var n = s.GetHashCode();\n            m ^= (m >> 16);\n            n ^= (n >> 16);\n            return m == n;\n        }","language":"csharp"}
{"task_id":"MBCSP\/742","completion":"\n            \/\/ Your code goes here\n        }","language":"csharp"}
{"task_id":"MBCSP\/743","completion":"\n            List<int> list = new List<int>();\n            int k = list1.Count - m;\n            if (k > 0)\n            {\n                int j = n - 1;\n                while (j >= 0)\n                {\n                    int l = k - 1;\n                    list.Add(list1[l]);\n                    list1 = list1.RemoveAt(l);\n                    j = j - 1;\n                }\n                list.Add(list1[0]);\n                list1 = list1.RemoveAt(0);\n                return list;\n            }\n            else\n            {\n                return list1;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/744","completion":"\n            var i = 0;\n            var count = test_tup.Count;\n            while (i &lt; count)\n            {\n                if (test_tup[i] == null)\n                {\n                    return true;\n                }\n                i++;\n            }\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/745","completion":"\n            List<int> result = new List<int>();\n            int temp = startnum;\n            while (temp <= endnum) \n            {\n                List<int> tempList = DivisibleByDigitsForNumber(temp);\n                result.AddRange(tempList);\n                temp++;\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/746","completion":"\n            \/\/ write your code here\n            return null; \/\/ remove this line and add your logic\n        }","language":"csharp"}
{"task_id":"MBCSP\/747","completion":"\n            int[][] L = new int[m+1][n+1];\n            for (int i = 1; i <= m; i++)\n            {\n                for (int j = 1; j <= n; j++)\n                {\n                    if (X[i-1] == Y[j-1] && X[i-1] == Z[i-1])\n                    {\n                        L[i][j] = L[i-1][j-1] + 1;\n                    }\n                    else if (L[i-1][j] >= L[i][j-1])\n                    {\n                        L[i][j] = L[i-1][j];\n                    }\n                    else\n                    {\n                        L[i][j] = L[i][j-1];\n                    }\n                }\n            }\n            return L[m][n];\n        }","language":"csharp"}
{"task_id":"MBCSP\/748","completion":"\n            Regex r = new Regex ( \"(?i)([A-Z])\\\\w+\" );\n            string str = str1.Replace (r, \"$1 \");\n            return str;\n        }","language":"csharp"}
{"task_id":"MBCSP\/749","completion":"\n            \/\/ Create a List of Integers to be returned\n            List<int> numbers = new List<int>();\n\n            \/\/ Use Linq to loop through the List of Strings\n            \/\/ for each String in the list, use Regex to extract the\n            \/\/ integer value from the String and add it to the list.\n            foreach (var num in nums_str)\n            {\n                \/\/ Regex expression to extract a integer from a String\n                Regex regex = new Regex(\"([-]?\\\\d*)\");\n                var num_int = regex.Match(num).Value;\n\n                numbers.Add(num_int);\n            }\n\n            return numbers;\n        }","language":"csharp"}
{"task_id":"MBCSP\/750","completion":"\n            \/\/ Add the tuple to the list.\n            test_list.AddRange(test_tup);\n\n            return test_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/751","completion":"\n            \/\/ your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/752","completion":"\n            \/\/ Your code goes here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/753","completion":"\n            \/\/ Your code goes here\n            return test_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/754","completion":"\n            var results = new List<int>();\n\n            \/\/ Find the first item in each list that is not present in the other two lists\n            for (var item1 of l1) \n            {\n                var isPresent1 = false;\n                for (var item2 of l2)\n                {\n                    if (item1 == item2) \n                    {\n                        isPresent1 = true;\n                        break;\n                    }\n                }\n\n                if (!isPresent1) \n                {\n                    results.Add(item1);\n                }\n            }\n\n            \/\/ Find the first item in each list that is not present in the other three lists\n            for (var item1 of l1) \n            {\n                var isPresent1 = false;\n                for (var item2 of l2)\n                {\n                    for (var item3 of l3)\n                    {\n                        if (item1 == item3 || item2 == item3) \n                        {","language":"csharp"}
{"task_id":"MBCSP\/755","completion":"\n            if (numbers.Count &lt;= 1) \n            {\n                return null;\n            }\n\n            return numbers.OrderByDescending(a => a).Take(2).First();\n        }","language":"csharp"}
{"task_id":"MBCSP\/756","completion":"\n            Regex regex = new Regex(@\"^\\\\w\\\\w(b*\\\\w)?$\");\n            MatchCollection matches = regex.Matches(text);\n            if (matches.Count > 0) {\n                string firstMatch = matches[0].Value;\n                if (string.CompareTo(firstMatch, \"ab\") > 0)\n                    return \"Not matched!\";\n                return \"Found a match!\";\n            }\n            else\n                return \"Not matched!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/757","completion":"\n            \/\/ TODO\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/758","completion":"\n            Dictionary<object, int> result = new Dictionary<object, int>();\n            \n            foreach (var item in list1)\n            {\n                var unique = item;\n                int count = 1;\n                result.Add(unique, count);\n                foreach (var other in list1)\n                {\n                    if (other != unique)\n                    {\n                        if (list1.Exists(other, item.CompareTo(other)))\n                        {\n                            result[unique] += result[other];\n                            result[other] = 0;\n                        }\n                    }\n                }\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/759","completion":"\n            var precision = 2;\n            var regex = new Regex(@\"^(\\\\d*)\\\\.\\\\d{0,\" + precision + \"}$\");\n            return regex.IsMatch(num);\n        }","language":"csharp"}
{"task_id":"MBCSP\/760","completion":"\n            var distinct = new int[n];\n            var count = 0;\n            foreach (var element in arr)\n            {\n                distinct[element]++;\n                if (distinct[element] > 1)\n                {\n                    return \"NO\";\n                }\n            }\n            return \"YES\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/761","completion":"\n            return Math.Abs((Math.PI * (d * a)) \/ 180.0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/762","completion":"\n            return monthnum3 % 3 == 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/763","completion":"\n            return FindMinDiff(arr, n, 0, 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/764","completion":"\n            if (str == null) return 0;\n            string[] strParts = Regex.Split(str, @\"\\D*\");\n            return strParts.Length;\n        }","language":"csharp"}
{"task_id":"MBCSP\/765","completion":"\n            \/\/ Add your code here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/766","completion":"\n            List<List<int>> result = new List<List<int>>();\n            if (l1.Count == 0)\n                return result;\n\n            int end = l1.Last();\n\n            int start = l1.First();\n\n            result.Add(new List<int>(start, end));\n\n            int length = l1.Count - 1;\n\n            for (int i = 1; i < length; i++)\n            {\n                start = l1[i];\n                end = l1[i + 1];\n                result.Add(new List<int>(start, end));\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/767","completion":"\n            int count = 0;\n            int min = Math.min(arr.Count, n);\n            int max = Math.max(arr.Count - min, n - 1);\n\n            var matcher = new Regex.Pattern(\n                \"(\\\\-?\\\\d*)\\\\s*(\\\\-?\\\\d*)\"\n            ).GenerateKeys();\n\n            for (int i = min; i <= max; i++)\n            {\n                var match = arr[i];\n                if (matcher.ExactMatch(match))\n                {\n                    count++;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/768","completion":"\n            if (x < 0) \n            {\n                throw new ArgumentOutOfRangeException(\"Number must be non-negative\");\n            }\n\n            int sum = 0;\n            for (int i = 0; i < x.Length; i++) \n            {\n                if (x[i] % 2 != 0) \n                {\n                    sum++;\n                }\n            }\n            return (sum % 2 == 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/769","completion":"\n            \/\/  Write your code here.\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/770","completion":"\n            \/\/ Create an int variable to store the sum of the fourth power of all the odd natural numbers less than or equal to n.\n            var sum = 0;\n            \n            \/\/ Start a for loop that iterates through the natural numbers from 1 to n.\n            for (var i = 1; i <= n; i++)\n            {\n                \/\/ If the number is divisible by 3, add the third power to the sum.\n                if (i % 3 == 0)\n                {\n                    sum += 3 * (i * i);\n                }\n                \n                \/\/ If the number is divisible by 4, add the fourth power to the sum.\n                if (i % 4 == 0)\n                {\n                    sum += 4 * (i * i * i);\n                }\n            }\n            \n            \/\/ Return the value of the sum.\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/771","completion":"\n            var patt = new Regex(@\"^\\\\{|\\\\}|\\\\(\\\\)|\\\\[\\\\]|\\\\[\\\\]\\\\(\\\\)\");\n            return patt.Matches(exp);\n        }","language":"csharp"}
{"task_id":"MBCSP\/772","completion":"\n\n            \/\/ Create a Pattern object with \n            \/\/ - word characters: \\w\n            \/\/ - whitespace characters: \\s\n            \/\/ - any whitespace characters: \\S\n            \/\/ - a global match\n            var pattern = Regex.CompiledRegex(@\"\\w+\\s\\S\\w+\");\n\n            \/\/ Split the input string by the regex\n            var words = test_str.Split(pattern, RegexOptions.Multiline);\n\n            \/\/ Loop through the words and remove the words with K length\n            for (var i = 0; i < words.Count; i++)\n            {\n                if (words[i].Length == K)\n                {\n                    words[i] = \"\";\n                }\n            }\n\n            \/\/ Join the array back by the regex\n            var result = words.Join(pattern, RegexOptions.Multiline);\n\n            \/\/ Return the new string\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/773","completion":"\n\n        }","language":"csharp"}
{"task_id":"MBCSP\/774","completion":"\n            \/\/ email = email.Replace (new string @ \".\", \"\");\n            \/\/ email = email.Replace (new string @ \"@\", \"\");\n            \/\/ email = email.Replace (new string @ \".\", \"\");\n            \/\/ email = email.Replace (new string @ \".\", \"\");\n            \/\/ email = email.Replace (new string @ \".\", \"\");\n            \/\/ email = email.Replace (new string @ \".\", \"\");\n            \/\/ email = email.Replace (new string @ \".\", \"\");\n            email = email.Replace (new string @ \".\", \"\");\n            email = email.Replace (new string @ \".\", \"\");\n            email = email.Replace (new string @ \".\", \"\");\n            email = email.Replace (new string @ \".\", \"\");\n            email = email.Replace (new string @ \".\", \"\");\n            email = email.Replace (new string @ \".\", \"\");\n            email = email.","language":"csharp"}
{"task_id":"MBCSP\/775","completion":"\n            if (nums.Count(x => x % 2 == 0))\n            {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/776","completion":"\n            int count = 0;\n            var vowels = \"aeiou\";\n            var regex = Regex.Create(\"(?i)[^aeiou]+[aeiou]\");\n            \n            foreach (Match match in regex.Matches(test_str))\n            {\n                count += (match.Length - 1);\n            }\n            \n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/777","completion":"\n            \/\/ Initialize an empty list of counts to store the counts of all numbers \n            var counts = new List<int>();\n\n            \/\/ Iterate through the array \n            for (int x : arr)\n            {\n                \/\/ If the current number is present in the counts list then the index at which it is located \n                \/\/ in the list is incremented by 1. \n                if (counts.Contains(x))\n                    counts[x]++;\n                \/\/ If the current number is not present in the counts list then a new index is added to the list \n                \/\/ and its count is set to 1.\n                else\n                {\n                    counts.Add(x, 1);\n                }\n            }\n\n            \/\/ Iterate through the counts list and find the number whose count is equal to the number of occurrences \n            \/\/ of the number in the array and return it. \n            for (int i = 0; i &lt; counts.Count; i++)\n            {\n                if (counts[i] == n)\n                ","language":"csharp"}
{"task_id":"MBCSP\/778","completion":"\n            \/\/ Write your code here.\n        }","language":"csharp"}
{"task_id":"MBCSP\/779","completion":"\n            Dictionary<object, int> results = new Dictionary<object, int>();\n\n            \/\/ This is the base case of the recursion (the \"base case\" is when the list has no sublists):\n            if (list1.Count == 0)\n            {\n                results.Add(list1[0], 1);\n                return results;\n            }\n\n            \/\/ Create a copy of the list, with the first element removed:\n            List<object> list2 = list1.Take(1);\n\n            \/\/ Recursively call this function to find the sublists:\n            Dictionary<object, int> sublists = UniqueSublists(list2);\n\n            \/\/ Now, for each sublists in the list, add the length to the key:\n            for (KeyValuePair<object, int> sublist : sublists.Keys)\n                results.Add(sublist.Value1, results[sublist.Value1] + sublists[sublist.Value1]);\n\n            \/\/ Return the results:\n            return results;\n        }","language":"csharp"}
{"task_id":"MBCSP\/780","completion":"\n            \/\/ code goes here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/781","completion":"\n            var divisors = (1..n).Aggregate(\n                (divisor) => (n % divisor == 0) ? divisor : null\n            );\n            return divisors.Any() == null ? \"Even\" : \"Odd\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/782","completion":"\n            \/\/ Your code here\n            \/\/return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/783","completion":"\n            \/\/ Convert color to HSV\n            var hsv = new List<object> { { 0.0 }, { 0.0 }, { 0.0 } };\n            hsv[0].Add (r \/ 255.0);\n            hsv[1].Add (g \/ 255.0);\n            hsv[2].Add (b \/ 255.0);\n            var hsv_max = Max (hsv);\n            var hsv_min = Min (hsv);\n            var hsv_max_val = Max (hsv[0], hsv[1], hsv[2]);\n            var hsv_min_val = Min (hsv[0], hsv[1], hsv[2]);\n            hsv[0].Add (hsv_max_val);\n            hsv[1].Add (hsv_max_val);\n            hsv[2].Add (hsv_max_val);\n            var hsv_s = 1.0 - (hsv_max_","language":"csharp"}
{"task_id":"MBCSP\/784","completion":"\n            var odd = list1.Where(a => a % 2 == 1);\n            var even = list1.Where(a => a % 2 == 0);\n\n            return even.Select(a => a * 2).Union(odd.Select(a => a * 2));\n        }","language":"csharp"}
{"task_id":"MBCSP\/785","completion":"\n            \/\/ Convert string to tuple\n            var res = Regex.Match(test_str, @\"^(\\d+),(\\d+),(\\d+)$\", RegexOptions.Multiline)\n            if (res.Success)\n            {\n                return new[]\n                    {\n                        int.Parse(res[1]),\n                        int.Parse(res[2]),\n                        int.Parse(res[3])\n                    }\n            }\n            else\n                throw new ArgumentException(String.Format(\"Invalid format for string {0}\", test_str));\n        }","language":"csharp"}
{"task_id":"MBCSP\/786","completion":"\n            int low = 0, high = a.Count - 1;\n            while (low &lt; high)\n            {\n                int mid = (low + high) >>> 1;\n                if (x &lt; a[mid])\n                {\n                    high = mid;\n                }\n                else\n                {\n                    low = mid + 1;\n                }\n            }\n            return low;\n        }","language":"csharp"}
{"task_id":"MBCSP\/787","completion":"\n            \/\/match the string and capture the substring that matches the pattern\n            Regex regex = new Regex(@\"\\a\\b\\b\\b\\b\");\n            Match match = regex.Match(text);\n\n            if (match.Success)\n            {\n                \/\/match returns a match object that contains a MatchCollection object that\n                \/\/has a MatchCollection.Groups property that is an array of MatchCollection.Groups that\n                \/\/contains the groups that matched.\n                return match.Groups[0].Value;\n            }\n            else\n            {\n                return \"Not matched!\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/788","completion":"\n            var test_list2 = test_list.ToArray();\n            var test_list3 = test_list2.Add(test_str);\n            return test_list3.ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/789","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/790","completion":"\n            \/\/Write your code here.\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/791","completion":"\n            List<object> flat_list = new List<object>();\n            for (int i = 0; i &lt; test_tup.Count; i++)\n            {\n                flat_list.AddRange(test_tup[i]);\n            }\n            return flat_list.Select(o => o).Distinct().OrderBy(a => a);\n        }","language":"csharp"}
{"task_id":"MBCSP\/792","completion":"\n            int count = 0;\n            foreach (var list in input_list)\n            {\n                count += list.Count();\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/793","completion":"\n            \/\/ write your code here\n            int lo=0;\n            int hi=n-1;\n            while(lo &lt; hi){\n                int mid = lo + (hi-lo)\/2;\n                if(arr[mid] == x){\n                    return mid;\n                }\n                if(arr[mid] > x){\n                    hi=mid;\n                }else{\n                    lo=mid+1;\n                }\n            }\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/794","completion":"\n            if (Regex.IsMatch(text, @\"a{1,}b\", RegexOptions.IgnoreCase))\n            {\n                return \"Found a match!\";\n            }\n            return \"Not matched!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/795","completion":"\n            \/\/ Write your code here.\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/796","completion":"\n            \/\/ Initialize sum to zero\n            int sum = 0;\n            foreach (var entry in dict) \n            {\n                \/\/ Add the value of the dictionary entry to sum\n                sum += dict[entry];\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/797","completion":"\n            \/\/TODO: Write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/798","completion":"\n            \/\/ Get the sum of the array using reduce\n            return arr.reduce(\n                (p, c) => p + c, \/\/ starting value of the accumulator\n                0                  \/\/ starting value of the accumulator\n            );\n        }","language":"csharp"}
{"task_id":"MBCSP\/799","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/800","completion":"\n            Regex re = new Regex(@\"[\\s\\t\\n\\r]+\");\n            return re.Replace(text, \"\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/801","completion":"\n            int count = 0;\n            if (x == y && y == z)\n                count++;\n            \n            if (x != y && y != z)\n                count++;\n            \n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/802","completion":"\n            List<int> rotated = arr.ToList().Reverse().ToList();\n            return (int)RotationCount(rotated, 0, n - 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/803","completion":"\n            return n == (Math.pow(n, 0.5));\n        }","language":"csharp"}
{"task_id":"MBCSP\/804","completion":"\n            return arr.Count(i => i * n) == arr.Count(i => i * n \/ n);\n        }","language":"csharp"}
{"task_id":"MBCSP\/805","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/806","completion":"\n            return 5;\n        }","language":"csharp"}
{"task_id":"MBCSP\/807","completion":"\n            \/\/ write the body of your function here\n            int count=0,i;\n            for (i=0;i<nums.Length;i++) \n            {\n                if (nums[i]%2==1)\n                {\n                    count=nums[i];\n                    break;\n                }\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/808","completion":"\n            var result = new List<bool>();\n\n            foreach (var i in test_tup)\n            {\n                result.Add(test_tup[i] == K);\n            }\n            return result.ElementAt(0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/809","completion":"\n            for (int i = 0; i &lt; test_tup2.Count; i++)\n            {\n                if (test_tup2[i] &lt; test_tup1[i])\n                {\n                    return false;\n                }\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/810","completion":"\n            \/\/ Create a list of Integers to hold the original elements\n            List<integer> input = new List<integer>();\n\n            \/\/ Iterate over all the elements to populate the list\n            foreach (int i in 0..a)\n            {\n                input.Add(i);\n            }\n\n            \/\/ Create a list of Strings to hold the result\n            List<string> result = new List<string>();\n\n            \/\/ Iterate over the input list\n            foreach (int i in 0..input.Count)\n            {\n                \/\/ Get the current element\n                int x = input[i];\n\n                \/\/ Make the result list unique\n                if (!result.Contains(x.ToString()))\n                {\n                    \/\/ Add the current element to the result list\n                    result.Add(x.ToString());\n                }\n\n                \/\/ Repeat the current element for the count specified\n                for (int j = 0; j &lt; b; j++)\n                {\n                    \/\/ Add the current element to the result list\n                    result.Add(x","language":"csharp"}
{"task_id":"MBCSP\/811","completion":"\n            \/\/ Solution:\n            return test_list1.Where(t => test_list2.Any(st => st.Any(v => t[0] == v[0] &amp;&amp; t[1] == v[1]))).Any();\n        }","language":"csharp"}
{"task_id":"MBCSP\/812","completion":"\n            return Regex.Replace(street, @\"\\s*road\\s*\", \" Rd.\", RegexOptions.IgnoreCase);\n        }","language":"csharp"}
{"task_id":"MBCSP\/813","completion":"\n            \/\/\n            \/\/ Write your code here.\n            \/\/\n            return str1.Length;\n        }","language":"csharp"}
{"task_id":"MBCSP\/814","completion":"\n            \/\/ Create a list of all possible combinations of p and q\n            List<int> combinations = \n                combinations(p, q).ToList<int>();\n\n            \/\/ Find the area of all combinations and return\n            return\n                combinations.Where(x => x.Sum() == p*q).Count()\n                    * p * q;\n        }","language":"csharp"}
{"task_id":"MBCSP\/815","completion":"\n            List<int> result = new List<int>();\n            List<int> temp = new List<int>();\n            for (int i = 0; i < n; i++) \n            {\n                if (arr[i] == 0) \n                {\n                    temp.Add(arr[i]);\n                }\n                else if (arr[i] == 1) \n                {\n                    result.Add(arr[i]);\n                }\n            }\n            for (int i = 0; i < n; i++) \n            {\n                if (arr[i] == 0) \n                {\n                    result.Add(temp[0]);\n                    temp.RemoveAt(0);\n                }\n            }\n            result.AddRange(temp);\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/816","completion":"\n            \/\/Write your code here.\n            return new List<object>();\n        }","language":"csharp"}
{"task_id":"MBCSP\/817","completion":"\n            \/\/Implement this function yourself\n            return \n        }","language":"csharp"}
{"task_id":"MBCSP\/818","completion":"\n            \/\/ Solution code here...\n            int lowerCaseCount = 0;\n            foreach (char letter in str)\n            {\n                if (letter.ToLowerInvariant() == letter)\n                {\n                    lowerCaseCount++;\n                }\n            }\n            return lowerCaseCount;\n        }","language":"csharp"}
{"task_id":"MBCSP\/819","completion":"\n            List<List<int>> result = new List<List<int>>();\n            List<int> result1 = new List<int>();\n\n            for (int i = 0; i < lists.Count; i++)\n            {\n                int num = lists[i];\n                int count = 0;\n                for (int j = 0; j < lists.Count; j++)\n                {\n                    if (num == lists[j])\n                    {\n                        count++;\n                    }\n                }\n                if (count > 1)\n                {\n                    result1.Add(num);\n                    result1.Add(count);\n                }\n            }\n            result.Add(result1);\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/820","completion":"\n            return monthnum1 > 0 && monthnum1 < 13;\n        }","language":"csharp"}
{"task_id":"MBCSP\/821","completion":"\n            Dictionary<string, string> mergedDictionary = new Dictionary<string, string>();\n            mergedDictionary = (Dictionary<string, string>) dict1.Intersect(dict2);\n            mergedDictionary = (Dictionary<string, string>) dict1.Union(dict2);\n\n            return mergedDictionary;\n        }","language":"csharp"}
{"task_id":"MBCSP\/822","completion":"\n            return Regex.IsMatch(p, \"^([A-Za-z0-9@$!%*#?&]{6,})$\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/823","completion":"\n            \/\/Write your code here\n            Regex regex = new Regex(@\"^(?<sample>.*?\" + sample + \".*?)$\");\n            return Regex.Match(string0, regex);\n        }","language":"csharp"}
{"task_id":"MBCSP\/824","completion":"\n            \/\/ ... code to remove even numbers from the list goes here.\n            \/\/ Remove even numbers from the list.\n            var even = l.Where(x => x % 2 == 0).ToList();\n            return even;\n        }","language":"csharp"}
{"task_id":"MBCSP\/825","completion":"\n            \/\/ Your code goes here.\n        }","language":"csharp"}
{"task_id":"MBCSP\/826","completion":"\n            if ((a + b > c) && (b + c > a) && (a + c > b)) \n            {\n                return \"Right-angled Triangle\";\n            }\n            else if ((a + b > c) && (a + c > b)) \n            {\n                return \"Acute-angled Triangle\";\n            }\n            else if ((b + c > a) && (b + a > c)) \n            {\n                return \"Obtuse-angled Triangle\";\n            }\n            else \n            {\n                return \"Invalid Triangle\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/827","completion":"\n            int sum = 0;\n            foreach (int [] row in list1)\n            {\n                sum += row [C];\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/828","completion":"\n            var string1 = Regex.Replace(string0, \"[^a-zA-Z0-9]\", \"\");\n            string1 = Regex.Replace(string1, \"[^a-zA-Z]\", \"\");\n            string1 = Regex.Replace(string1, \"[^0-9]\", \"\");\n            List<int> list = new List<int>();\n            list.Add(string1.Length);\n            list.Add(string1.ToCharArray().Select(p => p.ToInt32()).Sum());\n            list.Add(string1.Split(new char[] { '#' }).Select(p => p.Length).Sum());\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/829","completion":"\n            \/\/ Your code goes here\n            \/\/ Your function should return the second most repeated or frequent string in the given sequence\n            \/\/ If the input sequence contains no strings, return null\n            if(input.Count == 0)\n                return null;\n            var unique = new HashSet<string>();\n            var frequency = new Dictionary<string int=\"\">();\n            input.ForEach(x => unique.Add(x));\n            input.ForEach(x => frequency[x] = frequency.ContainsKey(x) ? frequency[x] + 1 : 1);\n            var secondMaxFrequency = 0;\n            var secondMaxFrequencyString = \"\";\n            frequency.ForEach(x => x.Value > secondMaxFrequency &amp;&amp; (secondMaxFrequency = x.Value, secondMaxFrequencyString = x.Key));\n            return secondMaxFrequencyString;\n        }","language":"csharp"}
{"task_id":"MBCSP\/830","completion":"\n            int q = (int)(Math.pow(10, digits));\n            return (int)Math.ceil(a * q) \/ q;\n        }","language":"csharp"}
{"task_id":"MBCSP\/831","completion":"\n            \/\/ Start typing your solution here.\n            \/\/ You should write your own code.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/832","completion":"\n            Regex regex = new Regex (\"^(\\\\D*)([0-9]+)$\");\n\n            return regex.Matches(input).FirstOrDefault(x => x.Groups[1].Sum() > x.Groups[2].Sum());\n        }","language":"csharp"}
{"task_id":"MBCSP\/833","completion":"\n            \/\/ write your code here\n            List<int> keys = new List<int>();\n            foreach(var item in dict)\n            {\n                keys.Add(item.Key);\n            }\n            return keys;\n        }","language":"csharp"}
{"task_id":"MBCSP\/834","completion":"\n            List<List<int>> result = new List<List<int>>();\n\n            \/\/ Get the number of rows and cols\n            int rows = (int)Math.pow(2, n);\n            int cols = (int)Math.pow(2, n);\n\n            \/\/ Create an array to hold the values\n            int[] values = new int[cols];\n\n            \/\/ Populate the values array with the values\n            for (int i = 0; i < cols; i++)\n                values[i] = (int)Math.pow(2, i);\n\n            \/\/ Create a row pointer and start at the top row\n            int row = 0;\n\n            \/\/ Create a column pointer and start at the left column\n            int col = 0;\n\n            \/\/ Loop while we have enough values to fill the matrix\n            while (row < rows && col < cols)\n            {\n                \/\/ Create a result list and add the new row\n                result.Add(new List<int> { values[row] });\n\n                \/\/ Loop","language":"csharp"}
{"task_id":"MBCSP\/835","completion":"\n            return (y2 - y1) \/ (x2 - x1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/836","completion":"\n            int sum = 0, max = 0, i, j, n = a.Length;\n            if (n > size)\n            {\n                i = 0;\n                j = n - size;\n                while (j < n)\n                {\n                    sum = sum + a[j++];\n                    if (max < sum)\n                    {\n                        max = sum;\n                    }\n                    if (sum <= 0)\n                    {\n                        sum = 0;\n                        i = i + 1;\n                    }\n                }\n                return max;\n            }\n            else\n            {\n                return 0;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/837","completion":"\n            \/\/Initialize variables\n            int sum = 0;\n            int cube = 0;\n            int count = 1;\n            int i = 0;\n\n            \/\/While loop to find the cube sum of first n odd natural numbers\n            while (count <= n)\n            {\n                cube = (i * i * i);\n                \/\/Add cube to sum and increment count\n                sum += cube;\n                count++;\n                i++;\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/838","completion":"\n            string s3 = \"\";\n            int minSwaps = 0;\n            int i = 0;\n            int j = 0;\n            while (i < s1.Length && j < s2.Length)\n            {\n                char c1 = s1[i];\n                char c2 = s2[j];\n                if (c1 != c2)\n                {\n                    s3 += c1;\n                    s3 += c2;\n                    minSwaps++;\n                }\n                i++;\n                j++;\n            }\n            return (s3.Length == s1.Length || s3.Length == s2.Length) ? 0 : minSwaps;\n        }","language":"csharp"}
{"task_id":"MBCSP\/839","completion":"\n            List<object> key = new List<object>();\n            key.Add(tup.Select(s => s[0]));\n            key = List.Sort(key);\n            key = key.Select(s => tup.Where(t => t[0] == s).Select(t => t.Select(c => c[1])));\n            return key;\n        }","language":"csharp"}
{"task_id":"MBCSP\/840","completion":"\n            if (Math.Abs(b) > 0 && Math.Abs(c) > 0)\n            {\n                if (a > 0)\n                {\n                    if (b > 0 && c > 0)\n                    {\n                        return \"Yes\";\n                    }\n                    else if (b < 0 && c < 0)\n                    {\n                        return \"Yes\";\n                    }\n                    else\n                    {\n                        return \"No\";\n                    }\n                }\n                else\n                {\n                    if (b > 0 && c < 0)\n                    {\n                        return \"Yes\";\n                    }\n                    else if (b < 0 && c > 0)\n                    {\n                        return \"Yes\";\n                    }\n                    else\n                    {\n                        return \"No\";\n                    }\n                }","language":"csharp"}
{"task_id":"MBCSP\/841","completion":"\n            \/\/ write your code here.\n        }","language":"csharp"}
{"task_id":"MBCSP\/842","completion":"\n            \/\/ write your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/843","completion":"\n            List<int> uglyNumbers = new List<int>();\n            heap queue = new heap (1, 1, 0);\n            for (int i = 0; i < n; i++)\n            {\n                while (!queue.IsEmpty())\n                {\n                    int top = (int) queue.Pop();\n                    if (top != uglyNumbers.Last())\n                        break;\n                    for (int prime : primes)\n                        if (top % prime == 0)\n                            queue.Enqueue(top * prime);\n                }\n                uglyNumbers.Add(queue.Pop());\n            }\n            return uglyNumbers.Last();\n        }","language":"csharp"}
{"task_id":"MBCSP\/844","completion":"\n            \/\/Write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/845","completion":"\n            if (n < 10)\n                return 1;\n\n            int count = 0;\n            for (int i = 9; i <= n; i *= 10)\n                count += FindDigits(n \/ i);\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/846","completion":"\n            \/\/ 1. Sort the array in descending order and store it in an array \"arr\".\n            arr.Sort ( (a,b) => b - a);\n\n            \/\/ 2. Sort the array in ascending order and store it in an array \"dep\".\n            dep.Sort ( (a,b) => a - b);\n\n            \/\/ 3. Check if the required platforms are present in the array.\n            var missingPlatforms = 0;\n            for (int i = 0; i &lt; n; i++) \n            {\n                if (arr[i] &lt; dep[i]) \n                {\n                    missingPlatforms++;\n                }\n            }\n\n            return missingPlatforms;\n        }","language":"csharp"}
{"task_id":"MBCSP\/847","completion":"\n            return xs;\n        }","language":"csharp"}
{"task_id":"MBCSP\/848","completion":"\n            var area = 0;\n\n            \/\/calculate area\n            area = 0.5 * (base1 + base2) * height;\n\n            return area;\n        }","language":"csharp"}
{"task_id":"MBCSP\/849","completion":"\n            \/\/ write your code here\n        }","language":"csharp"}
{"task_id":"MBCSP\/850","completion":"\n            \/\/Your code goes here\n        }","language":"csharp"}
{"task_id":"MBCSP\/851","completion":"\n            var divisor = Math.Max(1, N % 2 == 0 ? N \/ 2 : N * 3 + 1);\n\n            var sum = 0;\n            for (var i = 1; i < divisor; i++)\n                if (N % i == 0)\n                    sum += 1.0 \/ i;\n\n            if (divisor == N)\n                sum = 1.0;\n\n            return Sum + sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/852","completion":"\n            if (num_list.Count(x => x &lt; 0) > 0)\n            {\n                num_list.RemoveRange(0, num_list.Count(x => x &lt; 0));\n            }\n            return num_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/853","completion":"\n            \/\/ return 0;\n            return n \/ 2 * (n + 1) \/ 2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/854","completion":"\n            \/\/\/ <summary> This function accepts an arbitrary list and converts it to a heap using heap queue algorithm. <\/summary>\n            \/\/\/ <param name=\"rawheap\"\/> A list containing the initial values of the heap.\n            \/\/\/ <returns> A list of the values of the heap ordered by their distance from the root (lowest value) <\/returns>\n            \/\/\/ <remarks>\n            \/\/\/ In the case of a list of negative values, the function sorts the list ascendingly and returns the list.\n            \/\/\/ <\/remarks>\n            if (rawheap == null || rawheap.Count == 0)\n                return new List<int>();\n\n            List<int> heap = new List<int>();\n            int current = 0;\n            int parent = (int)((rawheap.Last - rawheap.First) \/ 2);\n\n            heap.Add(rawheap[0]);\n\n            \/\/ Get the elements of the list and put it into the heap.\n            for (int i = 1; i < raw","language":"csharp"}
{"task_id":"MBCSP\/855","completion":"\n            \/\/ write your code here\n            if (x % 2 == 0)\n            {\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/856","completion":"\n            if (arr == null) \n            {\n                return 0;\n            }\n\n            int count = 0;\n            int lastPos = 0;\n            for (int i = 1; i &lt; n; i++)\n            {\n                if (arr[i - 1] > arr[i])\n                {\n                    count += 1;\n                    lastPos = i;\n                }\n            }\n\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/857","completion":"\n            \/\/ Write your code here\n            List<list>> list2 = new List<list>>();\n\n            for(int i = 0; i &lt; list1.Count; i++)\n            {\n                var string1 = list1[i];\n                var string2 = string1.Split(new Regex(\"^[ ]*\"), new List<string>());\n                list2.Add(string2);\n            }\n\n            return list2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/858","completion":"\n            var n = 0;\n            for (var item in input_list) \n            {\n                if (item is List) \n                {\n                    n = n + CountList((List<object>) item);\n                } \n                else \n                {\n                    n = n + 1;\n                }\n            }\n            return (int) Math.pow(n, 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/859","completion":"\n            List<object> result = new List<object>();\n            result.AddRange(my_list);\n            List<object> temp = result;\n            result = new List<object>();\n            for (int i = 0; i &lt; (temp.Count - 1); i++)\n            {\n                result.AddRange(temp.GetRange(i, (i + 1)));\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/860","completion":"\n            \/\/Write your code here\n            var regx = Regex.Match(string0, @\"\\w+$\");\n            if (regx.Success)\n                return \"Accept\";\n            else\n                return \"Discard\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/861","completion":"\n            var regex = \"^\\\\w+$\";\n            List<string> result = new List<string>();\n            foreach (var word in Regex.Matches(str, regex))\n            {\n                foreach (var text in texts)\n                {\n                    if (IsAnagram(text, word))\n                    {\n                        result.Add(text);\n                    }\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/862","completion":"\n            var words = new List<object> { \"the\", \"is\", \"or\", \"and\" };\n            \/\/ <summary> \n            \/\/ Find the n most common words in a text\n            \/\/ <\/summary>\n            \/\/ <param name=\"text\"\/> text\n            \/\/ <param name=\"n\"\/> number of words to count\n            \/\/ <returns> n most common words<\/returns>\n            var nWords = text.Split(' ').Distinct().OrderBy(x => x).Take(n);\n            var mostFrequentWords = new List<object> {  };\n            var wordOccurrences = new Dictionary<object object=\"\"> { };\n            for (int i = 0; i &lt; nWords.Count; i++)\n            {\n                var word = nWords[i].ToString();\n                var occurrences = wordOccurrences.GetOrDefault(word, 0);\n                occurrences++;\n                wordOccurrences.Add(word, occurrences);\n            }\n            for (var word","language":"csharp"}
{"task_id":"MBCSP\/863","completion":"\n            \/\/ write code here\n            int maxCount = 0;\n            int count = 0;\n            for(int i = 0; i < arr.Length; i++)\n            {\n                count = 0;\n                for(int j = i; j < arr.Length; j++)\n                {\n                    if(arr[j] - arr[i] == 1 || arr[j] - arr[i] == 0)\n                    {\n                        count++;\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                maxCount = Math.max(maxCount, count);\n            }\n            return maxCount;\n        }","language":"csharp"}
{"task_id":"MBCSP\/864","completion":"\n            var palindrome = new List<string> { };\n            for (int i = 0; i &lt; texts.Count; i++)\n            {\n                var word = texts[i];\n                if (Text.RegularExpressions.Regex.IsMatch(word, @\"(?i).*[a-z].*\"))\n                {\n                    if (word.Length > 1)\n                    {\n                        if (word.Last == word.First.Substring(1, word.Length - 1))\n                        {\n                            if (!palindrome.Contains(word))\n                                palindrome.Add(word);\n                        }\n                    }\n                }\n            }\n\n            return palindrome;\n        }","language":"csharp"}
{"task_id":"MBCSP\/865","completion":"\n            \/\/Create a new List to store the result.\n            List<int> result = new List<int>();\n            \/\/Use map function to apply lambda to every element of nums.\n            result = nums.Map(i => i * n);\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/866","completion":"\n            \/\/ \n            bool daycount = true;\n            if (monthname2 == \"February\")\n            {\n                for (int i = 0; i < 28; i++) \n                {\n                    daycount = daycount & (DateTime.Now.Day == i + 1);\n                }\n            }\n            else\n            {\n                for (int i = 0; i < 31; i++) \n                {\n                    daycount = daycount & (DateTime.Now.Day == i + 1);\n                }\n            }\n            return daycount;\n        }","language":"csharp"}
{"task_id":"MBCSP\/867","completion":"\n            var min = arr[0];\n            int k=0;\n            for(int i = 1; i &lt; arr.Length; i++)\n            {\n                if(arr[i] &lt; min &amp;&amp; arr[i] % 2 == 0)\n                {\n                    min = arr[i];\n                    k = i;\n                }\n            }\n            return min;\n        }","language":"csharp"}
{"task_id":"MBCSP\/868","completion":"\n            \/\/ your code goes here\n            return a.Replace (\" \", \"\").Length - a.LastIndexOf (\" \");\n        }","language":"csharp"}
{"task_id":"MBCSP\/869","completion":"\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/870","completion":"\n            \/\/ Create an empty list to store the positive numbers.\n            List<int> positiveNumbers = new List<int>();\n            \/\/ Loop for each number in the given list.\n            for (int i = 0; i < nums.Count; i++)\n            {\n                \/\/ Check if the number is positive.\n                if (nums[i] >= 0)\n                {\n                    \/\/ If it is, add the number to the list of positive numbers.\n                    positiveNumbers.Add(nums[i]);\n                }\n            }\n            \/\/ Use the list of positive numbers to calculate the sum.\n            return positiveNumbers.Sum();\n        }","language":"csharp"}
{"task_id":"MBCSP\/871","completion":"\n            if (string1.Length != string2.Length)\n                return false;\n\n            List<char> list1 = new List<char>(string1);\n            List<char> list2 = new List<char>(string2);\n\n            list1.Reverse();\n            list2.Reverse();\n\n            return list1.ToArray().Equals(list2.ToArray());\n        }","language":"csharp"}
{"task_id":"MBCSP\/872","completion":"\n            var l1 = list1.Count (x => (IEnumerable<object>)x);\n            var l2 = list2.Count (x => (IEnumerable<object>)x);\n            if (l1 &lt; l2)\n                return false;\n            var i = 0;\n            var j = 0;\n            while (i &lt; list1.Count () &amp;&amp; j &lt; list2.Count ()) \n            {\n                var o1 = list1[i];\n                var o2 = list2[j];\n                if (o1.Count () &lt; o2.Count ())\n                    return false;\n                var k = 0;\n                while (k &lt; o1.Count ())\n                {\n                    if (o1[k] != o2[k])\n                        return false;\n                    k++;\n                }\n                i++;\n                j++;\n            }\n            return true;\n","language":"csharp"}
{"task_id":"MBCSP\/873","completion":"\n            if (n < 2) return n;\n            return Fibonacci(n - 1) + Fibonacci(n - 2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/874","completion":"\n            \/\/ Create a pattern that matches the concatenated string.\n            Regex re = new Regex (\"^\" + str2 + \"$\");\n\n            \/\/ Check if the pattern matches the string.\n            return (re.Matches (str1));\n        }","language":"csharp"}
{"task_id":"MBCSP\/875","completion":"\n            var min = test_list.FirstOrDefault().Min(x => x.Sum);\n            var max = test_list.FirstOrDefault().Max(x => x.Sum);\n\n            return min - max;\n        }","language":"csharp"}
{"task_id":"MBCSP\/876","completion":"\n            \/\/ write your code here\n            \/\/if (x > y) {\n            \/\/    int temp = x;\n            \/\/    x = y;\n            \/\/    y = temp;\n            \/\/}\n            int z = x * y \/ gcd(x, y);\n            return x * y \/ gcd(x, y);\n            \/\/return z;\n        }","language":"csharp"}
{"task_id":"MBCSP\/877","completion":"\n            var temp = str.ToCharArray();\n            var arr = (ICollection<string>) new List<string>();\n\n            for (int i = 0; i &lt; temp.Length; i++) \n            {\n                arr.Add(temp[i]);\n            }\n\n            arr.OrderBy(a => a);\n            var result = arr.ToArray();\n\n            var string = \"\";\n            foreach (var element in result) \n            {\n                string += element;\n            }\n            return string;\n        }","language":"csharp"}
{"task_id":"MBCSP\/878","completion":"\n            List<int> tuple = test_tuple;\n\n            for (int i = 0; i < K.Count; i++) {\n                bool found = false;\n                for (int j = 0; j < tuple.Count; j++) {\n                    if (tuple[j] == K[i]) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    return false;\n                }\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/879","completion":"\n            \/\/ Create the pattern to be matched\n            Regex regex = new Regex(@\"ab+\");\n\n            \/\/ Perform the match\n            Match match = regex.Match(text);\n\n            \/\/ If match found, return \"Found a match!\"\n            if (match.Success)\n                return \"Found a match!\";\n\n            \/\/ Else return \"Not matched!\"\n            else\n                return \"Not matched!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/880","completion":"\n            \/\/ Create the solution set.\n            var solutions = new HashSet<int>();\n            \n            \/\/ Start the loop from 2 to 4\n            for (int i = 2; i &lt; 5; i++)\n            {\n                \/\/ Calculate the discriminant.\n                int discriminant = (b * b) - (4 * a * c);\n                \n                \/\/ If the discriminant is negative we don't have a solution.\n                if (discriminant >= 0)\n                {\n                    \/\/ We have a solution, add to the solution set and return a string.\n                    solutions.Add(i);\n                    return solutions.Count() == 1 ? \"1 solution\" : solutions.Count() + \" solutions\";\n                }\n            }\n            \n            \/\/ If we made it through the loop without finding a solution, return an error.\n            return \"No solution\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/881","completion":"\n            \/\/Write your code here\n            int sumEven = 0;\n            int sumOdd = 0;\n\n            foreach (int num in list1) {\n                if (num % 2 == 0) {\n                    sumEven += num;\n                }\n                else {\n                    sumOdd += num;\n                }\n            }\n\n            return sumEven + sumOdd;\n        }","language":"csharp"}
{"task_id":"MBCSP\/882","completion":"\n            \/\/ Your code here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/883","completion":"\n            var list = nums.Where(n % m == 0).ToList();\n            return list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/884","completion":"\n            if (l == r)\n            {\n                return ((n & (1 << l)) == 0);\n            }\n            else if (l < r)\n            {\n                int mask = ((1 << r) - 1) - ((1 << l) - 1);\n                return ((n & mask) == 0);\n            }\n\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/885","completion":"\n            \/\/ write your code here\n            string str2str = str1.ToLower() + str2.ToLower();\n            return Regex.IsMatch(str2str, str1.ToLower() + \".*\", RegexOptions.IgnoreCase);\n        }","language":"csharp"}
{"task_id":"MBCSP\/886","completion":"\n            var sum = 0.0;\n            foreach (var num in numbers)\n                sum += num;\n\n            return sum \/ numbers.Count();\n        }","language":"csharp"}
{"task_id":"MBCSP\/887","completion":" \n            return (n & 1) == 1; \n        }","language":"csharp"}
{"task_id":"MBCSP\/888","completion":"\n            List<List<int>> result = new List<List<int>>();\n            for (int i = 0; i < test_tup1.Count; i++)\n            {\n                for (int j = 0; j < test_tup2.Count; j++)\n                {\n                    List<int> temp = new List<int>();\n                    for (int k = 0; k < test_tup1[i].Count; k++)\n                        temp.Add(test_tup1[i][k] - test_tup2[j][k]);\n                    result.Add(temp);\n                }\n            }\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/889","completion":"\n            foreach (var list in lists)\n            {\n                var i = 0;\n                var j = list.Count () - 1;\n                while (i < j)\n                {\n                    var temp = list[i];\n                    list[i] = list[j];\n                    list[j] = temp;\n                    i++;\n                    j--;\n                }\n            }\n            return lists;\n        }","language":"csharp"}
{"task_id":"MBCSP\/890","completion":"\n            var low = 0, high = arr1.Count;\n            var mid = (low + high) \/ 2;\n            while (low &lt; high)\n            {\n                if (arr1[mid] == n)\n                {\n                    high = mid;\n                    low = mid + 1;\n                    while (low &lt; high &amp;&amp; arr2[low] == n)\n                    {\n                        low++;\n                    }\n                    while (low &lt; high &amp;&amp; arr2[high] == n)\n                    {\n                        high--;\n                    }\n                    return high;\n                }\n                else if (arr1[mid] > n)\n                {\n                    high = mid;\n                    mid = (low + high) \/ 2;\n                }\n                else\n                {\n                    low = mid + 1;\n                    mid ","language":"csharp"}
{"task_id":"MBCSP\/891","completion":"\n            if (String.Compare(String.PadLeft(String.ToString(A), String.Length(A), '0'), String.PadLeft(String.ToString(B), String.Length(B), '0')) == 0)\n                return true;\n            else\n                return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/892","completion":"\n            \/\/ Create a Regex pattern that matches any sequence of any characters except a white-space.\n            Regex regex = new Regex( \"[^ ]+\" );\n            \n            \/\/ Replace all of the matches with an empty string.\n            return regex.Replace( text, new[] { \"\" } );\n        }","language":"csharp"}
{"task_id":"MBCSP\/893","completion":"\n            \/\/ Solution code here...\n        }","language":"csharp"}
{"task_id":"MBCSP\/894","completion":"\n            \/\/ Convert string of float type into string of tuple.\n            List<string> list_of_float_string = Regex.Split(test_str, @\"(?=\\d+(?:\\.\\d+)?(?:,\\d+)?)\");\n            \/\/ Convert string of tuple into float type.\n            List<double> list_of_float = list_of_float_string.Select(s => \n            {\n                string[] splited_string = Regex.Split(s, @\"(?:,\\d+)?\");\n                double result = 0;\n                foreach (string splited_string in splited_string) \n                {\n                    result += Double.Parse(splited_string);\n                }\n                return result;\n            });\n            return list_of_float;\n        }","language":"csharp"}
{"task_id":"MBCSP\/895","completion":"\n            var subseq = List<int>(new[] { A.First() });\n            var sum = 0;\n            for (int i = 1; i < A.Count(); i++) \n            {\n                if (A.ElementAt(i - 1) == A.ElementAt(i))\n                    continue;\n\n                subseq.Add(A.ElementAt(i));\n                if (A.ElementAt(i - 1) < A.ElementAt(i))\n                    sum += A.ElementAt(i - 1);\n                else if (A.ElementAt(i - 1) > A.ElementAt(i))\n                    sum += A.ElementAt(i);\n                else\n                    sum += subseq.Max();\n            }\n\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/896","completion":"\n            tuples.OrderBy(x => x.Last).Distinct().ForEach(x => Console.WriteLine(x));\n            return tuples;\n        }","language":"csharp"}
{"task_id":"MBCSP\/897","completion":"\n            \/\/ split the words in the sentence\n            var splitSentence = sentence.Split (\" \");\n\n            \/\/ check if the word is present in the sentence.\n            for (int i = 0; i < splitSentence.Count; i++) \n            {\n                if (splitSentence[i] == word) { return true; }\n            }\n\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/898","completion":"\n            if (numbers.Count == 0)\n                throw new ArgumentException(\"numbers\");\n\n            List<int> result = new List<int>();\n            int i = 0;\n            while (i &lt; numbers.Count - n + 1)\n            {\n                result.AddRange(numbers.Skip(i));\n                i = i + n;\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/899","completion":"\n            int start=0;\n            int end=n-1;\n            while(start<=end){\n                if(arr[start]!=arr[end]){\n                    return false;\n                }\n                start++;\n                end--;\n            }\n            return true;\n        }","language":"csharp"}
{"task_id":"MBCSP\/900","completion":"\n            \/\/ Start with a specific number, then make sure that the number is in a positive or negative format (positive = 1, negative = -1)\n            bool positive = true;\n            bool negative = true;\n\n            \/\/ Find the number. If it's in negative format, flip the flag.\n            int number = 0;\n            Regex regex = new Regex(@\"([0-9]{1,4})\");\n            Match Match = regex.Match(string0);\n            if (Match.Success)\n            {\n                number = Convert.ToInt32(Match.Value);\n            }\n            else\n            {\n                return false;\n            }\n            \n            if (number == 0)\n            {\n                return false;\n            }\n            \n            if (number < 0)\n            {\n                negative = false;\n            }\n\n            \/\/ Test the number with a regex.\n            regex = new Regex(@\"^-?[0-9]{1,4}$\");\n            Match Match2 =","language":"csharp"}
{"task_id":"MBCSP\/901","completion":"\n            var multiples = range(1, n + 1).ToList();\n            multiples = multiples.Distinct();\n            multiples = multiples.OrderBy(x => x).Concat(multiples.Skip(1));\n            return multiples.Min();\n        }","language":"csharp"}
{"task_id":"MBCSP\/902","completion":"\n            \/\/ create a dictionary to hold our results\n            Dictionary<string, int> result = new Dictionary<string, int>();\n            \/\/ iterate through each key in the first dictionary\n            foreach (KeyValuePair<string int=\"\"> kvp in d1)\n            {\n                \/\/ if the key is not in the result dictionary then add it with value 0\n                if (!result.ContainsKey(kvp.Key))\n                    result.Add(kvp.Key, 0);\n                \/\/ add the value to the existing key\n                result[kvp.Key] += kvp.Value;\n            }\n            \/\/ iterate through each key in the second dictionary\n            foreach (KeyValuePair<string int=\"\"> kvp in d2)\n            {\n                \/\/ if the key is not in the result dictionary then add it with value 0\n                if (!result.ContainsKey(kvp.Key))\n                    result.Add(kvp.Key, 0);\n                \/\/ add the value to the existing key\n                result[kvp.Key] += kvp.Value;\n            ","language":"csharp"}
{"task_id":"MBCSP\/903","completion":"\n            return Bit.Unset.Count(n);\n        }","language":"csharp"}
{"task_id":"MBCSP\/904","completion":"\n            return !(x % 2 == 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/905","completion":"\n            if (n < 0) throw new ArgumentException(\"n must be positive. Given: {0}.\".format(n));\n            if (n == 0) return 1;\n            int[] results = {0};\n            for (int i = 0; i < n; i++) {\n                results[0] += (n - i) * (n - i);\n            }\n            return results[0];\n        }","language":"csharp"}
{"task_id":"MBCSP\/906","completion":"\n            Regex regex = new Regex(@\"(?<=\/)(\\\\d{4})\/(\\\\d{2})\/(\\\\d{2})\/\");\n            var result = regex.Matches(url);\n            List<list>> temp = result.ToList();\n\n            List<list>> result2 = new List<list>>();\n            for (int i = 0; i &lt; temp.Count; i++) {\n                result2.Add(temp[i]);\n            }\n\n            return result2;\n        }","language":"csharp"}
{"task_id":"MBCSP\/907","completion":"\n            \/\/ create a list to store the lucky numbers\n            var luckyNums = new List<int> ();\n            \/\/ generate 1 - n\n            var gen = new Gen(1, n);\n            \/\/ use the above generator to populate our list\n            for (int num : gen) \n            {\n                luckyNums.Add(num);\n            }\n            \/\/ return the list of lucky numbers\n            return luckyNums;\n        }","language":"csharp"}
{"task_id":"MBCSP\/908","completion":"\n            \/\/ Write your code here.\n            if(arr.Count == 1 && arr[0] == n)\n                return 0;\n            else if(arr.Count == 1 && arr[0] != n)\n                return -1;\n            else if(arr.Count == 2)\n                return arr[0] < n &amp;&amp; arr[1] > n ? 0 : 1;\n            else\n            {\n                int low = 0;\n                int high = arr.Count - 1;\n                while(low &lt;= high)\n                {\n                    int mid = (low+high)\/2;\n                    int val = arr[mid];\n                    if(val > n)\n                        high = mid - 1;\n                    else if(val &lt; n)\n                        low = mid + 1;\n                    else\n                        return mid;\n                }\n                return low > high ? -1 :","language":"csharp"}
{"task_id":"MBCSP\/909","completion":"\n            if (num < 10) \n            {\n                return num;\n            }\n            int lastDigit = num % 10;\n            int firstHalf = num \/ 10;\n            int lastHalf = firstHalf % 10;\n            int reversedLastHalf = lastHalf * 10 + lastDigit;\n            if (firstHalf > lastHalf) \n            {\n                return reversedLastHalf;\n            } \n            else \n            {\n                return (firstHalf * 10 + lastDigit) - 1;\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/910","completion":"\n            \/\/ write your code here\n            return false;\n        }","language":"csharp"}
{"task_id":"MBCSP\/911","completion":"\n            if (nums.Count < 3)\n            {\n                return 0;\n            }\n\n            var pq = new List<int>();\n            int result = 0;\n            for (int num : nums)\n            {\n                pq.Add(num);\n            }\n\n            pq.Sort (CompareBySecondElement);\n\n            for (int i = 0; i < nums.Count - 2; i++)\n            {\n                int num1 = pq[i];\n                int num2 = pq[i + 1];\n                int num3 = pq[i + 2];\n\n                result = Math.Max(num1 * num2 * num3, result);\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/912","completion":"\n            var m1 = m + 1;\n            var x = (n % m1) \/ m;\n            var y = (n \/ m1) % m;\n            return Math.sqrt(x * x + y * y) % 1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/913","completion":"\n            \/\/ 1) Convert string to an int\n            int num0 = (int) string0.Length;\n            \n            \/\/ 2) If num is 1, then there is no number at the end.\n            if (num0 == 1) { return false; }\n            \n            \/\/ 3) Split the string and convert each element to an int.\n            int[] nums0 = Convert.ToInt32Array(Split(string0, String.Empty));\n            \n            \/\/ 4) Get the last element of the array.\n            int num1 = nums0.Last(nums0.Length - 1);\n            \n            \/\/ 5) Convert that element to an int.\n            int num2 = (int) num1;\n            \n            \/\/ 6) Compare it to the length of the string.\n            return (num0 == num2);\n        }","language":"csharp"}
{"task_id":"MBCSP\/914","completion":"\n            Regex regex = new Regex(@\"(.)\\\\1\");\n            return regex.IsMatch(s);\n        }","language":"csharp"}
{"task_id":"MBCSP\/915","completion":"\n            \/\/ TODO: Write your code here\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/916","completion":"\n            List<int> results = new List<int> ();\n            if (arr_size == 0) \n            {\n                return results;\n            }\n            else \n            {\n                int first = A[0];\n                int last = A[arr_size - 1];\n                int remaining = arr_size - 2;\n                if (first == last)\n                {\n                    int middle = first;\n                    if (first + last == sum)\n                    {\n                        results.Add(first);\n                        results.Add(middle);\n                        results.Add(last);\n                    }\n                }\n                else \n                {\n                    int middle1 = first + (remaining \/ 2);\n                    int middle2 = last - (remaining \/ 2);\n                    if (middle1 <= sum &amp;&amp; middle2 >= sum)\n                    {\n                        results.Add(first);\n                        results","language":"csharp"}
{"task_id":"MBCSP\/917","completion":"\n            if (text.Length == 0) \n            {\n                return \"Empty text\";\n            }\n\n            var regex = @\"(?<=[A-Z])(?=[a-z])\";\n            var match = Regex.Match(text, regex);\n\n            if (match.Success) \n            {\n                return \"Found a match!\";\n            }\n\n            return \"Not matched!\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/918","completion":"\n            if (m == 0)\n                return n == 0 ? 1 : 0;\n            if (n == 0)\n                return 0;\n            int count = 0;\n            for (int i = 0; i &lt; S.Count; i++) \n            {\n                if (S[i] > m) \n                    continue;\n                int rest = CoinChange(S.Skip(i), m - S[i], n - S[i]);\n                if (rest == 0)\n                    count++;\n                else if (rest > 0)\n                    count += rest;\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/919","completion":"\n            if (items == null)\n                throw new ArgumentNullException (\"items\");\n\n            return items\n                .Select (x => x * 5)\n                .Sum ();\n        }","language":"csharp"}
{"task_id":"MBCSP\/920","completion":"\n            string result = \"[\";\n\n            foreach (var tuple in test_list)\n            {\n                if (tuple.Count > 0 && tuple[0] != null )\n                {\n                    result += (string) tuple.Select (p => p.ToString ()).ToArray ();\n                    result += \",\";\n                }\n            }\n            result = result.TrimEnd (\",\");\n            result += \"]\";\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/921","completion":"\n            \/\/ return empty list if list is empty or if N is not an integer\n            if (test_tup == null || test_tup.Count == 0 || !IsInt(N))\n                return new List<list>>();\n\n            \/\/ create result list\n            var result = new List<list>>();\n\n            \/\/ loop through the list of tuples\n            foreach (var tuple in test_tup)\n            {\n                \/\/ get the tuple size and loop until the chunk size is reached\n                var tuple_size = Tuple.GetLength(tuple);\n                var count = 0;\n                while (count &lt; N &amp;&amp; count &lt; tuple_size)\n                {\n                    \/\/ get the tuple chunk\n                    var chunk = Tuple.Get(tuple, count, N - count);\n\n                    \/\/ add the chunk to the result list\n                    result.Add(chunk);\n\n                    \/\/ increment the count\n                    count++;\n                }\n            }\n            \/\/ return the result list\n            return result;\n","language":"csharp"}
{"task_id":"MBCSP\/922","completion":"\n            \/\/ 1. Sort the input list by using a comparer.\n            \/\/ 2. Scan the array from the back and find the pair with the maximum product.\n            \/\/ 3. Return the pair.\n            \/\/ 4. If there is no pair, return null.\n            \/\/ NOTE: I intentionally used a comparer for the sort.\n            \/\/ NOTE: Sorting an array of integers will make a mess of the sort order.\n            \/\/ NOTE: I'll try to fix that later.\n            arr.Sort(new Function<object int=\"\">() {\n                public int Invoke(Object item) {\n                    return (int)item;\n                }\n            });\n\n            List<int> maxProductPair = new List<int>();\n\n            int i = arr.Count - 1;\n            int j = 0;\n            while (i >= 0) {\n                while (j &lt; i) {\n                    if (arr[j] &lt; arr[i]) {\n                        break;\n                   ","language":"csharp"}
{"task_id":"MBCSP\/923","completion":"\n            string Xsubseq = X.Substring(m, n);\n            string Ysubseq = Y.Substring(m, n);\n\n            if (Xsubseq.EndsWith(Ysubseq) && Ysubseq.Length > Xsubseq.Length)\n                return Ysubseq.Length;\n            else if (Ysubseq.EndsWith(Xsubseq) && Xsubseq.Length > Ysubseq.Length)\n                return Xsubseq.Length;\n\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/924","completion":" \n            \/\/ return the smaller number \n            return x < y ? x : y; \n        }","language":"csharp"}
{"task_id":"MBCSP\/925","completion":"\n            int result = 1;\n            foreach (var n in nums)\n            {\n                result *= n;\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/926","completion":"\n            var result = 0;\n            if (n < m) \n            {\n                for (int i = 1; i <= m; i++) \n                {\n                    for (int j = 1; j <= i; j++) \n                    {\n                        result = result + i * j;\n                    }\n                }\n            }\n            return result \/ (m + 1);\n        }","language":"csharp"}
{"task_id":"MBCSP\/928","completion":"\n            var s = dt.Replace(\"-\", \"\").Replace(\".\", \"\");\n            return s.Format(\"dd-MM-yyyy\");\n        }","language":"csharp"}
{"task_id":"MBCSP\/929","completion":"\n            var tuplexCount = 0;\n            var iter = tuplex.Where(a => a == value).OrderByDescending();\n\n            while (iter.HasNext()) \n            {\n                iter.Next();\n                tuplexCount++;\n            }\n\n            return tuplexCount;\n        }","language":"csharp"}
{"task_id":"MBCSP\/930","completion":"\n            Regex regex = new Regex(@\"a.b\");\n            return regex.Match(text).Value;\n        }","language":"csharp"}
{"task_id":"MBCSP\/931","completion":"\n            \/\/ write your code here\n            double sum = 0;\n            for (int i = 1; i <= number; i++)\n            {\n                sum = sum + i * (i + 1) \/ 2;\n            }\n            return sum;\n        }","language":"csharp"}
{"task_id":"MBCSP\/932","completion":"\n            return l.Distinct();\n        }","language":"csharp"}
{"task_id":"MBCSP\/933","completion":"\n            \/\/ Create regex expression for finding the camel case words\n            Regex regex = new Regex(@\"\\w+(?=[A-Z])\");\n            \/\/ Match the camel case words with the regex expression and get the matching group from match.\n            var match = regex.Match(text);\n            if (match.Success)\n            {\n                \/\/ Replace the matching group with a '_' and return the new string\n                return match.Groups[0].Value.Replace(match.Groups[0].Value[0], \"_\");\n            }\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/934","completion":"\n            \/\/Your code here\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/935","completion":"\n            \/\/ create a sequence of doubles of the size of the number parameter\n            List<double> series = Range.Create<double>(1, number).ToList();\n\n            \/\/ calculate the sum of the sequence\n            return 0.0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/936","completion":"\n            \/\/ Your code goes here\n            \/\/ 1. create an empty new array to add items to\n            var test_arr = new List<List<int>>();\n            \/\/ 2. loop through the test_list\n            foreach (var i in test_list)\n            {\n                \/\/ 3. add all the items to the test_arr\n                test_arr.Add(i);\n                \/\/ 4. loop through the ord_list\n                foreach (var j in ord_list)\n                {\n                    \/\/ 5. if the item in ord_list is equal to the item at the same position in the test_list\n                    if (j == i[0])\n                    {\n                        \/\/ 6. get the item at the same position in the test_list and set it to the new value in the test_arr\n                        var k = test_list.Get(i[0]);\n                        k[0] = j;\n                        \/\/ 7. replace the item in the test_list with the item in the test_arr\n                ","language":"csharp"}
{"task_id":"MBCSP\/937","completion":"\n            int[] cnt = new int[256];\n            \/\/ Count the number of times each character appears in str1\n            \/\/ and set the count for the current character to the current \n            \/\/ count.\n\n            for (int i = 0; i < str1.Length; i++)\n                cnt[(int)str1[i]]++;\n            \/\/ Find the character with the maximum count\n            return (string)(\n                cnt.Where(t => t == Math.Max(cnt)).Select(i => (char)(i + '0')).ToArray()\n            );\n        }","language":"csharp"}
{"task_id":"MBCSP\/938","completion":"\n            int[] tempArray = new int[A.Count];\n            int count = 0;\n            for (int i = 0; i < A.Count; i++) \n            {\n                tempArray[i] = A[i];\n            }\n            int p1 = p;\n            int q1 = q;\n            int r1 = r;\n            int i = 0;\n            int j = 0;\n            int k = 0;\n            if (p1 == q1 || q1 == r1 || r1 == p1)\n                return null;\n            while (true) \n            {\n                if (i == A.Count) \n                {\n                    int x = A[A.Count - 1];\n                    for (j = A.Count - 2; j >= p1; j--) \n                    {\n                        if (x - A[j] <= 0) \n                        {\n","language":"csharp"}
{"task_id":"MBCSP\/939","completion":"\n            List<Dictionary<string, object>> result = new List<Dictionary<string, object>>();\n            models.Sort((Dictionary<string, object> m1, Dictionary<string, object> m2) => \n            {\n                return m1.Order - m2.Order;\n            });\n            return models;\n        }","language":"csharp"}
{"task_id":"MBCSP\/940","completion":"\n            if (arr == null)\n            {\n                throw new ArgumentNullException (\"arr\");\n            }\n            \n            List<int> res = new List<int> ();\n            for (int i = arr.Count - 1; i >= 0; i--)\n            {\n                res.Add (arr[0]);\n                HeapAdjust (arr, 0, arr.Count - 1);\n            }\n            return res;\n        }","language":"csharp"}
{"task_id":"MBCSP\/941","completion":"\n            int count = 0;\n            foreach (object e in num)\n            {\n                if (e is Tuple) count++;\n            }\n            return count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/942","completion":"\n            return check_list.Any(x => test_tup.Contains(x));\n        }","language":"csharp"}
{"task_id":"MBCSP\/943","completion":"\n            \/\/ Your code goes here.\n            int m = num1.Count;\n            int n = num2.Count;\n\n            \/\/ create an empty minheap\n            List<int> minheap = new List<int> ();\n\n            \/\/ loop through both lists\n            for (int i = 0; i &lt; Math.min(m,n); i++) \n            {\n                \/\/ add element of num2 to the minheap if it is smaller\n                if (num2[i] &lt; num1[i])\n                {\n                    minheap.Add(num2[i]);\n                } \n                \/\/ add element of num1 to the minheap if it is smaller\n                else \n                {\n                    minheap.Add(num1[i]);\n                }\n            }\n\n            \/\/ add elements of num1 if they are greater\n            for (int i = Math.min(m,n); i &lt; m + n; i++) \n            {\n               ","language":"csharp"}
{"task_id":"MBCSP\/944","completion":"\n            \/\/ Use the regular expression class to parse the text using regular expression.\n            Regex regex = new Regex (\"\\\\d+\");\n\n            \/\/ Store all the matches in a list.\n            List<matchresult> matches = regex.Matches(text);\n\n            \/\/ Use a list to store the number and its position.\n            List<int> results = new List<int>();\n\n            \/\/ Loop through all the matches and save the position and number in a list.\n            for (MatchResult match : matches) \n            {\n                \/\/ Save the result in a list.\n                results.Add(match.Index (), match.Value);\n            }\n\n            \/\/ Sort the list by position in ascending order.\n            results.OrderBy (p => p.Item1);\n\n            \/\/ Loop through the list and display the result.\n            for (int p : results) \n            {\n                Console.WriteLine(p.Item1 + \" \" + p.Item2);\n            }\n\n            \/\/ Return the number of the first match.\n            return","language":"csharp"}
{"task_id":"MBCSP\/945","completion":"\n            return t.ToSet();\n        }","language":"csharp"}
{"task_id":"MBCSP\/946","completion":"\n            var freq = new Dictionary<string int=\"\">();\n            var result = new List<list>>();\n\n            \/\/ count the frequencies of each character in the string\n            for (int i = 0; i &lt; s.Length; i++)\n                freq[s[i]]++;\n\n            \/\/ sort the frequencies of each character in descending order\n            var count = 1;\n            foreach (var key in freq)\n            {\n                var item = new List<object>();\n                item.Add(key, freq[key]);\n                result.Add(item);\n                count++;\n\n                \/\/ if the count of characters is greater than the number of characters required,\n                \/\/ stop the iteration\n                if (count >= a)\n                    break;\n            }\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/947","completion":"\n            \/\/\n            \/\/ Your code here\n            \/\/\n        }","language":"csharp"}
{"task_id":"MBCSP\/948","completion":"\n            \/\/return ((Tuple<string>)tup1).Item<string>(index);\n            return ((Tuple<string>)tup1).Element(index);\n        }","language":"csharp"}
{"task_id":"MBCSP\/949","completion":"\n            int size = test_list.Count();\n            if (size == 0) \n            {\n                return \"[]\";\n            }\n            else if (size == 1) \n            {\n                return test_list[0].ToString();\n            }\n            else if (size == 2) \n            {\n                List<int> first = test_list[0];\n                List<int> second = test_list[1];\n                if (first.Count() == 1 || second.Count() == 1)\n                    return test_list[0].ToString();\n                if (first.Count() == second.Count())\n                {\n                    int first_total = first.Sum(p => p.Sum(i => i));\n                    int second_total = second.Sum(p => p.Sum(i => i));\n                    if (first_total == second_total)\n                    {\n                        return test_list[0].ToString() ","language":"csharp"}
{"task_id":"MBCSP\/950","completion":"\n            var signs = (year - 4) % 12;\n            if (signs == 0) \n            {\n                return \"Monkey\";\n            }\n            else if (signs < 4) \n            {\n                return \"Rooster\";\n            }\n            else if (signs < 8) \n            {\n                return \"Dog\";\n            }\n            else \n            {\n                return \"Pig\";\n            }\n        }","language":"csharp"}
{"task_id":"MBCSP\/951","completion":"\n            var temp_list = test_list1.ToList();\n            var similar_indices_list = new List<List<int>>();\n            for (int i = 0; i < test_list1.Count; i++)\n            {\n                var similar_index = new List<int>();\n                for (int j = 0; j < test_list2.Count; j++)\n                {\n                    if (List.Compare(test_list1[i], test_list2[j]) == 1)\n                    {\n                        similar_index.Add(j);\n                    }\n                }\n                similar_indices_list.Add(similar_index);\n            }\n            return similar_indices_list;\n        }","language":"csharp"}
{"task_id":"MBCSP\/952","completion":"\n            \/\/ Let (n-1) be the number of remainders when n is divided by r.\n            \/\/ Let (n-1)(r-1) be the number of remainders when n is divided by r,\n            \/\/ and let (n-1)(r-1)(p-1) be the number of remainders when n is divided by r,\n            \/\/ and let (n-1)(r-1)(p-1)(r-2) be the number of remainders when n is divided by r,\n            \/\/ and so on.\n            int nMinus1 = n \/ r;\n            int remainder = n % r;\n            int rMinus1 = remainder \/ r;\n            int remainder2 = remainder % r;\n\n            \/\/ The number of remainders when n is divided by r mod p is equal to \n            \/\/ (n-1)(r-1)(p-1)(r-2) mod p.\n            return (nMinus1 * rMinus1 * p * remainder2) % p;\n        }","language":"csharp"}
{"task_id":"MBCSP\/953","completion":"\n            \/\/ Write your code here.\n            return 0;\n        }","language":"csharp"}
{"task_id":"MBCSP\/954","completion":"\n            \/\/ Write your code here\n            int profit = actual_cost - sale_amount;\n            if(profit > 0)\n                return profit;\n            else\n                return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/955","completion":"\n            var abundantNumbers = (1..n).Where (x => x < n \/ 2 + 1).ToList();\n            return (n > 1) && abundantNumbers.Any(x => n % x == 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/956","completion":"\n            List<string> result = Regex.Matches(text, @\"([A-Z]+)\").ToList();\n\n            return result;\n        }","language":"csharp"}
{"task_id":"MBCSP\/957","completion":"\n            return Bit.GetRightmostSetBitPos (n);\n        }","language":"csharp"}
{"task_id":"MBCSP\/958","completion":"\n            \/\/ define a table for converting numbers to characters\n            string[][] table = new string[][]\n            {\n                new string[] {\"I\", \"V\", \"X\"},\n                new string[] {\"X\", \"L\", \"C\"},\n                new string[] {\"C\", \"D\", \"M\"}\n            };\n\n            \/\/ define a table for converting numbers to characters\n            string[][] table2 = new string[][]\n            {\n                new string[] {\"IV\", \"IX\", \"XL\", \"XC\", \"CD\", \"CM\"},\n                new string[] {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"},\n                new string[] {\"I\", \"X\", \"C\", \"L\", \"D\", \"M\", \"V\"}\n            };\n\n            string result = \"\";\n            \/\/ iterate through the table to convert numbers to characters\n            for (int i = 0; i < table.Length; i++)\n            {\n","language":"csharp"}
{"task_id":"MBCSP\/959","completion":"\n            return lst.Aggregate(x => x, (x, y) => x + y) \/ lst.Count;\n        }","language":"csharp"}
{"task_id":"MBCSP\/960","completion":"\n            var answer = 0;\n            for (var i = 0; i < n; ++i)\n            {\n                answer = answer * 2 + 1;\n            }\n            return answer;\n        }","language":"csharp"}
{"task_id":"MBCSP\/961","completion":"\n            \/\/ Create a list of the single-letter symbols.\n            var symbols = List<string> { \"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\" };\n            \n            \/\/ Create a list of the symbols and their values.\n            var symbolValues = List<tuple int=\"\">> {\n                Tuple.Create (symbols[0], 1),\n                Tuple.Create (symbols[1], 5),\n                Tuple.Create (symbols[2], 10),\n                Tuple.Create (symbols[3], 50),\n                Tuple.Create (symbols[4], 100),\n                Tuple.Create (symbols[5], 500),\n                Tuple.Create (symbols[6], 1000),\n            };\n            \n            \/\/ Convert the string to lower-case.\n            s = s.ToLower();\n            \n            \/\/ Generate an empty integer.\n            var result = 0;\n            \n            \/\/ For each symbol in the string...\n            foreach (var symbol in s.Split","language":"csharp"}
{"task_id":"MBCSP\/962","completion":"\n            \/\/ write your code here\n            if(r <= l)\n                return 0;\n            else if(r-l % 2 == 0)\n                return r-l + 2;\n            else\n                return r-l;\n        }","language":"csharp"}
{"task_id":"MBCSP\/963","completion":"\n            \/\/ Create an array of solutions to the equations\n            List<object> solutions = new List<object>();\n\n            \/\/ Create a sequence of equations that represent the solutions\n            var solution = new List<object> {\n                {x,y,z},\n                {y,z,x},\n                {z,x,y},\n                {x,y,z}\n            };\n\n            \/\/ Create a sequence of equations that represent the solutions\n            var solution = new List<object> {\n                {y,z,x},\n                {z,x,y},\n                {x,y,z}\n            };\n\n            \/\/ Create a sequence of equations that represent the solutions\n            var solution = new List<object> {\n                {x,y,z},\n                {x,z,y},\n                {y,z,x}\n            };\n\n            \/\/ Create a sequence of equations that represent the solutions\n            var solution = new List<object> {\n                {x,y,z},\n                {","language":"csharp"}
{"task_id":"MBCSP\/964","completion":"\n            \/\/ Check if the string length is even\n            return (s.Length % 2 == 0);\n        }","language":"csharp"}
{"task_id":"MBCSP\/965","completion":"\n            \/\/ Check corner case\n            if (text == null)\n            {\n                return \"\";\n            }\n\n            \/\/ Find the first capital letter\n            string firstLetter = \"\";\n            for (int i = 0; i < text.Length; i++)\n            {\n                if (text[i] >= 'A' && text[i] <= 'Z')\n                {\n                    firstLetter = text[i];\n                    break;\n                }\n            }\n\n            \/\/ If no capital letter found, just return the text\n            if (firstLetter.Length == 0)\n            {\n                return text;\n            }\n\n            \/\/ Convert the text to lower case\n            text = text.ToLower();\n\n            \/\/ Create a new string to hold the result\n            string result = new string ();\n\n            \/\/ Split the text at first capital letter\n            string[] words = text.Split(firstLetter);\n\n            \/\/ Iterate through all words in the text\n            for (int i =","language":"csharp"}
{"task_id":"MBCSP\/966","completion":"\n            return tuple1.Where(x => !x.Equals(\"\")).ToList();\n        }","language":"csharp"}
{"task_id":"MBCSP\/967","completion":"\n            string inputString = string0;\n            Regex patt = new Regex(\"[AEIOUaeiou]\");\n            Regex.Match match = patt.Match(inputString);\n            if (match.Success)\n                return \"accepted\";\n            return \"not accepted\";\n        }","language":"csharp"}
{"task_id":"MBCSP\/968","completion":"\n            \/\/ Your code goes here\n            return -1;\n        }","language":"csharp"}
{"task_id":"MBCSP\/969","completion":"\n            \/\/ TODO\n            return null;\n        }","language":"csharp"}
{"task_id":"MBCSP\/970","completion":"\n            return (x < y) ? x : y;\n        }","language":"csharp"}
{"task_id":"MBCSP\/971","completion":"\n            int lcm = (a*b*c)\/Gcd(a,b,c);\n\n            if (lcm > n)\n                return 0;\n\n            \/\/ Create an array of length lcm + 1.\n            \/\/ For each element in the array, insert an empty array (array of array) into the array of arrays, which will store segments of 1 to n.\n            \/\/ This is done to be able to access the first element in the array of arrays.\n            \/\/ The second element of the array of arrays contains the segments of 1 to a.\n            \/\/ The third element of the array of arrays contains the segments of 1 to b.\n            \/\/ The fourth element of the array of arrays contains the segments of 1 to c.\n            \/\/ The fifth element of the array of arrays contains the segments of 2 to n.\n            \/\/ The fifth element of the array of arrays contains the segments of 1 to a.\n            \/\/ (i.e. 1 to n contains an empty array).\n\n            int[] temp = new int[lcm + 1];","language":"csharp"}
{"task_id":"MBCSP\/972","completion":"\n            return (List<int>)test_tup1.Select(x => (List<int>)test_tup2.Select(y => new[] {x, y}).ToArray()).ToArray();\n        }","language":"csharp"}
{"task_id":"MBCSP\/973","completion":"\n            int n = d % s.Length;\n            return s.Substring(n, s.Length - n) + s.Substring(0, n);\n        }","language":"csharp"}
{"task_id":"MBCSP\/974","completion":"\n            return 0;\n        }","language":"csharp"}
