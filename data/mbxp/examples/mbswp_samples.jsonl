{"task_id":"MBSWP\/1","completion":"    int n_2 = n \/ 2\n    int n_3 = n_2 \/ 2\n    if n % 2 == 0 && n_2 % 2 == 0 {\n        return minCost(cost, m, n_3) + minCost(cost, m, n - n_3)\n    }\n    int cost_m1 = cost[m - 1][n - 1]\n    int cost_m2 = cost[m - 2][n - 2]\n    if m == 1 && n == 1 {\n        return cost_m1\n    } else if m == 1 && n == 2 {\n        return cost_m1 + cost_m2\n    } else if m == 2 && n == 2 {\n        return cost_m1 + cost_m2 + cost[1][1]\n    }\n    if m == 1 && n == 3:\n        return cost","language":"swift"}
{"task_id":"MBSWP\/2","completion":"    var i = 0;\n    var result = [];\n    var n = 0;\n    for (var i = 0; i < test_tup1.length; i++) {\n        if (test_tup1[i] == test_tup2[i]) {\n            result[n] = test_tup1[i];\n            n++;\n        }\n    }\n    return result;\n}","language":"swift"}
{"task_id":"MBSWP\/3","completion":"    return (n % 2 != 0) && (n != 2) && (n % 3 != 0) && (n != 5) && (n % 7 != 0);\n}","language":"swift"}
{"task_id":"MBSWP\/4","completion":"    var largest = [null];\n    var queue = [nums[0]] as Heap;\n    var length = nums.length;\n\n    for (var i = 1; i < n; i++) {\n        if (queue.size == 0) {\n            queue.push(nums[i]);\n            largest.push(nums[i]);\n            continue;\n        }\n\n        if (queue.size > 0 && nums[i] > queue.top()) {\n            queue.pop();\n            queue.push(nums[i]);\n        }\n\n        if (queue.top() > nums[i]) {\n            largest.push(queue.pop());\n            largest.push(nums[i]);\n        }\n    }\n\n    for (var i = 0; i < n; i++) {\n        if (nums[i] > largest[largest.length - 1]) {\n            largest.push(nums[i]);\n        }\n    }\n\n    return largest;","language":"swift"}
{"task_id":"MBSWP\/5","completion":"    let dp[Int] = [1,2]\n    for (let i = 2; i < n; i++){\n        let ways = 0\n        for (let j = 0; j < i; j++){\n            ways += dp[j]\n        }\n        dp.push(ways)\n    }\n    return dp[n-1]\n}","language":"swift"}
{"task_id":"MBSWP\/6","completion":"    return a ^ b == a & b\n}","language":"swift"}
{"task_id":"MBSWP\/7","completion":"    return text.match(\/\\w+\/g) ?? []\n}","language":"swift"}
{"task_id":"MBSWP\/8","completion":"    let squares = nums.map { x -> x*x }\n    return squares\n}","language":"swift"}
{"task_id":"MBSWP\/9","completion":"    \/\/ TODO\n}","language":"swift"}
{"task_id":"MBSWP\/10","completion":"    var result = [] as [Int]\n    result = list1.take(n)\n    result.append(list1[n])\n    result.append(list1[n + 1])\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/11","completion":"    var i : Int\n    var ss = \"\"\n    for (i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            ss += s[i]\n        }\n    }\n    return ss\n}","language":"swift"}
{"task_id":"MBSWP\/12","completion":"    var sortedMatrix = []\n    var sumMatrix = []\n    var rowNum = len(M)\n\n    for row in M {\n        sumMatrix = []\n        for col in M {\n            sumMatrix.append(row.sum(col))\n        }\n        sortedMatrix.add(sumMatrix.sort())\n    }\n    return sortedMatrix\n}","language":"swift"}
{"task_id":"MBSWP\/13","completion":"    let counts = {}\n\n    for { word in words } {\n        counts[word] = counts[word] + 1 || 1\n    }\n\n    let result = []\n\n    for { word in counts } {\n        let pair = [word, counts[word]]\n        result.push(pair)\n    }\n\n    result.sort((a, b) => {\n        return b[1] - a[1]\n    })\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/14","completion":"    return l * b * h\n}","language":"swift"}
{"task_id":"MBSWP\/15","completion":"    let result = []\n    let index = 0\n    for (let i = 0; i < text.length; i++) {\n        let c = text.charAt(i)\n        if (c != ' ') {\n            if (c >= 'a' && c <= 'z') {\n                result.push(text.substring(index, i))\n                index = i\n            }\n        }\n    }\n    result.push(text.substring(index))\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/16","completion":"    return \"Not matched!\"\n}","language":"swift"}
{"task_id":"MBSWP\/17","completion":"    var squareSide : Int = a\n    var perimeter : Int = squareSide * 4\n    return perimeter\n}","language":"swift"}
{"task_id":"MBSWP\/18","completion":"    var first_array = string.to_array\n    var second_array = second_string.to_array\n    for (index, character) in first_array.enumerate() {\n        if (character in second_array) {\n            first_array.delete(index)\n        }\n    }\n    return first_array.join(\"\")\n}","language":"swift"}
{"task_id":"MBSWP\/19","completion":"    let set = Set(arraynums)\n    return set.size < arraynums.length\n}","language":"swift"}
{"task_id":"MBSWP\/20","completion":"    return x % 2 == 0 ? true : false\n}","language":"swift"}
{"task_id":"MBSWP\/21","completion":"    return map {\n        n + i * m\n        for i in 0..m-1\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/22","completion":"    if let index = 0 in nums {\n        index++\n    }\n    for num in nums {\n        if (nums[index] != num) {\n            index++\n        } else {\n            return num\n        }\n    }\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/23","completion":"    let answer = 0\n    for i in list1 {\n        for j in i {\n            answer = answer max {\n                j + answer\n            }\n        }\n    }\n    return answer\n}","language":"swift"}
{"task_id":"MBSWP\/24","completion":"    let sum = 0\n    let lastDigit = 0\n    while(binary != 0) {\n        let digit = binary % 10\n        sum = sum + digit * 2 ** (lastDigit)\n        lastDigit++\n        binary = binary \/ 10\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/25","completion":"    var ret = 1\n    var m : [Int] = []\n    for i in arr {\n        if (m.count(i) > 0) {\n            continue\n        }\n        ret *= i\n        m += [i]\n    }\n    return ret * n\n}","language":"swift"}
{"task_id":"MBSWP\/26","completion":"    var len = len(test_list)\n    for (var i = 0; i < len; i++) {\n        var tuple = test_list[i]\n        var len1 = len(tuple)\n        if (len1 < K) {\n            return false\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/27","completion":"    return map(\n        { (s : String) => (s.substring(1, s.length)) },\n        list\n    )\n}","language":"swift"}
{"task_id":"MBSWP\/28","completion":"    if (k > n - k) k = n - k\n    if (k < 0) k = 0\n    if (k == 0 || k == n) return 1\n    var res = binomialCoeff(n-1, k) + binomialCoeff(n-1, k-1)\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/29","completion":"    var count = 1\n    var i = 0\n    var j = 0\n\n    while (i < arr_size) {\n        j = count\n\n        while (j < arr_size) {\n            if (arr[i] == arr[j]) {\n                count++\n            }\n\n            j++\n        }\n\n        i++\n    }\n\n    var number = 0\n\n    for (var i = 0; i < arr_size; i++) {\n        if (i % 2 != 0) {\n            number = arr[i]\n        }\n    }\n\n    return number\n}","language":"swift"}
{"task_id":"MBSWP\/30","completion":"    var count = 0\n    var last : Int\n    var i : Int\n    for i in 0 until s.length - 1 {\n        last = s[i].length\n        for j in 1 until last - 1 {\n            if s[i][j] == s[i][last - j] {\n                count += 1\n            } else {\n                break\n            }\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/31","completion":"    let count : [Int] = [0]\n    let map = []\n    let heap = []\n    for _, value in nums {\n        map[value] = true\n        count.append(count[-1] + 1)\n        if (heap.size < k) {\n            heap.push(value)\n        } else {\n            if (count[-1] > count[heap.top]) {\n                heap.pop()\n                heap.push(value)\n            }\n        }\n    }\n    return heap\n}","language":"swift"}
{"task_id":"MBSWP\/32","completion":"    var primeFactors = []\n\n    for i in 1..n {\n        if (n % i == 0) {\n            primeFactors.append(i)\n        }\n    }\n\n    return primeFactors.max()\n}","language":"swift"}
{"task_id":"MBSWP\/33","completion":"    if let B = N mod 2 == 0 {\n        return 0\n    } else if let N mod 2 == 0 {\n        return 1\n    } else {\n        N >>= 1\n        return 2 + decimalToBinary(N)\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/34","completion":"    \/\/ write code here\n    var difference = N - ar.size\n    var index = 0\n    var missing = 0\n    for (index in ar) {\n        var element = ar[index]\n        if (element > difference) {\n            missing = element - difference\n            break\n        }\n    }\n    return missing\n}","language":"swift"}
{"task_id":"MBSWP\/35","completion":"    var rectNum = 1;\n    while (n > 1) {\n        rectNum += n * (n - 1)\n        n -= 1\n    }\n    return rectNum\n}","language":"swift"}
{"task_id":"MBSWP\/36","completion":"    var p0 = 0,\n        q0 = 0,\n        temp0 = 0;\n    while(N > 0) {\n        temp0 = (q0 * 10 + p0) * 10 + q0;\n        p0 = p0 * 10 + q0;\n        q0 = temp0;\n        N--;\n    }\n    N = 0;\n    var p1 = p0,\n        q1 = q0,\n        temp1 = 0;\n    while(N < 0) {\n        temp1 = (q1 * 10 + p1) * 10 + q1;\n        p1 = p1 * 10 + q1;\n        q1 = temp1;\n        N++;\n    }\n    N = N % q1;\n    return q1 - N;\n}","language":"swift"}
{"task_id":"MBSWP\/37","completion":"    var sorted_list = []\n    var sorted_set = []\n    mixed_list.forEach{\n        if sorted_set.contains(type(it)) {\n            sorted_list.insert(sorted_list.indexOf(type(it)) + 1, it)\n        } else {\n            sorted_list.append(it)\n            sorted_set.append(type(it))\n        }\n    }\n    return sorted_list\n}","language":"swift"}
{"task_id":"MBSWP\/38","completion":"    even = list1.filter { it % 2 == 0 }\n    odd = list1.filter { it % 2 != 0 }\n    even = even.sort()\n    odd = odd.sort()\n    if (even.length < 1)\n        return odd.length\n    if (odd.length < 1)\n        return even.length\n    return even[0] \/ odd[0]\n}","language":"swift"}
{"task_id":"MBSWP\/39","completion":"    for (let i = 1; i < S.length; i++) {\n        if (S[i] == S[i - 1]) {\n            S = S.substring(0, i - 1) + S.substring(i + 1, S.length)\n            i = 0\n        }\n    }\n    return S\n}","language":"swift"}
{"task_id":"MBSWP\/40","completion":"    var freq = {} as [Int: Int]\n    for _, e in nums {\n        freq[e] = freq[e] + 1 || 1\n    }\n    return freq\n}","language":"swift"}
{"task_id":"MBSWP\/41","completion":"    return nums.filter(x => x % 2 == 0)\n}","language":"swift"}
{"task_id":"MBSWP\/42","completion":"    var result = 0\n    var seen : [Int] = []\n    for(var i : arr) {\n        if(!seen.contains(i)) {\n            seen.append(i)\n            result = result + i\n            if(seen.size() > n - 1)\n                return result\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/43","completion":"    return \"Not matched!\"\n}","language":"swift"}
{"task_id":"MBSWP\/44","completion":"    if let a = text[0] in\n        Ok(a) {\n            return \"Found a match!\"\n        }\n        Err(\"Not matched!\")\n}","language":"swift"}
{"task_id":"MBSWP\/45","completion":"    var x = 1\n    var y = 2\n    var gcd = 1\n    while (y < l.length) {\n        if (l[x - 1] > l[y - 1]) {\n            gcd = l[x - 1]\n        } else {\n            gcd = l[y - 1]\n        }\n        x = x + 1\n        y = y + 1\n    }\n    return gcd\n}","language":"swift"}
{"task_id":"MBSWP\/46","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/47","completion":"    var sum = A! * B!\n    var lastDigit = 1\n\n    while (sum > 0) {\n        sum \/= B\n        lastDigit += 1\n    }\n\n    return lastDigit\n}","language":"swift"}
{"task_id":"MBSWP\/48","completion":"    if let i = n - 1 downto 0 {\n        return n ^ i\n    } else {\n        return n\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/49","completion":"    \/\/ 1. Write your function here.\n    var answer : [Int] = []\n    for (i in nums) {\n        for (j in nums[i]) {\n            if (N == 0) {\n                if (j == 0) {\n                    answer.push(nums[i][j])\n                }\n            } else if (N == 1) {\n                if (j == N) {\n                    answer.push(nums[i][j])\n                }\n            } else if (N > 1) {\n                if (j == 0 || j == N) {\n                    answer.push(nums[i][j])\n                }\n            }\n        }\n    }\n    return answer\n}","language":"swift"}
{"task_id":"MBSWP\/50","completion":"    let min = input_list.reduce(0, (a, b) => a.concat(b).length, [])\n    let minList = input_list.reduce((a, b) => {\n        if (b.length < min) {\n            min = b.length\n            return b\n        }\n        return a\n    }, [])\n    return minList\n}","language":"swift"}
{"task_id":"MBSWP\/51","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/52","completion":"    if b < 0 || h < 0 {\n        panic(\"Parallelogram should be non-negative\");\n    }\n    return h * b;\n}","language":"swift"}
{"task_id":"MBSWP\/53","completion":"    let length = str.length\n    let first = str[0]\n    let last = str[length - 1]\n\n    if (first === last) {\n        return \"Equal\"\n    }\n    return \"Not Equal\"\n}","language":"swift"}
{"task_id":"MBSWP\/54","completion":"    if len(my_list) == 0 {\n        return []\n    }\n\n    my_min = min(my_list)\n    my_max = max(my_list)\n    size = my_max - my_min + 1\n\n    bucket = [0] * size\n\n    for i in my_list {\n        bucket[i - my_min] += 1\n    }\n\n    sorted_list = []\n    for i in range(size) {\n        for j in range(bucket[i]) {\n            sorted_list += [i + my_min]\n        }\n    }\n\n    return sorted_list\n}","language":"swift"}
{"task_id":"MBSWP\/55","completion":"    a, n, r;\n    var fact = 1;\n    for (i <- n; i > 0; i--) {\n        fact = fact * i;\n    }\n    return (a * fact) \/ (fact * (r + n));\n}","language":"swift"}
{"task_id":"MBSWP\/56","completion":"    if n == 0 {\n        return false\n    }\n    else if n == 1 {\n        return true\n    }\n    else if ((n - 1) % 2 == 0) {\n        return false\n    }\n    else {\n        return check(n - 2)\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/57","completion":"    arr.sort()\n    return arr.indexOf(arr[0] * arr[1]) % 9 + 1\n}","language":"swift"}
{"task_id":"MBSWP\/58","completion":"    return (x * y > 0) - (y * x > 0)\n}","language":"swift"}
{"task_id":"MBSWP\/59","completion":"    let temp = 1\n    for _ in 0 until n - 1 do\n        temp = temp * 3 + 1\n    return temp\n}","language":"swift"}
{"task_id":"MBSWP\/60","completion":"    let dp = [[0] * n for _ in range(n)]\n    let longest = 1\n\n    for i in range(n) {\n        for j in range(i, n):\n            dp[i][j] = arr[i] == arr[j] ? 1 : 2\n            if (dp[i][j] >= longest) {\n                longest = dp[i][j]\n            }\n    }\n\n    for i in range(n - 1, -1, -1) {\n        for j in range(i + 1, n):\n            if (arr[i] == arr[j] && dp[i + 1][j - 1] < 3) {\n                dp[i][j] = 1\n                if (dp[i][j] >= longest) {\n                    longest = dp[i][j]\n                }\n            }\n    }\n\n    return longest\n}","language":"swift"}
{"task_id":"MBSWP\/61","completion":"    var count = 0\n    var substring = s[0]\n    var i = 1\n    var len = substring.length\n    var j = 0\n    var sum = substring.digit(j, j+len)\n    if len == n {\n        if sum == n {\n            count = 1\n        }\n        else {\n            count = 0\n        }\n    }\n    while i < s.length {\n        substring = s[i]\n        j = 1\n        len = substring.length\n        sum = substring.digit(j, j+len)\n        while j < len - 1 {\n            if sum == n {\n                count = count + 1\n            }\n            else {\n                break\n            }\n            j++\n            len = substring.length\n            sum = substring.digit(j, j+len)\n        }\n        i++\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/62","completion":"    let smallest = xs[0]\n    for x in xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}","language":"swift"}
{"task_id":"MBSWP\/63","completion":"    if let a = test_list.first {\n        return -1\n    }\n    let max = -1\n    for each b in test_list.rest {\n        let temp = difference(a, b)\n        if temp > max {\n            max = temp\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/64","completion":"    subjectmarks.sort(\n        (a, b) => a[1] - b[1]\n    )\n    return subjectmarks\n}","language":"swift"}
{"task_id":"MBSWP\/65","completion":"    var i : Int = 0\n    var total : Int = 0\n    while(i < data_list.length) {\n        if(data_list[i] == null) {\n            break\n        }\n        if(data_list[i] instanceof Array) {\n            total = total + recursiveListSum(data_list[i])\n        }\n        else {\n            total = total + data_list[i]\n        }\n        i = i + 1\n    }\n    return total\n}","language":"swift"}
{"task_id":"MBSWP\/66","completion":"    var sum = 0\n    for i in list {\n        if i > 0 {\n            sum = sum + 1\n        }\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/67","completion":"    if (n == 0) {\n        return 1;\n    }\n    else if (n == 1) {\n        return 2;\n    }\n    else {\n        return bellNumber(n - 1) + bellNumber(n - 2);\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/68","completion":"    if let l = 0;\n        let r = A.length - 1\n\n        while l < r {\n            if A[l] > A[r] {\n                return false\n            }\n            else {\n                l++\n                r--\n            }\n        }\n\n        return true\n}","language":"swift"}
{"task_id":"MBSWP\/69","completion":"    return s.length > l.length ? false : s.every((_, i) => l[i] == s[i])\n}","language":"swift"}
{"task_id":"MBSWP\/70","completion":"    var res = \"All tuples do not have same length\"\n    var length = Input.map { it.length }.reduce(0, (a, b) => a + b)\n    if length == k * k :\n        res = \"All tuples have same length\"\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/71","completion":"    var length = nums.length\n    var gap = length\n    var swaps = 0\n    var comparison = 0\n    var aux = 0\n\n    while (gap != 1) {\n        gap = Math.floor(gap \/ 1.3)\n        swaps = 0\n\n        for (var i = 0; i + gap < length; i++) {\n            comparison = nums[i] - nums[i + gap]\n\n            if (comparison > 0) {\n                aux = nums[i]\n                nums[i] = nums[i + gap]\n                nums[i + gap] = aux\n                swaps = swaps + 1\n            }\n        }\n        if (swaps == 0)\n            break\n    }\n    return nums\n}","language":"swift"}
{"task_id":"MBSWP\/72","completion":"    return n > 0 && (n - (n & -n)) == (n >> 1)\n}","language":"swift"}
{"task_id":"MBSWP\/73","completion":"  var res = []\n  var pattern = \/([.,!?:;]\\s*)+\/g\n  var match = pattern.exec(text)\n  while(match) {\n    res.append(match[0])\n    match = pattern.exec(text)\n  }\n  return res\n}","language":"swift"}
{"task_id":"MBSWP\/74","completion":"    for (let i = 0; i < colors.length; i++) {\n        colors[i] = colors[i].toLowerCase()\n        if (colors.length < patterns.length) {\n            return false\n        }\n        let isColor = false\n        for (let j = 0; j < patterns.length; j++) {\n            if (patterns[j].length > colors[i].length) {\n                return false\n            }\n            if (colors[i].length == 0) {\n                return false\n            }\n            if (colors[i] == patterns[j]) {\n                isColor = true\n            }\n            if (isColor) {\n                colors[i] = colors[i].substring(0, colors[i].length - 1)\n                if (colors.length == patterns.length) {\n                    return true\n                }\n            }\n        }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/75","completion":"    guard let (test_list.length > 0) else {\n        return \"No such elements in the list.\";\n    }\n    guard let (test_list.first.length > 0) else {\n        return \"First element in the list cannot be empty.\";\n    }\n    guard let (K > 0) else {\n        return \"K cannot be zero.\";\n    }\n    \/\/ for (let i = 0; i < test_list.length; i++) {\n    \/\/     for (let j = 0; j < test_list.length; j++) {\n    \/\/         if (i == j) {\n    \/\/             continue;\n    \/\/         }\n    \/\/         guard let (K % test_list[i][j] == 0) else {\n    \/\/             return \"[(\" + test_list[i][j] + \", \" + test_list[j][j] + \")]\";\n","language":"swift"}
{"task_id":"MBSWP\/76","completion":"    var count = 0\n    for (i in 0..m) {\n        for (j in 0..n) {\n            count = count + (i * i + j * j)\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/77","completion":"    let evenSum = 0\n    let oddSum = 0\n\n    while(n > 0) {\n        let digit = n % 10\n        n = n \/ 10\n\n        if (digit % 2 == 0) {\n            evenSum += digit\n        } else {\n            oddSum += digit\n        }\n    }\n\n    return evenSum - oddSum == 0\n}","language":"swift"}
{"task_id":"MBSWP\/78","completion":"    let count = 0\n    while n != 0 {\n        if n & 1 == 1 {\n            count += 1\n        }\n        n >>= 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/79","completion":"    return s.length % 2 == 0\n}","language":"swift"}
{"task_id":"MBSWP\/80","completion":"    var m = (n - 1) \/ 3 + 1\n    var a = m\n    var b = m * (2 * m - 3) \/ 2\n    var c = m * (m + 1) * (3 * m - 2) \/ 4\n    var d = m * (2 * m - 1) * (m + 2) \/ 6\n    var e = m * (m - 1) * (2 * m + 1) * (m - 2) \/ 8\n    var f = m * (2 * m - 1) * (2 * m + 1) * (m + 2) \/ 12\n    var num = a + b + c + d + e + f\n    num = num ** 0.25\n    return num\n}","language":"swift"}
{"task_id":"MBSWP\/81","completion":"    return zipWithIndex(test_tup1, test_tup2)\n}","language":"swift"}
{"task_id":"MBSWP\/82","completion":"    return 4 * Math.PI * r * r * r\n}","language":"swift"}
{"task_id":"MBSWP\/83","completion":"    var result = \"\"\n    for(i in strr) {\n        if(strr.substring(i, i+1) == \"a\") {\n            result = result + \"c\"\n        } else if(strr.substring(i, i+1) == \"b\") {\n            result = result + \"d\"\n        } else if(strr.substring(i, i+1) == \"c\") {\n            result = result + \"b\"\n        } else if(strr.substring(i, i+1) == \"d\") {\n            result = result + \"a\"\n        } else if(strr.substring(i, i+1) == \"e\") {\n            result = result + \"f\"\n        } else if(strr.substring(i, i+1) == \"f\") {\n            result = result + \"e\"\n        } else if(strr.substring(i","language":"swift"}
{"task_id":"MBSWP\/84","completion":"    var a = [0]\n    while (a.length < n) {\n        a = a + [1]\n        a = a.map(i => i + 1)\n    }\n    return a[n]\n}","language":"swift"}
{"task_id":"MBSWP\/85","completion":"        var pi = 3.1415\n        return 4 * pi * r * r\n    }","language":"swift"}
{"task_id":"MBSWP\/86","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/87","completion":"    var result = dict1.merge(dict2)\n        .merge(dict3)\n        .value();\n    var sorted = result.sort();\n    var reversed = sorted.reverse();\n    var reversedString = reversed.join(', ');\n    return [reversedString];\n}","language":"swift"}
{"task_id":"MBSWP\/88","completion":"    var result = {} as [Int: Int]\n    for i in list1 {\n        if !result[i] {\n            result[i] = 1\n        } else {\n            result[i] += 1\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/89","completion":"    var abs = absIndex(N)\n    var left = abs[0]\n    var right = abs[1]\n    var diff = right - left\n    var middle = (left + right)\/2\n    \n    if (diff == 0)\n        return left\n    if (diff > 0) {\n        if (N >= middle)\n            return closestNum(middle)\n        else\n            return closestNum(middle + 1)\n    }\n    else {\n        if (N <= middle)\n            return closestNum(middle + 1)\n        else\n            return closestNum(middle)\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/90","completion":"    var max = 0\n    for(i in list1){\n        if(list1[i].length > max){\n            max = list1[i].length\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/91","completion":"    var i = 0;\n    while(i < str1.count()) {\n        if(str1.index(sub_str, i) != -1) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n}","language":"swift"}
{"task_id":"MBSWP\/92","completion":"    var result = false\n    for (var i = 0; i < n.length; i++) {\n        if (n[i] == 0) {\n            if (i == 0) {\n                result = true\n            } else {\n                result = result && n[i - 1] != 0\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/93","completion":"    return a.pow(b)\n}","language":"swift"}
{"task_id":"MBSWP\/94","completion":"    let minIndex = 0\n    let minValue = 9\n\n    for (i, el in enumerate(test_list)) {\n        if (test_list[i][1] < minValue) {\n            minIndex = i\n            minValue = test_list[i][1]\n        }\n    }\n\n    return test_list[minIndex][0]\n}","language":"swift"}
{"task_id":"MBSWP\/95","completion":"    let x = 0\n    for i in lst {\n        let x = 0\n        for j in lst[i] {\n            if lst[i].count > 1 {\n                x += 1\n            }\n        }\n        if x < i {\n            x = i\n        }\n    }\n    return x\n}","language":"swift"}
{"task_id":"MBSWP\/96","completion":"    var divisors = 0\n    var i = 1\n    while (i <= n) {\n        if (n % i == 0) {\n            divisors += 1\n        }\n        i += 1\n    }\n    return divisors\n}","language":"swift"}
{"task_id":"MBSWP\/97","completion":"    var result = {} as [Int: Int]\n\n    for i in list1 {\n        for j in i {\n            result[j] += 1\n        }\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/98","completion":"    Double result = 0.0;\n    for (i in numbers) {\n        result = result + i;\n    }\n    return result \/ (numbers.length);\n}","language":"swift"}
{"task_id":"MBSWP\/99","completion":"    if (n <= 0) {\n        return ''\n    }\n    return decimalToBinary(n >> 1) + n % 2\n}","language":"swift"}
{"task_id":"MBSWP\/100","completion":"    n := num\n    if n < 10 { return n }\n    if n mod 11 = 0 { n += 11 }\n    n = n % 11\n    if n < 10 {\n        if n < num {\n            return n\n        }\n        return nextSmallestPalindrome(n) + 11\n    }\n    return nextSmallestPalindrome(n) + 11\n}","language":"swift"}
{"task_id":"MBSWP\/101","completion":"    return arr[n % arr.count() + (n - 1 + arr.count()) % arr.count()].(1..k)\n}","language":"swift"}
{"task_id":"MBSWP\/102","completion":"    if(word.isEmpty) {\n        return \"\"\n    }\n\n    let firstLetter : String = word[0]\n    let rest : String = word.substring(1)\n\n    if(rest.isEmpty) {\n        return firstLetter.toUpperCase()\n    }\n\n    return firstLetter.toUpperCase() + rest.replace(firstLetter, \"\").toLowerCase()\n}","language":"swift"}
{"task_id":"MBSWP\/103","completion":"    n = n % m\n    if (n == 0) {\n        return m\n    }\n    else {\n        return eulerianNum(m, n)\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/104","completion":"    var sublists: [[String]] = input_list\n    for item in input_list {\n        let sublists_copy: [[String]] = sublists\n        for i in 0..len(item) {\n            sublists_copy[i].sort(compareByCaseInsensitive(item[i]))\n        }\n        sublists = sublists_copy\n    }\n    return sublists\n}","language":"swift"}
{"task_id":"MBSWP\/105","completion":"    var counter = 0\n    for(x in lst) {\n        if(x) {\n            counter += 1\n        }\n    }\n    return counter\n}","language":"swift"}
{"task_id":"MBSWP\/106","completion":"    res := test_list.copy()\n    for i in test_tup {\n        if (res.contains(i)) {\n            res.remove(i)\n        }\n        res.push(i)\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/107","completion":"    var result = 0\n    var hexL = L.toString(16)\n    var hexR = R.toString(16)\n\n    while(hexL != hexR) {\n        hexL = hexL.substr(1)\n        result += 1\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/108","completion":"    let num1Count = 0,\n        num2Count = 0,\n        num3Count = 0,\n        mergedNums = [0]\n\n    for num in num1 {\n        mergedNums[num1Count++] = num\n    }\n\n    for num in num2 {\n        mergedNums[num2Count++] = num\n    }\n\n    for num in num3 {\n        mergedNums[num3Count++] = num\n    }\n\n    return mergedNums\n}","language":"swift"}
{"task_id":"MBSWP\/109","completion":"    let rotatedCount = 0\n    let len = s.length\n    for i := 0; i < len; i += 2 {\n        let first = s[i]\n        let second = s[i + 1]\n        s = swap(s, i, i + 1)\n        if (first == second) {\n            rotatedCount += 1\n        }\n        s = swap(s, i, i + 1)\n    }\n    return rotatedCount\n}","language":"swift"}
{"task_id":"MBSWP\/110","completion":"    \/\/ your code\n    \/\/ 1. loop through list \n    \/\/ 2. check the first element (strt_val) against the second element (stop_val)\n    \/\/ 3. if the first is greater than second, set second to the first \n    \/\/ 4. if the first is less than second, set first to second\n    \/\/ 5. if the first is equal to the second, add it to the range \n    \n    var ret = []\n    \n    for(int i = 0; i < test_list.size(); i++){\n        for(int j = 0; j < test_list.get(i).size(); j++){\n            if(test_list.get(i).get(j) > stop_val || test_list.get(i).get(j) < strt_val){\n                test_list.get(i).set(j, Math.max(strt_val, Math.min(test_list.get(i).get(j), stop_val)))\n            }\n","language":"swift"}
{"task_id":"MBSWP\/111","completion":"  result := []\n  for item in nestedlist {\n    if len(result) == 0 {\n      result = [item]\n    } else {\n      for another in result {\n        if item == another {\n          result.append(item)\n          break\n        }\n      }\n    }\n  }\n  result\n}","language":"swift"}
{"task_id":"MBSWP\/112","completion":"    return diameter * height * 2\n}","language":"swift"}
{"task_id":"MBSWP\/113","completion":"    var regex = \/[-+]?[0-9]+\/;\n    return regex.test(text);\n}","language":"swift"}
{"task_id":"MBSWP\/114","completion":"    val result = \"\"\n    for _, _, _, n in test_list {\n        result += \"(\" + (n + 1) + \", \" + (n + 1) + \", \" + (n + 1) + \", \" + (n + 1) + \"), \"\n    }\n    result = result.trimEnd(\", \")\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/115","completion":"    var result = true\n    for _, v in let v of list1 {\n        if let v1 = v as? [AnyHashable] { v1 } else { v1 = v1 } in v1 {\n            result = false\n            break\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/116","completion":"    var res = 0\n    for _, x in nums {\n        res += x\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/117","completion":"    result = \"\"\n    for (index, item in test_list.enumerate()) {\n        result += \"(\"\n        for (inner_index, inner_item) {\n            (inner_list : [[String]]) = inner_item\n            if (inner_index == 0) {\n                result += float(inner_list[0])\n            } else {\n                result += \", \" + float(inner_list[0])\n            }\n        }\n        result += \"), \"\n    }\n    return result.strip(\", \")\n}","language":"swift"}
{"task_id":"MBSWP\/118","completion":"  var list = []\n  if (string == \"\") {\n    return list\n  }\n  list.append(string[0])\n  for i in (1..string.length) {\n    if (string[i] == \" \") {\n      var item = list[list.length - 1]\n      list.pop()\n      list.push(item + string[i])\n    } else {\n      list.push(string[i])\n    }\n  }\n  return list\n}","language":"swift"}
{"task_id":"MBSWP\/119","completion":"    let x = 0\n    let count = 1\n    let element = -1\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == arr[i+1]) {\n            count++\n        } else {\n            count = 1\n        }\n        if (count == 1 && arr[i] == n) {\n            x = i\n            element = arr[i]\n        }\n    }\n    return element\n}","language":"swift"}
{"task_id":"MBSWP\/120","completion":"    var product = list1[0][0] * list1[0][1]\n    for _, pair in pairs(list1) {\n        var current = pair[0] * pair[1]\n        if (current > product) {\n            product = current\n        }\n    }\n    return product\n}","language":"swift"}
{"task_id":"MBSWP\/121","completion":"    let i = 0\n    let j = count + 1\n    let k = count + 2\n    while (i < count && j < count && k < count) {\n        if (A[i] + A[j] + A[k] == sum) {\n            return true\n        } else if (A[i] + A[j] + A[k] > sum) {\n            k++\n        } else if (A[i] + A[j] + A[k] < sum) {\n            j++\n        } else {\n            i++\n            j++\n            k++\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/122","completion":"    n = n * (10 ** (n - 1))\n    n = n + (n % 3) + 1\n    n = n * (10 ** (n - 1))\n    return n\n}","language":"swift"}
{"task_id":"MBSWP\/123","completion":"    let sum = 0\n    let min = 0\n    let max = 0\n    let max_div = 0\n    while (max_div < limit) {\n        max = max_div\n        max_div = min + max + 1\n        if (max_div > limit) {\n            break\n        }\n        min = max_div\n        if (is_amicable(min)) {\n            sum += min\n        }\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/125","completion":"    var diff : Int = 0\n    var curr : Int = 0\n    var nChars = string.length\n\n    for (let i = 0; i < nChars; i++) {\n        if (string[i] == '0') {\n            diff = Math.max(diff, i - curr)\n            curr = 0\n        } else {\n            curr += 1\n        }\n    }\n\n    return Math.max(diff, n - curr)\n}","language":"swift"}
{"task_id":"MBSWP\/126","completion":"    var commonDivisors = [a]\n\n    if (b < a) {\n        a = b\n        b = a\n    }\n\n    while (true) {\n        var remainder = a % b\n        a = b\n        b = remainder\n\n        if (b == 0) {\n            return commonDivisors.sum()\n        } else {\n            commonDivisors += b\n        }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/127","completion":"    return x * y;\n}","language":"swift"}
{"task_id":"MBSWP\/128","completion":"    var shortWords = []\n    var words = str.split(\" \")\n    for (var i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            shortWords.append(words[i])\n        }\n    }\n    return shortWords\n}","language":"swift"}
{"task_id":"MBSWP\/129","completion":"    if my_matrix.size != 4 {\n        return false;\n    }\n\n    let matrix = copyMatrix(my_matrix)\n\n    \/\/ Calculate magic square\n\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/130","completion":"    var map = new Map<Int, Int>()\n    for (num in nums) {\n        var count = map.getOrDefault(num, 0)\n        map.set(num, count + 1)\n    }\n    var max = 0\n    var maxs = []\n    map.forEach((value, key) => {\n        if (value == max) {\n            maxs.push(key)\n        }\n        if (value > max) {\n            max = value\n            maxs = [key]\n        }\n    })\n    return maxs\n}","language":"swift"}
{"task_id":"MBSWP\/131","completion":"    let splitStr = str1.split(\"\")\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n    let reverseStr = []\n\n    for (let i = 0; i < splitStr.length; i++){\n        if(vowels.includes(splitStr[i])){\n            reverseStr.push(splitStr[i])\n        }\n    }\n    \n    return reverseStr.join(\"\")\n\n\n}","language":"swift"}
{"task_id":"MBSWP\/132","completion":"    let arr1: [String] = tup1\n    return arr1.join('')\n}","language":"swift"}
{"task_id":"MBSWP\/133","completion":"    return nums.reduce( (a, b) => a + Math.abs(b), 0)\n}","language":"swift"}
{"task_id":"MBSWP\/134","completion":"    var length = arr.count()\n    if let last = arr[length - 1] {\n        return last % 2 == 0 ? \"EVEN\" : \"ODD\"\n    }\n    else {\n        \/\/ We will not reach here\n        return \"NOT FOUND\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/135","completion":"    var result = 0\n    for (var i = 0; i < n; i++) {\n        result = (result + (1 << i)) * (1 << (n - i - 1))\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/136","completion":"    return units * 0.8\n}","language":"swift"}
{"task_id":"MBSWP\/137","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/138","completion":"    let total = 0\n    let power = 1\n    for(power = 1; power <= n; power *= 2) {\n        total += power\n    }\n    return total == n\n}","language":"swift"}
{"task_id":"MBSWP\/139","completion":"    return 2 * Math.PI * r;\n}","language":"swift"}
{"task_id":"MBSWP\/140","completion":"    var result = []\n    for item in test_list {\n        var count = 0\n        for sub in item {\n            if sub % 2 == 0\n                count++\n        }\n        if count == 1\n            result.append(item[0])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/141","completion":"    let res = []\n    let len = nums.length\n    for (let i = len - 1; i >= 0; i--) {\n        let maxIdx = 0\n        for (let j = 1; j <= i; j++) {\n            if (nums[j] > nums[maxIdx]) maxIdx = j\n        }\n        \/\/ swap\n        let temp = nums[maxIdx]\n        nums[maxIdx] = nums[i]\n        nums[i] = temp\n        \/\/ push\n        res.unshift(nums[i])\n        \/\/ back to initial state\n        for (let j = 1; j < i; j++) {\n            temp = nums[j]\n            nums[j] = nums[i - j]\n            nums[i - j] = temp\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/142","completion":"    var counter = 0\n    var size = list1.size\n    for(var i = 0; i < size; i++) {\n        for(var j = 0; j < size; j++) {\n            if(list1[i] == list2[j] && list2[i] == list3[j]) {\n                counter += 1\n            }\n        }\n    }\n    return counter\n}","language":"swift"}
{"task_id":"MBSWP\/143","completion":"    var count = 0;\n    for i in Input {\n        count += 1\n    }\n    return count;\n}","language":"swift"}
{"task_id":"MBSWP\/144","completion":"    var firstSum = 0\n    var secondSum = 0\n    var pairSum = 0\n\n    for i in arr.indices(n) {\n        firstSum += arr[i]\n    }\n\n    for i in arr.indices(n) {\n        if(i + 1 < n) {\n            secondSum += arr[i + 1]\n        }\n    }\n\n    for i in arr.indices(n) {\n        if(i + 2 < n) {\n            pairSum += Math.abs(arr[i] - arr[i + 2])\n        }\n    }\n\n    return firstSum + secondSum - pairSum\n}","language":"swift"}
{"task_id":"MBSWP\/145","completion":"    var min = arr[0]\n    var max = arr[0]\n    for (i in arr) {\n        if (arr[i] < min)\n            min = arr[i]\n        if (arr[i] > max)\n            max = arr[i]\n    }\n    return max - min\n}","language":"swift"}
{"task_id":"MBSWP\/146","completion":"    var ascii = 0\n    for _, _  in 0 until str1.length {\n        ascii += str1.charCodeAt(_)\n    }\n    return ascii\n}","language":"swift"}
{"task_id":"MBSWP\/147","completion":"    var dp = [tri[0][0]]\n\n    for (i in 1..n) {\n        dp[i] = tri[0][i]\n        for (j in 1..i) {\n            dp[i] = Math.max(dp[i], dp[j] + tri[j][i])\n        }\n    }\n\n    return dp[n-1]\n}","language":"swift"}
{"task_id":"MBSWP\/148","completion":"    if (N < 0) {\n        return 0;\n    }\n\n    let [a, b] = divmod(N, 10);\n    return a + sumDigitsTwoparts(b);\n}","language":"swift"}
{"task_id":"MBSWP\/149","completion":"    \/\/create a hash table to store count of each value in the array\n    var map : [Int] = [0] * n\n    for(i <- arr.length; i >= 0; i--) {\n        if(arr[i] > n) break\n        map[arr[i]] += 1\n    }\n    \/\/keep a variable to store max count of each subsequence so far\n    var maxCount : Int = 0\n    var startIdx : Int = 0\n    \/\/loop through the array from left to right\n    for(i <- 1; i < n; i++) {\n        \/\/if the value is less than the previous element\n        if(arr[i] < arr[i - 1]) {\n            \/\/increment the start index\n            startIdx = i\n            \/\/increment the max count\n            maxCount += map[arr[i]]\n            \/\/if the current element is equal to the previous element, it means that the subsequence is the same, so reset the start index and","language":"swift"}
{"task_id":"MBSWP\/150","completion":"    return if let d = 0 in let e = 0 {\n        d < a && d < c {\n            e < b && e < a {\n                true\n            } else {\n                false\n            }\n        } else {\n            false\n        }\n    } else {\n        false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/151","completion":"    let num = y\n    while (num != 0) {\n        let rem = num % x\n        if (rem == 0) {\n            return false\n        }\n        num = x % num\n        x = rem\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/152","completion":"    let n = x.length\n    let mid = n\/2\n\n    if n <= 1 {\n        return x\n    }\n\n    let left = mergeSort(x.slice(0, mid))\n    let right = mergeSort(x.slice(mid, n))\n\n    return merge(left, right)\n}","language":"swift"}
{"task_id":"MBSWP\/153","completion":"    let delta = b * b - 4 * a * c\n    if delta < 0 then {\n        \/\/ negative delta\n        return []\n    } else if delta == 0 then {\n        \/\/ positive delta - parabola has 1 real root\n        return [ -b \/ (2 * a) ]\n    } else {\n        \/\/ positive and negative delta - parabola has 2 real roots\n        return [ (-b + Math.sqrt(delta)) \/ (2 * a), (-b - Math.sqrt(delta)) \/ (2 * a) ]\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/154","completion":"  let res = []\n  for _, array in nums.enumerate() {\n    for _, elem in array.enumerate() {\n      if (elem == N) {\n        res.append(elem)\n      }\n    }\n  }\n  return res\n}","language":"swift"}
{"task_id":"MBSWP\/155","completion":"    let bitMask = 0x55555555\n    while n != 0 {\n        if (n & 1 == 0) {\n            n &= ~1;\n        } else {\n            n |= 1;\n        }\n        n <<= 1\n    }\n    return n\n}","language":"swift"}
{"task_id":"MBSWP\/156","completion":"    return [(1 to (len tuple_str.0)).map { (int(tuple_str[0][index], 16) if tuple_str.0[index].length == 1 else int(tuple_str[0][index])) for index in 0..2 }]\n}","language":"swift"}
{"task_id":"MBSWP\/157","completion":"    let map = {}\n    let result = []\n\n    for {\n        let current = list1.value\n\n        let currentCount = map.get(current) ?? 0\n        map[current] = currentCount + 1\n\n        let currentIndex = currentCount > 1 ? 1 : 0\n\n        result.push([currentIndex, current])\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/158","completion":"    var i : Int = 0\n    var result : Int\n    var sum : Int\n    var prev : Int\n    var curr : Int\n\n    while (i < k - 1) {\n        sum = 0\n        while (i < k - 1 && sum <= n) {\n            sum = sum + arr[i]\n            i++\n        }\n        if (sum != n) {\n            result = -1\n            break\n        }\n        curr = arr[i]\n        prev = arr[i - 1]\n        if (prev == curr) {\n            i = i - 1\n            continue\n        }\n        if (prev > curr) {\n            result = i - 1\n            break\n        }\n        result = i\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/159","completion":"    switch(month) {\n        case \"January\":\n            if(days < 22) return \"winter\"\n            else return \"spring\"\n        case \"February\":\n            if(days < 19) return \"winter\"\n            else return \"spring\"\n        case \"March\":\n            if(days < 20) return \"winter\"\n            else return \"spring\"\n        case \"April\":\n            if(days < 21) return \"winter\"\n            else return \"spring\"\n        case \"May\":\n            if(days < 21) return \"winter\"\n            else return \"spring\"\n        case \"June\":\n            if(days < 22) return \"winter\"\n            else return \"spring\"\n        case \"July\":\n            if(days < 23) return \"winter\"\n            else return \"spring\"\n        case \"August\":\n            if(days < 23) return \"winter\"\n            else return \"spring\"\n        case \"September\":\n           ","language":"swift"}
{"task_id":"MBSWP\/160","completion":"    var d = b*b - 4*a*n;\n    if (d < 0) return \"No solution\";\n    var x1 = (int)((double)(b - (double)Math.sqrt(d)) \/ (double)a);\n    var x2 = (int)((double)(b + (double)Math.sqrt(d)) \/ (double)a);\n    if (x1 > x2) return \"No solution\";\n    return [\"x = \", x1, \", y = \", x2];\n}","language":"swift"}
{"task_id":"MBSWP\/161","completion":"    var result = []\n    for {\n        if (list2.contains(list1.head)) {\n            result.append(list1.head)\n            list1 = list1.tail\n        }\n        else {\n            list1.head\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/162","completion":"    var result = 0\n    for (i in 1..n) {\n        result = result + i\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/163","completion":"    var x = 0\n    var y = 0\n    var s = (s*2) + 1\n    var area = 0.0\n    var pi = 3.14159\n    for (var i = 0; i < s; i++) {\n        x = x + (l * cos(2*pi*i\/s))\n        y = y + (l * sin(2*pi*i\/s))\n        area += l * l\n    }\n    return area * x \/ y\n}","language":"swift"}
{"task_id":"MBSWP\/164","completion":"    var num1s = 1 + num1\n    var num2s = 1 + num2\n    var divisor1 : Int\n    var divisor2 : Int\n    for (divisor1 = 2; divisor1 <= num1s; divisor1++) {\n        if (num1 % divisor1 != 0) {\n            continue\n        }\n        for (divisor2 = 2; divisor2 <= num2s; divisor2++) {\n            if (num2 % divisor2 != 0) {\n                continue\n            }\n            if (divisor1 == divisor2) {\n                return true\n            }\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/165","completion":"    var str2 = str1.replace(\/[^A-Za-z]\/g, \"\")\n    var result = 0\n    var index = 0\n    while (index < str2.length) {\n        if (str2[index] === str2[index+1]) {\n            result = result + 1\n            index = index + 2\n        }\n        else {\n            index = index + 1\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/166","completion":"    let xor = A[0]^A[1]^A[2]\n    let sum = N - xor\n    let count = 0\n    for {\n        if sum & 1 == 0 {\n            count += 1\n        }\n        sum >>= 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/167","completion":"    if(n < 2) {\n        return 2\n    } else {\n        return 2 * nextPowerOf2(n\/2)\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/168","completion":"    var count : Int\n    for num in a {\n        if (num == x) {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/169","completion":"    var p = 1\n    while (n > 0) {\n        var d = n % 2\n        n = floor(n \/ 2)\n        p *= 3\n        p += d\n    }\n    return p\n}","language":"swift"}
{"task_id":"MBSWP\/170","completion":"    if (m < 0 || m >= list1.length || n < 0 || n >= list1.length) {\n        return 0;\n    }\n\n    return sumList(list1, m, n + 1) - sumList(list1, m + 1, n);\n}","language":"swift"}
{"task_id":"MBSWP\/171","completion":"    return (5 * a * a) + (5 * (a - 1))\n}","language":"swift"}
{"task_id":"MBSWP\/172","completion":"    var count = 0\n    for(i = 0; i < s.length; i++) {\n        if(s[i] == \"std\") {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/173","completion":"    return text.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n}","language":"swift"}
{"task_id":"MBSWP\/174","completion":"    var dict : [String: [Int]] = {}\n    for _, v in l {\n        dict[v] = dict.getOrElse { [] } + v\n    }\n    return dict\n}","language":"swift"}
{"task_id":"MBSWP\/175","completion":"    if (str1.isEmpty) {\n        return true\n    }\n    let stack = []\n    let leftPar = \"([{\"\n    let rightPar = \")]}\"\n    for (let i = 0; i < str1.length; i++) {\n        let char = str1[i]\n        if (leftPar.indexOf(char) >= 0) {\n            stack.push(char)\n        }\n        if (rightPar.indexOf(char) >= 0) {\n            if (stack.isEmpty()) {\n                return false\n            }\n            if (rightPar.indexOf(char) != leftPar.indexOf(stack.pop())) {\n                return false\n            }\n        }\n    }\n    if (!stack.isEmpty()) {\n        return false\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/176","completion":"    return a + b + c;\n}","language":"swift"}
{"task_id":"MBSWP\/177","completion":"    var lcm = L\n    var max = R\n    var min = L\n\n    while (min != max) {\n        if (lcm % min == 0 && lcm % max == 0) {\n            return [min, max]\n        }\n\n        if (min > max) {\n            var temp = max\n            max = min\n            min = temp\n        }\n\n        var temp = lcm\n        lcm = min * max \/ temp\n    }\n\n    return nil\n}","language":"swift"}
{"task_id":"MBSWP\/178","completion":"    \/\/ for (i in patterns)\n    \/\/     if (text.contains(patterns[i]))\n    \/\/         return \"Matched!\"\n    \/\/ return \"Not Matched!\"\n}","language":"swift"}
{"task_id":"MBSWP\/179","completion":"    var n = abs(x)\n    var sum = 0\n    while (n > 0) {\n        sum += n % 10\n        n \/= 10\n    }\n    return sum == x\n}","language":"swift"}
{"task_id":"MBSWP\/180","completion":"    var R = 6371\n    var \u03c61 = radians(slat)\n    var \u03c62 = radians(elat)\n    var \u0394\u03c6 = radians(elat - slat)\n    var \u0394\u03bb = radians(elon - slon)\n\n    var a = sin(\u0394\u03c6\/2) * sin(\u0394\u03c6\/2) + cos(\u03c61) * cos(\u03c62) * sin(\u0394\u03bb\/2) * sin(\u0394\u03bb\/2)\n    var c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c\n}","language":"swift"}
{"task_id":"MBSWP\/181","completion":"    if (arr.Length < n) {\n        return \"\"\n    }\n    var i : Int = 0\n    var j : Int = n - 1\n    while (i < j) {\n        var k : Int = i + (j - i) \/ 2\n        if (arr[k].Length < n - k) {\n            j = k\n        } else if (arr[k].Length > n - k) {\n            i = k + 1\n        } else {\n            break\n        }\n    }\n    return arr.slice(0, i)\n}","language":"swift"}
{"task_id":"MBSWP\/182","completion":"    let result = [[],[],[],[]]\n    let pattern = \/[^A-Za-z0-9]\/g\n    let lowerCase = \/[a-z]\/g\n    let upperCase = \/[A-Z]\/g\n    let specialChar = \/\\W\/g\n\n    let match;\n    do {\n        match = pattern.exec(string)\n        if (match != null) {\n            result[0].push(match[0])\n        }\n        match = lowerCase.exec(string)\n        if (match != null) {\n            result[1].push(match[0])\n        }\n        match = upperCase.exec(string)\n        if (match != null) {\n            result[2].push(match[0])\n        }\n        match = specialChar.exec(string)\n        if (match != null) {\n            result[3].push(match[0])\n        }\n    } while (match != null);\n\n    return result","language":"swift"}
{"task_id":"MBSWP\/183","completion":"    map = HashMap()\n    for i in arr {\n        if map.contains(i - k) {\n            map[i - k] += 1\n        } else {\n            map[i - k] = 1\n        }\n    }\n    return map.count\n}","language":"swift"}
{"task_id":"MBSWP\/184","completion":"    if(list.count == 0) return false\n    var result = false\n    for(i in list) {\n        if(list[i] > num) result = true\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/185","completion":"    var result = [a, b]\n\n    if (a * a * a > b * b + c * c) {\n        result = [b, 2 * (a * b + c)]\n    } else if (b * b * b > a * a + c * c) {\n        result = [a, 2 * (b * a + c)]\n    } else if (c * c * c > b * b + a * a) {\n        result = [b, 2 * (a * b + c)]\n    } else if (c * c * c > a * a + b * b) {\n        result = [a, 2 * (b * a + c)]\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/186","completion":"    var matcher = Regex.find (patterns, text)\n    var result = matcher.all() ? \"Matched!\" : \"Not Matched!\"\n    println(result)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/187","completion":"    if (X[m-1] == Y[n-1]) {\n        return 1 + longestCommonSubsequence(X, Y, m-1, n-1);\n    } else {\n        return max(longestCommonSubsequence(X, Y, m, n-1),\n                   longestCommonSubsequence(X, Y, m-1, n));\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/188","completion":"    let p = 2\n    if n == 0\n        return true\n    else if n < 0\n        return false\n    else {\n        while(n > 0) {\n            if (n >= p*p) {\n                n-=p*p\n                p = 2\n            }\n            else p++\n        }\n        return n == 0\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/189","completion":"    for (i in arr) {\n        if (arr[i] <= 0) {\n            arr[i] = n + arr[i]\n        }\n    }\n\n    let res = 1\n    for (i in arr) {\n        if (arr[i] != i + 1) {\n            res = i + 1\n            break\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/190","completion":"    return [x1, y1, x1, y1, x2, y2, x2, y2].filter(x => x >= 0 && x <= 5).size\n}","language":"swift"}
{"task_id":"MBSWP\/191","completion":"    return monthname3.length == 3 and monthname3.substring(2, 3) == \"30\"\n}","language":"swift"}
{"task_id":"MBSWP\/192","completion":"    return str.count(String.empty) >= 1 && str.count(String.digit) >= 1\n}","language":"swift"}
{"task_id":"MBSWP\/193","completion":"    var new_list = []\n    var seen = {}\n\n    for (i,v of test_tup) {\n        if (seen.hasKey(v)) {\n            continue;\n        }\n\n        new_list.append(v)\n        seen[v] = true;\n    }\n\n    return new_list\n}","language":"swift"}
{"task_id":"MBSWP\/194","completion":"    var i = 0\n    var result = 0\n    while (i < 8 && n > 0) {\n        result += n % 10 * Math.pow(8, 7-i)\n        n = n \/ 10\n        i += 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/195","completion":"    if let r = arr.search(x) {\n        return r\n    } else {\n        return -1\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/196","completion":"    let res = []\n    for i in test_list {\n        if i.count != K {\n            res.append(i)\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/197","completion":"    var a = test_tup1.map { n => n^test_tup2.map { b => b^n } }.fold(0)\n    var b = test_tup2.map { n => n^a }.fold(0)\n    return [a, b]\n}","language":"swift"}
{"task_id":"MBSWP\/198","completion":"    \/\/ write your code here\n}","language":"swift"}
{"task_id":"MBSWP\/199","completion":"    var power : Int = 0\n    while(n > 1) {\n        power += 1\n        n \/= 2\n    }\n    return power * 2\n}","language":"swift"}
{"task_id":"MBSWP\/200","completion":"    var max = list1[0]\n    var res = []\n    for i in list1 {\n        if (list1[i] >= max) {\n            max = list1[i]\n            res.push(i)\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/201","completion":"    if let count = 0 {\n        for each x in lst {\n            count = count + 1 if x == lst[count]\n        }\n        return count == len(lst)\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/202","completion":"        var newStr = \"\";\n        for (i in str1) {\n                if (i % 2 == 0) {\n                        newStr += str1[i];\n                }\n        }\n        return newStr;\n}","language":"swift"}
{"task_id":"MBSWP\/203","completion":"    var result = 0;\n    for i in 0..n1 {\n        if (n1 ^ n2) {\n            break;\n        }\n        result += 1;\n        n1 = n1 >> 1;\n        n2 = n2 >> 1;\n    }\n    return result;\n}","language":"swift"}
{"task_id":"MBSWP\/204","completion":"    return s.filter(x => x == c).length\n}","language":"swift"}
{"task_id":"MBSWP\/205","completion":"    if let n = test_tup.count { |x| test_tup[x] }\n    else\n        n = 0\n    inversions = []\n    for i from 0 to n - 1 do\n        for j from i + 1 to n do\n            if test_tup[i] > test_tup[j]\n                inversions << (test_tup[i] - test_tup[j])\n    end\n    return inversions\n}","language":"swift"}
{"task_id":"MBSWP\/206","completion":"    result := []\n    for i in 0..test_tup.count {\n        result = (result & test_tup[i]) + test_tup[i]\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/207","completion":"    var dp : [Int][String] = [[]]\n    \n    for (var c : str) {\n        if (dp[0].indexOf(c) == -1) {\n            dp[0].push(c)\n        } else {\n            dp.push([])\n        }\n    }\n    \n    var result = 0\n    for (var i = 0; i < dp.length; i++) {\n        if (dp[i].length > result) {\n            result = dp[i].length\n        }\n    }\n    \n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/208","completion":"    var regex = \/^-?\\d+(?:\\.\\d{0,2})?$\/;\n    return regex.test(num);\n}","language":"swift"}
{"task_id":"MBSWP\/209","completion":"    \/\/ (a.val < heap[0].val) ? heap[0] = a : heap.insert(0, a)\n    var result = []\n    var length = heap.length\n    for (var i = 0; i < length; i++) {\n        if (a.val < heap[0].val) {\n            result.push(heap[0])\n            heap[0] = a\n        } else result.push(heap[i])\n        heap = heap.remove(heap.size - 1)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/210","completion":"    regex := \"([a-z0-9]+|[a-z]+)\"\n    return match(string, regex)?.found?.value\n}","language":"swift"}
{"task_id":"MBSWP\/211","completion":"    if (n == 0) {\n        return 0\n    }\n    return countNum(n - 1) + countNum(n - 1)\n}","language":"swift"}
{"task_id":"MBSWP\/212","completion":"    var sum : Int = 0\n    var i: Int = 1\n    while (i <= n) {\n        sum = sum + pow(4, i)\n        i = i + 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/213","completion":"    ret := []\n    for e1 in test_tup1 {\n        ret += test_tup2 { e2 -> e1 + e2 }\n    }\n    return ret\n}","language":"swift"}
{"task_id":"MBSWP\/214","completion":"    return (radian * (180 \/ Math.PI));\n}","language":"swift"}
{"task_id":"MBSWP\/215","completion":"    res := []\n    cur := 0\n    for x in alist do\n        if x is nil then\n            cur := cur + 1\n        else\n            if cur == 0 then\n                res = append: res, x\n            else\n                res = append: res, res[cur - 1]\n                res = append: res, x\n            end if\n        end if\n    end for\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/216","completion":"    var list1Length = 0\n    if let list2Length = list2.count do {\n        list1Length += 1\n    }\n    else {\n        return false\n    }\n    var matchCount = 0\n    var i = 0\n    while (i < list1Length) {\n        var list1Element = list1[i]\n        var i = i + 1\n        while (i < list1Length && list1[i] === list1Element) {\n            i = i + 1\n        }\n        var j = 0\n        while (j < list2Length) {\n            if (list1[i] === list2[j][0]) {\n                matchCount += 1\n                j = j + 1\n            }\n            else {\n                i = i - 1\n                break\n            }\n        }\n        if (matchCount === list2Length) {\n            return true","language":"swift"}
{"task_id":"MBSWP\/217","completion":"    let firstChar = str[0]\n    let count = 1\n\n    for(let i = 1; i < str.length; i++) {\n        if(firstChar == str[i]) {\n            count++\n        } else {\n            firstChar = str[i]\n            count = 1\n        }\n\n        if(count > 1) {\n            return firstChar.chr(0)\n        }\n    }\n\n    return \"\\0\"\n}","language":"swift"}
{"task_id":"MBSWP\/218","completion":"    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/219","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/220","completion":"    \/\/write your code here\n}","language":"swift"}
{"task_id":"MBSWP\/221","completion":"    for num in nums {\n        if num % 2 == 0 {\n            return num\n        }\n    }\n\n    return nil\n}","language":"swift"}
{"task_id":"MBSWP\/222","completion":"    \/\/ TODO: your code goes here\n}","language":"swift"}
{"task_id":"MBSWP\/223","completion":"    var count : Int = 0\n    var i : Int = 0\n    var j : Int = n - 1\n    while (i < j) {\n        if (arr[i] == x) {\n            count++\n        }\n        if (arr[j] == x) {\n            count++\n        }\n        if (count == 0) {\n            i++\n        }\n        if (count == 2) {\n            return true\n        }\n        if (count > 2) {\n            return false\n        }\n        j--\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/224","completion":"    var s = 0\n    while n > 0 {\n        s += n & 1\n        n >>= 1\n    }\n    return s\n}","language":"swift"}
{"task_id":"MBSWP\/225","completion":"    let min = arr[0];\n    for (i = low; i <= high; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    return min;\n}","language":"swift"}
{"task_id":"MBSWP\/226","completion":"    var result = \"\"\n    for (index in str) {\n        if (index % 2 == 0) {\n            result += str[index]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/227","completion":"    var min = a\n    if (b < min) {\n        min = b\n    }\n    if (c < min) {\n        min = c\n    }\n\n    return min\n}","language":"swift"}
{"task_id":"MBSWP\/228","completion":"    let s = \"0x\" + n.toString(16)\n    if (s[l] == s[r]) {\n        return true\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/229","completion":"    return arr.sort((a, b) => {\n        if (a < 0) {\n            return -1\n        } else if (b < 0) {\n            return 1\n        } else if (a > b) {\n            return 1\n        } else if (b > a) {\n            return -1\n        } else {\n            return 0\n        }\n    })\n}","language":"swift"}
{"task_id":"MBSWP\/230","completion":"    let s = \"\";\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] == \" \"){\n            s += char;\n        } else {\n            s += str1[i];\n        }\n    }\n    return s;\n}","language":"swift"}
{"task_id":"MBSWP\/231","completion":"    let dp = [[-1] * n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = tri[i][0]\n    for r in range(2, n):\n        for i in range(r, n):\n            dp[i][r] = dp[i - 1][r - 1] + tri[i][r]\n        for i in range(r, n):\n            dp[i][r] = max(dp[i][r], dp[i - 1][r])\n    return dp[n - 1][n - 1]\n}","language":"swift"}
{"task_id":"MBSWP\/232","completion":"    if list1.count < n {\n        return []\n    }\n\n    var list2 = list1.slice(0, n)\n    list2.sort()\n    return list2\n}","language":"swift"}
{"task_id":"MBSWP\/233","completion":"    return 2*3.14*r*h + 2*2*r*r*h\n}","language":"swift"}
{"task_id":"MBSWP\/234","completion":"    var cube = l * l * l\n    return cube\n}","language":"swift"}
{"task_id":"MBSWP\/235","completion":"    n & ~(1 << (n.bitLength() - 1))\n}","language":"swift"}
{"task_id":"MBSWP\/236","completion":"    let count = 0\n    let sum = 0\n\n    for i = 1; i <= N; i += 1\n        for j = i; j <= N; j += 1\n            sum += (i * j)\n\n            if sum % (K * (K + 1) \/ 2) == 0\n                count += 1\n\n    if count > 0\n        return count\n    else\n        return -1\n}","language":"swift"}
{"task_id":"MBSWP\/237","completion":"    val results = {}\n    for (index, item) in test_list.enumerate() {\n        val item_count = results.get(item) ?: 0\n        results[item] = item_count + 1\n    }\n    val result = { }\n    for ((k, v), count) in results.items() {\n        if (v == count) result[k] = count\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/238","completion":"    count := 0\n    for i in 0..(length(str)-1) {\n        count += (int(substring(str, i, i+2)! = \"\") ? 1 : 0)\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/239","completion":"    if let (num : Int) = 1 in\n        if num == 1 {\n            return 1\n        }\n        let sum : Int = 0\n\n        sum = sum + getTotalNumberOfSequences(m - 2, n)\n        sum = sum + getTotalNumberOfSequences(m, n - 1)\n        if num > 2 {\n            sum = sum + getTotalNumberOfSequences(m - 2, n - 1)\n        }\n        return sum\n    }","language":"swift"}
{"task_id":"MBSWP\/240","completion":"    let len = list1.count\n    let lastItem = list1.last\n    let index = len - 1\n    let temp = list2.copy!\n    while index >= 0 {\n        list1.replaceAt(lastItem, temp.nth!(index))\n        index--\n    }\n    return list1\n}","language":"swift"}
{"task_id":"MBSWP\/241","completion":"    if o > n {\n        \/\/ If we need to pad the array\n        \/\/ We need to fill it with '*'\n        \/\/ We also need to pad the outer 2d array\n        \/\/ So we create an outer 2d array, and then fill it with '*'\n        \/\/ Then we pad the outer 2d array with two '*'\n        \/\/ Then we pad the inner 2d array with '*'\n        \/\/ After we do this, we can build the 3d array by re-using the outer 2d array and the inner 2d array\n        \/\/ Finally we return the outer 2d array\n        let outer2d = Array(m)\n        for _ in 0..m {\n            outer2d.append(Array(n).fill(\"*\"))\n        }\n        outer2d[0].insert(0, \"*\")\n        outer2d[0].insert(o, \"*\")\n        outer2d[0].insert(o + 1, \"*\")\n        outer2d[0].insert(o + 2, ","language":"swift"}
{"task_id":"MBSWP\/242","completion":"    var sum = 0;\n\n    for (let i = 0; i < str1.length; i++) {\n        var char = str1[i];\n        sum = sum + 1;\n    }\n    return sum;\n}","language":"swift"}
{"task_id":"MBSWP\/243","completion":"    let l = lst.reverse().groupBy(k => k[0])\n    for _, v := range l {\n        l.put(v.first.second, v)\n    }\n    return l.reverse\n}","language":"swift"}
{"task_id":"MBSWP\/244","completion":"    \/\/ Your code here\n    if (N < 2) return N\n    if (N < 4) return (Math.sqrt(N) + 1) ** 2\n    if (N % 2 == 0) return 4\n    if (N % 2 != 0) return (N + 1) ** 2 - 4\n}","language":"swift"}
{"task_id":"MBSWP\/245","completion":"    sum := 0\n    max := 0\n    for i := 0; i <= n - 3; i++ {\n        sum := 0\n        for j := i; j <= i + 3; j++ {\n            sum += arr[j]\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/246","completion":"        return sqrt(number * number + 1)\n}","language":"swift"}
{"task_id":"MBSWP\/247","completion":"    var dp = []\n    var n = str.length()\n    var dp_len = n\n    for (var i = 0; i < n; i++) {\n        dp.append(new Array<Int>(n).fill(0))\n        dp[i][i] = 1\n    }\n    var len = n\n    for (var i = n - 1; i >= 0; i--) {\n        for (var j = i + 1; j < n; j++) {\n            if (str[i] == str[j]) {\n                if (j - i < 3) {\n                    dp[i][j] = 1\n                } else {\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                    if (dp[i][j] > dp_len) {\n                        dp_len = dp[i][j]\n                    ","language":"swift"}
{"task_id":"MBSWP\/248","completion":"    var sum = 0;\n    var harmonic = 1.0;\n    for (i in 1..n) {\n        sum += harmonic;\n        harmonic *= 1.0 \/ i;\n    }\n    return sum;\n}","language":"swift"}
{"task_id":"MBSWP\/249","completion":"    result = array_nums1.filter(n => {\n        return array_nums2.includes(n)\n    })\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/250","completion":"    var counter = 0\n    for (i in tup) {\n        if (tup[i] == x) {\n            counter = counter + 1\n        }\n    }\n    return counter\n}","language":"swift"}
{"task_id":"MBSWP\/251","completion":"    if let index = 0;\n    for x in list {\n        let y = element;\n        list[index] = y;\n        index += 1;\n    }\n    return list;\n}","language":"swift"}
{"task_id":"MBSWP\/252","completion":"    \/\/ Write your function here\n}","language":"swift"}
{"task_id":"MBSWP\/253","completion":"    let count = 0\n    for i in list1 {\n        count += 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/254","completion":"    var words = []\n    var i = 0;\n    while (i < text.length) {\n        var ch = text[i];\n        if (ch == 'a' || ch == 'e') {\n            var j = i;\n            while (j < text.length && text[j] != ' ') {\n                j++;\n            }\n            var word = text.substring(i, j);\n            words.append(word);\n            i = j;\n        } else {\n            i++;\n        }\n    }\n    return words;\n}","language":"swift"}
{"task_id":"MBSWP\/255","completion":"    let indices = [0..n-1]\n    let result = []\n\n    let gen = (i : Int) -> {\n        if i >= l.length {\n            result.append(l)\n        } else {\n            let nxt = indices[i]\n            gen(i+1)\n            while (nxt < l.length-1 && l[nxt] === l[nxt+1]) {\n                nxt++\n            }\n            indices[i] = nxt + 1\n            if (nxt < l.length - 1) {\n                gen(i+1)\n            }\n        }\n    }\n    gen(0)\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/256","completion":"    var primes = 0\n    var candidate = 2\n    \n    while (primes < n) {\n        candidate = nextPrime(candidate)\n        primes += candidate != n ? 1 : 0\n    }\n    \n    return primes\n}","language":"swift"}
{"task_id":"MBSWP\/257","completion":"    let c = a\n    a = b\n    b = c\n    return [a, b]\n}","language":"swift"}
{"task_id":"MBSWP\/258","completion":"    count := 0\n    for number in array_nums {\n        if number % 2 == 1 {\n            count ++\n        }\n    }\n\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/259","completion":"    var result = test_tup1\n    var best_score = 0\n    for _, score in result.zip(test_tup2) {\n        if score > best_score {\n            best_score = score\n        }\n    }\n    for _, score in result.zip(test_tup2) {\n        if score == best_score {\n            result[i] = test_tup2[i]\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/260","completion":"    var count = 0\n    var current = 1\n    while (count < n) {\n        var isPrime = true\n        current = current + 1\n        while (current < Math.pow(current, 0.5)) {\n            if (current % 2 === 0) {\n                isPrime = false\n                break\n            }\n            current = current + 1\n        }\n        if (isPrime) {\n            count = count + 1\n        }\n    }\n    return current + 1\n}","language":"swift"}
{"task_id":"MBSWP\/261","completion":"    var result = [Int]()\n    var len1 = test_tup1.len\n    var len2 = test_tup2.len\n\n    var i = 0\n    var j = 0\n    while (i < len1 && j < len2) {\n        if (test_tup1[i] < test_tup2[j]) {\n            i += 1\n        } else if (test_tup1[i] > test_tup2[j]) {\n            j += 1\n        } else {\n            result[result.len] = test_tup1[i]\n            result.len += 1\n            i += 1\n            j += 1\n        }\n    }\n\n    while (i < len1) {\n        result[result.len] = test_tup1[i]\n        result.len += 1\n        i += 1\n    }\n\n    while (j < len2) {\n        result[","language":"swift"}
{"task_id":"MBSWP\/262","completion":"    let list1Arr = list1.copy()\n    let size = 0\n    for(var i in list1Arr) {\n        if(list1Arr[i] != null)\n            size += 1\n    }\n    let size1 = Math.floor(size \/ 2)\n    if(size % 2 == 0)\n        size1 = size1 - 1\n    let newList1 = []\n    let j = 0\n    for(var i in list1Arr) {\n        if(list1Arr[i] != null) {\n            newList1[j] = list1Arr[i]\n            j += 1\n            if(j == size1) {\n                newList1[j] = list1Arr[i]\n                j += 1\n                break\n            }\n        }\n    }\n    let newList2 = []\n    for(var i in list1Arr) {\n        if(","language":"swift"}
{"task_id":"MBSWP\/263","completion":"    res := []\n    for k1 in d1 {\n        if d1[k1] == d2[k1] {\n            res += [k1]\n        }\n        else {\n            res += [k1, d2[k1]]\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/264","completion":"    h_age * 7 * 52 + 7\n}","language":"swift"}
{"task_id":"MBSWP\/265","completion":"    let res = []\n    let n = 0\n    for (let i = 0; i < S.length; i++) {\n        if (n % step == 0 && i > 0) {\n            res.append([])\n        }\n        res[res.length - 1].append(S[i])\n        n++\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/266","completion":"    return (l * 2 * l * l) + (l * 4)\n}","language":"swift"}
{"task_id":"MBSWP\/267","completion":"    let sum = 0\n    for (i in 1..n) {\n        sum += i * i\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/268","completion":"    let result = 1 + (n * 2)\n    return result;\n}","language":"swift"}
{"task_id":"MBSWP\/269","completion":"    return ord(k)\n}","language":"swift"}
{"task_id":"MBSWP\/270","completion":"    \/\/ write your code here\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/271","completion":"    let sum = 0\n    for(i in 0..n) {\n        sum += evenPower(i * 5)\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/272","completion":"    var res = []\n    for x in test_list {\n        res.push(x[2])\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/273","completion":"    return [\n        test_tup1[0] - test_tup2[0],\n        test_tup1[1] - test_tup2[1],\n        test_tup1[2] - test_tup2[2]\n    ]\n}","language":"swift"}
{"task_id":"MBSWP\/274","completion":"    guard let n = n else {\n        throw NSRangeException(1, infinity)\n    }\n    guard let sum = 0 else {\n        throw NSRangeException(0, infinity)\n    }\n    for i in 1..n {\n        sum = sum + binomialCoeff(i, evenIndex(i))\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/275","completion":"    var k = 0\n    var i = 0\n    var j = 0\n    while (i < a.count && j < n) {\n        if (a[j] == m) {\n            k = j\n            j++\n        }\n        i++\n    }\n    return k\n}","language":"swift"}
{"task_id":"MBSWP\/276","completion":"    return 2.0 * r * h * Math.PI\n}","language":"swift"}
{"task_id":"MBSWP\/277","completion":"    var arr = []\n    var dictKeys = dict.keys()\n    for (key in dictKeys) {\n        var value = dict[dictKeys[key]]\n        if (value == n) {\n            arr.append(dictKeys[key])\n        }\n    }\n    return arr\n}","language":"swift"}
{"task_id":"MBSWP\/278","completion":"    let count = 0\n    for i in 0..test_tup.Count {\n        let val = test_tup[i] as! AnyHashable\n        if isinstance(val, [Some, None]) {\n            count++\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/279","completion":"    let d = 1\n    for(i = 2; i <= n; i++) {\n        d += i\n    }\n\n    if(d % (n * 10) == 0) {\n        return d \/ (n * 10)\n    }\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/280","completion":"    result := []\n    pos := 0\n\n    for i in dlist {\n        if item == i {\n            result.append(pos)\n        }\n        pos += 1\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/281","completion":"    if let item_count = test_list.count(test_list[0]) {\n        let last_item = test_list[test_list.count(test_list[0]) - 1]\n        let i = 0\n        for i in 1..item_count {\n            if test_list[i] != last_item {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/282","completion":"    let result = nums1.map { (x, i) in nums2 }\n    result = nums2.map { (x, i) in nums1 }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/283","completion":"    let freq = {}\n    let digits = n.toString().split('').map(digit => {\n        if (freq[digit]) {\n            freq[digit] += 1\n        } else {\n            freq[digit] = 1\n        }\n    })\n    for (let i = 0; i < digits.length; i++) {\n        if (freq[digits[i]] > 0 && freq[digits[i]] <= 1) {\n            continue\n        } else {\n            return false\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/284","completion":"    let isSame = true;\n    for (let i in list) {\n        let temp = list[i] === element;\n        if (!temp) {\n            isSame = false;\n        }\n    }\n    return isSame;\n}","language":"swift"}
{"task_id":"MBSWP\/285","completion":"    if(text.count(\"a\") < 2 || text.count(\"a\") > 3) {\n        return \"Not matched!\"\n    }\n    return \"Found a match!\"\n}","language":"swift"}
{"task_id":"MBSWP\/286","completion":"    var sum = 0\n    var maxSum = -1\n\n    for i = 0; i < k; i++) {\n        sum = 0\n        for j = 0; j < n; j++) {\n            sum += a[j]\n        }\n        maxSum = Math.max(maxSum, sum)\n    }\n\n    var j = 0\n    var currentSum = 0\n\n    while (j < n) {\n        currentSum += a[j]\n        if (currentSum > maxSum) {\n            maxSum = currentSum\n        }\n        j += 1\n    }\n    return maxSum\n}","language":"swift"}
{"task_id":"MBSWP\/287","completion":"    var result = 0\n    for(i = 0; i <= n; i++){\n        if(i%2 == 0){\n            result += i*i\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/288","completion":"    var dp = make(Int, N)\n    for (var i = 0; i < arr.length; i++) {\n        dp[i] = arr[i] % P\n    }\n    var result = dp[0]\n    for (var i = 1; i < N; i++) {\n        if (dp[i] == 0) {\n            continue\n        }\n        for (var j = i + 1; j < N; j++) {\n            if (dp[j] == 0) {\n                continue\n            }\n            result = (result * dp[j]) % P\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/289","completion":"    \/\/ write your code here\n}","language":"swift"}
{"task_id":"MBSWP\/290","completion":"  let list2 = []\n  let list3 = []\n  list2.append(list1[0].length)\n  for i in 0 until list1.length - 1 {\n    list3.append(list1[i + 1])\n    if (list2.length < list1[i].length) {\n      list2 = list3\n      list3 = []\n    }\n  }\n  return list2\n}","language":"swift"}
{"task_id":"MBSWP\/291","completion":"    if let n = 0 {\n        let ways = 1\n        ways\n    } else if let n = 1 {\n        let ways = k ^ n\n        ways\n    } else if let n = 2 {\n        let ways = (k^2)^n\n        ways\n    } else if let n = 3 {\n        let ways = (k^3)^n\n        ways\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/292","completion":"    return n \/ m;\n}","language":"swift"}
{"task_id":"MBSWP\/293","completion":"    \/\/ your code\n    if (h > w) {\n        return 0\n    } else if (h == w) {\n        return h \/ 2\n    } else {\n        return (w * h) \/ 4\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/294","completion":"    let max = listval[0] as Int\n    for(i in listval) {\n        if (max < listval[i]) {\n            max = listval[i]\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/295","completion":"    var sum : Int = 0\n    var factor : Int = 1\n\n    var index = 1\n    while (factor * index < number) {\n        if (number % factor == 0) {\n            sum += factor\n        }\n        index += 1\n    }\n    sum += number\n\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/296","completion":"    if let i = 0 {\n        while let j = i+1 {\n            if arr[i] > arr[j] {\n                i = j\n            } else {\n                break\n            }\n        }\n    }\n    return n - i\n}","language":"swift"}
{"task_id":"MBSWP\/297","completion":"    res := make([]Int, len(list1))\n    for i, e1 in enumerate(list1) {\n        if isa(e1, Array) {\n            for e2 in flattenList(e1) {\n                res[i] = e2\n            }\n        } else {\n            res[i] = e1\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/298","completion":"    let ret = [l1];\n    for i in l2 {\n        let temp = [];\n        for j in l1 {\n            if l2[i].contains(l1[j]) temp.append(l1[j]);\n        }\n        ret = ret + temp;\n    }\n    return ret;\n}","language":"swift"}
{"task_id":"MBSWP\/299","completion":"  \/\/ return the maximum value from the list of tuples\n}","language":"swift"}
{"task_id":"MBSWP\/300","completion":"    if let bits = n * (n + 1) \/ 2 - 1 {\n        bits = bits.to_s\n        let ans = 0.0\n        for i in {bits.split(\"0\")}.keys() {\n            let first = Number(i.to_s.split(\"0\")[0])\n            let last = Number(i.to_s.split(\"0\")[-1])\n            let sum = first + last\n            if i.length == 1 {\n                ans += (i.length * (i.length + 1) \/ 2) - 1\n            } else {\n                for j in {i.split(\"1\")}.keys() {\n                    sum += Number(j.to_s.split(\"1\")[-1])\n                    ans += sum\n                }\n            }\n        }\n        ans = ans.to_f\n        return ans\n    } else {\n        return 0.0\n    }","language":"swift"}
{"task_id":"MBSWP\/301","completion":"    let depth = 1\n    let foundKey = false\n    for (key in d) {\n        if (foundKey) {\n            depth++\n        } else {\n            foundKey = true\n        }\n        if (d[key] && typeof d[key] == \"object\") {\n            depth = depth + dictDepth(d[key])\n        }\n    }\n    return depth\n}","language":"swift"}
{"task_id":"MBSWP\/302","completion":"    let mostSignificantBit = 0\n    n >>= 1\n    while n > 0 {\n        n >>= 1\n        mostSignificantBit += 1\n    }\n    return mostSignificantBit\n}","language":"swift"}
{"task_id":"MBSWP\/303","completion":"    var b = reverse(a)\n    var result = True\n    for (let i = 0; i < n; i++) {\n        result = result && (a[i] == b[i])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/304","completion":"    let result = -1\n    for (let i = 0; i < rotations; i++) {\n        let range = ranges[i]\n        let end = range[1]\n        result = arr[end - 1]\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/305","completion":"    words.filter {word, index, words} => {\n        if(index == 0 && word.startsWith('p')) {\n            return word\n        }\n    }\n    return []\n}","language":"swift"}
{"task_id":"MBSWP\/306","completion":"    \/\/ Write your code here\n    if(n - index < k)\n        return 0\n    if(index > 0)\n        a[index] = a[index] + a[index - 1]\n    var max : Int = a[index]\n    for(i = index + 1; i <= n; i++) {\n        if(a[i] > max)\n            max = a[i]\n        else if(a[i] == max && i != k)\n            max = a[i]\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/307","completion":"    return map(\n        lambda tuple: (tuple[0], tuple[m], tuple[n]), tuplex\n    )\n}","language":"swift"}
{"task_id":"MBSWP\/308","completion":"  var products = []\n  var length = nums1.length + nums2.length\n  for (var i = 0; i < length; i++) {\n    var num = nums1[i % nums1.length]\n    var num2 = nums2[i % nums2.length]\n    products.append(num * num2)\n  }\n  products.sort((a, b) => b - a)\n  return products.slice(0, N)\n}","language":"swift"}
{"task_id":"MBSWP\/309","completion":"    return a > b ? a : b\n}","language":"swift"}
{"task_id":"MBSWP\/310","completion":"    var array = str1.split(\" \")\n    return array.map(v => {\n        return String.fromCharCode(v.charCodeAt(0) + 97)\n    })\n}","language":"swift"}
{"task_id":"MBSWP\/311","completion":"    n = n - (n & -n);\n    return n;\n}","language":"swift"}
{"task_id":"MBSWP\/312","completion":"    return Math.PI * r * r * h;\n}","language":"swift"}
{"task_id":"MBSWP\/313","completion":"    return let length = list1.count(x => x > 0) in\n        let result = 0 in\n            if length > 0 {\n                result = list1\n                    .collect(x => x > 0)\n                    .map(x => x + result.count(x))\n            } else {\n                result = 0\n            }\n        result\n}","language":"swift"}
{"task_id":"MBSWP\/314","completion":"    let res = 0\n    let x = 0\n    let y = 0\n\n    let sum = 0\n    for i <- n; i <= n; i++ {\n        for j <- n; j <= n; j++ {\n            sum = 0\n            for k <- i; k <= i; k++ {\n                for l <- j; l <= j; l++ {\n                    sum += grid[k][l]\n                }\n            }\n\n            if (res < sum) {\n                res = sum\n                x = i\n                y = j\n            }\n        }\n    }\n\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/315","completion":"    let maxLen = -1\n    let maxWord = \"\"\n\n    for (let i = 0; i < str.length; i++) {\n        if (isEven(str[i])) {\n            if (maxLen < i-1) {\n                maxLen = i-1\n                maxWord = str[i]\n            }\n        }\n    }\n\n    return maxWord\n}","language":"swift"}
{"task_id":"MBSWP\/316","completion":"    var i = 0, j = A.length - 1;\n    var index = -1;\n    while(i < j) {\n        var mid = i + (j - i)\/2;\n        if(x == A[mid]) {\n            index = mid;\n            j = mid;\n        } else if(x > A[mid]) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    return index;\n}","language":"swift"}
{"task_id":"MBSWP\/317","completion":"    let result = []\n    let current = 0\n    for i in alist {\n        result.append(alist[i])\n        if alist[i] != alist[i + 1] {\n            result[current + 1] = result[current + 1].append(alist[i + 1])\n        }\n        current++\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/318","completion":"    var l = 2 * s\n    var w = 2 * s\n    var h = 2 * s\n    var volume = l * w * h\n    if (l < 0 || w < 0 || h < 0) {\n        volume = 0\n    }\n    return volume\n}","language":"swift"}
{"task_id":"MBSWP\/319","completion":"    var regex = \/(\\w{5})\/g\n    var matches = regex.exec(text)\n\n    var result = []\n    while (matches != null) {\n        result.push(matches[1])\n        matches = regex.exec(text)\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/320","completion":"    var sum = 0\n    var sumOfSquares = 0\n    for i in 0..n {\n        sum += (i)\n        sumOfSquares += (i * i)\n    }\n    return sum * sum - sumOfSquares\n}","language":"swift"}
{"task_id":"MBSWP\/321","completion":"    let s1 = \"\"\n    let s2 = \"\"\n    let s3 = \"\"\n    let l = s.length\n    for (let i = l - 1; i >= 0; i--) {\n        let c = s.charAt(i)\n        if (c == \"1\") {\n            s1 += \"1\"\n            s2 += \"1\"\n            s3 += \"0\"\n        } else if (c == \"2\") {\n            s1 += \"1\"\n            s2 += \"0\"\n            s3 += \"1\"\n        } else if (c == \"3\") {\n            s1 += \"0\"\n            s2 += \"1\"\n            s3 += \"1\"\n        } else if (c == \"4\") {\n            s1 += \"0\"\n            s2 += \"0\"\n            s3 += \"0","language":"swift"}
{"task_id":"MBSWP\/322","completion":"    var minPos = 0\n    var minVal = list1[0]\n    for i in 0..list1.count {\n        if list1[i] < minVal {\n            minVal = list1[i]\n            minPos = i\n        }\n    }\n    return [minPos]\n}","language":"swift"}
{"task_id":"MBSWP\/323","completion":"    \/\/ TODO\n    return arr\n}","language":"swift"}
{"task_id":"MBSWP\/324","completion":"    sum : [Int] = [0, 0]\n    for i in test_tuple {\n        if (i % 2 == 0)\n            sum[0] += i\n        else\n            sum[1] += i\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/325","completion":"    var dp = [Int{0}].mutable!\n    dp[0] = 0\n    for (i in 1..n) {\n        dp[i] = 10000000\n        for (j in 1..i) {\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n        }\n    }\n    return dp[n]\n}","language":"swift"}
{"task_id":"MBSWP\/326","completion":"    var words = test_list.groupBy { it.count() }.keys()\n    var wordCount = words.map { it.split().count }.fold(0, (a, b) -> a + b)\n    var bestWord = words.filter(it.split().count == wordCount).first()\n    return bestWord\n}","language":"swift"}
{"task_id":"MBSWP\/327","completion":"    return (x == y || y == z || z == x || x + y > z + x && x + z > y + z && y + z > x + y)\n}","language":"swift"}
{"task_id":"MBSWP\/328","completion":"    \/\/ Your code here\n    if m == 0 || n == 0 {\n        return list1\n    }\n    \n    for i in 0..n {\n        list1.insert(0, list1.pop())\n    }\n    \n    return list1\n}","language":"swift"}
{"task_id":"MBSWP\/329","completion":"    if let sum = 0 in\n        sum = 0\n    for i in list\n        sum += if i < 0 in 0 + i\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/330","completion":"    var words = []\n    var regex = \/(?=[A-Z]{3})(?=[A-Z]{4})(?=[A-Z]{5})\/g\n    var match = regex.exec(text)\n    while (match != null) {\n        words.append(match[0])\n        match = regex.exec(text)\n    }\n    return words\n}","language":"swift"}
{"task_id":"MBSWP\/331","completion":"    let bitsCount = 0\n    let mask = 0\n    for i in 0..n {\n        if n & (1<<i) == 0 {\n            bitsCount = bitsCount + 1\n        }\n    }\n    return bitsCount\n}","language":"swift"}
{"task_id":"MBSWP\/332","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/333","completion":"    let index = 0\n    let sorted_list = []\n\n    while (index < sub_li.count) {\n        let minimum = -1\n        let minimum_index = -1\n\n        let sub_li_sub_li = sub_li[index]\n        let sub_li_sub_li_length = sub_li_sub_li.count\n        while (sub_li_sub_li_length > 0) {\n            let val = sub_li_sub_li[0]\n            let val_index = sub_li_sub_li[1]\n\n            if (val < minimum || minimum == -1) {\n                minimum = val\n                minimum_index = val_index\n            }\n            sub_li_sub_li_length--\n        }\n\n        sorted_list.append(sub_li[minimum_index])\n        index++\n    }\n\n    return sorted_list\n}","language":"swift"}
{"task_id":"MBSWP\/334","completion":"    return a < b + c and b < a + c and c < a + b\n}","language":"swift"}
{"task_id":"MBSWP\/335","completion":"    let sum = 0\n    let current = a\n    for i in 0..n {\n        sum = sum + current\n        current = current + d\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/336","completion":"    var days = 28\n\n    var monthnum = 0\n    switch(monthname1) {\n        case \"January\":\n            monthnum = 1\n            break;\n        case \"February\":\n            monthnum = 2\n            break;\n        case \"March\":\n            monthnum = 3\n            break;\n        case \"April\":\n            monthnum = 4\n            break;\n        case \"May\":\n            monthnum = 5\n            break;\n        case \"June\":\n            monthnum = 6\n            break;\n        case \"July\":\n            monthnum = 7\n            break;\n        case \"August\":\n            monthnum = 8\n            break;\n        case \"September\":\n            monthnum = 9\n            break;\n        case \"October\":\n            monthnum = 10\n            break;\n        case \"November\":\n            monthnum = 11\n            break;\n        case \"December\":\n            monthnum = 12\n            break;\n   ","language":"swift"}
{"task_id":"MBSWP\/337","completion":"    return matchLastWord(text, \"\")\n}","language":"swift"}
{"task_id":"MBSWP\/338","completion":"    var count = 0\n    var n = s.count\n    for i in 0..n {\n        for j in 0..n {\n            if s[i] == s[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/339","completion":"    if (x == 1 || y == 1) {\n        return 1\n    }\n    \/\/return 2\n}","language":"swift"}
{"task_id":"MBSWP\/340","completion":"    var a = lst.sort<Int>()\n    var b = a[0] + a[1] + a[2]\n    return b\n}","language":"swift"}
{"task_id":"MBSWP\/341","completion":"    let result = [None] * (s.size)\n\n    for (let i = 0; i < s.size; i++) {\n        result[i] = s[i]\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/342","completion":"    let first = list[0]\n    let second = list[1]\n    let smallest = first[0]\n    let largest = second[0]\n    for _, _ in enumerate(first) {\n        if first[_] < smallest {\n            smallest = first[_]\n        }\n        if first[_] > largest {\n            largest = first[_]\n        }\n    }\n    for _, _ in enumerate(second) {\n        if second[_] < smallest {\n            smallest = second[_]\n        }\n        if second[_] > largest {\n            largest = second[_]\n        }\n    }\n    return [smallest, largest]\n}","language":"swift"}
{"task_id":"MBSWP\/343","completion":"    guard let sum = 0 in\n    guard let dig = 0 in\n    guard let let = 0 in\n    guard let ch = 0 in\n    for let in s {\n        sum += 1\n        let = let + 1\n    }\n    for dig in s {\n        dig = dig + 1\n    }\n    for ch in s {\n        if ch >= 'a' and ch <= 'z' {\n            ch = ch + 1\n        }\n    }\n    return sum, dig, let, ch\n}","language":"swift"}
{"task_id":"MBSWP\/344","completion":"    let count = 0\n    var i : Int = 1\n    var j : Int = 2\n\n    while i <= m {\n        if (i*i <= n) {\n            if (n % i != 0) {\n                count += 1\n            }\n            i += 1\n        }\n        else if (j*j <= n) {\n            if (n % j != 0) {\n                count += 1\n            }\n            j += 1\n        }\n        else break\n    }\n\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/345","completion":"    var nums_copy = nums.slice()\n    var prevNum = nums_copy[0]\n    var diff = 0\n    var result = []\n\n    for (var i = 1; i < nums_copy.length; i++) {\n        if (nums_copy[i] == prevNum) {\n            diff = diff + 1\n        } else {\n            result.push(diff)\n            diff = 1\n            prevNum = nums_copy[i]\n        }\n    }\n\n    result.push(diff)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/346","completion":"    var res = 0\n    for i in 0..n-1 {\n        res += (i+k)\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/347","completion":"    var count = 0;\n    while (n >= m) {\n        n -= m;\n        count += 1;\n    }\n    return count;\n}","language":"swift"}
{"task_id":"MBSWP\/348","completion":"    if let sum1 = 1.0 * (M + 1) \/ 2.0\n    let sum2 = 1.0 * (M + 2) \/ 2.0\n    let sum3 = 1.0 * (M + 3) \/ 2.0\n    let sum4 = 1.0 * (M + 4) \/ 2.0\n    let sum5 = 1.0 * (M + 5) \/ 2.0\n    let sum6 = 1.0 * (M + 6) \/ 2.0\n    let sum7 = 1.0 * (M + 7) \/ 2.0\n    let sum8 = 1.0 * (M + 8) \/ 2.0\n    let sum9 = 1.0 * (M + 9) \/ 2.0\n    let sum10 = 1.0 *","language":"swift"}
{"task_id":"MBSWP\/349","completion":"    var size = 0\n    for(var i = 0; i < 4; i++){\n        var digit = string[i]\n        if (digit == '0' || digit == '1'){\n            size += 1\n        } else {\n            return \"No\"\n        }\n    }\n    if (size > 1){\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/350","completion":"    \/\/ Write your code here\n    let map = s.split(\"\").reduce((map, value) => {\n        if (map.has(value)) {\n            map[value] += 1\n        } else {\n            map[value] = 1\n        }\n        return map\n    }, {})\n\n    let count = 0\n\n    for (let [key, value] of map.entries()) {\n        if (value == 1) {\n            count++\n        }\n    }\n\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/351","completion":"    var i : Int = 0\n    var counter : Int = 0\n    while(true) {\n        if (i == arr.length) {\n            break\n        }\n        counter = arr[i]\n        if (counter == k) {\n            return arr[i]\n        }\n        i = i + 1\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/352","completion":"    let len = str.length\n    let temp = Array.mutable<Char>().init(len)\n    let res = true\n\n    for (i = 0; i < len; i++) {\n        let char = str[i]\n\n        if (temp.indexOf(char) == -1) {\n            temp.append(char)\n        } else {\n            res = false\n            break\n        }\n    }\n\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/353","completion":"    let i = 0\n    while (list1[i].length > n) {\n        list1[i].splice(n, 1)\n    }\n    return list1\n}","language":"swift"}
{"task_id":"MBSWP\/354","completion":"    let k = 0\n    let ans = 0\n\n    while (k < n) {\n        ans += (a - 1) * pow(d, k)\n        k += 1\n    }\n\n    return ans\n}","language":"swift"}
{"task_id":"MBSWP\/355","completion":"    var n = 0\n    for (var i = 1; i < radius; i++) {\n        for (var j = 1; j < radius; j++) {\n            if (i == radius - j) continue\n            n++\n        }\n    }\n    return n\n}","language":"swift"}
{"task_id":"MBSWP\/356","completion":"    var c = 180 - a - b\n    return c if c >= 0 else 360 + c\n}","language":"swift"}
{"task_id":"MBSWP\/357","completion":"    \/\/ write your code here\n}","language":"swift"}
{"task_id":"MBSWP\/358","completion":"    return nums1.map {\n        n => (n % nums2.nth(i).toInt()) \/ nums2.nth(i).toInt()\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/359","completion":"    var discriminant = b ** 2 - (4 * a * c);\n    var root1 = (-b + Math.sqrt(discriminant)) \/ (2 * a);\n    var root2 = (-b - Math.sqrt(discriminant)) \/ (2 * a);\n    return (root1 == root2) ? \"Yes\" : \"No\";\n}","language":"swift"}
{"task_id":"MBSWP\/360","completion":"    var i : Int = 0\n    var n1 : Int = 0\n    while (i < n) {\n        n1 = n1 + 1\n        i = i + 1\n    }\n    return n1 * 7\n}","language":"swift"}
{"task_id":"MBSWP\/361","completion":"    \/\/ You code goes here\n}","language":"swift"}
{"task_id":"MBSWP\/362","completion":"    var counter = Counter()\n    for x in nums {\n        counter[x] += 1\n    }\n    var best = -1\n    var max = -1\n    for k, v in counter.items {\n        if v > max {\n            max = v\n            best = k\n        }\n    }\n    return best\n}","language":"swift"}
{"task_id":"MBSWP\/363","completion":"    if let k = K {\n        \/\/ your code here\n        let new_list = []\n        for item in test_list {\n            \/\/ Your code here\n            let new_list = []\n            for item in test_list {\n                \/\/ Your code here\n                let sum = item + k\n                new_list.append(sum)\n            }\n            new_list.append(test_list[0])\n        }\n        new_list.append(test_list[0])\n        return new_list\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/364","completion":"    var left = 0;\n    var right = 0;\n    var numFlips = 0;\n\n    for (i <- str.length()) {\n        if (str[i] == \"0\") {\n            left++;\n        } else {\n            right++;\n        }\n\n        if (left == right) {\n            numFlips++;\n            left = 0;\n            right = 0;\n        }\n    }\n\n    return numFlips;\n}","language":"swift"}
{"task_id":"MBSWP\/365","completion":"    var digCount = 0\n    var dig = 0\n    while (n > 0) {\n        dig = n % 10\n        digCount = digCount + 1\n        n = n \/ 10\n    }\n    return digCount\n}","language":"swift"}
{"task_id":"MBSWP\/366","completion":"    var result = 0\n    for(i in list_nums) {\n        for(j in list_nums) {\n            if (i != j) {\n                result = max(result, list_nums[i] * list_nums[j])\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/368","completion":"    let result = [test_tup]\n    for _ in 1..N {\n        result += result\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/369","completion":"    return l * w * h + 2 * l * w + 2 * w * h + 2 * l + 2 * w;\n}","language":"swift"}
{"task_id":"MBSWP\/370","completion":"    price.sort((a, b) => float(a[1]) - float(b[1]))\n    return price\n}","language":"swift"}
{"task_id":"MBSWP\/371","completion":"    \/\/ TODO: write your code here\n}","language":"swift"}
{"task_id":"MBSWP\/372","completion":"    const queue = [] as Heap<Int>\n    for _, value of nums.enumerate() {\n        queue.add(value)\n    }\n\n    let sorted = []\n    while (queue.size) {\n        sorted.add(queue.remove())\n    }\n\n    return sorted\n}","language":"swift"}
{"task_id":"MBSWP\/373","completion":"    return l * w * h;\n}","language":"swift"}
{"task_id":"MBSWP\/374","completion":"    let res = []\n    let permutations(str, i : Int, map : [Int]String) {\n        if (i == str.length) {\n            res.push(map.join(\"\"))\n        } else {\n            let ch = str[i]\n            map[i] = ch\n            permutations(str, i + 1, map)\n            map[i] = 0\n            permutations(str, i + 1, map)\n        }\n    }\n    permutations(str, 0, [])\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/375","completion":"    var n1 = n \/ m\n    var n2 = Math.floor(n1)\n    return n - (n2 * m)\n}","language":"swift"}
{"task_id":"MBSWP\/376","completion":"    var out : [AnyHashable] = []\n    for {\n        if test_tup.count > 1 {\n            for {\n                val item : [Int] = 0\n                val _ : Int = 0\n                for {\n                    if test_tup.count >= 2 {\n                        _ = test_tup[item]\n                        test_tup.removeAt(_)\n                        item++\n                    } else {\n                        break\n                    }\n                }\n                val val_str : String = \"\"\n                val val_count : Int = 0\n                for {\n                    if test_tup.count >= 2 {\n                        val val = test_tup[item]\n                        test_tup.removeAt(val)\n                        val_str += String(val)\n                        val_count++\n                    } else {\n                        break\n                    }\n                }\n                out.append(test_tup.","language":"swift"}
{"task_id":"MBSWP\/377","completion":"    var sb : StringBuilder = StringBuilder()\n    for (var i : 0; i < s.length; i++) {\n        if (s[i] == c) {\n            continue\n        }\n        sb.append(s[i])\n    }\n    return sb.toString()\n}","language":"swift"}
{"task_id":"MBSWP\/378","completion":"    if let size = test_list.count { |i| test_list.count(i) } {\n        let new_list = [:]\n        let last_item = test_list[-1]\n        new_list.append(last_item)\n        for i in test_list.reverse {\n            let first_item = test_list[0]\n            new_list.insert(0, i)\n            test_list = new_list\n        }\n        return test_list\n    }\n    return nil\n}","language":"swift"}
{"task_id":"MBSWP\/379","completion":"    let surfacearea = 2 * (l * w + w * h + h * l)\n    return surfacearea\n}","language":"swift"}
{"task_id":"MBSWP\/380","completion":"    \/\/ write your code here\n}","language":"swift"}
{"task_id":"MBSWP\/381","completion":"    var result : [[AnyHashable]] = []\n    var temp_result : [[AnyHashable]] = []\n    for (var i = 0; i < list_data.length; i++) {\n        temp_result.push(list_data[i])\n        if (i == index_no) {\n            result.push(temp_result)\n            temp_result = []\n        }\n    }\n    if (temp_result.length > 0) {\n        result.push(temp_result)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/382","completion":"    var rotations = 0\n    var start = 0\n    var end = A.length - 1\n\n    while (start < end) {\n        rotations++\n        var mid = start + (end - start) \/ 2\n\n        if (A[mid] > A[mid + 1])\n            start = mid + 1\n        else\n            end = mid\n    }\n\n    if (A[start] < A[end])\n        rotations++\n\n    return rotations\n}","language":"swift"}
{"task_id":"MBSWP\/383","completion":"    n = n.to_s()\n    res = 0\n    for i in n {\n        if i.bit_length % 2 == 0 {\n            res = res + 0b1\n        } else {\n            res = res + 0b0\n        }\n    }\n    return Int(res)\n}","language":"swift"}
{"task_id":"MBSWP\/384","completion":"    var min = minIndex(arr)\n    var freq = 0\n    var min_val = arr[min]\n\n    for i in arr {\n        if (min_val == i) freq++\n    }\n\n    return freq\n}","language":"swift"}
{"task_id":"MBSWP\/385","completion":"    if (n == 0) {\n        return 0;\n    }\n    if (n % 2 == 0) {\n        return getPerrin(n \/ 2) + 1;\n    } else {\n        return getPerrin(n - 1) + 1;\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/386","completion":"    swap := 0\n    for i := 1, s.Length do {\n        if s[i - 1] == \"[\" and s[i] == \"]\" {\n            swap += 1\n        } else if s[i - 1] == \"{\" and s[i] == \"}\" {\n            swap += 1\n        } else if s[i - 1] == \"(\" and s[i] == \")\" {\n            swap += 1\n        }\n    }\n    return swap\n}","language":"swift"}
{"task_id":"MBSWP\/387","completion":"    if(N.length % 2 == 0) {\n        return \"Even\"\n    } else {\n        return \"Odd\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/388","completion":"    let power = 1\n    while (power <= n) {\n        power *= 2\n    }\n    return power \/ 2\n}","language":"swift"}
{"task_id":"MBSWP\/389","completion":"    \/\/ Write your code here\n}","language":"swift"}
{"task_id":"MBSWP\/390","completion":"    var result = [string]\n    for _, item in pairs(list) {\n        result.append(string.format(_))\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/391","completion":"  let list = [[l1[0], [l2[0], l3[0]]] as [String: [String: Int]]\n  for i in 0..l1.count {\n    list[i] = [l1[i], [l2[i], l3[i]]]\n  }\n  return list\n}","language":"swift"}
{"task_id":"MBSWP\/392","completion":"    if n == 0 {\n        return 0\n    }\n    else if n % 2 == 0 {\n        return getMaxSum(n\/2) + getMaxSum(n\/2)\n    }\n    else if n % 3 == 0 {\n        return getMaxSum(n\/3) + getMaxSum(n\/3)\n    }\n    else if n % 4 == 0 {\n        return getMaxSum(n\/4) + getMaxSum(n\/4)\n    }\n    else {\n        return getMaxSum(n\/5) + getMaxSum(n\/5)\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/393","completion":"    var list = input_list\n    var list1 = input_list.map { it.length }.max()\n    var list2 = _ > input_list.map { it.length }.max()\n\n    if list1 == list2 {\n        return [list1, input_list]\n    } else {\n        return [list2, input_list.filter { it.length == list1 }]\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/394","completion":"    return true\n}","language":"swift"}
{"task_id":"MBSWP\/395","completion":"        if (str1 == nil) {\n            return nil\n        }\n\n        let set = Set()\n        let nonRepeatingCharacter = \"\"\n\n        for (let i = 0; i < str1.length; i++) {\n            if (set.has(str1[i])) {\n                continue;\n            }\n            nonRepeatingCharacter = str1[i]\n            set.add(str1[i])\n        }\n\n        return nonRepeatingCharacter\n}","language":"swift"}
{"task_id":"MBSWP\/396","completion":"    if (string.matches(\/^(.).*\\1$\/) != null) {\n        return \"Valid\";\n    } else {\n        return \"Invalid\";\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/397","completion":"    let [x , y , z] = [a , b , c].sort()\n    let n = x + y + z\n    let m = n \/ 2\n    return (x + y + z) \/ 2\n}","language":"swift"}
{"task_id":"MBSWP\/398","completion":"    return sum([each { if let(digit, n = each) = n.digit { digit } else n } in nums])\n}","language":"swift"}
{"task_id":"MBSWP\/399","completion":"    var xor = 0\n    for {\n        xor = xor ^ {x <+ test_tup1.nth(i)} <+ test_tup2.nth(i)\n    }\n    return [xor <+ test_tup1.nth(i)]\n}","language":"swift"}
{"task_id":"MBSWP\/400","completion":"    var freq = {}\n\n    for _, value in test_list {\n        if freq[value] {\n            freq[value] += 1\n        } else {\n            freq[value] = 1\n        }\n    }\n\n    var max = -1\n    for _, value in freq {\n        if freq[value] > max {\n            max = freq[value]\n        }\n    }\n\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/401","completion":"    let result_tup : [[Int]] = []\n    let index = 0\n    for test_tup1_elem in test_tup1 {\n        result_tup.append([])\n        for test_tup2_elem in test_tup2 {\n            result_tup[index].append(test_tup1_elem[0] + test_tup2_elem[0])\n        }\n        index += 1\n    }\n    return result_tup\n}","language":"swift"}
{"task_id":"MBSWP\/402","completion":"    var factorial = 1\n    for i <- 0 until n\n        factorial <- factorial * i\n    var ncr = factorial \/ (factorial - 1)\n    ncr <- ncr * (n - r) * (p - 1) \/ (r - 1)\n    return ncr\n}","language":"swift"}
{"task_id":"MBSWP\/403","completion":"    guard let url = str.match(Regex(r\"https:\\\/\\\/.{1,}\/\")) else {\n        return false\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/404","completion":"    return a < b ? a : b\n}","language":"swift"}
{"task_id":"MBSWP\/405","completion":"    var size = tuplex.Count\n    var i = 0\n    while i < size {\n        var elem = tuplex[i]\n        if elem == tuple1 {\n            return true\n        }\n        i += 1\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/406","completion":"    if (x % 2 == 0) {\n        return \"Even Parity\"\n    }\n    else {\n        return \"Odd Parity\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/407","completion":"    let a = str(n)\n    let b = str(a.reverse)\n    let a = b.split('').reverse().join('')\n    return 0 if a.length < 2 else a\n}","language":"swift"}
{"task_id":"MBSWP\/408","completion":"    let pairs = [] as [[Int]]\n    for let i = 0; i < nums1.length; i++) {\n        for let j = 0; j < nums2.length; j++) {\n            if (nums1[i] != nums2[j]) {\n                pairs.append([nums1[i], nums2[j]])\n                if (pairs.length == k) {\n                    return pairs\n                }\n            }\n        }\n    }\n    return pairs\n}","language":"swift"}
{"task_id":"MBSWP\/409","completion":"    guard let l = list1 else {\n        print(\"invalid input\")\n        return -1\n    }\n    guard let m = l.size else {\n        print(\"invalid input\")\n        return -1\n    }\n\n    let t0 = m - 1\n    let t1 = t0 - 1\n\n    let min = {\n        let a = l[t0][0] * l[t1][0]\n        let b = l[t0][1] * l[t1][1]\n        min = a if a < b else b\n    }\n\n    while (t1 >= 0) {\n        let a = l[t0][0] * l[t1][1]\n        let b = l[t0][1] * l[t1][0]\n        if (a < b) {\n            min = a if a < min else min\n            t1--\n        } else {\n            min = b if b ","language":"swift"}
{"task_id":"MBSWP\/410","completion":"    if(listval.empty()) return 0\n    return min(listval.map(|i| (i as Int)))\n}","language":"swift"}
{"task_id":"MBSWP\/411","completion":"    if (word.empty()) {\n        return \"\"\n    }\n    return word.replace(\n        \/(_\\w)\/g,\n        (_, character) => {\n            return character.toUpperCase()\n        }\n    )\n}","language":"swift"}
{"task_id":"MBSWP\/412","completion":"    if let i = l.count? 0 {\n        if let odd = l[i] % 2 == 1 {\n            l[i] = 0\n        }\n    }\n    return l\n}","language":"swift"}
{"task_id":"MBSWP\/413","completion":"    var res: [AnyHashable] = []\n    for(let i = 0; i < list1.Count; i++) {\n        var item = list1[i]\n        res.push(item[n])\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/414","completion":"    return (first, second) in\n        (list1, list2) => (first in list1 && second in list2) || (first in list2 && second in list1)\n}","language":"swift"}
{"task_id":"MBSWP\/415","completion":"    let max: Int = -999999\n    let secondMax: Int = -999999\n    let maxPair = [0, 0]\n\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            secondMax = max\n            max = arr[i]\n            maxPair[0] = maxPair[1]\n            maxPair[1] = i\n        } else if (arr[i] > secondMax) {\n            secondMax = arr[i]\n        }\n    }\n\n    return maxPair\n}","language":"swift"}
{"task_id":"MBSWP\/416","completion":"  if n == 0 {\n    return 0\n  }\n  let first =  n % 10\n  let second = n % 100 \/\/ 100 - first\n  let third = 100 - first - second\n\n  return first + third + breaksum(second)\n}","language":"swift"}
{"task_id":"MBSWP\/417","completion":"    \/\/ let arr = Input.flat();\n    \/\/ arr.sort()\n    \/\/ let prev = arr[0]\n    \/\/ let res = []\n    \/\/ for(let i=0; i<arr.length; i++) {\n    \/\/     if(prev !== arr[i]) {\n    \/\/         res.push(arr[i])\n    \/\/     }\n    \/\/ }\n    \/\/ return res\n    let res = []\n    let dict = {}\n    for(let i=0; i<Input.length; i++) {\n        dict[Input[i][0]] = dict[Input[i][0]] ? dict[Input[i][0]] + 1 : 1;\n        if(dict[Input[i][0]] === 1) {\n            res.push([Input[i][0]]);\n        }\n    }\n    for(let i=0; i<Input.length; i++) {\n        for(let j=1; j<Input[i","language":"swift"}
{"task_id":"MBSWP\/418","completion":"    let max: Int = 0;\n    let maxIndex: Int;\n    for i in lst.indices {\n        if lst[i].count > max {\n            max = lst[i].count;\n            maxIndex = i;\n        }\n    }\n    return lst[maxIndex].value;\n}","language":"swift"}
{"task_id":"MBSWP\/419","completion":"    \/\/Write your code here.\n}","language":"swift"}
{"task_id":"MBSWP\/420","completion":"    var res = 0\n    for (i in 0..n) {\n        res = res + (i * i * i)\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/421","completion":"    return \"-\".join(test_tup)\n}","language":"swift"}
{"task_id":"MBSWP\/422","completion":"    var sum = 0\n    var count = 0\n    var cube = (x: Double) -> x^3\n    for  i in 0..n {\n        sum += cube(i)\n        count += 1\n    }\n    return sum \/ count\n}","language":"swift"}
{"task_id":"MBSWP\/423","completion":"    Int = 0\n    gold.sort((a, b) => a[0] - b[0])\n    for _, i, j in gold {\n        Int += max(i, j)\n    }\n    return Int\n}","language":"swift"}
{"task_id":"MBSWP\/424","completion":"    let result = []\n    for _, value in test_tuple {\n        let length = value.length()\n        if length % 2 == 0 {\n            result.append(value[length - 1])\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/425","completion":"    let answer = 0\n    for i in 0 until len(list1) {\n        if (x in list1[i]) {\n            answer += 1\n        }\n    }\n    return answer\n}","language":"swift"}
{"task_id":"MBSWP\/426","completion":"    return filter(x => x % 2 != 0, nums)\n}","language":"swift"}
{"task_id":"MBSWP\/427","completion":"    var patt = \/^(\\d{4})-(\\d{2})-(\\d{2})$\/;\n    var res = patt.exec(dt);\n    var year = res[1];\n    var month = res[2];\n    var day = res[3];\n    var newDate = \"\";\n    newDate += (day < 10) ? \"0\" + day : day;\n    newDate += \"-\";\n    newDate += (month < 10) ? \"0\" + month : month;\n    newDate += \"-\";\n    newDate += year;\n    return newDate;\n}","language":"swift"}
{"task_id":"MBSWP\/428","completion":"    var n = my_list.length\n    h = 1\n    while (h < n\/3) {\n        h = 3*h + 1\n    }\n    while (h >= 1) {\n        for (i = h; i < n; i++) {\n            for (j = i; j >= h && my_list[j] < my_list[j-h]; j -= h) {\n                var temp = my_list[j]\n                my_list[j] = my_list[j-h]\n                my_list[j-h] = temp\n            }\n        }\n        h = h\/3\n    }\n    return my_list\n}","language":"swift"}
{"task_id":"MBSWP\/429","completion":"    var result = [0] * 2\n    result[0] = 0\n    result[1] = 0\n    for i in 0..test_tup1.Length {\n        if test_tup1[i] == test_tup2[i] then {\n            result[0] = result[0] + 1\n        } else {\n            result[1] = result[1] + 1\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/430","completion":"    let delta = b * b - 4 * a * c;\n    if(delta >= 0) {\n        return (-b + delta ** (1\/2)) \/ (2 * a);\n    } else {\n        return -b \/ (2 * a);\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/431","completion":"    var hashMap = {} as {[key: AnyHashable] : 0}\n    for (var i = 0; i < list1.length; i++) {\n        if (hashMap.hasOwnProperty(list1[i])) {\n            hashMap[list1[i]] += 1;\n        }\n        else {\n            hashMap[list1[i]] = 1;\n        }\n    }\n    for (var j = 0; j < list2.length; j++) {\n        if (hashMap.hasOwnProperty(list2[j]) && hashMap[list2[j]] > 0) {\n            return list2[j]\n        }\n    }\n    return \"none\"\n}","language":"swift"}
{"task_id":"MBSWP\/432","completion":"        return ((base1 + base2) \/ 2 + height \/ 2) \/ 2\n}","language":"swift"}
{"task_id":"MBSWP\/433","completion":"    for(let i = 0; i < arr.length; i++) {\n        if(arr[i] > number) {\n            return \"Yes, the entered number is greater than those in the array\"\n        } else {\n            return \"No, entered number is less than those in the array\"\n        }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/434","completion":"    if (text.length < 2) return \"Not matched!\"\n    if (text[0] == \"a\" && text[1] == \"b\") return \"Found a match!\"\n    return \"Not matched!\"\n}","language":"swift"}
{"task_id":"MBSWP\/435","completion":"    var d = 0\n    var c = n % 10\n    if n > 0 {\n        d = n % 100\n        if (d > 0) {\n            c = d % 10\n        }\n    }\n    return c\n}","language":"swift"}
{"task_id":"MBSWP\/436","completion":"    for _, elem in enumerate(list1) {\n        if elem < 0 {\n            println(elem)\n        }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/437","completion":"    var count = 0\n    var result = \"\"\n    for (i <- str1.length; i >= 0; i--) {\n        if (count % 2 == 1) {\n            result += str1[i]\n        }\n        count++\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/438","completion":"    var map = {} as Map<Int, Int>\n    test_list.forEach {\n        if (map.has(pair[0]) && map.has(pair[1])) {\n            map[pair[0]] += 1\n            map[pair[1]] += 1\n        } else if (map.has(pair[0])) {\n            map[pair[0]] += 1\n        } else if (map.has(pair[1])) {\n            map[pair[1]] += 1\n        } else {\n            map[pair[0]] = 1\n            map[pair[1]] = 1\n        }\n    }\n    var count = 0\n    for _, value in map.items {\n        count += value\n    }\n    return count.toString()\n}","language":"swift"}
{"task_id":"MBSWP\/439","completion":"    let sum = 0\n    for {\n        sum += L(1)\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/440","completion":"    return text.findAll(word => \/^.*[aeiou].*[aeiou].*$\/.test(word))\n}","language":"swift"}
{"task_id":"MBSWP\/441","completion":"    return (2 * 6 * l + 2) * l * l\n}","language":"swift"}
{"task_id":"MBSWP\/442","completion":"    if(nums.count(0) == 0) {\n        return 1.0;\n    }\n    return nums.count(0)\/nums.length;\n}","language":"swift"}
{"task_id":"MBSWP\/443","completion":"    var max = -infinity\n    for(i in list1) {\n        if(list1[i] < 0) {\n            max = max if max < list1[i] else list1[i]\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/444","completion":"    var trimmed_list: [Int]\n    var k_index: Int\n    for (k_index <- test_list.count) {\n        if (test_list[k_index].length > K) {\n            var result: [Int] = []\n            for (var item <- test_list[k_index]) {\n                result.append(item.slice(0, K))\n            }\n            trimmed_list.append(result)\n        } else {\n            trimmed_list.append(test_list[k_index])\n        }\n    }\n    return trimmed_list\n}","language":"swift"}
{"task_id":"MBSWP\/445","completion":"    let a = (1 to test_tup1.count).map { (x, i) -> x.map { (y, j) -> test_tup2[i][j] * y } }\n    return a\n}","language":"swift"}
{"task_id":"MBSWP\/446","completion":"    var occurrences = 0\n    for (element in tup) {\n        if (lst.contains(element)) {\n            occurrences += 1\n        }\n    }\n    return occurrences\n}","language":"swift"}
{"task_id":"MBSWP\/447","completion":"    return nums.map {n => n * n * n}\n}","language":"swift"}
{"task_id":"MBSWP\/448","completion":"    if n == 0 {\n        return 0\n    } else {\n        return n + calSum(n - 1)\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/449","completion":"    var a = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2);\n    if (a == 0) {\n        return \"No\"\n    } else if (a > 0) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/450","completion":"    var result = []\n    var i = 0\n    while(i < l) {\n        if (str[i] == undefined || str[i] == null || str[i] == \"\" || \n        i == l - 1) {\n            break\n        }\n        result.append(str[i])\n        i = i + 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/451","completion":"    return text1.replaceAll(\"\\\\s+\", \"\")\n}","language":"swift"}
{"task_id":"MBSWP\/452","completion":"    if (sale_amount >= actual_cost) {\n        return None\n    } else {\n        return actual_cost - sale_amount\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/453","completion":"    var sum = 0\n    var s = 1\n    while(s < n) {\n        if(n % s == 0) {\n            if(s % 2 == 0) sum = sum + s\n        }\n        s = s + 1\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/454","completion":"    if (text.contains(\"z\")) {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}","language":"swift"}
{"task_id":"MBSWP\/455","completion":"    var monthNum = 31\n    if (monthnum2 <= 12) {\n        if (monthnum2 == 2) {\n            monthNum = 29\n        } else if (monthnum2 % 4 == 0) {\n            monthNum = 30\n        }\n        return monthnum2 > 12 ? false : true\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/456","completion":"    let result = []\n    for(let i = stringlist.length - 1; i >= 0; i--){\n        result.push(stringlist[i])\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/457","completion":"    let min = [0, 1]\n\n    for item in lst {\n        if item.count < min.count {\n            min = item\n        }\n    }\n\n    return min\n}","language":"swift"}
{"task_id":"MBSWP\/458","completion":"    var area : Int\n    area = l * b\n    return area\n}","language":"swift"}
{"task_id":"MBSWP\/459","completion":"    var regex = \/([A-Z])\/g\n    return str1.replaceAll(regex, '')\n}","language":"swift"}
{"task_id":"MBSWP\/460","completion":"    for _, lst, _ in let (k, v, i in lst.enumerate()) {\n        if i == 0 {\n            let new_list = []\n            for x in v.collect() {\n                new_list.append(x)\n            }\n            return new_list\n        }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/461","completion":"    return str.count(each => each.isUpperCase())\n}","language":"swift"}
{"task_id":"MBSWP\/462","completion":"    let result = [[list1.copy]];\n\n    for (let i = 0; i < list1.length; i++) {\n        let newList = list1.slice(0);\n        newList.splice(i, 1);\n        result.push(newList.map(item => [item].concat(result[i])));\n    }\n\n    return result.flat();\n}","language":"swift"}
{"task_id":"MBSWP\/463","completion":"    var max: Int = Int(0)\n    var maxProduct: Int = Int(0)\n    var min: Int = Int(0)\n    var minProduct: Int = Int(0)\n\n    for i in arr {\n        if(max < i) {\n            max = i\n        }\n        if(maxProduct < (i * max)) {\n            maxProduct = i * max\n        }\n        if(min > i) {\n            min = i\n        }\n        if(minProduct > (i * min)) {\n            minProduct = i * min\n        }\n    }\n\n    return maxProduct\n}","language":"swift"}
{"task_id":"MBSWP\/464","completion":"    let allSame = true;\n\n    for (let key of dict.keys()) {\n        if (dict[key] != n) {\n            allSame = false;\n            break;\n        }\n    }\n\n    return allSame;\n}","language":"swift"}
{"task_id":"MBSWP\/465","completion":"    return Object.keys(dict1).filter(key => dict1[key] != \"none\")\n}","language":"swift"}
{"task_id":"MBSWP\/466","completion":"    var left = 0\n    var right = n - 1\n    var mid = 0\n\n    while (left <= right) {\n        mid = left + (right - left) \/ 2\n\n        if (arr[mid] > arr[mid + 1]) {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n\n    return left\n}","language":"swift"}
{"task_id":"MBSWP\/467","completion":"    var octalNum = 0\n    while (deciNum > 0) {\n        octalNum = octalNum * 8 + (deciNum % 8)\n        deciNum = deciNum \/ 8\n    }\n    return octalNum\n}","language":"swift"}
{"task_id":"MBSWP\/468","completion":"    var left : Int\n    var right : Int\n    var max : Int\n    var arrLen : Int\n    arrLen = length(arr)\n    if arrLen < n :\n        return 0\n    left = 0\n    right = arrLen - n\n    max = 0\n    var i : Int\n    var product : Int\n    for i from left to right by 1 {\n        product = 1\n        for j from 0 to i {\n            product *= arr[j]\n        }\n        for j from i + 1 to right {\n            product *= arr[j]\n        }\n        if product > max {\n            max = product\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/469","completion":"    if(k > price.length) return 0\n    let minPrice = price[0]\n    let maxProfit = 0\n    for (let i = 1; i < price.length; i++) {\n        if (price[i] < minPrice) {\n            minPrice = price[i]\n        }\n        maxProfit = Math.max(price[i] - minPrice, maxProfit)\n    }\n    return maxProfit\n}","language":"swift"}
{"task_id":"MBSWP\/470","completion":"    ret_tup = []\n    for i <- test_tup.length - 1; i >= 0; i-- {\n        for j <- test_tup.length - 1; j >= 0; j-- {\n            ret_tup.append(test_tup[i] + test_tup[j])\n        }\n    }\n    return ret_tup\n}","language":"swift"}
{"task_id":"MBSWP\/471","completion":"    var remainder = 0\n    for i in arr {\n        if(i % n == 0) {\n            remainder += i\n            if(i != n) {\n                remainder += (i \/ n)\n            }\n        }\n    }\n    return remainder\n}","language":"swift"}
{"task_id":"MBSWP\/472","completion":"    let set = Set(l)\n    if (l.size > 1) {\n        let difference = set.diff(l[0], l[l.size - 1])\n        return difference.empty ? false : true\n    } else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/473","completion":"    return Set.intersection(Set(test_list1), Set(test_list2))\n}","language":"swift"}
{"task_id":"MBSWP\/474","completion":"  result := str1.copy()\n  index := result.find(ch)\n  if index != -1 {\n    result[index] = newch\n  }\n  return result\n}","language":"swift"}
{"task_id":"MBSWP\/475","completion":"    var dict2 = [[]]\n    for _, v in dict1\n        if v not in dict2\n            dict2 = dict2 + [[v, dict1[v]]]\n\n    return dict2\n}","language":"swift"}
{"task_id":"MBSWP\/476","completion":"    var largest = 0\n    var smallest = 0\n    for num in nums {\n        if (num > largest) {\n            largest = num\n        }\n        if (num < smallest) {\n            smallest = num\n        }\n    }\n    return largest + smallest\n}","language":"swift"}
{"task_id":"MBSWP\/477","completion":"    return \"haha\"\n}","language":"swift"}
{"task_id":"MBSWP\/478","completion":"        var result : String = \"\"\n        var temp : String\n        for (temp of str1) {\n                if (temp >= \"A\" && temp <= \"Z\") {\n                        result += temp\n                }\n        }\n        return result\n}","language":"swift"}
{"task_id":"MBSWP\/479","completion":"    return n.toString(10).split('').first()\n}","language":"swift"}
{"task_id":"MBSWP\/480","completion":"    return\n}","language":"swift"}
{"task_id":"MBSWP\/481","completion":"    if (set.size == 0) return false\n    if (sum == 0) return true\n\n    let found = false\n    let setSize = set.size\n    let sumSize = set.sumSize\n\n    for (let i = 0; i < setSize; i++) {\n        sum = sum - set[i]\n        for (let j = i; j < setSize; j++) {\n            sum = sum - set[j]\n            if (sum == 0) {\n                found = true\n                break\n            }\n        }\n        if (found) {\n            break\n        }\n    }\n    return found\n}","language":"swift"}
{"task_id":"MBSWP\/482","completion":"    var pattern = \/([A-Z][a-z]+)\/g\n    var match = pattern.match(text)\n    if match != null {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/483","completion":"    var i : Int\n    var fact : Int\n    var div : Int\n    div = 2\n    fact = 1\n    for i = 2; i <= x; i++ {\n        fact = fact * i\n        if (fact % div != 0) {\n            div = div + 1\n            continue\n        }\n        return i\n    }\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/484","completion":"  val answer = []\n  for (list1 in test_list1) {\n    for (list2 in test_list2) {\n      if (list1 == list2) {\n        continue\n      }\n      if (list1.length == list2.length) {\n        for (i in 0 until list1.length) {\n          if (list1[i] != list2[i]) {\n            break\n          } else {\n            continue\n          }\n        }\n        if (i == list1.length) {\n          answer.append(list1)\n        }\n      }\n    }\n  }\n  return answer\n}","language":"swift"}
{"task_id":"MBSWP\/485","completion":"    \/\/ TODO: code\n}","language":"swift"}
{"task_id":"MBSWP\/486","completion":"  return (n! \/ k! * p^k) \/ (1! * p^n)\n}","language":"swift"}
{"task_id":"MBSWP\/487","completion":"    if tup.empty? {\n        return []\n    }\n    if tup.size == 1 {\n        return tup.head\n    }\n\n    val compareLast = (x: [Int], y: [Int]) -> Int {\n        return x.last - y.last\n    }\n\n    val sortedTuples = tup.sort(compareLast)\n\n    return sortedTuples.map(tup => tup.dropLast)\n}","language":"swift"}
{"task_id":"MBSWP\/488","completion":"    return (6 * Math.sqrt(8 * a + 1)) \/ 4\n}","language":"swift"}
{"task_id":"MBSWP\/489","completion":"    var max = arr[0]\n    var maxFreq = 1\n\n    for i in arr {\n        if (i > max) {\n            max = i\n            maxFreq = 1\n        } else if (i == max) {\n            maxFreq += 1\n        }\n    }\n\n    return maxFreq\n}","language":"swift"}
{"task_id":"MBSWP\/490","completion":"    var symmetricPairs : Set<[Int]>\n\n    for i in test_list {\n        symmetricPairs.add([test_list[i][0], test_list[i][1]])\n    }\n\n    for i in test_list {\n        symmetricPairs.add([test_list[i][1], test_list[i][0]])\n    }\n\n    return symmetricPairs\n}","language":"swift"}
{"task_id":"MBSWP\/491","completion":"    \/\/ 1. <unk>\ufffd\ufffd<unk>L\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd\ufffd <unk>3\ufffd<unk>\ufffd\ufffd\n    \/\/ 2. <unk>3\ufffd<unk>\ufffd\ufffd <unk>2\ufffd<unk>314 <unk>\ufffd\ufffd<unk>\ufffd\n    return a * (1.0 - r + r \/ n) \/ (1 - r)\n}","language":"swift"}
{"task_id":"MBSWP\/492","completion":"    var left = 0, right = item_list.count() - 1;\n    while (left <= right) {\n        var middle = left + (right - left) \/ 2;\n        var itemAtMiddle = item_list[middle];\n        if (itemAtMiddle == item) {\n            return true;\n        } else if (itemAtMiddle > item) {\n            right = middle - 1;\n        } else {\n            left = middle + 1;\n        }\n    }\n    return false;\n}","language":"swift"}
{"task_id":"MBSWP\/493","completion":"    var points = []\n    var i, j, k\n    for (i = startx; i <= endx; i++) {\n        for (j = starty; j <= endy; j++) {\n            points.push(new Point(i, j))\n        }\n    }\n    var polygons = []\n    for (k = 0; k < points.length; k++) {\n        for (i = 0; i < radius; i++) {\n            for (j = 0; j < radius; j++) {\n                polygons.push([points[k - radius + i], points[k + radius - j]])\n            }\n        }\n    }\n    return polygons\n}","language":"swift"}
{"task_id":"MBSWP\/494","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/495","completion":"}","language":"swift"}
{"task_id":"MBSWP\/496","completion":"    let minHeap = New minHeap()\n    for _, value of nums.enumerate() {\n        minHeap.add(value)\n    }\n\n    let output = []\n    for _ in range(n) {\n        output.push(minHeap.pop())\n    }\n    return output\n}","language":"swift"}
{"task_id":"MBSWP\/497","completion":"    var pi = 3.14159265358979;\n    var s = 2 * pi * r * r;\n    var a = 2 * pi * r * h;\n    return s + a;\n}","language":"swift"}
{"task_id":"MBSWP\/498","completion":"    if x < 1 | y < 1 {\n        return 0\n    }\n\n    var gcd : Int = 0\n\n    while(y) {\n        (y, x) = (x % y, y)\n        gcd = x\n    }\n\n    return gcd\n}","language":"swift"}
{"task_id":"MBSWP\/499","completion":"    let pi = 3.14\n    let diameter = 2 * pi * r\n    return diameter\n}","language":"swift"}
{"task_id":"MBSWP\/500","completion":"    result := \"\"\n    for element in list {\n        result += element\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/501","completion":"    var div : Int = abs(x) < abs(y) ? abs(x) : abs(y)\n\n    \/\/ Base condition\n    if (div == 0) {\n        return 0\n    }\n    \/\/ Check if the absolute of the div is smaller than the other number\n    if (abs(x) > abs(y)) {\n        \/\/ Swap the values and get the correct result\n        x, y = y, x\n    }\n\n    \/\/ Iterate over all the divisors\n    while (div > 0) {\n        if (x % div == 0 && y % div == 0) {\n            \/\/ Break out of the loop and return the common divisor\n            return div\n        }\n        \/\/ Check if the current divisor is smaller than the current div\n        div = div - 1\n    }\n    \/\/ Return the biggest divisor\n    return 0\n}","language":"swift"}
{"task_id":"MBSWP\/502","completion":"    if n < m {\n        return 0\n    } else {\n        return 1\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/503","completion":"    result = []\n    num = 1\n    for num in nums {\n        result.append(num)\n        if num == nums[nums.index(num) + 1] {\n            num += 1\n            result.append(num)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/504","completion":"    if let result = 0 in\n        for i in 0..n {\n            result = result + i * i * i\n        }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/505","completion":"    for (var i = 0, len = A.Length; i < len; i++) {\n        if (A[i] == 0) {\n            A.RemoveAt(i);\n            A.AddAt(A.Length, 0);\n        }\n    }\n    return A;\n}","language":"swift"}
{"task_id":"MBSWP\/506","completion":"    var numerator : Int = factorial(n)\n    var denominator : Int = factorial(n-k)\n    return numerator\/denominator\n}","language":"swift"}
{"task_id":"MBSWP\/507","completion":"    for (i in removewords) {\n        list1.removeAll(removewords[i])\n    }\n    return list1\n}","language":"swift"}
{"task_id":"MBSWP\/508","completion":"    var common = 0\n    var l1Size = l1.size\n    var l2Size = l2.size\n    for i in l1.keySet() {\n        if (l2.contains(l1.get(i))) {\n            common += 1\n        }\n    }\n    return l1Size == common && l2Size == common\n}","language":"swift"}
{"task_id":"MBSWP\/509","completion":"    var sum = 0\n    var count = 0\n    for(i in 0 until n) {\n        if(i % 2 != 0) {\n            sum = sum + i\n            count = count + 1\n        }\n    }\n    return sum \/ count\n}","language":"swift"}
{"task_id":"MBSWP\/510","completion":"    var n : Int = arr.size\n    var m : Int = 0\n    for (i in arr) {\n        var j : Int = i\n        var k : Int = 1\n        while (j < n && arr[j] <= arr[i]) {\n            j++\n            k++\n        }\n        if (k < m) {\n            m = k\n        }\n    }\n    return m\n}","language":"swift"}
{"task_id":"MBSWP\/511","completion":"    if let num = 1;\n        return 1;\n    else if let num = 1;\n        return 1;\n    else if let num = 2;\n        return 2;\n    else if let num = 3;\n        return 3;\n    else if let num = 4;\n        return 5;\n    else if let num = 5;\n        return 8;\n    else if let num = 6;\n        return 11;\n    else if let num = 7;\n        return 15;\n    else if let num = 8;\n        return 22;\n    else if let num = 9;\n        return 30;\n    else if let num = 10;\n        return 35;\n    else if let num = 11;\n        return 45;\n    else if let num = 12;\n        return 48;\n}","language":"swift"}
{"task_id":"MBSWP\/512","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/513","completion":"    res := make([]Int, len(test_tup))\n    for i, e in enumerate(test_tup) {\n        res[i] = e\n    }\n    for i in range(len(test_tup)) {\n        res[i] = res[i] + K\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/514","completion":"    sum := 0\n    for i in test_tup {\n        sum += i\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/515","completion":"    \/\/ Your code\n}","language":"swift"}
{"task_id":"MBSWP\/516","completion":"    let maxDigit = getMaxDigit(nums)\n    let bucket = [[] for _ in range(10)]\n\n    for num in nums {\n        digit := getDigitFromNumber(num, maxDigit)\n        bucket[digit].append(num)\n    }\n\n    for i in range(10) {\n        bucket[i].sort()\n    }\n\n    return flatten(bucket)\n}","language":"swift"}
{"task_id":"MBSWP\/517","completion":"    var result = 0\n    for _, v in ipairs(list1) {\n        if v >= 0 {\n            result = v\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/518","completion":"    if num < 0 then {\n        \/\/ Invalid parameter\n        return -1\n    } else if (num <= 1) {\n        \/\/ Square root of 1 is 1\n        return 1\n    } else {\n        \/\/ Use binary search to find the square root of num\n        let low = 1\n        let high = num\/2\n        while low <= high {\n            let mid = (low + high) \/ 2\n            let midSq = mid * mid\n            if (midSq > num) {\n                high = mid - 1\n            } else if (midSq < num) {\n                low = mid + 1\n            } else {\n                \/\/ Square root of num is mid\n                return mid\n            }\n        }\n        \/\/ This will never happen\n        return -1\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/519","completion":"    var edge : Double = num * (num + 1) * (2 * num + 1) \/ 6\n    return (num * (num + 1) * (3 * num - 1) \/ 2) + edge\n}","language":"swift"}
{"task_id":"MBSWP\/520","completion":"    let m = 0\n    let s = 0\n    let c = 0\n    let i = 0\n    while(i < l.count) {\n        c = l[i]\n        m = m < c ? c : m\n        s += m\n        i += 1\n    }\n    return s\n}","language":"swift"}
{"task_id":"MBSWP\/521","completion":"    if (x == y) return z == x\n    if (y == z) return x == y\n    if (x == z) return y == z\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/522","completion":"    let lis = []\n    let l = 0\n    let r = 0\n    while (r < arr.length - 1) {\n        if (arr[r] > arr[r + 1]) {\n            lis.push(arr[r])\n            r++\n        } else {\n            lis.push(arr[r + 1])\n            l = r + 1\n            r++\n        }\n    }\n    if (l >= 2) {\n        lis.push(arr[l])\n    }\n    return lis.length\n}","language":"swift"}
{"task_id":"MBSWP\/523","completion":"    if let str = str1.ToLower.Let(letter => letter.IsUpper) {\n        let num = str1.Replace(letter => letter.IsDigit, \"\")\n        let len = str.Length > num.Length ? str.Length : num.Length\n        if len < 8 && len > 0 {\n            return [\"Valid string.\"]\n        }\n    }\n    return [\"String must have 1 upper case character.\", \"String must have 1 number.\", \"String length should be atleast 8.\"]\n}","language":"swift"}
{"task_id":"MBSWP\/524","completion":"    var dp = [0] * n\n    var max = 0\n    for(var i = 0; i < n; i++) {\n        dp[i] = arr[i]\n        for(var j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[j] + 1 > dp[i]) {\n                dp[i] = dp[j] + 1\n            }\n            if(dp[i] > max) {\n                max = dp[i]\n            }\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/525","completion":"    if (line1.count > 0 && line2.count > 0) {\n        return (min(line1[0], line2[0]) == max(line1[0], line2[0]))\n            && (min(line1[1], line2[1]) == max(line1[1], line2[1]));\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/526","completion":"    \/\/ Your code here\n    return \"a\"\n}","language":"swift"}
{"task_id":"MBSWP\/527","completion":"    var i = 0\n    var j = arr.count - 1\n    var res = 0\n    var tempArr : [Int]\n    while (i < j) {\n        if (arr[i] + arr[j] == sum) {\n            res += 1\n            tempArr = arr.copy()\n            tempArr.splice(i, 1)\n            tempArr.splice(j, 1)\n            i = 0\n            j = tempArr.count - 1\n        } else if (arr[i] + arr[j] < sum) {\n            i += 1\n        } else if (arr[i] + arr[j] > sum) {\n            j -= 1\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/528","completion":"    let min = 0\n    let minList = 0\n    for i in list1 {\n        if i.length < min {\n            min = i.length\n            minList = i\n        }\n    }\n    return minList\n}","language":"swift"}
{"task_id":"MBSWP\/529","completion":"    if let d = 1 to n do let r = d * 2 mod (n + 1) {\n        if r mod n == 0 then return r\n    }\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/530","completion":"    let result = 0\n    for(let num in nums){\n        if(num < 0) {\n            result += 1\n        }\n    }\n    return result \/ nums.length\n}","language":"swift"}
{"task_id":"MBSWP\/531","completion":"    n := coins.count\n    dp[0..n] := 0\n    dp[0] = V < 0 ? -1 : 0\n    for i in 0..n-1 {\n        for j in 0..m-1 {\n            if coins[i] >= j {\n                dp[i+1] = dp[i+1] + dp[i]\n            }\n        }\n    }\n    if V > 0 {\n        dp[n] = V\n    }\n    return dp[n]\n}","language":"swift"}
{"task_id":"MBSWP\/532","completion":"    if (str1.length() != str2.length()) {\n        return false\n    }\n    \n    var counter : Dict<Character, Integer> = {}\n    \n    for (var c in str1) {\n        counter[c] = 0\n    }\n    \n    for (var c in str1) {\n        counter[str1[c]]++\n    }\n    \n    for (var c in str2) {\n        counter[str2[c]]--\n        if (counter[str2[c]] < 0) {\n            return false\n        }\n    }\n    \n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/534","completion":"    if let res = text.find(pattern) {\n        return [res, res + pattern.size]\n    }\n    else {\n        return nil\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/535","completion":"    var pi : Double\n    var height : Double\n    pi = 3.14\n    height = 2 * pi * r\n    if r <= 0 {\n        throw \"Radius should be greater than zero.\"\n    }\n    return height * (r ** 2)\n}","language":"swift"}
{"task_id":"MBSWP\/536","completion":"    for(i in 0..n-1) {\n        list[i]\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/537","completion":"        let set = Set()\n\n        for (let i = 0; i < str1.length; i++) {\n            if (!set.has(str1[i])) {\n                set.add(str1[i])\n                continue\n            }\n\n            return str1[i]\n        }\n\n        return \"None\"\n}","language":"swift"}
{"task_id":"MBSWP\/538","completion":"    var result: [String] = []\n    var s : String\n    for (s in str1) {\n        result.append(s)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/539","completion":"  \/\/ Your code goes here.\n  let res = []\n  let pow = []\n  bases_num.forEach(x => {\n    pow.push(x)\n  })\n  index.forEach(y => {\n    pow[y] = 1 << pow[y]\n  })\n  res.push(bases_num[0])\n  res.push(bases_num[1] * pow[0])\n  res.push(bases_num[2] * pow[1])\n  res.push(bases_num[3] * pow[2])\n  res.push(bases_num[4] * pow[3])\n  res.push(bases_num[5] * pow[4])\n  res.push(bases_num[6] * pow[5])\n  res.push(bases_num[7] * pow[6])\n  res.push(bases_num[8] * pow[7])\n  res.push(bases_num[9] * pow[8])\n ","language":"swift"}
{"task_id":"MBSWP\/540","completion":"    let arrFreq = [0 for i in 0..n]\n    let minFreq = 1\n    let maxFreq = 0\n\n    arr.map { (x,i) in\n        arrFreq[i] = arrFreq[i]+1\n    }\n\n    for i in 0..n {\n        if minFreq > arrFreq[i] {\n            minFreq = arrFreq[i]\n        }\n        if maxFreq < arrFreq[i] {\n            maxFreq = arrFreq[i]\n        }\n    }\n\n    return maxFreq - minFreq\n}","language":"swift"}
{"task_id":"MBSWP\/541","completion":"    var sum = 0\n    var target = n * 2\n    for (var i = 1; i <= n; i++) {\n        sum += i\n    }\n    return sum > target\n}","language":"swift"}
{"task_id":"MBSWP\/542","completion":"    text = text.replace(\/ \/g,\":\");\n    text = text.replace(\/,\/g,\":\");\n    text = text.replace(\/\\.\/g,\":\");\n    return text;\n}","language":"swift"}
{"task_id":"MBSWP\/543","completion":"    var n = num1 + num2;\n    var len = String(n).length;\n    return len;\n}","language":"swift"}
{"task_id":"MBSWP\/544","completion":"    result_list := []\n    for item in test_list {\n        for sub_item in item {\n            result_list.append(sub_item)\n        }\n    }\n    return \"\\n\".join(result_list)\n}","language":"swift"}
{"task_id":"MBSWP\/545","completion":"    n = n ^ (n >> 1) & 0x55555555\n    n = n ^ (n << 1) & 0x33333333\n    return n\n}","language":"swift"}
{"task_id":"MBSWP\/546","completion":"    if let lastIndex = string.lastIndexOf(char)\n        if lastIndex == -1 {\n            return \"none\"\n        } else {\n            return string[lastIndex]\n        }\n}","language":"swift"}
{"task_id":"MBSWP\/547","completion":"    let prev = 0\n    let curr = 0\n    let total = 0\n    while (n > 0) {\n        prev = n % 10\n        n \/= 10\n        curr = n % 10\n        n \/= 10\n        total += prev != curr ? 1 : 0\n    }\n    return total\n}","language":"swift"}
{"task_id":"MBSWP\/548","completion":"    var lis = [1];\n    var seq = [];\n    var current = arr[0];\n    for(var i = 1; i < arr.length; i++) {\n        if (current < arr[i]) {\n            lis.push(1);\n            current = arr[i];\n        } else if (current == arr[i]) {\n            lis[lis.length-1] += 1;\n        } else {\n            var index = binarySearch(lis, current);\n            lis.splice(index, 1);\n            lis.push(1);\n            current = arr[i];\n        }\n    }\n    return lis[lis.length-1];\n}","language":"swift"}
{"task_id":"MBSWP\/549","completion":"    var sum : Int = 0\n    for i in 1..n {\n        if n % i == 0 {\n            sum += (i ** 5)\n        }\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/550","completion":"    var max = arr[low]\n    var i = low\n    while (i <= high) {\n        if (arr[i] > max) {\n            max = arr[i]\n        }\n        i += 1\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/551","completion":"    var list2: [Int] = []\n    for i in list1 {\n        var j = i[n]\n        list2.append(j)\n    }\n    return list2\n}","language":"swift"}
{"task_id":"MBSWP\/552","completion":"    if (seq_nums.count == 1) {\n        return \"Linear Sequence\"\n    } else if (seq_nums.count == 2) {\n        if (seq_nums[0] == seq_nums[1]) {\n            return \"Linear Sequence\"\n        } else {\n            return \"Non Linear Sequence\"\n        }\n    } else if (seq_nums.count > 2) {\n        return \"Non Linear Sequence\"\n    } else {\n        return \"Invalid Input\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/553","completion":"    var temp = test_tup[0] + test_tup[1] \/ 65536.0;\n    var result = temp + 1.0 \/ (10.0 * (temp - (temp % 1.0)));\n    return result;\n}","language":"swift"}
{"task_id":"MBSWP\/554","completion":"    result = [0]\n    for index in list {\n        result.append(index * 2)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/555","completion":"    let sum = 0\n    let sumOfCubes = 0\n    for i in 0..n {\n        sum += i\n        sumOfCubes += i * i * i\n    }\n    return sum - sumOfCubes\n}","language":"swift"}
{"task_id":"MBSWP\/556","completion":"    var xor = (N & 1) == 1 ? 0 : 1\n    var i = 0\n    var j = 1\n    var sum = A[i]\n    while (j < A.length) {\n        sum = sum ^ A[j]\n        if (sum == xor) {\n            return 1 + (i << 1)\n        }\n        i = i + 2\n        j = j + 2\n    }\n    return -1\n}","language":"swift"}
{"task_id":"MBSWP\/557","completion":"    result := \"\"\n    for (i in 0 until string.length) {\n        result += string[i].toUpperCase() if string[i] == string[i].toLowerCase() else string[i].toLowerCase()\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/558","completion":"    let distance = 0\n    let i = 0\n    while (i < 10) {\n        distance += Math.abs(n1 % 10 - n2 % 10)\n        n1 = n1 \/ 10\n        n2 = n2 \/ 10\n        i += 1\n    }\n    return distance\n}","language":"swift"}
{"task_id":"MBSWP\/559","completion":"    var biggestSum = a[0]\n    var currentSum = a[0]\n    for i := 1; i < size; i++ {\n        currentSum = Math.max(currentSum + a[i], a[i])\n        biggestSum = Math.max(biggestSum, currentSum)\n    }\n    return biggestSum\n}","language":"swift"}
{"task_id":"MBSWP\/560","completion":"    val output: [Int] = []\n\n    for {\n        if (test_tup1.count == 0 && test_tup2.count != 0) {\n            output = test_tup2.copy\n        } else if (test_tup2.count == 0 && test_tup1.count != 0) {\n            output = test_tup1.copy\n        } else if (test_tup1.count != 0 && test_tup2.count != 0) {\n            var temp = test_tup1.copy\n            test_tup1.copy = test_tup2.copy\n            test_tup2.copy = temp\n            output = output + test_tup1.copy\n        }\n    }\n\n    return output\n}","language":"swift"}
{"task_id":"MBSWP\/561","completion":"    var ret = []\n    for (i <- test_list.length - 1; i >= 0; i--) {\n        for (j <- test_list.length - 1; j > i; j--) {\n            if (test_list[j - 1] && test_list[j - 1][0] > test_list[j][0]) {\n                ret[test_list[j][0]] = [test_list[j - 1], test_list[j]]\n                test_list[j - 1] = 0\n            }\n        }\n    }\n    return ret\n}","language":"swift"}
{"task_id":"MBSWP\/562","completion":"    \/\/ your code here\n}","language":"swift"}
{"task_id":"MBSWP\/563","completion":"    let result = []\n\n    let startIndex = text.indexOf('\"')\n    let endIndex = text.lastIndexOf('\"')\n    \n    while (startIndex != -1 && endIndex != -1) {\n        result.push(text.slice(startIndex + 1, endIndex))\n        startIndex = text.indexOf('\"', startIndex + 1)\n        endIndex = text.lastIndexOf('\"', endIndex - 1)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/564","completion":"    var pairs = 0\n    var current : [Int] = []\n    for i in arr {\n        current.append(i)\n        if current.count > 1 {\n            current.pop()\n            pairs += 1\n        }\n    }\n    return pairs\n}","language":"swift"}
{"task_id":"MBSWP\/565","completion":"    var words = []\n\n    for (let i = 0; i < word.length; i++) {\n        words.append(word[i])\n    }\n    return words\n}","language":"swift"}
{"task_id":"MBSWP\/566","completion":"    return n.to_i + n.mod(10).to_i\n}","language":"swift"}
{"task_id":"MBSWP\/567","completion":"    if list1.size < 2 {\n        return true\n    } else {\n        var first = list1[0]\n        var last = list1[list1.size - 1]\n        for (let i = 1; i < list1.size; i++) {\n            if (list1[i] < first) {\n                return false\n            } else if (list1[i] >= last) {\n                first = list1[i]\n            }\n        }\n        return true\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/568","completion":"    var arr = []\n    for (i in 0..length) {\n        arr[i] = {}\n    }\n    return arr\n}","language":"swift"}
{"task_id":"MBSWP\/569","completion":"    return for(list2 : list1) {\n        for(i, elem2 in enumerate(list2)) {\n            let current = list2[i]\n            let j = i - 1\n            while(j >= 0 && elem2 < list2[j]) {\n                list2[j+1] = list2[j]\n                j -= 1\n            }\n            list2[j+1] = current\n        }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/570","completion":"    let newList = [] as [String]\n\n    for (i <- list1.length; i > 0; i--) {\n        let tmp = list1[i]\n        if (tmp.includes(charlist)) {\n            continue;\n        } else {\n            newList.append(tmp)\n        }\n    }\n\n    return newList\n}","language":"swift"}
{"task_id":"MBSWP\/571","completion":"    arr.sort()\n    var i : Int = 0\n    var j : Int = 1\n    var diff : Int = 0\n    var max : Int = 0\n    while (j < arr.length) {\n        if (arr[j] - arr[i] < K) {\n            diff = arr[j] - arr[i]\n            j++\n        } else {\n            if (diff > max) {\n                max = diff\n            }\n            i++\n            diff = 0\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/572","completion":"    result = []\n    uniqueNums = []\n    for num in nums {\n        if num not in uniqueNums {\n            uniqueNums.append(num)\n            result.append(num)\n        }\n    }\n    for num in result {\n        if num != result[result.length - 1] {\n            result.pop()\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/573","completion":"    var uniqueList = Set(list_data)\n    var uniqueArray = []\n    uniqueList.forEach(x => {\n        if (uniqueArray.indexOf(x) < 0) uniqueArray.push(x)\n    })\n    var prod = 1\n    for (i in uniqueArray) {\n        prod *= uniqueArray[i]\n    }\n    return prod\n}","language":"swift"}
{"task_id":"MBSWP\/574","completion":"    double area = 2 * Math.PI * (r * h);\n    double volume = Math.PI * (r ** 2 * h);\n    return area + volume;\n}","language":"swift"}
{"task_id":"MBSWP\/575","completion":"    let cnt = 0\n    let mid = L + ((R - L) \/ 2)\n    while (A < mid) {\n        cnt += (N - 1)\n        A += (N - 1)\n    }\n    return cnt\n}","language":"swift"}
{"task_id":"MBSWP\/576","completion":"    let index = 0\n    for i in A.indices {\n        if A[i] == B[m] {\n            index++\n            m++\n        }\n    }\n    if index >= n {\n        return true\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/577","completion":"    var num = n\n    var lastDigit : Int = 0\n    var factorial : Int = 1\n\n    if num < 0 {\n        return 0\n    }\n\n    do {\n        num = num - 1\n        factorial = factorial * num\n    } while (num > 0)\n\n    lastDigit = factorial % 10\n    return lastDigit\n}","language":"swift"}
{"task_id":"MBSWP\/578","completion":"    var result: [Int] = []\n\n    for _, v1, v2, v3 in zip(0...list1.length, list1, list2, list3) {\n        result = append(result, _ + v1 + v2 + v3)\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/579","completion":"    return [x for x in test_tup1 if not x in test_tup2]\n}","language":"swift"}
{"task_id":"MBSWP\/580","completion":"    let even_tuple = []\n    for each_element in test_tuple {\n        if each_element.class == \"Array\" {\n            if each_element.class == \"Array\" {\n                for each_element in each_element {\n                    if each_element.class == \"Array\" {\n                        for each_element in each_element {\n                            if each_element.class == \"AnyHashable\" {\n                                if each_element.class == \"AnyHashable\" {\n                                    if each_element % 2 == 0 {\n                                        even_tuple.append(each_element)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return even_tuple\n}","language":"swift"}
{"task_id":"MBSWP\/581","completion":"    var area = 2 * b * s + 2 * s * b + b * b\n    var sides = b * s\n    var diagonal = b * (s + b)\n    var pyra = sides * diagonal\n    return pyra\n}","language":"swift"}
{"task_id":"MBSWP\/582","completion":"    return dict1.nil() ? true : false;\n}","language":"swift"}
{"task_id":"MBSWP\/583","completion":"    var ans = 1\n    for _ in 1..num {\n        ans *= 2 * _.to_f + 1\n    }\n    return ans\n}","language":"swift"}
{"task_id":"MBSWP\/584","completion":"    var m : String = \/([aeiou])(n[oa])\/g;\n    var result = text.match(m);\n    result.forEach {\n        println(it.replace(\"n\", \"1\").replace(\"o\", \"0\").replace(\"a\", \"2\").replace(\"e\", \"3\"));\n    }\n    return \"\";\n}","language":"swift"}
{"task_id":"MBSWP\/585","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/586","completion":"    let start = 0\n    let end = k\n    let i = 0\n    while (end < a.count) {\n        a[end + k] = a[end]\n        end += k + 1\n    }\n    return a.slice(start, end)\n}","language":"swift"}
{"task_id":"MBSWP\/587","completion":"    return tuple(listx)\n}","language":"swift"}
{"task_id":"MBSWP\/588","completion":"    return nums.sort(compareFunc: \"x y -> x.CompareTo(y)\")[nums.Length - 1].Add(nums[0].Subtract(nums[nums.Length - 1]))\n}","language":"swift"}
{"task_id":"MBSWP\/589","completion":"    var result = []\n    var start = a\n    var end = b\n    while (start < end) {\n        var middle = start + (end - start) \/ 2\n        if (middle * middle < start) {\n            end = middle\n        } else {\n            start = middle + 1\n        }\n    }\n    for (var i = a; i < end; i++) {\n        var square = i * i\n        if (square >= a && square < b) {\n            result.push(square)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/591","completion":"    return [newList[0], newList[newList.size - 1]]\n}","language":"swift"}
{"task_id":"MBSWP\/592","completion":"    var coefficient = [1]\n    for _ in 1 until n {\n        coefficient = append(coefficient * [1 + n], coefficient * [1 - n])\n    }\n    return coefficient.sum()\n}","language":"swift"}
{"task_id":"MBSWP\/593","completion":"    var n = \"\";\n    for (var i = 0; i < ip.length; i++) {\n        if (ip[i] != \".\") n += ip[i];\n    }\n    return n;\n}","language":"swift"}
{"task_id":"MBSWP\/594","completion":"    var even = 0;\n    var odd = 0;\n    for (i <- 0 until list1.length) {\n        if (list1[i] % 2 == 0) {\n            even += list1[i];\n        } else {\n            odd += list1[i];\n        }\n    }\n    return even - odd;\n}","language":"swift"}
{"task_id":"MBSWP\/595","completion":"    var count = 0\n    var charHash = map[char] {\n        var count = 0\n        if (str1.contains(char)) {\n            count += 1\n        }\n        if (str2.contains(char)) {\n            count -= 1\n        }\n        return count\n    }\n    if (str1.length != str2.length) {\n        return \"Not Possible\"\n    }\n    for (let i = 0; i < str1.length; i++) {\n        if (charHash[str1[i]] != charHash[str2[i]]) {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/597","completion":"    var i : Int\n    var j : Int\n    var index1 : Int\n    var index2 : Int\n    var current_pos : Int\n    var kth_element : Int\n    index1 = 0\n    index2 = 0\n    kth_element = 0\n    current_pos = 0\n    if (m > n) {\n        while (m > n) {\n            if (current_pos < k) {\n                kth_element = arr1[index1]\n                index1 = index1 + 1\n            } else {\n                kth_element = arr2[index2]\n                index2 = index2 + 1\n            }\n            current_pos = current_pos + 1\n        }\n    } else {\n        while (m < n) {\n            if (current_pos < k) {\n                kth_element = arr1[index1]\n                index1 = index","language":"swift"}
{"task_id":"MBSWP\/598","completion":"    if (number < 0) {\n        return false;\n    }\n    var digits = [0] * 10;\n    number = number % 10;\n    var originalNumber = number;\n    var sum = 0;\n\n    while (number > 0) {\n        digits[number % 10] += 1;\n        number = number \/ 10;\n    }\n\n    for (var i = 0; i < 10; i++) {\n        sum += Math.pow(i, digits[i]);\n    }\n\n    return originalNumber == sum;\n}","language":"swift"}
{"task_id":"MBSWP\/599","completion":"    return [0.0, 0.0]\n}","language":"swift"}
{"task_id":"MBSWP\/600","completion":"    return n & 1 == 0\n}","language":"swift"}
{"task_id":"MBSWP\/602","completion":"    var i : Int\n    var chars : [Character]\n    for i = 0; i < str1.length; i++ {\n        chars.append(str1[i])\n    }\n    var count : Int = 1\n    var repeatedChar : String = \"None\"\n    for i = 1; i < chars.length; i++ {\n        if (chars[i] == chars[i - 1]) {\n            count++\n        } else {\n            count = 1\n        }\n        if (count > 1) {\n            repeatedChar = chars[i - 1]\n            break\n        }\n    }\n    return repeatedChar\n}","language":"swift"}
{"task_id":"MBSWP\/603","completion":"    let result = []\n    for i in 0..n {\n        result.append(n - i)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/604","completion":"        var arr : String[] = s.split(\" \");\n        var newStr = \"\";\n        for (var i : Int) {\n                arr[i] = arr[i].reverse();\n        }\n        for (var i : Int) {\n                newStr += arr[i] + \" \";\n        }\n        return newStr;\n}","language":"swift"}
{"task_id":"MBSWP\/605","completion":"    var maxDivisor = Math.floor(Math.sqrt(num))\n    var isPrime = true\n\n    for (var i = 2; i <= maxDivisor; i++) {\n        if (num % i == 0) {\n            isPrime = false\n            break\n        }\n    }\n\n    return isPrime\n}","language":"swift"}
{"task_id":"MBSWP\/606","completion":"    if (degree < 0) {\n        return -1.0 * Math.PI + Math.acos(-1.0 * degree)\n    }\n    return Math.acos(1.0 * degree)\n}","language":"swift"}
{"task_id":"MBSWP\/607","completion":"    var regex = new RegExp(pattern, \"g\")\n    var result = regex.exec(text)\n    var count = 0\n    var indices = []\n    while (result != null) {\n        count += 1\n        indices.append(result.index)\n        result = regex.exec(text)\n    }\n    var indicesList = Array(count)\n    for (var i = 0; i < count; i++) {\n        indicesList[i] = indices[i]\n    }\n    return indicesList\n}","language":"swift"}
{"task_id":"MBSWP\/608","completion":"    if (n <= 0) {\n        return 1;\n    } else {\n        return bellNumber(n-1) + bellNumber(n-2) + bellNumber(n-3) + bellNumber(n-4);\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/609","completion":"    if (N == 0) return 0\n    if (A > N) N = A\n    if (B > N) N = B\n    if ((N - A) % (B - A) == 0) return N\n    else return N - (N - A) % (B - A)\n}","language":"swift"}
{"task_id":"MBSWP\/610","completion":"    list1.removeAll(let i = L, count = 0, list2 = []) in\n    if list1.count == 0 {\n        return []\n    }\n    else {\n        for (i, count) in list1 {\n            if list1.index == 0 {\n                return list1.slice(1)\n            }\n            else {\n                list2.append(list1[i])\n            }\n        }\n        return list2\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/611","completion":"    return max_in_nth(test_list, N)\n}","language":"swift"}
{"task_id":"MBSWP\/612","completion":"    let left = lst[0]\n    let right = lst[lst.length - 1]\n    let result = []\n    left.forEach(e => result.push(e))\n    right.forEach(e => result.push(e))\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/613","completion":"    let result = [] as [[AnyHashable]]\n\n    for {\n        let element = test_list.first()\n        let innerResult = [] as [[AnyHashable]]\n\n        while element != nil {\n            innerResult.append(element)\n            element = test_list.rest().first()\n        }\n\n        innerResult.sort(compare_elements)\n        let index = 1\n        let max = innerResult[index].tuple[0]\n\n        while index < innerResult.size {\n            if innerResult[index].tuple[0] == max {\n                innerResult[index].tuple[1].append(max)\n                innerResult.remove(index)\n                index--\n            } else {\n                max = innerResult[index].tuple[0]\n                index++\n            }\n        }\n\n        result.append(innerResult)\n    }\n\n    result.sort(compare_elements)\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/614","completion":"    total := 0\n    for elem in test_list {\n        total += elem\n    }\n    return total\n}","language":"swift"}
{"task_id":"MBSWP\/615","completion":"    \/\/ Your code here\n    return\n}","language":"swift"}
{"task_id":"MBSWP\/616","completion":"    var newTuple = [] as! [Int]\n    for i in range(0, test_tup1.count) {\n        if (test_tup1[i] < test_tup2[i]) {\n            newTuple.append(0)\n        } else if (test_tup1[i] > test_tup2[i]) {\n            newTuple.append(test_tup1[i] % test_tup2[i])\n        } else {\n            newTuple.append(test_tup1[i])\n        }\n    }\n    return newTuple\n}","language":"swift"}
{"task_id":"MBSWP\/617","completion":"    var jumps : Double\n\n    if (a == 0 || b == 0) {\n        jumps = 0\n    } else if (a > 0 && b > 0) {\n        jumps = 1\n    } else {\n        jumps = Double.NaN\n    }\n\n    return jumps\n}","language":"swift"}
{"task_id":"MBSWP\/618","completion":"    return nums1.map { n1 -> nums2.map { n2 -> n1 \/ n2 } }\n}","language":"swift"}
{"task_id":"MBSWP\/619","completion":"    var res = \"\"\n    for (int i = 0; i < test_str.length; i++){\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            res = res + test_str[i]\n        } else {\n            res = res + String.fromCharCode(test_str[i] + 13)\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/620","completion":"    if let i = 1 to n {\n        if a[i] divisible by a[i - 1] and a[i - 1] divisible by a[i] {\n            return 1 + largestSubset(a.slice(i + 1), n)\n        }\n    }\n    return 0\n}","language":"swift"}
{"task_id":"MBSWP\/621","completion":"    return test_list.map { (word) => String(Long.parseLong(word) + K) }\n}","language":"swift"}
{"task_id":"MBSWP\/622","completion":"  var len1 = arr1.length\n  var len2 = arr2.length\n  if (len1 > n || len2 > n) {\n    throw \"Invalid arguments\"\n  }\n  var s1 : Double = 0\n  var s2 : Double = 0\n  var k : Int = 0\n  var i : Int = 0\n  var j : Int = 0\n  while (i < len1 && j < len2) {\n    if (arr1[i] < arr2[j]) {\n      s1 += arr1[i]\n      i++\n    } else if (arr1[i] > arr2[j]) {\n      s2 += arr2[j]\n      j++\n    } else {\n      s1 += arr1[i]\n      s2 += arr2[j]\n      i++\n      j++\n    }\n  }\n  if (len1 > len","language":"swift"}
{"task_id":"MBSWP\/623","completion":"    var result = []\n    nums.forEach((i) => {\n        result.push(i ** n)\n    })\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/624","completion":"    return string.toUpperCase()\n}","language":"swift"}
{"task_id":"MBSWP\/625","completion":"    var first = newList[0];\n    var last = newList[newList.size - 1];\n    newList[0] = last;\n    newList[newList.size - 1] = first;\n    return newList;\n}","language":"swift"}
{"task_id":"MBSWP\/626","completion":"    if (r <= 0) {\n        return -1\n    }\n    return (2 * r * r) \/ 2\n}","language":"swift"}
{"task_id":"MBSWP\/627","completion":"    var length = end - start + 1;\n    var max = array.max()\n    var min = array.min()\n    var missing = max + 1\n    if (missing > length) {\n        missing = min\n    }\n    while (missing != min) {\n        if (!array.contains(missing)) {\n            return missing\n        }\n        missing = missing + 1\n    }\n    return missing\n}","language":"swift"}
{"task_id":"MBSWP\/628","completion":"    var result = \"\"\n    var counter = 0\n    for (var i = 0; i < string.length; i++) {\n        if (string[i] != \" \") {\n            result += string[i]\n        } else if (string[i] == \" \") {\n            result += \"*\"\n            counter += 1\n        }\n    }\n    result = result.replace(\"*\", counter)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/629","completion":"    let even_numbers = []\n\n    for {\n        for _, a in enumerate(list) {\n            if (a % 2 == 0) {\n                even_numbers.append(a)\n            }\n        }\n    }\n\n    return even_numbers\n}","language":"swift"}
{"task_id":"MBSWP\/630","completion":"    let res = []\n    let i = 0\n    let j = 0\n    let k = 1\n    while(i < test_tup.length - 1) {\n        res.append([test_tup[i], test_tup[j]])\n        i = i + k\n        j = j + k\n        k++\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/631","completion":"    return text.replace(\/ \/g, \"_\")\n                .replace(\/_\/g, \" \")\n}","language":"swift"}
{"task_id":"MBSWP\/632","completion":"    num_list.append(0)\n    num_list.append(0)\n    let non_zero = []\n    for i in num_list {\n        if num_list[i] != 0 {\n            non_zero.append(num_list[i])\n        }\n    }\n    return non_zero\n}","language":"swift"}
{"task_id":"MBSWP\/633","completion":"    var xor = 0\n    var sum = 0\n    for i in arr {\n        xor ^= arr[i]\n        sum += arr[i]\n    }\n    return xor ^ sum\n}","language":"swift"}
{"task_id":"MBSWP\/634","completion":"    return if let sum = 1 + 2 + 4 + 8 + ... + n {\n        return pow(4, sum)\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/635","completion":"    if let len = length(iterable) - 1\n    if len <= 0\n        return []\n    if len == 1\n        return [iterable[0]]\n    let heap = []\n    let index = 0\n    let first = 1\n    let last = len\n    while index < len\n        if index < first\n            push(heap, index, iterable[index])\n        else if iterable[index] < iterable[index - 1]\n            if index < last\n                if iterable[index] < iterable[last]\n                    push(heap, index, iterable[index])\n                    pop(heap, index - 1)\n                else\n                    push(heap, index, iterable[index])\n                    pop(heap, index - 1)\n                    pop(heap, index - 1)\n            else\n                push(heap, index, iterable[index])\n        else\n            push(heap, index, iterable[index])\n        index++\n    return heap\n}","language":"swift"}
{"task_id":"MBSWP\/636","completion":"    var discriminant = b**2 - 4 * a * c\n\n    if(discriminant < 0) {\n        return \"No\"\n    }\n\n    var sqrt = Int.sqrt(discriminant)\n    if(sqrt == (int) sqrt) {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/637","completion":"    if (actual_cost > sale_amount) return true\n    if (actual_cost == sale_amount) return false\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/638","completion":"        return 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * Math.pow(v, 0.16);\n}","language":"swift"}
{"task_id":"MBSWP\/639","completion":"    var without_small_letters = filter { $0[0].tolower == $1[0].tolower } { $0, $1 }\n    return sum(map { strlen $1 } $without_small_letters)\n}","language":"swift"}
{"task_id":"MBSWP\/640","completion":"    \/\/ TODO\n    return \"\";\n}","language":"swift"}
{"task_id":"MBSWP\/641","completion":"    n\n}","language":"swift"}
{"task_id":"MBSWP\/643","completion":"    var pattern = \"z*\"\n    let result = text.match(pattern)\n    return result == null ? \"Not matched!\" : \"Found a match!\"\n}","language":"swift"}
{"task_id":"MBSWP\/644","completion":"    let res = Array(input.length - k + 1)\n    for i in input.startIndex(k) {\n        res.add(input[i])\n    }\n    for i in input.startIndex(input.length - k) {\n        res.add(input[i])\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/645","completion":"    var sum = 1;\n    var n = 0;\n    var j = 0;\n    while (j < test_list.size - 1) {\n        for (var i = 0; i < K; i++) {\n            sum *= test_list[j][i];\n        }\n        j++;\n    }\n    return sum;\n}","language":"swift"}
{"task_id":"MBSWP\/646","completion":"    let n = N - K + 1\n    return n * n * n\n}","language":"swift"}
{"task_id":"MBSWP\/647","completion":"    result = []\n    index = 0\n    while index < text.length - 1 {\n        if(text[index].isUpper == true && text[index + 1].isUpper == true) {\n            result.append(text[index] + text[index + 1])\n            index += 2\n        } else {\n            result.append(text[index])\n            index++\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/648","completion":"    return foldRight(lst, 0) {\n        if (elem % 2 == 0) {\n            return cons(elem \/ 2, self)\n        }\n        return cons(elem, self)\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/649","completion":"    let i = 0\n    var sum = 0\n    while (i < m && i < n) {\n        sum += nums[i]\n        i += 1\n    }\n    if (i < n) {\n        sum += nums[n]\n    } else if (i < m) {\n        sum -= nums[m]\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/650","completion":"    var diff = 0\n    var set1 = set(arr1)\n    var set2 = set(arr2)\n    if(set1.count != set2.count) {\n        diff = set1.count - set2.count\n    }\n    else {\n        diff = set1.count * n\n    }\n    return diff == m\n}","language":"swift"}
{"task_id":"MBSWP\/651","completion":"    var i : Int = 0\n    for (var j : [Int]) {\n        var found = false\n        while (i < test_tup1.count && !found) {\n            if (test_tup1[i] == test_tup2[j])\n                found = true\n            else\n                i++\n        }\n        if (found) {\n            i++\n            continue\n        }\n        return false\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/652","completion":"    var flat_list = test_list.flat()\n\n    if len(flat_list) == 0\n        return \"empty\"\n\n    var result = \"\"\n    for (i in flat_list) {\n        result += \"(\" + flat_list[i].join(\", \") + \")\"\n        if i != len(flat_list) - 1\n            result += \", \"\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/653","completion":"    var map = [:]\n    for _, v in l {\n        let key = value\n        if (map[key] == nil) {\n            map[key] = [value]\n        } else {\n            map[key] += [value]\n        }\n    }\n    return map\n}","language":"swift"}
{"task_id":"MBSWP\/654","completion":"    return 2 * (l + b)\n}","language":"swift"}
{"task_id":"MBSWP\/655","completion":"    var result = 0;\n    var sum = 1;\n    var power = 5\n    for(var i = 0; i < n; i++) {\n        result += sum * power;\n        sum *= 5;\n        power *= 5;\n    }\n    return result;\n}","language":"swift"}
{"task_id":"MBSWP\/656","completion":"    let minDiff = 0\n    let diff: Int\n    let i = 0\n    let j = 0\n\n    while i < n && j < n {\n        diff = abs(a[i] - b[j])\n        if (diff < minDiff) {\n            minDiff = diff\n        }\n        if (a[i] < b[j]) {\n            i = i + 1\n        } else {\n            j = j + 1\n        }\n    }\n    return minDiff\n}","language":"swift"}
{"task_id":"MBSWP\/657","completion":"    let d = 1\n    while(n >= factorial(d)) {\n        if (n \/ factorial(d) == d) {\n            return d\n        }\n        d++\n    }\n    return 0\n}","language":"swift"}
{"task_id":"MBSWP\/658","completion":"    var map: [Int, Int] = {}\n    var max = 0\n    var current\n    for (var i : list1) {\n        current = map[i] if map.HasKey(i) else 0\n        map[i] = current + 1\n        if (map[i] > max) {\n            max = map[i]\n        }\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/659","completion":"    if let n = x.count { |i| x[i] } else 0 {\n        return x\n    }\n    let r = []\n    let repeated = []\n    repeat(x, 0, repeated)\n    repeated.each { |i|\n        repeated.append(i)\n        if i.count == n {\n            repeated.remove(i)\n        }\n        r.append(i)\n    }\n    return r\n}","language":"swift"}
{"task_id":"MBSWP\/660","completion":"    var arr = []\n    for (l1; l1 <= r1; l1++) {\n        for (l2; l2 <= r2; l2++) {\n            arr.append(l1)\n            arr.append(l2)\n        }\n    }\n    return arr\n}","language":"swift"}
{"task_id":"MBSWP\/661","completion":"    if let sum = 0 in\n        arr.slice(0, n - 2).reduce((acc, cur) => acc + cur, 0)\n    else\n        return sum\n    if let sum = 0 in\n        arr.slice(1, n - 1).reduce((acc, cur) => acc + cur, 0)\n    else\n        return sum\n    if let sum = 0 in\n        arr.slice(2, n).reduce((acc, cur) => acc + cur, 0)\n    else\n        return sum\n}","language":"swift"}
{"task_id":"MBSWP\/662","completion":"    dict2 = {}\n    for key, value in dict1.items() {\n        for i in value {\n            if !dict2[i] {\n                dict2[i] = []\n            }\n            dict2[i].append(key)\n        }\n    }\n    result = []\n    for key, value in dict2.items() {\n        result.append(value.sort())\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/663","completion":"    var k = 1\n    while (x * k % y != 0 && k <= n) {\n        k = k + 1\n    }\n    return k - 1\n}","language":"swift"}
{"task_id":"MBSWP\/664","completion":"    var evenSum = 0\n    var evenCount = 0\n    for (i <- 0 until n) {\n        if (i % 2 == 0) {\n            evenSum = evenSum + i\n            evenCount = evenCount + 1\n        }\n    }\n    evenSum \/= evenCount\n    return evenSum\n}","language":"swift"}
{"task_id":"MBSWP\/665","completion":"    num_list.unshift(num_list.pop())\n    return num_list\n}","language":"swift"}
{"task_id":"MBSWP\/666","completion":"    var count : Int = 0\n    for (i in string) {\n        if (string[i] == char) {\n            count = count + 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/667","completion":"    var counter = 0\n    for(var i = 0; i < string.length; i++) {\n        if(vowels.indexOf(string[i]) !== -1)\n            counter++\n    }\n    return counter\n}","language":"swift"}
{"task_id":"MBSWP\/668","completion":"    var result = \"\"\n    for (index i in string) {\n        if (string[i] == char) {\n            result += string[i]\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/669","completion":"    var ipRegExp = \/[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\/\n    if (ipRegExp.test(Ip)) {\n        return \"Valid IP address\"\n    }\n    else {\n        return \"Invalid IP address\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/670","completion":"    if let index = 0\n        let maxNum = nums[index]\n    for i in nums {\n        if nums[i] < maxNum {\n            return false\n        }\n        maxNum = nums[i]\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/671","completion":"    let s = (n & -n) \/ 2\n    return s if n <= 0x7fffffff else setRightMostUnsetBit(s)\n}","language":"swift"}
{"task_id":"MBSWP\/672","completion":"    return num1 > num2 && num1 > num3 ? num1 : num2 > num1 && num2 > num3 ? num2 : num3\n}","language":"swift"}
{"task_id":"MBSWP\/673","completion":"    let result = 0\n    for i in list {\n        result = result * 10 + i\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/674","completion":"    var list = string.split(\" \");\n    list.sort();\n    var dict = {}\n    var result = \"\"\n    for(var i : list) {\n        if(dict[i] == null) {\n            dict[i] = 1;\n        }\n        else {\n            dict[i] += 1;\n        }\n        if(dict[i] == 1) {\n            result += i + \" \"\n        }\n    }\n    return result.slice(0, -1);\n}","language":"swift"}
{"task_id":"MBSWP\/675","completion":"    var result = x + y\n    if(result >= m && result <= n) {\n        return 20\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/676","completion":"    let regex = \/[a-zA-Z0-9]\/g\n    return text1.replaceAll(regex, \"\")\n}","language":"swift"}
{"task_id":"MBSWP\/677","completion":"    return a + b > c && b + c > a && c + a > b\n}","language":"swift"}
{"task_id":"MBSWP\/678","completion":"    let str = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != ' ') {\n            str += str1[i];\n        }\n    }\n    return str;\n}","language":"swift"}
{"task_id":"MBSWP\/679","completion":"    var val : Int = dictionay[key];\n    var s : String;\n\n    for (key, val in dictionay) {\n        s = key;\n        break;\n    }\n\n    return s;\n}","language":"swift"}
{"task_id":"MBSWP\/680","completion":"    if(nums.isEmpty) {\n        return false;\n    }\n\n    if(nums.last >= nums[0]) {\n        return true;\n    }\n\n    for(i in nums.tail) {\n        if(nums.last < nums[i]) {\n            return true;\n        }\n    }\n\n    return false;\n}","language":"swift"}
{"task_id":"MBSWP\/681","completion":"    var a = 0\n    var b = n\n\n    while (a == 0) {\n        if (b % n == 0) {\n            a = 1\n        } else {\n            b = b - 1\n        }\n    }\n\n    return b\n}","language":"swift"}
{"task_id":"MBSWP\/682","completion":"    return nums1.map(n1 => nums2.map(n2 => n1 * n2))\n}","language":"swift"}
{"task_id":"MBSWP\/683","completion":"    var sum = 0\n    for i in n.to_i {\n        sum += i * i\n    }\n    return sum == n\n}","language":"swift"}
{"task_id":"MBSWP\/684","completion":"    let count = 0\n    for (i in str.begin()) {\n        if str[i] == x {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/685","completion":"    if let sum = 0 in\n        for i in 0..n\n            sum = sum + i in\n                if let isPrime = true in\n                    if n % i == 0 in\n                        isPrime = false in\n                return sum\n}","language":"swift"}
{"task_id":"MBSWP\/686","completion":"    var result = {}\n    var temp = {}\n    for _, v in pairs(test_tup) {\n        if _ not in result {\n            result[_] = 0\n        }\n        result[_] += 1\n        if v not in temp {\n            temp[v] = 0\n        }\n        temp[v] += 1\n    }\n    var s = \"\"\n    for k, v in pairs(result) {\n        s += String.format(\"%s:%d, \", k, v)\n    }\n    s = s.strip(\",\")\n    s += \"}","language":"swift"}
{"task_id":"MBSWP\/687","completion":"    if a == 0 || b == 0 {\n        return 0;\n    }\n\n    if a == b {\n        return a;\n    }\n\n    if a > b {\n        return recurGcd(a - b, b);\n    } else {\n        return recurGcd(a, b - a);\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/688","completion":"    var x = a + b\n    var y = a * b\n    var length = sqrt(y)\n    return length\n}","language":"swift"}
{"task_id":"MBSWP\/689","completion":"    if let jumps = arr.length - 1 - 1 - (n - 1) {\n        jumps\n    } else {\n        0\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/690","completion":"    for _, v in pairs(nums) {\n        let sum = 0\n        let num = v\n        let nextNum = v + 1\n        let nextNextNum = v + 2\n        let index = 1\n        if nextNum >= nums.length {\n            index = 0\n        }\n        while (num < nextNum) {\n            sum += nums[num]\n            num = nextNum\n            nextNum += index\n        }\n        nums[nextNum] = sum\n    }\n    return nums\n}","language":"swift"}
{"task_id":"MBSWP\/691","completion":"    result_map: [Int: [Int]] = {\n        \/\/ You are an expert Swift programmer, and here is your task.\n        \/\/ Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n        let map = [[Int]]\n        for item in test_list {\n            if map.find { (i : [Int]) => i.second == item.second } == nil {\n                map = map + [[item.first, item.second]]\n            }\n        }\n\n        for x in map.sort_by_key {\n            result_map = result_map + [x.first, [x.second]]\n        }\n        result_map\n    }\n    return result_map\n}","language":"swift"}
{"task_id":"MBSWP\/692","completion":"    let factorial = 1\n    for (i in 1..N) {\n        factorial *= i\n    }\n    let sum = 0\n    let lastTwoDigits = 0\n    for (i in 1..N) {\n        sum += factorial \/ i\n        lastTwoDigits = sum % 10\n        sum = 0\n    }\n    return lastTwoDigits\n}","language":"swift"}
{"task_id":"MBSWP\/693","completion":"    return text1.replace(\/ +(?= )\/g, \"\");\n}","language":"swift"}
{"task_id":"MBSWP\/694","completion":"    var values = test_dict.map { (key, value) -> value.toSet() }\n    values.flatten()\n}","language":"swift"}
{"task_id":"MBSWP\/695","completion":"    for i in 0..test_tup1.count {\n        if test_tup1[i] > test_tup2[i] {\n            return true\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/696","completion":"    var result = [:]\n    var minlen = min(len(list1), len(list2))\n    for (i in 0..minlen) {\n        var newList = [list1[i], list2[i]]\n        result.append(newList)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/697","completion":"    var count = 0;\n    var even = (x -> x % 2 == 0);\n    for (x in array_nums) {\n        if (even(array_nums[x])) {\n            count++;\n        }\n    }\n    return count;\n}","language":"swift"}
{"task_id":"MBSWP\/698","completion":"    return [k: v for k, v in sorted(test_dict.items(), key = (lambda x: [x[0], x[1]]))]\n}","language":"swift"}
{"task_id":"MBSWP\/699","completion":"    let map = makeStringMap(str1);\n    let swaps = 0;\n\n    for (let i = 0; i < str2.length; i++) {\n        if (map[str2[i]]) {\n            let index = map[str2[i]];\n            let count = 1;\n            while (str2[index] != str2[i]) {\n                count++;\n                let next = str1.indexOf(str2[i], index + 1);\n                if (next == -1) {\n                    return \"Not Possible\";\n                }\n\n                map[str2[index]] = next;\n                map[str2[i]] = index;\n\n                index = next;\n            }\n            swaps += count;\n        }\n    }\n\n    return swaps;\n}","language":"swift"}
{"task_id":"MBSWP\/700","completion":"    var count = 0\n\n    for _, value in pairs(li) {\n        if min <= value && value <= max {\n            count++\n        }\n    }\n\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/701","completion":"    var len = arr.length\n    var sum = 0\n    var sum_left = 0\n    var sum_right = 0\n    for (var i = 0; i < len; i++) {\n        sum += arr[i]\n        sum_left += i < len - 1 ? arr[i] : 0\n        sum_right += i < len - 1 ? 0 : arr[i]\n    }\n    return -1 if sum_left == sum - sum_right else len - 1 - len % 2\n}","language":"swift"}
{"task_id":"MBSWP\/702","completion":"    var result = 0\n    var i : Int = 0\n    var j : Int = arr.length - 1\n    var minElementsToRemove = j - i\n    var maxElementsToRemove = 0\n\n    while (i <= j) {\n        if (arr[i] > k) {\n            maxElementsToRemove += 1\n            i += 1\n        } else if (arr[j] < k) {\n            j -= 1\n            maxElementsToRemove += 1\n        } else if (arr[i] <= k && arr[j] >= k) {\n            i += 1\n            j -= 1\n        }\n    }\n\n    result = Math.min(maxElementsToRemove, minElementsToRemove)\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/703","completion":"    var i = 0\n    while (i < d.count) {\n        if (d[i].key == x)\n            return true\n        i += 1\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/704","completion":"    Double harmonicSum = 0.0\n    Double factorial = 1.0\n    Double product = 1.0\n    for (i in 0..n) {\n        harmonicSum += 1\/factorial\n        product *= factorial\n        factorial *= i\n    }\n    return product\/harmonicSum\n}","language":"swift"}
{"task_id":"MBSWP\/705","completion":"    \/\/ Your code\n}","language":"swift"}
{"task_id":"MBSWP\/706","completion":"    return arr1.filter(x => arr2.indexOf(x) != -1).length == m;\n}","language":"swift"}
{"task_id":"MBSWP\/707","completion":"    let res = 0\n    for i in 0..n {\n        res += n & 1\n        n >>= 1\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/708","completion":"    return [string]\n}","language":"swift"}
{"task_id":"MBSWP\/709","completion":"    var unique_dict = {\n        value : 0\n    }\n\n    for item in test_list {\n        if (unique_dict.containsKey(item[0])) {\n            unique_dict[item[0]] = unique_dict[item[0]] + 1\n        } else {\n            unique_dict[item[0]] = 1\n        }\n    }\n\n    return unique_dict.toString()\n}","language":"swift"}
{"task_id":"MBSWP\/710","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/711","completion":"    guard let n = (n as! String).empty else {\n        let s = n.split(\"\").sort!()\n        let i = 0\n        for i in 0..s.length {\n            if s[i].toInt() == s[i - 1].toInt() {\n                i++\n            } else break\n        }\n        if i == s.length \/ 2 {\n            return true\n        } else return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/712","completion":"    result := []\n    for item in list1\n        if item not in result\n            result += item\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/713","completion":"    for (x in test_tup) {\n        if (test_tup.count(x) != 1) return false\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/714","completion":"    var factorial : Int = 1\n    var count : Int = 1\n    for (i in 1..n) {\n        if n%i == 0 {\n            factorial *= i\n            count++\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/715","completion":"    return (test_str.split(\", \").map(Integer))\n}","language":"swift"}
{"task_id":"MBSWP\/716","completion":"    let i = 1;\n    let perimeter = 0;\n    while (i <= a) {\n        if (a % i == 0) {\n            perimeter = perimeter + i;\n        }\n        i++;\n    }\n    return perimeter;\n}","language":"swift"}
{"task_id":"MBSWP\/717","completion":"    var mean = meanCalc(data)\n    var sd = 0\n    for (i in data) {\n        sd += (data[i] - mean) * (data[i] - mean)\n    }\n    return Math.sqrt(sd \/ data.length)\n}","language":"swift"}
{"task_id":"MBSWP\/718","completion":"    var result = [] as? [AnyHashable]\n    var length = list1.count()\n    var step = 2\n    for (i <- length - 1; i > 0; i -= step) {\n        result = append(result, list1[i-step])\n    }\n    if (length > 0) result = append(result, list1[0])\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/719","completion":"    var s = text.split(\"\")\n    var a = s.filter(e => e == \"a\")\n    var b = s.filter(e => e == \"b\")\n    if (a.length >= 1) {\n        if (b.length >= 1) {\n            return \"Found a match!\"\n        } else {\n            return \"Not matched!\"\n        }\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/720","completion":"  var new_tup = []\n  var new_dict = []\n  var dict_size = 0\n  for i = 0; i < test_tup.size(); i++ {\n    if (test_dict.find({_1: test_tup[i]}) != -1) {\n      new_dict = test_dict.update({_1: test_tup[i]}, {0: new_dict[0]}, 1)\n      new_tup.push(test_tup[i])\n      dict_size = new_dict[0].size\n    } else {\n      new_dict = [{_1: test_tup[i]}, 0]\n      new_tup.push(test_tup[i])\n      dict_size = 1\n    }\n  }\n  new_tup.push(new_dict)\n  for (var i = 0; i < dict_size; i++) {\n    new_tup.push(new_dict[0][i])\n  }","language":"swift"}
{"task_id":"MBSWP\/721","completion":"        \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/722","completion":"    \/\/ Your code\n    var filtered = students.filter { (_, w1) -> _[1] > w and _[1] < w1 }\n    var filtered1 = filtered.filter { (_, h1) -> _[0] > h and _[0] < h1 }\n    return filtered1\n}","language":"swift"}
{"task_id":"MBSWP\/723","completion":"  let nums1Set = Set(nums1)\n  let counter = 0\n  nums2.forEach(n => {\n    if (n in nums1Set) {\n      counter++\n    }\n  })\n  return counter\n}","language":"swift"}
{"task_id":"MBSWP\/724","completion":"    var sum = 0\n    var digit: Int = 1\n    while(digit <= power) {\n        sum += (digit % base) * digit\n        digit *= 10\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/725","completion":"    return text1.match(\/\\\".+?\\\"\/g).map { it.slice(1, -1) }\n}","language":"swift"}
{"task_id":"MBSWP\/726","completion":"    result = []\n    for _ in 0 until test_tup.size - 1 do\n        result.append(test_tup.at(0) * test_tup.at(1))\n        test_tup.removeAt(0)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/727","completion":"    var chars = \/[A-Za-z0-9]\/g\n    return S.replace(chars, '')\n}","language":"swift"}
{"task_id":"MBSWP\/728","completion":"    return [\n        lst1[i] + lst2[i]\n        for i in 0 until lst1.len - 1\n    ]\n}","language":"swift"}
{"task_id":"MBSWP\/729","completion":"    nums1.map { x + y }\n    nums2.map { x + y }\n}","language":"swift"}
{"task_id":"MBSWP\/730","completion":"    let set = Set()\n    for(let i = 0; i < nums.length; i++) {\n        if(set.has(nums[i])) {\n            nums.splice(i, 1);\n            i--;\n        } else {\n            set.add(nums[i])\n        }\n    }\n    return nums\n}","language":"swift"}
{"task_id":"MBSWP\/731","completion":"  return 0.5 * (r * r) * h\n}","language":"swift"}
{"task_id":"MBSWP\/732","completion":"    if let re = \/\\s\/ {\n        text = text.replace(re, \":\")\n    }\n    if let re = \/,\/ {\n        text = text.replace(re, \":\")\n    }\n    if let re = \/\\.+\/ {\n        text = text.replace(re, \":\")\n    }\n    return text\n}","language":"swift"}
{"task_id":"MBSWP\/733","completion":"    let left = 0;\n    let right = A.length - 1;\n    let mid;\n\n    while (left <= right) {\n        mid = (left + right) \/ 2;\n        if (A[mid] < x) {\n            left = mid + 1;\n        } else if (A[mid] > x) {\n            right = mid - 1;\n        } else {\n            let count = 0;\n            while (mid + count < A.length && A[mid + count] === x) {\n                count += 1;\n            }\n            return mid + count;\n        }\n    }\n\n    return -1;\n}","language":"swift"}
{"task_id":"MBSWP\/734","completion":"    var sum = 0\n    var tempArr = [arr[0]]\n\n    for(i in arr){\n        var tempSum = 1\n        for(j in tempArr){\n            tempSum *= tempArr[j]\n        }\n        tempSum *= arr[i]\n        tempArr.append(arr[i])\n\n        if (tempSum > n) {\n            break\n        }\n        if (tempSum == n) {\n            sum += tempSum\n        }\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/735","completion":"    \/\/ write your code in Swift here\n    \/\/ 1. get the middle bits of the number\n    \/\/ 2. swap the first and last bits with 0 or 1\n    \/\/ 3. sum all the bits together\n}","language":"swift"}
{"task_id":"MBSWP\/736","completion":"    let l = 0, r = a.count, m\n    while (l < r) {\n        m = (l + r) \/ 2\n        if (a[m] < x) {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}","language":"swift"}
{"task_id":"MBSWP\/737","completion":"    if (string.match(\/[aeiou]\/)) {\n        return \"Valid\";\n    }\n    else {\n        return \"Invalid\";\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/738","completion":"    let total = 1\n    for _ in 1..n {\n        total *= (1 - 1\/n)\n    }\n    return total\n}","language":"swift"}
{"task_id":"MBSWP\/739","completion":"    var i : Int\n    var triangular : Int\n    for i = 1, triangular = 0; i <= n; triangular = triangular + (i * (i + 1))\/2; i = i + 1\n    return triangular\n}","language":"swift"}
{"task_id":"MBSWP\/740","completion":"    var dict = {}\n    for _, i in reversed(\n        zip(range(len(test_tup) - 1), test_tup)\n    ) {\n        dict[i] = test_tup[i + 1]\n    }\n    return dict\n}","language":"swift"}
{"task_id":"MBSWP\/741","completion":"    for i in 0..s.length {\n        if s[i] != s[0] {\n            return false\n        }\n    }\n\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/742","completion":"        var area: Double = 0\n        for i = 0.0, i < side * 0.5 * side, i++ {\n                area += (i * 2) * (i - side)\n        }\n        area *= 6 \/ (4 * side)\n        return area\n}","language":"swift"}
{"task_id":"MBSWP\/743","completion":"    var list2 = []\n    for(var i = 0; i < m; i++) {\n        list2.push(list1[0])\n        list1 = list1.slice(1, n)\n    }\n    return list2\n}","language":"swift"}
{"task_id":"MBSWP\/744","completion":"    return _checkNone(test_tup)\n}","language":"swift"}
{"task_id":"MBSWP\/745","completion":"    var result : [Int] = []\n    for (var i = startnum; i <= endnum; i++) {\n        var digits : [Int] = digits(i)\n        for (var d in digits) {\n            if (digits[d] != 0) {\n                var count = 1\n                for (var j = 1; j <= digits[d]; j++) {\n                    if (i % j != 0) {\n                        count = 0\n                    }\n                }\n                if (count == 1) {\n                    result.append(i)\n                }\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/746","completion":"    if (a < 0 || r <= 0) {\n        return \"none\"\n    }\n\n    var S = 2 * Math.PI * r\n    var h = a \/ 2\n\n    return (S * h)\n}","language":"swift"}
{"task_id":"MBSWP\/747","completion":"    var dp = Array(m + 1, n + 1)\n    for (var i = 0; i <= m; ++i)\n        for (var j = 0; j <= n; ++j)\n            dp[i, j] = 0\n\n    for (var i = 1; i <= m; ++i) {\n        for (var j = 1; j <= n; ++j) {\n            if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[j - 1])\n                dp[i, j] = 1 + dp[i - 1, j - 1]\n            else\n                dp[i, j] = Math.max(dp[i - 1, j], dp[i, j - 1])\n        }\n    }\n    return dp[m, n]\n}","language":"swift"}
{"task_id":"MBSWP\/748","completion":"    let regex = \/[A-Z]\\w+\/g;\n    let result = str1.replace(regex, \"$& \");\n    return result;\n}","language":"swift"}
{"task_id":"MBSWP\/749","completion":"    return nums_str.sort_by_cmp(String::compare_with)\n}","language":"swift"}
{"task_id":"MBSWP\/750","completion":"    var new_list = []\n    for  i <- test_list.length {\n        new_list.append(test_list[i])\n    }\n    for i in test_tup {\n        new_list.append(i)\n    }\n    return new_list\n}","language":"swift"}
{"task_id":"MBSWP\/751","completion":"    if (i >= arr.length) return true\n    if (arr[2 * i] > arr[2 * i + 1]) return false\n    return checkMinHeap(arr, 2 * i + 2) || checkMinHeap(arr, 2 * i + 1)\n}","language":"swift"}
{"task_id":"MBSWP\/752","completion":"    return 1 if n == 1 else jacobsthalNum(n-1) + 4*(n-1)\n}","language":"swift"}
{"task_id":"MBSWP\/753","completion":"    result := test_list\n    for _ in 1..K {\n        result <- result ++ (test_list[0],)\n        result.pop\n    }\n    result\n}","language":"swift"}
{"task_id":"MBSWP\/754","completion":"    result := []\n    for i, j, k in zip(l1, l2, l3) {\n        if i == j && i == k {\n            result.append(i)\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/755","completion":"    \/\/put your code here\n    numbers.sort()\n    if (numbers.length < 2) {\n        return \"none\"\n    }\n    else {\n        return numbers[1]\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/756","completion":"    return \"Not matched!\"\n}","language":"swift"}
{"task_id":"MBSWP\/757","completion":"    reverse_str := []\n    for s in test_list {\n        reverse_str <- reverse_str ++ test_list[s].split(\"\").reverse().join(\"\")\n    }\n    reverse_str = reverse_str.sort()\n    counter := 0\n    for i in range(len(reverse_str)) {\n        if (i < len(reverse_str) - 1) {\n            if (reverse_str[i] == reverse_str[i + 1]) counter ++\n        }\n    }\n    return String(counter)\n}","language":"swift"}
{"task_id":"MBSWP\/758","completion":"    var result: [[AnyHashable]: Int] = [[AnyHashable]: Int]()\n    for i in list1 {\n        var count: Int = 0\n        for j in result {\n            if i == j[0] {\n                j[1] += 1\n            }\n        }\n        result[count][0] = i\n        result[count][1] = 1\n        count += 1\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/759","completion":"    var res = true\n    var n = 0\n    var p = 0\n    num = num.trim()\n    n = num.length\n    for (i in num) {\n        if (num[i] == '.') {\n            p = i\n            break\n        }\n    }\n    if (p == 0) {\n        for (i = 0; i < n; i++) {\n            if (isNaN(num[i])) {\n                res = false\n                break\n            }\n        }\n    }\n    else {\n        var n = num.substr(0, p)\n        var p = num.substr(p, n.length)\n        var n = num.split(\".\")\n        if (n.length > 2) {\n            res = false\n        }\n        else {\n            for (i in n) {\n                if (isNaN(n[i])) {\n                    res = false\n","language":"swift"}
{"task_id":"MBSWP\/760","completion":"    var seen : [Int] = arr\n    for (i, e) in enumerate(arr) {\n        if (i > 0 && e === seen[i - 1]) {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}","language":"swift"}
{"task_id":"MBSWP\/761","completion":"    d = d * 180 \/ 3.141592653589793\n    d = d - a\n    if (d <= 180) {\n        return d\n    }\n    d = d - 360\n    return d\n}","language":"swift"}
{"task_id":"MBSWP\/762","completion":"  var days = [31,28,31,30,31,30,31,31,30,31,30,31]\n  var year = new Date().getUTCFullYear()\n\n  if (monthnum3 == 2) {\n    if (year % 400 == 0) {\n      days[1] = 29\n    }\n    if (year % 100 == 0) {\n      days[1] = 28\n    }\n    if (year % 4 == 0) {\n      days[1] = 29\n    }\n  }\n  for (i <- 0; i <= days.Length; i++) {\n    if (days[i] == monthnum3) {\n      return true\n    }\n  }\n  return false\n}","language":"swift"}
{"task_id":"MBSWP\/763","completion":"    var arr = arr.sort()\n    var minDiff = arr[1] - arr[0]\n    for (i = 1, j = 0; i < n; i++, j++) {\n        if (arr[i + 1] - arr[i] < minDiff) {\n            minDiff = arr[i + 1] - arr[i]\n        }\n    }\n    return minDiff\n}","language":"swift"}
{"task_id":"MBSWP\/764","completion":"    let val = 0\n    let i = 0\n\n    while (i < str.length) {\n        if (str[i] == \"1\" || str[i] == \"2\" || str[i] == \"3\" || str[i] == \"4\" || str[i] == \"5\" || str[i] == \"6\" || str[i] == \"7\" || str[i] == \"8\" || str[i] == \"9\") {\n            val += 1\n        }\n        i += 1\n    }\n    return val\n}","language":"swift"}
{"task_id":"MBSWP\/765","completion":"    var d = 0\n    for (i <- 1; i <= n; i++) {\n        d = (d * 10 + 7) % 20201227\n    }\n    return d\n}","language":"swift"}
{"task_id":"MBSWP\/766","completion":"    res := [[Int]]()\n    for index, value in pairs(l1) {\n        res = res + [[l1[index], l1[index+1]]]\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/767","completion":"    \/\/ TODO\n    arr.sort()\n    int count = 0\n    for (int i = 0; i < arr.length-1; i++) {\n        if (arr[i] + arr[i+1] == sum) {\n            count++\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/768","completion":"    let result = x % 2 == 0 ? true : false\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/769","completion":"    var res = [Int]()\n    var first = 0\n    for i in li1 {\n        res[first] = i\n        first++\n    }\n    for i in li2 {\n        if(res.contains(i)) {\n            res.removeAt(res.indexOf(i))\n        } else {\n            res.append(i)\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/770","completion":"    return pow(1.0, 4.0 * n)\n}","language":"swift"}
{"task_id":"MBSWP\/771","completion":"    val stack: Stack<Character> = Stack()\n    for {exp.charAt(i) in \"({[\"} {\n        stack.push(exp.charAt(i))\n    }\n    while not stack.isEmpty() {\n        if (exp.charAt(i) in \")}]\") {\n            if (exp.charAt(i) == stack.pop()) {\n                i++\n            } else {\n                return false\n            }\n        }\n        else {\n            i++\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/772","completion":"    var result = \"\"\n    for(char c in test_str) {\n        if(c == \" \") {\n            result += \" \"\n        }\n        else {\n            var last = result.lastIndexOf(\" \")\n            var lastK = result.substring(last-K,last)\n            if(lastK.length > K) {\n                result = result.substring(0, last-K)\n            }\n            else {\n                result += c\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/773","completion":"    \/\/ the result array\n    var result : [AnyHashable] = [];\n    \/\/ the pattern index\n    var patternIndex : Int = 0;\n    \/\/ the text index\n    var textIndex : Int = 0;\n    \/\/ for each pattern character\n    while (patternIndex < pattern.length) {\n        \/\/ if the text has reached the end\n        if (textIndex >= text.length) {\n            \/\/ stop the pattern matching\n            break;\n        }\n        \/\/ if the text character matches the pattern character\n        if (text[textIndex] == pattern[patternIndex]) {\n            \/\/ increment the text index\n            textIndex += 1;\n        } else {\n            \/\/ otherwise, reset the text index\n            textIndex = 0;\n        }\n        \/\/ if the text index is at the end of the text\n        if (textIndex == text.length) {\n            \/\/ add the current text index to the result array\n            result.push(text[","language":"swift"}
{"task_id":"MBSWP\/774","completion":"  \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/775","completion":"    for (i in nums) {\n        if (i % 2 == 0) {\n            return false\n        } else if (nums[i] % 2 == 1) {\n            return true\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/776","completion":"    var vowels = Set(\"aeiou\")\n    var count = 0\n    for each i in test_str {\n        var temp = \"\"\n        if i != \" \" {\n            for each j in test_str {\n                if j != \" \" {\n                    if i == j {\n                        temp += j\n                    }\n                }\n            }\n        }\n        if temp.length > 1 {\n            for each k in temp {\n                if k != \" \" {\n                    if vowels.contains(k) {\n                        count++\n                    }\n                }\n            }\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/777","completion":"    \/\/ Your code here\n    var set = Set()\n    var sum = 0\n\n    for i in arr\n        if !set.has(arr[i])\n            sum += arr[i]\n            set.add(arr[i])\n\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/778","completion":"    var map = map[AnyHashable, AnyHashable] { }\n    for _, v in list1 {\n        if map[v] == v {\n            map[v] = v\n        } else {\n            map[v] = map[v] + 1\n        }\n    }\n    var ret = []\n    for _, v in map {\n        if v > 1 {\n            ret.append(map[v])\n        }\n    }\n    return ret\n}","language":"swift"}
{"task_id":"MBSWP\/779","completion":"    return {\n        list1.map(pair => [pair, pair]).groupBy(pair => pair[0]).map(pairs => [pairs.key, pairs.map(pair => pair[1]).size])\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/780","completion":"    var result = []\n\n    var current = []\n    var length = 0\n    for (var item of test_list) {\n        if (length == item[0]) {\n            result.push(current.slice())\n            current = []\n            length = 0\n        }\n\n        current.push(item[1])\n        length += item[1]\n\n    }\n\n    if (current.length) {\n        result.push(current)\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/781","completion":"    let result = \"Even\"\n    let divisorCount = 0\n    for (i in n) {\n        if (n % i == 0) {\n            divisorCount += 1\n        }\n    }\n    if divisorCount % 2 == 0 {\n        result = \"Even\"\n    } else {\n        result = \"Odd\"\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/782","completion":"    var sum = 0\n    var i : Int = 1\n    var j : Int = 1\n    while (i < arr.count) {\n        sum += arr[i]\n        i += 2\n    }\n    while (j < arr.count) {\n        sum += arr[j]\n        j += 2\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/783","completion":"    let max = max(r, g, b)\n    let min = min(r, g, b)\n\n    let v = max\n\n    let s = 0.0\n\n    if (min == max) {\n        s = 0.0\n    } else {\n        let d = max - min\n        s = d \/ max\n    }\n\n    let m = max\n\n    let h = 0\n\n    if (max == min) {\n        h = 0.0\n    } else {\n        if (max == r) {\n            h = (g - b) \/ d\n        } else if (max == g) {\n            h = 2 + (b - r) \/ d\n        } else if (max == b) {\n            h = 4 + (r - g) \/ d\n        }\n        h \/= 6.0\n    }\n\n    return [h","language":"swift"}
{"task_id":"MBSWP\/784","completion":"    var odd: Int = 1\n    var even: Int = 0\n    var count: Int = 0\n    for (i in list1) {\n        count++\n        if (count % 2 == 0) {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}","language":"swift"}
{"task_id":"MBSWP\/785","completion":"    var res = []\n    var str = \"\"\n    for (index in test_str) {\n        if (index % 2 == 0) {\n            str += test_str[index]\n        } else {\n            res.append(Integer.parseInt(str))\n            str = \"\"\n        }\n    }\n    res.append(Integer.parseInt(str))\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/786","completion":"    var i : Int = 0;\n    var j : Int = a.count;\n\n    while (i < j) {\n        var m : Int = i + (j - i) \/ 2;\n\n        if (a[m] < x) {\n            i = m + 1;\n        } else {\n            j = m;\n        }\n    }\n\n    return i;\n}","language":"swift"}
{"task_id":"MBSWP\/787","completion":"    if let x = text.match(new RegExp(\"a.b{3}\")) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/788","completion":"    return test_list + [test_str]\n}","language":"swift"}
{"task_id":"MBSWP\/789","completion":"    let area = (s * s) * (3 * l \/ 2)\n    let perimeter = 3 * s * l\n    return area + perimeter\n}","language":"swift"}
{"task_id":"MBSWP\/790","completion":"    var evenIdx = 0\n    for i in nums {\n        if i % 2 != 0 {\n            return false\n        }\n        else {\n            evenIdx = evenIdx + 1\n        }\n    }\n    return evenIdx == nums.count\n}","language":"swift"}
{"task_id":"MBSWP\/791","completion":"    let res = []\n    for {\n        let sub_list = []\n        for {\n            if test_tup[0] != test_tup[1] {\n                sub_list.append(test_tup[1])\n            }\n            test_tup[0] = test_tup[1]\n            sub_list.append(test_tup.slice(2))\n            res = res + sub_list\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/792","completion":"    count := 0\n    for item in input_list {\n        count += 1\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/793","completion":"    var n = arr.length\n    var start = 0\n    var end = n - 1\n    var mid = Math.ceil((end - start) \/ 2)\n\n    while (start < end) {\n        if (arr[mid] >= x) {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n        mid = Math.ceil((end - start) \/ 2)\n    }\n\n    if (start >= n || arr[start] != x) {\n        return -1\n    }\n    return start\n}","language":"swift"}
{"task_id":"MBSWP\/794","completion":"    return \"Not matched!\"\n}","language":"swift"}
{"task_id":"MBSWP\/795","completion":"    if let itemsVec = items.vec\n        then let heap = new PriorityQueue<Item>();\n        itemsVec.map { item -> heap.add(item.toItem()) }\n        let res = [];\n        let i = 0;\n        let totalPrice = 0;\n        while heap.size > 0 && i < n {\n            let curItem = heap.extractMin();\n            totalPrice += curItem.price;\n            res.append(curItem);\n            i++;\n        }\n        if heap.size > 0 && i < n {\n            return res\n        }\n        else {\n            return res.append(itemsVec[0])\n        }\n    }","language":"swift"}
{"task_id":"MBSWP\/796","completion":"    let sum = 0\n\n    for _, v of dict.entries() {\n        sum += v\n    }\n\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/797","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/798","completion":"    return 0\n}","language":"swift"}
{"task_id":"MBSWP\/799","completion":"    var shift : Int = d % n\n    var mask : Int = (1<-shift) << (n-1)\n    return (n & ~mask) | (n >> shift)\n}","language":"swift"}
{"task_id":"MBSWP\/800","completion":"  return text.trim().replace(\/\\s+\/g, '')\n}","language":"swift"}
{"task_id":"MBSWP\/801","completion":"    var array = [x, y, z].sort()\n    var i = 0\n    var count = 0\n    while (i < array.count) {\n        if (array[i] == array[i + 1]) {\n            count = count + 1\n        }\n        i = i + 2\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/802","completion":"    let result = 0\n    for (i in arr) {\n        let min = 0\n        if (arr[min] < arr[i]) {\n            min = i\n        }\n        result += arr.length - 1 - min\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/803","completion":"    var i = 0,\n        j = n\n    while(i <= j) {\n        var k = (i + j) \/ 2\n        var square = k * k\n        if(square == n) {\n            return true\n        } else if (square > n) {\n            j = k - 1\n        } else {\n            i = k + 1\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/804","completion":"    for (i in arr) {\n        if (i * n % 2 == 0) {\n            return true\n        } else {\n            return false\n        }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/805","completion":"    var maxSum = 0\n    var bestList = nil\n    lists.forEach { list ->\n        val sum = list.reduce { (sum, elem) -> sum + elem }\n        if sum > maxSum {\n            maxSum = sum\n            bestList = list\n        }\n    }\n    return bestList\n}","language":"swift"}
{"task_id":"MBSWP\/806","completion":"    var count = 0\n    var last_upper_index = 0\n    for(index = 0; index < test_str.length; index++) {\n        if(test_str[index] == 'A' || test_str[index] == 'a') {\n            count = 0\n            last_upper_index = index\n        } else if(test_str[index] == 'B' || test_str[index] == 'b') {\n            count = 0\n            last_upper_index = index\n        } else if(test_str[index] == 'C' || test_str[index] == 'c') {\n            count = 0\n            last_upper_index = index\n        } else if(test_str[index] == 'D' || test_str[index] == 'd') {\n            count = 0\n            last_upper_index = index\n        } else if(test_","language":"swift"}
{"task_id":"MBSWP\/807","completion":"    for(var i = 0; i < nums.length; i++) {\n        if(nums[i] % 2 != 0) {\n            return nums[i]\n        }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/808","completion":"    var result = false\n    for (i <- 0 until test_tup.count) {\n        if (test_tup[i] == K) {\n            result = true\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/809","completion":"        var length = test_tup1.length\n        for (i,j) in test_tup2 {\n            if (test_tup1[i] < test_tup1[j]) {\n                return true\n            }\n        }\n        return false\n    }","language":"swift"}
{"task_id":"MBSWP\/810","completion":"    let result = []\n    let counter = a\n    let i = 0\n    let x = 0\n    while (x < b) {\n        result.append(\"p\")\n        result.append(\"p\")\n        result.append(\"p\")\n        result.append(\"p\")\n        result.append(\"q\")\n        result.append(\"q\")\n        if (x < c) {\n            result.append(\"q\")\n        }\n        if (x < d) {\n            result.append(\"r\")\n            result.append(\"r\")\n        }\n        counter--\n        x++\n        if (counter == 0) {\n            result.append(\"p\")\n            result.append(\"p\")\n            result.append(\"p\")\n            result.append(\"p\")\n            result.append(\"q\")\n            result.append(\"q\")\n            counter = a\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/811","completion":"    if test_list1.length != test_list2.length {\n        return false\n    }\n    var temp_list1 : [Int] = []\n    var temp_list2 : [Int] = []\n    for i in test_list1 {\n        temp_list1.append(i[0])\n    }\n    for i in test_list2 {\n        temp_list2.append(i[0])\n    }\n    temp_list1.sort()\n    temp_list2.sort()\n    for i in temp_list1 {\n        if temp_list1[i] != temp_list2[i] {\n            return false\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/812","completion":"    var result = \"\"\n    for (i in street) {\n        if (street[i] == \" \") {\n            result += \" \"\n        } else if (street[i] == \"d\") {\n            result += \"d\"\n        } else if (street[i] == \"u\") {\n            result += \"u\"\n        } else if (street[i] == \"r\") {\n            result += \"r\"\n        } else {\n            result += street[i]\n        }\n    }\n    return result.substring(0, result.length - 1) + \" Rd.\"\n}","language":"swift"}
{"task_id":"MBSWP\/813","completion":"    return str1.length\n}","language":"swift"}
{"task_id":"MBSWP\/814","completion":"        var ans = 0\n        for (i in 0..p) {\n                for (j in 0..q) {\n                        ans = ans + i + j\n                }\n        }\n        ans\n}","language":"swift"}
{"task_id":"MBSWP\/815","completion":"    if (arr.length == 1) {\n        return arr;\n    }\n    var left = 0;\n    var right = arr.length - 1;\n    var arr1 : [Int] = [];\n    var arr2 : [Int] = [];\n    var tmp : Int;\n\n    while (left <= right) {\n        while (arr[left] != 0) {\n            arr1.push(arr[left]);\n            left++;\n        }\n        while (arr[right] != 2) {\n            arr2.push(arr[right]);\n            right--;\n        }\n        if (arr1.length == 0) {\n            arr[left] = 0;\n            left++;\n        } else if (arr2.length == 0) {\n            arr[right] = 2;\n            right--;\n        } else if (arr1[arr1.length - 1] > arr2[","language":"swift"}
{"task_id":"MBSWP\/816","completion":"    if let len = test_tup.len {\n        len == 0 {\n            \/\/ tuples of length 0 are considered False.\n            return []\n        }\n        len == 1 {\n            return test_tup[0]\n        }\n\n        let t_tup = 0 to len - 1\n        let result = 0 to len - 1\n        let t_tup_val = 0 to len - 1\n        let temp = 0 to len - 1\n        let i = 0 to len - 1\n        let temp_tup = 0 to len - 1\n        do {\n            temp_tup = (t_tup_val + temp) to len - 1\n            temp_tup[i] = test_tup[t_tup_val]\n            t_tup_val = t_tup\n            t_tup = temp_tup\n            i = i + 1\n        } while (t_tup_val != len -","language":"swift"}
{"task_id":"MBSWP\/817","completion":"    return nums.filter(x => x % m == 0 || x % n == 0)\n}","language":"swift"}
{"task_id":"MBSWP\/818","completion":"    var cnt = 0\n    for (let i = 0; i < str.length; i++) {\n        let ch = str[i]\n        if (ch >= 'A' && ch <= 'Z') {\n            cnt += 1\n        }\n    }\n    return cnt\n}","language":"swift"}
{"task_id":"MBSWP\/819","completion":"    var results = []\n\n    for _, it in pairs(lists) {\n        var freq = {}\n        var dups = []\n\n        for _, val in pairs(it) {\n            if (freq[val]) freq[val] += 1\n            else freq[val] = 1\n\n            if freq[val] == 2 {\n                dups.append(val)\n            }\n        }\n\n        if (dups.length > 0) {\n            results.append(dups)\n        }\n    }\n\n    return results\n}","language":"swift"}
{"task_id":"MBSWP\/820","completion":"    return monthnum1 == 3 || monthnum1 == 4 || monthnum1 == 6 || monthnum1 == 7 || monthnum1 == 9 || monthnum1 == 10 || monthnum1 == 12 ? false : true\n}","language":"swift"}
{"task_id":"MBSWP\/821","completion":"    var dict1Keys: [String: String] = dict1.keySet()\n    var dict2Keys: [String: String] = dict2.keySet()\n\n    var dict3Keys: [String: String] = dict1Keys.intersect(dict2Keys)\n\n    var dict3: [String: String] = []\n    dict3.addAll(dict1)\n    dict3.addAll(dict2)\n\n    var dict3: [String: String] = dict3Keys.map(dict3 => dict3.toUpper())\n    dict3.sorted()\n\n    return dict3\n}","language":"swift"}
{"task_id":"MBSWP\/822","completion":"    var regex = \/[A-Z]{1,}[a-z]{1,}[\\d]{1,}[\\W]{1,}[A-Z]{1,}[a-z]{1,}[\\d]{1,}[\\W]{1,}[a-z]{1,}[\\d]{1,}[\\W]{1,}[A-Z]{1,}[a-z]{1,}[\\d]{1,}[\\W]{1,}[A-Z]{1,}[a-z]{1,}[\\d]{1,}[\\W]{1,}[a-z]{1,}[\\d]{1,}[\\W]{1,}[A-Z]{1,}[a-z]{1,}[\\d]{1,}[\\W]{1,}[a-z]{1,}[\\d]{1,}[\\W]{1,}[A-Z]{1,}[a-z]{1,}[\\d]{1,}[\\W]{1,}[a-z]{1,}[\\d]{1,}[\\W]{1,}[A-Z]{1,}[a-z]{1,}[\\d]{1,}[\\W]{1,}[a-z]{1,}[\\d]{1,}[\\W","language":"swift"}
{"task_id":"MBSWP\/823","completion":"    if string.startsWith(sample) {\n        return \"string starts with the given substring\"\n    } else {\n        return \"string doesnt start with the given substring\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/824","completion":"    return l.filter(x, index in l.indices(l.count) is even)\n}","language":"swift"}
{"task_id":"MBSWP\/825","completion":"    var res = []\n    for {\n        let temp = []\n        for(let i = 0; i < nums.length; i++) {\n            if (i == list_index[0]) {\n                temp.append(nums[i])\n            }\n        }\n        if (temp.length == 0) {\n            for(let i = 0; i < nums.length; i++) {\n                if (i == list_index[1]) {\n                    temp.append(nums[i])\n                }\n            }\n        }\n        if (temp.length == 0) {\n            for(let i = 0; i < nums.length; i++) {\n                if (i == list_index[2]) {\n                    temp.append(nums[i])\n                }\n            }\n        }\n        if (temp.length == 0) {\n            for(let i = 0; i ","language":"swift"}
{"task_id":"MBSWP\/826","completion":"    var triangleType: String = \"Not a triangle\";\n    if ((a + b > c) && (b + c > a) && (c + a > b)) {\n        if (a == b && b == c) {\n            triangleType = \"Equalateral\";\n        } else if (a == b || a == c || b == c) {\n            triangleType = \"Obtuse-angled Triangle\";\n        } else {\n            triangleType = \"Right-angled Triangle\";\n        }\n    }\n    return triangleType;\n}","language":"swift"}
{"task_id":"MBSWP\/827","completion":"    let sum = 0\n    for let i in list1 {\n        sum += list1[i][C]\n    }\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/828","completion":"    let alpha = 0\n    let dig = 0\n    let sp = 0\n    for x in string {\n        if x.isAlpha {\n            alpha++\n        }\n        if x.isDigit {\n            dig++\n        }\n        if x.isSpecial {\n            sp++\n        }\n    }\n    return [alpha, dig, sp]\n}","language":"swift"}
{"task_id":"MBSWP\/829","completion":"    var frequency = {};\n    for(var item in input){\n        frequency[input[item]] = frequency.hasOwnProperty(input[item]) ? frequency[input[item]] + 1 : 1;\n    }\n\n    var maxValue = 0;\n    var secondMaxValue = \"\";\n    var key;\n    for (key in frequency){\n        if (frequency[key] > maxValue){\n            secondMaxValue = maxValue;\n            maxValue = frequency[key];\n        } else if (frequency[key] == maxValue){\n            secondMaxValue = secondMaxValue == \"\" ? key : secondMaxValue;\n        }\n    }\n\n    return secondMaxValue;\n}","language":"swift"}
{"task_id":"MBSWP\/830","completion":"    var temp = a * Math.pow(10, digits)\n    var temp2 = Math.floor(temp)\n    return temp2 \/ Math.pow(10, digits)\n}","language":"swift"}
{"task_id":"MBSWP\/831","completion":"  var pairs : [Int] = []\n\n  var len = 0\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (arr[i] == arr[j]) {\n        pairs.push(arr[i], arr[j])\n      }\n    }\n  }\n\n  len = pairs.length\n  var pairCount = 0\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (pairs[i] == pairs[j]) {\n        pairCount++\n      }\n    }\n  }\n\n  return pairCount\n}","language":"swift"}
{"task_id":"MBSWP\/832","completion":"    let regex = \/[-+]?\\d+\/\n    let match = regex.exec(input)\n    if (match == null) {\n        return 0\n    }\n    return match[0]\n}","language":"swift"}
{"task_id":"MBSWP\/833","completion":"    return []\n}","language":"swift"}
{"task_id":"MBSWP\/834","completion":"    let matrix = []\n    for i := 1; i <= n; i++ {\n        matrix.append([])\n    }\n    let current_row := 0\n    let current_col := 0\n    let next_row := n - 1\n    let next_col := n - 1\n    let direction := 'up'\n\n    let row_steps := 0\n    let col_steps := 0\n    let current_power := 1\n\n    while current_power <= n * n :\n        for _ in range(current_power) {\n            matrix[current_row][current_col] = current_power\n            current_row += next_row - row_steps\n            current_col += next_col - col_steps\n            row_steps = current_row - next_row\n            col_steps = current_col - next_col\n            current_power = current_power * 2\n        }\n        if (direction == 'up')","language":"swift"}
{"task_id":"MBSWP\/835","completion":"    if let d = (y2 - y1) \/ (x2 - x1) else Double(0)\n    return Double(d)\n}","language":"swift"}
{"task_id":"MBSWP\/836","completion":"    if let sum = 0;\n        for num in a {\n            sum = (sum + num) if (sum < 0) num\n            if sum >= size {\n                return sum\n            }\n        }\n        return -1\n}","language":"swift"}
{"task_id":"MBSWP\/837","completion":"    if let i = 1; < n; i ++ {\n        let result = 1;\n        for i in 1..i {\n            result *= i;\n        }\n        result *= result;\n        result *= result;\n        return result;\n    }\n    return 0;\n}","language":"swift"}
{"task_id":"MBSWP\/838","completion":"    if let l = s1.length < s2.length {\n        s1, s2 = s2, s1\n    }\n    counter := 0\n    for i := 0; i < s1.length; i++ {\n        if s1[i] != s2[i] {\n            counter++\n            swap(s1[i], s2[i])\n        }\n    }\n    if counter != 0 {\n        return counter\n    }\n    return min(s1.length - 1, s2.length - 1)\n}","language":"swift"}
{"task_id":"MBSWP\/839","completion":"    return tup.map { |x| x.sort}.flatten\n}","language":"swift"}
{"task_id":"MBSWP\/840","completion":"    let discriminant = b*b - 4*a*c\n    if discriminant < 0 {\n        return \"No\"\n    }\n    if discriminant == 0 {\n        return \"Yes\"\n    }\n    if discriminant > 0 {\n        return \"No\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/841","completion":"    var count = 0\n    for (var i = 0; i < n; i++) {\n        for (var j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                count = count + 1\n            }\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/842","completion":"    var count = {} as [Int]\n    for i in arr {\n        if arr[i] > 0 {\n            count[arr[i]] = count[arr[i]] + 1\n        }\n    }\n    var odd_count = 0\n    for k, v in count {\n        if v % 2 == 0 {\n            odd_count = odd_count + 1\n        }\n        if odd_count == arr_size % 2 {\n            return k\n        }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/843","completion":"    var q : [(Int, Int)]\n    var p : Int\n    var k : Int\n    p = primes[0]\n    q = [(p, 1)]\n    for (i = 0; i < n; i++) {\n        var min = Int.MAX_VALUE\n        k = 0\n        while (q.length) {\n            var t = q.shift()\n            var t_val = t[0]\n            var t_cnt = t[1]\n            var t_min = t_val * t_cnt\n            if (t_min < min) {\n                min = t_min\n                k = t_cnt\n            }\n        }\n        q.push((p, k + 1))\n        p = p * primes[k + 1]\n    }\n    var r = 1\n    while (q.length) {\n        var t = q.shift()\n        var t_val = t[","language":"swift"}
{"task_id":"MBSWP\/844","completion":"    var even = 0\n    var odd = 1\n    var arr = []\n    for(i = 0; i < n; i++) {\n        arr[i] = odd + even\n        if(arr[i] % 2 == 0) even++\n        else odd++\n    }\n    arr.sort()\n    if(k > 0 && k <= arr.length) {\n        return arr[k - 1]\n    } else {\n        return -1\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/845","completion":"    let digitsCount = 0\n    let nToStr = n.toString()\n    for (let digit of nToStr) {\n        digitsCount += 1\n    }\n    return digitsCount\n}","language":"swift"}
{"task_id":"MBSWP\/846","completion":"    if (arr == nil || dep == nil || n <= 0) {\n        return 0;\n    }\n\n    \/\/ create a dictionary to store the number of platforms\n    var dp : [Int] = [1]\n        for i in arr {\n            dp += 0 until i\n        }\n    \n    \/\/ loop until n\n    for i in 1 until n {\n        for j in 1 until i {\n            dp[j] = dp[j - 1]\n        }\n        dp[i] = dp[i - 1]\n    }\n    for i in 1 until n {\n        for j in 1 until i {\n            dp[j] = Math.min(dp[j], dp[j - 1] + 1)\n        }\n    }\n\n    return dp[n];\n}","language":"swift"}
{"task_id":"MBSWP\/847","completion":"    return (xs.copy)!\n}","language":"swift"}
{"task_id":"MBSWP\/848","completion":"    return 0\n}","language":"swift"}
{"task_id":"MBSWP\/849","completion":"    var s = 0\n    var p = 2\n    for i in 0..N {\n        while N % p == 0 {\n            N \/= p\n            s += p\n        }\n        p += 1\n    }\n    return s\n}","language":"swift"}
{"task_id":"MBSWP\/850","completion":"    if a + b > c and b + c > a and c + a > b {\n        return true\n    } else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/851","completion":"    var sum = 0.0\n    var upperbound = sqrt(N)\n\n    if (N == 1) {\n        Sum = 0.0\n    }\n\n    for (i = 1 ; i <= upperbound ; i++) {\n        if (N % i == 0) {\n            sum = sum + 1\/i\n        }\n    }\n    Sum = sum\n}","language":"swift"}
{"task_id":"MBSWP\/852","completion":"    result_list = []\n    for {\n        if let num = num_list.first {\n            if num >= 0 {\n                result_list.append(num)\n            }\n        }\n    }\n    return result_list\n}","language":"swift"}
{"task_id":"MBSWP\/853","completion":"    let a = 1\n    for i = 2; i <= n\/2; i++ {\n        if (n % i == 0) {\n            a = a + i\n        }\n    }\n    a = a + n\n    return a\n}","language":"swift"}
{"task_id":"MBSWP\/854","completion":"    let minHeap = []\n    for (let i = 0; i < rawheap.length; i++) {\n        minHeap.push(rawheap[i])\n    }\n    let heapSize = rawheap.length\n    for (let i = rawheap.length - 1; i >= 0; i--) {\n        let temp = minHeap[0]\n        minHeap[0] = minHeap[i]\n        minHeap[i] = temp\n        heapSize -= 1\n        siftDown(minHeap, 0, heapSize)\n    }\n    return minHeap\n}","language":"swift"}
{"task_id":"MBSWP\/855","completion":"    if ((x & 1) == 0) {\n        return true\n    } else {\n        return false\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/856","completion":"    var count : Int = 0\n    var i : Int = 0\n    var j : Int = 0\n    \n    while (i < n && j < n) {\n        if (arr[i] != 0) {\n            i += 1\n        } else if (arr[j] == 0) {\n            j += 1\n        } else {\n            var temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            count += 1\n            i += 1\n            j += 1\n        }\n    }\n    \n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/857","completion":"    var result = [] as [[String]]\n    var index = 0\n    while index < list1.length {\n        result.append(list1.map { _ -> _ }))\n        index++\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/858","completion":"    return sum(map(square, input_list.map { it.count }))\n}","language":"swift"}
{"task_id":"MBSWP\/859","completion":"    my_list.sort()\n    result = []\n    last_elem = my_list[0]\n    current_list = [last_elem]\n\n    for i in my_list[1:]:\n        if i > last_elem + 1:\n            result.append(current_list)\n            current_list = [i]\n            last_elem = i\n        else:\n            current_list.append(i)\n            last_elem = i\n\n    result.append(current_list)\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/860","completion":"    if let p = \/^[a-zA-Z0-9]*$\/ {\n        if let m = string.match(p) {\n            return \"Accept\"\n        } else {\n            return \"Discard\"\n        }\n    } else {\n        return \"Discard\"\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/861","completion":"    var result = []\n    texts.forEach {\n        var sorted = str.split(\"\").sorted().join(\"\")\n        if (sorted == \"$str\") {\n            result.append(\"$str\")\n        }\n        texts.append(sorted)\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/862","completion":"    words := text.split(\" \").map(_.toLower).collect()\n    countByWord := Hash.map(words)\n    sortedCount := Array.sortBy(countByWord, _.count)\n    return Array.map(_.take(n), sortedCount.map(x => [x, countByWord[x]]))\n}","language":"swift"}
{"task_id":"MBSWP\/863","completion":"    let dp = Array<Int>(n)\n    dp[0] = 1\n\n    let max = 1\n    let i = 0\n    while (i < n - 1) {\n        if (arr[i] == arr[i + 1] - 1) {\n            dp[i + 1] = dp[i] + 1\n            max = max > dp[i + 1] ? max : dp[i + 1]\n        } else if (arr[i] != arr[i + 1] - 1) {\n            dp[i + 1] = 1\n        }\n\n        i = i + 1\n    }\n\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/864","completion":"    return texts.filter(text => {\n        var reverse = text.split(\"\").reverse().join(\"\")\n        return text == reverse\n    })\n}","language":"swift"}
{"task_id":"MBSWP\/865","completion":"    return nums.map { n }\n}","language":"swift"}
{"task_id":"MBSWP\/866","completion":"    return monthname2.days == 31\n}","language":"swift"}
{"task_id":"MBSWP\/867","completion":"    if let sum = 0 in\n        let i = 0\n        while i < n do\n            sum += arr[i]\n            i += 1\n        if sum % 2 == 0\n            return sum\n        else\n            return n\n    else\n        return n\n}","language":"swift"}
{"task_id":"MBSWP\/868","completion":"    if let b = a.trimEnd(1).lastIndexOf(\" \") {\n        return b + 1\n    }\n    else {\n        return 0\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/869","completion":"    return [[Int]]\n}","language":"swift"}
{"task_id":"MBSWP\/870","completion":"  return nums.reduce((acc, num) => num >= 0 ? acc + num : acc, 0)\n}","language":"swift"}
{"task_id":"MBSWP\/871","completion":"    let n = 0\n    let m = 0\n    if let len1 = string1.length for i in len1 {\n        n += 1\n    }\n    if let len2 = string2.length for i in len2 {\n        m += 1\n    }\n    if n != m: return false\n    let i = 0\n    let j = 0\n    while i < n and j < m {\n        if string1[i] != string2[j]:\n            return false\n        i += 1\n        j += 1\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/872","completion":"    var count = 0\n    for i := 0; i < list1.count; i++ {\n        for j := 0; j < list2.count; j++ {\n            if (list1[i] == list2[j]) {\n                count++\n            }\n        }\n    }\n    return count == list2.count\n}","language":"swift"}
{"task_id":"MBSWP\/873","completion":"    if let f = fibonacci(n - 1) + fibonacci(n - 2) then {\n        f\n    } else {\n        f\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/874","completion":"    return true;\n}","language":"swift"}
{"task_id":"MBSWP\/875","completion":"    n := len(test_list)\n\n    difference := 0\n    for i := 0; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            difference := min(difference, differenceOfTwoTuples(test_list[i], test_list[j]))\n        }\n    }\n    return difference\n}","language":"swift"}
{"task_id":"MBSWP\/876","completion":"    let answer = (x * y) \/ gcd(x, y)\n    println(\"x: $x, y: $y, ans: $answer\")\n    return answer\n}","language":"swift"}
{"task_id":"MBSWP\/877","completion":"    var sorted = \"\"\n    for (var i = 0; i < str.length(); i++) {\n        var index = sorted.indexOf(str[i])\n        if (index < 0) {\n            sorted += str[i]\n        } else {\n            sorted = sorted.substr(index + 1, sorted.length - index) + str[i]\n        }\n    }\n    return sorted\n}","language":"swift"}
{"task_id":"MBSWP\/878","completion":"    for (let i = 0; i < K.length; i++) {\n        let contains = false\n        for (let j = 0; j < test_tuple.length; j++) {\n            if (test_tuple[j] == K[i]) {\n                contains = true\n                break\n            }\n        }\n        if (contains == false) {\n            return false\n        }\n    }\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/879","completion":"    return \"Not matched!\"\n}","language":"swift"}
{"task_id":"MBSWP\/880","completion":"    guard let x = (-b + sqrt(b * b - 4 * a * c)) \/ (2 * a) else {\n        return \"No solutions\"\n    }\n    guard let y = (-b - sqrt(b * b - 4 * a * c)) \/ (2 * a) else {\n        return \"No solutions\"\n    }\n    return \"2 solutions\" if x == y else \"1 solution\"\n}","language":"swift"}
{"task_id":"MBSWP\/881","completion":"    if list1.count == 0 {\n        return 0\n    }\n    if list1.count == 1 {\n        return list1[0]\n    }\n    var evenNum = 0\n    var oddNum = 0\n    for (var i = 0; i < list1.count; i++) {\n        if (i % 2 == 0) {\n            evenNum += list1[i]\n        } else {\n            oddNum += list1[i]\n        }\n    }\n    return evenNum + oddNum\n}","language":"swift"}
{"task_id":"MBSWP\/882","completion":"    return 2*b + 2*h;\n}","language":"swift"}
{"task_id":"MBSWP\/883","completion":"    let ans = []\n    \n    for (let i : nums) {\n        if ((i % m == 0) && (i % n == 0)) {\n            ans.push(i)\n        }\n    }\n    \n    return ans\n}","language":"swift"}
{"task_id":"MBSWP\/884","completion":"    let set = \"0\"..n.to_s(l)\n    return set.to_s(r - l + 1).count(\"1\") == r - l + 1\n}","language":"swift"}
{"task_id":"MBSWP\/885","completion":"    var dict1 : Dict<Char, Char> = {}, dict2 : Dict<Char, Char> = {}\n    for(i, c1 in enumerate(str1)) {\n        dict1[c1] = str2[i]\n    }\n\n    for(i, c2 in enumerate(str2)) {\n        dict2[str2[i]] = c2\n    }\n\n    for(i, c1 in enumerate(str1)) {\n        if(dict1[c1] != dict2[c1]) {\n            return false\n        }\n    }\n\n    return true\n}","language":"swift"}
{"task_id":"MBSWP\/886","completion":"    let sum = 0\n\n    for num in numbers {\n        sum += num\n    }\n\n    let length = numbers.count\n\n    return sum \/ length\n}","language":"swift"}
{"task_id":"MBSWP\/887","completion":"    if (n == 0) return false\n    else return (n & 1) != 0\n}","language":"swift"}
{"task_id":"MBSWP\/888","completion":"    var result = 0 {\n        var temp = 0\n        for i in test_tup1 {\n            temp += i[0]\n        }\n        result = temp\n    }\n    for j in test_tup2 {\n        result -= j[0]\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/889","completion":"    var reversed = [[Int]](0)\n    for list in lists {\n        reversed.append(reverseList(list))\n    }\n    return reversed\n}","language":"swift"}
{"task_id":"MBSWP\/890","completion":"    var n1 = arr1.count(n)\n    var n2 = arr2.count(n)\n    var result = n1 < n2 ? n1 : n2\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/891","completion":"    return abs(A) >= abs(B)\n}","language":"swift"}
{"task_id":"MBSWP\/892","completion":"    return text.replace(\/ {2,}\/g, \" \")\n}","language":"swift"}
{"task_id":"MBSWP\/893","completion":"    let lastIndex = 0\n    let lastElement = nil\n    for let i = 0; i < lst.count; i++ {\n        let current = lst[i]\n        lastIndex = i + 1\n        lastElement = current\n    }\n    let result = [lastElement]\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/894","completion":"    if let split_str = test_str.split(\",\") match split_str {\n        let float_numbers = split_str.map(_.toFloat)\n        let tuple_of_float = float_numbers.map(_.tuple)\n        tuple_of_float.take(1)\n    }\n    else {\n        nil\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/895","completion":"    if let n = A.count {\n        n > 0\n    } {\n        let left = 0\n        let right = A.last + 1\n        let currentMax = A[0]\n\n        for each right {\n            let sum = A[left] + A[right]\n            if sum > currentMax {\n                currentMax = sum\n            }\n            left += 1\n        }\n        return currentMax\n    }\n    return 0\n}","language":"swift"}
{"task_id":"MBSWP\/896","completion":"    return [[Int]] {\n        let l = tuples.map { (x,y) -> [x,y] }\n        l.sort { (x,y) -> if (x[1] > y[1]) x else y }.map { (x, y) -> if (x != y) [x, y] }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/897","completion":"    for (let i = 0; i < sentence.count; i++) {\n        let w = sentence.substring(i, i + 1)\n        if (w === word) {\n            return true\n        }\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/898","completion":"    let result = []\n    let counter = 0\n\n    for i in numbers {\n        if counter < n {\n            counter++\n            result.append(i)\n        } else {\n            break\n        }\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/899","completion":"    if (n < 0 || !arr.length) {\n        return false;\n    }\n    if (n == 0) {\n        return true;\n    }\n    var mid = arr.length \/ 2;\n    var left = arr.slice(0, mid);\n    var right = arr.slice(mid);\n    return check(left, n-mid) || check(right, n-mid);\n}","language":"swift"}
{"task_id":"MBSWP\/900","completion":"    match {\n        case \"^\\d{1,3}-\\d{5}$\" -> True\n        case \"^\\d{1,3}-\\d{5}$\" -> False\n        case \"^\\d{1,3}$\" -> False\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/901","completion":"    var prod = 1\n    var i : Int\n    for i = 2; i <= n; i++ {\n        prod *= i\n    }\n    return prod\n}","language":"swift"}
{"task_id":"MBSWP\/902","completion":"    var res = []\n    for (i in d1) {\n        if (i in d2) {\n            res.append(d1[i] + d2[i])\n        }\n        else {\n            res.append(d1[i])\n        }\n    }\n    for (i in d2) {\n        if (i not in d1) {\n            res.append(d2[i])\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/903","completion":"    let arr = Array(n).fill(0)\n    let count = 0\n    for i in arr {\n        if (i & (1 << (n - 1))) {\n            count += 1\n        }\n    }\n    return count\n}","language":"swift"}
{"task_id":"MBSWP\/904","completion":"    if x == 0 || x == -0 || isNaN(x) {\n        return false\n    }\n    if x % 2 == 0 {\n        return true\n    }\n    return false\n}","language":"swift"}
{"task_id":"MBSWP\/905","completion":"    return n!.times(.5).sum()\n}","language":"swift"}
{"task_id":"MBSWP\/906","completion":"    let [year, month, date] in\n    let pattern = '(\\d{4})-(\\d{2})-(\\d{2})'\n    let date = url match pattern with { _, _, _ }\n\n    return [[date[1], date[2], date[3]]]\n}","language":"swift"}
{"task_id":"MBSWP\/907","completion":"    var array : [Int] = []\n    for (i in 1..n) {\n        var lucky = random(1, n)\n        if (!array.contains(lucky)) {\n            array.append(lucky)\n        } else {\n            continue\n        }\n    }\n    return array\n}","language":"swift"}
{"task_id":"MBSWP\/908","completion":"    for (var i = 0; i < n; i++) {\n        if (arr[i] == i) return i;\n    }\n    return -1;\n}","language":"swift"}
{"task_id":"MBSWP\/909","completion":"    if num == 0:\n        return 0;\n\n    var count = 0;\n    var num_str = num.toString(2);\n\n    for (var i = 0; i < num_str.length; i++) {\n        if (num_str[i] == num_str[num_str.length - 1 - i]) {\n            count++;\n        } else {\n            break;\n        }\n    }\n    if (count == num_str.length)\n        return -1;\n\n    var prev_num = 0;\n\n    for (var i = 0; i < num_str.length; i++) {\n        if (num_str[i] == num_str[num_str.length - 1 - i]) {\n            prev_num += Math.pow(2, num_str.length - 1 - i);\n        }\n    }\n    if (prev_num == num)\n        return num","language":"swift"}
{"task_id":"MBSWP\/910","completion":"    \/\/ your code here\n}","language":"swift"}
{"task_id":"MBSWP\/911","completion":"    var heap = new MinHeap(nums)\n    var result = 0\n    var tempMax, tempMin\n\n    while (heap.size() >= 3) {\n        tempMax = heap.popMax()\n        tempMin = heap.popMin()\n        result = Math.max(result, tempMax * tempMin)\n        heap.push(tempMax * tempMin)\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/912","completion":"    return (int)((log(n)\/log(m)) + 1)\n}","language":"swift"}
{"task_id":"MBSWP\/913","completion":"    if (string.lastIndexOf(\"7\") != -1) {\n        return true;\n    }\n    return false;\n}","language":"swift"}
{"task_id":"MBSWP\/914","completion":"    if(s.length % 2 == 0) {\n        for(i in s.all) {\n            if(s.all[i] == s.all[i+1]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}","language":"swift"}
{"task_id":"MBSWP\/915","completion":"    \/\/ TODO\n}","language":"swift"}
{"task_id":"MBSWP\/916","completion":"    var result : [Int]\n\n    if (sum < 0) {\n        return result\n    }\n\n    for (let i = 0; i < arr_size - 2; i++) {\n        for (let j = i + 1; j < arr_size - 1; j++) {\n            for (let k = j + 1; k < arr_size; k++) {\n                if (A[i] + A[j] + A[k] == sum) {\n                    result = [A[i], A[j], A[k]]\n                    return result\n                }\n            }\n        }\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/917","completion":"    \/\/ TODO: write your code here\n\n    var countUpper = 0\n    var countLower = 0\n\n    var result = \"\"\n\n    for (var i = 0; i < text.length; i++) {\n        if (text[i] == text[i].toUpperCase()) {\n            countUpper += 1\n            result = result + \"Found a match!\"\n        } else if (text[i] == text[i].toLowerCase()) {\n            countLower += 1\n        } else {\n            result = result + \"Not matched!\"\n        }\n    }\n\n    if (countLower == 1) {\n        result = result + \"\\n\" + countLower + \" lower case character was found.\"\n    }\n    if (countUpper == 1) {\n        result = result + \"\\n\" + countUpper + \" upper case character was found.\"\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/918","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/919","completion":"    var result = 0;\n\n    for (var i = 0; i < items.count; i++) {\n        result += items[i] as? Int\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/920","completion":"    var new_list = []\n    for item in test_list {\n        if item.count == 1 {\n            new_list.append(item)\n        }\n    }\n    return new_list\n}","language":"swift"}
{"task_id":"MBSWP\/921","completion":"    \/\/ Your code goes here\n}","language":"swift"}
{"task_id":"MBSWP\/922","completion":"    var result = [0, 0];\n    for _, e in arr {\n        if e * result[0] > e * result[1] {\n            result[0] = e;\n        } else if e * result[0] < e * result[1] {\n            result[1] = e;\n        }\n    }\n    return result;\n}","language":"swift"}
{"task_id":"MBSWP\/923","completion":"    X += '#'\n    Y += '#'\n    var i = 0, j = 0\n    var L1 = X.length, L2 = Y.length\n    var L = Math.min(L1, L2)\n\n    while (i < L1 && j < L2) {\n        if (X[i] == Y[j]) {\n            i += 1\n            j += 1\n        } else if (X[i] < Y[j]) i += 1\n        else j += 1\n    }\n\n    return m + n - (i - j)\n\n}","language":"swift"}
{"task_id":"MBSWP\/924","completion":"    if (x > y) return x;\n    return y;\n}","language":"swift"}
{"task_id":"MBSWP\/925","completion":"    return nums.reduce { _ * _.to_i }\n}","language":"swift"}
{"task_id":"MBSWP\/926","completion":"    var rec = [1, 1]\n    var res = 0\n    for _ in 1..m {\n        var last = rec.slice(-1)\n        rec = rec.concat(last.map(x -> x + x))\n    }\n    for _ in 1..n {\n        res = rec[n]\n        rec = rec.slice(1)\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/928","completion":"    var date = dt.split(\"-\")\n    var dd = date[2]\n    var mm = date[1]\n    var yyyy = date[0]\n    date[0] = yyyy\n    date[1] = mm\n    date[2] = dd\n    date.join(\"-\")\n}","language":"swift"}
{"task_id":"MBSWP\/929","completion":"    counter := 0\n    for i in tuplex {\n        if tuplex[i] == value {\n            counter += 1\n        }\n    }\n    return counter\n}","language":"swift"}
{"task_id":"MBSWP\/930","completion":"    return \"Not matched!\"\n}","language":"swift"}
{"task_id":"MBSWP\/931","completion":"        var result : Int = 0\n        var n : Int = 1\n        while (n <= number) {\n            result = result + 3 * n ** 2 + 3 * n + 1\n            n = n + 1\n        }\n        return result\n}","language":"swift"}
{"task_id":"MBSWP\/932","completion":"    var uniqueList = l.filter(x => !l.index(x) || !x.includes(l[l.index(x)]))\n    return uniqueList\n}","language":"swift"}
{"task_id":"MBSWP\/933","completion":"    return \" \".join(\n            text.replace(\/([A-Z])\/g, \"_$1\")\n                    .replace(\/^_\/, \"\")\n                    .split(\"_\"))\n}","language":"swift"}
{"task_id":"MBSWP\/934","completion":"    var delannoy : Int\n    for (var i : Int = 1; i <= n; i++) {\n        var sum : Int = 0\n        for (var j : Int = 0; j < m; j++) {\n            if (j == 0 || j == m - 1 || j == i - 1 || j == i) {\n                sum += j + 1\n            } else {\n                sum += j - 1\n            }\n        }\n        delannoy = sum\n    }\n    return delannoy\n}","language":"swift"}
{"task_id":"MBSWP\/935","completion":"    var sum = 0\n    var i = 1;\n\n    for (i = 1; i <= number; i++) {\n        sum = sum + (i * (i + 1) * (i + 2)) \/ 6\n    }\n\n    return sum\n}","language":"swift"}
{"task_id":"MBSWP\/936","completion":"    if ord_list.len() != 0 && ord_list.len() == test_list.len() {\n        for (int i = 0; i < ord_list.len(); i++) {\n            for (int j = 0; j < test_list.len(); j++) {\n                if (test_list[j][0] < ord_list[i]) {\n                    test_list[j][0] = ord_list[i]\n                }\n            }\n        }\n    }\n    return test_list\n}","language":"swift"}
{"task_id":"MBSWP\/937","completion":"    var dict = {}\n    var maxCount = 0\n    var maxChar = \"\"\n    for (var i = 0; i < str1.length; i++) {\n        if (dict[str1[i]]) {\n            dict[str1[i]]++\n        } else {\n            dict[str1[i]] = 1\n        }\n    }\n    for (var key in dict) {\n        if (dict[key] > maxCount) {\n            maxCount = dict[key]\n            maxChar = key\n        }\n    }\n    return maxChar\n}","language":"swift"}
{"task_id":"MBSWP\/938","completion":"    \/\/ Your code here\n}","language":"swift"}
{"task_id":"MBSWP\/939","completion":"    \/\/ TODO\n}","language":"swift"}
{"task_id":"MBSWP\/940","completion":"    \/\/ Your code here.\n}","language":"swift"}
{"task_id":"MBSWP\/941","completion":"    if let rec(count, num) = 0 in\n        for elem in num\n            count += rec(count, elem) if isTuple(elem) else 1\n    {\n        return count\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/942","completion":"    for(index in test_tup) {\n        if(check_list.contains(test_tup[index]))\n            return true;\n    }\n    return false;\n}","language":"swift"}
{"task_id":"MBSWP\/943","completion":"    return [1, 2, 3].to_array().concat(2, 4, 5, 6).to_array().concat(3).to_array()\n}","language":"swift"}
{"task_id":"MBSWP\/944","completion":"    var position : Int\n    for _, position <= text.length {\n        println(text.substring(position))\n    }\n    return position\n}","language":"swift"}
{"task_id":"MBSWP\/945","completion":"    return Set(t)\n}","language":"swift"}
{"task_id":"MBSWP\/946","completion":"    if let freqs = new Map<AnyHashable, Int>()\n    for i in s {\n        if let freq = freqs.get(i) {\n            freqs[i] += 1\n        } else {\n            freqs[i] = 1\n        }\n    }\n    let res = [[String.empty, 0]]\n    for key, value in freqs.entries() {\n        if value > res[0][1] {\n            res = [[key, value]]\n        } else if value == res[0][1] {\n            res.push([key, value])\n        }\n    }\n    return res.sort(comp { a, b -> a[1] < b[1] })\n}","language":"swift"}
{"task_id":"MBSWP\/947","completion":"    if let vLen = maxLen(list1) {\n        for i in 1..vLen {\n            let v = \"\"\n            for j in 1..i {\n                v += list1[j]\n            }\n            if v == v.reverse() {\n                return i\n            }\n        }\n    }\n    return 0\n}","language":"swift"}
{"task_id":"MBSWP\/948","completion":"    let item = 0;\n    item = tup1[index];\n    return item;\n}","language":"swift"}
{"task_id":"MBSWP\/949","completion":"    var digitDict : [Int:Int] = { [0] : 1 }\n    var result : [String] = []\n    var counter : Int = 0\n\n    test_list.foreach { |l|\n        counter += l.count.to_i\n        digitDict[counter].append(l)\n    }\n\n    for key in digitDict {\n        result << digitDict[key].sort { |x| x.join(\",\") }\n    }\n\n    result.join(\",\")\n\n}","language":"swift"}
{"task_id":"MBSWP\/950","completion":"    var chineseZodiac = [\"Capricorn\", \"Aquarius\", \"Pisces\", \"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\", \"Libra\", \"Scorpio\", \"Sagittarius\"]\n\n    return chineseZodiac[year % 12]\n}","language":"swift"}
{"task_id":"MBSWP\/951","completion":"    var best_score_list1 = 0;\n    var best_score_list2 = 0;\n    var best_score_list1_idx = 0;\n    var best_score_list2_idx = 0;\n\n    for (var i = 0; i < test_list1.size; i++) {\n        for (var j = 0; j < test_list2.size; j++) {\n            var score_list1 = 0;\n            var score_list2 = 0;\n            for (var k = 0; k < test_list1[i].size; k++) {\n                if (test_list1[i][k] == test_list2[j][k]) {\n                    score_list1 = score_list1 + 1;\n                }\n            }\n            for (var k = 0; k < test_list1[i].size; k++) {\n                if (test_list1[i][","language":"swift"}
{"task_id":"MBSWP\/952","completion":"    let c = 1\n    let m = 1\n    while (c < n) {\n        m = (m * r) % p\n        c = c + 1\n    }\n    return m\n}","language":"swift"}
{"task_id":"MBSWP\/953","completion":"    arr = []\n    result = 0\n\n    for i in ar {\n        arr.append(i)\n    }\n\n    if (arr.count == n) {\n        result = 1\n    } else {\n        result = 1 + subset(arr, n)\n    }\n\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/954","completion":"    var profit = actual_cost - sale_amount;\n    if(profit > 0){\n        return profit;\n    }else{\n        return \"none\";\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/955","completion":"    var sum = 0\n    for(i in 1 until n) {\n        sum += i\n    }\n    return (sum > n)\n}","language":"swift"}
{"task_id":"MBSWP\/956","completion":"    if let result = [] in\n        text.split(\/(?=[A-Z])\/)\n    then\n        result.append(result.join(\"\"))\n        result\n    end\n}","language":"swift"}
{"task_id":"MBSWP\/957","completion":"    if let pos = n.bitCount() - 1 in\n        pos\n    else\n        -1\n}","language":"swift"}
{"task_id":"MBSWP\/958","completion":"    \/\/ ...\n}","language":"swift"}
{"task_id":"MBSWP\/959","completion":"    sum = 0\n    for _, i in lst.enumerate() {\n        sum += i.toDouble()\n    }\n    return sum.div(lst.count)\n}","language":"swift"}
{"task_id":"MBSWP\/960","completion":"    var k : Int = 2 * n - 1\n    if n < 4 {\n        return 1\n    }\n    if n == 4 {\n        return 2\n    }\n    if n == 5 {\n        return 4\n    }\n    return (k * k) \/ 2\n}","language":"swift"}
{"task_id":"MBSWP\/961","completion":"    romanMap = [\n        {s: \"I\", value: 1},\n        {s: \"V\", value: 5},\n        {s: \"X\", value: 10},\n        {s: \"L\", value: 50},\n        {s: \"C\", value: 100},\n        {s: \"D\", value: 500},\n        {s: \"M\", value: 1000}\n    ];\n    num = 0\n    for (let item in romanMap) {\n        let char = romanMap[item].s\n        let value = romanMap[item].value\n        if (s.indexOf(char) == 0) {\n            num += value\n            s = s.replace(char, \"\")\n        } else if (s.indexOf(char) > 0) {\n            num += value - value * (s.indexOf(char) - 1)\n            s = s.replace(char","language":"swift"}
{"task_id":"MBSWP\/962","completion":"    var total = 0\n    for (i in 0..r) {\n        if (i % 2 == 0) {\n            total += i\n        }\n    }\n    return total\n}","language":"swift"}
{"task_id":"MBSWP\/963","completion":"    let result = [\"\", -1]\n    if (x * y - z == 0) {\n        result = [\"one solution\", 0]\n    } else if (z != 0) {\n        let temp = x * y - z\n        if (temp > 0) {\n            result = [\"two solutions\", temp]\n        } else {\n            result = [\"no real solution\", -131]\n        }\n    } else {\n        result = [\"no real solution\", -131]\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/964","completion":"    if let len = s.length {\n        return len % 2 == 0\n    }\n    return False\n}","language":"swift"}
{"task_id":"MBSWP\/965","completion":"    if (text == \"\") return \"\"\n    let res = \"\"\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] == text[i].toUpperCase()) {\n            if (i != 0) {\n                let upperChar = text[i - 1].toLowerCase()\n                if (upperChar == upperChar.toUpperCase()) {\n                    res += \"_\" + text[i].toLowerCase()\n                } else {\n                    res += text[i]\n                }\n            } else {\n                res += text[i].toLowerCase()\n            }\n        } else {\n            res += text[i]\n        }\n    }\n    return res\n}","language":"swift"}
{"task_id":"MBSWP\/966","completion":"    var tuple2 = []\n    for {\n        if tuple1.count == 0 {\n            tuple2.append(tuple1.copy)\n        }\n    }\n    return tuple2\n}","language":"swift"}
{"task_id":"MBSWP\/967","completion":"    var vowels = \"aeiouAEIOU\"\n    var i : Int\n    var j : Int\n    var len : Int\n    var result : String\n    len = string.length\n    for(i = 0; i < len; i++) {\n        for(j = 0; j < len; j++) {\n            if (i != j && string[i] == vowels[j]) {\n                break\n            }\n            if(j == len - 1) {\n                result = \"accepted\"\n            }\n        }\n    }\n    return result\n}","language":"swift"}
{"task_id":"MBSWP\/968","completion":"    if (N < 0) {\n        return 0\n    }\n    let A = floor(A\/2) * 2\n    let B = floor(B\/2) * 2\n    if (A == N) {\n        return A\n    } else if (B == N) {\n        return B\n    } else {\n        if (A > N) {\n            return N\n        } else if (B > N) {\n            return N\n        } else {\n            return floorMax(A, B, N)\n        }\n    }\n}","language":"swift"}
{"task_id":"MBSWP\/969","completion":"    guard let l = test_list else { return nil }\n    guard let r = filter(x => x.length > 1, l) else { return nil }\n    guard let c = map(x => (x[0], x[1]), r) else { return nil }\n    guard let a = map(x => x.sort(), c) else { return nil }\n    guard let b = map(x => x.sort(), a) else { return nil }\n    guard let d = filter(x => x.length > 1, b) else { return nil }\n    guard let e = map(x => (x[0], x[1]), d) else { return nil }\n    guard let f = map(x => x.sort(), e) else { return nil }\n    guard let g = filter(x => x.length > 1, f) else { return nil }\n    guard let h = map(x => (x[","language":"swift"}
{"task_id":"MBSWP\/970","completion":"    var min = x;\n    if (x < y) {\n        min = y;\n    }\n    return min;\n}","language":"swift"}
{"task_id":"MBSWP\/971","completion":"    var max = 0\n    for i = 1 to n {\n        var sum = a * i + b * (i + 1) + c\n        max = if sum > max then sum else max\n    }\n    return max\n}","language":"swift"}
{"task_id":"MBSWP\/972","completion":"    var nested_tup = [Int]()\n    for i in 0..test_tup1.length {\n        nested_tup = append(nested_tup, test_tup1[i])\n    }\n    for j in 0..test_tup2.length {\n        nested_tup = append(nested_tup, test_tup2[j])\n    }\n    return nested_tup\n}","language":"swift"}
{"task_id":"MBSWP\/973","completion":"    let n = s.length\n    let i = 0\n    let j = 0\n\n    while (i < d) {\n        i = i + 1\n    }\n\n    while (j < n - i) {\n        j = j + 1\n    }\n\n    let res = s[i:]\n    let sub = s.substring(0, i)\n\n    return sub + res\n}","language":"swift"}
{"task_id":"MBSWP\/974","completion":"    n := len(A)\n    sum := 0\n    def dfs(i : Int, j : Int, k : Int) {\n        sum = 0\n        if (i < n and j < n and k < n) {\n            sum = A[i][j] + min(dfs(i, j + 1, k - 1), dfs(i + 1, j, k - 1), dfs(i + 1, j + 1, k))\n        }\n        return sum\n    }\n    return dfs(0, 0, n - 1)\n}","language":"swift"}
