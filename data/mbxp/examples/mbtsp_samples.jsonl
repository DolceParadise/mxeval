{"task_id":"MBXP_TS\/1","completion":"    \/\/ Your code here\n    let dp = Array(cost.length).fill().map(() => Array(cost[0].length).fill(Infinity))\n    dp[0][0] = cost[0][0]\n    for (let i = 1; i < m; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    }\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    }\n    for (let i = 1; i < m; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n        }\n    }\n    return dp[m-1][n-1]\n","language":"typescript"}
{"task_id":"MBXP_TS\/2","completion":"    \/\/ TODO: Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/3","completion":"    \/\/ code here\n    if(n == 2) return false\n    for(let i = 2; i <= math.sqrt(n); i++){\n        if(n%i == 0){\n            return true\n        }\n    }\n    return false\n}","language":"typescript"}
{"task_id":"MBXP_TS\/4","completion":"    const result = new Heap(function(a,b){return a-b;});\n    for(let i = 0; i < n; i++){\n        result.push(nums[i]);\n    }\n    for(let i = n; i < nums.length; i++){\n        if(nums[i] > nums[0])\n            result.pop();\n        else\n            result.push(nums[i]);\n    }\n    let ret = [];\n    while(result.size() > 0){\n        ret.push(result.pop());\n    }\n    return ret;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/5","completion":"    let dp = [1, 1, 2, 4, 7, 13, 24];\n    let res = 0;\n    for (let i = 3; i < n; i++) {\n        res += dp[i];\n        dp[i] = dp[i - 3] * 2;\n        if (i >= 5) {\n            dp[i] += dp[i - 5];\n        }\n    }\n    return res + dp[n - 1];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/6","completion":"    \/\/ 1. Convert the numbers into binary string\n    const binA = a.toString(2);\n    const binB = b.toString(2);\n    \/\/ 2. Split the binary string into array of bits \n    const bitsA = binA.split('');\n    const bitsB = binB.split('');\n    \/\/ 3. Check whether the number of bits in the different bits array are not equal.\n    return bitsA.length !== bitsB.length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/7","completion":"    \/\/ TODO: implement the function\n}","language":"typescript"}
{"task_id":"MBXP_TS\/8","completion":"    let newList = []\n    for (let i = 0; i < nums.length; i++) {\n        newList.push(nums[i] * nums[i]);\n    }\n    return newList;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/9","completion":"    if (str == null || str == undefined || str.length == 0) {\n        return 0;\n    }\n    let left = 0;\n    let right = str.length - 1;\n    while (left < right) {\n        if (str[left] != str[right]) {\n            return left + 1;\n        }\n        left++;\n        right--;\n    }\n    return left + 1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/10","completion":"\tif (list1.length < n) return [];\n\telse if (n == 1) return [...list1];\n\telse return [...list1].sort((a,b)=>a-b).slice(0,n-1);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/11","completion":"    return s.replace(new RegExp(ch + \"+\", 'g'), \"\")\n}","language":"typescript"}
{"task_id":"MBXP_TS\/12","completion":"    \/\/ your code here\n    return M.sort((a,b) => {\n        return a.reduce((x,y)=>x+y,0) - b.reduce((x,y)=>x+y,0);\n    });\n}","language":"typescript"}
{"task_id":"MBXP_TS\/13","completion":"    const counts = {};\n    for (let word of words) {\n        counts[word] = (counts[word] ?? 0) + 1;\n    }\n    return Object.entries(counts).sort((a, b) => b[1] - a[1]);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/14","completion":"    \/\/ const volume = (l * b * h) \/ 3;\n    const volume = ((l * b * h) \/ 3) * ((l * b * h) \/ 3);\n    return volume;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/15","completion":"    return text.split('')\n        .filter(i => i.toLowerCase() === i )\n        .map(i => i.toUpperCase());\n}","language":"typescript"}
{"task_id":"MBXP_TS\/16","completion":"    let result = \"\";\n    const re = \/[a-z]+_[a-z]+\/g;\n\n    while ((result = re.exec(text)) !== null) {\n        console.log(\"Found a match!\");\n    }\n\n    if (!result) {\n        console.log(\"Not matched!\");\n    }\n\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/17","completion":"    return 4 * a;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/18","completion":"    let first_string = string0.split(\"\");\n    let second_string_char = second_string.split(\"\");\n    let i = 0;\n\n    first_string.forEach(char => {\n        if (second_string_char[i] === char) {\n            i++;\n        }\n    })\n\n    first_string.splice(0, i);\n    return first_string.join(\"\");\n}","language":"typescript"}
{"task_id":"MBXP_TS\/19","completion":"    \/\/ TODO: Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/20","completion":"    let num = x;\n    while (num >= 100) {\n        num -= 100;\n    }\n\n    if (num % 3 === 0 && num % 5 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/21","completion":"    if (m < 0 || n < 0) {\n        throw new Error(\"m and n must be positive\");\n    }\n    if (n === 0) {\n        throw new Error(\"n must not be zero\");\n    }\n    let res = [];\n    for (let i = 0; i < m; i++) {\n        res.push(n);\n    }\n    return res;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/22","completion":"    let i = 0\n    while (i < nums.length) {\n        let j = nums[i] - 1;\n        if (nums[i] == nums[j]) {\n            return nums[i];\n        }\n        nums[i] = nums[j]\n        i++;\n    }\n    return -1\n}","language":"typescript"}
{"task_id":"MBXP_TS\/23","completion":"    \/\/ TODO: Your code here\n    \/\/ This function takes in a list of lists as an argument.\n    \/\/ For each inner list, we find the maximum value in the array and add it to the total.\n    \/\/ If the inner array contains zeroes, then we skip the addition of the zeroes.\n    let total = 0;\n    for (let i = 0; i < list1.length; i++) {\n        let inner_total = 0;\n        for (let j = 0; j < list1[i].length; j++) {\n            let temp = list1[i][j];\n            if (temp > inner_total) {\n                inner_total = temp;\n            }\n        }\n        total += inner_total;\n    }\n    return total;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/24","completion":"    return parseInt(binary, 2);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/25","completion":"    return arr.map((value) => {\n        const times = arr.filter((num) => {\n            return num === value\n        }).length;\n        return value * times;\n    }).reduce((acc, value) => {\n        return acc + value\n    });\n}","language":"typescript"}
{"task_id":"MBXP_TS\/26","completion":"    \/\/ TODO: Your solution here\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/27","completion":"    return list.map(s => s.replace(\/\\d\/g, ''))\n}","language":"typescript"}
{"task_id":"MBXP_TS\/28","completion":"    if (n < k) {\n        return 0;\n    }\n    if (k === 0 || k === n) {\n        return 1;\n    }\n    let result = binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1);\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/29","completion":"    \/\/ let temp:number = -1;\n    \/\/ let res:number = -1;\n    \/\/ for(let i = 0; i < arr_size; i++)\n    \/\/ {\n    \/\/     if(arr[i] == temp)\n    \/\/         continue;\n    \/\/     else if(arr[i] != temp)\n    \/\/     {\n    \/\/         temp = arr[i];\n    \/\/         res = arr[i];\n    \/\/         break;\n    \/\/     }\n    \/\/ }\n    \/\/ return res;\n    let res:number = -1;\n    let count:number = 1;\n    let temp:number = -1;\n    for(let i = 0; i < arr_size; i++)\n    {\n        if(arr[i] == temp)\n            count++;\n        else if(arr[i] != temp)\n        {\n            res = temp;\n            count = ","language":"typescript"}
{"task_id":"MBXP_TS\/30","completion":"    \/\/ 1. s<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd<unk>l\ufffd\ufffd<unk>\ufffd\ufffd <unk>a<unk>\ufffd\ufffd <unk>\ufffd<unk>l\ufffdIJ<unk>\ufffd14 <unk>\ufffd\ufffd<unk>\ufffd\ufffd<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>l\ufffd\ufffd\n    let cnt = 0;\n    \/\/ 2. s<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd<unk>l\ufffd\ufffd<unk>\ufffd\ufffd <unk>\ufffd<unk>l\ufffdIJ<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>L\ufffd\ufffd <unk>l\ufffdIJ<unk>\ufffd\ufffd<unk>L\ufffd<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>L\ufffd\n    for (let i = 0; i < s.length; i++) {\n        let ch = s[i];\n        let j = i;\n        while (j < s.length) {\n            if (s[j] === ch) {\n                cnt++;\n            }\n            j++;\n        }\n    }\n    return cnt;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/31","completion":"    const arr = new Array(nums.length);\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums[i].length; j++) {\n            arr[i] = nums[i][j];\n        }\n    }\n\n    const heap = new Heap((a, b) => a - b);\n\n    for (let i = 0; i < arr.length; i++) {\n        heap.push(arr[i]);\n        if (heap.size() > k) heap.pop();\n    }\n\n    return heap.toArr();\n}","language":"typescript"}
{"task_id":"MBXP_TS\/32","completion":"    const limit = (int)Math.sqrt(n)\n    let prime = []\n    for (let i = 2; i <= limit; i++) {\n        if (n % i === 0) {\n            let j = 2\n            while (i * j <= n) {\n                if (n % i === 0) {\n                    n = n \/ i\n                } else {\n                    j++\n                }\n            }\n            prime.push(i)\n        }\n    }\n\n    if (n > 1) {\n        prime.push(n)\n    }\n\n    return math.max(prime)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/33","completion":"    let binary = '';\n    while (N > 0) {\n        binary = String(N % 2) + binary;\n        N = Math.floor(N \/ 2);\n    }\n    return binary;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/34","completion":"  let total = 0;\n  for (let i = 0; i < N; i++) {\n    total += ar[i];\n  }\n  let ans = total \/ N * (N + 1) - total;\n  return ans;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/35","completion":"  return n * (n + 1) * (2 * n + 1) \/ 6\n}","language":"typescript"}
{"task_id":"MBXP_TS\/36","completion":"    const gcd = function (a: number, b: number) : number {\n        if (b === 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    const s = gcd(p, q);\n    return (s * 10 + 1) \/ (s * 10 + N);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/37","completion":"  const sortedList = mixed_list.slice()\n  const sorted = []\n  while(sortedList.length) {\n    const item = sortedList.shift()\n    if(typeof item === 'string') {\n      sorted.unshift(item)\n    } else {\n      sorted.unshift(sortedList.shift())\n    }\n  }\n  return sorted\n}","language":"typescript"}
{"task_id":"MBXP_TS\/38","completion":"    let even = 0\n    let odd = 0\n    for (const item of list1) {\n        if (item % 2 == 0) {\n            even = even + 1\n        } else {\n            odd = odd + 1\n        }\n    }\n    return even > odd ? even : odd\n}","language":"typescript"}
{"task_id":"MBXP_TS\/39","completion":"    let map = {}\n    for (let i = 0; i < S.length; i++) {\n        if (map[S[i]]) {\n            if (map[S[i]][1] === S[i + 1])\n                return \"invalid\"\n            map[S[i]][1] = S[i + 1]\n        } else {\n            map[S[i]] = [S[i], S[i]]\n        }\n    }\n    let result = []\n    let arr = Object.values(map)\n    while (arr.length) {\n        let [x, y] = arr.shift()\n        result.push(x)\n        result.push(y)\n    }\n    return result.join('')\n}","language":"typescript"}
{"task_id":"MBXP_TS\/40","completion":"    let freqMap = new Map<number, number>();\n    for(let i = 0; i < nums.length; i++){\n        for(let j = 0; j < nums[i].length; j++){\n            let curr = nums[i][j];\n            if(freqMap.has(curr))\n                freqMap.set(curr, freqMap.get(curr) + 1);\n            else\n                freqMap.set(curr, 1);\n        }\n    }\n    return freqMap;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/41","completion":"    return nums.filter(num => num % 2 === 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/42","completion":"    const map = {}\n    let sum = 0;\n    for(let i=0; i<arr.length; i++){\n        map[arr[i]] = (map[arr[i]] || 0) + 1;\n    }\n    for(let i in map){\n        if(map[i] > 1)\n            sum += map[i];\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/43","completion":"    \/\/ TODO: Write your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/44","completion":"    if (text.length > 0) {\n        if (text.startsWith(\"python\")) {\n            return (\"Found a match!\");\n        } else {\n            return (\"Not matched!\");\n        }\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/45","completion":"    if (l.length === 0) {\n        return 1;\n    }\n    return get_gcd(l.slice(1));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/46","completion":"    const sorted = data.sort( (x,y) => x - y);\n    for(var i = 0; i < sorted.length - 1; i++){\n        if (sorted[i] == sorted[i+1]) return false;\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/47","completion":"    let remainder = A % B;\n    let lastDigit = remainder % 10;\n    return lastDigit;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/48","completion":"  return n ^ (n >> 1);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/49","completion":"    let newArr = []\n    for(let i = 0; i< nums.length;i++){\n        newArr.push(nums[i][N])\n    }\n    return newArr\n}","language":"typescript"}
{"task_id":"MBXP_TS\/50","completion":"  const min = Math.min(...input_list.map(i => i.length))\n  return input_list.filter(list => list.length == min)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/51","completion":"  return (x == y && y == z);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/52","completion":"    return 2 * (b * h);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/53","completion":"  return str.charAt(0) == str.charAt(str.length-1) ? \"Equal\" : \"Not Equal\"\n}","language":"typescript"}
{"task_id":"MBXP_TS\/54","completion":"  const result = [];\n  const count_array = new Array(100).fill(0);\n  for (const n of my_list) {\n    count_array[n] += 1;\n  }\n\n  for (let i = 0; i < count_array.length; i++) {\n    for (let j = 0; j < count_array[i]; j++) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/55","completion":"    if (r == 0) return 1\n    return (a * (1 - math.pow(r, n))) \/ (math.pow(r, n) - 1)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/56","completion":"    if (n <= 0) return false\n    if (n == 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return check(n \/ 2)\n    else return check(3 * n + 1)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/57","completion":"  if (arr.length < n) return -1;\n  let max = 0;\n  for (let i = 0; i <= arr.length - n; i++) {\n    let subMax = 0;\n    for (let j = 0; j < n; j++) {\n      subMax += arr[i + j];\n    }\n    if (max < subMax) {\n      max = subMax;\n    }\n  }\n  return max;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/58","completion":"    return ((x * y < 0) || (x * y > 0));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/59","completion":"    const octagonal = (n * (3 * n - 1)) \/ 2;\n    return octagonal;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/60","completion":"  const len = arr.length;\n  if (len < 2) {\n    return len;\n  }\n  let res = 1;\n  let tmp = 1;\n  let sum = arr[0];\n  for (let i = 1; i < len; i++) {\n    if (arr[i] === sum + n) {\n      tmp++;\n    } else {\n      tmp = 1;\n      sum = arr[i];\n    }\n    res = Math.max(res, tmp);\n  }\n  return res;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/61","completion":"    const dp = new Array(s.length + 1).fill(0);\n    dp[0] = 1;\n\n    for (let i = 1; i <= s.length; i++) {\n        let sum = 0;\n        let start = i - 1;\n\n        while (start >= 0 && sum < n) {\n            sum += s[start];\n            dp[i] += dp[start];\n            start--;\n        }\n    }\n\n    return dp[s.length];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/62","completion":"    const sorted = xs.sort(function (a, b) {\n        return a - b;\n    });\n    return sorted[0];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/63","completion":"  \/\/ your code here\n  let max_diff = -1;\n  let max_pair = null;\n  \n  for (let [pair1, pair2] of test_list) {\n    const diff = pair1 - pair2;\n    if (diff > max_diff) {\n      max_diff = diff;\n      max_pair = pair1;\n    }\n    if (diff === 0 && max_pair < pair2) {\n      max_diff = 0;\n      max_pair = pair1;\n    }\n  }\n\n  return max_diff;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/64","completion":"    return subjectmarks.sort((a,b) => (a[1] < b[1]) ? 1 : -1);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/65","completion":"  if (data_list.length == 1) {\n    if (data_list[0] instanceof Array) {\n      return recursive_list_sum(data_list[0]);\n    } else {\n      return data_list[0];\n    }\n  }\n  if (data_list.length > 1) {\n    if (data_list[0] instanceof Array) {\n      return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list.slice(1));\n    } else {\n      return data_list[0] + recursive_list_sum(data_list.slice(1));\n    }\n  }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/66","completion":"    let count = 0\n    for (i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++\n        }\n    }\n    return count\n}","language":"typescript"}
{"task_id":"MBXP_TS\/67","completion":"    if (n < 1) return 0;\n    if (n == 1) return 1;\n\n    return bell_number(n-1) + bell_number(n-2);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/68","completion":"    if (A.length <= 1)\n        return true\n    for (let i = 1; i < A.length; i++) {\n        if (A[i - 1] > A[i]) {\n            return false\n        }\n    }\n    return true\n}","language":"typescript"}
{"task_id":"MBXP_TS\/69","completion":"    \/\/ Your code here\n    if (s.length === 0) {\n        return true;\n    }\n    if (s.length > l.length) {\n        return false;\n    }\n    return s.every((e, i) => l[i] === e);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/70","completion":"    if (Input.length == 0) return 'No tuple';\n    if (Input.length < k) return 'All tuples have same length';\n    let total = 0;\n    for (let i = 0; i < Input.length - k; i++) {\n        let sum = 0;\n        for (let j = i; j < i + k; j++) {\n            sum += Input[j][1]\n        }\n        if (sum != k) return 'All tuples have same length'\n        total++\n    }\n    return 'All tuples do not have same length'\n}","language":"typescript"}
{"task_id":"MBXP_TS\/71","completion":"  if (nums.length < 2) {\n    return nums\n  }\n\n  let gap = 1\n  while (gap < nums.length) {\n    gap = gap * 3 + 1\n  }\n\n  while (gap >= 1) {\n    for (let i = gap; i < nums.length; i++) {\n      for (let j = i; j > 0; j -= gap) {\n        if (nums[j - gap] > nums[j]) {\n          let t = nums[j - gap]\n          nums[j - gap] = nums[j]\n          nums[j] = t\n        } else {\n          break\n        }\n      }\n    }\n\n    gap = Math.floor(gap \/ 3)\n  }\n\n  return nums\n}","language":"typescript"}
{"task_id":"MBXP_TS\/72","completion":"    \/\/ TODO: your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/73","completion":"    const pattern = \/[.,;:!?]\/g;\n    return text.split(pattern).filter(element => element != '');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/74","completion":"    \/\/ check if input is empty or undefined\n    if (!colors || !patterns) return false\n\n    \/\/ get size of input arrays\n    const { length:size } = colors\n    const { length:patternSize } = patterns\n    \n    \/\/ check if input arrays are equal\n    if (size !== patternSize) return false\n    \n    \/\/ loop through colors and check each index for patterns array\n    for (let i = 0; i < size; i++) {\n        if (colors[i] !== patterns[i]) {\n            return false\n        }\n    }\n\n    return true\n}","language":"typescript"}
{"task_id":"MBXP_TS\/75","completion":"    let result = [];\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            let tuple = [];\n            for (let k = 0; k < test_list[i].length; k++) {\n                tuple.push(test_list[i][k] % K === 0 && test_list[j][k] % K === 0);\n            }\n            if (tuple.every(x => x)) {\n                result.push([...test_list[i], ...test_list[j]]);\n            }\n        }\n    }\n    return result.length === 0 ? \"There is no such tuple\" : \"[\" + result.map(x => x.join(', ')).join(\"], [\") + \"]\";\n}","language":"typescript"}
{"task_id":"MBXP_TS\/76","completion":"    let squares: number = 0;\n    for (let x = 0; x < m; x++) {\n        for (let y = 0; y < n; y++) {\n            if (x === 0 || x === m - 1 || y === 0 || y === n - 1) {\n                squares++;\n            } else {\n                squares += (x - 1) + (y - 1);\n            }\n        }\n    }\n    return squares;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/77","completion":"    let sumEven = 0;\n    let sumOdd = 0;\n    for (let i = 0; i < n.toString().length; i++) {\n        if (n.toString()[i] % 2 == 0)\n            sumEven += n.toString()[i]\n        else\n            sumOdd += n.toString()[i]\n    }\n    return sumEven == sumOdd\n}","language":"typescript"}
{"task_id":"MBXP_TS\/78","completion":"    let count = 0;\n    let mask = 1;\n    while(mask <= n) {\n        if((n & mask) != 0) count++;\n        mask = mask << 1;\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/79","completion":"    if (s.length % 2 === 0) {\n        return true\n    } else {\n        return false\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/80","completion":"    let num = 0\n    let m = [0, 1, 2, 4]\n    let n = [1, 5, 9, 13]\n    let m_n = [0, 3, 4, 6]\n    let m_n_n = [0, 6, 8, 12]\n    let n_n = [1, 7, 10, 14]\n    let m_n_n_n = [0, 9, 12, 15]\n    let c = [1, 1, 1, 1]\n    let i = 0\n    let x = 0\n    while (i < n) {\n        x = m_n[i] * n_n[i] * m_n_n_n[i] * n_n[i]\n        c[i] = ((c[i] + x) % 1000) \/ 1000\n        i++\n    }","language":"typescript"}
{"task_id":"MBXP_TS\/81","completion":"    return test_tup1.map((e, i) => [e, test_tup2[i]]);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/82","completion":"    return math.pow(4 \/ 3, 3) * math.pow(r, 3) \/ math.sqrt(3);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/83","completion":"    if (strr.length == 1) return strr;\n    return strr[0] + get_Char(strr.slice(1));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/84","completion":"    return 1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/85","completion":"  return math.pi * r * r\n}","language":"typescript"}
{"task_id":"MBXP_TS\/86","completion":"    const hexagonal_root = (x: number) => Math.pow(x, 0.5) + 1\n    return 3 * (hexagonal_root(2) - 1) - 3 * (n - 1) - 2 * (hexagonal_root(2) - 1)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/87","completion":"\tconst merge_three_maps = (dict1: Map<string, string>, dict2: Map<string, string>, dict3: Map<string, string>) : Map<string, string>  => {\n\t\tconst merged_map = new Map();\n\n\t\tdict1.forEach((value, key) => merged_map.set(key, value));\n\t\tdict2.forEach((value, key) => merged_map.set(key, value));\n\t\tdict3.forEach((value, key) => merged_map.set(key, value));\n\t\t\n\t\treturn merged_map;\n\t};\n\n\treturn merge_three_maps(dict1, dict2, dict3);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/88","completion":"    const freq = new Map()\n    for(const x of list1) {\n        if (freq.has(x)) {\n            freq.set(x, freq.get(x)+1)\n        } else {\n            freq.set(x, 1)\n        }\n    }\n    return freq\n}","language":"typescript"}
{"task_id":"MBXP_TS\/89","completion":"    let min = 1;\n    let max = 10;\n    let mid = Math.round((min + max) \/ 2);\n    while (min < max) {\n        if (min === max) {\n            return min;\n        }\n        if (mid > N) {\n            max = mid;\n        } else if (mid < N) {\n            min = mid;\n        }\n        mid = Math.round((min + max) \/ 2);\n    }\n    return mid;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/90","completion":"    var list = list1.map(String)\n    var longestWord = \"\"\n    var longestWordLength = 0\n    var longestWordPosition = []\n    for(var i = 0; i<list.length; i++){\n        if(list[i].length > longestWordLength){\n            longestWord = list[i]\n            longestWordLength = list[i].length\n            longestWordPosition.push(i)\n        }\n    }\n    return longestWordPosition\n}","language":"typescript"}
{"task_id":"MBXP_TS\/91","completion":"    let arr1 = [];\n    for (let i=0; i<str1.length; i++) {\n        arr1[i] = str1[i].toLowerCase();\n    }\n    if (str1.length > 0) {\n        for (let j=0; j<arr1.length; j++) {\n            if (arr1[j].indexOf(sub_str.toLowerCase()) > 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/92","completion":"    \/\/ convert str to number\n    const number = parseInt(n);\n    \/\/ if number is equal to sum of digits\n    if (number === number * ((number + '').length - 1)) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/93","completion":"    return a ** b;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/94","completion":"    \/\/ TODO: answer here\n    let list = test_list.flat(Infinity);\n    let min = Math.min(...list);\n    for (let i=0;i<list.length;i++){\n        if(list[i]==min){\n            return test_list[i][0];\n        }\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/95","completion":"    if(lst === null) return 0;\n    const n = lst.length;\n    let min = lst[0].length;\n    for(let i=1;i<n;i++){\n        if(lst[i].length < min){\n            min = lst[i].length;\n        }\n    }\n    return min;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/96","completion":"    const result = [1];\n    for (let i = 2; i < n; i++) {\n        if (n % i == 0) {\n            result.push(i);\n        }\n    }\n    return result.length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/97","completion":"    const result = new Map();\n\n    for (let list of list1) {\n        for (let number of list) {\n            if (!result.has(number)) {\n                result.set(number, 1);\n            } else {\n                result.set(number, result.get(number) + 1);\n            }\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/98","completion":"    const len = numbers.length;\n    let result = 0;\n    for (let i = 0; i < len; i++) {\n        result += numbers[i];\n    }\n    return result \/ len;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/99","completion":"    const bin = {\n        0: '',\n        1: '1',\n        2: '10',\n        3: '11',\n        4: '100',\n        5: '101',\n        6: '110',\n        7: '111',\n        8: '1000',\n        9: '1001',\n        10: '1010',\n        11: '1011',\n        12: '1100',\n        13: '1101',\n        14: '1110',\n        15: '1111',\n        16: '10000',\n        17: '10001',\n        18: '10010',\n        19: '10011',\n        20: '10100',\n        21: '10101',\n        22: '10110',\n        23: '10111',\n        24: '11000',\n        25: '11001',\n        26","language":"typescript"}
{"task_id":"MBXP_TS\/100","completion":"    const reversed = num.toString().split('').reverse().join('');\n    let { length } = reversed;\n    for (let i = 0; i < length; i++) {\n        if (reversed.substring(i) === reversed.substring(0, length - i)) {\n            return Number(reversed.substring(0, i)) + 1;\n        }\n    }\n    return Number(reversed.substring(0, length - 1)) + 1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/101","completion":"    return arr[k-1]\n}","language":"typescript"}
{"task_id":"MBXP_TS\/102","completion":"  return word.replace(word[0], word[0].toUpperCase());\n}","language":"typescript"}
{"task_id":"MBXP_TS\/103","completion":"    const adj = (m - 1) \/ 2 \/\/ 0 -> 1\n    const sum = 1 + adj\n    return sum * (2 * m + 1) - 2 * (n - 1) + 1\n}","language":"typescript"}
{"task_id":"MBXP_TS\/104","completion":"    \/\/ Code here\n\n}","language":"typescript"}
{"task_id":"MBXP_TS\/105","completion":"    return lst.filter(Boolean).length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/106","completion":"    \/\/ TODO\n    let result = []\n    for(let i = 0; i < test_list.length; i++) {\n        result.push(test_list[i], test_tup[i])\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/107","completion":"    const count: number = R - L + 1;\n    let counter = 0;\n\n    for (let i = L; i <= R; i++) {\n        const hex = i.toString(16);\n        const isEven = i % 2 === 0;\n\n        if (hex.length === 1 && isEven) {\n            counter++;\n        }\n    }\n\n    return counter;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/108","completion":"    if (num1.length == 0 || num2.length == 0 || num3.length == 0) return []\n\n    const num_heap = new Heap((a, b) => b - a)\n    num_heap.push(...num1)\n    num_heap.push(...num2)\n    num_heap.push(...num3)\n\n    const result = []\n    while (num_heap.length() > 0) {\n        result.push(num_heap.pop())\n    }\n\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/109","completion":"    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (s[i] != s[s.length - 1 - i]) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/110","completion":"    const missing_ranges = [];\n    for (let index = strt_val; index <= stop_val; index++) {\n        missing_ranges.push([index, index])\n    }\n\n    for (let index = 0; index < test_list.length; index++) {\n        let start = test_list[index][0];\n        let stop = test_list[index][1];\n\n        for (let j = 0; j < missing_ranges.length; j++) {\n            const [start_index, stop_index] = missing_ranges[j];\n\n            if (start < stop_index) {\n                missing_ranges.splice(j, 0, [start, stop_index]);\n                break;\n            }\n            if (start > stop_index) {\n                missing_ranges.splice(j + 1, 0, [start, stop_index]);\n                break;\n            }\n        }\n    }\n\n    return missing_ranges;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/111","completion":"    \/\/ your code here\n    \/\/ return an array with common elements in nested lists\n    \/\/ you can use any data structure you like\n    \/\/ return empty array [] if no common elements\n    if (nestedlist.length === 1) return [];\n    let result = [];\n    nestedlist.forEach((list) => {\n        list.forEach((num) => {\n            let count = 0;\n            nestedlist.forEach((nestedList) => {\n                nestedList.forEach((nestedNum) => {\n                    if (nestedNum === num) count++;\n                })\n            })\n            if (count === nestedlist.length) result.push(num);\n        })\n    })\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/112","completion":"    return diameter * height;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/113","completion":"    const regex = \/^[0-9]+$\/;\n    return regex.test(text);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/114","completion":"  \/\/ code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/115","completion":"    for(let i = 0; i < list1.length; i++) {\n        if(list1[i] !== {} && list1[i] !== undefined) {\n            return false;\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/116","completion":"  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i] * (10 ** i);\n  }\n  return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/117","completion":"    var result = [];\n    for (var i = 0; i < test_list.length; i++) {\n        var item = test_list[i][0];\n        var item_number = Number(test_list[i][0]);\n        var item_string = test_list[i][1];\n        result.push( (item_number ? item_number : item_string) );\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/118","completion":"  \/\/ your code\n}","language":"typescript"}
{"task_id":"MBXP_TS\/119","completion":"    if (arr.length == 0) return -1;\n    if (arr[0] == n) return 0;\n\n    let start = 0;\n    let end = arr.length - 1;\n\n    while (start <= end) {\n        const mid = Math.floor((start + end) \/ 2);\n        if (arr[mid] == n) {\n            let i = mid;\n            while (arr[i] == n) {\n                i--;\n            }\n            return i + 1;\n        }\n\n        if (arr[mid] < n) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n\n    return -1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/120","completion":"    var max = -Infinity;\n    list1.forEach( (item1: Array<number>, index1: number) => {\n        var product = 1;\n        list1.forEach( (item2: Array<number>, index2: number) => {\n            if (index1 == index2) {\n                return;\n            }\n            product *= item1[index2];\n        });\n        if (product > max) {\n            max = product;\n        }\n    });\n    return max;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/121","completion":"    let set = new Set(A);\n    let min = Number.MAX_VALUE;\n    let max = 0;\n    for (let val of set) {\n        if (val < min) {\n            min = val;\n        }\n        if (val > max) {\n            max = val;\n        }\n    }\n    const setMin = new Set([min]);\n    const setMax = new Set([max]);\n    let res = false;\n    for (let i = 0; i < A.length; i++) {\n        let diff = Math.abs(A[i] - min);\n        if (diff == 0) {\n            res = true;\n            break;\n        }\n        else if (diff == 1) {\n            setMin.add(A[i]);\n        }\n        else if (diff == 2) {\n            setMax.add(A[i]);\n        }\n    }","language":"typescript"}
{"task_id":"MBXP_TS\/122","completion":"  let num = 0\n  num += (((1+1)*2)**n-1) \/ 2\n  num += (((1-1)*2)**n-1) \/ 2\n  return num\n}","language":"typescript"}
{"task_id":"MBXP_TS\/123","completion":"    \/\/ TODO\n    return 0\n}","language":"typescript"}
{"task_id":"MBXP_TS\/125","completion":"    let maxLength = 0;\n    for (let i = 0; i < n; i++) {\n        maxLength = Math.max(maxLength, getMaxDiff(string0, i, i));\n        maxLength = Math.max(maxLength, getMaxDiff(string0, i, i+1));\n    }\n    return maxLength;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/126","completion":"    const a_divisors = findDivisors(a);\n    const b_divisors = findDivisors(b);\n\n    return a_divisors.reduce((acc, div) => (div in b_divisors) ? acc + div : acc, 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/127","completion":"    return x * y;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/128","completion":"    const words = str.split(' ');\n    const longWords = words.filter(word => word.length > n);\n\n    return longWords;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/129","completion":"  const row1 = my_matrix[0];\n  const row2 = my_matrix[1];\n  const row3 = my_matrix[2];\n  const row4 = my_matrix[3];\n\n  const magic_square = [\n    [7, 12, 1, 14],\n    [2, 13, 8, 11],\n    [16, 3, 10, 5],\n    [9, 6, 15, 4],\n  ];\n  const row1_sum = row1.reduce((acc, cur) => acc + cur, 0);\n  const row2_sum = row2.reduce((acc, cur) => acc + cur, 0);\n  const row3_sum = row3.reduce((acc, cur) => acc + cur, 0);\n  const row4_sum = row4.reduce((acc, cur) => acc + cur, 0);\n  const magic_sum = magic_square[0].reduce((acc, cur","language":"typescript"}
{"task_id":"MBXP_TS\/130","completion":"    let map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        if (map.has(nums[i]))\n            map.set(nums[i], map.get(nums[i]) + 1);\n        else\n            map.set(nums[i], 1);\n    }\n    let result = [];\n    map.forEach( (value, key) => {\n        if (result[0] == undefined || value > result[0])\n            result = [key, value];\n    });\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/131","completion":"    let newStr: string = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if ((str1[i] == 'a') || (str1[i] == 'e') || (str1[i] == 'i') || (str1[i] == 'o') || (str1[i] == 'u')) {\n            newStr = newStr + str1[str1.length - i - 1];\n        } else {\n            newStr = newStr + str1[i];\n        }\n    }\n    return newStr;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/132","completion":"  let tup2 = [...tup1];\n  let tup3 = [];\n  for (let i = 0; i < tup1.length; i++) {\n    if (tup1[i] === \" \") {\n      tup2[i] = \"%20\";\n      tup3.push(tup2[i]);\n      continue;\n    }\n    tup3.push(tup2[i]);\n  }\n  return tup3.join(\"\");\n}","language":"typescript"}
{"task_id":"MBXP_TS\/133","completion":"    return nums.reduce( (accumulator: number, currentValue: number) => accumulator + currentValue < 0 ? accumulator + currentValue : accumulator, 0)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/134","completion":"    var odd = 0;\n    for(let i=0;i<p;i++){\n        odd = arr[arr.length-1-i]%2 === 1 ? odd+1 : odd;\n    }\n    return odd===n ? \"ODD\" : \"EVEN\";\n}","language":"typescript"}
{"task_id":"MBXP_TS\/135","completion":"  if (n % 6 === 0) {\n    return 6 * n - 10;\n  }\n  return 6 * n;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/136","completion":"  const tax = 0.23\n  const electricityBill = units * 0.65 + units * tax\n  return electricityBill\n}","language":"typescript"}
{"task_id":"MBXP_TS\/137","completion":"    const zeroes = nums.filter(n => n === 0);\n    const positive = nums.filter(n => n > 0);\n    const negative = nums.filter(n => n < 0);\n    return (positive.length - zeroes.length) \/ (zeroes.length + positive.length);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/138","completion":"  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum = sum + 1 << i;\n  }\n  return sum === n;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/139","completion":"    return 2 * Math.PI * r;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/140","completion":"  \/\/ TODO: Define your code here\n  throw new Error(\"Not implemented yet!\");\n}","language":"typescript"}
{"task_id":"MBXP_TS\/141","completion":"  const len = nums.length;\n  let i, j;\n\n  for (i = len - 1; i >= 0; i--) {\n    let maxPos = 0;\n    for (j = 1; j <= i; j++) {\n      if (nums[j] > nums[maxPos]) {\n        maxPos = j;\n      }\n    }\n    swap(nums, maxPos, i);\n  }\n\n  return nums;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/142","completion":"    let s1 = 0, s2 = 0, s3 = 0;\n    for(let i = 0; i < list1.length; i++){\n        for(let j = 0; j < list2.length; j++){\n            if(list1[i] == list2[j]){\n                s1++;\n            }\n        }\n        for(let k = 0; k < list3.length; k++){\n            if(list2[i] == list3[k]){\n                s2++;\n            }\n        }\n        for(let m = 0; m < list1.length; m++){\n            if(list2[i] == list1[m]){\n                s3++;\n            }\n        }\n    }\n    return s1 + s2 + s3;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/143","completion":"    \/\/Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/144","completion":"    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            sum += Math.abs(arr[i] - arr[j])\n        }\n    }\n    return sum\n}","language":"typescript"}
{"task_id":"MBXP_TS\/145","completion":"    if(n < 2 || !arr.length) return -1;\n\n    var diff = 0, mx = 0;\n    for(var i = 0; i < n; i++) {\n        diff = Math.abs(arr[i] - arr[i+1]);\n        if(diff > mx) mx = diff;\n    }\n    return mx;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/146","completion":"  let asciiValue = 0;\n  for (let i = 0; i < str1.length; i++) {\n    asciiValue = asciiValue + str1.charCodeAt(i);\n  }\n  return asciiValue;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/147","completion":"  \/\/ your code\n}","language":"typescript"}
{"task_id":"MBXP_TS\/148","completion":"    let result = 0;\n    let sum = 0;\n    let count = 0;\n    while(N > 0) {\n        count++;\n        sum += N % 10;\n        N = Math.floor(N \/ 10);\n    }\n\n    if(count % 2 != 0) {\n        result = sum;\n        while(result > 9) {\n            sum = 0;\n            while(result > 0) {\n                sum += result % 10;\n                result = Math.floor(result \/ 10);\n            }\n            result = sum;\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/149","completion":"    if (arr.length < 2) return 0;\n    let dp = new Array<number>(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array<number>(n);\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 1; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (let k = 2; k < n; k++) {\n        for (let i = 0; i < n - k; i++) {\n            let j = i + k;\n            for (let l = i + 1; l < j; l++) {\n                if (arr[i] - arr[l] == 1) {\n                    dp[i][j]","language":"typescript"}
{"task_id":"MBXP_TS\/150","completion":"    if (a > c || a < -c || b < -c || b > c)\n        return false;\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/151","completion":"    \/\/TODO: Write your code here\n    if (x<0) return false;\n    let n = Math.max(x,y);\n    let i =2;\n    while(i<=n){\n        if (n%i ==0 && x%i ==0 && y%i ==0){\n            return true;\n        }\n        i++;\n    }\n    return false;\n    \n}","language":"typescript"}
{"task_id":"MBXP_TS\/152","completion":"    return sort(x, 0, x.length - 1);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/153","completion":"  const discriminant = (b * b) - (4 * a * c);\n\n  if (discriminant < 0) {\n    return []\n  }\n\n  const sqrtDiscriminant = Math.sqrt(discriminant);\n  const rootOne = (-b + sqrtDiscriminant) \/ (2 * a);\n  const rootTwo = (-b - sqrtDiscriminant) \/ (2 * a);\n\n  if (rootOne > rootTwo) {\n    return [rootOne, rootTwo];\n  }\n\n  return [rootTwo, rootOne];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/154","completion":"    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums[i].length; j++) {\n            if (j != N) {\n                result.push(nums[i][j]);\n            }\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/155","completion":"  return (n & 0b111111111111111111111111) ^ (n << 1)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/156","completion":"  return tuple_str.map((array_str: Array<string>) => array_str.map(string => +string));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/157","completion":"    const arr = [];\n    let count = 0;\n\n    if (typeof list1 === 'string') {\n        const str = list1.split('');\n        for (let i = 0; i < str.length; i++) {\n            if (str[i] === str[i + 1]) {\n                count++;\n            } else {\n                if (count !== 0) {\n                    arr.push([count, str[i]]);\n                    count = 0;\n                } else {\n                    arr.push([1, str[i]]);\n                }\n            }\n        }\n    } else {\n        for (let i = 0; i < list1.length; i++) {\n            if (list1[i] === list1[i + 1]) {\n                count++;\n            } else {\n                if (count !== 0) {\n                    arr.push([count, list1[i","language":"typescript"}
{"task_id":"MBXP_TS\/158","completion":"    \/\/ Time complexity : O(n*k)\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < arr[i+1]) {\n            count++;\n        }\n    }\n    if (count < k) {\n        return -1;\n    }\n    else {\n        return count - k;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/159","completion":"    \/\/ code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/160","completion":"  const isNatural = n > 0 ? ' - natural numbers' : ''\n  const isAny = n > 0 ? ' - any integer' : ''\n  const str = n > 0 ? `Find two integers - a = ${a} and b = ${b},` : 'There is no solution'\n  const sign = n > 0 ? '+' : '-'\n  const expression = `${sign}${a} * ${b} = ${n}${isNatural}${isAny}`\n  return {\n    str: str,\n    x: a,\n    y: b\n  }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/161","completion":"    \/\/ your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/162","completion":"  let sum = 0;\n  if (n < 0) return 0;\n  if (n == 0) return 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/163","completion":"  return (s * l) \/ 2\n}","language":"typescript"}
{"task_id":"MBXP_TS\/164","completion":"    let sum1 = sumDivisors(num1);\n    let sum2 = sumDivisors(num2);\n\n    return math.equal(sum1, sum2)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/165","completion":"    let counter = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (isLetter(str1[i])) {\n            counter++;\n        }\n    }\n    return counter;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/166","completion":"    const m = A.length;\n    let xor = 0;\n    for (let i = 0; i < m; i++) {\n        xor ^= A[i];\n    }\n    return (xor ^ N) & 1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/167","completion":"    if (n == 0) return 1;\n    else if (n == 1) return 2;\n\n    let p = 2;\n\n    while (p <= n) {\n        p = p * 2;\n    }\n\n    return p;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/168","completion":"    \/\/ let _a: Array<number> = a;\n    \/\/ if (a.length == 0) return 0;\n    \/\/ let count: number = 0;\n    \/\/ for (let i = 0; i < _a.length; i++) {\n    \/\/     if (_a[i] == x) {\n    \/\/         count++;\n    \/\/     }\n    \/\/ }\n    \/\/ return count;\n    let freq = a.reduce((acc, cur) => {\n        acc[cur] = acc[cur] ? acc[cur] + 1 : 1;\n        return acc;\n    }, {});\n    return freq[x] ? freq[x] : 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/169","completion":"    let p = 1;\n    for (let i = 2; i <= n; i++) {\n        p *= i;\n    }\n    return p;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/170","completion":"  return list1.slice(m, n+1).reduce((a,b) => a + b, 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/171","completion":"  return 2 * a * (5 * math.sqrt(3) - 1)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/172","completion":"    let count = 0;\n    for(let i = 0; i < s.length; i++)\n        if(s.includes('std', i))\n            count++;\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/173","completion":"    const str = text.replaceAll(\/[^a-zA-Z0-9]\/g, '');\n    return str;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/174","completion":"    let m = new Map();\n    l.forEach(s=> {\n        let k = s[0];\n        let v = s[1];\n        if (m.has(k)) {\n            m.get(k).push(v);\n        } else {\n            m.set(k, [v]);\n        }\n    });\n    return m;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/175","completion":"    if (str1 === '') return true;\n\n    const stack = [];\n    for (let i = 0; i < str1.length; i++) {\n        const char = str1.charAt(i);\n        if (char === '{' || char === '(' || char === '[') {\n            stack.push(char);\n        } else if (stack.length === 0) {\n            return false;\n        } else {\n            const last = stack.pop();\n            if ((char === '}' && last === '{') ||\n                (char === ')' && last === '(') ||\n                (char === ']' && last === '[')) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n};\n<\/s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>","language":"typescript"}
{"task_id":"MBXP_TS\/176","completion":"    return a + b + c;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/177","completion":"  let [n, m] = [0, 1];\n  let i = L;\n  while (i < R) {\n    m = m * i \/ gcd(m, i);\n    i++;\n  }\n  let [lcm, lcm_n] = [m, m];\n  let j = L;\n  while (j < R) {\n    lcm_n = lcm_n * j \/ gcd(lcm_n, j);\n    j++;\n  }\n  let [min, max] = [lcm \/ gcd(lcm, lcm_n), lcm_n \/ gcd(lcm, lcm_n)];\n  let [left, right] = [L, R];\n  while (left < right) {\n    let mid = Math.floor((left + right) \/ 2);\n    let [gcd_left, gcd_right] = [gcd(min","language":"typescript"}
{"task_id":"MBXP_TS\/178","completion":"    for (const pattern of patterns) {\n        if (text.includes(pattern)) {\n            return ('Matched!');\n        }\n    }\n    return ('Not Matched!');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/179","completion":"    const str = x.toString();\n    return str.length === 9 ? true : false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/180","completion":"    const dlon = elon - slon\n    const dlat = elat - slat\n    const a = math.radians(dlat)\n    const c = math.radians(dlon)\n    const distance = math.acos(math.sin(a) * math.sin(c) + math.cos(a) * math.cos(c) * math.cos(math.radians(elat - slat)))\n    return math.degrees(distance)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/181","completion":"    const [n1, n2] = [str1, str2].map(s => s.length);\n    let i = 0;\n    while (i < n1 && i < n2 && str1[i] === str2[i]) i++;\n    return str1.slice(0, i);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/182","completion":"    let regex = \/[A-Z][a-z]+|[^a-zA-Z0-9]\/g;\n    let specialRegex = \/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\\/?]\/g;\n    let lowerRegex = \/[a-z]\/g;\n    let upperRegex = \/[A-Z]\/g;\n    let numbersRegex = \/\\d\/g;\n    let specialChars = string0.match(specialRegex);\n    let specialCharsRegex = new RegExp(`${specialChars.join(\"\")}`, 'g');\n    let numbers = string0.match(numbersRegex);\n    let numbersRegex2 = new RegExp(`${numbers.join(\"\")}`, 'g');\n    let uppercase = string0.match(upperRegex);\n    let lowerCase = string0.match(lowerRegex);\n    let uppercaseRegex = new RegExp(`${uppercase.join(\"\")}`, 'g');\n    let lowerCaseRegex = new RegExp(`${lowerCase.join(\"\")}`, 'g');\n    let all = string0.","language":"typescript"}
{"task_id":"MBXP_TS\/183","completion":"    \n}","language":"typescript"}
{"task_id":"MBXP_TS\/184","completion":"    if (list.length === 0) return false;\n    return list.some(v => v > num);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/185","completion":"  \/\/ Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/186","completion":"\treturn 'Not Matched!'\n}","language":"typescript"}
{"task_id":"MBXP_TS\/187","completion":"    if (m < 0 || n < 0)\n        return 0;\n\n    if (X.length == 0 || Y.length == 0)\n        return 0;\n\n    let dp = new Array(m+1);\n    for (let i=0; i<=m; i++) {\n        dp[i] = new Array(n+1);\n    }\n\n    for (let i=0; i<=m; i++) {\n        for (let j=0; j<=n; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = 0;\n            }\n            else if (X[i-1] == Y[j-1]) {\n                dp[i][j] = 1 + dp[i-1][j-1];\n            }\n            else {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j","language":"typescript"}
{"task_id":"MBXP_TS\/188","completion":"    if (n < 1) return false;\n    if (n == 1) return true;\n    return prod_Square(n - 1) && prod_Square(n - 2);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/189","completion":"    if (n < 1) throw 'Invalid n';\n\n    let arr_copy = arr.slice();\n    let i = 0;\n    while (arr_copy.length > 0) {\n        let index = arr_copy.findIndex((el) => el === (i + 1));\n        if (index === -1) {\n            arr_copy.splice(i, 1);\n            i = 0;\n        } else {\n            arr_copy.splice(index, 1);\n            i++;\n        }\n    }\n    return arr_copy[0] == undefined ? n : arr_copy[0];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/190","completion":"    if(x1 >= x2 || y1 >= y2){\n        return 0\n    }\n    let count = 0\n    for(let i = Math.min(x1,x2); i <= Math.max(x1,x2); i++){\n        for(let j = Math.min(y1,y2); j <= Math.max(y1,y2); j++){\n            if(i == x1 && j == y1){\n                continue\n            }\n            if(i == x2 && j == y2){\n                continue\n            }\n            if(i == x1 && j == y2){\n                continue\n            }\n            if(i == x2 && j == y1){\n                continue\n            }\n            if(Math.pow(i-x1, 2) + Math.pow(j-y1, 2) == Math.pow(x2-x1, 2) + Math.pow(y2-y1, 2","language":"typescript"}
{"task_id":"MBXP_TS\/191","completion":"  \n}","language":"typescript"}
{"task_id":"MBXP_TS\/192","completion":"    if (str == undefined || str == null || str == '') return false;\n    let regex = \/^[a-zA-Z]+$\/;\n    if(regex.test(str)) return true;\n    else return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/193","completion":"  if (test_tup.length == 0)\n    return test_tup\n  \n  let res = [test_tup[0]]\n  for (let i = 1; i < test_tup.length; i++) {\n    if (res[res.length - 1] != test_tup[i]) {\n      res.push(test_tup[i])\n    }\n  }\n  return res\n}","language":"typescript"}
{"task_id":"MBXP_TS\/194","completion":"    if(typeof n !== \"number\"){\n        throw \"Octal number is not a number\";\n    }\n    if(n < 0 || n > 0o7777777777){\n        throw \"Invalid octal number : \" + n;\n    }\n    const decimal = n.toString(10);\n    return Number.parseInt(decimal);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/195","completion":"    if (n === 0) {\n        return -1\n    }\n\n    let low = 0\n    let high = n - 1\n\n    while (low <= high) {\n        let mid = Math.floor((low + high) \/ 2)\n        if (x < arr[mid]) {\n            high = mid - 1\n        } else if (x > arr[mid]) {\n            low = mid + 1\n        } else {\n            return mid\n        }\n    }\n    return -1\n}","language":"typescript"}
{"task_id":"MBXP_TS\/196","completion":"    \/\/ your code here\n    const length = test_list.length;\n    let result = [];\n    for (let i = 0; i < length; i++) {\n        if (test_list[i].length !== K) {\n            result.push(test_list[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/197","completion":"  let result = [];\n  for (let i = 0; i < 4; i++) {\n    result.push(Math.pow(test_tup1[i], test_tup2[i]));\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/198","completion":"    return math.sqrt(a * a + b * b)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/199","completion":"    let powerOfTwo = 1;\n    while (powerOfTwo < n) {\n        powerOfTwo = powerOfTwo << 1;\n    }\n    return powerOfTwo - 1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/200","completion":"    let max_index = 0;\n    let max_value = list1[0];\n    let index_position = [];\n    list1.forEach((element, index) => {\n        if(element > max_value) {\n            max_value = element;\n            max_index = index;\n        }\n    });\n    index_position.push(max_index);\n    for(let i = 1; i < list1.length; i++) {\n        if(list1[i] === max_value && i != max_index) {\n            index_position.push(i);\n        }\n    }\n    return index_position;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/201","completion":"    if (lst.length == 1) {\n        return true\n    }\n\n    if (lst[0] === lst[1]) {\n        return chkList(lst.slice(1))\n    }\n\n    return false\n}","language":"typescript"}
{"task_id":"MBXP_TS\/202","completion":"  let result = '';\n  for (let i = 0; i < str1.length; i++) {\n    if (str1.charCodeAt(i) % 2 == 0) {\n      result = result + str1.charAt(i);\n    }\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/203","completion":"  \/\/Write your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/204","completion":"    let count = 0;\n    for (let i=0; i<s.length; i++) {\n        if (s[i]===c) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/205","completion":"  if (test_tup.length == 0) return [];\n  let inv_elements = [];\n\n  const stack = [];\n  stack.push(test_tup[0]);\n  for (let i = 1; i < test_tup.length; i++) {\n    while (stack.length > 0 && test_tup[i] < stack[stack.length - 1]) {\n      inv_elements.push(stack.pop());\n    }\n    stack.push(test_tup[i]);\n  }\n\n  while (stack.length > 0) {\n    inv_elements.push(stack.pop());\n  }\n  return inv_elements;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/206","completion":"  return test_tup.reduce((acc, ele) => acc.concat([ele, ele]), []);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/207","completion":"    if (str === '') {\n        return 0;\n    }\n    const map = new Map();\n    const len = str.length;\n    let longest = 1;\n    let i = 0;\n    while (i < len) {\n        const cur = str[i];\n        if (map.has(cur)) {\n            map.set(cur, map.get(cur) + 1);\n        } else {\n            map.set(cur, 1);\n        }\n        if (map.get(cur) > longest) {\n            longest = map.get(cur);\n        }\n        i++;\n    }\n    return longest;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/208","completion":"    const regex = \/^\\d+\\.?\\d{0,2}$\/g\n    return regex.test(num)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/209","completion":"  const heap_size = heap.length\n  if (heap_size <= 0) return heap\n  let index = 0\n  while (heap[index] < a) index++\n  const heap_copy = [...heap]\n  heap[index] = a\n  const new_heap = Heap.heapify(heap_copy)\n  return new_heap\n}","language":"typescript"}
{"task_id":"MBXP_TS\/210","completion":"    return string0.match(\/^[a-zA-Z0-9]+$\/g) !== null;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/211","completion":"    let count = 0;\n    let max = Math.pow(2, n);\n    while(max >= 0) {\n        count += max & 1;\n        max >>= 1;\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/212","completion":"    const fourthPowerSum = math.pow(n, 4);\n    return Number(fourthPowerSum.toString().split('').reduce((a, b) => a + b));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/213","completion":"\treturn test_tup1.concat(test_tup2);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/214","completion":"    const pi = 3.141592653589793\n    return radian * 180 \/ pi\n}","language":"typescript"}
{"task_id":"MBXP_TS\/215","completion":"    let result = [];\n    for (let i = 0; i < alist.length; i++) {\n        if (Array.isArray(alist[i])) {\n            result.push(...decode_list(alist[i]));\n        } else {\n            result.push(alist[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/216","completion":"    if (list1.length <= list2.length) {\n        for (let i = 0; i < list1.length; i++) {\n            for (let j = 0; j < list2.length; j++) {\n                if (list1[i].length === list2[j].length) {\n                    if (check_array_list(list1[i], list2[j])) {\n                        return true\n                    }\n                } else {\n                    return false\n                }\n            }\n        }\n    } else {\n        return false\n    }\n    return false\n}","language":"typescript"}
{"task_id":"MBXP_TS\/217","completion":"  const counts = {}\n  let maxCount = 0;\n  let maxChar = '';\n  for (let char of str) {\n    if (counts[char]) {\n      counts[char]++;\n      if (counts[char] > maxCount) {\n        maxCount = counts[char];\n        maxChar = char;\n      }\n    } else {\n      counts[char] = 1;\n    }\n  }\n  return maxChar;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/218","completion":"    let ops = 0;\n    while (A != B) {\n        ops += 1;\n        A > B ? A = A - B : B = B - A;\n    }\n    return ops;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/219","completion":"    \/\/ code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/220","completion":"    return text.split('').map(char => {\n        return char === ' ' ? ' ' : char === ',' ? ':' : char === '.' ? '.' : char;\n    }).join('').split(':').join(':').split('.').join(':').split(',').join(':').substring(0, n * 2);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/221","completion":"    \/\/ Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/222","completion":"    var i,\n        j,\n        t_type = false,\n        len = test_tuple.length;\n\n    for (i = 0; i < len; i++) {\n        for (j = 0; j < len; j++) {\n            if (i != j && test_tuple[i] == test_tuple[j]) {\n                t_type = true;\n            }\n        }\n    }\n    return t_type;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/223","completion":"    let cur = 1;\n    const start = arr[0];\n    const end = arr[n - 1];\n    if (end - start + 1 <= x) return true;\n    for (let i = 1; i <= n - 2; i++) {\n        if (end - start + 1 === x) return true;\n        const val = arr[i];\n        if (val == start) {\n            cur++;\n        } else {\n            if (cur > x) {\n                return false;\n            }\n            cur = 1;\n            start = val;\n        }\n        if (end - start + 1 === x) {\n            if (cur > x) {\n                return false;\n            }\n            cur = 1;\n            start = val;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/224","completion":"    return n.toString(2).split(\"0\").length - 1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/225","completion":"    if(low > high) return arr[0];\n    if(low === high) return arr[low];\n    const mid = (high + low) \/ 2;\n    if(mid > 0 && mid < arr.length - 1) {\n        if(arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) return arr[mid];\n    }\n    if(mid === 0) {\n        if(arr[mid] > arr[mid + 1]) return arr[mid];\n        if(arr[mid] > arr[mid + 2]) return arr[mid + 1];\n    }\n    else if(mid === arr.length - 1) {\n        if(arr[mid] > arr[mid - 1]) return arr[mid];\n        if(arr[mid] > arr[mid - 2]) return arr[mid - 1];\n    }\n    if(arr[","language":"typescript"}
{"task_id":"MBXP_TS\/226","completion":"    let result: string = \"\"\n    for (let i = 0; i < str.length; i++) {\n        if (i % 2 !== 0) {\n            result += str[i]\n        }\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/227","completion":"    if (a < b) {\n        if (a < c) return a;\n        else return c;\n    }\n    else {\n        if (b < c) return b;\n        else return c;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/228","completion":"    let mask = 0;\n    while(l <= r) {\n        if((n & mask) === 0)\n            return false;\n        mask <<= 1;\n        l++;\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/229","completion":"    let newArr = [];\n\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            newArr.unshift(arr[i]);\n        } else {\n            newArr.push(arr[i]);\n        }\n    }\n\n    return newArr;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/230","completion":"    let newStr = \"\";\n    let i = 0;\n    while (i < str1.length) {\n        if (str1[i] === \" \") {\n            newStr += char;\n        } else {\n            newStr += str1[i];\n        }\n        i++;\n    }\n    return newStr;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/231","completion":"    const array = Array(n).fill(0);\n    let max = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i + 1; j++) {\n            array[i] += tri[j][i];\n        }\n        max = Math.max(max, array[i]);\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/232","completion":"    if (n >= list1.length) {\n        return [];\n    }\n    \n    const sorted = list1.sort((x, y) => y - x);\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(sorted[i]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/233","completion":"    \/\/ This is your job. \n    \/\/ You don't need to implement anything.\n    return 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/234","completion":"\tif (l < 0) {\n\t\treturn 0;\n\t}\n\treturn l ** 3;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/235","completion":"    return n | 0b00100000;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/236","completion":"    let counter = 0;\n    for (let i = 1; i < N - K + 1; i++) {\n        for (let j = i + 1; j < N - K + 1; j++) {\n            for (let k = j + 1; k < N - K + 1; k++) {\n                if (k + j + i === K) {\n                    counter++;\n                }\n            }\n        }\n    }\n    return counter;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/237","completion":"    \/\/ convert to Map<[x,y], count>\n    let occurrences = new Map();\n    for (const [x, y] of test_list) {\n        let count = occurrences.get(x) || 0;\n        occurrences.set(x, count + 1);\n        count = occurrences.get(y) || 0;\n        occurrences.set(y, count + 1);\n    }\n\n    \/\/ sort Map<[x,y], count>\n    for (let [key, value] of occurrences.entries()) {\n        occurrences.set(key, value);\n    }\n\n    \/\/ count occurrences\n    let result = new Map();\n    for (const [key, value] of occurrences.entries()) {\n        if (result.get(value) == undefined) {\n            result.set(value, 1);\n        }\n        else {\n            result.set(value, result.get(value) + 1);\n        }\n    }\n    return result","language":"typescript"}
{"task_id":"MBXP_TS\/238","completion":"    return str.length + (str.match(\/.\/g) || []).length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/239","completion":"    if (n == 0) {\n        return 1\n    } else if (n == 1) {\n        return m + m - 1\n    } else {\n        return get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m - 2, n - 1)\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/240","completion":"  const list1Len = list1.length;\n  const list2Len = list2.length;\n  list1[list1Len - 1] = list2;\n  return list1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/241","completion":"    let res = [];\n\n    for (let i = 0; i < m; i++) {\n        res.push([]);\n        for (let j = 0; j < n; j++) {\n            res[i].push([]);\n            for (let k = 0; k < o; k++) {\n                res[i][j].push('*');\n            }\n        }\n    }\n    return res;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/242","completion":"    let count = 0;\n    for(let i = 0; i < str1.length; i++){\n        if(str1[i] == ' ')\n            continue;\n        count += 1;\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/243","completion":"  const [value, ...rest] = lst.reduce((acc, tuple) => {\n    acc.set(tuple[0], [...(acc.get(tuple[0]) || []), tuple]);\n    return acc;\n  }, new Map());\n  return [...rest.values()].sort((a, b) => value.get(a[0]).length - value.get(b[0]).length);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/244","completion":"    return math.sqrt(N)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/245","completion":"    let left = [arr[0]];\n    let right = [arr[0]];\n    let max = arr[0];\n\n    for (let i = 1; i < n; i++) {\n        left[i] = Math.max(left[i - 1] + arr[i], arr[i]);\n        right[n - i - 1] = Math.max(right[n - i] + arr[i], arr[i]);\n\n        max = Math.max(max, Math.max(left[i], right[n - i]));\n    }\n\n    return max;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/246","completion":"    let number = number0\n    let n = 1\n    while (Math.pow(number, 2) < 10) {\n        number = (number0 + (number \/ (Math.pow(number0, 2) + 1))) \/ 2\n        n += 1\n    }\n    return number\n}","language":"typescript"}
{"task_id":"MBXP_TS\/247","completion":"    if (str.length < 2) return str.length;\n\n    let maxLen = 1;\n    let dp = new Array(str.length).fill(0);\n\n    for (let i = 1; i < str.length; i++) {\n        dp[i] = 1;\n        for (let j = 0; j < i; j++) {\n            if (str[j] == str[i] && dp[j] + 1 > dp[i]) {\n                dp[i] = dp[j] + 1;\n                maxLen = Math.max(maxLen, dp[i]);\n            }\n        }\n    }\n    return maxLen;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/248","completion":"    const s = 1 \/ ((1 + 1 \/ n) * n);\n    return s;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/249","completion":"    \/\/ Your code goes here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/250","completion":"    let counter = 0;\n    for (let i = 0; i < tup.length; i++) {\n        if (tup[i] == x) {\n            counter++;\n        }\n    }\n    return counter;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/251","completion":"  const index = list.map(function (item) { return item }).indexOf(element)\n  return index === -1 ? list.concat(element) : list.map(function (item, index) {\n      return index === index ? element : item\n    })\n}","language":"typescript"}
{"task_id":"MBXP_TS\/252","completion":"    const complex = math.complex(numbers)\n    const result = math.evaluate('abs(r * c)')\n    const angle = math.evaluate('atan(r)')\n    return Array.from(result).map(value => {\n        return (value + 1) * math.evaluate('i')\n    }).map(value => {\n        return (value \/ math.evaluate('2 * pi')) * 360\n    })\n}","language":"typescript"}
{"task_id":"MBXP_TS\/253","completion":"  return list1.filter(v => Number.isInteger(v)).length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/254","completion":"    const re = \/ae\/g;\n    return text.match(re);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/255","completion":"    if (n > l.length) {\n        throw \"Invalid number of colours\";\n    }\n    else if (n === 1) {\n        return [[...l]];\n    }\n    else if (n === l.length) {\n        return [[...l]];\n    }\n    else {\n        const result = [];\n        for (let i = 0; i < l.length - n + 1; i++) {\n            for (let j = 0; j <= n - 2; j++) {\n                result.push([...l.slice(0, i), ...l.slice(i + 1, i + 1 + j), ...l.slice(i + j + 1, l.length)]);\n            }\n        }\n        return result;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/256","completion":"    let count = 0;\n\n    if (n < 2) return 0;\n\n    for (let i = 2; i <= n; i++) {\n        if (is_Prime(i)) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/257","completion":"  return [b, a]\n}","language":"typescript"}
{"task_id":"MBXP_TS\/258","completion":"    return array_nums.filter(e => e%2 == 1).length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/259","completion":"    \/\/ TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/260","completion":"\tlet p = 1;\n\tlet count = 0;\n\n\twhile (count < n) {\n\t\tp += 2;\n\t\tif (is_prime(p)) {\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn p;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/261","completion":"    \/\/ your code\n}","language":"typescript"}
{"task_id":"MBXP_TS\/262","completion":"    \/\/ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n    \/\/ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n    const length = list1.length;\n\n    if (length < L) {\n        return [list1];\n    }\n\n    let i = 0;\n    const firstList = [];\n    while (i < length - 1) {\n        firstList.push(list1[i]);\n        i += L + 1;\n    }\n    firstList.push(list1[i]);\n\n    return [firstList];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/263","completion":"    const m1 = new Map(d1);\n    const m2 = new Map(d2);\n    const m = new Map();\n    for (let [key, value] of m1) {\n        m.set(key, Math.max(value, m2.get(key)));\n    }\n    for (let [key, value] of m2) {\n        m.set(key, Math.max(m1.get(key), value));\n    }\n    return m;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/264","completion":"    return h_age * 7\n}","language":"typescript"}
{"task_id":"MBXP_TS\/265","completion":"    let ret = [],\n        i = 0;\n    while (i < S.length) {\n        ret.push(S.slice(i, i + step));\n        i += step;\n    }\n    return ret;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/266","completion":"    let area = ((l * 6) * 6) + (l * 4);\n    return area;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/267","completion":"  if (n <= 1) return 0;\n  return Math.pow(n,2) + square_Sum(n-1);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/268","completion":"    if (n <= 0 || n > 30) {\n        throw new Error('n should between 1~30')\n    }\n    const starNum = (1 << n) - 1\n    return starNum\n}","language":"typescript"}
{"task_id":"MBXP_TS\/269","completion":"    const asciiValue = k.charCodeAt(0);\n    return asciiValue;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/270","completion":"    let sumEven = 0;\n    for (let i = n; i < arr.length; i++) {\n        if (i % 2 == 0) {\n            sumEven += arr[i];\n        }\n    }\n    return sumEven;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/271","completion":"    return n * (n+1) * (2*n + 1) \/ 6\n}","language":"typescript"}
{"task_id":"MBXP_TS\/272","completion":"    let temp_array = [];\n    let final_array = [];\n    for (let i = 0; i < test_list.length; i++) {\n        temp_array.push(test_list[i][2]);\n    }\n    final_array = temp_array.sort();\n    return final_array;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/273","completion":"    let result = []\n    for (let i = 0; i < test_tup1.length; i++) {\n        result.push(test_tup1[i] - test_tup2[i])\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/274","completion":"  let coeff = math.factorial(2 * n) \/ (math.factorial(n) * math.factorial(n + 1))\n  return coeff.toFixed(10)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/275","completion":"  const i = math.subtract(n, 1)\n  if (m > i) {\n    return -1\n  }\n  const l = math.subtract(a.length, i)\n  return l\n}","language":"typescript"}
{"task_id":"MBXP_TS\/276","completion":"    let volume = 1\/3 * (Math.PI * Math.pow(r, 2) * h)\n    return volume\n}","language":"typescript"}
{"task_id":"MBXP_TS\/277","completion":"  let new_dict = new Map();\n  for (let [key, value] of dict) {\n    if (value == n) new_dict.set(key, value);\n  }\n  return new_dict;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/278","completion":"    var count = 0;\n\n    for (let i = 0; i < test_tup.length; i++) {\n        if (test_tup[i] instanceof Array) {\n            count += count_first_elements(test_tup[i]) + 1\n        } else if (test_tup[i] == null) {\n            count += 1;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/279","completion":"    const number = (n * (n + 1)) \/ 2\n    return number\n}","language":"typescript"}
{"task_id":"MBXP_TS\/280","completion":"    let low = 0;\n    let high = dlist.length - 1;\n\n    while (low <= high) {\n        const mid = Math.floor((low + high) \/ 2);\n        const guess = dlist[mid];\n        if (guess === item) {\n            return [true, mid];\n        } else if (guess > item) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n\n    return [false, -1];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/281","completion":"    let unique = true;\n    for (let i = 0; i < test_list.length; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i] === test_list[j]) {\n                unique = false;\n                break;\n            }\n        }\n    }\n    return unique;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/282","completion":"    return nums1.map(n => n-nums2[0]);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/283","completion":"    let s = '0123456789';\n    for (let i = 0; i < s.length; i++) {\n        let digit = s[i];\n        let freq = n \/ digit;\n        if (freq >= Math.pow(10, digit.toString().length)) {\n            return false;\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/284","completion":"    let count = 0\n    for (let i of list)\n        if (element == i)\n            count += 1\n    return count == list.length ? true : false\n}","language":"typescript"}
{"task_id":"MBXP_TS\/285","completion":"  if (text.length < 4) return 'Not matched!'\n  if (text.indexOf('a') == text.lastIndexOf('b')) return 'Found a match!'\n  return 'Not matched!'\n}","language":"typescript"}
{"task_id":"MBXP_TS\/286","completion":"    \/\/ TODO\n    return -1\n}","language":"typescript"}
{"task_id":"MBXP_TS\/287","completion":"    \/\/ TODO\n    return 0\n}","language":"typescript"}
{"task_id":"MBXP_TS\/288","completion":"  \/\/ Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/289","completion":"  const isOdd = (x: number) => (x & 1);\n  let days = 0;\n  for (let month = 1; month <= N; month++) {\n    days += isOdd(new Date(month, 0).getDate()) ? 1 : 0;\n  }\n  return days;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/290","completion":"    let max = 0;\n    let max_list = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].length > max) {\n            max = list1[i].length;\n            max_list = list1[i];\n        }\n    }\n    return max_list;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/291","completion":"    if (n === 0 || k === 0) {\n        return 0\n    }\n    const dp = new Array(n + 1)\n    dp[0] = 1\n    dp[1] = k\n    for (let i = 2; i < n; i++) {\n        dp[i] = dp[i - 1] * (k - 1) + dp[i - 2] * (k - 2)\n    }\n    return dp[n - 1]\n}","language":"typescript"}
{"task_id":"MBXP_TS\/292","completion":"    return n\/m\n}","language":"typescript"}
{"task_id":"MBXP_TS\/293","completion":"    return (math.sqrt(w*w + h*h))\n}","language":"typescript"}
{"task_id":"MBXP_TS\/294","completion":"    let max = listval[0];\n    for (let i = 1; i < listval.length; i++) {\n        if (listval[i] > max) {\n            max = listval[i];\n        }\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/295","completion":"    return number0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/296","completion":"    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i+1; j < n; j++) {\n            if (arr[i] > arr[j]) count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/297","completion":"    \/\/ let result = [];\n\n    \/\/ for (const item of list1) {\n    \/\/     if (Array.isArray(item)) {\n    \/\/         result.push(...item);\n    \/\/     } else {\n    \/\/         result.push(item);\n    \/\/     }\n    \/\/ }\n\n    \/\/ return result;\n\n    return list1.reduce(function(a, b) {\n        return a.concat(Array.isArray(b) ? flatten_list(b) : b);\n    }, []);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/298","completion":"    let a = [];\n    l1.forEach(l => {\n        let x = l2.map(l2 => l2).indexOf(l);\n        if (x >= 0)\n            a.push(l);\n    });\n    return a;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/299","completion":"    return stdata.reduce((prev, cur) => {\n        const cur_min = Math.min(...cur)\n        const cur_max = Math.max(...cur)\n        return [cur_min > prev[0] ? cur_min : prev[0], cur_max > prev[1] ? cur_max : prev[1]];\n    }, [-Infinity, Infinity])\n}","language":"typescript"}
{"task_id":"MBXP_TS\/300","completion":"    \/\/TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/301","completion":"  if (d.size == 0) return 0\n  else {\n    let depth = 1\n    for (let i of d.keys()) {\n      depth = Math.max(depth, dict_depth(d.get(i)))\n    }\n    return depth\n  }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/302","completion":"    \/\/ TODO: Your code here\n    return null;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/303","completion":"    return a.sort((x,y)=>x-y).join(\"\") === a.sort((x,y)=>y-x).join(\"\") ? true : false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/304","completion":"\tlet count = 0\n\tlet element = -1\n\tif (rotations > 0) {\n\t\tconst start = ranges[index][0]\n\t\tconst end = ranges[index][1]\n\t\tconst length = end - start\n\t\telement = arr[start + (length - 1) * count]\n\t\twhile (count < length) {\n\t\t\telement = arr[start + (length - 1) * count]\n\t\t\tcount++\n\t\t}\n\t}\n\treturn element\n}","language":"typescript"}
{"task_id":"MBXP_TS\/305","completion":"    \/\/ your code here\n    var start = []\n    for(let i = 0; i<words.length; i++){\n        if(words[i][0] == 'p'){\n            start.push(words[i])\n        }\n    }\n    return start;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/306","completion":"    if (index == n) return 0;\n    let prefix_sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    let suffix_sum = max_sum_increasing_subseq(a, n, index + 1, k);\n\n    return Math.max(prefix_sum, suffix_sum);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/307","completion":"    let newTuple = [];\n    for (let i = 0; i < tuplex.length; i++) {\n        if (i == m-1) {\n            newTuple[m-1] = n;\n        } else {\n            newTuple[i] = tuplex[i];\n        }\n    }\n    return newTuple;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/308","completion":"    \/\/ TODO: your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/309","completion":"    if (a > b) {\n        return a;\n    }\n    return b;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/310","completion":"    let tuple = str1.split(\" \")\n    return tuple\n}","language":"typescript"}
{"task_id":"MBXP_TS\/311","completion":"    \/\/ TODO: Code\n    return -1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/312","completion":"    return 1 \/ 3 * math.pi * r * r * h;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/313","completion":"    return list1.filter(element => element >= 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/314","completion":"    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            sum = 0;\n            for (let k = i; k < i + n; k++) {\n                for (let l = j; l < j + n; l++) {\n                    sum += grid[k][l];\n                }\n            }\n            if (sum > max) max = sum;\n        }\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/315","completion":"\tconst list = str.split(' ');\n\tlet max = 0;\n\tlet result = '';\n\t\n\tfor (let i = 0; i < list.length; i++) {\n\t\tconst element = list[i].split('').filter(element => element % 2 == 0);\n\t\tconst count = element.length;\n\t\tif (count > max) {\n\t\t\tmax = count;\n\t\t\tresult = list[i];\n\t\t}\n\t}\n\n\treturn result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/316","completion":"    const n = A.length;\n    if (n == 0)\n        return -1;\n    let left = 0;\n    let right = n - 1;\n    while (left <= right) {\n        const mid = Math.floor((right - left) \/ 2) + left;\n        if (A[mid] == x) {\n            right = mid - 1;\n            while (A[right] == x) {\n                right--;\n            }\n            return right;\n        }\n        else if (A[mid] > x) {\n            right = mid - 1;\n        }\n        else {\n            left = mid + 1;\n        }\n    }\n    return -1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/317","completion":"    \/\/ if (alist.length == 0) return [];\n    const len = alist.length;\n    const last = alist[len - 1];\n\n    const lastStr = last.toString();\n    const lastNum = last.toString();\n\n    let count = 1;\n    const array = [];\n    for (let i = len - 2; i >= 0; i--) {\n        const number = alist[i];\n        const num = number.toString();\n        if (lastNum === num) {\n            count++;\n        } else {\n            array.push(lastStr, count);\n            lastStr = num;\n            lastNum = num;\n            count = 1;\n        }\n    }\n    array.push(lastStr, count);\n\n    return array;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/318","completion":"    return Math.pow(s, 3) * Math.pow(s, 2) \/ 4;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/319","completion":"    return text.match(\/[a-zA-Z]{5}\/g);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/320","completion":"    let result = 0;\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n\n    for (let i = 1; i <= n; i++) {\n        result += Math.pow(i, 2);\n    }\n    return Math.abs(result - sum * sum);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/321","completion":"    const map = {};\n    const res = [];\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (map[char] === undefined) {\n            map[char] = 0;\n        }\n        map[char]++;\n    }\n\n    for (let key in map) {\n        const cnt = map[key];\n        res.push(cnt * (cnt + 1) \/ 2);\n    }\n\n    return res.join('');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/322","completion":"    let minimum = Math.min(...list1);\n    return list1.reduce(function(acc, item, i) {\n        if (item === minimum) {\n            acc.push(i);\n        }\n        return acc;\n    }, []);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/323","completion":"  const array = new Array(n).fill(0);\n\n  for (const num of arr) {\n    if (num >= 0) {\n      array[num]++;\n    } else {\n      array[n + num]++;\n    }\n  }\n\n  let result = [];\n\n  for (let i = 0; i < array.length; i++) {\n    while (array[i] > 0) {\n      result.push(i);\n      array[i]--;\n    }\n  }\n\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/324","completion":"    const map = new Map();\n    let sum = 0;\n\n    \/\/ Build a map with the test_tuple.\n    for (let i = 0; i < test_tuple.length; i++) {\n        const el = test_tuple[i];\n        if (!map.has(el)) {\n            map.set(el, 1);\n        } else {\n            map.set(el, map.get(el) + 1);\n        }\n    }\n\n    \/\/ Find sum for each element.\n    for (let [key, value] of map) {\n        const count = value;\n        sum += count * (count - 1);\n    }\n\n    return [sum, map.size];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/325","completion":"    let i = 1;\n    let j = n;\n    let count = 0;\n    while (i <= j) {\n        let tmp = Math.floor(i * j \/ (i + 1));\n        if (tmp * tmp === n) {\n            count = Math.min(count, tmp);\n        } else if (tmp * tmp < n) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/326","completion":"  \/\/ Solution:\n  return '';\n}","language":"typescript"}
{"task_id":"MBXP_TS\/327","completion":"    const isosceles = (x == y) + (y == z) + (z == x);\n    return isosceles <= 2;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/328","completion":"    \/\/ If the total number of elements in the list is less than the total number of elements to rotate, \n    \/\/ it should return the list as it is.\n    if(m >= n) {\n        return list1;\n    }\n\n    \/\/ We will make a new empty array to store the rotated list\n    const rotated_list = [];\n    \/\/ We will make a counter variable to keep track of current index of the array.\n    let index = 0;\n    \/\/ We will make a second counter variable to keep track of current index of the rotated array.\n    let rotated_index = 0;\n\n    \/\/ In the first iteration, we will make sure that the first element in the list is the first element in the rotated array.\n    rotated_list[rotated_index] = list1[0];\n    \/\/ We will increment index by 1.\n    index = 1;\n    \/\/ We will increment rotated_index by 1.\n    rotated_index = 1;\n\n    \/\/ In the next iterations, we will go through the elements of the list and","language":"typescript"}
{"task_id":"MBXP_TS\/329","completion":"    return list.reduce((acc, cur) => {\n        if (cur < 0) {\n            acc++;\n        }\n        return acc;\n    }, 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/330","completion":"    return text.match(\/[A-Za-z]{3,5}\/g)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/331","completion":"    let count = 0;\n    while (n) {\n        n &= n - 1;\n        count++;\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/332","completion":"    let map = new Map<string, number>();\n    for (let char of str1) {\n        if (map.has(char)) {\n            map.set(char, map.get(char) + 1);\n        }\n        else {\n            map.set(char, 1);\n        }\n    }\n    return map;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/333","completion":"    let sorted_li = sub_li.sort((a, b) => {\n        return a[1] - b[1];\n    });\n    return sorted_li;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/334","completion":"    \/\/ TODO: your code goes here\n    if(a+b>c && a+c>b && b+c>a){\n        return true;\n    }else {\n        return false;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/335","completion":"  if (n < a) return 0;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result += (i + 1) * d;\n  }\n  return result + d * a;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/336","completion":"    return monthname1 === \"February\" ? true : monthname1 === \"January\" ? false : false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/337","completion":"    return `Matches: ${text.match(\/\\w+\\s*$\/)}`;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/338","completion":"    let count = 0;\n    for (let i = 0; i < s.length - 1; i++) {\n        for (let j = i + 1; j < s.length; j++) {\n            if (s[i] == s[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/339","completion":"    let min = Math.min(x, y);\n    let max = Math.max(x, y);\n\n    while (min <= max) {\n        let mid = Math.floor((min + max) \/ 2);\n        if (mid * mid == x * x + y * y) {\n            return mid;\n        }\n        else if (mid * mid > x * x + y * y) {\n            max = mid - 1;\n        }\n        else {\n            min = mid + 1;\n        }\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/340","completion":"    \/\/ Return the sum of three smallest nums\n    return 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/341","completion":"  const arr = [...s]\n  return arr.sort((a, b) => a - b)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/342","completion":"    \/**\n     * Time O(nlogn)\n     * Space O(1)\n     *\/\n    let min = Infinity;\n    let max = -Infinity;\n    list.forEach(arr => {\n        const min = Math.min(...arr);\n        const max = Math.max(...arr);\n        if(min < max) {\n            return [min, max];\n        }\n    })\n    return [min, max];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/343","completion":"    let dig = 0\n    let leta = 0\n    for (let c of s) {\n        if (c >= \"a\" && c <= \"z\") {\n            leta++\n        } else if (c >= \"0\" && c <= \"9\") {\n            dig++\n        }\n    }\n    return [dig, leta]\n}","language":"typescript"}
{"task_id":"MBXP_TS\/344","completion":"    let count = 0;\n    for (let i = n; i <= m; i++) {\n        let square = i * i;\n        if (square % 2 === 1) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/345","completion":"    const result = []\n    for (let i = 0; i < nums.length - 1; i++) {\n        if (nums[i] !== nums[i + 1]) {\n            result.push(nums[i + 1] - nums[i])\n        }\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/346","completion":"    return (n + k - 1) \/ k;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/347","completion":"    return (m * m + n * n - 2 * m * n)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/348","completion":"    if (M === 0) return 1;\n    if (M < 0) return 0;\n    return (find_ways(M - 1) + find_ways(M - 2) + find_ways(M - 3)) % 1000000007;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/349","completion":"  let sum = 0;\n  for (let i = 0; i < string0.length; i++) {\n    sum += string0[i].charCodeAt(0) - 48;\n  }\n  return sum % 2 == 0 ? \"Yes\" : \"No\";\n}","language":"typescript"}
{"task_id":"MBXP_TS\/350","completion":"  let result = s.length\n  for (let i = 0; i < s.length; i++) {\n      if (s.match(s.charAt(i) + \"\")) {\n          result = result - 1\n      }\n  }\n  return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/351","completion":"  if (n == 0) {\n    return 0;\n  }\n  for (let i = 0; i < k; i++) {\n    let index = Math.floor(arr.length \/ k);\n    arr = arr.slice(index);\n  }\n  return arr[0];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/352","completion":"    let map = {};\n    for (let i = 0; i < str.length; i++) {\n        if (map[str[i]] == undefined) {\n            map[str[i]] = true;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/353","completion":"  const list2 = [...list1];\n  for (let i = 0; i < list1.length; i++) {\n    list2[i] = list2[i].slice(0, n) + list2[i].slice(n + 1);\n  }\n  return list2;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/354","completion":"    let b = 1;\n    let c = 1;\n    for (let i = 0; i < n; i++) {\n        b *= (i + 1);\n        c *= (i + 1);\n    }\n    b = b * d;\n    c = c * d;\n    return Math.round(c \/ b);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/355","completion":"    const area = 2 * Math.PI * radius * radius\n    return area\n}","language":"typescript"}
{"task_id":"MBXP_TS\/356","completion":"    const cos_ab = Math.cos(a - b \/ 2);\n    const sin_ab = Math.sin(a - b \/ 2);\n    return Math.atan2(sin_ab, cos_ab);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/357","completion":"    \/\/ Your code here\n    return 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/358","completion":"    const nums1_mod = nums1.map((n, idx) => n % nums2[idx])\n    return nums1_mod\n}","language":"typescript"}
{"task_id":"MBXP_TS\/359","completion":"    \/\/ Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/360","completion":"  let i = 1;\n  let carol = 7;\n  while (i < n) {\n    carol += 2;\n    i++;\n  }\n  return carol;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/361","completion":"    if (list1.length == 0) return []\n    var result = list1.filter(x => x.length != 0)\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/362","completion":"    let counter = 1;\n    let maxCounter = 1;\n    let maxItem = nums[0];\n    for(let i = 1; i < nums.length; i++){\n        if(nums[i] == maxItem){\n            counter += 1;\n        }else{\n            if(counter > maxCounter){\n                maxCounter = counter;\n                maxItem = nums[i];\n            }\n            counter = 1;\n        }\n    }\n\n    if(counter > maxCounter){\n        maxCounter = counter;\n        maxItem = nums[i];\n    }\n\n    return maxItem;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/363","completion":"    const out = test_list.map(i => {\n        let arr = [];\n        for (let j = 0; j < K; j++) {\n            arr.push(i[j]);\n        }\n        return arr;\n    });\n    return out;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/364","completion":"    const bin = strToBinary(str);\n    let flipCount = 0;\n    for (let i = 0; i < bin.length; i++) {\n        if (bin[i] === bin[i + 1]) {\n            flipCount = flipCount + 1;\n        } else {\n            flipCount = flipCount + 2;\n        }\n    }\n    return flipCount;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/365","completion":"    if (n < 0) return -1;\n    return n.toString().length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/366","completion":"    let result = 0;\n    for (let i = 0; i < list_nums.length - 1; i++) {\n        result = Math.max(result, list_nums[i] * list_nums[i + 1]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/368","completion":"    let result = [];\n    for (let i = 0; i < N; i++)\n    {\n        result.push(test_tup);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/369","completion":"    const volume = l * w * h;\n    const base = 2 * (l * w + w * h + h * l);\n    return volume + base;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/370","completion":"    return price.sort((a, b) => parseFloat(a[1]) - parseFloat(b[1]));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/371","completion":"    \/\/ Your code here\n    let left = left_element;\n    let right = right_element;\n    let mid = 0;\n    let count = 0;\n    while (left <= right) {\n        mid = (right - left + 1) \/ 2 + left;\n        count = mid;\n        if (A[mid] == -1) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/372","completion":"    let heap = new Heap(nums)\n    let result = []\n    while(heap.length()) {\n        result.push(heap.pop())\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/373","completion":"    return l * w * h;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/374","completion":"  let result = [];\n\n  if (str.length == 1) return [str];\n\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let remaining = str.substring(0, i) + str.substring(i + 1);\n\n    for (let p of permute_string(remaining)) {\n      result.push(char + p);\n    }\n  }\n\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/375","completion":"    return Math.round(n\/m) * m;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/376","completion":"  const new_list = [];\n  let prev_num = test_tup[0];\n  let prev_rep = 1;\n  for (let i = 1; i < test_tup.length; i++) {\n    let cur_num = test_tup[i];\n    if (cur_num == prev_num) {\n      prev_rep++;\n    } else {\n      if (prev_rep > 1) {\n        new_list.push(prev_num);\n      }\n      prev_num = cur_num;\n      prev_rep = 1;\n    }\n  }\n  if (prev_rep > 1) {\n    new_list.push(prev_num);\n  }\n  return new_list;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/377","completion":"    let str = s.split('');\n    let len = str.length;\n    let i = 0;\n    let j = 0;\n\n    while (i < len) {\n        if (str[i] == c) {\n            str.splice(j, 1);\n            j = j - 1;\n        } else {\n            i = i + 1;\n            j = j + 1;\n        }\n    }\n\n    return str.join('');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/378","completion":"    return test_list.map((value, index) => {\n        if (index == 0) {\n            return test_list.pop();\n        }\n        return value;\n    })\n}","language":"typescript"}
{"task_id":"MBXP_TS\/379","completion":"    const surface = 2 * l * w + 2 * w * h + 2 * h * l;\n    return surface;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/380","completion":"    let result = []\n    for (let i = 0; i < rownum; i++) {\n        let row = []\n        for (let j = 0; j < colnum; j++) {\n            row.push(i * j)\n        }\n        result.push(row)\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/381","completion":"    const newList = [];\n    list_data.map(function (innerList) {\n        newList.push(innerList[index_no]);\n    });\n    return newList;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/382","completion":"    let start = 0\n    let end = A.length - 1\n    while (start <= end) {\n        let mid = Math.floor((start + end) \/ 2)\n        if (A[mid] > A[mid + 1]) {\n            return mid + 1\n        } else if (A[start] > A[mid]) {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n    }\n    return 0\n}","language":"typescript"}
{"task_id":"MBXP_TS\/383","completion":"    return n ^ (n >> 1);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/384","completion":"    if (arr.length === 0) return 0;\n\n    let result = -1;\n    let counter = 0;\n    let minValue = Math.min(...arr);\n    \n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === minValue) {\n            counter++;\n        }\n    }\n\n    if (counter === arr.length) return 1;\n    else return counter;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/385","completion":"  \/\/ Base case\n  if (n <= 2) {\n    return 1\n  }\n  \/\/ Recursive case\n  else {\n    return get_perrin(n-1) + get_perrin(n-2) + get_perrin(n-3)\n  }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/386","completion":"    let swaps = 0\n    let left = 0\n    let right = 0\n    let index = 0\n\n    while (index < s.length) {\n        if (s[index] == '[') {\n            left++\n        } else {\n            if (s[index] == ']') {\n                right++\n            }\n        }\n\n        if (left == right) {\n            return swaps\n        }\n\n        index++\n    }\n\n    return 0\n}","language":"typescript"}
{"task_id":"MBXP_TS\/387","completion":"    return (N.length % 2 == 0 ? \"Even\" : \"Odd\")\n}","language":"typescript"}
{"task_id":"MBXP_TS\/388","completion":"    let mask = 1;\n    while (mask < n) mask <<= 1;\n    return mask >> 1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/389","completion":"  if (n < 2) {\n    return n;\n  }\n\n  const memo = new Array(n + 1);\n  memo[0] = 2;\n  memo[1] = 1;\n  for (let i = 2; i <= n; i++) {\n    memo[i] = memo[i - 1] + memo[i - 2];\n  }\n  return memo[n];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/390","completion":"    let output = []\n    list.forEach(x => {\n        output.push(string0.replace('{0}', x))\n    });\n    return output\n}","language":"typescript"}
{"task_id":"MBXP_TS\/391","completion":"    const d = new Map();\n    for (let i = 0; i < l1.length; i++) {\n        const key = l1[i];\n        const values = {};\n        for (let j = 0; j < l2.length; j++) {\n            const value = l2[j];\n            values[value] = l3[j];\n        }\n        d.set(key, values);\n    }\n    return [d];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/392","completion":"    const memo = new Map();\n    return helper(n);\n\n    function helper(n: number) {\n        if (memo.has(n)) return memo.get(n);\n\n        let maxSum = 0;\n        if (n <= 3) {\n            maxSum = n;\n        } else {\n            maxSum = Math.max(helper(n \/ 2), helper(n \/ 3), helper(n \/ 4), helper(n \/ 5));\n        }\n        memo.set(n, maxSum);\n        return maxSum;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/393","completion":"    let max_length = 0;\n    let result = [];\n    input_list.forEach(function(value) {\n        if (value.length > max_length) {\n            max_length = value.length;\n            result = value;\n        }\n    });\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/394","completion":"    \/\/ Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/395","completion":"  let chars = {};\n  for (let char of str1) {\n      if (chars[char]) {\n          chars[char] = chars[char] + 1;\n      } else {\n          chars[char] = 1;\n      }\n  }\n  for (let key of Object.keys(chars)) {\n      if (chars[key] == 1) {\n          return key;\n      }\n  }\n  return null;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/396","completion":"    let regex = \/^(.)(?=.{2})\/;\n    return (regex.test(string0)) ? \"Valid\" : \"Invalid\";\n}","language":"typescript"}
{"task_id":"MBXP_TS\/397","completion":"  \/\/ write code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/398","completion":"  if (nums.length == 0) return 0;\n  if (typeof nums[0] == 'number') {\n    let total = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n      total += nums[i];\n    }\n    return total;\n  }\n  return sum_of_digits(nums[0]);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/399","completion":"    \/\/ TODO\n    return undefined\n}","language":"typescript"}
{"task_id":"MBXP_TS\/400","completion":"  let freq = 0;\n  test_list.forEach((item) => {\n    freq += (new Set(item)).size;\n  });\n  return freq;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/401","completion":"    const output_tup = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        const new_tup = [];\n        for (let j = 0; j < test_tup1[i].length; j++) {\n            new_tup.push(test_tup1[i][j] + test_tup2[i][j]);\n        }\n        output_tup.push(new_tup);\n    }\n    return output_tup;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/402","completion":"    const ncpr = n * p ** (r - 1)\n    return (ncpr % p)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/403","completion":"    \/\/ TODO: Your code here\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/404","completion":"    return (a < b ? a : b);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/405","completion":"    for (let i = 0; i < tuplex.length; i++) {\n        if (tuplex[i] == tuple1) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/406","completion":"\tif (x % 2 == 0) {\n\t\treturn \"Even Parity\"\n\t} else {\n\t\treturn \"Odd Parity\"\n\t}\n}","language":"typescript"}
{"task_id":"MBXP_TS\/407","completion":"  if (n > 9) {\n    const digits = [...n.toString()];\n    const digit = digits.pop();\n    const digit2 = digits.pop();\n    const digit3 = digits.pop();\n    digits.push(digit3, digit2, digit);\n    return parseInt(digits.join(''));\n  }\n  return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/408","completion":"    \/\/ find the pair from the first array\n    const pairs = find_k_pairs(nums1, nums2, k);\n    \/\/ filter out the pairs from the second array, if the first number is same in the second array\n    const result = pairs.filter(pair => nums1[pair[0]] != nums2[pair[1]]);\n    \/\/ sort the result by first number in ascending order\n    result.sort((a, b) => a[0] - b[0]);\n    \/\/ return the result\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/409","completion":"  const tuples = list1.reduce((t, c) => t.concat(c)).sort((a, b) => a[0] - b[0]);\n  return tuples[0][1] * tuples[1][1];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/410","completion":"    let minValue: number = Infinity\n    for(let i = 0; i < listval.length; i++){\n        if(listval[i] < minValue){\n            minValue = listval[i]\n        }\n    }\n    return minValue\n}","language":"typescript"}
{"task_id":"MBXP_TS\/411","completion":"    return word.replace(\/(_\\w)\/g, function(m) {\n        return m[1].toUpperCase()\n    })\n}","language":"typescript"}
{"task_id":"MBXP_TS\/412","completion":"    if (l == null || l.length == 0) {\n        return l;\n    }\n    var count = 1;\n    for (var i = 1; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            count++;\n        } else {\n            if (count > 1) {\n                l.splice(i - count, count);\n                i -= count;\n                count = 1;\n            }\n        }\n    }\n    if (count > 1) {\n        l.splice(l.length - count, count);\n    }\n    return l;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/413","completion":"    if (n < 0 || n > list1.length) return 'Invalid'\n\n    return list1.map((row) => row[n])\n}","language":"typescript"}
{"task_id":"MBXP_TS\/414","completion":"    const set1 = new Set(list1);\n    const set2 = new Set(list2);\n\n    if (set1.size < set2.size) return false;\n    return set1.size === set2.size ? set1.size > 0 && set1.size < 10 : false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/415","completion":"    let max_num = -Infinity;\n    let min_num = Infinity;\n    let max_prod = -Infinity;\n\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > max_num){\n            max_num = arr[i];\n        }\n        if(arr[i] < min_num){\n            min_num = arr[i];\n        }\n    }\n\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] * max_num > max_prod){\n            max_prod = arr[i] * max_num;\n        }\n    }\n\n    return max_prod;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/416","completion":"    if (n === 1) return 1\n    if (n === 2) return 2\n    return (n - 1) + breakSum(n - 1) + breakSum(n - 2)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/417","completion":"    let result = [];\n    for (let i = 0; i < Input.length; i++) {\n        if (!result.find(element => element.every(item => Input[i].includes(item)))) {\n            result.push(Input[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/418","completion":"    return lst.reduce((acc, val) => {\n        const list_length = val.length\n        const acc_length = acc.length\n        const is_max = list_length >= acc_length\n        return is_max ? val : acc\n    }, [])\n}","language":"typescript"}
{"task_id":"MBXP_TS\/419","completion":"    return list1.reduce((acc, x) => acc + Math.round(x), 0) * list1.length\n}","language":"typescript"}
{"task_id":"MBXP_TS\/420","completion":"  if (n <= 0) return 0;\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 3);\n  }\n  return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/421","completion":"    let concatenated_string = \"\";\n    for(let i=0; i < test_tup.length; i++){\n        concatenated_string += test_tup[i] + \"-\";\n    }\n    return concatenated_string.slice(0, -1);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/422","completion":"    if (n < 1) {\n        throw new Error('n must be positive integer')\n    }\n\n    let sum = 0\n\n    for (let i = 0; i < n; i++) {\n        sum += i ** 3\n    }\n\n    return sum \/ n\n}","language":"typescript"}
{"task_id":"MBXP_TS\/423","completion":"    const row = new Array(m).fill(0)\n    const col = new Array(n).fill(0)\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (gold[i][j] > row[i]) {\n                row[i] = gold[i][j]\n            }\n            if (gold[i][j] > col[j]) {\n                col[j] = gold[i][j]\n            }\n        }\n    }\n    return Math.max(...row) + Math.max(...col)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/424","completion":"    \/\/ code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/425","completion":"    let count = 0\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n            count++\n        }\n    }\n    return count\n}","language":"typescript"}
{"task_id":"MBXP_TS\/426","completion":"    return nums.filter(num => num % 2 !== 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/427","completion":"    const pattern = \/^(\\d{4})-(\\d{2})-(\\d{2})$\/\n    const [, year, month, day] = pattern.exec(dt)\n\n    return [month, day, year].join('-')\n}","language":"typescript"}
{"task_id":"MBXP_TS\/428","completion":"  let gap = Math.floor(my_list.length \/ 2)\n  while (gap > 0) {\n    for (let i = gap; i < my_list.length; i++) {\n      let current = my_list[i]\n      let j = i\n      while (j >= gap && my_list[j - gap] > current) {\n        my_list[j] = my_list[j - gap]\n        j = j - gap\n      }\n      my_list[j] = current\n    }\n    gap = Math.floor(gap \/ 2)\n  }\n  return my_list\n}","language":"typescript"}
{"task_id":"MBXP_TS\/429","completion":"    \/\/ implement me\n    return test_tup1.map((x, idx) => x && test_tup2[idx]).filter((x, idx) => x !== false);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/430","completion":"  const delta = b ** 2 - 4 * a * c\n  return delta < 0 ? 0 : - (2 * a) \/ delta\n}","language":"typescript"}
{"task_id":"MBXP_TS\/431","completion":"    if(list1 == [] || list2 == []) {\n        return false;\n    }\n    const map1 = {};\n    const map2 = {};\n    for(let i = 0; i < list1.length; i++) {\n        if(map1[list1[i]] == null) {\n            map1[list1[i]] = 0;\n        }\n        map1[list1[i]]++;\n    }\n    for(let j = 0; j < list2.length; j++) {\n        if(map2[list2[j]] == null) {\n            map2[list2[j]] = 0;\n        }\n        map2[list2[j]]++;\n    }\n    for(let key in map1) {\n        if(map1[key] > 0 && map2[key] > 0) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/432","completion":"    if (height > (base1 + base2)) {\n        return (base1 + base2) \/ 2\n    } else {\n        return height + base1 + base2\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/433","completion":"    let result = 'Yes, the entered number is greater than those in the array';\n    for (let i=0; i<arr.length; i++) {\n        if (number0 >= arr[i]) {\n            result = 'No, entered number is less than those in the array';\n            break;\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/434","completion":"    let first_match = '';\n    let i = 0;\n    let last_match = '';\n    let counter = 0;\n    while (counter < text.length && first_match == '') {\n        let a = text[i];\n        let b = text[i + 1];\n        if (a == 'a') {\n            first_match = b;\n            i = i + 1;\n        } else {\n            last_match = b;\n            i = i + 1;\n        }\n        counter = counter + 1;\n    }\n    return (first_match != '' && last_match == 'b') ? 'Found a match!' : 'Not matched!';\n}","language":"typescript"}
{"task_id":"MBXP_TS\/435","completion":"    return n % 10;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/436","completion":"    return list1.filter(x => x<0).join(\",\");\n}","language":"typescript"}
{"task_id":"MBXP_TS\/437","completion":"    const arr = str1.split('');\n    let odd = 0;\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        if (odd % 2 === 0) {\n            str += arr[i];\n        }\n        odd++;\n    }\n    return str;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/438","completion":"    let count = 0;\n    let len = test_list.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len; j++) {\n            if (test_list[i][0] === test_list[j][1] && test_list[i][1] === test_list[j][0]) {\n                count++;\n            }\n        }\n    }\n    return count.toString();\n}","language":"typescript"}
{"task_id":"MBXP_TS\/439","completion":"  if (L.length == 0) return 0;\n  else if (L.length == 1) return L[0];\n  else return L[0] + multiple_to_single(L.slice(1));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/440","completion":"    let adverbs = [];\n    \/\/ your code here\n    return adverbs;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/441","completion":"    return 6 * l * l\n}","language":"typescript"}
{"task_id":"MBXP_TS\/442","completion":"  return nums.filter(num => num > 0).length \/ nums.length\n}","language":"typescript"}
{"task_id":"MBXP_TS\/443","completion":"    \/\/ TODO\n    return list1[0];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/444","completion":"    \/\/ your code here\n\n}","language":"typescript"}
{"task_id":"MBXP_TS\/445","completion":"    const result = []\n    for (let i = 0; i < test_tup1.length; i++) {\n        result[i] = []\n        for (let j = 0; j < test_tup1[i].length; j++) {\n            result[i][j] = test_tup1[i][j] * test_tup2[i][j]\n        }\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/446","completion":"    let cnt = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < tup.length; j++) {\n            if (lst[i] === tup[j])\n                cnt++;\n        }\n    }\n    return cnt;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/447","completion":"    return nums.map((num) => num * num * num);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/448","completion":"    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum = sum + i * (i + 1) \/ 2;\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/449","completion":"    var a = Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2);\n    var b = Math.pow(x3 - x1, 2) + Math.pow(y3 - y1, 2);\n    var c = Math.pow(x2 - x3, 2) + Math.pow(y2 - y3, 2);\n    var d = Math.pow(x1 - x3, 2) + Math.pow(y1 - y3, 2);\n    var e = Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2);\n    var f = Math.pow(x2 - x3, 2) + Math.pow(y2 - y3, 2);\n    var g = Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2);\n\n    var s ","language":"typescript"}
{"task_id":"MBXP_TS\/450","completion":"    if (str.length <= l) {\n        return str;\n    }\n    \n    return str.slice(0, l);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/451","completion":"    return text1.replace(\/\\s\/g,\"\");\n}","language":"typescript"}
{"task_id":"MBXP_TS\/452","completion":"  if (sale_amount > actual_cost) return undefined;\n  return sale_amount - actual_cost;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/453","completion":"  return math.eval('sum(math.factorial(n) \/ math.math.factorial(math.math.floor(math.log(n))))')\n}","language":"typescript"}
{"task_id":"MBXP_TS\/454","completion":"    return ('Not matched!')\n}","language":"typescript"}
{"task_id":"MBXP_TS\/455","completion":"    if(monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/456","completion":"    \/\/ TODO: Code the function\n}","language":"typescript"}
{"task_id":"MBXP_TS\/457","completion":"    \/**\n     * 1. Start from the end.\n     * 2. Compare the first and the last element of each sublist.\n     * 3. If first is smaller than last, then we found our solution.\n     *\/\n    let minLen = Number.MAX_SAFE_INTEGER;\n    let result = [];\n    for (let i = lst.length - 1; i >= 0; i--) {\n        for (let j = lst[i].length - 1; j >= 0; j--) {\n            if (lst[i][j] < lst[i][j - 1]) {\n                return result;\n            }\n            else if (lst[i][j] == lst[i][j - 1]) {\n                if (lst[i].length < minLen) {\n                    result = [lst[i]];\n                    minLen = lst[i].length;\n                }\n                else if (lst[i].length == min","language":"typescript"}
{"task_id":"MBXP_TS\/458","completion":"    return l*b\n}","language":"typescript"}
{"task_id":"MBXP_TS\/459","completion":"  return str1.replace(\/([A-Z])\/g, '');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/460","completion":"    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][0]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/461","completion":"    return str.split('').filter( (s) => s == s.toUpperCase()).length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/462","completion":"    const combinations = [[]];\n    for (let i = 0; i < list1.length; i++) {\n        const item = list1[i];\n        let newCombination = [];\n        for (let j = 0; j < combinations.length; j++) {\n            newCombination = combinations[j].slice();\n            newCombination.push(item);\n            combinations.push(newCombination);\n        }\n    }\n    return combinations;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/463","completion":"    const max = arr[0];\n    const min = arr[0];\n    let product = 0;\n\n    for (const num of arr) {\n        if (num >= 0) {\n            max = Math.max(max, num);\n            min = Math.min(min, num);\n            product = product * num;\n        } else {\n            product = product * num;\n        }\n    }\n\n    return product * max;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/464","completion":"  \/\/ Write your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/465","completion":"    for(const [key, value] of dict1.entries()) {\n        if (value === undefined) {\n            dict1.delete(key)\n        }\n    }\n    return dict1\n}","language":"typescript"}
{"task_id":"MBXP_TS\/466","completion":"    if (low == high) {\n        return low;\n    }\n\n    let mid = low + Math.floor((high - low) \/ 2);\n    if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) {\n        return mid;\n    } else if (arr[mid] > arr[mid + 1]) {\n        return find_peak(arr, (mid - 1), high, n);\n    } else {\n        return find_peak(arr, low, (mid + 1), n);\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/467","completion":"    const octalNum = deciNum.toString(8);\n    return Number.parseInt(octalNum);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/468","completion":"    if (arr.length < n) throw new Error (\"Invalid array length.\");\n\n    let max = 0;\n    let min = arr[0];\n    for (let i = 1; i < n; i++) {\n        max = Math.max (max, arr[i]*min);\n        min = Math.min (min, arr[i]);\n    }\n    max = Math.max (max, arr[n-1]*min);\n\n    let prev = arr[0];\n    for (let i = 1; i < n; i++) {\n        let current = arr[i];\n        let temp_max = Math.max (max, prev*current);\n        max = Math.max (temp_max, current*min);\n        min = Math.min (min, current);\n        prev = current;\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/469","completion":"    let profit = 0;\n\n    for(let i = 0; i < k; i++){\n        if(price[i] > price[i + 1]){\n            profit += price[i] - price[i + 1];\n        }\n    }\n    return profit;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/470","completion":"  let sum = 0;\n  let result = [];\n  for (let i = 0; i < test_tup.length; i++) {\n    for (let j = 0; j < test_tup.length; j++) {\n      if (i !== j) {\n        sum = test_tup[i] + test_tup[j];\n        result.push(sum);\n      }\n    }\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/471","completion":"    const newArr = arr.map((el) => el % n);\n    const newL = newArr.length;\n    const div = Math.floor(newL \/ lens);\n    const res = newArr.splice(div * lens, newL);\n    return res.reduce((acc, cur) => acc + cur);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/472","completion":"    return (l.length != 0) && (l[0] === l[1] || (l.length >= 3 && l[1] - l[0] === l[2] - l[1]))\n}","language":"typescript"}
{"task_id":"MBXP_TS\/473","completion":"    const set1: Set<Array<number>> = set_from_list(test_list1)\n    const set2: Set<Array<number>> = set_from_list(test_list2)\n    \n    const intersection: Set<Array<number>> = new Set<Array<number>>()\n    \n    for (let element of set1) {\n        if (set2.has(element)) {\n            intersection.add(element)\n        }\n    }\n    return intersection\n}","language":"typescript"}
{"task_id":"MBXP_TS\/474","completion":"    const s1 = str1.split(\"\");\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] === ch) {\n            s1[i] = newch;\n        }\n    }\n    return s1.join(\"\");\n}","language":"typescript"}
{"task_id":"MBXP_TS\/475","completion":"  return Array.from(dict1.entries()).sort((a, b) => a[1] - b[1]);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/476","completion":"    return nums.reduce((sum, num) => sum + num, 0)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/477","completion":"    return string0.toLowerCase();\n}","language":"typescript"}
{"task_id":"MBXP_TS\/478","completion":"  let str2 = ''\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] != str1[i].toLowerCase()) {\n      str2 = str2 + str1[i]\n    }\n  }\n  return str2\n}","language":"typescript"}
{"task_id":"MBXP_TS\/479","completion":"    return Math.floor(Math.log10(n)) + 1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/480","completion":"    let maxChar = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        if (maxChar.length < str1.split(str1[i]).length) {\n            maxChar = str1[i];\n        }\n    }\n    return maxChar;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/481","completion":"    if (sum < 0) return false\n    if (sum == 0) return true\n    for (let i = 0; i < set.length; i++) {\n        if (is_subset_sum(set.slice(i + 1), n, sum - set[i])) return true\n    }\n    return false\n}","language":"typescript"}
{"task_id":"MBXP_TS\/482","completion":"    const pattern = \/^[A-Z][a-z]*$\/;\n    let count = 0;\n    let match = text.match(pattern);\n\n    if (match) {\n        count++;\n    }\n\n    while (match = text.match(pattern)) {\n        count++;\n    }\n\n    return count ? 'Yes' : 'No';\n}","language":"typescript"}
{"task_id":"MBXP_TS\/483","completion":"    \/\/ TODO\n    return 0\n}","language":"typescript"}
{"task_id":"MBXP_TS\/484","completion":"    \/\/ your code here\n    const result = []\n    for(let i = 0; i<test_list1.length; i++){\n        if(test_list2.length === 0){\n            result.push(test_list1[i])\n            return result\n        }\n        for(let j = 0; j<test_list2.length; j++){\n            if(test_list1[i][0] === test_list2[j][0] && test_list1[i][1] === test_list2[j][1]){\n                result.push(test_list1[i])\n                test_list2.splice(j, 1)\n                break\n            }\n        }\n    }\n    return result\n  }","language":"typescript"}
{"task_id":"MBXP_TS\/485","completion":"    let p = 0, q = n - 1;\n    while (p <= q) {\n        let m = p + (q - p) \/ 2 | 0;\n        if (isPalindrome(A, m, n)) {\n            q = m - 1;\n        } else {\n            p = m + 1;\n        }\n    }\n    return A[p];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/486","completion":"    if (n < k) {\n        return 0;\n    } else if (k == 0) {\n        return 1;\n    } else {\n        return p * binomial_probability(n-1, k-1, p) + (1-p) * binomial_probability(n-1, k, p);\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/487","completion":"    let sorted = tup.slice().sort(\n        function (a, b) { return a[1] - b[1] }\n    );\n    return sorted;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/488","completion":"    return math.pentagonal(a, true)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/489","completion":"    var count = 0,\n        max = arr[0];\n    for (var i = 0; i < n; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n            count = 1;\n        } else if (arr[i] == max) {\n            count++;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/490","completion":"  \/\/ 1. <unk>\ufffd\ufffd<unk>\ufffd\ufffd<unk>\ufffd<unk>\ufffdIJ<unk>\ufffd\ufffd <unk>\ufffdij<unk>3<unk>IJ\ufffd <unk>\ufffd\ufffd <unk>\ufffd34<unk>\ufffd\n  \/\/ 2. <unk>\ufffdij<unk>3<unk>IJ\ufffd <unk>\ufffd\ufffd<unk>L\ufffd\ufffd <unk>\ufffd<unk>\ufffd\ufffd<unk>\ufffd14<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd<unk>L\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd\ufffd<unk>3\ufffd <unk>\ufffd <unk>\ufffd\ufffd<unk>\ufffdIJ <unk>l\ufffd\ufffd<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd\ufffd <unk>l\ufffdIJ<unk>\ufffd\ufffd<unk>\ufffd14<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd\ufffd <unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd\ufffd<unk>\ufffd<unk>\ufffdIJ <unk>\ufffd\ufffd<unk>\ufffd\ufffd<unk>\ufffd\ufffd<unk>\ufffd\n  \/\/ 3. <unk>\ufffd<unk>\ufffd\ufffd<unk>\ufffd14 <unk>\ufffd\ufffd<unk>l\ufffd\ufffd<unk>\ufffd\ufffd<unk>\ufffd\ufffd.\n  let result = new Set();\n\n  test_list.map(list => {\n    let sortedList = list.sort((a, b) => a - b);\n    for (let i = 0; i ","language":"typescript"}
{"task_id":"MBXP_TS\/491","completion":"    return math.sum(math.pow(a, math.div(i, r)) for i in range(1, n))\n}","language":"typescript"}
{"task_id":"MBXP_TS\/492","completion":"  \/\/ <unk>\ufffdIJ<unk>\ufffd\ufffd<unk>\ufffdL\ufffd <unk>\ufffd\ufffd<unk>\ufffd\ufffd\n  \/\/ let start = 0;\n  \/\/ let end = item_list.length - 1;\n  \/\/ while (start <= end) {\n  \/\/   const mid = Math.floor((start + end) \/ 2);\n  \/\/   if (item_list[mid] === item) return true;\n  \/\/   else if (item_list[mid] < item) start = mid + 1;\n  \/\/   else end = mid - 1;\n  \/\/ }\n  \/\/ return false;\n\n  \/\/ <unk>L\ufffd<unk>\ufffd\ufffd <unk>\ufffdIJ<unk>\ufffd\ufffd <unk>\ufffd\ufffd<unk>\ufffd\ufffd\n  let start = 0;\n  let end = item_list.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) \/ 2);\n    if (item_list[","language":"typescript"}
{"task_id":"MBXP_TS\/493","completion":"    let result = [];\n    let current_coordinates = [startx, starty];\n    let prev_coordinates = null;\n\n    for (let angle = 0; angle < 2 * Math.PI; angle += 2 * Math.PI \/ radius) {\n        for (let steps = 0; steps < radius; steps++) {\n            let next_coordinates = [current_coordinates[0] + (endx - startx) * Math.cos(angle), current_coordinates[1] + (endy - starty) * Math.sin(angle)];\n            result.push([current_coordinates, next_coordinates]);\n            current_coordinates = next_coordinates;\n        }\n        prev_coordinates = current_coordinates;\n        current_coordinates = [endx, endy];\n    }\n    if (prev_coordinates) {\n        result.push([prev_coordinates, current_coordinates]);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/494","completion":"    var result = \"\";\n    for (let i = 0; i < test_tup.length; i++)\n        result += (test_tup[i] == 1) ? \"1\" : \"0\";\n\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/495","completion":"    return str1.replace(\/(?<=[a-z])(?=[A-Z])\/g, '').toLowerCase();\n}","language":"typescript"}
{"task_id":"MBXP_TS\/496","completion":"  const minHeap = new Heap(n);\n  nums.forEach(num => {\n    minHeap.push(num);\n  });\n  return minHeap.values();\n}","language":"typescript"}
{"task_id":"MBXP_TS\/497","completion":"    return 2 * (math.pi * (r ** 2) * h) + math.pi * (r ** 2);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/498","completion":"    if (x == 0) return y;\n    if (y == 0) return x;\n    if (x > y) return gcd(x-y, y);\n    else return gcd(x, y-x);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/499","completion":"    return 2 * r;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/500","completion":"    \/\/ TODO: implement\n    return \"\";\n}","language":"typescript"}
{"task_id":"MBXP_TS\/501","completion":"    while (x != y) {\n        if (x > y) {\n            x = x - y;\n        } else {\n            y = y - x;\n        }\n    }\n    return x;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/502","completion":"    return (n % m == 0) ? 0 : 1\n}","language":"typescript"}
{"task_id":"MBXP_TS\/503","completion":"    return nums.map((_, i, a) => i < a.length - 1 ? a[i + 1] + 1 : 0).filter(n => n > 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/504","completion":"    return n * (n + 1) * (2 * n + 1) \/ 6;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/505","completion":"    const length = A.length;\n    let z = 0;\n    let i = 0;\n    while (i < length) {\n        if (A[i] === 0) {\n            z++;\n            A[i] = A[length - z];\n            A[length - z] = 0;\n        } else {\n            i++;\n        }\n    }\n    return A;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/506","completion":"  return factorial(n) \/ (factorial(n - k) * factorial(k))\n}","language":"typescript"}
{"task_id":"MBXP_TS\/507","completion":"  let result = []\n  list1.forEach(element => {\n    for(let index = 0; index < removewords.length; index++){\n      if(element === removewords[index])\n        break\n      if(index === removewords.length - 1)\n        result.push(element)\n    }\n  });\n  return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/508","completion":"    if (l1.length !== l2.length) return false;\n\n    let count = 0;\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                count++;\n                break;\n            }\n        }\n    }\n    return count === l1.length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/509","completion":"    let sum = 0;\n    for (let i = 1; i <= n; i+=2) {\n        sum+=i;\n    }\n    return sum\/n;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/510","completion":"    const cache = [];\n    let total_sub_arr = 0;\n    let n = arr.length;\n    for (let i = 0; i < n; i++) {\n        let temp_cache = 1;\n        for (let j = 0; j < cache.length; j++) {\n            temp_cache *= cache[j];\n        }\n        cache.push(temp_cache);\n    }\n    for (let i = 0; i < n; i++) {\n        total_sub_arr += cache[i];\n    }\n    let count = 0;\n    let start = 0;\n    let end = 0;\n    while (end < n) {\n        if (total_sub_arr >= k) {\n            count++;\n            end++;\n        } else {\n            let temp_start = start;\n            while (temp_start < end && total_sub_arr < k) {","language":"typescript"}
{"task_id":"MBXP_TS\/511","completion":"    const factor = (num) => {\n        if (num < 2) return []\n        const result = []\n        let i = 2\n        while (num > i) {\n            if (num % i == 0) {\n                num = num \/ i\n                result.push(i)\n            } else {\n                i++\n            }\n        }\n        return result\n    }\n\n    const sum = (arr: number[]) => {\n        if (arr.length == 0) return 0\n        let sum = arr[0]\n        for (const i of arr) {\n            sum += i\n        }\n        return sum\n    }\n\n    const minFactors = (arr: number[]) => {\n        let min = arr[0]\n        for (const i of arr) {\n            if (i < min) min = i\n        }\n        return min\n    }\n\n    const","language":"typescript"}
{"task_id":"MBXP_TS\/512","completion":"  if (test_tuple.length == 0) {\n    return new Map()\n  }\n  let tuple_length = test_tuple.length\n  let current_tuple = test_tuple[0]\n  let result = new Map()\n  result.set(current_tuple, 1)\n  for (let i = 1; i < tuple_length; i++) {\n    let tuple_i = test_tuple[i]\n    if (current_tuple == tuple_i) {\n      result.set(tuple_i, result.get(tuple_i) + 1)\n    } else {\n      current_tuple = tuple_i\n      result.set(tuple_i, 1)\n    }\n  }\n  return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/513","completion":"    let res = [];\n    let temp = 0;\n    for (let i = 0; i < test_tup.length; i++) {\n        res.push(test_tup[i]);\n        temp = temp + test_tup[i];\n        res.push(temp);\n        temp = 0;\n    }\n    res.push(K);\n    return res;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/514","completion":"    var total = 0;\n    for (var i = 0; i < test_tup.length; i++) {\n        total = total + test_tup[i];\n    }\n    return total;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/515","completion":"    \/\/sort the array\n    arr.sort((a, b) => a - b);\n    \/\/calculate the sum of array\n    let sum = arr.reduce((a, b) => a + b);\n    \/\/ if the sum is not divisible by m return false\n    if (m > sum % m) return false;\n    \/\/ the sum of the array will be divisible by m so now we iterate through\n    \/\/ the array\n    for (let i = 0; i < arr.length; i++) {\n        \/\/ if the current element is a number and the next element is also a number\n        \/\/ and the sum of the array is not divisible by m then we can return true\n        \/\/ else we can return false\n        if (typeof arr[i] === \"number\" && typeof arr[i + 1] === \"number\" && sum % m === 0) return true;\n        else {\n            \/\/ if the current element is a number and the next element is not a number\n            ","language":"typescript"}
{"task_id":"MBXP_TS\/516","completion":"  if (nums.length < 2) return nums;\n\n  \/\/ 1. Get maximum and minimum\n  let max = nums[0];\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) max = nums[i];\n    if (nums[i] < min) min = nums[i];\n  }\n\n  \/\/ 2. Calculate the power\n  const power = 1 + Math.floor(Math.log10(max - min));\n  let digit = 1;\n  while (digit <= power) {\n    let buckets = Array.from({ length: 10 }, () => []);\n    for (let num of nums) {\n      let digitIdx = num % (10 ** digit);\n      buckets[digitIdx].push(num);\n    }\n\n    nums = [].concat(...buckets);\n    digit++;\n  }\n\n  return","language":"typescript"}
{"task_id":"MBXP_TS\/517","completion":"    return list1.reduce((acc, cur) => cur > 0 ? Math.max(acc, cur) : acc, 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/518","completion":"    let epsilon = 1e-15\n\n    if (num >= 0) {\n        return math.round(math.sqrt(num), epsilon)\n    } else {\n        return -math.round(math.sqrt(-num), epsilon)\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/519","completion":"    const side = math.pow(3, 1\/3)\n    const area = (2 * math.sqrt(2) \/ (math.sqrt(6) * math.sqrt(3))) * side * side\n    return area * num\n}","language":"typescript"}
{"task_id":"MBXP_TS\/520","completion":"    \/\/ TODO: Write your code here.\n    let m = l[0];\n    for (let i = 1; i < l.length; i++) {\n        m = Math.max(m, l[i]);\n    }\n\n    let r = l[0];\n    for (let i = 1; i < l.length; i++) {\n        r = Math.min(r, l[i]);\n    }\n\n    return Math.round(m * r \/ gcd(m, r));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/521","completion":"    return (x === y || x === z || y === z)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/522","completion":"    \/\/ TODO:\n}","language":"typescript"}
{"task_id":"MBXP_TS\/523","completion":"    var str1_length = str1.length;\n    if (str1_length == 0) {\n        return \"String length should be atleast 8.\";\n    }\n    var numberCount = 0;\n    var upperCaseCount = 0;\n    var lowerCaseCount = 0;\n    for (var i = 0; i < str1_length; i++) {\n        var ch = str1.charAt(i);\n        if (ch >= '0' && ch <= '9') {\n            numberCount++;\n        }\n        else if (ch >= 'A' && ch <= 'Z') {\n            upperCaseCount++;\n        }\n        else if (ch >= 'a' && ch <= 'z') {\n            lowerCaseCount++;\n        }\n    }\n    if (numberCount > 0) {\n        return \"String must have 1 number.\";\n    }\n    if (","language":"typescript"}
{"task_id":"MBXP_TS\/524","completion":"  let max = 0;\n  for (let i = 0; i < n; i++) {\n    let temp = arr[i];\n    let temp_sum = 0;\n    for (let j = i; j < n; j++) {\n      temp_sum += arr[j];\n      if (temp_sum > max) {\n        max = temp_sum;\n      }\n      if (temp > arr[j]) {\n        temp = arr[j];\n      }\n    }\n  }\n  return max;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/525","completion":"    return line1[0] * line1[1] + line2[0] * line2[1] === line1[1] * line2[0]\n}","language":"typescript"}
{"task_id":"MBXP_TS\/526","completion":"    if (!str1.length) {\n        return \"\"\n    }\n    return str1.charAt(0).toUpperCase() + str1.slice(1) + str1.charAt(str1.length - 1).toUpperCase();\n}","language":"typescript"}
{"task_id":"MBXP_TS\/527","completion":"    return 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/528","completion":"    let min_len = Number.POSITIVE_INFINITY;\n    const min_length_list = [];\n    const temp = [];\n\n    for (const sub_list of list1) {\n        temp.push(sub_list[0]);\n    }\n    min_length_list.push(temp);\n    \n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list1[i].length; j++) {\n            if (list1[i][j] === list1[i][0]) {\n                temp.push(list1[i][j]);\n                if (temp.length < min_len) {\n                    min_len = temp.length;\n                    min_length_list.length = 1;\n                    min_length_list[0] = temp;\n                }\n            }\n            else {\n                temp.length = 0;\n            }\n        }\n    ","language":"typescript"}
{"task_id":"MBXP_TS\/529","completion":"  if (n <= 1) return 1;\n  return jacobsthal_lucas(n - 1) + jacobsthal_lucas(n - 2) + n;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/530","completion":"    return (nums.reduce((a, b) => a + (b < 0 ? 1 : 0), 0) \/ nums.length) * 100\n}","language":"typescript"}
{"task_id":"MBXP_TS\/531","completion":"  const dp = Array(V + 1).fill(Infinity);\n  dp[0] = 0;\n  for (let i = 1; i <= V; i++) {\n      for (let coin of coins) {\n          if (i - coin >= 0) {\n              dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n          }\n      }\n  }\n  if (dp[V] === Infinity) return -1;\n  return dp[V];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/532","completion":"    if (str1.length !== str2.length) return false;\n\n    return (str1 === str2) ? true : false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/534","completion":"  const pattern_length = pattern.length;\n  let j = 0;\n  const matches = [];\n  while (j < text.length) {\n    if (text.startsWith(pattern, j)) {\n      matches.push(j);\n      j += pattern_length;\n    } else {\n      j++;\n    }\n  }\n  return matches;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/535","completion":"  let area = 2 * (Math.PI * r * r);\n  return area;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/536","completion":"    return list.slice(0, n);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/537","completion":"  var array = str1.split(' ');\n  var map = new Map();\n  for (let i = 0; i < array.length; i++) {\n    if (map.has(array[i])) {\n      return array[i];\n    } else {\n      map.set(array[i], array[i]);\n    }\n  }\n  return 'None';\n}","language":"typescript"}
{"task_id":"MBXP_TS\/538","completion":"  return str1.split(' ');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/539","completion":"    return bases_num.map(x => x ** index[bases_num.indexOf(x)]);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/540","completion":"    const freqMap = {};\n    let max = 0, min = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const val = arr[i];\n        if (freqMap[val] == undefined) freqMap[val] = 1;\n        else freqMap[val]++;\n        if (freqMap[val] > max) max = freqMap[val];\n        if (freqMap[val] < min) min = freqMap[val];\n    }\n    return max - min;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/541","completion":"    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum > n;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/542","completion":"  const str = text.replace(\/ |,|\\.\/g, ':');\n  return str;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/543","completion":"    \/\/ add two numbers and print number of digits of sum\n    const num1 = 9875;\n    const num2 = 10;\n    let sum = num1 + num2;\n    let count = 0;\n    while (sum > 0) {\n        count++;\n        sum = sum \/ 10;\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/544","completion":"  let s = \"\";\n  test_list.forEach(function(x){\n      s += x.join(' ') + ' ';\n  });\n  return s;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/545","completion":"    return (n & 0x55555555) << 1 | (n & 0xAAAAAAAA);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/546","completion":"    return string0.lastIndexOf(char)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/547","completion":"    let sum = 0;\n    for (let i = 0; i <= n; i++){\n        let b = i.toString(2)\n        for (let j = 0; j < b.length; j++){\n            sum += b[b.length - 1 - j] - b[j]\n        }\n    }\n    return sum\n}","language":"typescript"}
{"task_id":"MBXP_TS\/548","completion":"    \/\/ <unk>\ufffd\ufffd<unk>\ufffd<unk>\ufffdIJ <unk>12\ufffd<unk>\ufffd\ufffd<unk>\ufffd14 <unk>l\ufffdij<unk>\ufffd\ufffd<unk>\ufffd\ufffd<unk>\ufffd<unk>\ufffd\ufffd.\n}","language":"typescript"}
{"task_id":"MBXP_TS\/549","completion":"    \/\/ your code goes here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/550","completion":"  if (high - low < 1) return arr[low];\n  const mid = Math.floor((low + high) \/ 2);\n  if (mid % 2 === 0) {\n    if (arr[mid] > arr[mid + 1]) return arr[mid];\n    return find_Max(arr, mid + 1, high);\n  }\n  if (arr[mid] > arr[mid - 1]) return arr[mid];\n  return find_Max(arr, low, mid - 1);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/551","completion":"  const result = list1.map(row => row[n]);\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/552","completion":"    if (seq_nums.length == 1) {\n        return \"Linear Sequence\";\n    }\n    for (let i = 1; i < seq_nums.length; i++) {\n        if (seq_nums[i] - seq_nums[i-1] != 1) {\n            return \"Non Linear Sequence\";\n        }\n    }\n    return \"Linear Sequence\";\n}","language":"typescript"}
{"task_id":"MBXP_TS\/553","completion":"    \/\/ TODO: Code\n}","language":"typescript"}
{"task_id":"MBXP_TS\/554","completion":"    if (list.length === 0) return [];\n\n    let oddList = [];\n    let evenList = [];\n\n    for (let i = 0; i < list.length; i++) {\n        if (i % 2 === 0) {\n            evenList.push(list[i]);\n        } else {\n            oddList.push(list[i]);\n        }\n    }\n\n    return oddList;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/555","completion":"    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    let sumOfFirstN = 0;\n    for (let i = 0; i < n; i++) {\n        sumOfFirstN += i;\n    }\n    return sumOfFirstN - sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/556","completion":"    const count = {};\n    let result = 0;\n    for (let i = 0; i < A.length; i++) {\n        const current = A[i];\n        if ((current ^ N) in count) {\n            result += count[(current ^ N)];\n        }\n        count[current] = 1 + (count[current] || 0);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/557","completion":"    let string = string0.toLowerCase();\n\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] == string[i].toUpperCase()) {\n            string = string.replaceAt(i, string[i].toLowerCase());\n        } else {\n            string = string.replaceAt(i, string[i].toUpperCase());\n        }\n    }\n\n    return string;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/558","completion":"    const number_of_digits = n1 < n2 ? n2 : n1;\n    let distance = 0;\n    while (number_of_digits > 0) {\n        const digit = number_of_digits % 10;\n        distance += (n1 % (digit * 10)) < (n2 % (digit * 10)) ? 1 : 0;\n        number_of_digits = Math.floor(number_of_digits \/ 10);\n    }\n    return distance;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/559","completion":"    let maxSum = 0;\n    for (let i = 0; i < size; i++) {\n        maxSum += a[i];\n    }\n    let tempSum = maxSum;\n    for (let i = size; i < a.length; i++) {\n        tempSum = tempSum - a[i - size] + a[i];\n        maxSum = Math.max(maxSum, tempSum);\n    }\n    return maxSum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/560","completion":"    let result = []\n    for (let i = 0; i < test_tup1.length; i++) {\n        if (test_tup1.indexOf(test_tup1[i]) === -1 && result.indexOf(test_tup1[i]) === -1) {\n            result.push(test_tup1[i])\n        }\n    }\n    for (let i = 0; i < test_tup2.length; i++) {\n        if (test_tup2.indexOf(test_tup2[i]) === -1 && result.indexOf(test_tup2[i]) === -1) {\n            result.push(test_tup2[i])\n        }\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/561","completion":"    const map = new Map();\n    for (let i = 0; i < test_list.length; i++) {\n        const tuple = test_list[i];\n        for (let j = 0; j < tuple.length; j++) {\n            const currentElement = tuple[j];\n            const pairElements = map.get(currentElement);\n            if (pairElements == null) {\n                map.set(currentElement, [tuple[j]]);\n            } else {\n                pairElements.push(tuple[j]);\n            }\n        }\n    }\n    return map;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/562","completion":"    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const sub = lst[i];\n        if (sub.length > max) {\n            max = sub.length;\n        }\n    }\n    return max;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/563","completion":"    return text.match(\/\"(.*?)\"\/g)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/564","completion":"    let arr_len = arr.length;\n    let count = 0;\n    for (let i = 0; i < arr_len; i++) {\n        for (let j = i + 1; j < arr_len; j++) {\n            if (arr[i] === arr[j]) {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/565","completion":"    return word.split(\"\")\n}","language":"typescript"}
{"task_id":"MBXP_TS\/566","completion":"    let sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n = Math.floor(n \/ 10);\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/567","completion":"\t\/\/1. check for empty array\n\tif (list1.length == 0) {\n\t\treturn true;\n\t}\n\t\n\t\/\/2. check for an array containing only one element.\n\tif (list1.length == 1) {\n\t\treturn true;\n\t}\n\t\n\t\/\/3. check if first element is smaller than the last element.\n\tif (list1[0] > list1[list1.length-1]) {\n\t\treturn false;\n\t}\n\t\n\t\/\/4. recursively call issort_list() for remaining elements.\n\tlet mid = Math.ceil(list1.length \/ 2);\n\tlet left = list1.slice(0, mid);\n\tlet right = list1.slice(mid);\n\t\n\treturn issort_list(left) && issort_list(right);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/568","completion":"  \/\/ TODO: Implement.\n  return [];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/569","completion":"    return list1.sort(function(a, b) {\n        return (a[0] < b[0]) ? -1 : (a[0] > b[0]) ? 1 : 0;\n    });\n}","language":"typescript"}
{"task_id":"MBXP_TS\/570","completion":"  let count = 0;\n  for (let word of list1) {\n    for (let char of charlist) {\n      if (word.includes(char)) {\n        word = word.split(char).join('');\n      }\n    }\n    if (word !== '') {\n      list1[count] = word;\n      count++;\n    }\n  }\n  list1.splice(0, count);\n  return list1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/571","completion":"    const dp = new Array<number>(N).fill(0).map(() => new Array<number>(N).fill(0));\n    for (let i = 0; i < N; i++) {\n        dp[i][i] = arr[i];\n    }\n    for (let i = 0; i < N - 1; i++) {\n        for (let j = i + 1; j < N; j++) {\n            dp[i][j] = dp[i][j - 1] + arr[j];\n            if (j - i - 1 >= 0)\n                dp[i][j] = Math.max(dp[i][j], dp[i + 1][j - 1] - arr[i]);\n            if (dp[i][j] - arr[i] >= K)\n                return dp[i][j];\n        }\n    }\n    return dp[0][N - 1];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/572","completion":"    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n        const num = nums[i];\n        if (result.indexOf(num) === -1) {\n            result.push(num);\n        } else {\n            result.splice(result.indexOf(num), 1);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/573","completion":"    return list_data.reduce((p, c) => p * c, 1)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/574","completion":"    return 2 * Math.PI * r * r + 2 * Math.PI * r * h + Math.PI * r * r * Math.sin(2 * Math.PI * r \/ h)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/575","completion":"    if (L == R) return L\n    else {\n        let mid = Math.floor((L + R) \/ 2);\n        if ((A * N) == mid * N) return count_no(A, N, L, mid)\n        else return count_no(A, N, mid + 1, R)\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/576","completion":"    for (let i = 0; i <= n - m; i++) {\n        if (A.slice(i, i + m) == B) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/577","completion":"    if (n < 0 || n >= 1000) {\n        return 0;\n    } else {\n        return n % 10;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/578","completion":"    const res = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (i < list1.length || j < list2.length || k < list3.length) {\n        if (i === list1.length) {\n            while (j < list2.length) {\n                res.push(list2[j++]);\n            }\n            break;\n        }\n        if (j === list2.length) {\n            while (k < list3.length) {\n                res.push(list3[k++]);\n            }\n            break;\n        }\n        if (k === list3.length) {\n            while (i < list1.length) {\n                res.push(list1[i++]);\n            }\n            break;\n        }\n        if (list1[i] < list2[j]) {\n            res.push(list1","language":"typescript"}
{"task_id":"MBXP_TS\/579","completion":"    let result = []\n    for (let i = 0; i < test_tup1.length; i++) {\n        result.push(test_tup1[i])\n    }\n    for (let i = 0; i < test_tup2.length; i++) {\n        if (result.includes(test_tup2[i])) {\n            result.splice(result.indexOf(test_tup2[i]), 1)\n        }\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/580","completion":"  \/\/ TODO: Return the result of applying the function to test_tuple\n  const _tuple = test_tuple;\n  var result = [];\n  for(let i = 0; i < _tuple.length; i++){\n    if(_tuple[i] instanceof Array){\n      result.push(extract_even(_tuple[i]));\n    }else if(_tuple[i]%2 == 0){\n      result.push(_tuple[i]);\n    }\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/581","completion":"    return (b*s)*4;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/582","completion":"    if(Object.keys(dict1).length==0){\n        return true\n    }else{\n        return false\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/583","completion":"    \/\/ TODO\n    return 0\n}","language":"typescript"}
{"task_id":"MBXP_TS\/584","completion":"    const regex = \/[aeiou]\/gi;\n    const match = text.match(regex);\n    let result = '';\n    match.map(match => {\n        const start = text.indexOf(match);\n        const end = start + match.length;\n        result = result + match + '-' + start + '-' + end + ': ';\n    });\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/585","completion":"    const hp = new Heap((a, b) => a.price - b.price);\n\n    for (let i = 0; i < n; i++) {\n        hp.add(items[i]);\n    }\n    return hp.toArray();\n}","language":"typescript"}
{"task_id":"MBXP_TS\/586","completion":"  let result = a.slice(0, n);\n  result = result.concat(a.slice(n).splice(0, k));\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/587","completion":"    return listx.join(',').split(',')\n        .map(e => parseInt(e));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/588","completion":"    return Math.abs(Math.max(...nums) - Math.min(...nums));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/589","completion":"    let result = [];\n    for (let i = a; i < b; i++) {\n        if (i ** 2 === Math.floor(i ** 2)) {\n            result.push(i);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/591","completion":"    let length = newList.length;\n    let firstIndex = length - 1;\n    let lastIndex = 0;\n    \n    for (let i = 0; i < length; i++) {\n        if (i == 0) {\n            newList[i] = newList[firstIndex];\n            newList[firstIndex] = newList[i];\n        } else if (i == length - 1) {\n            newList[i] = newList[lastIndex];\n            newList[lastIndex] = newList[i];\n        } else {\n            newList[i] = newList[i];\n        }\n    }\n    return newList;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/592","completion":"    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        product *= (i + 1)\n        sum += (product)\n    }\n    return sum\n}","language":"typescript"}
{"task_id":"MBXP_TS\/593","completion":"    let str = ip.split(\".\");\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length == 1)\n            str[i] = \"0\" + str[i];\n    }\n    return str.join(\".\");\n}","language":"typescript"}
{"task_id":"MBXP_TS\/594","completion":"    let length = list1.length\n    let odd = list1[0]\n    let even = list1[0]\n    for(let i = 1; i < length; i++) {\n        if(list1[i] % 2 == 0) {\n            even = even + list1[i]\n        } else {\n            odd = odd + list1[i]\n        }\n    }\n    return odd - even\n}","language":"typescript"}
{"task_id":"MBXP_TS\/595","completion":"    const dict1 = getDict(str1);\n    const dict2 = getDict(str2);\n    let count = 0;\n    for(let i=0; i<str2.length; i++){\n        if(dict1[str2[i]] != str2[i]){\n            str2 = swap(str2, i, dict1[str2[i]]);\n            count++;\n        }\n    }\n    if(str2 == str1){\n        return count;\n    }\n    return \"Not Possible\";\n}","language":"typescript"}
{"task_id":"MBXP_TS\/596","completion":"    if(tuple_list.length === 0){\n        return 0\n    }\n    return sys.getsizeof(tuple_list[0]) + tuple_size(tuple_list.slice(1))\n}","language":"typescript"}
{"task_id":"MBXP_TS\/597","completion":"    let index1 = 0;\n    let index2 = 0;\n    while(index1 < m && index2 < n) {\n        if(arr1[index1] < arr2[index2]) {\n            index1 += 1;\n        } else if(arr1[index1] > arr2[index2]) {\n            index2 += 1;\n        } else {\n            index1 += 1;\n            index2 += 1;\n        }\n        if(index1 === m || index2 === n) {\n            break;\n        }\n    }\n    return (m + n + 1) % 2 == 0 ? arr1[index1 - 1] : arr2[index2 - 1];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/598","completion":"    let number: number;\n    let strNumber: string = number0.toString();\n    number = strNumber.length;\n    let sum: number = 0;\n    let number0AsNumber: number = parseInt(number0);\n    for (let i = 0; i < number; i++) {\n        sum += Math.pow(parseInt(strNumber[i]), number);\n    }\n    return number0AsNumber === sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/599","completion":"    let sum = 0;\n    let average;\n    for (let i = 1; i <= number0; i++) {\n        sum += i;\n    }\n    average = sum\/number0;\n    return [sum, average];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/600","completion":"    return (n & 1) === 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/602","completion":"    \/**\n     * 1.Create a Map with the given string.\n     * 2.Iterate over the string and check if the characters are repeated using the Map.\n     * 3.If the character is repeated, return it.\n     * 4.Else, return \"None\".\n     *\/\n    let charMap = new Map();\n    for (let char of str1) {\n        if (charMap.has(char)) {\n            return char;\n        }\n        charMap.set(char, 1);\n    }\n    return 'None';\n}","language":"typescript"}
{"task_id":"MBXP_TS\/603","completion":"    if (n < 1) return [];\n    if (n === 1) return [1];\n\n    let left = 1;\n    let right = 1;\n    let result = [left, right];\n\n    while (left + right < n) {\n        let sum = left + right;\n        left = right;\n        right = sum;\n\n        result.push(right);\n    }\n\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/604","completion":"    return s.split(' ').map(word => word.split('').reverse().join('')).join(' ');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/605","completion":"    if (num == 2 || num == 3) return true;\n    if (num == 1) return false;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n\n    for (let i = 5; i * i <= num; i += 6)\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/606","completion":"  return degree * math.pi \/ 180\n}","language":"typescript"}
{"task_id":"MBXP_TS\/607","completion":"    if (pattern === '') {\n        return [];\n    }\n    const pattern_to_match = `(?<=${pattern})(.|[\\r\\n])*`;\n    const matches = text.match(new RegExp(pattern_to_match));\n    if (matches === null) {\n        return [];\n    }\n    return matches.map((match: any) => {\n        const start = text.indexOf(match);\n        return [match, start, start + match.length];\n    });\n}","language":"typescript"}
{"task_id":"MBXP_TS\/608","completion":"    const bell_num = [1, 1];\n    for (let i = 2; i < n; i++) {\n        bell_num[i] = bell_num[i - 1] + bell_num[i - 2];\n    }\n    return bell_num[n - 1];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/609","completion":"    return Math.floor(A*N\/B)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/610","completion":"    let n = list1.length;\n    let newList = [];\n    let i = 0;\n    let j = L;\n    while (i < n) {\n        if (i === j) {\n            i++;\n            j = L;\n        }\n        newList.push(list1[i]);\n        i++;\n    }\n    return newList;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/611","completion":"    return test_list[0][N - 1];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/612","completion":"    if (lst.length == 1) {\n        return lst\n    } else {\n        let middle = Math.floor(lst.length\/2)\n        let left = lst.slice(0, middle)\n        let right = lst.slice(middle, lst.length)\n        return merge2(merge(left), merge(right))\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/613","completion":"    const tuple_list = test_list.map((tuple) => tuple[1]);\n    const maximum_value = tuple_list.map(element => element.sort((a,b)=> a-b)).flat(Infinity);\n    return test_list.filter((tuple) => tuple[1] == maximum_value[0]);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/614","completion":"    if (test_list.length === 0) return 0;\n    let result = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        result += cummulative_sum_helper(test_list[i], 0);\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/615","completion":"  return nums.map(e => e.reduce((acc, val) => acc + val, 0) \/ e.length)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/616","completion":"  \/\/ Solution \n}","language":"typescript"}
{"task_id":"MBXP_TS\/617","completion":"    if (d === 0 && a === b) {\n        return 0;\n    }\n    if (d > 0 && a >= b) {\n        return Infinity;\n    }\n\n    let minJumps = Infinity;\n    for (let i = 1; i <= Math.min(a, b) + 1; i++) {\n        const res = min_Jumps(a - i, b - i, d - 1);\n        if (res !== Infinity) {\n            minJumps = Math.min(minJumps, res + 1);\n        }\n    }\n    return minJumps;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/618","completion":"    let result = nums1.map(x => x\/nums2[0])\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/619","completion":"\tlet temp_str = test_str.split('');\n\tlet temp_num = '';\n\tfor(let i = 0; i < temp_str.length; i += 1) {\n\t\tif(temp_str[i].search(\/[0-9]\/) != -1) {\n\t\t\ttemp_num += temp_str[i];\n\t\t}\n\t}\n\tlet num_str = '';\n\tfor(let i = 0; i < temp_str.length; i += 1) {\n\t\tif(temp_str[i].search(\/[0-9]\/) == -1) {\n\t\t\tnum_str += temp_str[i];\n\t\t}\n\t}\n\treturn num_str + temp_num;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/620","completion":"  return 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/621","completion":"    \/\/ your code here\n    let new_list = [];\n    for (let i = 0; i < test_list.length; i++) {\n        new_list.push(test_list[i].split(\"\").map(Number).map(e => e + K).map(e => e.toString()).join(\"\"));\n    }\n    return new_list;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/622","completion":"    if (n % 2 != 0) return median(arr1, arr2, n - 1)\n    const len = n \/ 2\n    return (median(arr1, arr2, len - 1) + median(arr1, arr2, len)) \/ 2\n}","language":"typescript"}
{"task_id":"MBXP_TS\/623","completion":"    return nums.map(x => x**n)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/624","completion":"    return string0.toUpperCase();\n}","language":"typescript"}
{"task_id":"MBXP_TS\/625","completion":"    let temp = newList[0];\n    newList[0] = newList[newList.length - 1];\n    newList[newList.length - 1] = temp;\n    return newList;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/626","completion":"    return Math.round(Math.PI * Math.pow(r, 2) \/ 2);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/627","completion":"    if (array.length == 0) return 0\n    if (start == 0 && end == array.length) {\n        if (array.filter(x => x != 0).length == 0) {\n            return 0\n        }\n    }\n    \/\/ if (array[start] == 0) {\n    \/\/     start++\n    \/\/     if (start > end) return 0\n    \/\/ }\n    if (start > end) return 0\n    const tempArray = array.slice(start, end + 1)\n    \/\/ console.log(tempArray)\n    const temp = tempArray.find(x => x != 0)\n    if (temp == undefined) {\n        return start + tempArray.findIndex(x => x == 0)\n    } else {\n        return find_First_Missing(array, start + tempArray.findIndex(x => x == 0), end)\n   ","language":"typescript"}
{"task_id":"MBXP_TS\/628","completion":"    let str = string0.split(' ').join('%20');\n    return str\n}","language":"typescript"}
{"task_id":"MBXP_TS\/629","completion":"    return list.filter(x => x % 2 === 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/630","completion":"  let coord_list = [];\n  let coord_tup = [];\n  coord_tup.push(test_tup[0]);\n  coord_tup.push(test_tup[1]);\n  coord_list.push(coord_tup);\n  while (test_tup[0] != test_tup[1]) {\n    coord_tup = [];\n    coord_tup.push(test_tup[0]);\n    coord_tup.push(test_tup[1]);\n    if (test_tup[0] < test_tup[1]) {\n      test_tup[0]++;\n      test_tup[1]--;\n    } else if (test_tup[0] > test_tup[1]) {\n      test_tup[0]--;\n      test_tup[1]++;\n    }\n    coord_list.push(coord_tup);\n  }\n  return coord_list;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/631","completion":"    return text.replace(\/[ ]+\/g, \"_\");\n}","language":"typescript"}
{"task_id":"MBXP_TS\/632","completion":"    const zero_list = [];\n    const non_zero_list = [];\n    \n    for (let num of num_list) {\n        if (num === 0) {\n            zero_list.push(num);\n        } else {\n            non_zero_list.push(num);\n        }\n    }\n    \n    non_zero_list.push(...zero_list);\n    \n    return non_zero_list;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/633","completion":"    let sum = 0;\n    arr.forEach((element) => {\n        sum = sum ^ element;\n    });\n    return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/634","completion":"    let total = 0;\n    for (let i = 2; i <= n; i += 2) {\n        total += Math.pow(i, 4)\n    }\n    return total;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/635","completion":"    \/\/ Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/636","completion":"    let discriminant = b ** 2 - 4 * a * c;\n    if (discriminant > 0) {\n        const root1 = (-b + Math.sqrt(discriminant)) \/ (2 * a);\n        const root2 = (-b - Math.sqrt(discriminant)) \/ (2 * a);\n        return `Yes, roots are ${root1} and ${root2}`;\n    } else if (discriminant == 0) {\n        return `Yes, roots are ${-b \/ (2 * a)}`;\n    } else {\n        return `No`;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/637","completion":"    if (actual_cost > sale_amount) {\n        return true\n    }\n    return false\n}","language":"typescript"}
{"task_id":"MBXP_TS\/638","completion":"    return .6*v + .4*math.sqrt(v*v + 2*t*t - 2*v*t)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/639","completion":"    let sum = 0;\n    for (let i = 0; i < sample_names.length; i++) {\n        if (!sample_names[i].startsWith(\"a\")) {\n            sum = sum + sample_names[i].length;\n        }\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/640","completion":"    \/\/ Solution 1 - Stack - Time complexity O(N)\n    let stack = [];\n    for (let item of items) {\n        if (item === '(') {\n            stack.push(item);\n        } else if (item === ')') {\n            if (stack.length > 0) {\n                stack.pop();\n            } else {\n                return \"\";\n            }\n        }\n    }\n    return stack.join('');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/641","completion":"  if (n <= 0) return 0;\n  if (n % 2 === 0) return n + 1;\n  return n - 1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/642","completion":"    let res = new Set();\n\n    test_list.forEach((arr: Array<Array<number>>) => {\n        let similar = new Set();\n\n        for(let i = 1; i < arr.length; i++) {\n            if(arr[i - 1].length === arr[i].length && arr[i - 1].every((value, index) => value === arr[i][index])) {\n                similar.add(arr[i - 1]);\n            }\n        }\n\n        if(similar.size > 0) {\n            res.add(Array.from(similar));\n        }\n    });\n\n    return res;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/643","completion":"    \/\/ TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/644","completion":"    const temp = input.slice();\n    let result = []\n    for (let i = 0; i < temp.length; i++) {\n        const last = result[result.length - 1]\n        if (i + 1 === k) {\n            result.push(temp[i])\n        } else if (last === undefined) {\n            result.push(temp[i])\n        } else {\n            result.push(last)\n        }\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/645","completion":"    let result = 0;\n    let len = test_list.length;\n    for(let i = 0; i < len; i++){\n        result = result + test_list[i][K]\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/646","completion":"    let total = 0;\n    for(let i = 1; i <= N; i++) {\n        for(let j = 1; j <= N; j++) {\n            for(let k = 1; k <= N; k++) {\n                total += i*i*i + j*j*j + k*k*k;\n            }\n        }\n    }\n    return total;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/647","completion":"    return text.split(\/(?=[A-Z])\/).filter(e=>e.length > 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/648","completion":"  let n = lst.length - 2;\n  for (let i = 0; i <= n; i++) {\n    if (i % 2 == 0) {\n      let tmp = lst[i];\n      lst[i] = lst[i+1];\n      lst[i+1] = tmp;\n    }\n  }\n  return lst;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/649","completion":"    let sum = 0;\n    for(let i = m; i <= n; i++){\n        sum += nums[i];\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/650","completion":"    \/\/ TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/651","completion":"    let flag = false;\n    for (let i = 0; i < test_tup1.length; i++) {\n        for (let j = 0; j < test_tup2.length; j++) {\n            if (test_tup1[i] == test_tup2[j]) {\n                flag = true;\n                break;\n            } else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/652","completion":"    \/\/ TODO: answer here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/653","completion":"  let map = new Map();\n  \n  for (let i = 0; i < l.length; i++) {\n    if (map.has(l[i][0])) {\n      map.get(l[i][0]).push(l[i][1]);\n    } else {\n      map.set(l[i][0], [l[i][1]]);\n    }\n  }\n  return map;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/654","completion":"\treturn 2 * (l + b);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/655","completion":"    let answer = 0;\n\n    for (let i = 0; i < n; i++) {\n        answer += Math.pow(5, i);\n    }\n\n    return answer;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/656","completion":"    if (a.length != b.length)\n        return 0;\n    let i = 0, j = 0;\n    let arr1 = new Array(n), arr2 = new Array(n);\n    let sum1 = 0, sum2 = 0;\n    for (; i < a.length; i++, j++) {\n        while (j < a.length && a[i] == a[j])\n            j++;\n        arr1[j] = j;\n    }\n    for (; j < n; j++)\n        arr1[j] = n;\n    i = 0;\n    for (; i < b.length; i++, j++) {\n        while (j < b.length && b[i] == b[j])\n            j++;\n        arr2[j] = j;\n    }\n    for (; j < n; j++)\n        arr2[j] = n;\n    i = 0;\n   ","language":"typescript"}
{"task_id":"MBXP_TS\/657","completion":"  \/\/ your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/658","completion":"    \/\/ TODO: your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/659","completion":"    let result = [];\n    let len = x.length;\n    let i = 0;\n    for (i; i < len; i++) {\n        if (!result.includes(x[i])) {\n            result.push(x[i]);\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/660","completion":"    if (r1 <= l2) {\n        return null;\n    }\n    if (l1 >= r2) {\n        return null;\n    }\n    if ((r1 - l1) < (r2 - l2)) {\n        return [l1, r1];\n    }\n    return [l2, r2];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/661","completion":"  let max = -Infinity;\n\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        max = Math.max(max, sum(arr[i], arr[j], arr[k]));\n      }\n    }\n  }\n  \n  return max;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/662","completion":"    \/\/ TODO: Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/663","completion":"  \/\/ TODO: implement\n  return 0\n}","language":"typescript"}
{"task_id":"MBXP_TS\/664","completion":"    \/\/ your code\n    return 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/665","completion":"\tconst first_element = num_list[0];\n\tnum_list.shift();\n\tnum_list.push(first_element);\n\treturn num_list;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/666","completion":"  return string0.split(char).length - 1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/667","completion":"  string0 = string0.toLowerCase();\n  let count = 0;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string0.indexOf(vowels[i]) > -1) {\n      count++;\n    }\n  }\n  return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/668","completion":"    let result: string = string0;\n\n    result = result.replace(char, char + char);\n\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/669","completion":"  \/\/ write the solution here.\n}","language":"typescript"}
{"task_id":"MBXP_TS\/670","completion":"    \/\/ If array is empty, return false.\n    if (nums.length === 0) return false;\n\n    let lastElement = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] < lastElement) return false;\n        lastElement = nums[i];\n    }\n\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/671","completion":"    if (n < 0) return -1;\n    var lastSetBit = math.log2(n) - 1;\n    return (n & ~(1 << lastSetBit));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/672","completion":"  if (num1 > num2 && num1 > num3) {\n    return num1;\n  } else if (num2 > num1 && num2 > num3) {\n    return num2;\n  } else {\n    return num3;\n  }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/673","completion":"  const nums = list.reduce((total, num) => total * 10 + num, 0)\n  return nums\n}","language":"typescript"}
{"task_id":"MBXP_TS\/674","completion":"    \/\/ your code here\n    return [... new Set(string0.split(' '))]\n    .join(\" \");\n}","language":"typescript"}
{"task_id":"MBXP_TS\/675","completion":"  if (x <= n && x >= m && y <= n && y >= m) {\n    return x + y;\n  }\n  return 20;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/676","completion":"    return text1.replaceAll(\/[^a-zA-Z0-9]\/g, '');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/677","completion":"  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  } else {\n    return false;\n  }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/678","completion":"    return str1.replace(' ', '');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/679","completion":"    return ditionary.keys()[key]\n}","language":"typescript"}
{"task_id":"MBXP_TS\/680","completion":"    if (nums.length < 2) {\n        return false;\n    }\n    let min = nums[0];\n    for (const num of nums) {\n        if (num > min) {\n            return true;\n        }\n        min = num;\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/681","completion":"    for (let i = 2; i < n; i++)\n    {\n        if (n % i === 0)\n        {\n            return i;\n        }\n    }\n    return n;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/682","completion":"  const result = nums1.map((n1) => {\n    return nums2.map((n2) => {\n      return n1 * n2;\n    });\n  });\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/683","completion":"    return (n * (n + 1) * (2 * n + 1)) \/ 6 % 1 === 0\n}","language":"typescript"}
{"task_id":"MBXP_TS\/684","completion":"    return (str.match(new RegExp(x, 'g')) || []).length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/685","completion":"    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        let flag = true;\n        for (let j = 2; j <= i \/ 2; j++) {\n            if (i % j === 0) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            count += i;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/686","completion":"    let freqMap: Map<number, number> = new Map<number, number>();\n    for (let i = 0; i < test_tup.length; i++) {\n        if (!freqMap.has(test_tup[i])) {\n            freqMap.set(test_tup[i], 1);\n        } else {\n            freqMap.set(test_tup[i], freqMap.get(test_tup[i]) + 1);\n        }\n    }\n    let freqResult: string = \"\";\n    for (let [key, value] of freqMap.entries()) {\n        freqResult += `${key} => ${value}\\n`;\n    }\n    return freqResult;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/687","completion":"    if (a == 0) return b;\n    return recur_gcd(b % a, a);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/688","completion":"  return math.sqrt(math.pow(math.complex(a),2) + math.pow(math.complex(b),2))\n}","language":"typescript"}
{"task_id":"MBXP_TS\/689","completion":"    \/\/ check for empty array\n    if (arr.length == 0) {\n        return 0\n    }\n\n    \/\/ init dp array\n    const dp = Array.from({ length: n }, () => new Array(arr.length))\n\n    \/\/ init dp values\n    for (let i = 0; i < arr.length; i++) {\n        dp[i][i] = 0\n    }\n\n    \/\/ fill the diagonal values\n    for (let i = 0; i < n; i++) {\n        if (i + arr[i] > n - 1) {\n            return -1\n        }\n        if (i + arr[i] < n - 1) {\n            dp[i][i + arr[i]] = 1\n        }\n    }\n\n    \/\/ fill the lower triangle values\n    for (let i = 0; i < n - 2; i++) {\n        if ","language":"typescript"}
{"task_id":"MBXP_TS\/690","completion":"    const res = [nums[0]]\n    for (let i = 1; i < nums.length; i++) {\n        res.push(res[i - 1] * nums[i])\n    }\n    return res\n}","language":"typescript"}
{"task_id":"MBXP_TS\/691","completion":"    \/\/TODO: \n    return null;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/692","completion":"    if (N < 0) {\n        return -1;\n    }\n    else if (N <= 10) {\n        return N;\n    }\n\n    let result = 0;\n    for (let i = 1; i <= N; i++) {\n        result = result * 10 + i;\n    }\n    return Math.floor(result \/ 10) % 10;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/693","completion":"    const removeMultipleSpaces = \/ {2,}\/g;\n    return text1.replaceAll(removeMultipleSpaces, ' ');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/694","completion":"    let all_numbers = [];\n    let unique_numbers = [];\n    test_dict.forEach((key, val) => {\n        val.forEach(element => all_numbers.push(element));\n    });\n    all_numbers.forEach(element => {\n        if (unique_numbers.indexOf(element) == -1) unique_numbers.push(element);\n    });\n    return unique_numbers;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/695","completion":"    if (test_tup1.length != test_tup2.length) {\n        return false;\n    }\n    \n    for (let i = 0; i < test_tup1.length; i++) {\n        if (test_tup2[i] > test_tup1[i]) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/696","completion":"    const result = [];\n\n    while (list1.length > 0 && list2.length > 0) {\n        result.push(list1.shift().concat(list2.shift()));\n    }\n\n    if (list1.length == 0) {\n        while (list2.length > 0) {\n            result.push(list2.shift());\n        }\n    }\n\n    if (list2.length == 0) {\n        while (list1.length > 0) {\n            result.push(list1.shift());\n        }\n    }\n\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/697","completion":"  return array_nums.filter(num => num % 2 === 0).length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/698","completion":"    const test_key = Array.from(test_dict.keys()).sort((a,b) => a[0]*a[1] - b[0]*b[1]);\n    return new Map(test_key.map(e => [e, test_dict.get(e)]));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/699","completion":"    let n = str1.length, swaps = 0\n    for (let i = 0; i < n; ++i) {\n        if (str1[i] !== str2[i]) {\n            swaps += 1\n            let temp = str1[i]\n            str1[i] = str2[i]\n            str2[i] = temp\n        }\n    }\n    return swaps === 0 ? \"Not Possible\" : swaps\n}","language":"typescript"}
{"task_id":"MBXP_TS\/700","completion":"    let count = 0;\n    for (let i=0;i<li.length;i++){\n        if (li[i] >= min && li[i] <= max){\n            count += 1;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/701","completion":"    if (arr.length === 0) return -1;\n    if (arr.length === 1) return 0;\n    let leftSum = 0, rightSum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        rightSum += arr[i];\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (leftSum === rightSum) {\n            return i;\n        }\n        leftSum += arr[i];\n    }\n    return -1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/702","completion":"    const amin = Math.min(...arr);\n    const amax = Math.max(...arr);\n    if (amax - amin > k) {\n        return removals(arr.filter(x => x > amin + k), n, k);\n    }\n    return arr.length - (n - (amax - amin));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/703","completion":"    return d.has(x);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/704","completion":"    \/**\n     * Sum the harmonically spaced numbers in a range.\n     * @param {number} start - start of range \n     * @param {number} end - end of range \n     * @return {number} sum - sum of harmonically spaced numbers in a range\n     *\/\n    function sumHars(start, end) {\n        const result = [];\n        for (let i = start; i <= end; i++) {\n            result.push(1 \/ i);\n        }\n        return result.reduce((acc, curr) => acc + curr);\n    }\n    return sumHars(1, n);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/705","completion":"    const list2 = list1.sort((a,b) => {\n        return a.length - b.length || a.join(\"\").localeCompare(b.join(\"\"))\n    })\n    return list2\n}","language":"typescript"}
{"task_id":"MBXP_TS\/706","completion":"    const map = new Map();\n    for (let i = 0; i < m; i++) {\n        if (!map.has(arr1[i])) {\n            map.set(arr1[i], 0);\n        }\n        map.set(arr1[i], map.get(arr1[i]) + 1);\n    }\n    for (let i = 0; i < n; i++) {\n        if (map.has(arr2[i])) {\n            map.set(arr2[i], map.get(arr2[i]) - 1);\n            if (map.get(arr2[i]) == 0) {\n                map.delete(arr2[i]);\n            }\n        } else {\n            return false;\n        }\n    }\n    if (map.size == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/707","completion":"    if (n <= 0) return 0;\n    return n % 2 ? count_Set_Bits(Math.floor(n \/ 2)) + 1 : count_Set_Bits(Math.floor(n \/ 2));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/708","completion":"    const string = string0.split(\" \")\n    const result = []\n    for (let i = 0; i < string.length; i++) {\n      if (string[i].length > 0) {\n        result.push(string[i])\n      }\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/709","completion":"    \/\/ TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/710","completion":"  if (test_tup.length < 2) {\n    return [test_tup[0], test_tup[0]]\n  }\n  return [test_tup[0], test_tup[test_tup.length - 1]]\n}","language":"typescript"}
{"task_id":"MBXP_TS\/711","completion":"    \/\/your code here\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/712","completion":"  let arr = [];\n  const arr2 = [];\n  for(let i = 0; i < list1.length; i++) {\n    if(list1[i].length > 0) {\n      arr.push(list1[i][0]);\n    }\n  }\n  \n  for(let i = 0; i < arr.length; i++) {\n    arr2.push(arr[i]);\n    if(arr2.includes(arr[i])) {\n      arr2.splice(arr2.indexOf(arr[i]), 1);\n    }\n  }\n  \n  return arr2;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/713","completion":"    let answer = false;\n    let flag = true;\n    \n    while (flag) {\n        flag = false;\n        for (let i = 0; i < test_tup.length; i++) {\n            if (test_tup[i]) {\n                flag = true;\n                break;\n            }\n        }\n    }\n    \n    return answer;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/714","completion":"    let count = 0;\n    let arr = []\n    while (n > 1) {\n        if (n % 2 === 0) {\n            n = n \/ 2;\n            arr.push(2)\n        } else {\n            n = n - 1;\n            arr.push(1)\n        }\n        count++\n    }\n    arr.forEach(element => {\n        let num = 1;\n        while (element * num <= n) {\n            if (n % num === 0) {\n                count++\n            }\n            num++\n        }\n    })\n    return count\n}","language":"typescript"}
{"task_id":"MBXP_TS\/715","completion":"    \/\/ TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/716","completion":"    let result = 2 * (a + a + a) + 2;\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/717","completion":"    \/\/ TODO: Implement SD calc\n}","language":"typescript"}
{"task_id":"MBXP_TS\/718","completion":"    \/\/ Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/719","completion":"    if (text.indexOf('a') >= 0) {\n        let count = 0\n        while (text.indexOf('b', count) >= 0) {\n            count++\n        }\n        if (count > 0) {\n            return 'Found a match!'\n        }\n    }\n    return 'Not matched!'\n}","language":"typescript"}
{"task_id":"MBXP_TS\/720","completion":"  \/\/ \"TODO: Write solution here\"\n  return test_tup;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/721","completion":"  const dp = new Array<Array<number>>(N).fill(null).map(() => new Array<number>(N).fill(null).map(() => new Array<number>(N).fill(null)))\n  dp[0][0][0] = cost[0][0]\n  for (let i = 1; i < N; i++) {\n    dp[0][i][0] = cost[0][i] + dp[0][i - 1][0]\n  }\n  for (let j = 1; j < N; j++) {\n    dp[j][0][0] = cost[j][0] + dp[j - 1][0][0]\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < N; j++) {\n      dp[i][j][0] = cost[i][j] + Math.max(dp[i - 1][j","language":"typescript"}
{"task_id":"MBXP_TS\/722","completion":"  return students.filter((student) => student[1] <= h && student[0] <= w)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/723","completion":"  \/\/ your code\n}","language":"typescript"}
{"task_id":"MBXP_TS\/724","completion":"    if (power == 1) return base;\n    return base + power_base_sum(base, power - 1);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/725","completion":"    const regex = \/\"(.*?)\"\/g;\n    const result = text1.match(regex);\n\n    return result ? result : [];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/726","completion":"    return test_tup.map(element => element*element)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/727","completion":"    return S.replaceAll(\/[^a-zA-Z0-9]\/g, \"\");\n}","language":"typescript"}
{"task_id":"MBXP_TS\/728","completion":"    let arr = [];\n    for(let i = 0; i<lst1.length; i++){\n        arr.push(lst1[i]+lst2[i]);\n    }\n    return arr;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/729","completion":"    return nums1.map((el,i) => el + nums2[i]);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/730","completion":"  let res = [], \n      length = nums.length,\n      i = 0, \n      last = nums[0];\n  \n  while(i < length) {\n    if(last !== nums[i] || i === length - 1) {\n      res.push(nums[i]);\n      last = nums[i];\n    }\n    i++;\n  }\n  return res;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/731","completion":"    return 2 * math.pi * r * (h + r)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/732","completion":"    return text.split(' ').join(':')\n        .split(',')\n        .join(':')\n        .split('.')\n        .join(':');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/733","completion":"  let low = 0\n  let high = A.length - 1\n  while (low <= high) {\n    const mid = (low + high) >> 1\n    if (A[mid] < x) low = mid + 1\n    else if (A[mid] > x) high = mid - 1\n    else return mid\n  }\n  return -1\n}","language":"typescript"}
{"task_id":"MBXP_TS\/734","completion":"    if (arr == null || arr.length < n) return 0;\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        result += arr[i];\n    }\n    let sum = result;\n    for (let i = 1; i < n; i++) {\n        result = result - arr[i - 1] + arr[i];\n        sum = sum + result * arr[i - 1];\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/735","completion":"    return n ^ (n >> 1);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/736","completion":"  let left = 0;\n  let right = a.length;\n  while (left < right) {\n    const mid = Math.floor((left + right) \/ 2);\n    if (a[mid] >= x) right = mid;\n    else left = mid + 1;\n  }\n  return left;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/737","completion":"    return `Valid`;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/738","completion":"    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= (1 - 1 \/ i)\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/739","completion":"    \/\/ your code here\n    let num = math.pow(10, n)\n    let sum = 0\n    for (let i = 1; i < n + 1; i++) {\n        let digit = 1\n        for (let j = 1; j <= i; j++) {\n            digit *= j\n        }\n        sum += digit\n    }\n    sum -= math.pow(10, n - 1)\n    return sum\n}","language":"typescript"}
{"task_id":"MBXP_TS\/740","completion":"    const test_dict = new Map();\n    for (let i = 0; i < test_tup.length - 1; i++) {\n        const key = test_tup[i];\n        const val = test_tup[i + 1];\n        test_dict.set(key, val);\n    }\n    return test_dict;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/741","completion":"    if (s.length < 1)\n        return true;\n    for (let i = 1; i < s.length; i++) {\n        if (s[i] != s[0])\n            return false;\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/742","completion":"    const s = side;\n    const area = (1\/2)*s*s*s;\n    return area;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/743","completion":"    return list1.slice(-(m % n)).concat(list1.slice(0, m % n))\n}","language":"typescript"}
{"task_id":"MBXP_TS\/744","completion":"    for (let i = 0; i < test_tup.length; i++) {\n        if (test_tup[i] === undefined) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/745","completion":"  const arr = [];\n  for (let i = startnum; i <= endnum; i++) {\n    let num = i.toString();\n    let len = num.length;\n    for (let j = 0; j < len; j++) {\n      if (i % num[j] !== 0) {\n        arr.push(i);\n        break;\n      }\n    }\n  }\n  return arr;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/746","completion":"    const pi = 3.14;\n    const p = 2 * pi * r;\n    const area = p * a;\n    return area;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/747","completion":"    \/\/ LCS\n    \/\/ find LCS for all i and j\n    let LCS = lcs(X, Y);\n    let LCS2 = lcs(X, Z);\n    let LCS3 = lcs(Y, Z);\n    let lcs = [LCS, LCS2, LCS3];\n\n    let k = m;\n    let l = n;\n\n    \/\/ LCS of all i and j is the same, find LCS of all i and j\n    while (l > 0 && k > 0) {\n        if (lcs[k - 1][l - 1] == lcs[k][l]) {\n            k--;\n            l--;\n        } else if (lcs[k - 1][l - 1] < lcs[k][l]) {\n            k--;\n        } else {\n            l--;\n        }\n    }\n\n    return lcs[0][0];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/748","completion":"  const regex = \/\\b\\w+\\b\/gi\n  return str1.replace(regex, function (match) {\n    return match.replace(\/\\w\/, function (word) {\n      return word.toUpperCase() + ' '\n    })\n  })\n}","language":"typescript"}
{"task_id":"MBXP_TS\/749","completion":"    const nums: Array<number> = [];\n\n    for (const num of nums_str) {\n        nums.push(Number(num));\n    }\n\n    return nums.sort((a,b) => a-b);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/750","completion":"    return test_list.concat(test_tup);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/751","completion":"    if (arr[2 * i + 1] < arr[i]) return false;\n    if (arr[2 * i + 2] < arr[i]) return false;\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/752","completion":"    let m = 1, t = 1;\n    for(let i = 1; i <= n; i++) {\n        m *= (t + 1);\n        t *= (t + 2);\n    }\n    return m;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/753","completion":"    let temp = test_list.slice()\n\n    if(temp.length < K)\n        return temp\n    \n    let i = 0, j = 0, n = temp.length;\n\n    while(j < n){\n        let k = 0;\n        while(k < K && i < n){\n            if(temp[i][1] > temp[j][1]){\n                j = i;\n                break;\n            }\n            k++;\n            i++;\n        }\n        if(k === K)\n            temp.splice(j, 0, temp[i]);\n        j++;\n    }\n\n    return temp;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/754","completion":"    \/\/ write code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/755","completion":"    if (numbers.length == 0) {\n        return null;\n    }\n    if (numbers.length == 1) {\n        return numbers[0];\n    }\n\n    let sorted = numbers.slice().sort((a,b) => a - b);\n\n    return sorted[1];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/756","completion":"    if (text.includes(\"a\") && text.match(\/[a-z]b\/)) return \"Found a match!\";\n    return \"Not matched!\";\n}","language":"typescript"}
{"task_id":"MBXP_TS\/757","completion":"    let count = 0;\n    for (let i = 0; i < test_list.length - 1; i++) {\n        for (let j = i + 1; j < test_list.length; j++) {\n            if (test_list[i].length == test_list[j].length) {\n                if (test_list[i].split(\"\").reverse().join(\"\") == test_list[j]) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/758","completion":"    const hash = new Map();\n    for (const value of list1) {\n        const tuple = tuple_to_hashable(value);\n        if (!hash.has(tuple)) {\n            hash.set(tuple, 1);\n        } else {\n            hash.set(tuple, hash.get(tuple) + 1);\n        }\n    }\n    return hash;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/759","completion":"  if (num.includes('.') || num.includes(',')) {\n    return false\n  }\n  if (num.includes('-')) {\n    const split = num.split('-')\n    if (split[1].length > 2) return false\n    if (split[1].length === 2) {\n      return split[1][0] === split[1][1]\n    }\n  }\n  return true\n}","language":"typescript"}
{"task_id":"MBXP_TS\/760","completion":"    if (new Set(arr).size !== arr.length) return 'NO'\n    else return 'YES'\n}","language":"typescript"}
{"task_id":"MBXP_TS\/761","completion":"    let angle = a * (Math.PI \/ 180)\n    let d_angle = d * (Math.PI \/ 180)\n    let result = Math.abs(d_angle - angle)\n    if (result > 0.00001) {\n        return result\n    }\n    return null\n}","language":"typescript"}
{"task_id":"MBXP_TS\/762","completion":"    if (monthnum3 % 4 === 0) {\n        return monthnum3 % 100 === 0 ? monthnum3 % 400 === 0 : true;\n    }\n    return monthnum3 % 2 === 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/763","completion":"    if (arr.length <= 1) return arr[0] - arr[1];\n    let min = 999999;\n    arr.sort((a,b)=> a-b);\n    let i = 0;\n    while (i < arr.length-1) {\n        min = Math.min(min, Math.abs(arr[i] - arr[i+1]));\n        i++;\n    }\n    return min;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/764","completion":"  return str.match(\/[0-9]\/g).length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/765","completion":"  let temp = math.factorial(n)\n  temp = math.pow(temp, n)\n  temp = math.factorial(n - 1)\n  temp = math.pow(temp, n - 1)\n  temp = math.factorial(n - 2)\n  return n * temp \/ (math.factorial(n) * math.factorial(n - 1) * math.factorial(n - 2))\n}","language":"typescript"}
{"task_id":"MBXP_TS\/766","completion":"  const pairs = [];\n  for (let i = 0; i < l1.length - 1; i++) {\n    pairs.push([l1[i], l1[i+1]]);\n  }\n  return pairs;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/767","completion":"    const hashMap = new Map();\n    let pairs = 0;\n    for (let i = 0; i < n; i++) {\n        const a = arr[i];\n        const b = sum - a;\n        if (hashMap.has(b)) {\n            pairs += hashMap.get(b);\n        }\n        hashMap.set(a, hashMap.has(a) ? hashMap.get(a) + 1 : 1);\n    }\n    return pairs;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/768","completion":"    if (x % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/769","completion":"  \/\/ TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/770","completion":"    let sum = 0;\n\n    for (let i = 1; i <= n; i++) {\n        sum += 2 * i * i * i;\n    }\n\n    return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/771","completion":"    \/\/ TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/772","completion":"    let newStr = '';\n    let i = 0;\n    while(i < test_str.length) {\n        if (test_str[i] != ' ' && test_str[i] != '\\n') {\n            if (test_str[i+K] == undefined) {\n                newStr += test_str[i];\n            } else {\n                newStr += test_str[i+K];\n            }\n        }\n        i++;\n    }\n    return newStr;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/773","completion":"\tif (pattern == '') return [];\n\t\n\tconst result = [];\n\tconst n = text.length, m = pattern.length;\n\n\tfor (let i = 0; i < n - m + 1; i++) {\n\t\tlet j;\n\t\tfor (j = 0; j < m && text[i + j] == pattern[j]; j++);\n\t\tif (j == m) result.push({\n\t\t\toccurrence: i,\n\t\t\tposition: i\n\t\t});\n\t}\n\treturn result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/774","completion":"  const regex = \/[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\/;\n  return regex.test(email) ? 'Valid Email' : 'Invalid Email';\n}","language":"typescript"}
{"task_id":"MBXP_TS\/775","completion":"    \/\/code here\n    for(let i = 0; i < nums.length; i++){\n        if(i % 2 === 1)\n            if(nums[i] % 2 === 1)\n                return false\n    }\n    return true\n}","language":"typescript"}
{"task_id":"MBXP_TS\/776","completion":"    let count = 0;\n    for (let i = 1; i < test_str.length - 1; i++) {\n        if (test_str[i] == 'a' && test_str[i - 1] == 'e' && test_str[i + 1] == 'e') {\n            count++;\n        } else if (test_str[i] == 'e' && test_str[i - 1] == 'a' && test_str[i + 1] == 'a') {\n            count++;\n        } else if (test_str[i] == 'i' && test_str[i - 1] == 'o' && test_str[i + 1] == 'o') {\n            count++;\n        } else if (test_str[i] == 'o' && test_str[i - 1] == '","language":"typescript"}
{"task_id":"MBXP_TS\/777","completion":"    const map = new Map();\n    for(let i=0;i<arr.length;i++){\n        if(map.has(arr[i])){\n            map.set(arr[i], map.get(arr[i]) + 1);\n        } else {\n            map.set(arr[i], 1);\n        }\n    }\n    return Array.from(map.entries())\n    .filter((x) => x[1] === 1)\n    .map((x) => x[0])\n    .reduce((sum, y) => sum + y, 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/778","completion":"  if (list1 == null || list1.length === 0)\n    return [];\n\n  const result = [];\n  result[result.length] = [list1[0]];\n  const map = {};\n\n  for (let i = 1; i < list1.length; i++) {\n    const item = list1[i];\n    const last = result[result.length - 1];\n\n    if (item === last[last.length - 1]) {\n      last.push(item);\n    } else {\n      result[result.length] = [item];\n    }\n\n    if (!map[item]) {\n      map[item] = true;\n    }\n  }\n\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/779","completion":"  const map = new Map();\n  for (const [i, x] of list1.entries()) {\n    if (x instanceof Array) {\n      const sublists = map.get(x);\n      if (sublists) {\n        map.set(x, sublists + 1);\n      } else {\n        map.set(x, 1);\n      }\n    }\n  }\n  return map;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/780","completion":"    const result = []\n    const combinations = new Array<number>()\n    const sum = x => x.reduce((a, b) => a + b)\n\n    for (let i = 0; i < test_list.length; i++) {\n        const current = test_list[i]\n        const current_sum = sum(current)\n        if (!combinations.find(x => x === current_sum)) {\n            result.push(current)\n            combinations.push(current_sum)\n            for (let j = i + 1; j < test_list.length; j++) {\n                const sum_two = sum(current + test_list[j])\n                if (!combinations.find(x => x === sum_two)) {\n                    combinations.push(sum_two)\n                    result.push(current.concat(test_list[j]))\n                }\n            }\n        }\n    }\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/781","completion":"    var sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum % 2 == 0 ? \"Even\" : \"Odd\"\n}","language":"typescript"}
{"task_id":"MBXP_TS\/782","completion":"    \/\/ TODO: implement the method here\n    \/\/ return the sum\n    \/\/ O(n^2)\n    if (!arr.length) return 0;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let temp = arr[i];\n        for (let j = i; j < arr.length; j++) {\n            temp += arr[j];\n        }\n        sum += temp;\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/783","completion":"  const max = Math.max(r, g, b),\n        min = Math.min(r, g, b);\n  const d = max - min;\n  let h;\n  if (d === 0) {\n    h = 0;\n  } else if (max === r) {\n    h = 60 * ((g - b) \/ d) % 360;\n  } else if (max === g) {\n    h = 60 * ((b - r) \/ d + 2);\n  } else if (max === b) {\n    h = 60 * ((r - g) \/ d + 4);\n  }\n  const s = max === 0 ? 0 : d \/ max;\n  return [h, s * 100, max * 100];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/784","completion":"    let maxEven = 0;\n    let maxOdd = 0;\n    for (let i = 0; i < list1.length; i++) {\n        let x = list1[i];\n        if (x % 2 == 0) {\n            maxEven = Math.max(maxEven, x);\n        }\n        else {\n            maxOdd = Math.max(maxOdd, x);\n        }\n    }\n    return maxEven * maxOdd;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/785","completion":"    \/\/ convert the string into a list of integers\n    \/\/ convert the list of integers into a tuple\n\n    let list = test_str.split(',').map(e => parseInt(e))\n    let tuple = []\n    for (let i = 0; i < list.length; i++) {\n        tuple.push(list[i])\n    }\n    return tuple;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/786","completion":"    let start = 0;\n    let end = a.length - 1;\n    let mid = Math.floor((start + end) \/ 2);\n    let i = a.length - 1;\n    while (start <= end) {\n        mid = Math.floor((start + end) \/ 2);\n        i = a.length - 1;\n        while (a[mid] < x)\n            i = mid;\n        if (mid > 0 && a[mid - 1] > x) {\n            return mid - 1;\n        } else if (a[mid] > x) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n    }\n    return i;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/787","completion":"    if (text.includes(\"a\")) {\n        if (text.includes(\"b\")) {\n            return \"Found a match!\";\n        } else {\n            return \"Not matched!\";\n        }\n    } else {\n        return \"Not matched!\";\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/788","completion":"    \/\/ TODO: Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/789","completion":"    return (2*s*l)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/790","completion":"    let even = 0\n    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0 && nums[i] % 2 == 0) even += 1\n    }\n    return even === nums.length \/ 2\n}","language":"typescript"}
{"task_id":"MBXP_TS\/791","completion":"  let ret = []\n  for (let i = 0; i < test_tup.length; i++) {\n    if (typeof test_tup[i] == 'number') {\n      ret.push(test_tup[i])\n    }\n    if (typeof test_tup[i] == 'object' && test_tup[i] != null) {\n      let n_tup = remove_nested(test_tup[i])\n      ret.push(n_tup)\n    }\n  }\n  return ret\n}","language":"typescript"}
{"task_id":"MBXP_TS\/792","completion":"    return input_list.length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/793","completion":"    let start = 0, end = n;\n    while (start + 1 < end) {\n        const mid = Math.floor((start + end) \/ 2);\n        if (arr[mid] >= x)\n            end = mid;\n        else\n            start = mid;\n    }\n    if (arr[start] === x) return start;\n    if (arr[end] === x) return end;\n    return -1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/794","completion":"    let result = '';\n\n    if (text.includes('a') && text.endsWith('b')) {\n        result = 'Found a match!';\n    } else {\n        result = 'Not matched!';\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/795","completion":"    \/\/ TODO\n    const heap = new Heap(function(a, b) {\n        return a.price - b.price;\n      });\n    for (let i = 0; i < items.length; i++) {\n        heap.push(items[i]);\n    }\n    const result = [];\n    while (heap.size() > 0 && result.length < n) {\n        result.push(heap.pop());\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/796","completion":"  let sum = 0\n  for (let item of dict) {\n    sum += item[1]\n  }\n  return sum\n}","language":"typescript"}
{"task_id":"MBXP_TS\/797","completion":"    \/\/ TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/798","completion":"    return arr.reduce((a, b) => a + b);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/799","completion":"  const r = (n << d) | (n >>> (32 - d));\n  return r;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/800","completion":"    return text.replace(\/\\s\/g,'');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/801","completion":"    \/\/ Your code here\n    return 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/802","completion":"    if (n >= 0) return count_Rotation_recursive(arr, 0, n-1)\n    else return count_Rotation_recursive(arr, n, arr.length-1)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/803","completion":"    let left = 0;\n    let right = Math.floor(Math.sqrt(n));\n    while (left <= right) {\n        const mid = Math.floor((left + right)\/2);\n        if (mid * mid == n) return true;\n        else if (mid * mid < n) left = mid + 1;\n        else right = mid - 1;\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/804","completion":"    if (arr.length === 1) return true;\n    let product = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n === 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/805","completion":"    return lists.reduce((a, b) => a.concat(b)).sort((a,b)=>b-a).find(a=>a>0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/806","completion":"    let count = 0;\n    let res = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= 'A' && test_str[i] <= 'Z') {\n            count++;\n        } else {\n            count = 0;\n        }\n        if (count > res) {\n            res = count;\n        }\n    }\n    return res;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/807","completion":"    \/**\n     * Your code here\n     *\/\n}","language":"typescript"}
{"task_id":"MBXP_TS\/808","completion":"  \/\/ your code here\n  return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/809","completion":"    let tuple1 = Object.freeze(test_tup1);\n    let tuple2 = Object.freeze(test_tup2);\n\n    return tuple2.every(elem => elem < tuple1.indexOf(elem));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/810","completion":"    return (new Array(a)).fill(0).map((el, index) => String.fromCharCode(el + 97 + c + (index + b) % d)).join('');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/811","completion":"    let map1 = {}\n    let map2 = {}\n    for (let [key, value] of test_list1) {\n        if (map1[value] === undefined) {\n            map1[value] = key\n        }\n    }\n    for (let [key, value] of test_list2) {\n        if (map2[value] === undefined) {\n            map2[value] = key\n        }\n    }\n    for (let key in map1) {\n        if (map2[key] !== map1[key]) {\n            return false\n        }\n    }\n    return true\n}","language":"typescript"}
{"task_id":"MBXP_TS\/812","completion":"    \/\/ TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/813","completion":"  let length = 0;\n  for(let i = 0 ; i < str1.length ; i++) {\n    length++;\n  }\n  return length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/814","completion":"    let area = p * q\n    return area\n}","language":"typescript"}
{"task_id":"MBXP_TS\/815","completion":"    \/\/ we need to create a set for each of the 26 digits \n    \/\/ the set will contain the value of the least significant digit\n    let countSet = new Array(26).fill(0);\n    let result = new Array(n).fill(-1);\n    for (let i = 0; i < n; i++) {\n        let num = arr[i];\n        let index = num - 1;\n        countSet[index]++;\n    }\n    \/\/ iterate through the set and push the values into result array\n    for (let i = 0; i < 26; i++) {\n        while (countSet[i] > 0) {\n            result[countSet[i]] = (result[countSet[i]] === -1) ? i + 1 : result[countSet[i]];\n            countSet[i]--;\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/816","completion":"  let arr = [];\n  for (let i = 0; i < test_tup.length; i++) {\n    arr.push(test_tup[i]);\n  }\n  return arr;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/817","completion":"    return nums.filter(num => {return num % m === 0 || num % n === 0})\n}","language":"typescript"}
{"task_id":"MBXP_TS\/818","completion":"    return str.match(\/[a-z]\/g) ? str.match(\/[a-z]\/g).length : 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/819","completion":"    \/\/ Count the frequency of consecutive duplicate elements.\n    const freq = [];\n    for (let i = 0; i < lists.length; i++) {\n        const item = lists[i];\n        if (freq[item]) {\n            freq[item]++;\n        }\n        else {\n            freq[item] = 1;\n        }\n    }\n\n    \/\/ Create two sublists, one for keys, one for values.\n    const sublists = [];\n    const sublist = [];\n    for (let item in freq) {\n        sublists.push(item);\n        sublist.push(freq[item]);\n    }\n\n    \/\/ Sort the values.\n    sublists.sort();\n    sublist.sort((a,b) => a - b);\n\n    return [sublists, sublist];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/820","completion":"    \/\/ TODO: Your code here\n    return true\n}","language":"typescript"}
{"task_id":"MBXP_TS\/821","completion":"    const result = new Map();\n    \/\/ for (const key of dict1) {\n    \/\/     result.set(key, dict1.get(key));\n    \/\/ }\n    \/\/ for (const key of dict2) {\n    \/\/     result.set(key, dict2.get(key));\n    \/\/ }\n    dict1.forEach(function (value, key) {\n        result.set(key, value);\n    });\n    dict2.forEach(function (value, key) {\n        result.set(key, value);\n    });\n\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/822","completion":"\tvar pattern = \/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$\/;\n\tvar m = p.match(pattern);\n\treturn (m != null);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/823","completion":"    return \"string doesnt start with the given substring\";\n}","language":"typescript"}
{"task_id":"MBXP_TS\/824","completion":"    \/\/ TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/825","completion":"  \/\/ your code here\n  return nums.filter((x,i) => list_index.includes(i));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/826","completion":"    \/\/ TODO: Write your code here\n    return \"Not implemented\";\n}","language":"typescript"}
{"task_id":"MBXP_TS\/827","completion":"    let sum = 0;\n    list1.forEach(item => sum += item[C])\n    return sum\n}","language":"typescript"}
{"task_id":"MBXP_TS\/828","completion":"  let result = [];\n  const chars = string0.split(\"\");\n  for (char of chars) {\n    result.push(char.codePointAt(0));\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/829","completion":"  const counter = new Map();\n  for (const s of input) {\n    if (counter.has(s)) {\n      counter.set(s, counter.get(s) + 1);\n    } else {\n      counter.set(s, 1);\n    }\n  }\n  let max = 0;\n  let sec = '';\n  for (const [key, value] of counter) {\n    if (value > max) {\n      sec = key;\n      max = value;\n    } else if (value === max) {\n      sec = sec > key ? sec : key;\n    }\n  }\n  return sec;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/830","completion":"    let factor = math.pow(10, digits)\n    return (math.round(a * factor) \/ factor).toFixed(digits)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/831","completion":"    \/\/ Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/832","completion":"    let result = 0;\n\n    const extract_number = \/(\\d+)\/;\n\n    for (let element of input.match(extract_number)) {\n        result = Math.max(element, result);\n    }\n\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/833","completion":"    const res = [];\n    dict.forEach((v, k) => res.push(k));\n    return res;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/834","completion":"  const arr = [];\n  const len = n * n;\n\n  for (let i = 0; i < len; i++) {\n    arr[i] = (i + 1) % 2 === 1 ? 1 : 0;\n  }\n\n  const spiral = (arr: Array<Array<number>>, start: number, end: number) => {\n    const next = [];\n\n    for (let i = start; i <= end; i++) {\n      next.push(arr[i][start]);\n    }\n\n    for (let i = start + 1; i <= end; i++) {\n      next.push(arr[end][i]);\n    }\n\n    for (let i = end - 1; i >= start; i--) {\n      next.push(arr[i][end]);\n    }\n\n    for (let i = end - 1; i >= start + 1; i--)","language":"typescript"}
{"task_id":"MBXP_TS\/835","completion":"    const m = (y2 - y1) \/ (x2 - x1);\n    const b = y1 - m * x1;\n\n    return m;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/836","completion":"    const len = a.length;\n    let result = 0;\n    let maxSum = 0;\n    for (let i = 0; i < len; i++) {\n        let tempSum = 0;\n        tempSum += a[i];\n        maxSum = Math.max(maxSum, tempSum);\n        if (i >= size - 1) {\n            if (tempSum > maxSum) {\n                result = tempSum;\n            }\n            break;\n        }\n        for (let j = i + 1; j < len; j++) {\n            tempSum += a[j];\n            maxSum = Math.max(maxSum, tempSum);\n            if (tempSum > maxSum) {\n                result = maxSum;\n                break;\n            }\n        }\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/837","completion":"    let sum = 0\n    for (let i = 1; i <= n; i++) {\n        let cube = (i * i * i)\n        sum += cube\n    }\n    return sum\n}","language":"typescript"}
{"task_id":"MBXP_TS\/838","completion":"    \/\/ Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/839","completion":"\treturn tup.sort((a, b) => {\n\t\treturn (a[0] > b[0]) ? 1 : ((a[0] < b[0]) ? -1 : 0)\n\t})\n}","language":"typescript"}
{"task_id":"MBXP_TS\/840","completion":"    const roots = [\n        { 'x': -b \/ (2 * a), 'value': -b \/ (2 * a) },\n        { 'x': (-b + Math.sqrt(b * b - 4 * a * c)) \/ (2 * a), 'value': (-b + Math.sqrt(b * b - 4 * a * c)) \/ (2 * a) },\n        { 'x': (-b - Math.sqrt(b * b - 4 * a * c)) \/ (2 * a), 'value': (-b - Math.sqrt(b * b - 4 * a * c)) \/ (2 * a) }\n    ];\n\n    for (const root of roots) {\n        const x = root.x;\n        if ((x > 0 && root.value < 0) || (x","language":"typescript"}
{"task_id":"MBXP_TS\/841","completion":"    \n}","language":"typescript"}
{"task_id":"MBXP_TS\/842","completion":"    \/\/ code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/843","completion":"    const heap = new Heap(function (a, b) {\n        return a < b ? -1 : 1;\n    });\n    let uglyNumber = 1;\n    let index = 0;\n    while (heap.size() < n) {\n        uglyNumber = uglyNumber * primes[index];\n        index++;\n        heap.push(uglyNumber);\n    }\n    return uglyNumber;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/844","completion":"  const res = n % 2 === 0 ? n \/ 2 : (n - 1) \/ 2\n  return res - k \n}","language":"typescript"}
{"task_id":"MBXP_TS\/845","completion":"    if (n < 0) {\n        throw new Error(\"Input number should be greater than 0\");\n    }\n    if (n == 0) {\n        return 1;\n    }\n    var result = math.log(n, 10) + 1;\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/846","completion":"    let dp = new Array(n+1).fill(0);\n    dp[0] = arr[0]\n    dp[1] = Math.max(arr[0], arr[1])\n    let maxDep = dep[0]\n    for (let i = 2; i <= n; i++) {\n        dp[i] = Math.max(dp[i - 1], dp[i - 2] + arr[i - 1])\n        maxDep = Math.max(maxDep, dep[i - 1])\n    }\n    let ans = 0\n    for (let i = 1; i <= n; i++) {\n        if (maxDep >= arr[i]) {\n            ans++\n        }\n        if (maxDep >= dep[i] && dp[i] <= maxDep) {\n            ans++\n        }\n    }\n    return ans\n}","language":"typescript"}
{"task_id":"MBXP_TS\/847","completion":"  return [xs[0]];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/848","completion":"  return 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/849","completion":"    const array = [2];\n\n    for (let i = 3; i <= N; i++) {\n        let isPrime = true;\n        for (let j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) array.push(i);\n    }\n\n    return array.reduce((acc, cur) => acc + cur);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/850","completion":"    \/\/ if any of the sides are zero\n    if (a == 0 || b == 0 || c == 0) {\n        return false;\n    }\n\n    \/\/ if any of the sides are negative\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n\n    \/\/ If any of the angles are greater than 90\n    if (a + b + c >= 180) {\n        return false;\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/851","completion":"    let S = 0;\n    let i = 1;\n\n    while(N > i)\n    {\n        if(N % i == 0)\n        {\n            S += 1\/i;\n        }\n        i++;\n    }\n\n    return Sum + S;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/852","completion":"    return num_list.filter(function(num){\n        return num >= 0;\n    });\n}","language":"typescript"}
{"task_id":"MBXP_TS\/853","completion":"  let sum = 0\n  let result = math.factorial(n)\n  for(let i = 1; i < n; i++) {\n    if (result % i == 0) {\n      sum += i\n    }\n  }\n  return sum\n}","language":"typescript"}
{"task_id":"MBXP_TS\/854","completion":"    return rawheap.map(x => x)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/855","completion":"    let result = (x % 2 == 0);\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/856","completion":"    let swaps = 0;\n    let i = 0;\n    while (i < n) {\n        if (arr[i] === 0) {\n            i++;\n            continue;\n        }\n        if (arr[i] == 1) {\n            let j = i;\n            let k = i + 1;\n            while (k < n) {\n                if (arr[k] === 0) {\n                    break;\n                }\n                k++;\n            }\n            if (k == n) {\n                break;\n            }\n            arr[j] = 0;\n            arr[k] = 1;\n            swaps++;\n            i = k + 1;\n        }\n    }\n    return swaps;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/857","completion":"  const list2 = list1.map(x => x.split(''));\n  return list2;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/858","completion":"    let list = 1;\n    let num = 0;\n    for (let i=0;i<input_list.length;i++) {\n        if (Array.isArray(input_list[i])) {\n            num = num + count_list(input_list[i]);\n        } else {\n            num = num + 1;\n        }\n    }\n    return num * list;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/859","completion":"  \/\/ TODO: your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/860","completion":"    let regex = \/^[a-zA-Z0-9]*$\/\n    return regex.test(string0) ? 'Accept' : 'Discard';\n}","language":"typescript"}
{"task_id":"MBXP_TS\/861","completion":"    return texts.filter( (x: string) => {\n        let s1 = [...x];\n        let s2 = [...str];\n        return s1.sort().join() === s2.sort().join()\n    })\n}","language":"typescript"}
{"task_id":"MBXP_TS\/862","completion":"    let output = []\n    let text_arr = text.split(\" \")\n    for (let i=0; i<text_arr.length; i++){\n        let word = text_arr[i]\n        let counter = 0\n        for (let j=0; j<text_arr.length; j++){\n            if (text_arr[j] === word){\n                counter += 1\n            }\n        }\n        output.push([word, counter])\n    }\n    output.sort(function(a,b) {\n        return b[1] - a[1]\n    })\n    return output.slice(0, n)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/863","completion":"    let dp = [];\n    for (let i = 0; i < n; i++) {\n        dp.push([]);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let len = 2; len <= n; len++) {\n        for (let i = 0; i <= n - len; i++) {\n            let j = i + len - 1;\n            dp[i][j] = dp[i + 1][j - 1] + 1;\n            for (let k = i + 1; k < j; k++) {\n                if ","language":"typescript"}
{"task_id":"MBXP_TS\/864","completion":"    \/\/ your code here\n    let result = []\n    texts.forEach(function (element) {\n        if (element.length > 1) {\n            let rev = element.split(\"\").reverse().join(\"\")\n            if (element === rev) {\n                result.push(element)\n            }\n        }\n    })\n    return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/865","completion":"    return nums.map(x => x * n);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/866","completion":"    return monthname2.length == 3 ? true : false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/867","completion":"\tlet total=0;\n\tfor (let i = 0; i < arr.length; i++) {\n\t\ttotal+=arr[i];\n\t}\n\tif(total%2!=0){\n\t\treturn Math.min(...arr);\n\t}else{\n\t\tlet min=n;\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif(arr[i]<min){\n\t\t\t\tmin=arr[i];\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}","language":"typescript"}
{"task_id":"MBXP_TS\/868","completion":"    const array = a.split(\" \");\n    const lastWord = array[array.length - 1];\n    const wordLength = lastWord.length;\n    return wordLength;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/869","completion":"  var res = [];\n  var tmp = [];\n  var i = 0;\n\n  while (i < list1.length) {\n    if (list1[i][0] <= leftrange && rigthrange >= list1[i][0] ) {\n      tmp.push(list1[i][0]);\n      tmp.push(list1[i][1]);\n      res.push(tmp);\n      tmp = [];\n    }\n\n    if (list1[i][0] > rigthrange || rigthrange < list1[i][0]) {\n      tmp.push(list1[i][0]);\n      tmp.push(list1[i][1]);\n      res.push(tmp);\n      tmp = [];\n    }\n\n    i++;\n  }\n\n  return res;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/870","completion":"    \/\/ your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/871","completion":"    if(string1.length !== string2.length) {\n        return false\n    }\n    return (string1+string1).includes(string2);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/872","completion":"  if (list1.length > list2.length) {\n    return false\n  }\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length != list2[i].length) {\n      return false\n    }\n    for (let j = 0; j < list1[i].length; j++) {\n      if (list1[i][j] != list2[i][j]) {\n        return false\n      }\n    }\n  }\n  return true\n}","language":"typescript"}
{"task_id":"MBXP_TS\/873","completion":"    if (n < 2)\n        return n;\n    else\n        return fibonacci(n - 1) + fibonacci(n - 2);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/874","completion":"    let x = 0;\n    for (let i = 0; i < str2.length; i++) {\n        if (str1.charAt(x) == str2.charAt(i))\n            x++;\n        else\n            x = 0;\n    }\n    return x == str1.length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/875","completion":"    const dict = {};\n    test_list.forEach(tuple => {\n        const diff = Math.abs(tuple[0] - tuple[1]);\n        dict[diff] = dict[diff] ? dict[diff] : [];\n        dict[diff].push(tuple);\n    });\n    return Object.keys(dict).sort((a, b) => b - a)[0];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/876","completion":"    let max = x;\n    if (y > max) {\n        max = y;\n    }\n\n    if (max == 1) {\n        return 1;\n    }\n\n    const div = max \/ gcd(x, y);\n\n    return div * x * y;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/877","completion":"    \/\/ let charArray = str.split(\"\");\n    let charArray = str.split(\"\");\n    charArray.sort();\n    return charArray.join(\"\");\n}","language":"typescript"}
{"task_id":"MBXP_TS\/878","completion":"  return test_tuple.every(x => K.includes(x));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/879","completion":"    \/\/ write your code here\n    return `Not matched!`;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/880","completion":"    const D = b ** 2 - 4 * a * c\n    const root1 = (-b + Math.sqrt(D)) \/ (2 * a)\n    const root2 = (-b - Math.sqrt(D)) \/ (2 * a)\n\n    if (root1 === root2) {\n        return `1 solution`\n    }\n    if (root1 > root2) {\n        return `${root1} solutions`\n    }\n    return `${root2} solutions`\n}","language":"typescript"}
{"task_id":"MBXP_TS\/881","completion":"  const even = list1.filter(x => x % 2 === 0);\n  const odd = list1.filter(x => x % 2 !== 0);\n  return even.reduce((a, b) => a + b) + odd.reduce((a, b) => a + b);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/882","completion":"    return 2 * (b + h);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/883","completion":"    return nums.filter(x => x % m === 0 && x % n === 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/884","completion":"    if (n >= l && n <= r) {\n        return true;\n    } else {\n        return false;\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/885","completion":"    if (str1.length !== str2.length) {\n        return false;\n    }\n\n    const strMap = new Map();\n    for (let i = 0; i < str1.length; i++) {\n        const strChar1 = str1[i];\n        const strChar2 = str2[i];\n\n        if (strMap.has(strChar1) && strMap.get(strChar1) !== strChar2) {\n            return false;\n        } else if (!strMap.has(strChar1)) {\n            strMap.set(strChar1, strChar2);\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/886","completion":"    let sum = 0;\n    for (let number of numbers) {\n        sum += number;\n    }\n    return sum \/ numbers.length;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/887","completion":"    return (n & 1) == 1;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/888","completion":"    \/\/ TODO: Define your solution here.\n    const test1 = test_tup1.map(elem => elem.slice())\n    const test2 = test_tup2.map(elem => elem.slice())\n    let temp1 = test1.slice()\n    let temp2 = test2.slice()\n\n    \/\/let ans = test1.map(elem => elem.slice())\n    \/\/let ans = []\n    let ans = []\n    let i = 0\n    let j = 0\n    while (i<test1.length && j<test2.length) {\n        if (temp1[i][0] < temp2[j][0]) {\n            ans.push([temp1[i][0], temp1[i][1]])\n            i+=1\n        }\n        else if (temp1[i][0] > temp2[j][0]) {\n            ans.push([temp2[j][0], temp2[j][1]])\n            j+=1\n        ","language":"typescript"}
{"task_id":"MBXP_TS\/889","completion":"    \/\/ Return an empty list if the argument is an empty list\n    if (lists.length == 0) {\n        return [];\n    }\n    \n    \/\/ Create an empty list to hold the reversed lists\n    const reversed_lists = [];\n    \n    \/\/ Loop through the lists of lists and push each reversed list to the reversed_lists\n    \/\/ at the appropriate index\n    lists.forEach(list => {\n        list.reverse();\n        reversed_lists.push(list);\n    });\n    \n    return reversed_lists;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/890","completion":"    let i = 0\n    for (let j = 0; j < arr1.length; j++) {\n        if (arr1[j] != arr2[i])\n            i = 0\n        else {\n            if (arr1.length - 1 == j)\n                return j\n            i++\n        }\n    }\n    return -1\n}","language":"typescript"}
{"task_id":"MBXP_TS\/891","completion":"    let aLength = A.toString().length;\n    let bLength = B.toString().length;\n    return aLength == bLength;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/892","completion":"    return text.split(' ').join('');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/893","completion":"    \/\/ TODO: your code here\n    const lastElement = lst.map(x => x[x.length - 1]);\n    return lastElement;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/894","completion":"    let arr = test_str.split(',');\n    return arr.map((n) => parseFloat(n));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/895","completion":"    if (A.length === 0)\n        return 0;\n\n    const dp = new Array(A.length + 1);\n    dp[0] = 0;\n    dp[1] = A[0];\n\n    for (let i = 2; i < A.length; i++) {\n        dp[i] = Math.max(dp[i - 1], dp[i - 2] + A[i]);\n    }\n\n    return dp[A.length - 1];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/896","completion":"    \/\/ TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/897","completion":"    return sentence.includes(word);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/898","completion":"    return []\n}","language":"typescript"}
{"task_id":"MBXP_TS\/899","completion":"    if (arr.length === 1) {\n        return true;\n    }\n    let leftMax = -Infinity,\n        rightMax = -Infinity;\n    for (const v of arr) {\n        if (v > leftMax) {\n            leftMax = v;\n        }\n    }\n    if (leftMax < n \/ 2) {\n        return false;\n    }\n    for (const v of arr) {\n        if (v < rightMax) {\n            return false;\n        }\n        if (v > leftMax && v < n) {\n            rightMax = v;\n        }\n    }\n    return true;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/900","completion":"    return string0.startsWith('5');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/901","completion":"  \/\/ TODO: Implement me!\n}","language":"typescript"}
{"task_id":"MBXP_TS\/902","completion":"    let new_dict = new Map();\n    for (let [key, val] of d1.entries()) {\n        if (d2.has(key)) {\n            new_dict.set(key, val + d2.get(key));\n        } else {\n            new_dict.set(key, val);\n        }\n    }\n    for (let [key, val] of d2.entries()) {\n        if (!d1.has(key)) {\n            new_dict.set(key, val);\n        }\n    }\n    return new_dict;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/903","completion":"  let count = 0;\n  while(n > 0) {\n      if ((n & 1) === 0) {\n          count++;\n      }\n      n = n >>> 1;\n  }\n  return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/904","completion":"    return (x % 2 === 0) ? true : false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/905","completion":"    if (n < 0)\n        throw new Error('Invalid input');\n\n    return Math.pow(binom(n, 2), 2);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/906","completion":"  let regex = \/(?:(?:https:\\\/\\\/www.)(?:washingtonpost|indiatoday|economictimes).*\\\/news\\\/)([0-9]{4})\\\/([0-9]{2})\\\/([0-9]{2})\\\/(.+)$\/;\n  return [(url.match(regex)[1], url.match(regex)[2], url.match(regex)[3])]\n}","language":"typescript"}
{"task_id":"MBXP_TS\/907","completion":"  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let lucky = Math.floor(Math.random() * 100);\n    result.push(lucky);\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/908","completion":"    \/\/ [3, 5, 7, 9]\n    let low = 0;\n    let high = n - 1;\n    \/\/[1, 2, 3, 4, 5, 6, 7, 8]\n    while (low < high) {\n        let mid = Math.floor((high + low) \/ 2);\n        if (mid === 0) {\n            if (arr[0] > n) {\n                return -1;\n            } else {\n                return 0;\n            }\n        }\n        if (mid === n - 1) {\n            if (arr[n - 1] > n) {\n                return n - 1;\n            } else {\n                return n - 2;\n            }\n        }\n        if (arr[mid] > arr[mid - 1]) {\n            if (arr[mid] > n) ","language":"typescript"}
{"task_id":"MBXP_TS\/909","completion":"  const numStr = num.toString()\n  if (numStr.length == 1) return num\n\n  let palindrome = \"\"\n  for (let i = numStr.length; i >= 0; i--) {\n    palindrome = numStr.substring(i - 1, i + 1) + palindrome\n  }\n\n  if (palindrome == numStr) return 0\n  return parseInt(palindrome)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/910","completion":"    return !isNaN(new Date(m + '\/' + d + '\/' + y).getDate());\n}","language":"typescript"}
{"task_id":"MBXP_TS\/911","completion":"    \/\/ TODO: Write your code here\n    let maxHeap = new Heap(function (a, b) {\n        return b - a\n    });\n    for (let i = 0; i < nums.length; i++) {\n        maxHeap.insert(nums[i]);\n    }\n    let minHeap = new Heap(function (a, b) {\n        return a - b\n    });\n    for (let i = 0; i < nums.length; i++) {\n        minHeap.insert(maxHeap.extract());\n    }\n\n    let maxProduct = nums[0] * nums[1] * nums[2];\n    for (let i = 0; i < nums.length - 2; i++) {\n        if (nums[i] * nums[i + 1] * nums[i + 2] > maxProduct) {\n            maxProduct = nums[i] * nums[i + 1] * nums[","language":"typescript"}
{"task_id":"MBXP_TS\/912","completion":"  let result = 0;\n  const count = Math.ceil(Math.log2(n + 1));\n  const base = 2;\n\n  for (let i = 0; i < count; i++) {\n    result = result + (Math.pow(base, i) * m);\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/913","completion":"    return string0[string0.length - 1].match(\/[0-9]\/);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/914","completion":"    if (s.length % 2 != 0) return false\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i]\n        if (char == s[i + 1]) count++\n    }\n    return count == 2\n}","language":"typescript"}
{"task_id":"MBXP_TS\/915","completion":"    array_nums.sort((a, b) => a - b);\n    const new_array = [];\n    for (let i = 0; i < array_nums.length; i++) {\n        if (array_nums[i] < 0) {\n            for (let j = array_nums.length - 1; j >= i; j--) {\n                new_array.push(array_nums[j]);\n            }\n            new_array.push(array_nums[i]);\n        } else {\n            new_array.push(array_nums[i]);\n        }\n    }\n    return new_array;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/916","completion":"  \/\/ 1. Initialize start and end with index 0 and arr_size\n  let start = 0;\n  let end = arr_size - 1;\n\n  \/\/ 2. Loop while start <= end\n  while (start <= end) {\n    \/\/ 3. Find the middle element\n    const mid = start + ((end - start) >> 1);\n\n    \/\/ 4. Compare sum of elements to given sum.\n    if (A[mid] + A[mid + 1] > sum) {\n      \/\/ 5. if sum > sum of three elements, then start from the middle + 1\n      end = mid - 1;\n    } else {\n      \/\/ 6. if sum <= sum of three elements, then start from the middle\n      start = mid + 1;\n    }\n  }\n\n  \/\/ 7. If start > end, then there is no triplet.\n  if (start > end) {\n    return","language":"typescript"}
{"task_id":"MBXP_TS\/917","completion":"    if (text.length <= 0) return ('Not matched!');\n    let matches = [],\n        start = 0;\n    \n    for (let i = 0; i < text.length; i++) {\n        let char = text.charAt(i);\n        if (char >= 'A' && char <= 'Z') {\n            start = i;\n            matches.push(i);\n        }\n    }\n    \n    if (matches.length <= 0) return ('Not matched!');\n    let result = '';\n    for (let i = 0; i < matches.length; i++) {\n        let match = matches[i];\n        let sequence = '';\n        for (let j = start; j <= match; j++) {\n            sequence += text.charAt(j);\n        }\n        result += `Found a match! ${sequence}\\n`;\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/918","completion":"  \/\/ TODO\n}","language":"typescript"}
{"task_id":"MBXP_TS\/919","completion":"  \/\/ TODO: implement\n  \/* START SOLUTION *\/\n  let result = 1;\n  for(let i = 0; i < items.length; i++){\n    result *= items[i];\n  }\n  return result;\n  \/* END SOLUTION *\/\n}","language":"typescript"}
{"task_id":"MBXP_TS\/920","completion":"  var removed = test_list.filter(tuple => !tuple.includes(undefined));\n  return JSON.stringify(removed);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/921","completion":"  let chunked_array = [];\n  let index = 0;\n  \n  for (let i = 0; i < N; i++) {\n      chunked_array[i] = [];\n  }\n  while (index < test_tup.length) {\n      for (let i = 0; i < N; i++) {\n          chunked_array[i].push(test_tup[index]);\n      }\n      index++;\n  }\n  \n  return chunked_array;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/922","completion":"    const sorted = arr.sort((a, b) => a - b);\n    return (sorted[arr.length - 1] * sorted[arr.length - 2]) < 0 ? [-(sorted[arr.length - 1] * sorted[arr.length - 2]), sorted[arr.length - 1] * sorted[arr.length - 2]] : [sorted[arr.length - 1] * sorted[arr.length - 2], sorted[arr.length - 1] * sorted[arr.length - 2]];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/923","completion":"    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (X.charAt(i) === Y.charAt(j)) {\n                dp[i + 1][j + 1] = dp[i][j] + 1;\n            } else {\n                dp[i + 1][j + 1] = Math.max(dp[i][j + 1], dp[i + 1][j]);\n            }\n        }\n    }\n    return dp[m][n];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/924","completion":"    return x > y ? x : y;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/925","completion":"    let result = 1;\n    for (const num of nums) {\n        result *= num;\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/926","completion":"    const arr = [];\n    for (let i = 1; i <= n; i++) {\n        if (i === m) {\n            return arr.pop();\n        }\n        arr.push(i);\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/928","completion":"    const date = dt.split('-').map(str => parseInt(str));\n    return (date[1] < 10 ? '0' : '') + date[1] + '-' + (date[2] < 10 ? '0' : '') + date[2] + '-' + date[0];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/929","completion":"    const tuple = []\n    tuple.push(...tuplex)\n    return tuple.filter(x => x === value).length;\n  }","language":"typescript"}
{"task_id":"MBXP_TS\/930","completion":"    if (text.match(\/a{0,}b\/g)) {\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}","language":"typescript"}
{"task_id":"MBXP_TS\/931","completion":"    let sum = 0;\n    for (let number = 1; number <= number0; number++) {\n        sum += 3 * number ** 2 - 2 * number - 1;\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/932","completion":"  let seen = {}\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    let x = l[i];\n    if (!seen[x]) {\n      seen[x] = 1;\n      result.push(x);\n    }\n  }\n  return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/933","completion":"    return text.replace(\/([A-Z])\/g, function (letter) {\n        return \"_\" + letter.toLowerCase();\n    });\n}","language":"typescript"}
{"task_id":"MBXP_TS\/934","completion":"    const delannoy_num = [0, 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128];\n    return delannoy_num[m] + n * (n - 1) * (n - 2) * (n - 3) \/ 6","language":"typescript"}
{"task_id":"MBXP_TS\/935","completion":"  if (number0 < 0) {\n    throw new Error('Invalid argument: ' + number0);\n  }\n\n  const number = 1 << number0;\n  const product = 1 << (number0 - 1);\n\n  return ((number - 1) * product + (number - 2)) * product \/ 2;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/936","completion":"    const ord_map = new Map();\n    for (const [i, value] of ord_list.entries()) {\n        ord_map.set(value, i);\n    }\n    return test_list.map(x => {\n        const new_x = new Array(x.length);\n        for (let i = 0; i < new_x.length; i++) {\n            new_x[i] = ord_map.get(x[i]);\n        }\n        return new_x;\n    });\n}","language":"typescript"}
{"task_id":"MBXP_TS\/937","completion":"  \/\/Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/938","completion":"    let pLength = p;\n    let qLength = q;\n    let rLength = r;\n    let first = null;\n    let second = null;\n    let third = null;\n    let firstP = null;\n    let firstQ = null;\n    let firstR = null;\n    let secondP = null;\n    let secondQ = null;\n    let secondR = null;\n    let thirdP = null;\n    let thirdQ = null;\n    let thirdR = null;\n    let p1 = null;\n    let p2 = null;\n    let p3 = null;\n    let q1 = null;\n    let q2 = null;\n    let q3 = null;\n    let r1 = null;\n    let r2 = null;\n    let r3 = null;\n    for (let i = 0; i <= pLength; i++) {\n        p1 = A[i];\n        p2 = B[i];\n       ","language":"typescript"}
{"task_id":"MBXP_TS\/939","completion":"    return [...models].sort((a: Map<string, any>, b: Map<string, any>): number => {\n        return a.get('model') - b.get('model');\n    });\n}","language":"typescript"}
{"task_id":"MBXP_TS\/940","completion":"    const len = arr.length;\n    if (len <= 1) return arr;\n    build_heap(arr, len);\n    for (let i = len - 1; i >= 1; i--) {\n        swap(arr, 0, i);\n        len--;\n        heapify(arr, 0, len);\n    }\n    return arr;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/941","completion":"    let count = 0;\n    for(let i = 0; i < num.length; i++) {\n        if(num[i] instanceof Array) {\n            count += count_elim(num[i]);\n        } else if(num[i] === 'tuple') {\n            count += 1;\n        }\n    }\n    return count;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/942","completion":"    for (let i = 0; i < test_tup.length; i++) {\n        if (check_list.indexOf(test_tup[i]) >= 0) {\n            return true;\n        }\n    }\n    return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/943","completion":"    \/\/code here\n    const heap = new Heap((a, b) => {\n        if (a < b) {\n            return -1;\n        }\n        if (a > b) {\n            return 1;\n        }\n        return 0;\n    });\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (i < num1.length || j < num2.length) {\n        if (i < num1.length && j < num2.length && num1[i] < num2[j]) {\n            heap.insert(num1[i]);\n            i++;\n        } else if (i < num1.length && j < num2.length && num1[i] > num2[j]) {\n            heap.insert(num2[j]);\n            j++;\n        } else if (i < num1.length && j >= num","language":"typescript"}
{"task_id":"MBXP_TS\/944","completion":"    const textArray = text.split(\" \");\n    let number = 0;\n    for(let i = 0; i < textArray.length; i++) {\n        if(textArray[i].match(\/\\d\/)) {\n            number++;\n        }\n    }\n    return number;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/945","completion":"    return new Set(t);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/946","completion":"    let map: { [key: string]: number } = {};\n\n    for (let i = 0; i < s.length; i++) {\n        if (!map[s[i]]) {\n            map[s[i]] = 1;\n        } else {\n            map[s[i]]++;\n        }\n    }\n    let result = [];\n    for (let key in map) {\n        if (map[key] >= a) {\n            result.push([key, map[key]]);\n        }\n    }\n\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/947","completion":"    let l = 0;\n    for (let i = 0; i < list1.length; i++) {\n        let count = 0;\n        let j = 0;\n        for (let j = 0; j < list1[i].length; j++) {\n            if (list1[i].charCodeAt(j) > 96 && list1[i].charCodeAt(j) < 123) count++;\n        }\n        l = l < count ? count : l;\n    }\n    return l;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/948","completion":"    return tup1[index];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/949","completion":"  const res = test_list.map((v) => {\n    const str = v.join('');\n    let digit = 0;\n    const len = str.length;\n    while (len > 1) {\n      digit = digit + 1;\n      len = len \/ 10;\n    }\n    return [v.slice(0, digit), str.slice(digit)];\n  });\n  return res.sort((a, b) => {\n    const l = a[0].length < b[0].length ? -1 : 1;\n    return l * a[0].localeCompare(b[0]);\n  }).map((v) => v[1]).join(',');\n}","language":"typescript"}
{"task_id":"MBXP_TS\/950","completion":"    const month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    const feb = month[1];\n    const leap = year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n    const day = leap ? feb + 1 : feb;\n\n    let zodiac = ' ';\n    for (let i = 0; i < day; i++) {\n        zodiac += 'Aries';\n    }\n    if (feb == 29 && !leap) {\n        zodiac += ' Taurus';\n    }\n    for (let i = 0; i < day; i++) {\n        zodiac += ' Gemini';\n    }\n    if (feb == 29 && leap) {\n        zodiac += '","language":"typescript"}
{"task_id":"MBXP_TS\/951","completion":"    const indices1 = get_similar_indices(test_list1);\n    const indices2 = get_similar_indices(test_list2);\n    const similar_indices1 = indices1.filter(index => indices2.includes(index));\n    const similar_indices2 = indices2.filter(index => indices1.includes(index));\n    return [similar_indices1, similar_indices2];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/952","completion":"    let ncr = n;\n    for (let i = 1; i <= r; i++) {\n        ncr = (ncr * (n - i)) % p;\n    }\n    return ncr;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/953","completion":"    if (n == 0 || n == 1) return 1;\n    if (n == 2) return 2;\n    if (ar.length == 0) return 0;\n    if (ar.length == 1) return 1;\n    if (ar.length == 2) return 2;\n    \/\/ if (ar.length == 3) return 3;\n    let [a1, a2] = [ar.length - 1, ar.length - 2];\n    let min = Math.min(subset(ar.slice(0, a1), n - 1), subset(ar.slice(0, a2), n - 2));\n    let min1 = Math.min(min, subset(ar.slice(1), n - 1));\n    let min2 = Math.min(min1, subset(ar.slice(2), n - 2));\n    return 1 + Math.min(min2, subset(ar.slice(","language":"typescript"}
{"task_id":"MBXP_TS\/954","completion":"  let profit = 0;\n  if (sale_amount > actual_cost) {\n    profit = sale_amount - actual_cost;\n    console.log(profit);\n  } else {\n    console.log(undefined);\n  }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/955","completion":"\tconst sum = (n * (n + 1)) \/ 2;\n\tconst square = (n * (n + 1) * (2 * n + 1)) \/ 6;\n\n\treturn sum > square;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/956","completion":"  const regex = \/[A-Z]\/;\n  const splitedList = text.split(regex);\n  return splitedList;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/957","completion":"    \/\/ TODO: Your code here\n    return math.ceil(math.log2(n));\n}","language":"typescript"}
{"task_id":"MBXP_TS\/958","completion":"    \/\/ TODO: Your code here!\n}","language":"typescript"}
{"task_id":"MBXP_TS\/959","completion":"    const sum = lst.reduce((a, b) => a + b, 0);\n    return (sum \/ lst.length);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/960","completion":"\tlet dp = new Array(n+1);\n\tdp[0] = 1;\n\tdp[1] = 2;\n\n\tfor (let i = 2; i <= n; i++) {\n\t\tdp[i] = dp[i-1] + dp[i-2];\n\t}\n\n\treturn dp[n];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/961","completion":"    const roman = {\n        \"I\" : 1,\n        \"V\" : 5,\n        \"X\" : 10,\n        \"L\" : 50,\n        \"C\" : 100,\n        \"D\" : 500,\n        \"M\" : 1000\n    };\n    let sum = 0;\n    let curr = 1;\n    for(let i = 0; i < s.length; i++) {\n        if(roman[s[i]] < curr) {\n            sum += (roman[s[i]] - curr) * -1;\n        } else {\n            sum += roman[s[i]];\n        }\n        curr = roman[s[i]];\n    }\n    return sum;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/962","completion":"    return (2 * l + (r - 1)) * (r - l + 1) \/ 2 * l - (r + l + 1) * l \/ 2\n}","language":"typescript"}
{"task_id":"MBXP_TS\/963","completion":"    const a = (y*y) - (4*x*z);\n    const b = 2*(x*y);\n    if (a == 0) {\n        return \"no real solution\";\n    }\n    if (a > 0) {\n        return (`${\"two solutions\"}`, b);\n    }\n    return (`${\"one solution\"}`, 0);\n}","language":"typescript"}
{"task_id":"MBXP_TS\/964","completion":"  if (s.length % 2 == 0) {\n    return true;\n  }\n  return false;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/965","completion":"  let result = ''\n  let last_is_upper = false\n  for (let i = 0; i < text.length; i++) {\n    let ch = text[i]\n    if (ch === '_') {\n      last_is_upper = true\n      continue\n    }\n\n    if (last_is_upper) {\n      ch = ch.toUpperCase()\n    }\n    else {\n      ch = ch.toLowerCase()\n    }\n\n    result += ch\n    last_is_upper = false\n  }\n  return result\n}","language":"typescript"}
{"task_id":"MBXP_TS\/966","completion":"    \/\/ Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/967","completion":"    let array = string0.split(\"\")\n    array = array.filter(letter => letter.toLowerCase() == letter && letter.toUpperCase() != letter);\n    if (array.length == 0) {\n        return \"accepted\";\n    } else {\n        return \"not accepted\";\n    }\n}","language":"typescript"}
{"task_id":"MBXP_TS\/968","completion":"    let result: number = 0;\n    let min = Math.min(A, B);\n    let max = Math.max(A, B);\n\n    for (let i = min; i <= N; i++) {\n        let new_A = Math.floor(i \/ B) * B;\n        let new_B = Math.ceil(i \/ A) * A;\n\n        result = Math.max(result, (new_A - max) * (new_B - min));\n    }\n    return result;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/969","completion":"    \/\/ TODO: Your code here\n}","language":"typescript"}
{"task_id":"MBXP_TS\/970","completion":"    if (x > y) {\n        return y\n    }\n    if (x < y) {\n        return x\n    }\n    return x == y ? x : NaN\n}","language":"typescript"}
{"task_id":"MBXP_TS\/971","completion":"    const is_possible = (n - a - b - c) >= 0;\n    return is_possible ? n - a - b - c : 0;\n}","language":"typescript"}
{"task_id":"MBXP_TS\/972","completion":"  return [test_tup1, test_tup2];\n}","language":"typescript"}
{"task_id":"MBXP_TS\/973","completion":"    return s.substring(d, s.length) + s.substring(0, d)\n}","language":"typescript"}
{"task_id":"MBXP_TS\/974","completion":"  const m = A.length\n  const n = A[0].length\n  const dp = Array(m).fill([]).map(() => Array(n).fill(Infinity))\n  dp[0][0] = A[0][0]\n  for (let i = 1; i < m; i++) {\n    for (let j = 0; j <= i; j++) {\n      if (j === 0) dp[i][j] = dp[i - 1][j] + A[i][j]\n      else dp[i][j] = Math.min(dp[i - 1][j], dp[i - 1][j - 1]) + A[i][j]\n    }\n  }\n  return dp[m - 1][n - 1]\n}","language":"typescript"}
